file,type,smells,frame,itCount,describeCount
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/dev-warning.spec.js,Duplicate Assert,"{'line': 23, 'column': 2, 'index': 467}","  21 |   warning('hi');
  22 |
> 23 |   expect(warn).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  24 |
  25 |   // re-enable
  26 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/dev-warning.spec.js,Duplicate Assert,"{'line': 31, 'column': 2, 'index': 607}","  29 |   warning('hey');
  30 |
> 31 |   expect(warn).toHaveBeenCalled();
     |  ^ Duplicate Assert
  32 | });
  33 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 100, 'column': 4, 'index': 2698}","   98 |       getDimension: expect.any(Function),
   99 |     };
> 100 |     expect(registerSpy).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  101 |     expect(registerSpy).toHaveBeenCalledWith(expected);
  102 |   });
  103 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 101, 'column': 4, 'index': 2748}","   99 |     };
  100 |     expect(registerSpy).toHaveBeenCalledTimes(1);
> 101 |     expect(registerSpy).toHaveBeenCalledWith(expected);
      |    ^ Duplicate Assert
  102 |   });
  103 |
  104 |   it('should unregister itself when unmounting', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 119, 'column': 4, 'index': 3360}","  117 |     };
  118 |
> 119 |     expect(unregisterSpy).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  120 |     expect(registerSpy).toHaveBeenCalledTimes(1);
  121 |     expect(registerSpy).toHaveBeenCalledWith(expected);
  122 |     const entry = registerSpy.mock.calls[0][0];",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 120, 'column': 4, 'index': 3410}","  118 |
  119 |     expect(unregisterSpy).not.toHaveBeenCalled();
> 120 |     expect(registerSpy).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  121 |     expect(registerSpy).toHaveBeenCalledWith(expected);
  122 |     const entry = registerSpy.mock.calls[0][0];
  123 |     expect(entry).toEqual(expected);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 121, 'column': 4, 'index': 3460}","  119 |     expect(unregisterSpy).not.toHaveBeenCalled();
  120 |     expect(registerSpy).toHaveBeenCalledTimes(1);
> 121 |     expect(registerSpy).toHaveBeenCalledWith(expected);
      |    ^ Duplicate Assert
  122 |     const entry = registerSpy.mock.calls[0][0];
  123 |     expect(entry).toEqual(expected);
  124 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 126, 'column': 4, 'index': 3625}","  124 |
  125 |     wrapper.unmount();
> 126 |     expect(unregisterSpy).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  127 |     expect(unregisterSpy.mock.calls[0][0]).toBe(entry);
  128 |   });
  129 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 147, 'column': 4, 'index': 4428}","  145 |
  146 |     // asserting shape of original publish
> 147 |     expect(registerSpy).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  148 |     expect(registerSpy).toHaveBeenCalledWith(expectedInitial);
  149 |     const entry = registerSpy.mock.calls[0][0];
  150 |     expect(entry).toEqual(expectedInitial);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 148, 'column': 4, 'index': 4478}","  146 |     // asserting shape of original publish
  147 |     expect(registerSpy).toHaveBeenCalledTimes(1);
> 148 |     expect(registerSpy).toHaveBeenCalledWith(expectedInitial);
      |    ^ Duplicate Assert
  149 |     const entry = registerSpy.mock.calls[0][0];
  150 |     expect(entry).toEqual(expectedInitial);
  151 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 152, 'column': 4, 'index': 4634}","  150 |     expect(entry).toEqual(expectedInitial);
  151 |
> 152 |     expect(updateSpy).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  153 |     expect(unregisterSpy).not.toHaveBeenCalled();
  154 |
  155 |     registerSpy.mockReset();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 153, 'column': 4, 'index': 4680}","  151 |
  152 |     expect(updateSpy).not.toHaveBeenCalled();
> 153 |     expect(unregisterSpy).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  154 |
  155 |     registerSpy.mockReset();
  156 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 153, 'column': 4, 'index': 4680}","  151 |
  152 |     expect(updateSpy).not.toHaveBeenCalled();
> 153 |     expect(unregisterSpy).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  154 |
  155 |     registerSpy.mockReset();
  156 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 173, 'column': 4, 'index': 5131}","  171 |       getDimension: expect.any(Function),
  172 |     };
> 173 |     expect(updateSpy).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  174 |     // new descriptor
  175 |     expect(updateSpy.mock.calls[0][0]).toEqual(expectedUpdate);
  176 |     // late reference: same reference",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 180, 'column': 4, 'index': 5384}","  178 |
  179 |     // Nothing else changed
> 180 |     expect(registerSpy).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  181 |     expect(unregisterSpy).not.toHaveBeenCalled();
  182 |   });
  183 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 181, 'column': 4, 'index': 5432}","  179 |     // Nothing else changed
  180 |     expect(registerSpy).not.toHaveBeenCalled();
> 181 |     expect(unregisterSpy).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  182 |   });
  183 |
  184 |   it('should not update its registration when a descriptor property does not change on an update', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-draggable-publisher.spec.js,Duplicate Assert,"{'line': 181, 'column': 4, 'index': 5432}","  179 |     // Nothing else changed
  180 |     expect(registerSpy).not.toHaveBeenCalled();
> 181 |     expect(unregisterSpy).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  182 |   });
  183 |
  184 |   it('should not update its registration when a descriptor property does not change on an update', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/announcer.spec.js,Duplicate Assert,"{'line': 56, 'column': 2, 'index': 1805}","  54 |   unmount();
  55 |   // not unmounted straight away
> 56 |   expect(getElement('5')).toBeTruthy();
     |  ^ Duplicate Assert
  57 |
  58 |   jest.runOnlyPendingTimers();
  59 |   expect(getElement('5')).not.toBeTruthy();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/announcer.spec.js,Duplicate Assert,"{'line': 59, 'column': 2, 'index': 1877}","  57 |
  58 |   jest.runOnlyPendingTimers();
> 59 |   expect(getElement('5')).not.toBeTruthy();
     |  ^ Duplicate Assert
  60 | });
  61 |
  62 | it('should set the text content of the announcement element', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/announcer.spec.js,Lazy Test,"{'line': 40, 'column': 2, 'index': 1310}","  38 |
  39 |   const el: ?HTMLElement = getElement('5');
> 40 |   invariant(el, 'Cannot find node');
     |  ^ Lazy Test
  41 |
  42 |   expect(el.getAttribute('aria-live')).toBe('assertive');
  43 |   expect(el.getAttribute('aria-atomic')).toBe('true');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/announcer.spec.js,Lazy Test,"{'line': 67, 'column': 2, 'index': 2142}","  65 |   render(<WithAnnouncer contextId=""6"">{mock}</WithAnnouncer>);
  66 |   const el: ?HTMLElement = getElement('6');
> 67 |   invariant(el, 'Could not find announcer');
     |  ^ Lazy Test
  68 |
  69 |   // act
  70 |   const announce: Announce = getAnnounce(mock);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 82, 'column': 4, 'index': 2885}","  80 |     // first event
  81 |     scroll(container, { x: 500, y: 1000 });
> 82 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledTimes(1);
     |    ^ Duplicate Assert
  83 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledWith(
  84 |       preset.home.descriptor.id,
  85 |       { x: 500, y: 1000 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 83, 'column': 4, 'index': 2953}","  81 |     scroll(container, { x: 500, y: 1000 });
  82 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledTimes(1);
> 83 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledWith(
     |    ^ Duplicate Assert
  84 |       preset.home.descriptor.id,
  85 |       { x: 500, y: 1000 },
  86 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 92, 'column': 4, 'index': 3238}","  90 |     // second event - scroll to same spot
  91 |     scroll(container, { x: 500, y: 1000 });
> 92 |     expect(marshal.updateDroppableScroll).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  93 |
  94 |     // third event - new value
  95 |     scroll(container, { x: 500, y: 1001 });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 96, 'column': 4, 'index': 3380}","  94 |     // third event - new value
  95 |     scroll(container, { x: 500, y: 1001 });
> 96 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledWith(
     |    ^ Duplicate Assert
  97 |       preset.home.descriptor.id,
  98 |       { x: 500, y: 1001 },
  99 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 162, 'column': 4, 'index': 5658}","  160 |     requestAnimationFrame.step();
  161 |
> 162 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  163 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledWith(
  164 |       preset.home.descriptor.id,
  165 |       { x: 200, y: 800 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 163, 'column': 4, 'index': 5726}","  161 |
  162 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledTimes(1);
> 163 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledWith(
      |    ^ Duplicate Assert
  164 |       preset.home.descriptor.id,
  165 |       { x: 200, y: 800 },
  166 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 170, 'column': 4, 'index': 5948}","  168 |     // also checking that no loose frames are stored up
  169 |     requestAnimationFrame.flush();
> 170 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  171 |   });
  172 |
  173 |   it('should not fire a scroll if the value has not changed since the previous frame', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 198, 'column': 4, 'index': 7040}","  196 |     // release the frame
  197 |     requestAnimationFrame.step();
> 198 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  199 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledWith(
  200 |       preset.home.descriptor.id,
  201 |       { x: 500, y: 1000 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 199, 'column': 4, 'index': 7108}","  197 |     requestAnimationFrame.step();
  198 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledTimes(1);
> 199 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledWith(
      |    ^ Duplicate Assert
  200 |       preset.home.descriptor.id,
  201 |       { x: 500, y: 1000 },
  202 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 214, 'column': 4, 'index': 7557}","  212 |     // release the frame
  213 |     requestAnimationFrame.step();
> 214 |     expect(marshal.updateDroppableScroll).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  215 |   });
  216 |
  217 |   it('should not publish a scroll update after requested not to update while an animation frame is occurring', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 240, 'column': 4, 'index': 8576}","  238 |     scroll(container, { x: 500, y: 1000 });
  239 |     requestAnimationFrame.step();
> 240 |     expect(marshal.updateDroppableScroll).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  241 |     // $ExpectError
  242 |     marshal.updateDroppableScroll.mockReset();
  243 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 253, 'column': 4, 'index': 8958}","  251 |     // flushing any frames
  252 |     requestAnimationFrame.flush();
> 253 |     expect(marshal.updateDroppableScroll).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  254 |   });
  255 | });
  256 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 279, 'column': 2, 'index': 9929}","  277 |   // first event
  278 |   scroll(container, { x: 500, y: 1000 });
> 279 |   expect(marshal.updateDroppableScroll).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  280 |   // $ExpectError
  281 |   marshal.updateDroppableScroll.mockReset();
  282 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 287, 'column': 2, 'index': 10171}","  285 |   // scroll event after no longer watching
  286 |   scroll(container, { x: 190, y: 400 });
> 287 |   expect(marshal.updateDroppableScroll).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  288 | });
  289 |
  290 | it('should stop watching for scroll events when the component is unmounted', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 373, 'column': 2, 'index': 13178}","  371 |     passive: true,
  372 |   };
> 373 |   expect(container.addEventListener).toHaveBeenCalledWith(
      |  ^ Duplicate Assert
  374 |     'scroll',
  375 |     expect.any(Function),
  376 |     expectedOptions,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 378, 'column': 2, 'index': 13303}","  376 |     expectedOptions,
  377 |   );
> 378 |   expect(container.removeEventListener).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  379 |   container.addEventListener.mockReset();
  380 |
  381 |   // unwatching scroll",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 385, 'column': 2, 'index': 13476}","  383 |
  384 |   // assertion
> 385 |   expect(container.removeEventListener).toHaveBeenCalledWith(
      |  ^ Duplicate Assert
  386 |     'scroll',
  387 |     expect.any(Function),
  388 |     expectedOptions,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 390, 'column': 2, 'index': 13604}","  388 |     expectedOptions,
  389 |   );
> 390 |   expect(container.removeEventListener).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  391 |   expect(container.addEventListener).not.toHaveBeenCalled();
  392 |
  393 |   // cleanup",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Duplicate Assert,"{'line': 391, 'column': 2, 'index': 13670}","  389 |   );
  390 |   expect(container.removeEventListener).toHaveBeenCalledTimes(1);
> 391 |   expect(container.addEventListener).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  392 |
  393 |   // cleanup
  394 |   container.addEventListener.mockRestore();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Redundant Print,"{'line': 316, 'column': 9, 'index': 11282}","  314 |   expect(marshal.updateDroppableScroll).not.toHaveBeenCalled();
  315 |   // also logs a warning
> 316 |   expect(console.warn).toHaveBeenCalled();
      |         ^ Redundant Print
  317 |
  318 |   // cleanup
  319 |   // $ExpectError",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/scroll-watching.spec.js,Redundant Print,"{'line': 320, 'column': 2, 'index': 11350}","  318 |   // cleanup
  319 |   // $ExpectError
> 320 |   console.warn.mockRestore();
      |  ^ Redundant Print
  321 | });
  322 |
  323 | it('should throw an error if asked to watch a scroll when already listening for scroll changes', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/registration.spec.js,Duplicate Assert,"{'line': 28, 'column': 2, 'index': 900}","  26 |   );
  27 |
> 28 |   expect(registerSpy).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  29 |
  30 |   // $ExpectError: using awesome matchers
  31 |   const expected: DroppableEntry = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/registration.spec.js,Duplicate Assert,"{'line': 37, 'column': 2, 'index': 1143}","  35 |   };
  36 |
> 37 |   expect(registerSpy).toHaveBeenCalledWith(expected);
     |  ^ Duplicate Assert
  38 | });
  39 |
  40 | it('should unregister itself when unmounting', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/registration.spec.js,Duplicate Assert,"{'line': 51, 'column': 2, 'index': 1602}","  49 |   );
  50 |   expect(registerSpy).toHaveBeenCalled();
> 51 |   expect(unregisterSpy).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  52 |
  53 |   const entry = registerSpy.mock.calls[0][0];
  54 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/registration.spec.js,Duplicate Assert,"{'line': 56, 'column': 2, 'index': 1719}","  54 |
  55 |   wrapper.unmount();
> 56 |   expect(unregisterSpy).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  57 |   expect(unregisterSpy).toHaveBeenCalledWith(entry);
  58 | });
  59 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/registration.spec.js,Duplicate Assert,"{'line': 57, 'column': 2, 'index': 1769}","  55 |   wrapper.unmount();
  56 |   expect(unregisterSpy).toHaveBeenCalledTimes(1);
> 57 |   expect(unregisterSpy).toHaveBeenCalledWith(entry);
     |  ^ Duplicate Assert
  58 | });
  59 |
  60 | it('should update its registration when a descriptor property changes', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/registration.spec.js,Duplicate Assert,"{'line': 98, 'column': 2, 'index': 2877}","   96 |
   97 |   // old descriptor removed
>  98 |   expect(unregisterSpy).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
   99 |   expect(unregisterSpy).toHaveBeenCalledWith(first);
  100 |
  101 |   // new descriptor added",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/registration.spec.js,Duplicate Assert,"{'line': 99, 'column': 2, 'index': 2927}","   97 |   // old descriptor removed
   98 |   expect(unregisterSpy).toHaveBeenCalledTimes(1);
>  99 |   expect(unregisterSpy).toHaveBeenCalledWith(first);
      |  ^ Duplicate Assert
  100 |
  101 |   // new descriptor added
  102 |   // $ExpectError: using awesome matchers",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/registration.spec.js,Duplicate Assert,"{'line': 121, 'column': 2, 'index': 3664}","  119 |     </WithAppContext>,
  120 |   );
> 121 |   expect(registerSpy).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  122 |   expect(unregisterSpy).not.toHaveBeenCalled();
  123 |   registerSpy.mockClear();
  124 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/registration.spec.js,Duplicate Assert,"{'line': 122, 'column': 2, 'index': 3712}","  120 |   );
  121 |   expect(registerSpy).toHaveBeenCalledTimes(1);
> 122 |   expect(unregisterSpy).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  123 |   registerSpy.mockClear();
  124 |
  125 |   forceUpdate(wrapper);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/registration.spec.js,Duplicate Assert,"{'line': 122, 'column': 2, 'index': 3712}","  120 |   );
  121 |   expect(registerSpy).toHaveBeenCalledTimes(1);
> 122 |   expect(unregisterSpy).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  123 |   registerSpy.mockClear();
  124 |
  125 |   forceUpdate(wrapper);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/registration.spec.js,Duplicate Assert,"{'line': 126, 'column': 2, 'index': 3812}","  124 |
  125 |   forceUpdate(wrapper);
> 126 |   expect(unregisterSpy).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  127 |   expect(registerSpy).not.toHaveBeenCalled();
  128 | });
  129 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/registration.spec.js,Duplicate Assert,"{'line': 126, 'column': 2, 'index': 3812}","  124 |
  125 |   forceUpdate(wrapper);
> 126 |   expect(unregisterSpy).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  127 |   expect(registerSpy).not.toHaveBeenCalled();
  128 | });
  129 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/registration.spec.js,Duplicate Assert,"{'line': 127, 'column': 2, 'index': 3860}","  125 |   forceUpdate(wrapper);
  126 |   expect(unregisterSpy).not.toHaveBeenCalled();
> 127 |   expect(registerSpy).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  128 | });
  129 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/publishing.spec.js,Duplicate Assert,"{'line': 413, 'column': 4, 'index': 13396}","  411 |       registerSpy.mock.calls[0][0].callbacks;
  412 |     // execute it to get the dimension
> 413 |     expect(console.warn).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  414 |     const result: DroppableDimension = callbacks.getDimensionAndWatchScroll(
  415 |       preset.windowScroll,
  416 |       immediate,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/publishing.spec.js,Duplicate Assert,"{'line': 418, 'column': 4, 'index': 13573}","  416 |       immediate,
  417 |     );
> 418 |     expect(console.warn).toHaveBeenCalled();
      |    ^ Duplicate Assert
  419 |
  420 |     expect(result).toEqual(expected);
  421 |     // $FlowFixMe",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/publishing.spec.js,Exception Handling,"{'line': 404, 'column': 6, 'index': 13117}","  402 |     // should never be called!
  403 |     jest.spyOn(parent, 'getBoundingClientRect').mockImplementation(() => {
> 404 |       throw new Error(
      |      ^ Exception Handling
  405 |         'Should not be getting the boundingClientRect on the parent',
  406 |       );
  407 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/publishing.spec.js,Redundant Print,"{'line': 413, 'column': 11, 'index': 13403}","  411 |       registerSpy.mock.calls[0][0].callbacks;
  412 |     // execute it to get the dimension
> 413 |     expect(console.warn).not.toHaveBeenCalled();
      |           ^ Redundant Print
  414 |     const result: DroppableDimension = callbacks.getDimensionAndWatchScroll(
  415 |       preset.windowScroll,
  416 |       immediate,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/publishing.spec.js,Redundant Print,"{'line': 418, 'column': 11, 'index': 13580}","  416 |       immediate,
  417 |     );
> 418 |     expect(console.warn).toHaveBeenCalled();
      |           ^ Redundant Print
  419 |
  420 |     expect(result).toEqual(expected);
  421 |     // $FlowFixMe",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/publishing.spec.js,Redundant Print,"{'line': 422, 'column': 4, 'index': 13675}","  420 |     expect(result).toEqual(expected);
  421 |     // $FlowFixMe
> 422 |     console.warn.mockRestore();
      |    ^ Redundant Print
  423 |   });
  424 | });
  425 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-enabled-change.spec.js,Duplicate Assert,"{'line': 37, 'column': 2, 'index': 1237}","  35 |   );
  36 |   // not called yet
> 37 |   expect(marshal.updateDroppableIsEnabled).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  38 |
  39 |   const callbacks: DroppableCallbacks = registerSpy.mock.calls[0][0].callbacks;
  40 |   callbacks.getDimensionAndWatchScroll(preset.windowScroll, scheduled);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-enabled-change.spec.js,Duplicate Assert,"{'line': 47, 'column': 2, 'index': 1546}","  45 |   });
  46 |
> 47 |   expect(marshal.updateDroppableIsEnabled).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  48 |   expect(marshal.updateDroppableIsEnabled).toHaveBeenCalledWith(
  49 |     preset.home.descriptor.id,
  50 |     !isDropDisabled,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-enabled-change.spec.js,Duplicate Assert,"{'line': 48, 'column': 2, 'index': 1615}","  46 |
  47 |   expect(marshal.updateDroppableIsEnabled).toHaveBeenCalledTimes(1);
> 48 |   expect(marshal.updateDroppableIsEnabled).toHaveBeenCalledWith(
     |  ^ Duplicate Assert
  49 |     preset.home.descriptor.id,
  50 |     !isDropDisabled,
  51 |   );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-enabled-change.spec.js,Duplicate Assert,"{'line': 68, 'column': 2, 'index': 2207}","  66 |
  67 |   // not called yet
> 68 |   expect(marshal.updateDroppableIsEnabled).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  69 |
  70 |   // no yet dragging
  71 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-enabled-change.spec.js,Duplicate Assert,"{'line': 68, 'column': 2, 'index': 2207}","  66 |
  67 |   // not called yet
> 68 |   expect(marshal.updateDroppableIsEnabled).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  69 |
  70 |   // no yet dragging
  71 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-enabled-change.spec.js,Duplicate Assert,"{'line': 76, 'column': 2, 'index': 2351}","  74 |   });
  75 |
> 76 |   expect(marshal.updateDroppableIsEnabled).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  77 | });
  78 |
  79 | it('should not publish updates when there is no change', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-enabled-change.spec.js,Duplicate Assert,"{'line': 76, 'column': 2, 'index': 2351}","  74 |   });
  75 |
> 76 |   expect(marshal.updateDroppableIsEnabled).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  77 | });
  78 |
  79 | it('should not publish updates when there is no change', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-enabled-change.spec.js,Duplicate Assert,"{'line': 94, 'column': 2, 'index': 2935}","  92 |
  93 |   // not called yet
> 94 |   expect(marshal.updateDroppableIsEnabled).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  95 |   const callbacks: DroppableCallbacks = registerSpy.mock.calls[0][0].callbacks;
  96 |   callbacks.getDimensionAndWatchScroll(preset.windowScroll, scheduled);
  97 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-enabled-change.spec.js,Duplicate Assert,"{'line': 94, 'column': 2, 'index': 2935}","  92 |
  93 |   // not called yet
> 94 |   expect(marshal.updateDroppableIsEnabled).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  95 |   const callbacks: DroppableCallbacks = registerSpy.mock.calls[0][0].callbacks;
  96 |   callbacks.getDimensionAndWatchScroll(preset.windowScroll, scheduled);
  97 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-enabled-change.spec.js,Duplicate Assert,"{'line': 103, 'column': 2, 'index': 3225}","  101 |   });
  102 |
> 103 |   expect(marshal.updateDroppableIsEnabled).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  104 |   // $ExpectError
  105 |   marshal.updateDroppableIsEnabled.mockReset();
  106 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-enabled-change.spec.js,Duplicate Assert,"{'line': 103, 'column': 2, 'index': 3225}","  101 |   });
  102 |
> 103 |   expect(marshal.updateDroppableIsEnabled).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  104 |   // $ExpectError
  105 |   marshal.updateDroppableIsEnabled.mockReset();
  106 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-enabled-change.spec.js,Duplicate Assert,"{'line': 108, 'column': 2, 'index': 3383}","  106 |
  107 |   forceUpdate(wrapper);
> 108 |   expect(marshal.updateDroppableIsEnabled).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  109 | });
  110 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-enabled-change.spec.js,Duplicate Assert,"{'line': 108, 'column': 2, 'index': 3383}","  106 |
  107 |   forceUpdate(wrapper);
> 108 |   expect(marshal.updateDroppableIsEnabled).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  109 | });
  110 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-element-scrollable.spec.js,Conditional Test Logic,"{'line': 6, 'column': 29, 'index': 282}","  4 |
  5 | it('should return true if an element has overflow:auto or overflow:scroll', () => {
> 6 |   ['overflowY', 'overflowX'].forEach((overflow: string) => {
    |                             ^ Conditional Test Logic
  7 |     ['auto', 'scroll'].forEach((value: string) => {
  8 |       const el: HTMLElement = document.createElement('div');
  9 |       // $ExpectError - flow being mean",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-element-scrollable.spec.js,Conditional Test Logic,"{'line': 7, 'column': 23, 'index': 337}","   5 | it('should return true if an element has overflow:auto or overflow:scroll', () => {
   6 |   ['overflowY', 'overflowX'].forEach((overflow: string) => {
>  7 |     ['auto', 'scroll'].forEach((value: string) => {
     |                       ^ Conditional Test Logic
   8 |       const el: HTMLElement = document.createElement('div');
   9 |       // $ExpectError - flow being mean
  10 |       el.style[overflow] = value;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-element-scrollable.spec.js,Conditional Test Logic,"{'line': 17, 'column': 29, 'index': 667}","  15 |
  16 | it('should return false if an element has overflow:visible', () => {
> 17 |   ['overflowY', 'overflowX'].forEach((overflow: string) => {
     |                             ^ Conditional Test Logic
  18 |     const el: HTMLElement = document.createElement('div');
  19 |     // $ExpectError - flow being mean
  20 |     el.style[overflow] = 'visible';",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-element-scrollable.spec.js,Redundant Print,"{'line': 65, 'column': 11, 'index': 2067}","  63 |
  64 |     expect(getClosestScrollable(body)).toBe(null);
> 65 |     expect(console.warn).toHaveBeenCalled();
     |           ^ Redundant Print
  66 |   });
  67 |
  68 |   it('should not mark the body as a scroll container if it does not have any overflow set', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-element-scrollable.spec.js,Redundant Print,"{'line': 71, 'column': 11, 'index': 2308}","  69 |     body.style.overflowX = 'visible';
  70 |     expect(getClosestScrollable(body)).toBe(null);
> 71 |     expect(console.warn).not.toHaveBeenCalled();
     |           ^ Redundant Print
  72 |   });
  73 |
  74 |   it('should not mark the body as a scroll container if the html element has visible overflow', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-element-scrollable.spec.js,Redundant Print,"{'line': 78, 'column': 11, 'index': 2592}","  76 |     html.style.overflowY = 'visible';
  77 |     expect(getClosestScrollable(body)).toBe(null);
> 78 |     expect(console.warn).not.toHaveBeenCalled();
     |           ^ Redundant Print
  79 |   });
  80 | });
  81 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 37, 'column': 2, 'index': 1231}","  35 |   );
  36 |   // not called yet
> 37 |   expect(marshal.updateDroppableIsCombineEnabled).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  38 |
  39 |   const callbacks: DroppableCallbacks = registerSpy.mock.calls[0][0].callbacks;
  40 |   callbacks.getDimensionAndWatchScroll(preset.windowScroll, scheduled);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 46, 'column': 2, 'index': 1538}","  44 |     isCombineEnabled: false,
  45 |   });
> 46 |   expect(marshal.updateDroppableIsCombineEnabled).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  47 |   expect(marshal.updateDroppableIsCombineEnabled).toHaveBeenCalledWith(
  48 |     preset.home.descriptor.id,
  49 |     false,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 47, 'column': 2, 'index': 1614}","  45 |   });
  46 |   expect(marshal.updateDroppableIsCombineEnabled).toHaveBeenCalledTimes(1);
> 47 |   expect(marshal.updateDroppableIsCombineEnabled).toHaveBeenCalledWith(
     |  ^ Duplicate Assert
  48 |     preset.home.descriptor.id,
  49 |     false,
  50 |   );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 58, 'column': 2, 'index': 1885}","  56 |     isCombineEnabled: true,
  57 |   });
> 58 |   expect(marshal.updateDroppableIsCombineEnabled).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  59 |   expect(marshal.updateDroppableIsCombineEnabled).toHaveBeenCalledWith(
  60 |     preset.home.descriptor.id,
  61 |     true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 59, 'column': 2, 'index': 1961}","  57 |   });
  58 |   expect(marshal.updateDroppableIsCombineEnabled).toHaveBeenCalledTimes(1);
> 59 |   expect(marshal.updateDroppableIsCombineEnabled).toHaveBeenCalledWith(
     |  ^ Duplicate Assert
  60 |     preset.home.descriptor.id,
  61 |     true,
  62 |   );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 79, 'column': 2, 'index': 2544}","  77 |
  78 |   // not called yet
> 79 |   expect(marshal.updateDroppableIsCombineEnabled).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  80 |
  81 |   // no yet dragging
  82 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 79, 'column': 2, 'index': 2544}","  77 |
  78 |   // not called yet
> 79 |   expect(marshal.updateDroppableIsCombineEnabled).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  80 |
  81 |   // no yet dragging
  82 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 87, 'column': 2, 'index': 2698}","  85 |   });
  86 |
> 87 |   expect(marshal.updateDroppableIsCombineEnabled).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  88 | });
  89 |
  90 | it('should not publish updates when there is no change', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 87, 'column': 2, 'index': 2698}","  85 |   });
  86 |
> 87 |   expect(marshal.updateDroppableIsCombineEnabled).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  88 | });
  89 |
  90 | it('should not publish updates when there is no change', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 105, 'column': 2, 'index': 3284}","  103 |
  104 |   // not called yet
> 105 |   expect(marshal.updateDroppableIsCombineEnabled).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  106 |   const callbacks: DroppableCallbacks = registerSpy.mock.calls[0][0].callbacks;
  107 |   callbacks.getDimensionAndWatchScroll(preset.windowScroll, scheduled);
  108 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 105, 'column': 2, 'index': 3284}","  103 |
  104 |   // not called yet
> 105 |   expect(marshal.updateDroppableIsCombineEnabled).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  106 |   const callbacks: DroppableCallbacks = registerSpy.mock.calls[0][0].callbacks;
  107 |   callbacks.getDimensionAndWatchScroll(preset.windowScroll, scheduled);
  108 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 114, 'column': 2, 'index': 3582}","  112 |   });
  113 |
> 114 |   expect(marshal.updateDroppableIsCombineEnabled).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  115 |   // $FlowFixMe
  116 |   marshal.updateDroppableIsCombineEnabled.mockReset();
  117 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 114, 'column': 2, 'index': 3582}","  112 |   });
  113 |
> 114 |   expect(marshal.updateDroppableIsCombineEnabled).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  115 |   // $FlowFixMe
  116 |   marshal.updateDroppableIsCombineEnabled.mockReset();
  117 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 119, 'column': 2, 'index': 3752}","  117 |
  118 |   forceUpdate(wrapper);
> 119 |   expect(marshal.updateDroppableIsCombineEnabled).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  120 | });
  121 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,Duplicate Assert,"{'line': 119, 'column': 2, 'index': 3752}","  117 |
  118 |   forceUpdate(wrapper);
> 119 |   expect(marshal.updateDroppableIsCombineEnabled).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  120 | });
  121 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 53, 'column': 2, 'index': 1727}","  51 |
  52 |   // validating no initial scroll
> 53 |   expect(parent.scrollTop).toBe(0);
     |  ^ Duplicate Assert
  54 |   expect(parent.scrollLeft).toBe(0);
  55 |   expect(droppable.scrollTop).toBe(0);
  56 |   expect(droppable.scrollLeft).toBe(0);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 53, 'column': 2, 'index': 1727}","  51 |
  52 |   // validating no initial scroll
> 53 |   expect(parent.scrollTop).toBe(0);
     |  ^ Duplicate Assert
  54 |   expect(parent.scrollLeft).toBe(0);
  55 |   expect(droppable.scrollTop).toBe(0);
  56 |   expect(droppable.scrollLeft).toBe(0);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 54, 'column': 2, 'index': 1763}","  52 |   // validating no initial scroll
  53 |   expect(parent.scrollTop).toBe(0);
> 54 |   expect(parent.scrollLeft).toBe(0);
     |  ^ Duplicate Assert
  55 |   expect(droppable.scrollTop).toBe(0);
  56 |   expect(droppable.scrollLeft).toBe(0);
  57 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 54, 'column': 2, 'index': 1763}","  52 |   // validating no initial scroll
  53 |   expect(parent.scrollTop).toBe(0);
> 54 |   expect(parent.scrollLeft).toBe(0);
     |  ^ Duplicate Assert
  55 |   expect(droppable.scrollTop).toBe(0);
  56 |   expect(droppable.scrollLeft).toBe(0);
  57 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 55, 'column': 2, 'index': 1800}","  53 |   expect(parent.scrollTop).toBe(0);
  54 |   expect(parent.scrollLeft).toBe(0);
> 55 |   expect(droppable.scrollTop).toBe(0);
     |  ^ Duplicate Assert
  56 |   expect(droppable.scrollLeft).toBe(0);
  57 |
  58 |   const callbacks: DroppableCallbacks = registerSpy.mock.calls[0][0].callbacks;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 55, 'column': 2, 'index': 1800}","  53 |   expect(parent.scrollTop).toBe(0);
  54 |   expect(parent.scrollLeft).toBe(0);
> 55 |   expect(droppable.scrollTop).toBe(0);
     |  ^ Duplicate Assert
  56 |   expect(droppable.scrollLeft).toBe(0);
  57 |
  58 |   const callbacks: DroppableCallbacks = registerSpy.mock.calls[0][0].callbacks;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 56, 'column': 2, 'index': 1839}","  54 |   expect(parent.scrollLeft).toBe(0);
  55 |   expect(droppable.scrollTop).toBe(0);
> 56 |   expect(droppable.scrollLeft).toBe(0);
     |  ^ Duplicate Assert
  57 |
  58 |   const callbacks: DroppableCallbacks = registerSpy.mock.calls[0][0].callbacks;
  59 |   // request the droppable start listening for scrolling",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 56, 'column': 2, 'index': 1839}","  54 |   expect(parent.scrollLeft).toBe(0);
  55 |   expect(droppable.scrollTop).toBe(0);
> 56 |   expect(droppable.scrollLeft).toBe(0);
     |  ^ Duplicate Assert
  57 |
  58 |   const callbacks: DroppableCallbacks = registerSpy.mock.calls[0][0].callbacks;
  59 |   // request the droppable start listening for scrolling",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 66, 'column': 2, 'index': 2200}","  64 |
  65 |   // no scroll changes
> 66 |   expect(parent.scrollTop).toBe(0);
     |  ^ Duplicate Assert
  67 |   expect(parent.scrollLeft).toBe(0);
  68 |   expect(droppable.scrollTop).toBe(0);
  69 |   expect(droppable.scrollLeft).toBe(0);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 66, 'column': 2, 'index': 2200}","  64 |
  65 |   // no scroll changes
> 66 |   expect(parent.scrollTop).toBe(0);
     |  ^ Duplicate Assert
  67 |   expect(parent.scrollLeft).toBe(0);
  68 |   expect(droppable.scrollTop).toBe(0);
  69 |   expect(droppable.scrollLeft).toBe(0);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 67, 'column': 2, 'index': 2236}","  65 |   // no scroll changes
  66 |   expect(parent.scrollTop).toBe(0);
> 67 |   expect(parent.scrollLeft).toBe(0);
     |  ^ Duplicate Assert
  68 |   expect(droppable.scrollTop).toBe(0);
  69 |   expect(droppable.scrollLeft).toBe(0);
  70 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 67, 'column': 2, 'index': 2236}","  65 |   // no scroll changes
  66 |   expect(parent.scrollTop).toBe(0);
> 67 |   expect(parent.scrollLeft).toBe(0);
     |  ^ Duplicate Assert
  68 |   expect(droppable.scrollTop).toBe(0);
  69 |   expect(droppable.scrollLeft).toBe(0);
  70 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 68, 'column': 2, 'index': 2273}","  66 |   expect(parent.scrollTop).toBe(0);
  67 |   expect(parent.scrollLeft).toBe(0);
> 68 |   expect(droppable.scrollTop).toBe(0);
     |  ^ Duplicate Assert
  69 |   expect(droppable.scrollLeft).toBe(0);
  70 | });
  71 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 68, 'column': 2, 'index': 2273}","  66 |   expect(parent.scrollTop).toBe(0);
  67 |   expect(parent.scrollLeft).toBe(0);
> 68 |   expect(droppable.scrollTop).toBe(0);
     |  ^ Duplicate Assert
  69 |   expect(droppable.scrollLeft).toBe(0);
  70 | });
  71 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 69, 'column': 2, 'index': 2312}","  67 |   expect(parent.scrollLeft).toBe(0);
  68 |   expect(droppable.scrollTop).toBe(0);
> 69 |   expect(droppable.scrollLeft).toBe(0);
     |  ^ Duplicate Assert
  70 | });
  71 |
  72 | describe('there is a closest scrollable', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 69, 'column': 2, 'index': 2312}","  67 |   expect(parent.scrollLeft).toBe(0);
  68 |   expect(droppable.scrollTop).toBe(0);
> 69 |   expect(droppable.scrollLeft).toBe(0);
     |  ^ Duplicate Assert
  70 | });
  71 |
  72 | describe('there is a closest scrollable', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 87, 'column': 4, 'index': 2921}","  85 |     invariant(container);
  86 |
> 87 |     expect(container.scrollTop).toBe(0);
     |    ^ Duplicate Assert
  88 |     expect(container.scrollLeft).toBe(0);
  89 |
  90 |     // tell the droppable to watch for scrolling",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 88, 'column': 4, 'index': 2962}","  86 |
  87 |     expect(container.scrollTop).toBe(0);
> 88 |     expect(container.scrollLeft).toBe(0);
     |    ^ Duplicate Assert
  89 |
  90 |     // tell the droppable to watch for scrolling
  91 |     const callbacks: DroppableCallbacks =",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 98, 'column': 4, 'index': 3334}","   96 |     callbacks.scroll({ x: 500, y: 1000 });
   97 |
>  98 |     expect(container.scrollLeft).toBe(500);
      |    ^ Duplicate Assert
   99 |     expect(container.scrollTop).toBe(1000);
  100 |   });
  101 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 99, 'column': 4, 'index': 3378}","   97 |
   98 |     expect(container.scrollLeft).toBe(500);
>  99 |     expect(container.scrollTop).toBe(1000);
      |    ^ Duplicate Assert
  100 |   });
  101 |
  102 |   it('should throw if asked to scoll while scroll is not currently being watched', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 122, 'column': 4, 'index': 4171}","  120 |     const callbacks: DroppableCallbacks =
  121 |       registerSpy.mock.calls[0][0].callbacks;
> 122 |     expect(() => callbacks.scroll({ x: 500, y: 1000 })).toThrow();
      |    ^ Duplicate Assert
  123 |
  124 |     // now watching scroll
  125 |     callbacks.getDimensionAndWatchScroll(preset.windowScroll, immediate);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 122, 'column': 4, 'index': 4171}","  120 |     const callbacks: DroppableCallbacks =
  121 |       registerSpy.mock.calls[0][0].callbacks;
> 122 |     expect(() => callbacks.scroll({ x: 500, y: 1000 })).toThrow();
      |    ^ Duplicate Assert
  123 |
  124 |     // now watching scroll
  125 |     callbacks.getDimensionAndWatchScroll(preset.windowScroll, immediate);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 129, 'column': 4, 'index': 4403}","  127 |     // no longer watching scroll
  128 |     callbacks.dragStopped();
> 129 |     expect(() => callbacks.scroll({ x: 500, y: 1000 })).toThrow();
      |    ^ Duplicate Assert
  130 |   });
  131 | });
  132 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Duplicate Assert,"{'line': 129, 'column': 4, 'index': 4403}","  127 |     // no longer watching scroll
  128 |     callbacks.dragStopped();
> 129 |     expect(() => callbacks.scroll({ x: 500, y: 1000 })).toThrow();
      |    ^ Duplicate Assert
  130 |   });
  131 | });
  132 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Magic Number,"{'line': 53, 'column': 32, 'index': 1757}","  51 |
  52 |   // validating no initial scroll
> 53 |   expect(parent.scrollTop).toBe(0);
     |                                ^ Magic Number
  54 |   expect(parent.scrollLeft).toBe(0);
  55 |   expect(droppable.scrollTop).toBe(0);
  56 |   expect(droppable.scrollLeft).toBe(0);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Magic Number,"{'line': 54, 'column': 33, 'index': 1794}","  52 |   // validating no initial scroll
  53 |   expect(parent.scrollTop).toBe(0);
> 54 |   expect(parent.scrollLeft).toBe(0);
     |                                 ^ Magic Number
  55 |   expect(droppable.scrollTop).toBe(0);
  56 |   expect(droppable.scrollLeft).toBe(0);
  57 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Magic Number,"{'line': 55, 'column': 35, 'index': 1833}","  53 |   expect(parent.scrollTop).toBe(0);
  54 |   expect(parent.scrollLeft).toBe(0);
> 55 |   expect(droppable.scrollTop).toBe(0);
     |                                   ^ Magic Number
  56 |   expect(droppable.scrollLeft).toBe(0);
  57 |
  58 |   const callbacks: DroppableCallbacks = registerSpy.mock.calls[0][0].callbacks;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Magic Number,"{'line': 56, 'column': 36, 'index': 1873}","  54 |   expect(parent.scrollLeft).toBe(0);
  55 |   expect(droppable.scrollTop).toBe(0);
> 56 |   expect(droppable.scrollLeft).toBe(0);
     |                                    ^ Magic Number
  57 |
  58 |   const callbacks: DroppableCallbacks = registerSpy.mock.calls[0][0].callbacks;
  59 |   // request the droppable start listening for scrolling",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Magic Number,"{'line': 66, 'column': 32, 'index': 2230}","  64 |
  65 |   // no scroll changes
> 66 |   expect(parent.scrollTop).toBe(0);
     |                                ^ Magic Number
  67 |   expect(parent.scrollLeft).toBe(0);
  68 |   expect(droppable.scrollTop).toBe(0);
  69 |   expect(droppable.scrollLeft).toBe(0);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Magic Number,"{'line': 67, 'column': 33, 'index': 2267}","  65 |   // no scroll changes
  66 |   expect(parent.scrollTop).toBe(0);
> 67 |   expect(parent.scrollLeft).toBe(0);
     |                                 ^ Magic Number
  68 |   expect(droppable.scrollTop).toBe(0);
  69 |   expect(droppable.scrollLeft).toBe(0);
  70 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Magic Number,"{'line': 68, 'column': 35, 'index': 2306}","  66 |   expect(parent.scrollTop).toBe(0);
  67 |   expect(parent.scrollLeft).toBe(0);
> 68 |   expect(droppable.scrollTop).toBe(0);
     |                                   ^ Magic Number
  69 |   expect(droppable.scrollLeft).toBe(0);
  70 | });
  71 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Magic Number,"{'line': 69, 'column': 36, 'index': 2346}","  67 |   expect(parent.scrollLeft).toBe(0);
  68 |   expect(droppable.scrollTop).toBe(0);
> 69 |   expect(droppable.scrollLeft).toBe(0);
     |                                    ^ Magic Number
  70 | });
  71 |
  72 | describe('there is a closest scrollable', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Magic Number,"{'line': 87, 'column': 37, 'index': 2954}","  85 |     invariant(container);
  86 |
> 87 |     expect(container.scrollTop).toBe(0);
     |                                     ^ Magic Number
  88 |     expect(container.scrollLeft).toBe(0);
  89 |
  90 |     // tell the droppable to watch for scrolling",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Magic Number,"{'line': 88, 'column': 38, 'index': 2996}","  86 |
  87 |     expect(container.scrollTop).toBe(0);
> 88 |     expect(container.scrollLeft).toBe(0);
     |                                      ^ Magic Number
  89 |
  90 |     // tell the droppable to watch for scrolling
  91 |     const callbacks: DroppableCallbacks =",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Magic Number,"{'line': 98, 'column': 38, 'index': 3368}","   96 |     callbacks.scroll({ x: 500, y: 1000 });
   97 |
>  98 |     expect(container.scrollLeft).toBe(500);
      |                                      ^ Magic Number
   99 |     expect(container.scrollTop).toBe(1000);
  100 |   });
  101 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Magic Number,"{'line': 99, 'column': 37, 'index': 3411}","   97 |
   98 |     expect(container.scrollLeft).toBe(500);
>  99 |     expect(container.scrollTop).toBe(1000);
      |                                     ^ Magic Number
  100 |   });
  101 |
  102 |   it('should throw if asked to scoll while scroll is not currently being watched', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Magic Number,"{'line': 116, 'column': 37, 'index': 3998}","  114 |       .getDOMNode();
  115 |     invariant(container);
> 116 |     expect(container.scrollTop).toBe(0);
      |                                     ^ Magic Number
  117 |     expect(container.scrollLeft).toBe(0);
  118 |
  119 |     // dimension not returned yet",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/use-droppable-publisher/forced-scroll.spec.js,Magic Number,"{'line': 117, 'column': 38, 'index': 4040}","  115 |     invariant(container);
  116 |     expect(container.scrollTop).toBe(0);
> 117 |     expect(container.scrollLeft).toBe(0);
      |                                      ^ Magic Number
  118 |
  119 |     // dimension not returned yet
  120 |     const callbacks: DroppableCallbacks =",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/style-marshal/style-marshal.spec.js,Duplicate Assert,"{'line': 58, 'column': 2, 'index': 2061}","  56 |
  57 |   // initially there is no style tag
> 58 |   expect(document.querySelector(dynamicSelector)).toBeFalsy();
     |  ^ Duplicate Assert
  59 |   expect(document.querySelector(alwaysSelector)).toBeFalsy();
  60 |
  61 |   // now mounting",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/style-marshal/style-marshal.spec.js,Duplicate Assert,"{'line': 59, 'column': 2, 'index': 2124}","  57 |   // initially there is no style tag
  58 |   expect(document.querySelector(dynamicSelector)).toBeFalsy();
> 59 |   expect(document.querySelector(alwaysSelector)).toBeFalsy();
     |  ^ Duplicate Assert
  60 |
  61 |   // now mounting
  62 |   const wrapper: ReactWrapper<*> = mount(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/style-marshal/style-marshal.spec.js,Duplicate Assert,"{'line': 67, 'column': 2, 'index': 2350}","  65 |
  66 |   // elements should now exist
> 67 |   expect(document.querySelector(alwaysSelector)).toBeInstanceOf(
     |  ^ Duplicate Assert
  68 |     HTMLStyleElement,
  69 |   );
  70 |   expect(document.querySelector(dynamicSelector)).toBeInstanceOf(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/style-marshal/style-marshal.spec.js,Duplicate Assert,"{'line': 70, 'column': 2, 'index': 2442}","  68 |     HTMLStyleElement,
  69 |   );
> 70 |   expect(document.querySelector(dynamicSelector)).toBeInstanceOf(
     |  ^ Duplicate Assert
  71 |     HTMLStyleElement,
  72 |   );
  73 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/style-marshal/style-marshal.spec.js,Duplicate Assert,"{'line': 156, 'column': 2, 'index': 5047}","  154 |
  155 |   // the style tag exists
> 156 |   expect(document.querySelector(selector1)).toBeTruthy();
      |  ^ Duplicate Assert
  157 |   expect(document.querySelector(selector2)).toBeTruthy();
  158 |
  159 |   // now unmounted",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/style-marshal/style-marshal.spec.js,Duplicate Assert,"{'line': 157, 'column': 2, 'index': 5105}","  155 |   // the style tag exists
  156 |   expect(document.querySelector(selector1)).toBeTruthy();
> 157 |   expect(document.querySelector(selector2)).toBeTruthy();
      |  ^ Duplicate Assert
  158 |
  159 |   // now unmounted
  160 |   wrapper.unmount();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/style-marshal/style-marshal.spec.js,Duplicate Assert,"{'line': 162, 'column': 2, 'index': 5205}","  160 |   wrapper.unmount();
  161 |
> 162 |   expect(document.querySelector(selector1)).not.toBeTruthy();
      |  ^ Duplicate Assert
  163 |   expect(document.querySelector(selector2)).not.toBeTruthy();
  164 | });
  165 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/style-marshal/style-marshal.spec.js,Duplicate Assert,"{'line': 163, 'column': 2, 'index': 5267}","  161 |
  162 |   expect(document.querySelector(selector1)).not.toBeTruthy();
> 163 |   expect(document.querySelector(selector2)).not.toBeTruthy();
      |  ^ Duplicate Assert
  164 | });
  165 |
  166 | it('should allow subsequent updates', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/style-marshal/style-marshal.spec.js,Duplicate Assert,"{'line': 177, 'column': 4, 'index': 5723}","  175 |   Array.from({ length: 4 }).forEach(() => {
  176 |     marshal.resting();
> 177 |     expect(getDynamicStyleFromTag(contextId)).toEqual(styles.resting);
      |    ^ Duplicate Assert
  178 |
  179 |     marshal.dragging();
  180 |     expect(getDynamicStyleFromTag(contextId)).toEqual(styles.dragging);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/style-marshal/style-marshal.spec.js,Duplicate Assert,"{'line': 180, 'column': 4, 'index': 5819}","  178 |
  179 |     marshal.dragging();
> 180 |     expect(getDynamicStyleFromTag(contextId)).toEqual(styles.dragging);
      |    ^ Duplicate Assert
  181 |
  182 |     marshal.dropping('DROP');
  183 |     expect(getDynamicStyleFromTag(contextId)).toEqual(styles.dropAnimating);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/style-marshal/style-marshal.spec.js,Duplicate Assert,"{'line': 183, 'column': 4, 'index': 5922}","  181 |
  182 |     marshal.dropping('DROP');
> 183 |     expect(getDynamicStyleFromTag(contextId)).toEqual(styles.dropAnimating);
      |    ^ Duplicate Assert
  184 |   });
  185 |
  186 |   wrapper.unmount();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/on-transition-end.spec.js,Duplicate Assert,"{'line': 40, 'column': 2, 'index': 1203}","  38 |   };
  39 |   wrapper.simulate('transitionend', height);
> 40 |   expect(onTransitionEnd).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  41 |   onTransitionEnd.mockClear();
  42 |
  43 |   // subsequent transition events will not trigger",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/on-transition-end.spec.js,Duplicate Assert,"{'line': 55, 'column': 2, 'index': 1646}","  53 |   wrapper.simulate('transitionend', margin);
  54 |   wrapper.simulate('transitionend', width);
> 55 |   expect(onTransitionEnd).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  56 |
  57 |   // another transition event of height would trigger the handler
  58 |   wrapper.simulate('transitionend', height);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/on-transition-end.spec.js,Duplicate Assert,"{'line': 59, 'column': 2, 'index': 1808}","  57 |   // another transition event of height would trigger the handler
  58 |   wrapper.simulate('transitionend', height);
> 59 |   expect(onTransitionEnd).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  60 |
  61 |   // validate: this should not have triggered any close events
  62 |   expect(onClose).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/on-close.spec.js,Assertion Roulette,"{'column': 2, 'line': 72}","  70 |   };
  71 |   expectIsFull(getPlaceholderStyle(wrapper));
> 72 |   assert();
     |  ^ Assertion Roulette
  73 |
  74 |   wrapper.setProps({ animate: 'open' });
  75 |   assert();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/on-close.spec.js,Assertion Roulette,"{'column': 2, 'line': 75}","  73 |
  74 |   wrapper.setProps({ animate: 'open' });
> 75 |   assert();
     |  ^ Assertion Roulette
  76 | });
  77 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/on-close.spec.js,Duplicate Assert,"{'line': 32, 'column': 2, 'index': 839}","  30 |   };
  31 |   wrapper.simulate('transitionend', height);
> 32 |   expect(onClose).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  33 |   onClose.mockClear();
  34 |
  35 |   // transition events while animate=""closed"" of different properties will not trigger",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/on-close.spec.js,Duplicate Assert,"{'line': 47, 'column': 2, 'index': 1302}","  45 |   wrapper.simulate('transitionend', margin);
  46 |   wrapper.simulate('transitionend', width);
> 47 |   expect(onClose).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  48 | });
  49 |
  50 | it('should not fire an onClose if not closing when a transitionend occurs', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/on-close.spec.js,Duplicate Assert,"{'line': 72, 'column': 2, 'index': 1976}","  70 |   };
  71 |   expectIsFull(getPlaceholderStyle(wrapper));
> 72 |   assert();
     |  ^ Duplicate Assert
  73 |
  74 |   wrapper.setProps({ animate: 'open' });
  75 |   assert();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/on-close.spec.js,Duplicate Assert,"{'line': 75, 'column': 2, 'index': 2030}","  73 |
  74 |   wrapper.setProps({ animate: 'open' });
> 75 |   assert();
     |  ^ Duplicate Assert
  76 | });
  77 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/on-close.spec.js,Redundant Assertion,"{'column': 2, 'line': 72}","  70 |   };
  71 |   expectIsFull(getPlaceholderStyle(wrapper));
> 72 |   assert();
     |  ^ Redundant Assertion
  73 |
  74 |   wrapper.setProps({ animate: 'open' });
  75 |   assert();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/on-close.spec.js,Redundant Assertion,"{'column': 2, 'line': 75}","  73 |
  74 |   wrapper.setProps({ animate: 'open' });
> 75 |   assert();
     |  ^ Redundant Assertion
  76 | });
  77 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/animated-mount.spec.js,Duplicate Assert,"{'line': 73, 'column': 2, 'index': 1923}","  71 |   expectIsEmpty(onMount);
  72 |
> 73 |   expect(getCreatePlaceholderCalls()).toHaveLength(1);
     |  ^ Duplicate Assert
  74 |
  75 |   // interrupting animation
  76 |   wrapper.setProps({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/animated-mount.spec.js,Duplicate Assert,"{'line': 83, 'column': 2, 'index': 2154}","  81 |   // render 2: useEffect calling setState
  82 |   // render 3: result of setState
> 83 |   expect(getCreatePlaceholderCalls()).toHaveLength(3);
     |  ^ Duplicate Assert
  84 |
  85 |   // no timers are run
  86 |   // let enzyme know that the react tree has changed due to the set state",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/animated-mount.spec.js,Duplicate Assert,"{'line': 97, 'column': 2, 'index': 2577}","   95 |   wrapper.update();
   96 |   expectIsFull(getPlaceholderStyle(wrapper));
>  97 |   expect(getCreatePlaceholderCalls()).toHaveLength(0);
      |  ^ Duplicate Assert
   98 | });
   99 |
  100 | it('should not animate in if unmounted', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/animated-mount.spec.js,Magic Number,"{'line': 42, 'column': 50, 'index': 1178}","  40 |   );
  41 |
> 42 |   expect(getCreatePlaceholderCalls().length).toBe(1);
     |                                                  ^ Magic Number
  43 |
  44 |   // first call had an empty size
  45 |   const onMount: PlaceholderStyle = getPlaceholderStyle(wrapper);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/animated-mount.spec.js,Magic Number,"{'line': 73, 'column': 51, 'index': 1972}","  71 |   expectIsEmpty(onMount);
  72 |
> 73 |   expect(getCreatePlaceholderCalls()).toHaveLength(1);
     |                                                   ^ Magic Number
  74 |
  75 |   // interrupting animation
  76 |   wrapper.setProps({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/animated-mount.spec.js,Magic Number,"{'line': 83, 'column': 51, 'index': 2203}","  81 |   // render 2: useEffect calling setState
  82 |   // render 3: result of setState
> 83 |   expect(getCreatePlaceholderCalls()).toHaveLength(3);
     |                                                   ^ Magic Number
  84 |
  85 |   // no timers are run
  86 |   // let enzyme know that the react tree has changed due to the set state",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/placeholder/animated-mount.spec.js,Magic Number,"{'line': 97, 'column': 51, 'index': 2626}","   95 |   wrapper.update();
   96 |   expectIsFull(getPlaceholderStyle(wrapper));
>  97 |   expect(getCreatePlaceholderCalls()).toHaveLength(0);
      |                                                   ^ Magic Number
   98 | });
   99 |
  100 | it('should not animate in if unmounted', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/is-type-of-element/is-element.spec.js,Conditional Test Logic,"{'line': 16, 'column': 32, 'index': 520}","  14 |
  15 | it('should not let other types through', () => {
> 16 |   [null, 1, true, {}, () => {}].forEach((value: mixed) =>
     |                                ^ Conditional Test Logic
  17 |     expect(isElement(value)).toBe(false),
  18 |   );
  19 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder.spec.js,Magic Number,"{'line': 22, 'column': 51, 'index': 560}","  20 |     });
  21 |
> 22 |     expect(wrapper.find(Placeholder)).toHaveLength(0);
     |                                                   ^ Magic Number
  23 |   });
  24 |
  25 |   it('should render a placeholder when dragging over', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder.spec.js,Magic Number,"{'line': 31, 'column': 51, 'index': 797}","  29 |     });
  30 |
> 31 |     expect(wrapper.find(Placeholder)).toHaveLength(1);
     |                                                   ^ Magic Number
  32 |   });
  33 |
  34 |   it('should render a placeholder when dragging over nothing', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder.spec.js,Magic Number,"{'line': 40, 'column': 51, 'index': 1045}","  38 |     });
  39 |
> 40 |     expect(wrapper.find(Placeholder)).toHaveLength(1);
     |                                                   ^ Magic Number
  41 |   });
  42 |
  43 |   it('should render a placeholder when dragging over a foreign list', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder.spec.js,Magic Number,"{'line': 49, 'column': 51, 'index': 1300}","  47 |     });
  48 |
> 49 |     expect(wrapper.find(Placeholder)).toHaveLength(1);
     |                                                   ^ Magic Number
  50 |   });
  51 | });
  52 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder.spec.js,Magic Number,"{'line': 60, 'column': 51, 'index': 1575}","  58 |     });
  59 |
> 60 |     expect(wrapper.find(Placeholder)).toHaveLength(0);
     |                                                   ^ Magic Number
  61 |   });
  62 |
  63 |   it('should render a placeholder when dragging over', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder.spec.js,Magic Number,"{'line': 69, 'column': 51, 'index': 1818}","  67 |     });
  68 |
> 69 |     expect(wrapper.find(Placeholder)).toHaveLength(1);
     |                                                   ^ Magic Number
  70 |   });
  71 |
  72 |   it('should not render a placeholder when over nothing', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder.spec.js,Magic Number,"{'line': 78, 'column': 51, 'index': 2067}","  76 |     });
  77 |
> 78 |     expect(wrapper.find(Placeholder)).toHaveLength(0);
     |                                                   ^ Magic Number
  79 |   });
  80 | });
  81 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder-setup-warning.spec.js,Duplicate Assert,"{'line': 55, 'column': 4, 'index': 1265}","  53 |       WrappedComponent: WithNoPlaceholder,
  54 |     });
> 55 |     expect(console.warn).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  56 |
  57 |     wrapper.setProps(isOverForeign);
  58 |     expect(console.warn).toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder-setup-warning.spec.js,Duplicate Assert,"{'line': 58, 'column': 4, 'index': 1352}","  56 |
  57 |     wrapper.setProps(isOverForeign);
> 58 |     expect(console.warn).toHaveBeenCalled();
     |    ^ Duplicate Assert
  59 |
  60 |     wrapper.unmount();
  61 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder-setup-warning.spec.js,Duplicate Assert,"{'line': 83, 'column': 4, 'index': 1983}","  81 |       WrappedComponent: WithNoPlaceholder,
  82 |     });
> 83 |     expect(console.warn).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  84 |
  85 |     wrapper.setProps(isNotOverForeign);
  86 |     expect(console.warn).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder-setup-warning.spec.js,Duplicate Assert,"{'line': 83, 'column': 4, 'index': 1983}","  81 |       WrappedComponent: WithNoPlaceholder,
  82 |     });
> 83 |     expect(console.warn).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  84 |
  85 |     wrapper.setProps(isNotOverForeign);
  86 |     expect(console.warn).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder-setup-warning.spec.js,Duplicate Assert,"{'line': 86, 'column': 4, 'index': 2073}","  84 |
  85 |     wrapper.setProps(isNotOverForeign);
> 86 |     expect(console.warn).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  87 |
  88 |     wrapper.unmount();
  89 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder-setup-warning.spec.js,Duplicate Assert,"{'line': 86, 'column': 4, 'index': 2073}","  84 |
  85 |     wrapper.setProps(isNotOverForeign);
> 86 |     expect(console.warn).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  87 |
  88 |     wrapper.unmount();
  89 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder-setup-warning.spec.js,Redundant Print,"{'line': 44, 'column': 11, 'index': 988}","  42 |     });
  43 |
> 44 |     expect(console.warn).toHaveBeenCalled();
     |           ^ Redundant Print
  45 |
  46 |     wrapper.unmount();
  47 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder-setup-warning.spec.js,Redundant Print,"{'line': 55, 'column': 11, 'index': 1272}","  53 |       WrappedComponent: WithNoPlaceholder,
  54 |     });
> 55 |     expect(console.warn).not.toHaveBeenCalled();
     |           ^ Redundant Print
  56 |
  57 |     wrapper.setProps(isOverForeign);
  58 |     expect(console.warn).toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder-setup-warning.spec.js,Redundant Print,"{'line': 58, 'column': 11, 'index': 1359}","  56 |
  57 |     wrapper.setProps(isOverForeign);
> 58 |     expect(console.warn).toHaveBeenCalled();
     |           ^ Redundant Print
  59 |
  60 |     wrapper.unmount();
  61 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder-setup-warning.spec.js,Redundant Print,"{'line': 72, 'column': 11, 'index': 1698}","  70 |     });
  71 |
> 72 |     expect(console.warn).not.toHaveBeenCalled();
     |           ^ Redundant Print
  73 |
  74 |     wrapper.unmount();
  75 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder-setup-warning.spec.js,Redundant Print,"{'line': 83, 'column': 11, 'index': 1990}","  81 |       WrappedComponent: WithNoPlaceholder,
  82 |     });
> 83 |     expect(console.warn).not.toHaveBeenCalled();
     |           ^ Redundant Print
  84 |
  85 |     wrapper.setProps(isNotOverForeign);
  86 |     expect(console.warn).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/placeholder-setup-warning.spec.js,Redundant Print,"{'line': 86, 'column': 11, 'index': 2080}","  84 |
  85 |     wrapper.setProps(isNotOverForeign);
> 86 |     expect(console.warn).not.toHaveBeenCalled();
     |           ^ Redundant Print
  87 |
  88 |     wrapper.unmount();
  89 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/pass-through-snapshot.spec.js,Duplicate Assert,"{'line': 35, 'column': 2, 'index': 879}","  33 |     WrappedComponent: getStubber(myMock),
  34 |   });
> 35 |   expect(getLastSnapshot(myMock)).toBe(homeAtRest.snapshot);
     |  ^ Duplicate Assert
  36 |
  37 |   wrapper.setProps(isOverHome);
  38 |   expect(getLastSnapshot(myMock)).toBe(isOverHome.snapshot);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/pass-through-snapshot.spec.js,Duplicate Assert,"{'line': 35, 'column': 2, 'index': 879}","  33 |     WrappedComponent: getStubber(myMock),
  34 |   });
> 35 |   expect(getLastSnapshot(myMock)).toBe(homeAtRest.snapshot);
     |  ^ Duplicate Assert
  36 |
  37 |   wrapper.setProps(isOverHome);
  38 |   expect(getLastSnapshot(myMock)).toBe(isOverHome.snapshot);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/pass-through-snapshot.spec.js,Duplicate Assert,"{'line': 38, 'column': 2, 'index': 973}","  36 |
  37 |   wrapper.setProps(isOverHome);
> 38 |   expect(getLastSnapshot(myMock)).toBe(isOverHome.snapshot);
     |  ^ Duplicate Assert
  39 |
  40 |   // now over foreign list
  41 |   wrapper.setProps(isNotOverHome);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/pass-through-snapshot.spec.js,Duplicate Assert,"{'line': 42, 'column': 2, 'index': 1097}","  40 |   // now over foreign list
  41 |   wrapper.setProps(isNotOverHome);
> 42 |   expect(getLastSnapshot(myMock)).toBe(isNotOverHome.snapshot);
     |  ^ Duplicate Assert
  43 |
  44 |   // drag is now over
  45 |   wrapper.setProps(homeAtRest);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/pass-through-snapshot.spec.js,Duplicate Assert,"{'line': 46, 'column': 2, 'index': 1216}","  44 |   // drag is now over
  45 |   wrapper.setProps(homeAtRest);
> 46 |   expect(getLastSnapshot(myMock)).toBe(homeAtRest.snapshot);
     |  ^ Duplicate Assert
  47 | });
  48 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/pass-through-snapshot.spec.js,Duplicate Assert,"{'line': 46, 'column': 2, 'index': 1216}","  44 |   // drag is now over
  45 |   wrapper.setProps(homeAtRest);
> 46 |   expect(getLastSnapshot(myMock)).toBe(homeAtRest.snapshot);
     |  ^ Duplicate Assert
  47 | });
  48 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/own-props-validation.spec.js,Unknown Test,"{'column': 0, 'line': 16}","  14 | });
  15 |
> 16 | it('should throw if no droppableId is provided', () => {
  17 |   const ownProps: OwnProps = {
  18 |     ...defaultOwnProps,
  19 |   };",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/own-props-validation.spec.js,Unknown Test,"{'column': 0, 'line': 40}","  38 | });
  39 |
> 40 | it('should throw if isDropDisabled is set to null', () => {
  41 |   const ownProps: OwnProps = {
  42 |     ...defaultOwnProps,
  43 |   };",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/own-props-validation.spec.js,Unknown Test,"{'column': 0, 'line': 51}","  49 | });
  50 |
> 51 | it('should throw if isCombineEnabled is set to null', () => {
  52 |   const ownProps: OwnProps = {
  53 |     ...defaultOwnProps,
  54 |   };",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/own-props-validation.spec.js,Unknown Test,"{'column': 0, 'line': 62}","  60 | });
  61 |
> 62 | it('should throw if ignoreContainerClipping is set to null', () => {
  63 |   const ownProps: OwnProps = {
  64 |     ...defaultOwnProps,
  65 |   };",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/inner-ref-validation.spec.js,Unknown Test,"{'column': 0, 'line': 7}","   5 | import { withError } from '../../../util/console';
   6 |
>  7 | it('should warn a consumer if they have not provided a ref', () => {
   8 |   class NoRef extends React.Component<{ provided: Provided }> {
   9 |     render() {
  10 |       const provided: Provided = this.props.provided;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/inner-ref-validation.spec.js,Unknown Test,"{'column': 0, 'line': 26}","  24 | });
  25 |
> 26 | it('should throw a consumer if they have provided an SVGElement', () => {
  27 |   class WithSVG extends React.Component<{ provided: Provided }> {
  28 |     render() {
  29 |       const provided: Provided = this.props.provided;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/home-list-placeholder-cleanup.spec.js,Duplicate Assert,"{'line': 20, 'column': 2, 'index': 512}","  18 |   });
  19 |
> 20 |   expect(wrapper.find(Placeholder)).toHaveLength(1);
     |  ^ Duplicate Assert
  21 |
  22 |   wrapper.setProps({
  23 |     ...homeAtRest,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/home-list-placeholder-cleanup.spec.js,Duplicate Assert,"{'line': 27, 'column': 2, 'index': 633}","  25 |   wrapper.update();
  26 |
> 27 |   expect(wrapper.find(Placeholder)).toHaveLength(0);
     |  ^ Duplicate Assert
  28 | });
  29 |
  30 | it('should animate a placeholder closed in a home list after a drag', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/home-list-placeholder-cleanup.spec.js,Duplicate Assert,"{'line': 37, 'column': 2, 'index': 890}","  35 |   });
  36 |
> 37 |   expect(wrapper.find(Placeholder)).toHaveLength(1);
     |  ^ Duplicate Assert
  38 |
  39 |   wrapper.setProps({
  40 |     ...homePostDropAnimation,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/home-list-placeholder-cleanup.spec.js,Duplicate Assert,"{'line': 37, 'column': 2, 'index': 890}","  35 |   });
  36 |
> 37 |   expect(wrapper.find(Placeholder)).toHaveLength(1);
     |  ^ Duplicate Assert
  38 |
  39 |   wrapper.setProps({
  40 |     ...homePostDropAnimation,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/home-list-placeholder-cleanup.spec.js,Duplicate Assert,"{'line': 44, 'column': 2, 'index': 1022}","  42 |   wrapper.update();
  43 |
> 44 |   expect(wrapper.find(Placeholder)).toHaveLength(1);
     |  ^ Duplicate Assert
  45 |   expect(homePostDropAnimation.shouldAnimatePlaceholder).toBe(true);
  46 |
  47 |   // finishing the animation",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/home-list-placeholder-cleanup.spec.js,Duplicate Assert,"{'line': 44, 'column': 2, 'index': 1022}","  42 |   wrapper.update();
  43 |
> 44 |   expect(wrapper.find(Placeholder)).toHaveLength(1);
     |  ^ Duplicate Assert
  45 |   expect(homePostDropAnimation.shouldAnimatePlaceholder).toBe(true);
  46 |
  47 |   // finishing the animation",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/home-list-placeholder-cleanup.spec.js,Duplicate Assert,"{'line': 56, 'column': 2, 'index': 1347}","  54 |
  55 |   // placeholder is now gone
> 56 |   expect(wrapper.find(Placeholder)).toHaveLength(0);
     |  ^ Duplicate Assert
  57 | });
  58 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/home-list-placeholder-cleanup.spec.js,Magic Number,"{'line': 20, 'column': 49, 'index': 559}","  18 |   });
  19 |
> 20 |   expect(wrapper.find(Placeholder)).toHaveLength(1);
     |                                                 ^ Magic Number
  21 |
  22 |   wrapper.setProps({
  23 |     ...homeAtRest,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/home-list-placeholder-cleanup.spec.js,Magic Number,"{'line': 27, 'column': 49, 'index': 680}","  25 |   wrapper.update();
  26 |
> 27 |   expect(wrapper.find(Placeholder)).toHaveLength(0);
     |                                                 ^ Magic Number
  28 | });
  29 |
  30 | it('should animate a placeholder closed in a home list after a drag', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/home-list-placeholder-cleanup.spec.js,Magic Number,"{'line': 37, 'column': 49, 'index': 937}","  35 |   });
  36 |
> 37 |   expect(wrapper.find(Placeholder)).toHaveLength(1);
     |                                                 ^ Magic Number
  38 |
  39 |   wrapper.setProps({
  40 |     ...homePostDropAnimation,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/home-list-placeholder-cleanup.spec.js,Magic Number,"{'line': 44, 'column': 49, 'index': 1069}","  42 |   wrapper.update();
  43 |
> 44 |   expect(wrapper.find(Placeholder)).toHaveLength(1);
     |                                                 ^ Magic Number
  45 |   expect(homePostDropAnimation.shouldAnimatePlaceholder).toBe(true);
  46 |
  47 |   // finishing the animation",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/droppable/home-list-placeholder-cleanup.spec.js,Magic Number,"{'line': 56, 'column': 49, 'index': 1394}","  54 |
  55 |   // placeholder is now gone
> 56 |   expect(wrapper.find(Placeholder)).toHaveLength(0);
     |                                                 ^ Magic Number
  57 | });
  58 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 139, 'column': 4, 'index': 3660}","  137 |     // A publish has started
  138 |     marshal.startPublishing(defaultRequest);
> 139 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  140 |
  141 |     registry.draggable.register(
  142 |       getDraggableEntry({ dimension: beforeInHome1 }),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 139, 'column': 4, 'index': 3660}","  137 |     // A publish has started
  138 |     marshal.startPublishing(defaultRequest);
> 139 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  140 |
  141 |     registry.draggable.register(
  142 |       getDraggableEntry({ dimension: beforeInHome1 }),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 148, 'column': 4, 'index': 3979}","  146 |     );
  147 |     expect(callbacks.collectionStarting).toHaveBeenCalled();
> 148 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  149 |
  150 |     // Fire the collection / publish step
  151 |     requestAnimationFrame.step();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 148, 'column': 4, 'index': 3979}","  146 |     );
  147 |     expect(callbacks.collectionStarting).toHaveBeenCalled();
> 148 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  149 |
  150 |     // Fire the collection / publish step
  151 |     requestAnimationFrame.step();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 157, 'column': 4, 'index': 4310}","  155 |       modified: [{ droppableId: scrollableHome.descriptor.id, scroll: origin }],
  156 |     };
> 157 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledWith(expected);
      |    ^ Duplicate Assert
  158 |   });
  159 |
  160 |   it('should not do anything if trying to add a draggable that does not have the same type as the dragging item', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 171, 'column': 4, 'index': 4834}","  169 |     // A publish has started
  170 |     marshal.startPublishing(defaultRequest);
> 171 |     expect(callbacks.collectionStarting).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  172 |
  173 |     // Registering a new draggable (inserted before inHome1)
  174 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 171, 'column': 4, 'index': 4834}","  169 |     // A publish has started
  170 |     marshal.startPublishing(defaultRequest);
> 171 |     expect(callbacks.collectionStarting).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  172 |
  173 |     // Registering a new draggable (inserted before inHome1)
  174 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 178, 'column': 4, 'index': 5057}","  176 |       getDraggableEntry({ dimension: inAnotherType }),
  177 |     );
> 178 |     expect(callbacks.collectionStarting).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  179 |   });
  180 |
  181 |   it('should order published draggables by their index', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 178, 'column': 4, 'index': 5057}","  176 |       getDraggableEntry({ dimension: inAnotherType }),
  177 |     );
> 178 |     expect(callbacks.collectionStarting).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  179 |   });
  180 |
  181 |   it('should order published draggables by their index', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 209, 'column': 4, 'index': 5930}","  207 |     // A publish has started
  208 |     marshal.startPublishing(defaultRequest);
> 209 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  210 |
  211 |     // publishing the higher index value first
  212 |     registry.draggable.register(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 209, 'column': 4, 'index': 5930}","  207 |     // A publish has started
  208 |     marshal.startPublishing(defaultRequest);
> 209 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  210 |
  211 |     // publishing the higher index value first
  212 |     registry.draggable.register(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 219, 'column': 4, 'index': 6282}","  217 |       getDraggableEntry({ dimension: beforeInHome1 }),
  218 |     );
> 219 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  220 |
  221 |     // Fire the collection / publish step
  222 |     requestAnimationFrame.step();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 219, 'column': 4, 'index': 6282}","  217 |       getDraggableEntry({ dimension: beforeInHome1 }),
  218 |     );
> 219 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  220 |
  221 |     // Fire the collection / publish step
  222 |     requestAnimationFrame.step();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 229, 'column': 4, 'index': 6660}","  227 |       modified: [{ droppableId: scrollableHome.descriptor.id, scroll: origin }],
  228 |     };
> 229 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledWith(expected);
      |    ^ Duplicate Assert
  230 |   });
  231 |
  232 |   it('should log a warning if trying to add or remove a draggable from a non-virtual list', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 251, 'column': 4, 'index': 7398}","  249 |     // A publish has started
  250 |     marshal.startPublishing(defaultRequest);
> 251 |     expect(callbacks.collectionStarting).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  252 |
  253 |     // additions log a warning
  254 |     withWarn(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 251, 'column': 4, 'index': 7398}","  249 |     // A publish has started
  250 |     marshal.startPublishing(defaultRequest);
> 251 |     expect(callbacks.collectionStarting).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  252 |
  253 |     // additions log a warning
  254 |     withWarn(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 275, 'column': 4, 'index': 8038}","  273 |
  274 |     // neither cause a collection to start
> 275 |     expect(callbacks.collectionStarting).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  276 |   });
  277 | });
  278 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 275, 'column': 4, 'index': 8038}","  273 |
  274 |     // neither cause a collection to start
> 275 |     expect(callbacks.collectionStarting).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  276 |   });
  277 | });
  278 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 291, 'column': 4, 'index': 8514}","  289 |     // A publish has started
  290 |     marshal.startPublishing(defaultRequest);
> 291 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  292 |
  293 |     registry.draggable.unregister(
  294 |       registry.draggable.getById(preset.inHome2.descriptor.id),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 291, 'column': 4, 'index': 8514}","  289 |     // A publish has started
  290 |     marshal.startPublishing(defaultRequest);
> 291 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  292 |
  293 |     registry.draggable.unregister(
  294 |       registry.draggable.getById(preset.inHome2.descriptor.id),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 302, 'column': 4, 'index': 8903}","  300 |       registry.draggable.getById(preset.inForeign1.descriptor.id),
  301 |     );
> 302 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  303 |
  304 |     // Fire the collection / publish step
  305 |     requestAnimationFrame.flush();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 302, 'column': 4, 'index': 8903}","  300 |       registry.draggable.getById(preset.inForeign1.descriptor.id),
  301 |     );
> 302 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  303 |
  304 |     // Fire the collection / publish step
  305 |     requestAnimationFrame.flush();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 318, 'column': 4, 'index': 9426}","  316 |       ],
  317 |     };
> 318 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledWith(expected);
      |    ^ Duplicate Assert
  319 |   });
  320 |
  321 |   it('should do nothing if tying to remove a draggable of a different type', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 429, 'column': 4, 'index': 12835}","  427 |     // A publish has started
  428 |     marshal.startPublishing(defaultRequest);
> 429 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  430 |
  431 |     registry.draggable.register(
  432 |       getDraggableEntry({ dimension: beforeInHome2 }),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 429, 'column': 4, 'index': 12835}","  427 |     // A publish has started
  428 |     marshal.startPublishing(defaultRequest);
> 429 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  430 |
  431 |     registry.draggable.register(
  432 |       getDraggableEntry({ dimension: beforeInHome2 }),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 435, 'column': 4, 'index': 13059}","  433 |     );
  434 |     expect(callbacks.collectionStarting).toHaveBeenCalled();
> 435 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  436 |     expect(watcher.droppable.getScrollWhileDragging).not.toHaveBeenCalled();
  437 |
  438 |     // Fire the collection / publish step",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 435, 'column': 4, 'index': 13059}","  433 |     );
  434 |     expect(callbacks.collectionStarting).toHaveBeenCalled();
> 435 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  436 |     expect(watcher.droppable.getScrollWhileDragging).not.toHaveBeenCalled();
  437 |
  438 |     // Fire the collection / publish step",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 436, 'column': 4, 'index': 13126}","  434 |     expect(callbacks.collectionStarting).toHaveBeenCalled();
  435 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
> 436 |     expect(watcher.droppable.getScrollWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  437 |
  438 |     // Fire the collection / publish step
  439 |     requestAnimationFrame.flush();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 443, 'column': 4, 'index': 13326}","  441 |     // not hiding placeholder in home list
  442 |
> 443 |     expect(watcher.droppable.getScrollWhileDragging).toHaveBeenCalledWith(
      |    ^ Duplicate Assert
  444 |       scrollableHome.descriptor.id,
  445 |       getFrame(scrollableHome).scroll.current,
  446 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 453, 'column': 4, 'index': 13668}","  451 |       modified: [{ droppableId: scrollableHome.descriptor.id, scroll: origin }],
  452 |     };
> 453 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledWith(expected);
      |    ^ Duplicate Assert
  454 |   });
  455 |
  456 |   it('should recollect the scroll from droppables that had draggable removals', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 467, 'column': 4, 'index': 14192}","  465 |     // A publish has started
  466 |     marshal.startPublishing(defaultRequest);
> 467 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  468 |
  469 |     registry.draggable.unregister(
  470 |       registry.draggable.getById(preset.inHome2.descriptor.id),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 467, 'column': 4, 'index': 14192}","  465 |     // A publish has started
  466 |     marshal.startPublishing(defaultRequest);
> 467 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  468 |
  469 |     registry.draggable.unregister(
  470 |       registry.draggable.getById(preset.inHome2.descriptor.id),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 473, 'column': 4, 'index': 14427}","  471 |     );
  472 |     expect(callbacks.collectionStarting).toHaveBeenCalled();
> 473 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  474 |     expect(watcher.droppable.getScrollWhileDragging).not.toHaveBeenCalled();
  475 |
  476 |     // Fire the collection / publish step",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 473, 'column': 4, 'index': 14427}","  471 |     );
  472 |     expect(callbacks.collectionStarting).toHaveBeenCalled();
> 473 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  474 |     expect(watcher.droppable.getScrollWhileDragging).not.toHaveBeenCalled();
  475 |
  476 |     // Fire the collection / publish step",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 474, 'column': 4, 'index': 14494}","  472 |     expect(callbacks.collectionStarting).toHaveBeenCalled();
  473 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
> 474 |     expect(watcher.droppable.getScrollWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  475 |
  476 |     // Fire the collection / publish step
  477 |     requestAnimationFrame.flush();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 481, 'column': 4, 'index': 14694}","  479 |     // not hiding placeholder in home list
  480 |
> 481 |     expect(watcher.droppable.getScrollWhileDragging).toHaveBeenCalledWith(
      |    ^ Duplicate Assert
  482 |       scrollableHome.descriptor.id,
  483 |       getFrame(scrollableHome).scroll.current,
  484 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 491, 'column': 4, 'index': 15051}","  489 |       modified: [{ droppableId: scrollableHome.descriptor.id, scroll: origin }],
  490 |     };
> 491 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledWith(expected);
      |    ^ Duplicate Assert
  492 |   });
  493 | });
  494 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 521, 'column': 4, 'index': 15925}","  519 |     expect(callbacks.collectionStarting).toHaveBeenCalled();
  520 |     // no request animation fired yet
> 521 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  522 |
  523 |     // marshal told to stop - which should cancel any pending publishes
  524 |     marshal.stopPublishing();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 521, 'column': 4, 'index': 15925}","  519 |     expect(callbacks.collectionStarting).toHaveBeenCalled();
  520 |     // no request animation fired yet
> 521 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  522 |
  523 |     // marshal told to stop - which should cancel any pending publishes
  524 |     marshal.stopPublishing();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 528, 'column': 4, 'index': 16158}","  526 |     // flushing any frames
  527 |     requestAnimationFrame.flush();
> 528 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  529 |   });
  530 | });
  531 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 528, 'column': 4, 'index': 16158}","  526 |     // flushing any frames
  527 |     requestAnimationFrame.flush();
> 528 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  529 |   });
  530 | });
  531 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 548, 'column': 4, 'index': 16753}","  546 |     );
  547 |     requestAnimationFrame.step();
> 548 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  549 |     // $FlowFixMe
  550 |     callbacks.publishWhileDragging.mockReset();
  551 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 556, 'column': 4, 'index': 17019}","  554 |     );
  555 |     requestAnimationFrame.step();
> 556 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  557 |   });
  558 |
  559 |   it('should allow subsequent publishes between drags', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 574, 'column': 4, 'index': 17578}","  572 |     );
  573 |     requestAnimationFrame.step();
> 574 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  575 |     // $FlowFixMe
  576 |     callbacks.publishWhileDragging.mockReset();
  577 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Duplicate Assert,"{'line': 587, 'column': 4, 'index': 17940}","  585 |     );
  586 |     requestAnimationFrame.step();
> 587 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  588 |   });
  589 | });
  590 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Eager Test,"{'line': 142, 'column': 6, 'index': 3763}","  140 |
  141 |     registry.draggable.register(
> 142 |       getDraggableEntry({ dimension: beforeInHome1 }),
      |      ^ Eager Test
  143 |     );
  144 |     registry.draggable.register(
  145 |       getDraggableEntry({ dimension: beforeInHome2 }),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Eager Test,"{'line': 145, 'column': 6, 'index': 3858}","  143 |     );
  144 |     registry.draggable.register(
> 145 |       getDraggableEntry({ dimension: beforeInHome2 }),
      |      ^ Eager Test
  146 |     );
  147 |     expect(callbacks.collectionStarting).toHaveBeenCalled();
  148 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Eager Test,"{'line': 213, 'column': 6, 'index': 6080}","  211 |     // publishing the higher index value first
  212 |     registry.draggable.register(
> 213 |       getDraggableEntry({ dimension: beforeInHome2 }),
      |      ^ Eager Test
  214 |     );
  215 |     // publishing the lower index value second
  216 |     registry.draggable.register(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Eager Test,"{'line': 217, 'column': 6, 'index': 6222}","  215 |     // publishing the lower index value second
  216 |     registry.draggable.register(
> 217 |       getDraggableEntry({ dimension: beforeInHome1 }),
      |      ^ Eager Test
  218 |     );
  219 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();
  220 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Eager Test,"{'line': 545, 'column': 6, 'index': 16658}","  543 |
  544 |     registry.draggable.register(
> 545 |       getDraggableEntry({ dimension: preset.inHome2 }),
      |      ^ Eager Test
  546 |     );
  547 |     requestAnimationFrame.step();
  548 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledTimes(1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Eager Test,"{'line': 553, 'column': 6, 'index': 16924}","  551 |
  552 |     registry.draggable.register(
> 553 |       getDraggableEntry({ dimension: preset.inHome3 }),
      |      ^ Eager Test
  554 |     );
  555 |     requestAnimationFrame.step();
  556 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledTimes(1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Eager Test,"{'line': 571, 'column': 6, 'index': 17483}","  569 |
  570 |     registry.draggable.register(
> 571 |       getDraggableEntry({ dimension: preset.inHome2 }),
      |      ^ Eager Test
  572 |     );
  573 |     requestAnimationFrame.step();
  574 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledTimes(1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Eager Test,"{'line': 584, 'column': 6, 'index': 17845}","  582 |
  583 |     registry.draggable.register(
> 584 |       getDraggableEntry({ dimension: preset.inHome3 }),
      |      ^ Eager Test
  585 |     );
  586 |     requestAnimationFrame.step();
  587 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledTimes(1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Lazy Test,"{'line': 142, 'column': 6, 'index': 3763}","  140 |
  141 |     registry.draggable.register(
> 142 |       getDraggableEntry({ dimension: beforeInHome1 }),
      |      ^ Lazy Test
  143 |     );
  144 |     registry.draggable.register(
  145 |       getDraggableEntry({ dimension: beforeInHome2 }),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Lazy Test,"{'line': 176, 'column': 6, 'index': 4997}","  174 |
  175 |     registry.draggable.register(
> 176 |       getDraggableEntry({ dimension: inAnotherType }),
      |      ^ Lazy Test
  177 |     );
  178 |     expect(callbacks.collectionStarting).not.toHaveBeenCalled();
  179 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Lazy Test,"{'line': 213, 'column': 6, 'index': 6080}","  211 |     // publishing the higher index value first
  212 |     registry.draggable.register(
> 213 |       getDraggableEntry({ dimension: beforeInHome2 }),
      |      ^ Lazy Test
  214 |     );
  215 |     // publishing the lower index value second
  216 |     registry.draggable.register(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Lazy Test,"{'line': 264, 'column': 8, 'index': 7753}","  262 |       };
  263 |       registry.draggable.register(
> 264 |         getDraggableEntry({ dimension: beforeInHome1 }),
      |        ^ Lazy Test
  265 |       );
  266 |     });
  267 |     // removals log a warning",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Lazy Test,"{'line': 432, 'column': 6, 'index': 12938}","  430 |
  431 |     registry.draggable.register(
> 432 |       getDraggableEntry({ dimension: beforeInHome2 }),
      |      ^ Lazy Test
  433 |     );
  434 |     expect(callbacks.collectionStarting).toHaveBeenCalled();
  435 |     expect(callbacks.publishWhileDragging).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Lazy Test,"{'line': 517, 'column': 6, 'index': 15765}","  515 |
  516 |     registry.draggable.register(
> 517 |       getDraggableEntry({ dimension: preset.inHome2 }),
      |      ^ Lazy Test
  518 |     );
  519 |     expect(callbacks.collectionStarting).toHaveBeenCalled();
  520 |     // no request animation fired yet",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Lazy Test,"{'line': 545, 'column': 6, 'index': 16658}","  543 |
  544 |     registry.draggable.register(
> 545 |       getDraggableEntry({ dimension: preset.inHome2 }),
      |      ^ Lazy Test
  546 |     );
  547 |     requestAnimationFrame.step();
  548 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledTimes(1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/publish-while-dragging.spec.js,Lazy Test,"{'line': 571, 'column': 6, 'index': 17483}","  569 |
  570 |     registry.draggable.register(
> 571 |       getDraggableEntry({ dimension: preset.inHome2 }),
      |      ^ Lazy Test
  572 |     );
  573 |     requestAnimationFrame.step();
  574 |     expect(callbacks.publishWhileDragging).toHaveBeenCalledTimes(1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Duplicate Assert,"{'line': 165, 'column': 2, 'index': 4818}","  163 |   const result: StartPublishingResult = marshal.startPublishing(defaultRequest);
  164 |
> 165 |   expect(result).toEqual({
      |  ^ Duplicate Assert
  166 |     critical,
  167 |     dimensions: expectedMap,
  168 |     viewport,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Duplicate Assert,"{'line': 170, 'column': 2, 'index': 4908}","  168 |     viewport,
  169 |   });
> 170 |   expect(result).not.toEqual({
      |  ^ Duplicate Assert
  171 |     critical,
  172 |     dimensions: preset.dimensions,
  173 |     viewport,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Duplicate Assert,"{'line': 289, 'column': 4, 'index': 8408}","  287 |     };
  288 |
> 289 |     expect(start(marshal)).toEqual(expected);
      |    ^ Duplicate Assert
  290 |     stop(marshal);
  291 |     expect(start(marshal)).toEqual(expected);
  292 |     stop(marshal);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Duplicate Assert,"{'line': 289, 'column': 4, 'index': 8408}","  287 |     };
  288 |
> 289 |     expect(start(marshal)).toEqual(expected);
      |    ^ Duplicate Assert
  290 |     stop(marshal);
  291 |     expect(start(marshal)).toEqual(expected);
  292 |     stop(marshal);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Duplicate Assert,"{'line': 291, 'column': 4, 'index': 8473}","  289 |     expect(start(marshal)).toEqual(expected);
  290 |     stop(marshal);
> 291 |     expect(start(marshal)).toEqual(expected);
      |    ^ Duplicate Assert
  292 |     stop(marshal);
  293 |     expect(start(marshal)).toEqual(expected);
  294 |     stop(marshal);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Duplicate Assert,"{'line': 291, 'column': 4, 'index': 8473}","  289 |     expect(start(marshal)).toEqual(expected);
  290 |     stop(marshal);
> 291 |     expect(start(marshal)).toEqual(expected);
      |    ^ Duplicate Assert
  292 |     stop(marshal);
  293 |     expect(start(marshal)).toEqual(expected);
  294 |     stop(marshal);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Duplicate Assert,"{'line': 293, 'column': 4, 'index': 8538}","  291 |     expect(start(marshal)).toEqual(expected);
  292 |     stop(marshal);
> 293 |     expect(start(marshal)).toEqual(expected);
      |    ^ Duplicate Assert
  294 |     stop(marshal);
  295 |   });
  296 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Duplicate Assert,"{'line': 293, 'column': 4, 'index': 8538}","  291 |     expect(start(marshal)).toEqual(expected);
  292 |     stop(marshal);
> 293 |     expect(start(marshal)).toEqual(expected);
      |    ^ Duplicate Assert
  294 |     stop(marshal);
  295 |   });
  296 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Eager Test,"{'line': 74, 'column': 30, 'index': 1977}","  72 |   );
  73 |
> 74 |   registry.draggable.register(getDraggableEntry({ dimension: preset.inHome1 }));
     |                              ^ Eager Test
  75 |   registry.draggable.register(getDraggableEntry({ dimension: preset.inHome2 }));
  76 |   registry.droppable.register(getDroppableEntry({ dimension: preset.home }));
  77 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Eager Test,"{'line': 75, 'column': 30, 'index': 2058}","  73 |
  74 |   registry.draggable.register(getDraggableEntry({ dimension: preset.inHome1 }));
> 75 |   registry.draggable.register(getDraggableEntry({ dimension: preset.inHome2 }));
     |                              ^ Eager Test
  76 |   registry.droppable.register(getDroppableEntry({ dimension: preset.home }));
  77 |
  78 |   const result: StartPublishingResult = marshal.startPublishing(defaultRequest);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Eager Test,"{'line': 76, 'column': 30, 'index': 2139}","  74 |   registry.draggable.register(getDraggableEntry({ dimension: preset.inHome1 }));
  75 |   registry.draggable.register(getDraggableEntry({ dimension: preset.inHome2 }));
> 76 |   registry.droppable.register(getDroppableEntry({ dimension: preset.home }));
     |                              ^ Eager Test
  77 |
  78 |   const result: StartPublishingResult = marshal.startPublishing(defaultRequest);
  79 |   const expected: StartPublishingResult = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Eager Test,"{'line': 231, 'column': 30, 'index': 6634}","  229 |     registry.droppable.getById(preset.home.descriptor.id),
  230 |   );
> 231 |   registry.droppable.register(getDroppableEntry({ dimension: updatedHome }));
      |                              ^ Eager Test
  232 |   delete expected.droppables[preset.home.descriptor.id];
  233 |   expected.droppables[updatedHome.descriptor.id] = updatedHome;
  234 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Eager Test,"{'line': 247, 'column': 34, 'index': 7242}","  245 |       draggable.descriptor.id,
  246 |     );
> 247 |     const fresh: DraggableEntry = getDraggableEntry({
      |                                  ^ Eager Test
  248 |       uniqueId: last.uniqueId,
  249 |       dimension: updated,
  250 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Lazy Test,"{'line': 74, 'column': 30, 'index': 1977}","  72 |   );
  73 |
> 74 |   registry.draggable.register(getDraggableEntry({ dimension: preset.inHome1 }));
     |                              ^ Lazy Test
  75 |   registry.draggable.register(getDraggableEntry({ dimension: preset.inHome2 }));
  76 |   registry.droppable.register(getDroppableEntry({ dimension: preset.home }));
  77 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Lazy Test,"{'line': 76, 'column': 30, 'index': 2139}","  74 |   registry.draggable.register(getDraggableEntry({ dimension: preset.inHome1 }));
  75 |   registry.draggable.register(getDraggableEntry({ dimension: preset.inHome2 }));
> 76 |   registry.droppable.register(getDroppableEntry({ dimension: preset.home }));
     |                              ^ Lazy Test
  77 |
  78 |   const result: StartPublishingResult = marshal.startPublishing(defaultRequest);
  79 |   const expected: StartPublishingResult = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Lazy Test,"{'line': 195, 'column': 34, 'index': 5569}","  193 |     preset.inHome2.descriptor.id,
  194 |   );
> 195 |   const updated: DraggableEntry = getDraggableEntry({
      |                                  ^ Lazy Test
  196 |     uniqueId: last.uniqueId,
  197 |     dimension: updatedInHome2,
  198 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Lazy Test,"{'line': 231, 'column': 30, 'index': 6634}","  229 |     registry.droppable.getById(preset.home.descriptor.id),
  230 |   );
> 231 |   registry.droppable.register(getDroppableEntry({ dimension: updatedHome }));
      |                              ^ Lazy Test
  232 |   delete expected.droppables[preset.home.descriptor.id];
  233 |   expected.droppables[updatedHome.descriptor.id] = updatedHome;
  234 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Lazy Test,"{'line': 247, 'column': 34, 'index': 7242}","  245 |       draggable.descriptor.id,
  246 |     );
> 247 |     const fresh: DraggableEntry = getDraggableEntry({
      |                                  ^ Lazy Test
  248 |       uniqueId: last.uniqueId,
  249 |       dimension: updated,
  250 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/initial-publish.spec.js,Lazy Test,"{'line': 337, 'column': 34, 'index': 9767}","  335 |       preset.inHome2.descriptor.id,
  336 |     );
> 337 |     const fresh: DraggableEntry = getDraggableEntry({
      |                                  ^ Lazy Test
  338 |       uniqueId: last.uniqueId,
  339 |       dimension: updatedInHome2,
  340 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/droppable-passthrough.spec.js,Duplicate Assert,"{'line': 28, 'column': 4, 'index': 1096}","  26 |     // initial lift
  27 |     marshal.startPublishing(defaultRequest);
> 28 |     expect(watcher.droppable.scroll).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  29 |
  30 |     // scroll
  31 |     marshal.scrollDroppable(critical.droppable.id, { x: 10, y: 20 });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/droppable-passthrough.spec.js,Duplicate Assert,"{'line': 32, 'column': 4, 'index': 1242}","  30 |     // scroll
  31 |     marshal.scrollDroppable(critical.droppable.id, { x: 10, y: 20 });
> 32 |     expect(watcher.droppable.scroll).toHaveBeenCalledWith(
     |    ^ Duplicate Assert
  33 |       critical.droppable.id,
  34 |       { x: 10, y: 20 },
  35 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/droppable-passthrough.spec.js,Duplicate Assert,"{'line': 140, 'column': 4, 'index': 4604}","  138 |     // initial lift
  139 |     marshal.startPublishing(defaultRequest);
> 140 |     expect(callbacks.updateDroppableIsEnabled).not.toHaveBeenCalled();
      |    ^ Duplicate Assert
  141 |
  142 |     marshal.updateDroppableIsEnabled(critical.droppable.id, false);
  143 |     expect(callbacks.updateDroppableIsEnabled).toHaveBeenCalledWith({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/dimension-marshal/droppable-passthrough.spec.js,Duplicate Assert,"{'line': 143, 'column': 4, 'index': 4744}","  141 |
  142 |     marshal.updateDroppableIsEnabled(critical.droppable.id, false);
> 143 |     expect(callbacks.updateDroppableIsEnabled).toHaveBeenCalledWith({
      |    ^ Duplicate Assert
  144 |       id: critical.droppable.id,
  145 |       isEnabled: false,
  146 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/post-drop.spec.js,Duplicate Assert,"{'line': 178, 'column': 4, 'index': 5124}","  176 |       shouldAnimatePlaceholder: false,
  177 |     };
> 178 |     expect(postDrop).toBe(atRest);
      |    ^ Duplicate Assert
  179 |     expect(postDrop).toEqual(expected);
  180 |   });
  181 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/post-drop.spec.js,Duplicate Assert,"{'line': 179, 'column': 4, 'index': 5159}","  177 |     };
  178 |     expect(postDrop).toBe(atRest);
> 179 |     expect(postDrop).toEqual(expected);
      |    ^ Duplicate Assert
  180 |   });
  181 |
  182 |   it('should cut animation in a list that was not animating', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/post-drop.spec.js,Duplicate Assert,"{'line': 198, 'column': 4, 'index': 5769}","  196 |       shouldAnimatePlaceholder: false,
  197 |     };
> 198 |     expect(postDrop).toBe(atRest);
      |    ^ Duplicate Assert
  199 |     expect(postDrop).toEqual(expected);
  200 |   });
  201 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/post-drop.spec.js,Duplicate Assert,"{'line': 199, 'column': 4, 'index': 5804}","  197 |     };
  198 |     expect(postDrop).toBe(atRest);
> 199 |     expect(postDrop).toEqual(expected);
      |    ^ Duplicate Assert
  200 |   });
  201 | });
  202 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dropping.spec.js,Duplicate Assert,"{'line': 44, 'column': 6, 'index': 1511}","  42 |       const whileDropping: MapProps = selector(state.dropAnimating(), ownProps);
  43 |
> 44 |       expect(whileDragging).toEqual(isOverMapProps);
     |      ^ Duplicate Assert
  45 |       // referential equality: memoization check
  46 |       expect(whileDragging).toBe(whileDropping);
  47 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dropping.spec.js,Duplicate Assert,"{'line': 46, 'column': 6, 'index': 1613}","  44 |       expect(whileDragging).toEqual(isOverMapProps);
  45 |       // referential equality: memoization check
> 46 |       expect(whileDragging).toBe(whileDropping);
     |      ^ Duplicate Assert
  47 |     });
  48 |
  49 |     it('should not break memoization from a combine', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dropping.spec.js,Duplicate Assert,"{'line': 77, 'column': 6, 'index': 2557}","  75 |       const whileDropping: MapProps = selector(droppingState, ownProps);
  76 |
> 77 |       expect(whileDragging).toEqual(isOverMapProps);
     |      ^ Duplicate Assert
  78 |       // referential equality: memoization check
  79 |       expect(whileDragging).toBe(whileDropping);
  80 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dropping.spec.js,Duplicate Assert,"{'line': 79, 'column': 6, 'index': 2659}","  77 |       expect(whileDragging).toEqual(isOverMapProps);
  78 |       // referential equality: memoization check
> 79 |       expect(whileDragging).toBe(whileDropping);
     |      ^ Duplicate Assert
  80 |     });
  81 |
  82 |     it('should use the completed.result and not the completed.impact for determining if over', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dragging.spec.js,Duplicate Assert,"{'line': 132, 'column': 6, 'index': 4349}","  130 |       expect(first).toEqual(isHomeButNotOver);
  131 |
> 132 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(
      |      ^ Duplicate Assert
  133 |         first,
  134 |       );
  135 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dragging.spec.js,Duplicate Assert,"{'line': 132, 'column': 6, 'index': 4349}","  130 |       expect(first).toEqual(isHomeButNotOver);
  131 |
> 132 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(
      |      ^ Duplicate Assert
  133 |         first,
  134 |       );
  135 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dragging.spec.js,Duplicate Assert,"{'line': 135, 'column': 6, 'index': 4448}","  133 |         first,
  134 |       );
> 135 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(
      |      ^ Duplicate Assert
  136 |         first,
  137 |       );
  138 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dragging.spec.js,Duplicate Assert,"{'line': 135, 'column': 6, 'index': 4448}","  133 |         first,
  134 |       );
> 135 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(
      |      ^ Duplicate Assert
  136 |         first,
  137 |       );
  138 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dragging.spec.js,Duplicate Assert,"{'line': 138, 'column': 6, 'index': 4547}","  136 |         first,
  137 |       );
> 138 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(
      |      ^ Duplicate Assert
  139 |         first,
  140 |       );
  141 |       const combine: Combine = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dragging.spec.js,Duplicate Assert,"{'line': 138, 'column': 6, 'index': 4547}","  136 |         first,
  137 |       );
> 138 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(
      |      ^ Duplicate Assert
  139 |         first,
  140 |       );
  141 |       const combine: Combine = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dragging.spec.js,Duplicate Assert,"{'line': 257, 'column': 6, 'index': 8397}","  255 |       expect(first).toEqual(isNotOver);
  256 |
> 257 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(
      |      ^ Duplicate Assert
  258 |         first,
  259 |       );
  260 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dragging.spec.js,Duplicate Assert,"{'line': 257, 'column': 6, 'index': 8397}","  255 |       expect(first).toEqual(isNotOver);
  256 |
> 257 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(
      |      ^ Duplicate Assert
  258 |         first,
  259 |       );
  260 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dragging.spec.js,Duplicate Assert,"{'line': 260, 'column': 6, 'index': 8496}","  258 |         first,
  259 |       );
> 260 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(
      |      ^ Duplicate Assert
  261 |         first,
  262 |       );
  263 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dragging.spec.js,Duplicate Assert,"{'line': 260, 'column': 6, 'index': 8496}","  258 |         first,
  259 |       );
> 260 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(
      |      ^ Duplicate Assert
  261 |         first,
  262 |       );
  263 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dragging.spec.js,Duplicate Assert,"{'line': 263, 'column': 6, 'index': 8595}","  261 |         first,
  262 |       );
> 263 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(
      |      ^ Duplicate Assert
  264 |         first,
  265 |       );
  266 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/dragging.spec.js,Duplicate Assert,"{'line': 263, 'column': 6, 'index': 8595}","  261 |         first,
  262 |       );
> 263 |       expect(selector(move(getNoWhere(), { x: 1, y: 1 }), ownProps)).toBe(
      |      ^ Duplicate Assert
  264 |         first,
  265 |       );
  266 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/disabled.spec.js,Duplicate Assert,"{'line': 56, 'column': 4, 'index': 1959}","  54 |
  55 |     // memoization
> 56 |     expect(selector(getNoWhere(), ownProps)).toBe(result);
     |    ^ Duplicate Assert
  57 |     expect(selector(getNoWhere(), ownProps)).toBe(result);
  58 |   });
  59 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/disabled.spec.js,Duplicate Assert,"{'line': 56, 'column': 4, 'index': 1959}","  54 |
  55 |     // memoization
> 56 |     expect(selector(getNoWhere(), ownProps)).toBe(result);
     |    ^ Duplicate Assert
  57 |     expect(selector(getNoWhere(), ownProps)).toBe(result);
  58 |   });
  59 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/disabled.spec.js,Duplicate Assert,"{'line': 57, 'column': 4, 'index': 2018}","  55 |     // memoization
  56 |     expect(selector(getNoWhere(), ownProps)).toBe(result);
> 57 |     expect(selector(getNoWhere(), ownProps)).toBe(result);
     |    ^ Duplicate Assert
  58 |   });
  59 | });
  60 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-droppable/disabled.spec.js,Duplicate Assert,"{'line': 57, 'column': 4, 'index': 2018}","  55 |     // memoization
  56 |     expect(selector(getNoWhere(), ownProps)).toBe(result);
> 57 |     expect(selector(getNoWhere(), ownProps)).toBe(result);
     |    ^ Duplicate Assert
  58 |   });
  59 | });
  60 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/something-else-is-dragging.spec.js,Duplicate Assert,"{'line': 193, 'column': 8, 'index': 6328}","  191 |         expect(first).toEqual(expected);
  192 |
> 193 |         expect(
      |        ^ Duplicate Assert
  194 |           selector(withImpact(current, cloneImpact(impact)), ownProps),
  195 |         ).toBe(first);
  196 |         expect(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/something-else-is-dragging.spec.js,Duplicate Assert,"{'line': 193, 'column': 8, 'index': 6328}","  191 |         expect(first).toEqual(expected);
  192 |
> 193 |         expect(
      |        ^ Duplicate Assert
  194 |           selector(withImpact(current, cloneImpact(impact)), ownProps),
  195 |         ).toBe(first);
  196 |         expect(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/something-else-is-dragging.spec.js,Duplicate Assert,"{'line': 196, 'column': 8, 'index': 6439}","  194 |           selector(withImpact(current, cloneImpact(impact)), ownProps),
  195 |         ).toBe(first);
> 196 |         expect(
      |        ^ Duplicate Assert
  197 |           selector(withImpact(current, cloneImpact(impact)), ownProps),
  198 |         ).toBe(first);
  199 |         expect(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/something-else-is-dragging.spec.js,Duplicate Assert,"{'line': 196, 'column': 8, 'index': 6439}","  194 |           selector(withImpact(current, cloneImpact(impact)), ownProps),
  195 |         ).toBe(first);
> 196 |         expect(
      |        ^ Duplicate Assert
  197 |           selector(withImpact(current, cloneImpact(impact)), ownProps),
  198 |         ).toBe(first);
  199 |         expect(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/something-else-is-dragging.spec.js,Duplicate Assert,"{'line': 199, 'column': 8, 'index': 6550}","  197 |           selector(withImpact(current, cloneImpact(impact)), ownProps),
  198 |         ).toBe(first);
> 199 |         expect(
      |        ^ Duplicate Assert
  200 |           selector(withImpact(current, cloneImpact(impact)), ownProps),
  201 |         ).toBe(first);
  202 |       });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/something-else-is-dragging.spec.js,Duplicate Assert,"{'line': 199, 'column': 8, 'index': 6550}","  197 |           selector(withImpact(current, cloneImpact(impact)), ownProps),
  198 |         ).toBe(first);
> 199 |         expect(
      |        ^ Duplicate Assert
  200 |           selector(withImpact(current, cloneImpact(impact)), ownProps),
  201 |         ).toBe(first);
  202 |       });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/something-else-is-dragging.spec.js,Lazy Test,"{'line': 81, 'column': 21, 'index': 2571}","  79 |         const selector: Selector = makeMapStateToProps();
  80 |         const impact: DragImpact = {
> 81 |           displaced: getForcedDisplacement({
     |                     ^ Lazy Test
  82 |             visible: [
  83 |               { dimension: preset.inHome2, shouldAnimate: false },
  84 |               { dimension: preset.inHome3, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/something-else-is-dragging.spec.js,Lazy Test,"{'line': 113, 'column': 21, 'index': 3641}","  111 |         const selector: Selector = makeMapStateToProps();
  112 |         const impact: DragImpact = {
> 113 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  114 |             visible: [
  115 |               { dimension: preset.inHome2, shouldAnimate: true },
  116 |               { dimension: preset.inHome3, shouldAnimate: true },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/something-else-is-dragging.spec.js,Lazy Test,"{'line': 147, 'column': 21, 'index': 4812}","  145 |
  146 |         const impact: DragImpact = {
> 147 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  148 |             invisible: [preset.inHome2, preset.inHome3, preset.inHome4],
  149 |           }),
  150 |           displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/something-else-is-dragging.spec.js,Lazy Test,"{'line': 165, 'column': 21, 'index': 5457}","  163 |         const selector: Selector = makeMapStateToProps();
  164 |         const impact: DragImpact = {
> 165 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  166 |             visible: [
  167 |               { dimension: preset.inHome2, shouldAnimate: true },
  168 |               { dimension: preset.inHome3, shouldAnimate: true },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/something-else-is-dragging.spec.js,Lazy Test,"{'line': 207, 'column': 21, 'index': 6870}","  205 |         const selector: Selector = makeMapStateToProps();
  206 |         const impact: DragImpact = {
> 207 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  208 |             visible: [
  209 |               { dimension: preset.inHome2, shouldAnimate: false },
  210 |               { dimension: preset.inHome3, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/something-else-is-dragging.spec.js,Lazy Test,"{'line': 259, 'column': 15, 'index': 8530}","  257 |   const selector: Selector = makeMapStateToProps();
  258 |   const impact: DragImpact = {
> 259 |     displaced: getForcedDisplacement({
      |               ^ Lazy Test
  260 |       visible: [
  261 |         { dimension: preset.inHome2, shouldAnimate: false },
  262 |         { dimension: preset.inHome3, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/something-else-dragging-in-virtual.spec.js,Lazy Test,"{'line': 47, 'column': 17, 'index': 2081}","  45 |     ): any);
  46 |     const impact: DragImpact = {
> 47 |       displaced: getForcedDisplacement({
     |                 ^ Lazy Test
  48 |         visible: [
  49 |           { dimension: preset.inHome2, shouldAnimate: false },
  50 |           { dimension: preset.inHome3, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/something-else-dragging-in-virtual.spec.js,Lazy Test,"{'line': 72, 'column': 17, 'index': 3038}","  70 |     ): any);
  71 |     const impact: DragImpact = {
> 72 |       displaced: getForcedDisplacement({
     |                 ^ Lazy Test
  73 |         visible: [
  74 |           { dimension: preset.inHome3, shouldAnimate: false },
  75 |           { dimension: preset.inHome4, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/dragging.spec.js,Duplicate Assert,"{'line': 120, 'column': 6, 'index': 3715}","  118 |       );
  119 |
> 120 |       expect(result1).toBe(result2);
      |      ^ Duplicate Assert
  121 |
  122 |       // also checking with new top level reference
  123 |       const newCurrent: IsDraggingState = ({ ...current }: any);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/dragging.spec.js,Duplicate Assert,"{'line': 129, 'column': 6, 'index': 3986}","  127 |       );
  128 |
> 129 |       expect(result1).toBe(result3);
      |      ^ Duplicate Assert
  130 |     });
  131 |
  132 |     it('should break memoization on multiple calls if moving to a new offset', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/dragging.spec.js,Duplicate Assert,"{'line': 144, 'column': 6, 'index': 4401}","  142 |       );
  143 |
> 144 |       expect(result1).not.toBe(result2);
      |      ^ Duplicate Assert
  145 |       expect(result1).not.toEqual(result2);
  146 |     });
  147 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/dragging.spec.js,Duplicate Assert,"{'line': 145, 'column': 6, 'index': 4442}","  143 |
  144 |       expect(result1).not.toBe(result2);
> 145 |       expect(result1).not.toEqual(result2);
      |      ^ Duplicate Assert
  146 |     });
  147 |   });
  148 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/combine-with.spec.js,Duplicate Assert,"{'line': 107, 'column': 6, 'index': 3314}","  105 |       const result2: MapProps = selector(withoutMerge, ownProps);
  106 |
> 107 |       expect(result1).not.toBe(result2);
      |      ^ Duplicate Assert
  108 |       expect(result1).not.toEqual(result2);
  109 |     });
  110 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/combine-with.spec.js,Duplicate Assert,"{'line': 108, 'column': 6, 'index': 3355}","  106 |
  107 |       expect(result1).not.toBe(result2);
> 108 |       expect(result1).not.toEqual(result2);
      |      ^ Duplicate Assert
  109 |     });
  110 |   });
  111 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/combine-target-for.spec.js,Duplicate Assert,"{'line': 83, 'column': 6, 'index': 2743}","  81 |       );
  82 |
> 83 |       expect(result1).toEqual(expected);
     |      ^ Duplicate Assert
  84 |       expect(result1).toBe(result2);
  85 |     });
  86 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/combine-target-for.spec.js,Duplicate Assert,"{'line': 84, 'column': 6, 'index': 2784}","  82 |
  83 |       expect(result1).toEqual(expected);
> 84 |       expect(result1).toBe(result2);
     |      ^ Duplicate Assert
  85 |     });
  86 |
  87 |     it('should break memoization on multiple calls if changing combine', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/combine-target-for.spec.js,Duplicate Assert,"{'line': 93, 'column': 6, 'index': 3098}","  91 |       const result2: MapProps = selector(withoutMerge, ownProps);
  92 |
> 93 |       expect(result1).not.toBe(result2);
     |      ^ Duplicate Assert
  94 |       expect(result1).not.toEqual(result2);
  95 |     });
  96 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/combine-target-for.spec.js,Duplicate Assert,"{'line': 94, 'column': 6, 'index': 3139}","  92 |
  93 |       expect(result1).not.toBe(result2);
> 94 |       expect(result1).not.toEqual(result2);
     |      ^ Duplicate Assert
  95 |     });
  96 |   });
  97 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/child-render-behaviour.spec.js,Duplicate Assert,"{'line': 70, 'column': 2, 'index': 2139}","  68 |   // $FlowFixMe: not sure why flow is complaining about only this usage
  69 |   const { container, rerender } = render(<App currentUser=""Jake"">{child}</App>);
> 70 |   expect(child).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  71 |
  72 |   rerender(<App currentUser=""Jake"">{child}</App>);
  73 |   expect(child).toHaveBeenCalledTimes(2);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/child-render-behaviour.spec.js,Duplicate Assert,"{'line': 73, 'column': 2, 'index': 2233}","  71 |
  72 |   rerender(<App currentUser=""Jake"">{child}</App>);
> 73 |   expect(child).toHaveBeenCalledTimes(2);
     |  ^ Duplicate Assert
  74 |
  75 |   expect(container.textContent).toBe('Jake');
  76 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/child-render-behaviour.spec.js,Duplicate Assert,"{'line': 81, 'column': 2, 'index': 2536}","  79 |   const child = getMock();
  80 |   const { container, rerender } = render(<App currentUser=""Jake"">{child}</App>);
> 81 |   expect(child).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  82 |
  83 |   rerender(<App currentUser=""Finn"">{child}</App>);
  84 |   expect(child).toHaveBeenCalledTimes(2);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/connected-draggable/child-render-behaviour.spec.js,Duplicate Assert,"{'line': 84, 'column': 2, 'index': 2630}","  82 |
  83 |   rerender(<App currentUser=""Finn"">{child}</App>);
> 84 |   expect(child).toHaveBeenCalledTimes(2);
     |  ^ Duplicate Assert
  85 |
  86 |   expect(container.textContent).toBe('Finn');
  87 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/child-rendering.spec.js,Duplicate Assert,"{'line': 36, 'column': 4, 'index': 900}","  34 |     );
  35 |
> 36 |     expect(container.innerHTML).toEqual('');
     |    ^ Duplicate Assert
  37 |     unmount();
  38 |   }
  39 |   // initial animation set to true",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/child-rendering.spec.js,Duplicate Assert,"{'line': 36, 'column': 4, 'index': 900}","  34 |     );
  35 |
> 36 |     expect(container.innerHTML).toEqual('');
     |    ^ Duplicate Assert
  37 |     unmount();
  38 |   }
  39 |   // initial animation set to true",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/child-rendering.spec.js,Duplicate Assert,"{'line': 47, 'column': 4, 'index': 1193}","  45 |     );
  46 |
> 47 |     expect(container.innerHTML).toEqual('');
     |    ^ Duplicate Assert
  48 |     unmount();
  49 |   }
  50 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/child-rendering.spec.js,Duplicate Assert,"{'line': 47, 'column': 4, 'index': 1193}","  45 |     );
  46 |
> 47 |     expect(container.innerHTML).toEqual('');
     |    ^ Duplicate Assert
  48 |     unmount();
  49 |   }
  50 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/child-rendering.spec.js,Duplicate Assert,"{'line': 72, 'column': 2, 'index': 1824}","  70 |
  71 |   const { rerender, container } = render(<App on=""hey"" shouldAnimate />);
> 72 |   expect(container.textContent).toEqual('open');
     |  ^ Duplicate Assert
  73 |
  74 |   // data is gone - will animate closed
  75 |   rerender(<App on={null} shouldAnimate />);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/child-rendering.spec.js,Duplicate Assert,"{'line': 76, 'column': 2, 'index': 1959}","  74 |   // data is gone - will animate closed
  75 |   rerender(<App on={null} shouldAnimate />);
> 76 |   expect(container.textContent).toEqual('close');
     |  ^ Duplicate Assert
  77 |
  78 |   // letting animate-in-out know that the animation is finished
  79 |   act(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/animate-in-out.spec.js,Duplicate Assert,"{'line': 110, 'column': 2, 'index': 2714}","  108 |     onClose: expect.any(Function),
  109 |   };
> 110 |   expect(child).toHaveBeenCalledWith(initial);
      |  ^ Duplicate Assert
  111 |   expect(container.innerHTML).toEqual('<div>hi</div>');
  112 |   child.mockClear();
  113 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/animate-in-out.spec.js,Duplicate Assert,"{'line': 111, 'column': 2, 'index': 2761}","  109 |   };
  110 |   expect(child).toHaveBeenCalledWith(initial);
> 111 |   expect(container.innerHTML).toEqual('<div>hi</div>');
      |  ^ Duplicate Assert
  112 |   child.mockClear();
  113 |
  114 |   // start closing",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/animate-in-out.spec.js,Duplicate Assert,"{'line': 117, 'column': 2, 'index': 2939}","  115 |   // data is gone! this should trigger a close
  116 |   rerender(<App value={null} />);
> 117 |   expect(container.innerHTML).toEqual('');
      |  ^ Duplicate Assert
  118 |   expect(child).not.toHaveBeenCalled();
  119 | });
  120 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/animate-in-out.spec.js,Duplicate Assert,"{'line': 118, 'column': 2, 'index': 2982}","  116 |   rerender(<App value={null} />);
  117 |   expect(container.innerHTML).toEqual('');
> 118 |   expect(child).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  119 | });
  120 |
  121 | it('should animate closed if required', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/animate-in-out.spec.js,Duplicate Assert,"{'line': 148, 'column': 2, 'index': 3654}","  146 |     onClose: expect.any(Function),
  147 |   };
> 148 |   expect(child).toHaveBeenCalledWith(initial);
      |  ^ Duplicate Assert
  149 |   expect(child).toHaveBeenCalledTimes(1);
  150 |   expect(container.innerHTML).toEqual('<div>hi</div>');
  151 |   child.mockClear();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/animate-in-out.spec.js,Duplicate Assert,"{'line': 149, 'column': 2, 'index': 3701}","  147 |   };
  148 |   expect(child).toHaveBeenCalledWith(initial);
> 149 |   expect(child).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  150 |   expect(container.innerHTML).toEqual('<div>hi</div>');
  151 |   child.mockClear();
  152 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/animate-in-out.spec.js,Duplicate Assert,"{'line': 150, 'column': 2, 'index': 3743}","  148 |   expect(child).toHaveBeenCalledWith(initial);
  149 |   expect(child).toHaveBeenCalledTimes(1);
> 150 |   expect(container.innerHTML).toEqual('<div>hi</div>');
      |  ^ Duplicate Assert
  151 |   child.mockClear();
  152 |
  153 |   // start closing",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/animate-in-out.spec.js,Duplicate Assert,"{'line': 165, 'column': 2, 'index': 4170}","  163 |     onClose: expect.any(Function),
  164 |   };
> 165 |   expect(child).toHaveBeenCalledWith(second);
      |  ^ Duplicate Assert
  166 |
  167 |   // telling AnimateInOut that the animation is finished
  168 |   const provided: AnimateProvided = child.mock.calls[0][0];",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/animate-in-out.spec.js,Duplicate Assert,"{'line': 173, 'column': 2, 'index': 4447}","  171 |   provided.onClose();
  172 |
> 173 |   expect(container.innerHTML).toEqual('');
      |  ^ Duplicate Assert
  174 |   expect(child).not.toHaveBeenCalled();
  175 | });
  176 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/view/animate-in-out/animate-in-out.spec.js,Duplicate Assert,"{'line': 174, 'column': 2, 'index': 4490}","  172 |
  173 |   expect(container.innerHTML).toEqual('');
> 174 |   expect(child).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  175 | });
  176 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/scroll-viewport.spec.js,Conditional Test Logic,"{'line': 80, 'column': 2, 'index': 1764}","  78 |   let runCount: number = 0;
  79 |
> 80 |   while (lastScroll.y < max.y && lastScroll.x < max.x) {
     |  ^ Conditional Test Logic
  81 |     const newScroll: Position = add(lastScroll, { x: 10, y: 20 });
  82 |     const updated: Viewport = scrollViewport(lastViewport, newScroll);
  83 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/scroll-viewport.spec.js,Conditional Test Logic,"{'line': 134, 'column': 2, 'index': 3061}","  132 |   let lastScroll: Position = max;
  133 |   let runCount: number = 0;
> 134 |   while (lastScroll.y > 0 && lastScroll.x > 0) {
      |  ^ Conditional Test Logic
  135 |     const newScroll: Position = subtract(lastScroll, { x: 10, y: 20 });
  136 |     const updated: Viewport = scrollViewport(lastViewport, newScroll);
  137 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/scroll-viewport.spec.js,Magic Number,"{'line': 106, 'column': 35, 'index': 2552}","  104 |
  105 |   // Simply asserting our loop ran a few times
> 106 |   expect(runCount).toBeGreaterThan(2);
      |                                   ^ Magic Number
  107 | });
  108 |
  109 | it('should correctly update scroll across multiple movements (backwards)', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/scroll-viewport.spec.js,Magic Number,"{'line': 162, 'column': 35, 'index': 3911}","  160 |
  161 |   // Simply asserting our loop ran a few times
> 162 |   expect(runCount).toBeGreaterThan(2);
      |                                   ^ Magic Number
  163 | });
  164 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/recompute-placeholders.spec.js,Conditional Test Logic,"{'line': 19, 'column': 23, 'index': 747}","  17 | import { getForcedDisplacement } from '../../util/impact';
  18 |
> 19 | [horizontal, vertical].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  20 |   describe(`on ${axis.direction} axis`, () => {
  21 |     const preset = getPreset(axis);
  22 |     const { impact: homeImpact } = getLiftEffect({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/recompute-placeholders.spec.js,Duplicate Assert,"{'line': 93, 'column': 6, 'index': 3108}","  91 |       });
  92 |
> 93 |       expect(first).not.toEqual(preset.droppables);
     |      ^ Duplicate Assert
  94 |       const withPlaceholder: DroppableDimension = addPlaceholder(
  95 |         preset.foreign,
  96 |         preset.inHome1,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/recompute-placeholders.spec.js,Duplicate Assert,"{'line': 99, 'column': 6, 'index': 3310}","   97 |         preset.draggables,
   98 |       );
>  99 |       expect(first).toEqual(
      |      ^ Duplicate Assert
  100 |         patchDroppableMap(preset.droppables, withPlaceholder),
  101 |       );
  102 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/recompute-placeholders.spec.js,Eager Test,"{'line': 67, 'column': 19, 'index': 2361}","  65 |       );
  66 |       const overForeign: DragImpact = {
> 67 |         displaced: getForcedDisplacement({
     |                   ^ Eager Test
  68 |           visible: [
  69 |             { dimension: preset.inForeign1 },
  70 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/recompute-placeholders.spec.js,Eager Test,"{'line': 104, 'column': 19, 'index': 3466}","  102 |
  103 |       const overForeign2: DragImpact = {
> 104 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  105 |           // now moving forward (should not add another placeholder)
  106 |           visible: [
  107 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/recompute-placeholders.spec.js,Lazy Test,"{'line': 67, 'column': 19, 'index': 2361}","  65 |       );
  66 |       const overForeign: DragImpact = {
> 67 |         displaced: getForcedDisplacement({
     |                   ^ Lazy Test
  68 |           visible: [
  69 |             { dimension: preset.inForeign1 },
  70 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/recompute-placeholders.spec.js,Lazy Test,"{'line': 139, 'column': 19, 'index': 4572}","  137 |       );
  138 |       const overForeign: DragImpact = {
> 139 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  140 |           visible: [
  141 |             { dimension: preset.inForeign1 },
  142 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/position.spec.js,Magic Number,"{'line': 92, 'column': 39, 'index': 2466}","  90 |         const a = { x: 0, y: 2 };
  91 |         const b = { x: 0, y: 5 };
> 92 |         expect(distance(a, b)).toEqual(3);
     |                                       ^ Magic Number
  93 |       });
  94 |
  95 |       it('should return the distance between two negative values', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/position.spec.js,Magic Number,"{'line': 98, 'column': 39, 'index': 2665}","   96 |         const a = { x: 0, y: -2 };
   97 |         const b = { x: 0, y: -5 };
>  98 |         expect(distance(a, b)).toEqual(3);
      |                                       ^ Magic Number
   99 |       });
  100 |
  101 |       it('should return the distance between a positive and negative value', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/position.spec.js,Magic Number,"{'line': 104, 'column': 39, 'index': 2873}","  102 |         const a = { x: 0, y: -2 };
  103 |         const b = { x: 0, y: 3 };
> 104 |         expect(distance(a, b)).toEqual(5);
      |                                       ^ Magic Number
  105 |       });
  106 |     });
  107 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/position.spec.js,Magic Number,"{'line': 113, 'column': 49, 'index': 3166}","  111 |         // https://www.mathsisfun.com/pythagoras.html
  112 |         const target = { x: 3, y: 4 };
> 113 |         expect(distance(origin, target)).toEqual(5);
      |                                                 ^ Magic Number
  114 |       });
  115 |
  116 |       it('should account for a negative shift in plane', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/position.spec.js,Magic Number,"{'line': 120, 'column': 55, 'index': 3454}","  118 |         const customOrigin = { x: -1, y: -1 };
  119 |         const target = { x: -4, y: -5 };
> 120 |         expect(distance(customOrigin, target)).toEqual(5);
      |                                                       ^ Magic Number
  121 |       });
  122 |     });
  123 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/visibility/is-totally-visible-on-axis.spec.js,Conditional Test Logic,"{'line': 26, 'column': 23, 'index': 735}","  24 | };
  25 |
> 26 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  27 |   describe(`on the ${axis.direction} axis`, () => {
  28 |     const destination: DroppableDimension = getDroppableDimension({
  29 |       descriptor: {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/update-displacement-visibility/speculative-displacement.spec.js,Conditional Test Logic,"{'line': 30, 'column': 23, 'index': 1083}","  28 | import { getForcedDisplacement } from '../../../util/impact';
  29 |
> 30 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  31 |   describe(`on ${axis.direction} axis`, () => {
  32 |     it('should do nothing when there is no displacement', () => {
  33 |       const preset = getPreset(axis);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/update-displacement-visibility/speculative-displacement.spec.js,Eager Test,"{'line': 253, 'column': 19, 'index': 8033}","  251 |
  252 |       const previousImpact: DragImpact = {
> 253 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  254 |           // would normally be visible in viewport
  255 |           visible: [{ dimension: inForeign2 }],
  256 |           // normally not visible in viewport",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/update-displacement-visibility/speculative-displacement.spec.js,Eager Test,"{'line': 280, 'column': 19, 'index': 8825}","  278 |         // unchanged locations
  279 |         ...previousImpact,
> 280 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  281 |           visible: [
  282 |             // already visibly displaced: inside viewport
  283 |             { dimension: inForeign2, shouldAnimate: true },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/update-displacement-visibility/speculative-displacement.spec.js,Eager Test,"{'line': 390, 'column': 19, 'index': 12452}","  388 |
  389 |       const previousImpact: DragImpact = {
> 390 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  391 |           // would normally be visible in viewport
  392 |           visible: [{ dimension: inForeign2 }],
  393 |           // normally not visible in viewport",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/update-displacement-visibility/speculative-displacement.spec.js,Eager Test,"{'line': 417, 'column': 19, 'index': 13244}","  415 |         // unchanged locations
  416 |         ...previousImpact,
> 417 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  418 |           visible: [
  419 |             // already visibly displaced
  420 |             { dimension: inForeign2, shouldAnimate: true },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/update-displacement-visibility/speculative-displacement.spec.js,Lazy Test,"{'line': 253, 'column': 19, 'index': 8033}","  251 |
  252 |       const previousImpact: DragImpact = {
> 253 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  254 |           // would normally be visible in viewport
  255 |           visible: [{ dimension: inForeign2 }],
  256 |           // normally not visible in viewport",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/update-displacement-visibility/speculative-displacement.spec.js,Lazy Test,"{'line': 390, 'column': 19, 'index': 12452}","  388 |
  389 |       const previousImpact: DragImpact = {
> 390 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  391 |           // would normally be visible in viewport
  392 |           visible: [{ dimension: inForeign2 }],
  393 |           // normally not visible in viewport",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/update-displacement-visibility/recompute.spec.js,Conditional Test Logic,"{'line': 9, 'column': 23, 'index': 448}","   7 | import { getForcedDisplacement } from '../../../util/impact';
   8 |
>  9 | [horizontal, vertical].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  10 |   describe(`on ${axis.direction} axis`, () => {
  11 |     const preset = getPreset(axis);
  12 |     const displacedBy: DisplacedBy = getDisplacedBy(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/update-displacement-visibility/recompute.spec.js,Lazy Test,"{'line': 42, 'column': 19, 'index': 1422}","  40 |       const expected: DragImpact = {
  41 |         ...impact,
> 42 |         displaced: getForcedDisplacement({
     |                   ^ Lazy Test
  43 |           // visibility recalculated
  44 |           visible: [
  45 |             // not animated as previously invisible",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/update-displacement-visibility/recompute.spec.js,Lazy Test,"{'line': 65, 'column': 19, 'index': 2137}","  63 |       const expected: DragImpact = {
  64 |         ...impact,
> 65 |         displaced: getForcedDisplacement({
     |                   ^ Lazy Test
  66 |           // visibility recalculated
  67 |           visible: [
  68 |             // forced animation",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/use-registry.spec.js,Duplicate Assert,"{'line': 33, 'column': 2, 'index': 948}","  31 |   // initial registration
  32 |   registry.draggable.register(entry);
> 33 |   expect(registry.draggable.exists(id)).toBe(true);
     |  ^ Duplicate Assert
  34 |
  35 |   // still available after a unmount
  36 |   unmount();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/use-registry.spec.js,Duplicate Assert,"{'line': 33, 'column': 2, 'index': 948}","  31 |   // initial registration
  32 |   registry.draggable.register(entry);
> 33 |   expect(registry.draggable.exists(id)).toBe(true);
     |  ^ Duplicate Assert
  34 |
  35 |   // still available after a unmount
  36 |   unmount();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/use-registry.spec.js,Duplicate Assert,"{'line': 37, 'column': 2, 'index': 1051}","  35 |   // still available after a unmount
  36 |   unmount();
> 37 |   expect(registry.draggable.exists(id)).toBe(true);
     |  ^ Duplicate Assert
  38 |
  39 |   // cleared after frame
  40 |   requestAnimationFrame.step();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/use-registry.spec.js,Duplicate Assert,"{'line': 37, 'column': 2, 'index': 1051}","  35 |   // still available after a unmount
  36 |   unmount();
> 37 |   expect(registry.draggable.exists(id)).toBe(true);
     |  ^ Duplicate Assert
  38 |
  39 |   // cleared after frame
  40 |   requestAnimationFrame.step();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/use-registry.spec.js,Duplicate Assert,"{'line': 41, 'column': 2, 'index': 1161}","  39 |   // cleared after frame
  40 |   requestAnimationFrame.step();
> 41 |   expect(registry.draggable.exists(id)).toBe(false);
     |  ^ Duplicate Assert
  42 | });
  43 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/use-registry.spec.js,Eager Test,"{'line': 18, 'column': 32, 'index': 616}","  16 | it('should remove any registrations', () => {
  17 |   let registry: Registry;
> 18 |   const entry: DraggableEntry = getDraggableEntry({
     |                                ^ Eager Test
  19 |     uniqueId: '1',
  20 |     dimension: preset.inHome1,
  21 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/use-registry.spec.js,Eager Test,"{'line': 29, 'column': 2, 'index': 860}","  27 |
  28 |   const { unmount } = render(<App />);
> 29 |   invariant(registry);
     |  ^ Eager Test
  30 |
  31 |   // initial registration
  32 |   registry.draggable.register(entry);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/queries.spec.js,Conditional Test Logic,"{'line': 35, 'column': 36, 'index': 992}","  33 |     },
  34 |   });
> 35 |   [inHome1, inHome2, ofAnotherType].forEach((entry: DraggableEntry) => {
     |                                    ^ Conditional Test Logic
  36 |     registry.draggable.register(entry);
  37 |   });
  38 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/queries.spec.js,Conditional Test Logic,"{'line': 99, 'column': 33, 'index': 2891}","   97 |     },
   98 |   });
>  99 |   [home, foreign, ofAnotherType].forEach((entry: DroppableEntry) => {
      |                                 ^ Conditional Test Logic
  100 |     registry.droppable.register(entry);
  101 |   });
  102 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/event-listeners.spec.js,Lazy Test,"{'line': 20, 'column': 32, 'index': 588}","  18 |   registry.subscribe(listener2);
  19 |
> 20 |   const entry: DraggableEntry = getDraggableEntry({
     |                                ^ Lazy Test
  21 |     uniqueId: '1',
  22 |     dimension: preset.inHome1,
  23 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/event-listeners.spec.js,Lazy Test,"{'line': 40, 'column': 32, 'index': 1169}","  38 |   unsubscribe();
  39 |
> 40 |   const entry: DraggableEntry = getDraggableEntry({
     |                                ^ Lazy Test
  41 |     uniqueId: '1',
  42 |     dimension: preset.inHome1,
  43 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/event-listeners.spec.js,Lazy Test,"{'line': 62, 'column': 32, 'index': 1756}","  60 |   unsubscribe();
  61 |
> 62 |   const entry: DraggableEntry = getDraggableEntry({
     |                                ^ Lazy Test
  63 |     uniqueId: '1',
  64 |     dimension: preset.inHome1,
  65 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/droppable-registration.spec.js,Duplicate Assert,"{'line': 71, 'column': 2, 'index': 1952}","  69 |
  70 |   // overwritten entry1
> 71 |   expect(registry.droppable.findById(entry1.descriptor.id)).toBe(entry2);
     |  ^ Duplicate Assert
  72 |
  73 |   // entry1 is now outdated, so entry2 won't be removed
  74 |   registry.droppable.unregister(entry1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/droppable-registration.spec.js,Duplicate Assert,"{'line': 71, 'column': 2, 'index': 1952}","  69 |
  70 |   // overwritten entry1
> 71 |   expect(registry.droppable.findById(entry1.descriptor.id)).toBe(entry2);
     |  ^ Duplicate Assert
  72 |
  73 |   // entry1 is now outdated, so entry2 won't be removed
  74 |   registry.droppable.unregister(entry1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/droppable-registration.spec.js,Duplicate Assert,"{'line': 75, 'column': 2, 'index': 2124}","  73 |   // entry1 is now outdated, so entry2 won't be removed
  74 |   registry.droppable.unregister(entry1);
> 75 |   expect(registry.droppable.findById(entry1.descriptor.id)).toBe(entry2);
     |  ^ Duplicate Assert
  76 | });
  77 |
  78 | it('should allow unregistrations when there is no entry', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/droppable-registration.spec.js,Duplicate Assert,"{'line': 75, 'column': 2, 'index': 2124}","  73 |   // entry1 is now outdated, so entry2 won't be removed
  74 |   registry.droppable.unregister(entry1);
> 75 |   expect(registry.droppable.findById(entry1.descriptor.id)).toBe(entry2);
     |  ^ Duplicate Assert
  76 | });
  77 |
  78 | it('should allow unregistrations when there is no entry', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/droppable-registration.spec.js,Eager Test,"{'line': 39, 'column': 33, 'index': 1117}","  37 | it('should allow for entry overwriting', () => {
  38 |   const registry: Registry = createRegistry();
> 39 |   const entry1: DroppableEntry = getDroppableEntry({
     |                                 ^ Eager Test
  40 |     uniqueId: '1',
  41 |     dimension: preset.home,
  42 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/droppable-registration.spec.js,Eager Test,"{'line': 43, 'column': 33, 'index': 1223}","  41 |     dimension: preset.home,
  42 |   });
> 43 |   const entry2: DroppableEntry = getDroppableEntry({
     |                                 ^ Eager Test
  44 |     uniqueId: '1',
  45 |     dimension: preset.home,
  46 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/droppable-registration.spec.js,Eager Test,"{'line': 57, 'column': 33, 'index': 1622}","  55 | it('should not unregister with an outdated uniqueId', () => {
  56 |   const registry: Registry = createRegistry();
> 57 |   const entry1: DroppableEntry = getDroppableEntry({
     |                                 ^ Eager Test
  58 |     uniqueId: '1',
  59 |     dimension: preset.home,
  60 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/droppable-registration.spec.js,Eager Test,"{'line': 61, 'column': 33, 'index': 1728}","  59 |     dimension: preset.home,
  60 |   });
> 61 |   const entry2: DroppableEntry = getDroppableEntry({
     |                                 ^ Eager Test
  62 |     uniqueId: '2',
  63 |     dimension: preset.home,
  64 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/droppable-registration.spec.js,Lazy Test,"{'line': 14, 'column': 32, 'index': 448}","  12 | it('should allow registration', () => {
  13 |   const registry: Registry = createRegistry();
> 14 |   const entry: DroppableEntry = getDroppableEntry({
     |                                ^ Lazy Test
  15 |     uniqueId: '1',
  16 |     dimension: preset.home,
  17 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/droppable-registration.spec.js,Lazy Test,"{'line': 26, 'column': 32, 'index': 759}","  24 | it('should allow unregistration', () => {
  25 |   const registry: Registry = createRegistry();
> 26 |   const entry: DroppableEntry = getDroppableEntry({
     |                                ^ Lazy Test
  27 |     uniqueId: '1',
  28 |     dimension: preset.home,
  29 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/droppable-registration.spec.js,Lazy Test,"{'line': 39, 'column': 33, 'index': 1117}","  37 | it('should allow for entry overwriting', () => {
  38 |   const registry: Registry = createRegistry();
> 39 |   const entry1: DroppableEntry = getDroppableEntry({
     |                                 ^ Lazy Test
  40 |     uniqueId: '1',
  41 |     dimension: preset.home,
  42 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/droppable-registration.spec.js,Lazy Test,"{'line': 57, 'column': 33, 'index': 1622}","  55 | it('should not unregister with an outdated uniqueId', () => {
  56 |   const registry: Registry = createRegistry();
> 57 |   const entry1: DroppableEntry = getDroppableEntry({
     |                                 ^ Lazy Test
  58 |     uniqueId: '1',
  59 |     dimension: preset.home,
  60 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/droppable-registration.spec.js,Lazy Test,"{'line': 80, 'column': 33, 'index': 2347}","  78 | it('should allow unregistrations when there is no entry', () => {
  79 |   const registry: Registry = createRegistry();
> 80 |   const entry1: DroppableEntry = getDroppableEntry({
     |                                 ^ Lazy Test
  81 |     uniqueId: '1',
  82 |     dimension: preset.home,
  83 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Duplicate Assert,"{'line': 120, 'column': 2, 'index': 3303}","  118 |   // overwritten entry 1
  119 |
> 120 |   expect(registry.draggable.findById(entry1.descriptor.id)).toBe(entry2);
      |  ^ Duplicate Assert
  121 |
  122 |   // entry 1 is now outdated, so this won't be removed
  123 |   registry.draggable.unregister(entry1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Duplicate Assert,"{'line': 120, 'column': 2, 'index': 3303}","  118 |   // overwritten entry 1
  119 |
> 120 |   expect(registry.draggable.findById(entry1.descriptor.id)).toBe(entry2);
      |  ^ Duplicate Assert
  121 |
  122 |   // entry 1 is now outdated, so this won't be removed
  123 |   registry.draggable.unregister(entry1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Duplicate Assert,"{'line': 124, 'column': 2, 'index': 3474}","  122 |   // entry 1 is now outdated, so this won't be removed
  123 |   registry.draggable.unregister(entry1);
> 124 |   expect(registry.draggable.findById(entry1.descriptor.id)).toBe(entry2);
      |  ^ Duplicate Assert
  125 | });
  126 |
  127 | it('should allow unregistrations when there is no entry', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Duplicate Assert,"{'line': 124, 'column': 2, 'index': 3474}","  122 |   // entry 1 is now outdated, so this won't be removed
  123 |   registry.draggable.unregister(entry1);
> 124 |   expect(registry.draggable.findById(entry1.descriptor.id)).toBe(entry2);
      |  ^ Duplicate Assert
  125 | });
  126 |
  127 | it('should allow unregistrations when there is no entry', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Eager Test,"{'line': 88, 'column': 33, 'index': 2499}","  86 | it('should allow for entry overwriting', () => {
  87 |   const registry: Registry = createRegistry();
> 88 |   const entry1: DraggableEntry = getDraggableEntry({
     |                                 ^ Eager Test
  89 |     uniqueId: '1',
  90 |     dimension: preset.inHome1,
  91 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Eager Test,"{'line': 92, 'column': 33, 'index': 2608}","  90 |     dimension: preset.inHome1,
  91 |   });
> 92 |   const entry2: DraggableEntry = getDraggableEntry({
     |                                 ^ Eager Test
  93 |     uniqueId: '1',
  94 |     dimension: preset.inHome1,
  95 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Eager Test,"{'line': 106, 'column': 33, 'index': 3010}","  104 | it('should not unregister with an outdated uniqueId', () => {
  105 |   const registry: Registry = createRegistry();
> 106 |   const entry1: DraggableEntry = getDraggableEntry({
      |                                 ^ Eager Test
  107 |     uniqueId: '1',
  108 |     dimension: preset.inHome1,
  109 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Eager Test,"{'line': 110, 'column': 33, 'index': 3119}","  108 |     dimension: preset.inHome1,
  109 |   });
> 110 |   const entry2: DraggableEntry = getDraggableEntry({
      |                                 ^ Eager Test
  111 |     uniqueId: '2',
  112 |     dimension: preset.inHome1,
  113 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Lazy Test,"{'line': 14, 'column': 32, 'index': 448}","  12 | it('should allow registration', () => {
  13 |   const registry: Registry = createRegistry();
> 14 |   const entry: DraggableEntry = getDraggableEntry({
     |                                ^ Lazy Test
  15 |     uniqueId: '1',
  16 |     dimension: preset.inHome1,
  17 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Lazy Test,"{'line': 26, 'column': 32, 'index': 762}","  24 | it('should allow unregistration', () => {
  25 |   const registry: Registry = createRegistry();
> 26 |   const entry: DraggableEntry = getDraggableEntry({
     |                                ^ Lazy Test
  27 |     uniqueId: '1',
  28 |     dimension: preset.inHome1,
  29 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Lazy Test,"{'line': 39, 'column': 34, 'index': 1132}","  37 | it('should allow for updating existing entries', () => {
  38 |   const registry: Registry = createRegistry();
> 39 |   const initial: DraggableEntry = getDraggableEntry({
     |                                  ^ Lazy Test
  40 |     uniqueId: '1',
  41 |     dimension: preset.inHome1,
  42 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Lazy Test,"{'line': 63, 'column': 34, 'index': 1822}","  61 | it('should throw away updates if the uniqueId is outdated', () => {
  62 |   const registry: Registry = createRegistry();
> 63 |   const initial: DraggableEntry = getDraggableEntry({
     |                                  ^ Lazy Test
  64 |     uniqueId: '1',
  65 |     dimension: preset.inHome1,
  66 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Lazy Test,"{'line': 88, 'column': 33, 'index': 2499}","  86 | it('should allow for entry overwriting', () => {
  87 |   const registry: Registry = createRegistry();
> 88 |   const entry1: DraggableEntry = getDraggableEntry({
     |                                 ^ Lazy Test
  89 |     uniqueId: '1',
  90 |     dimension: preset.inHome1,
  91 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Lazy Test,"{'line': 106, 'column': 33, 'index': 3010}","  104 | it('should not unregister with an outdated uniqueId', () => {
  105 |   const registry: Registry = createRegistry();
> 106 |   const entry1: DraggableEntry = getDraggableEntry({
      |                                 ^ Lazy Test
  107 |     uniqueId: '1',
  108 |     dimension: preset.inHome1,
  109 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/draggable-registration.spec.js,Lazy Test,"{'line': 130, 'column': 33, 'index': 3761}","  128 |   // this can happen if an unregistration occurs after a .clean
  129 |   const registry: Registry = createRegistry();
> 130 |   const entry1: DraggableEntry = getDraggableEntry({
      |                                 ^ Lazy Test
  131 |     uniqueId: '1',
  132 |     dimension: preset.inHome1,
  133 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/cleanup.spec.js,Duplicate Assert,"{'line': 21, 'column': 2, 'index': 651}","  19 |     getDroppableEntry({ uniqueId: '1', dimension: preset.home }),
  20 |   );
> 21 |   expect(registry.draggable.exists(preset.inHome1.descriptor.id)).toBe(true);
     |  ^ Duplicate Assert
  22 |   expect(registry.droppable.exists(preset.home.descriptor.id)).toBe(true);
  23 |
  24 |   registry.clean();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/cleanup.spec.js,Duplicate Assert,"{'line': 22, 'column': 2, 'index': 729}","  20 |   );
  21 |   expect(registry.draggable.exists(preset.inHome1.descriptor.id)).toBe(true);
> 22 |   expect(registry.droppable.exists(preset.home.descriptor.id)).toBe(true);
     |  ^ Duplicate Assert
  23 |
  24 |   registry.clean();
  25 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/cleanup.spec.js,Duplicate Assert,"{'line': 27, 'column': 2, 'index': 855}","  25 |
  26 |   // now cannot find entries
> 27 |   expect(registry.draggable.exists(preset.inHome1.descriptor.id)).toBe(false);
     |  ^ Duplicate Assert
  28 |   expect(registry.droppable.exists(preset.home.descriptor.id)).toBe(false);
  29 | });
  30 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/cleanup.spec.js,Duplicate Assert,"{'line': 28, 'column': 2, 'index': 934}","  26 |   // now cannot find entries
  27 |   expect(registry.draggable.exists(preset.inHome1.descriptor.id)).toBe(false);
> 28 |   expect(registry.droppable.exists(preset.home.descriptor.id)).toBe(false);
     |  ^ Duplicate Assert
  29 | });
  30 |
  31 | it('should remove unsubscribe any event listeners', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/cleanup.spec.js,Eager Test,"{'line': 16, 'column': 4, 'index': 477}","  14 |
  15 |   registry.draggable.register(
> 16 |     getDraggableEntry({ uniqueId: '1', dimension: preset.inHome1 }),
     |    ^ Eager Test
  17 |   );
  18 |   registry.droppable.register(
  19 |     getDroppableEntry({ uniqueId: '1', dimension: preset.home }),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/cleanup.spec.js,Eager Test,"{'line': 19, 'column': 4, 'index': 582}","  17 |   );
  18 |   registry.droppable.register(
> 19 |     getDroppableEntry({ uniqueId: '1', dimension: preset.home }),
     |    ^ Eager Test
  20 |   );
  21 |   expect(registry.draggable.exists(preset.inHome1.descriptor.id)).toBe(true);
  22 |   expect(registry.droppable.exists(preset.home.descriptor.id)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/cleanup.spec.js,Lazy Test,"{'line': 16, 'column': 4, 'index': 477}","  14 |
  15 |   registry.draggable.register(
> 16 |     getDraggableEntry({ uniqueId: '1', dimension: preset.inHome1 }),
     |    ^ Lazy Test
  17 |   );
  18 |   registry.droppable.register(
  19 |     getDroppableEntry({ uniqueId: '1', dimension: preset.home }),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/registry/cleanup.spec.js,Lazy Test,"{'line': 41, 'column': 32, 'index': 1345}","  39 |   registry.clean();
  40 |
> 41 |   const entry: DraggableEntry = getDraggableEntry({
     |                                ^ Lazy Test
  42 |     uniqueId: '1',
  43 |     dimension: preset.inHome1,
  44 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/publish-while-dragging/recompute-after-critical.spec.js,Eager Test,"{'line': 51, 'column': 2, 'index': 1530}","  49 |   });
  50 |
> 51 |   invariant(result.phase === 'DRAGGING');
     |  ^ Eager Test
  52 |
  53 |   {
  54 |     const expected: LiftEffect = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/publish-while-dragging/recompute-after-critical.spec.js,Eager Test,"{'line': 71, 'column': 42, 'index': 2025}","  69 |
  70 |   {
> 71 |     const displaced: DisplacementGroups = getForcedDisplacement({
     |                                          ^ Eager Test
  72 |       visible: [
  73 |         { dimension: preset.inHome2, shouldAnimate: false },
  74 |         { dimension: preset.inHome3, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/publish-while-dragging/recompute-after-critical.spec.js,Eager Test,"{'line': 105, 'column': 2, 'index': 3017}","  103 |   });
  104 |
> 105 |   invariant(result.phase === 'DRAGGING');
      |  ^ Eager Test
  106 |
  107 |   {
  108 |     const expected: LiftEffect = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/publish-while-dragging/recompute-after-critical.spec.js,Eager Test,"{'line': 122, 'column': 42, 'index': 3407}","  120 |
  121 |   {
> 122 |     const displaced: DisplacementGroups = getForcedDisplacement({
      |                                          ^ Eager Test
  123 |       visible: [
  124 |         { dimension: preset.inHome2, shouldAnimate: false },
  125 |         { dimension: preset.inHome3, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/publish-while-dragging/recompute-after-critical.spec.js,Lazy Test,"{'line': 51, 'column': 2, 'index': 1530}","  49 |   });
  50 |
> 51 |   invariant(result.phase === 'DRAGGING');
     |  ^ Lazy Test
  52 |
  53 |   {
  54 |     const expected: LiftEffect = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/publish-while-dragging/recompute-after-critical.spec.js,Lazy Test,"{'line': 71, 'column': 42, 'index': 2025}","  69 |
  70 |   {
> 71 |     const displaced: DisplacementGroups = getForcedDisplacement({
     |                                          ^ Lazy Test
  72 |       visible: [
  73 |         { dimension: preset.inHome2, shouldAnimate: false },
  74 |         { dimension: preset.inHome3, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/publish-while-dragging/recompute-after-critical.spec.js,Lazy Test,"{'line': 105, 'column': 2, 'index': 3017}","  103 |   });
  104 |
> 105 |   invariant(result.phase === 'DRAGGING');
      |  ^ Lazy Test
  106 |
  107 |   {
  108 |     const expected: LiftEffect = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/publish-while-dragging/recompute-after-critical.spec.js,Lazy Test,"{'line': 122, 'column': 42, 'index': 3407}","  120 |
  121 |   {
> 122 |     const displaced: DisplacementGroups = getForcedDisplacement({
      |                                          ^ Lazy Test
  123 |       visible: [
  124 |         { dimension: preset.inHome2, shouldAnimate: false },
  125 |         { dimension: preset.inHome3, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/publish-while-dragging/displacement-animation.spec.js,Eager Test,"{'line': 40, 'column': 2, 'index': 1464}","  38 |     type: 'MOVE_RIGHT',
  39 |   });
> 40 |   invariant(moveToForeign);
     |  ^ Eager Test
  41 |   const inForeignImpact: DragImpact = moveToForeign.impact;
  42 |   // validation
  43 |   {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/publish-while-dragging/displacement-animation.spec.js,Eager Test,"{'line': 44, 'column': 42, 'index': 1612}","  42 |   // validation
  43 |   {
> 44 |     const displaced: DisplacementGroups = getForcedDisplacement({
     |                                          ^ Eager Test
  45 |       visible: [
  46 |         // initial movement goes after inForeign1
  47 |         { dimension: preset.inForeign2, shouldAnimate: true },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/publish-while-dragging/displacement-animation.spec.js,Eager Test,"{'line': 98, 'column': 2, 'index': 3167}","   96 |     published,
   97 |   });
>  98 |   invariant(result.phase === 'DRAGGING');
      |  ^ Eager Test
   99 |
  100 |   const displaced: DisplacementGroups = getForcedDisplacement({
  101 |     visible: [",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/publish-while-dragging/displacement-animation.spec.js,Eager Test,"{'line': 100, 'column': 40, 'index': 3248}","   98 |   invariant(result.phase === 'DRAGGING');
   99 |
> 100 |   const displaced: DisplacementGroups = getForcedDisplacement({
      |                                        ^ Eager Test
  101 |     visible: [
  102 |       // original animation unchanged
  103 |       { dimension: preset.inForeign2, shouldAnimate: true },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/publish-while-dragging/adjust-additions-for-scroll-change.spec.js,Lazy Test,"{'line': 72, 'column': 2, 'index': 2454}","  70 |   });
  71 |
> 72 |   invariant(result.phase === 'DRAGGING');
     |  ^ Lazy Test
  73 |   expect(result.dimensions.draggables[added.descriptor.id]).toEqual(unshifted);
  74 | });
  75 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/publish-while-dragging/adjust-additions-for-scroll-change.spec.js,Lazy Test,"{'line': 123, 'column': 2, 'index': 4168}","  121 |   });
  122 |
> 123 |   invariant(result.phase === 'DRAGGING');
      |  ^ Lazy Test
  124 |   expect(result.dimensions.draggables[added.descriptor.id]).toEqual(unshifted);
  125 | });
  126 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Conditional Test Logic,"{'line': 138, 'column': 23, 'index': 4243}","  136 | });
  137 |
> 138 | [vertical, horizontal].forEach((axis: Axis) => {
      |                       ^ Conditional Test Logic
  139 |   const state = getStatePreset(axis);
  140 |   const preset = getPreset(axis);
  141 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 26, 'column': 4, 'index': 930}","  24 |     });
  25 |
> 26 |     invariant(result, 'expected a result');
     |    ^ Eager Test
  27 |     const expected: DraggableLocation = {
  28 |       droppableId: preset.home.descriptor.id,
  29 |       index: 1,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 31, 'column': 11, 'index': 1092}","  29 |       index: 1,
  30 |     };
> 31 |     expect(tryGetDestination(result.impact)).toEqual(expected);
     |           ^ Eager Test
  32 |   });
  33 |
  34 |   it('should move backwards on a MOVE_UP', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 40, 'column': 4, 'index': 1350}","  38 |     });
  39 |
> 40 |     invariant(result, 'expected a result');
     |    ^ Eager Test
  41 |     const expected: DraggableLocation = {
  42 |       droppableId: preset.home.descriptor.id,
  43 |       index: 0,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 45, 'column': 11, 'index': 1512}","  43 |       index: 0,
  44 |     };
> 45 |     expect(tryGetDestination(result.impact)).toEqual(expected);
     |           ^ Eager Test
  46 |   });
  47 |
  48 |   it('should move cross axis forwards on a MOVE_RIGHT', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 54, 'column': 4, 'index': 1758}","  52 |     });
  53 |
> 54 |     invariant(result, 'expected a result');
     |    ^ Eager Test
  55 |     const expected: DraggableLocation = {
  56 |       droppableId: preset.foreign.descriptor.id,
  57 |       index: 1,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 59, 'column': 11, 'index': 1923}","  57 |       index: 1,
  58 |     };
> 59 |     expect(tryGetDestination(result.impact)).toEqual(expected);
     |           ^ Eager Test
  60 |   });
  61 |
  62 |   it('should move cross axis backwards on a MOVE_LEFT', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 68, 'column': 4, 'index': 2199}","  66 |     });
  67 |
> 68 |     invariant(result, 'expected a result');
     |    ^ Eager Test
  69 |     const expected: DraggableLocation = {
  70 |       droppableId: preset.home.descriptor.id,
  71 |       index: 0,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 73, 'column': 11, 'index': 2361}","  71 |       index: 0,
  72 |     };
> 73 |     expect(tryGetDestination(result.impact)).toEqual(expected);
     |           ^ Eager Test
  74 |   });
  75 | });
  76 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 87, 'column': 4, 'index': 2727}","  85 |     });
  86 |
> 87 |     invariant(result, 'expected a result');
     |    ^ Eager Test
  88 |     const expected: DraggableLocation = {
  89 |       droppableId: preset.home.descriptor.id,
  90 |       index: 1,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 92, 'column': 11, 'index': 2889}","  90 |       index: 1,
  91 |     };
> 92 |     expect(tryGetDestination(result.impact)).toEqual(expected);
     |           ^ Eager Test
  93 |   });
  94 |
  95 |   it('should move backwards on a MOVE_LEFT', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 101, 'column': 4, 'index': 3151}","   99 |     });
  100 |
> 101 |     invariant(result, 'expected a result');
      |    ^ Eager Test
  102 |     const expected: DraggableLocation = {
  103 |       droppableId: preset.home.descriptor.id,
  104 |       index: 0,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 106, 'column': 11, 'index': 3313}","  104 |       index: 0,
  105 |     };
> 106 |     expect(tryGetDestination(result.impact)).toEqual(expected);
      |           ^ Eager Test
  107 |   });
  108 |
  109 |   it('should move cross axis forwards on a MOVE_DOWN', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 115, 'column': 4, 'index': 3557}","  113 |     });
  114 |
> 115 |     invariant(result, 'expected a result');
      |    ^ Eager Test
  116 |     const expected: DraggableLocation = {
  117 |       droppableId: preset.foreign.descriptor.id,
  118 |       index: 1,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 120, 'column': 11, 'index': 3722}","  118 |       index: 1,
  119 |     };
> 120 |     expect(tryGetDestination(result.impact)).toEqual(expected);
      |           ^ Eager Test
  121 |   });
  122 |
  123 |   it('should move cross axis backwards on a MOVE_UP', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 129, 'column': 4, 'index': 3994}","  127 |     });
  128 |
> 129 |     invariant(result, 'expected a result');
      |    ^ Eager Test
  130 |     const expected: DraggableLocation = {
  131 |       droppableId: preset.home.descriptor.id,
  132 |       index: 0,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 134, 'column': 11, 'index': 4156}","  132 |       index: 0,
  133 |     };
> 134 |     expect(tryGetDestination(result.impact)).toEqual(expected);
      |           ^ Eager Test
  135 |   });
  136 | });
  137 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 180, 'column': 6, 'index': 5653}","  178 |       });
  179 |
> 180 |       invariant(result, 'expected a result');
      |      ^ Eager Test
  181 |       const expected: DraggableLocation = {
  182 |         droppableId: preset.foreign.descriptor.id,
  183 |         index: 1,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Eager Test,"{'line': 185, 'column': 13, 'index': 5828}","  183 |         index: 1,
  184 |       };
> 185 |       expect(tryGetDestination(result.impact)).toEqual(expected);
      |             ^ Eager Test
  186 |     });
  187 |   });
  188 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 26, 'column': 4, 'index': 930}","  24 |     });
  25 |
> 26 |     invariant(result, 'expected a result');
     |    ^ Lazy Test
  27 |     const expected: DraggableLocation = {
  28 |       droppableId: preset.home.descriptor.id,
  29 |       index: 1,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 31, 'column': 11, 'index': 1092}","  29 |       index: 1,
  30 |     };
> 31 |     expect(tryGetDestination(result.impact)).toEqual(expected);
     |           ^ Lazy Test
  32 |   });
  33 |
  34 |   it('should move backwards on a MOVE_UP', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 40, 'column': 4, 'index': 1350}","  38 |     });
  39 |
> 40 |     invariant(result, 'expected a result');
     |    ^ Lazy Test
  41 |     const expected: DraggableLocation = {
  42 |       droppableId: preset.home.descriptor.id,
  43 |       index: 0,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 45, 'column': 11, 'index': 1512}","  43 |       index: 0,
  44 |     };
> 45 |     expect(tryGetDestination(result.impact)).toEqual(expected);
     |           ^ Lazy Test
  46 |   });
  47 |
  48 |   it('should move cross axis forwards on a MOVE_RIGHT', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 54, 'column': 4, 'index': 1758}","  52 |     });
  53 |
> 54 |     invariant(result, 'expected a result');
     |    ^ Lazy Test
  55 |     const expected: DraggableLocation = {
  56 |       droppableId: preset.foreign.descriptor.id,
  57 |       index: 1,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 59, 'column': 11, 'index': 1923}","  57 |       index: 1,
  58 |     };
> 59 |     expect(tryGetDestination(result.impact)).toEqual(expected);
     |           ^ Lazy Test
  60 |   });
  61 |
  62 |   it('should move cross axis backwards on a MOVE_LEFT', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 68, 'column': 4, 'index': 2199}","  66 |     });
  67 |
> 68 |     invariant(result, 'expected a result');
     |    ^ Lazy Test
  69 |     const expected: DraggableLocation = {
  70 |       droppableId: preset.home.descriptor.id,
  71 |       index: 0,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 73, 'column': 11, 'index': 2361}","  71 |       index: 0,
  72 |     };
> 73 |     expect(tryGetDestination(result.impact)).toEqual(expected);
     |           ^ Lazy Test
  74 |   });
  75 | });
  76 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 87, 'column': 4, 'index': 2727}","  85 |     });
  86 |
> 87 |     invariant(result, 'expected a result');
     |    ^ Lazy Test
  88 |     const expected: DraggableLocation = {
  89 |       droppableId: preset.home.descriptor.id,
  90 |       index: 1,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 92, 'column': 11, 'index': 2889}","  90 |       index: 1,
  91 |     };
> 92 |     expect(tryGetDestination(result.impact)).toEqual(expected);
     |           ^ Lazy Test
  93 |   });
  94 |
  95 |   it('should move backwards on a MOVE_LEFT', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 101, 'column': 4, 'index': 3151}","   99 |     });
  100 |
> 101 |     invariant(result, 'expected a result');
      |    ^ Lazy Test
  102 |     const expected: DraggableLocation = {
  103 |       droppableId: preset.home.descriptor.id,
  104 |       index: 0,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 106, 'column': 11, 'index': 3313}","  104 |       index: 0,
  105 |     };
> 106 |     expect(tryGetDestination(result.impact)).toEqual(expected);
      |           ^ Lazy Test
  107 |   });
  108 |
  109 |   it('should move cross axis forwards on a MOVE_DOWN', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 115, 'column': 4, 'index': 3557}","  113 |     });
  114 |
> 115 |     invariant(result, 'expected a result');
      |    ^ Lazy Test
  116 |     const expected: DraggableLocation = {
  117 |       droppableId: preset.foreign.descriptor.id,
  118 |       index: 1,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 120, 'column': 11, 'index': 3722}","  118 |       index: 1,
  119 |     };
> 120 |     expect(tryGetDestination(result.impact)).toEqual(expected);
      |           ^ Lazy Test
  121 |   });
  122 |
  123 |   it('should move cross axis backwards on a MOVE_UP', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 129, 'column': 4, 'index': 3994}","  127 |     });
  128 |
> 129 |     invariant(result, 'expected a result');
      |    ^ Lazy Test
  130 |     const expected: DraggableLocation = {
  131 |       droppableId: preset.home.descriptor.id,
  132 |       index: 0,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 134, 'column': 11, 'index': 4156}","  132 |       index: 0,
  133 |     };
> 134 |     expect(tryGetDestination(result.impact)).toEqual(expected);
      |           ^ Lazy Test
  135 |   });
  136 | });
  137 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 180, 'column': 6, 'index': 5653}","  178 |       });
  179 |
> 180 |       invariant(result, 'expected a result');
      |      ^ Lazy Test
  181 |       const expected: DraggableLocation = {
  182 |         droppableId: preset.foreign.descriptor.id,
  183 |         index: 1,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-in-direction.spec.js,Lazy Test,"{'line': 185, 'column': 13, 'index': 5828}","  183 |         index: 1,
  184 |       };
> 185 |       expect(tryGetDestination(result.impact)).toEqual(expected);
      |             ^ Lazy Test
  186 |     });
  187 |   });
  188 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-viewport.spec.js,Conditional Test Logic,"{'line': 35, 'column': 23, 'index': 1697}","  33 | import { emptyGroups } from '../../../../../../src/state/no-impact';
  34 |
> 35 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  36 |   const viewport: Viewport = createViewport({
  37 |     frame: getRect({
  38 |       top: 0,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-viewport.spec.js,Eager Test,"{'line': 150, 'column': 21, 'index': 4768}","  148 |
  149 |         const previousImpact: DragImpact = {
> 150 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  151 |             visible: [{ dimension: inForeign }],
  152 |           }),
  153 |           displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-viewport.spec.js,Eager Test,"{'line': 174, 'column': 8, 'index': 5426}","  172 |           afterCritical,
  173 |         });
> 174 |         invariant(result);
      |        ^ Eager Test
  175 |
  176 |         const expectedImpact: DragImpact = {
  177 |           displaced: emptyGroups,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-viewport.spec.js,Eager Test,"{'line': 297, 'column': 8, 'index': 9495}","  295 |           afterCritical,
  296 |         });
> 297 |         invariant(result);
      |        ^ Eager Test
  298 |
  299 |         const expectedImpact: DragImpact = {
  300 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-viewport.spec.js,Eager Test,"{'line': 300, 'column': 21, 'index': 9581}","  298 |
  299 |         const expectedImpact: DragImpact = {
> 300 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  301 |             // Even though the item started in an invisible place we force
  302 |             // the displacement to be visible.
  303 |             visible: [{ dimension: inForeign, shouldAnimate: false }],",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-viewport.spec.js,Lazy Test,"{'line': 150, 'column': 21, 'index': 4768}","  148 |
  149 |         const previousImpact: DragImpact = {
> 150 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  151 |             visible: [{ dimension: inForeign }],
  152 |           }),
  153 |           displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-viewport.spec.js,Lazy Test,"{'line': 174, 'column': 8, 'index': 5426}","  172 |           afterCritical,
  173 |         });
> 174 |         invariant(result);
      |        ^ Lazy Test
  175 |
  176 |         const expectedImpact: DragImpact = {
  177 |           displaced: emptyGroups,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-viewport.spec.js,Lazy Test,"{'line': 297, 'column': 8, 'index': 9495}","  295 |           afterCritical,
  296 |         });
> 297 |         invariant(result);
      |        ^ Lazy Test
  298 |
  299 |         const expectedImpact: DragImpact = {
  300 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-viewport.spec.js,Lazy Test,"{'line': 300, 'column': 21, 'index': 9581}","  298 |
  299 |         const expectedImpact: DragImpact = {
> 300 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  301 |             // Even though the item started in an invisible place we force
  302 |             // the displacement to be visible.
  303 |             visible: [{ dimension: inForeign, shouldAnimate: false }],",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-droppable.spec.js,Conditional Test Logic,"{'line': 42, 'column': 23, 'index': 1743}","  40 | import { emptyGroups } from '../../../../../../src/state/no-impact';
  41 |
> 42 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  43 |   const viewport: Viewport = createViewport({
  44 |     frame: getRect({
  45 |       top: 0,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-droppable.spec.js,Eager Test,"{'line': 171, 'column': 21, 'index': 5202}","  169 |           inHome.client.borderBox.center;
  170 |         const previousImpact: DragImpact = {
> 171 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  172 |             visible: [{ dimension: inForeign }],
  173 |           }),
  174 |           displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-droppable.spec.js,Eager Test,"{'line': 195, 'column': 8, 'index': 5860}","  193 |           afterCritical,
  194 |         });
> 195 |         invariant(result);
      |        ^ Eager Test
  196 |
  197 |         const expectedImpact: DragImpact = {
  198 |           displaced: emptyGroups,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-droppable.spec.js,Eager Test,"{'line': 314, 'column': 8, 'index': 9690}","  312 |           afterCritical,
  313 |         });
> 314 |         invariant(result);
      |        ^ Eager Test
  315 |
  316 |         const expectedImpact: DragImpact = {
  317 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-droppable.spec.js,Eager Test,"{'line': 317, 'column': 21, 'index': 9776}","  315 |
  316 |         const expectedImpact: DragImpact = {
> 317 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  318 |             // Even though the item started in an invisible place we force
  319 |             // the displacement to be visible.
  320 |             visible: [{ dimension: inForeign, shouldAnimate: false }],",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-droppable.spec.js,Lazy Test,"{'line': 171, 'column': 21, 'index': 5202}","  169 |           inHome.client.borderBox.center;
  170 |         const previousImpact: DragImpact = {
> 171 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  172 |             visible: [{ dimension: inForeign }],
  173 |           }),
  174 |           displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-droppable.spec.js,Lazy Test,"{'line': 195, 'column': 8, 'index': 5860}","  193 |           afterCritical,
  194 |         });
> 195 |         invariant(result);
      |        ^ Lazy Test
  196 |
  197 |         const expectedImpact: DragImpact = {
  198 |           displaced: emptyGroups,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-droppable.spec.js,Lazy Test,"{'line': 314, 'column': 8, 'index': 9690}","  312 |           afterCritical,
  313 |         });
> 314 |         invariant(result);
      |        ^ Lazy Test
  315 |
  316 |         const expectedImpact: DragImpact = {
  317 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-droppable.spec.js,Lazy Test,"{'line': 317, 'column': 21, 'index': 9776}","  315 |
  316 |         const expectedImpact: DragImpact = {
> 317 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  318 |             // Even though the item started in an invisible place we force
  319 |             // the displacement to be visible.
  320 |             visible: [{ dimension: inForeign, shouldAnimate: false }],",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Conditional Test Logic,"{'line': 16, 'column': 23, 'index': 742}","  14 | import { emptyGroups } from '../../../../../../../src/state/no-impact';
  15 |
> 16 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  17 |   const preset = getPreset(axis);
  18 |   describe(`on ${axis.direction} axis`, () => {
  19 |     it('should update the impact when moving with items that started displaced', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 42, 'column': 6, 'index': 1655}","  40 |         viewport: preset.viewport,
  41 |       });
> 42 |       invariant(forwardsPastInHome3);
     |      ^ Eager Test
  43 |       {
  44 |         const expected: DragImpact = {
  45 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 45, 'column': 21, 'index': 1755}","  43 |       {
  44 |         const expected: DragImpact = {
> 45 |           displaced: getForcedDisplacement({
     |                     ^ Eager Test
  46 |             visible: [{ dimension: preset.inHome4, shouldAnimate: false }],
  47 |           }),
  48 |           displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 70, 'column': 6, 'index': 2571}","  68 |         afterCritical,
  69 |       });
> 70 |       invariant(forwardsPastInHome4);
     |      ^ Eager Test
  71 |       {
  72 |         const expected: DragImpact = {
  73 |           displaced: emptyGroups,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 97, 'column': 6, 'index': 3389}","   95 |         afterCritical,
   96 |       });
>  97 |       invariant(backwardsPastInHome4);
      |      ^ Eager Test
   98 |       {
   99 |         const expected: DragImpact = {
  100 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 100, 'column': 21, 'index': 3490}","   98 |       {
   99 |         const expected: DragImpact = {
> 100 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  101 |             visible: [{ dimension: preset.inHome4 }],
  102 |           }),
  103 |           displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 126, 'column': 6, 'index': 4284}","  124 |         afterCritical,
  125 |       });
> 126 |       invariant(backwardsToHome);
      |      ^ Eager Test
  127 |       {
  128 |         const expected: DragImpact = {
  129 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 129, 'column': 21, 'index': 4380}","  127 |       {
  128 |         const expected: DragImpact = {
> 129 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  130 |             visible: [
  131 |               { dimension: preset.inHome3 },
  132 |               { dimension: preset.inHome4 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 158, 'column': 6, 'index': 5240}","  156 |         afterCritical,
  157 |       });
> 158 |       invariant(backwardsToHome);
      |      ^ Eager Test
  159 |       {
  160 |         const expected: DragImpact = {
  161 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 161, 'column': 21, 'index': 5336}","  159 |       {
  160 |         const expected: DragImpact = {
> 161 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  162 |             visible: [
  163 |               { dimension: preset.inHome1 },
  164 |               { dimension: preset.inHome3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 205, 'column': 6, 'index': 6728}","  203 |         afterCritical,
  204 |       });
> 205 |       invariant(backwardsPastInHome2);
      |      ^ Eager Test
  206 |       {
  207 |         const expected: DragImpact = {
  208 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 208, 'column': 21, 'index': 6829}","  206 |       {
  207 |         const expected: DragImpact = {
> 208 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  209 |             visible: [
  210 |               { dimension: preset.inHome2, shouldAnimate: true },
  211 |               // initial displacement not animated",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 239, 'column': 6, 'index': 7826}","  237 |         afterCritical,
  238 |       });
> 239 |       invariant(backwardsPastInHome1);
      |      ^ Eager Test
  240 |       {
  241 |         const expected: DragImpact = {
  242 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 242, 'column': 21, 'index': 7927}","  240 |       {
  241 |         const expected: DragImpact = {
> 242 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  243 |             // ordered by closest displaced
  244 |             visible: [
  245 |               {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 284, 'column': 6, 'index': 9168}","  282 |         afterCritical,
  283 |       });
> 284 |       invariant(forwardsPastInHome1);
      |      ^ Eager Test
  285 |       {
  286 |         const expected: DragImpact = {
  287 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 287, 'column': 21, 'index': 9268}","  285 |       {
  286 |         const expected: DragImpact = {
> 287 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  288 |             visible: [
  289 |               {
  290 |                 dimension: preset.inHome2,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 323, 'column': 6, 'index': 10322}","  321 |         afterCritical,
  322 |       });
> 323 |       invariant(forwardsToHome);
      |      ^ Eager Test
  324 |       {
  325 |         const expected: DragImpact = {
  326 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 326, 'column': 21, 'index': 10417}","  324 |       {
  325 |         const expected: DragImpact = {
> 326 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  327 |             visible: [{ dimension: preset.inHome4, shouldAnimate: false }],
  328 |           }),
  329 |           displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Eager Test,"{'line': 351, 'column': 6, 'index': 11220}","  349 |         afterCritical,
  350 |       });
> 351 |       invariant(forwardsPastHome);
      |      ^ Eager Test
  352 |       {
  353 |         const expected: DragImpact = {
  354 |           displaced: emptyGroups,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Lazy Test,"{'line': 42, 'column': 6, 'index': 1655}","  40 |         viewport: preset.viewport,
  41 |       });
> 42 |       invariant(forwardsPastInHome3);
     |      ^ Lazy Test
  43 |       {
  44 |         const expected: DragImpact = {
  45 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Lazy Test,"{'line': 45, 'column': 21, 'index': 1755}","  43 |       {
  44 |         const expected: DragImpact = {
> 45 |           displaced: getForcedDisplacement({
     |                     ^ Lazy Test
  46 |             visible: [{ dimension: preset.inHome4, shouldAnimate: false }],
  47 |           }),
  48 |           displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Lazy Test,"{'line': 205, 'column': 6, 'index': 6728}","  203 |         afterCritical,
  204 |       });
> 205 |       invariant(backwardsPastInHome2);
      |      ^ Lazy Test
  206 |       {
  207 |         const expected: DragImpact = {
  208 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,Lazy Test,"{'line': 208, 'column': 21, 'index': 6829}","  206 |       {
  207 |         const expected: DragImpact = {
> 208 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  209 |             visible: [
  210 |               { dimension: preset.inHome2, shouldAnimate: true },
  211 |               // initial displacement not animated",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Conditional Test Logic,"{'line': 16, 'column': 23, 'index': 742}","  14 | import { emptyGroups } from '../../../../../../../src/state/no-impact';
  15 |
> 16 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  17 |   const preset = getPreset(axis);
  18 |   const displacedBy: DisplacedBy = getDisplacedBy(
  19 |     axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Duplicate Assert,"{'line': 182, 'column': 8, 'index': 5803}","  180 |           },
  181 |         };
> 182 |         expect(fourth).toEqual(expected);
      |        ^ Duplicate Assert
  183 |         // also now back where we started
  184 |         expect(fourth).toEqual(crossAxisMove);
  185 |       }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Duplicate Assert,"{'line': 184, 'column': 8, 'index': 5887}","  182 |         expect(fourth).toEqual(expected);
  183 |         // also now back where we started
> 184 |         expect(fourth).toEqual(crossAxisMove);
      |        ^ Duplicate Assert
  185 |       }
  186 |     });
  187 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Duplicate Assert,"{'line': 344, 'column': 8, 'index': 10739}","  342 |           },
  343 |         };
> 344 |         expect(fourth).toEqual(expected);
      |        ^ Duplicate Assert
  345 |         // also now back where we started
  346 |         expect(fourth).toEqual(crossAxisMove);
  347 |       }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Duplicate Assert,"{'line': 346, 'column': 8, 'index': 10823}","  344 |         expect(fourth).toEqual(expected);
  345 |         // also now back where we started
> 346 |         expect(fourth).toEqual(crossAxisMove);
      |        ^ Duplicate Assert
  347 |       }
  348 |     });
  349 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 36, 'column': 19, 'index': 1501}","  34 |
  35 |       const crossAxisMove: DragImpact = {
> 36 |         displaced: getForcedDisplacement({
     |                   ^ Eager Test
  37 |           visible: [
  38 |             { dimension: preset.inForeign2 },
  39 |             { dimension: preset.inForeign3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 65, 'column': 6, 'index': 2348}","  63 |         viewport: preset.viewport,
  64 |       });
> 65 |       invariant(first);
     |      ^ Eager Test
  66 |       {
  67 |         const expected: DragImpact = {
  68 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 68, 'column': 21, 'index': 2434}","  66 |       {
  67 |         const expected: DragImpact = {
> 68 |           displaced: getForcedDisplacement({
     |                     ^ Eager Test
  69 |             visible: [
  70 |               { dimension: preset.inForeign3 },
  71 |               { dimension: preset.inForeign4 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 98, 'column': 6, 'index': 3311}","   96 |         viewport: preset.viewport,
   97 |       });
>  98 |       invariant(second);
      |      ^ Eager Test
   99 |       {
  100 |         const expected: DragImpact = {
  101 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 101, 'column': 21, 'index': 3398}","   99 |       {
  100 |         const expected: DragImpact = {
> 101 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  102 |             visible: [{ dimension: preset.inForeign4 }],
  103 |           }),
  104 |           displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 130, 'column': 6, 'index': 4272}","  128 |         viewport: preset.viewport,
  129 |       });
> 130 |       invariant(third);
      |      ^ Eager Test
  131 |       {
  132 |         const expected: DragImpact = {
  133 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 133, 'column': 21, 'index': 4358}","  131 |       {
  132 |         const expected: DragImpact = {
> 133 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  134 |             visible: [
  135 |               { dimension: preset.inForeign3 },
  136 |               { dimension: preset.inForeign4 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 162, 'column': 6, 'index': 5206}","  160 |         viewport: preset.viewport,
  161 |       });
> 162 |       invariant(fourth);
      |      ^ Eager Test
  163 |       {
  164 |         const expected: DragImpact = {
  165 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 165, 'column': 21, 'index': 5293}","  163 |       {
  164 |         const expected: DragImpact = {
> 165 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  166 |             // ordered by closest
  167 |             visible: [
  168 |               { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 191, 'column': 19, 'index': 6186}","  189 |       // inHome1 has made its way into index #3 of foreign after a cross axis move
  190 |       const crossAxisMove: DragImpact = {
> 191 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  192 |           visible: [
  193 |             { dimension: preset.inForeign3 },
  194 |             { dimension: preset.inForeign4 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 219, 'column': 6, 'index': 6990}","  217 |         viewport: preset.viewport,
  218 |       });
> 219 |       invariant(first);
      |      ^ Eager Test
  220 |       {
  221 |         const expected: DragImpact = {
  222 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 222, 'column': 21, 'index': 7076}","  220 |       {
  221 |         const expected: DragImpact = {
> 222 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  223 |             visible: [
  224 |               { dimension: preset.inForeign2 },
  225 |               { dimension: preset.inForeign3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 253, 'column': 6, 'index': 8004}","  251 |         viewport: preset.viewport,
  252 |       });
> 253 |       invariant(second);
      |      ^ Eager Test
  254 |       {
  255 |         const expected: DragImpact = {
  256 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 256, 'column': 21, 'index': 8091}","  254 |       {
  255 |         const expected: DragImpact = {
> 256 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  257 |             visible: [
  258 |               { dimension: preset.inForeign1 },
  259 |               { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 290, 'column': 6, 'index': 9135}","  288 |         viewport: preset.viewport,
  289 |       });
> 290 |       invariant(third);
      |      ^ Eager Test
  291 |       {
  292 |         const expected: DragImpact = {
  293 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 293, 'column': 21, 'index': 9221}","  291 |       {
  292 |         const expected: DragImpact = {
> 293 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  294 |             // ordered by closest impacted
  295 |             visible: [
  296 |               { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 325, 'column': 6, 'index': 10190}","  323 |         viewport: preset.viewport,
  324 |       });
> 325 |       invariant(fourth);
      |      ^ Eager Test
  326 |       {
  327 |         const expected: DragImpact = {
  328 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 328, 'column': 21, 'index': 10277}","  326 |       {
  327 |         const expected: DragImpact = {
> 328 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  329 |             // ordered by closest
  330 |             visible: [
  331 |               { dimension: preset.inForeign3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 390, 'column': 19, 'index': 12151}","  388 |       // cross axis move inHome1 before inForeign4
  389 |       const crossAxisMove: DragImpact = {
> 390 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  391 |           visible: [{ dimension: preset.inForeign4 }],
  392 |         }),
  393 |         displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Eager Test,"{'line': 417, 'column': 6, 'index': 12979}","  415 |         viewport: preset.viewport,
  416 |       });
> 417 |       invariant(impact);
      |      ^ Eager Test
  418 |       const expected: DragImpact = {
  419 |         // nothing is displaced at this point
  420 |         displaced: emptyGroups,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Lazy Test,"{'line': 36, 'column': 19, 'index': 1501}","  34 |
  35 |       const crossAxisMove: DragImpact = {
> 36 |         displaced: getForcedDisplacement({
     |                   ^ Lazy Test
  37 |           visible: [
  38 |             { dimension: preset.inForeign2 },
  39 |             { dimension: preset.inForeign3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Lazy Test,"{'line': 65, 'column': 6, 'index': 2348}","  63 |         viewport: preset.viewport,
  64 |       });
> 65 |       invariant(first);
     |      ^ Lazy Test
  66 |       {
  67 |         const expected: DragImpact = {
  68 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Lazy Test,"{'line': 191, 'column': 19, 'index': 6186}","  189 |       // inHome1 has made its way into index #3 of foreign after a cross axis move
  190 |       const crossAxisMove: DragImpact = {
> 191 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  192 |           visible: [
  193 |             { dimension: preset.inForeign3 },
  194 |             { dimension: preset.inForeign4 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Lazy Test,"{'line': 219, 'column': 6, 'index': 6990}","  217 |         viewport: preset.viewport,
  218 |       });
> 219 |       invariant(first);
      |      ^ Lazy Test
  220 |       {
  221 |         const expected: DragImpact = {
  222 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Lazy Test,"{'line': 353, 'column': 19, 'index': 11065}","  351 |       // cross axis move inHome1 before inForeign1
  352 |       const crossAxisMove: DragImpact = {
> 353 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  354 |           visible: [
  355 |             { dimension: preset.inForeign1 },
  356 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Lazy Test,"{'line': 390, 'column': 19, 'index': 12151}","  388 |       // cross axis move inHome1 before inForeign4
  389 |       const crossAxisMove: DragImpact = {
> 390 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  391 |           visible: [{ dimension: preset.inForeign4 }],
  392 |         }),
  393 |         displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Lazy Test,"{'line': 417, 'column': 6, 'index': 12979}","  415 |         viewport: preset.viewport,
  416 |       });
> 417 |       invariant(impact);
      |      ^ Lazy Test
  418 |       const expected: DragImpact = {
  419 |         // nothing is displaced at this point
  420 |         displaced: emptyGroups,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,Lazy Test,"{'line': 478, 'column': 19, 'index': 14861}","  476 |
  477 |       const expected: DragImpact = {
> 478 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  479 |           visible: [{ dimension: preset.inForeign4 }],
  480 |         }),
  481 |         displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/started-after-critical.spec.js,Conditional Test Logic,"{'line': 19, 'column': 23, 'index': 746}","  17 | });
  18 |
> 19 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  20 |   const preset = getPreset(axis);
  21 |   describe(`on ${axis.direction} axis`, () => {
  22 |     it('should move backward off combining with an item that is displaced', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/started-after-critical.spec.js,Eager Test,"{'line': 113, 'column': 19, 'index': 3820}","  111 |       });
  112 |       const combining: DragImpact = {
> 113 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  114 |           // inHome3 now displaced
  115 |           visible: [{ dimension: preset.inHome4, shouldAnimate: false }],
  116 |         }),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/started-after-critical.spec.js,Eager Test,"{'line': 141, 'column': 19, 'index': 4731}","  139 |       // backwards movement should displace inHome3
  140 |       const expected: DragImpact = {
> 141 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  142 |           // inHome3 now displaced
  143 |           visible: [
  144 |             { dimension: preset.inHome3, shouldAnimate: true },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/started-after-critical.spec.js,Eager Test,"{'line': 170, 'column': 19, 'index': 5709}","  168 |
  169 |       const combining: DragImpact = {
> 170 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  171 |           // preset.inHome3 is no longer displaced
  172 |           visible: [{ dimension: preset.inHome4, shouldAnimate: false }],
  173 |         }),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/started-after-critical.spec.js,Eager Test,"{'line': 198, 'column': 19, 'index': 6680}","  196 |       const expected: DragImpact = {
  197 |         // forwards movement off inHome3. It will leave inHome3 in the same spot and go after it
> 198 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  199 |           visible: [{ dimension: preset.inHome4, shouldAnimate: false }],
  200 |         }),
  201 |         displacedBy: getDisplacedBy(axis, preset.inHome2.displaceBy),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/started-after-critical.spec.js,Lazy Test,"{'line': 88, 'column': 19, 'index': 2931}","  86 |
  87 |       const expected: DragImpact = {
> 88 |         displaced: getForcedDisplacement({
     |                   ^ Lazy Test
  89 |           // inHome3 now displaced
  90 |           visible: [{ dimension: preset.inHome4, shouldAnimate: false }],
  91 |         }),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/started-after-critical.spec.js,Lazy Test,"{'line': 113, 'column': 19, 'index': 3820}","  111 |       });
  112 |       const combining: DragImpact = {
> 113 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  114 |           // inHome3 now displaced
  115 |           visible: [{ dimension: preset.inHome4, shouldAnimate: false }],
  116 |         }),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/started-after-critical.spec.js,Lazy Test,"{'line': 170, 'column': 19, 'index': 5709}","  168 |
  169 |       const combining: DragImpact = {
> 170 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  171 |           // preset.inHome3 is no longer displaced
  172 |           visible: [{ dimension: preset.inHome4, shouldAnimate: false }],
  173 |         }),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/did-not-start-after-critical.spec.js,Conditional Test Logic,"{'line': 19, 'column': 23, 'index': 746}","  17 | });
  18 |
> 19 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  20 |   const preset = getPreset(axis);
  21 |   describe(`on ${axis.direction} axis`, () => {
  22 |     it('should move forward off combining with is displaced', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/did-not-start-after-critical.spec.js,Eager Test,"{'line': 32, 'column': 19, 'index': 1345}","  30 |       });
  31 |       const combining: DragImpact = {
> 32 |         displaced: getForcedDisplacement({
     |                   ^ Eager Test
  33 |           visible: [
  34 |             { dimension: preset.inForeign1 },
  35 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/did-not-start-after-critical.spec.js,Eager Test,"{'line': 64, 'column': 19, 'index': 2367}","  62 |       const expected: DragImpact = {
  63 |         // inForeign1 no longer displaced
> 64 |         displaced: getForcedDisplacement({
     |                   ^ Eager Test
  65 |           visible: [
  66 |             { dimension: preset.inForeign2 },
  67 |             { dimension: preset.inForeign3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/did-not-start-after-critical.spec.js,Eager Test,"{'line': 151, 'column': 19, 'index': 5214}","  149 |       });
  150 |       const combining: DragImpact = {
> 151 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  152 |           // inForeign1 is not displaced
  153 |           visible: [
  154 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/did-not-start-after-critical.spec.js,Eager Test,"{'line': 183, 'column': 19, 'index': 6231}","  181 |
  182 |       const expected: DragImpact = {
> 183 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  184 |           // inForeign1 still not displaced
  185 |           visible: [
  186 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/did-not-start-after-critical.spec.js,Eager Test,"{'line': 219, 'column': 19, 'index': 7394}","  217 |       });
  218 |       const combining: DragImpact = {
> 219 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  220 |           visible: [
  221 |             // inForeign1 not displaced
  222 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/did-not-start-after-critical.spec.js,Eager Test,"{'line': 251, 'column': 19, 'index': 8413}","  249 |
  250 |       const expected: DragImpact = {
> 251 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  252 |           // inForeign1 now displaced
  253 |           visible: [
  254 |             { dimension: preset.inForeign1 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/did-not-start-after-critical.spec.js,Lazy Test,"{'line': 32, 'column': 19, 'index': 1345}","  30 |       });
  31 |       const combining: DragImpact = {
> 32 |         displaced: getForcedDisplacement({
     |                   ^ Lazy Test
  33 |           visible: [
  34 |             { dimension: preset.inForeign1 },
  35 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/did-not-start-after-critical.spec.js,Lazy Test,"{'line': 93, 'column': 19, 'index': 3392}","  91 |       });
  92 |       const combining: DragImpact = {
> 93 |         displaced: getForcedDisplacement({
     |                   ^ Lazy Test
  94 |           visible: [
  95 |             { dimension: preset.inForeign1 },
  96 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/did-not-start-after-critical.spec.js,Lazy Test,"{'line': 151, 'column': 19, 'index': 5214}","  149 |       });
  150 |       const combining: DragImpact = {
> 151 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  152 |           // inForeign1 is not displaced
  153 |           visible: [
  154 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/did-not-start-after-critical.spec.js,Lazy Test,"{'line': 219, 'column': 19, 'index': 7394}","  217 |       });
  218 |       const combining: DragImpact = {
> 219 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  220 |           visible: [
  221 |             // inForeign1 not displaced
  222 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-home-list.legacy.spec.js,Conditional Test Logic,"{'line': 20, 'column': 23, 'index': 790}","  18 | });
  19 |
> 20 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  21 |   const preset = getPreset(axis);
  22 |   describe(`on ${axis.direction} axis`, () => {
  23 |     it('should move onto an item that started displaced', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-home-list.legacy.spec.js,Eager Test,"{'line': 57, 'column': 19, 'index': 1982}","  55 |
  56 |       const pastInHome3: DragImpact = {
> 57 |         displaced: getForcedDisplacement({
     |                   ^ Eager Test
  58 |           visible: [{ dimension: preset.inHome4, shouldAnimate: false }],
  59 |         }),
  60 |         displacedBy: getDisplacedBy(axis, preset.inHome2.displaceBy),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-home-list.legacy.spec.js,Eager Test,"{'line': 76, 'column': 6, 'index': 2652}","  74 |         previousImpact: pastInHome3,
  75 |       });
> 76 |       invariant(moveBackwardsOntoInHome3);
     |      ^ Eager Test
  77 |
  78 |       const expected: DragImpact = {
  79 |         ...pastInHome3,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-home-list.legacy.spec.js,Eager Test,"{'line': 126, 'column': 19, 'index': 4163}","  124 |
  125 |       const beforeInHome2: DragImpact = {
> 126 |         displaced: getForcedDisplacement({
      |                   ^ Eager Test
  127 |           visible: [
  128 |             { dimension: preset.inHome2 },
  129 |             // originally displaced",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-home-list.legacy.spec.js,Eager Test,"{'line': 150, 'column': 6, 'index': 4938}","  148 |         previousImpact: beforeInHome2,
  149 |       });
> 150 |       invariant(moveForwardsOntoInHome2);
      |      ^ Eager Test
  151 |
  152 |       const expected: DragImpact = {
  153 |         ...beforeInHome2,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-home-list.legacy.spec.js,Lazy Test,"{'line': 38, 'column': 6, 'index': 1431}","  36 |         previousImpact: homeImpact,
  37 |       });
> 38 |       invariant(result);
     |      ^ Lazy Test
  39 |
  40 |       const expected: DragImpact = {
  41 |         ...homeImpact,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-home-list.legacy.spec.js,Lazy Test,"{'line': 57, 'column': 19, 'index': 1982}","  55 |
  56 |       const pastInHome3: DragImpact = {
> 57 |         displaced: getForcedDisplacement({
     |                   ^ Lazy Test
  58 |           visible: [{ dimension: preset.inHome4, shouldAnimate: false }],
  59 |         }),
  60 |         displacedBy: getDisplacedBy(axis, preset.inHome2.displaceBy),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-home-list.legacy.spec.js,Lazy Test,"{'line': 76, 'column': 6, 'index': 2652}","  74 |         previousImpact: pastInHome3,
  75 |       });
> 76 |       invariant(moveBackwardsOntoInHome3);
     |      ^ Lazy Test
  77 |
  78 |       const expected: DragImpact = {
  79 |         ...pastInHome3,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-home-list.legacy.spec.js,Lazy Test,"{'line': 107, 'column': 6, 'index': 3607}","  105 |         previousImpact: homeImpact,
  106 |       });
> 107 |       invariant(result);
      |      ^ Lazy Test
  108 |
  109 |       const expected: DragImpact = {
  110 |         ...homeImpact,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-home-list.legacy.spec.js,Lazy Test,"{'line': 126, 'column': 19, 'index': 4163}","  124 |
  125 |       const beforeInHome2: DragImpact = {
> 126 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  127 |           visible: [
  128 |             { dimension: preset.inHome2 },
  129 |             // originally displaced",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-home-list.legacy.spec.js,Lazy Test,"{'line': 150, 'column': 6, 'index': 4938}","  148 |         previousImpact: beforeInHome2,
  149 |       });
> 150 |       invariant(moveForwardsOntoInHome2);
      |      ^ Lazy Test
  151 |
  152 |       const expected: DragImpact = {
  153 |         ...beforeInHome2,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-foreign-list.legacy.spec.js,Conditional Test Logic,"{'line': 21, 'column': 23, 'index': 801}","  19 | });
  20 |
> 21 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  22 |   const preset = getPreset(axis);
  23 |
  24 |   // always displace forward in foreign list",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-foreign-list.legacy.spec.js,Eager Test,"{'line': 35, 'column': 19, 'index': 1277}","  33 |       // now moving forward onto inForeign2
  34 |       const current: DragImpact = {
> 35 |         displaced: getForcedDisplacement({
     |                   ^ Eager Test
  36 |           visible: [
  37 |             { dimension: preset.inForeign2 },
  38 |             { dimension: preset.inForeign3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-foreign-list.legacy.spec.js,Eager Test,"{'line': 59, 'column': 6, 'index': 1986}","  57 |         previousImpact: current,
  58 |       });
> 59 |       invariant(result);
     |      ^ Eager Test
  60 |
  61 |       const expected: DragImpact = {
  62 |         ...current,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-foreign-list.legacy.spec.js,Eager Test,"{'line': 79, 'column': 19, 'index': 2613}","  77 |       // ordered by closest impacted
  78 |       const current: DragImpact = {
> 79 |         displaced: getForcedDisplacement({
     |                   ^ Eager Test
  80 |           visible: [
  81 |             { dimension: preset.inForeign3 },
  82 |             { dimension: preset.inForeign4 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-foreign-list.legacy.spec.js,Eager Test,"{'line': 102, 'column': 6, 'index': 3277}","  100 |         previousImpact: current,
  101 |       });
> 102 |       invariant(result);
      |      ^ Eager Test
  103 |
  104 |       // no change to displacement
  105 |       const expected: DragImpact = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-foreign-list.legacy.spec.js,Lazy Test,"{'line': 35, 'column': 19, 'index': 1277}","  33 |       // now moving forward onto inForeign2
  34 |       const current: DragImpact = {
> 35 |         displaced: getForcedDisplacement({
     |                   ^ Lazy Test
  36 |           visible: [
  37 |             { dimension: preset.inForeign2 },
  38 |             { dimension: preset.inForeign3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-foreign-list.legacy.spec.js,Lazy Test,"{'line': 59, 'column': 6, 'index': 1986}","  57 |         previousImpact: current,
  58 |       });
> 59 |       invariant(result);
     |      ^ Lazy Test
  60 |
  61 |       const expected: DragImpact = {
  62 |         ...current,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-foreign-list.legacy.spec.js,Lazy Test,"{'line': 79, 'column': 19, 'index': 2613}","  77 |       // ordered by closest impacted
  78 |       const current: DragImpact = {
> 79 |         displaced: getForcedDisplacement({
     |                   ^ Lazy Test
  80 |           visible: [
  81 |             { dimension: preset.inForeign3 },
  82 |             { dimension: preset.inForeign4 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-foreign-list.legacy.spec.js,Lazy Test,"{'line': 102, 'column': 6, 'index': 3277}","  100 |         previousImpact: current,
  101 |       });
> 102 |       invariant(result);
      |      ^ Lazy Test
  103 |
  104 |       // no change to displacement
  105 |       const expected: DragImpact = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-foreign-list.legacy.spec.js,Lazy Test,"{'line': 120, 'column': 19, 'index': 3782}","  118 |     it('should not allow combining with anything before the first item', () => {
  119 |       const current: DragImpact = {
> 120 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  121 |           visible: [
  122 |             { dimension: preset.inForeign1 },
  123 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-home-list.spec.js,Conditional Test Logic,"{'line': 20, 'column': 23, 'index': 821}","  18 | const dontCare: Position = { x: 0, y: 0 };
  19 |
> 20 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  21 |   describe(`on ${axis.direction} axis`, () => {
  22 |     const preset = getPreset(axis);
  23 |     const viewport: Viewport = preset.viewport;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-home-list.spec.js,Eager Test,"{'line': 71, 'column': 8, 'index': 2539}","  69 |           afterCritical,
  70 |         });
> 71 |         invariant(result);
     |        ^ Eager Test
  72 |
  73 |         const expected: DragImpact = {
  74 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-home-list.spec.js,Eager Test,"{'line': 74, 'column': 21, 'index': 2619}","  72 |
  73 |         const expected: DragImpact = {
> 74 |           displaced: getForcedDisplacement({
     |                     ^ Eager Test
  75 |             // unlike the original displacement, this will be animated
  76 |             visible: [
  77 |               { dimension: preset.inHome3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-home-list.spec.js,Eager Test,"{'line': 118, 'column': 8, 'index': 4063}","  116 |           afterCritical,
  117 |         });
> 118 |         invariant(result);
      |        ^ Eager Test
  119 |
  120 |         const expected: DragImpact = {
  121 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-home-list.spec.js,Eager Test,"{'line': 121, 'column': 21, 'index': 4143}","  119 |
  120 |         const expected: DragImpact = {
> 121 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  122 |             visible: [
  123 |               { dimension: preset.inHome2 },
  124 |               { dimension: preset.inHome3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-home-list.spec.js,Lazy Test,"{'line': 71, 'column': 8, 'index': 2539}","  69 |           afterCritical,
  70 |         });
> 71 |         invariant(result);
     |        ^ Lazy Test
  72 |
  73 |         const expected: DragImpact = {
  74 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-home-list.spec.js,Lazy Test,"{'line': 74, 'column': 21, 'index': 2619}","  72 |
  73 |         const expected: DragImpact = {
> 74 |           displaced: getForcedDisplacement({
     |                     ^ Lazy Test
  75 |             // unlike the original displacement, this will be animated
  76 |             visible: [
  77 |               { dimension: preset.inHome3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-home-list.spec.js,Lazy Test,"{'line': 118, 'column': 8, 'index': 4063}","  116 |           afterCritical,
  117 |         });
> 118 |         invariant(result);
      |        ^ Lazy Test
  119 |
  120 |         const expected: DragImpact = {
  121 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-home-list.spec.js,Lazy Test,"{'line': 121, 'column': 21, 'index': 4143}","  119 |
  120 |         const expected: DragImpact = {
> 121 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  122 |             visible: [
  123 |               { dimension: preset.inHome2 },
  124 |               { dimension: preset.inHome3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-home-list.spec.js,Lazy Test,"{'line': 164, 'column': 8, 'index': 5549}","  162 |           afterCritical,
  163 |         });
> 164 |         invariant(result);
      |        ^ Lazy Test
  165 |
  166 |         const expected: DragImpact = {
  167 |           displaced: emptyGroups,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Conditional Test Logic,"{'line': 36, 'column': 23, 'index': 1309}","  34 | } from '../../../../../../src/state/no-impact';
  35 |
> 36 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  37 |   describe(`on ${axis.direction} axis`, () => {
  38 |     const preset = getPreset(axis);
  39 |     const viewport: Viewport = preset.viewport;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Duplicate Assert,"{'line': 121, 'column': 12, 'index': 4351}","  119 |               afterCritical,
  120 |             });
> 121 |             expect(result).toBeTruthy();
      |            ^ Duplicate Assert
  122 |           }
  123 |
  124 |           // center on visible edge = can move",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Duplicate Assert,"{'line': 121, 'column': 12, 'index': 4351}","  119 |               afterCritical,
  120 |             });
> 121 |             expect(result).toBeTruthy();
      |            ^ Duplicate Assert
  122 |           }
  123 |
  124 |           // center on visible edge = can move",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Duplicate Assert,"{'line': 145, 'column': 12, 'index': 5170}","  143 |               afterCritical,
  144 |             });
> 145 |             expect(result).toBeTruthy();
      |            ^ Duplicate Assert
  146 |           }
  147 |           // center past visible edge = cannot move
  148 |           {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Duplicate Assert,"{'line': 145, 'column': 12, 'index': 5170}","  143 |               afterCritical,
  144 |             });
> 145 |             expect(result).toBeTruthy();
      |            ^ Duplicate Assert
  146 |           }
  147 |           // center past visible edge = cannot move
  148 |           {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Duplicate Assert,"{'line': 168, 'column': 12, 'index': 6006}","  166 |             });
  167 |
> 168 |             expect(result).toBe(null);
      |            ^ Duplicate Assert
  169 |           }
  170 |         });
  171 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Duplicate Assert,"{'line': 202, 'column': 12, 'index': 7295}","  200 |             });
  201 |
> 202 |             expect(result).toBeTruthy();
      |            ^ Duplicate Assert
  203 |           }
  204 |           // center on visible edge = can move
  205 |           {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Duplicate Assert,"{'line': 202, 'column': 12, 'index': 7295}","  200 |             });
  201 |
> 202 |             expect(result).toBeTruthy();
      |            ^ Duplicate Assert
  203 |           }
  204 |           // center on visible edge = can move
  205 |           {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Duplicate Assert,"{'line': 222, 'column': 12, 'index': 7965}","  220 |             });
  221 |
> 222 |             expect(result).toBeTruthy();
      |            ^ Duplicate Assert
  223 |           }
  224 |           // start is no longer visible = cannot move
  225 |           {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Duplicate Assert,"{'line': 222, 'column': 12, 'index': 7965}","  220 |             });
  221 |
> 222 |             expect(result).toBeTruthy();
      |            ^ Duplicate Assert
  223 |           }
  224 |           // start is no longer visible = cannot move
  225 |           {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Duplicate Assert,"{'line': 242, 'column': 12, 'index': 8644}","  240 |             });
  241 |
> 242 |             expect(result).toBe(null);
      |            ^ Duplicate Assert
  243 |           }
  244 |         });
  245 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Eager Test,"{'line': 308, 'column': 8, 'index': 10855}","  306 |           afterCritical,
  307 |         });
> 308 |         invariant(result);
      |        ^ Eager Test
  309 |
  310 |         const expected: DragImpact = {
  311 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Eager Test,"{'line': 311, 'column': 21, 'index': 10935}","  309 |
  310 |         const expected: DragImpact = {
> 311 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  312 |             // ordered by closest impacted
  313 |             visible: [
  314 |               { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Lazy Test,"{'line': 60, 'column': 8, 'index': 2173}","  58 |           afterCritical,
  59 |         });
> 60 |         invariant(result);
     |        ^ Lazy Test
  61 |
  62 |         const expected: DragImpact = {
  63 |           displaced: emptyGroups,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Lazy Test,"{'line': 97, 'column': 10, 'index': 3431}","   95 |             totalShift,
   96 |           );
>  97 |           invariant(preset.emptyForeign.subject.active);
      |          ^ Lazy Test
   98 |           const maxAllowableScroll: Position = negate(
   99 |             subtract(
  100 |               patch(axis.line, preset.emptyForeign.subject.active[axis.start]),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Lazy Test,"{'line': 308, 'column': 8, 'index': 10855}","  306 |           afterCritical,
  307 |         });
> 308 |         invariant(result);
      |        ^ Lazy Test
  309 |
  310 |         const expected: DragImpact = {
  311 |           displaced: getForcedDisplacement({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Lazy Test,"{'line': 311, 'column': 21, 'index': 10935}","  309 |
  310 |         const expected: DragImpact = {
> 311 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  312 |             // ordered by closest impacted
  313 |             visible: [
  314 |               { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Lazy Test,"{'line': 360, 'column': 21, 'index': 12581}","  358 |
  359 |         const expected: DragImpact = {
> 360 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  361 |             // everything after inForeign1
  362 |             // ordered by closest impacted
  363 |             visible: [",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,Lazy Test,"{'line': 408, 'column': 8, 'index': 14260}","  406 |           afterCritical,
  407 |         });
> 408 |         invariant(result);
      |        ^ Lazy Test
  409 |
  410 |         const expected: DragImpact = {
  411 |           displaced: emptyGroups,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/get-closest-draggable/without-starting-displacement.spec.js,Conditional Test Logic,"{'line': 24, 'column': 23, 'index': 955}","  22 | const viewport: Viewport = getViewport();
  23 |
> 24 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  25 |   describe(`on the ${axis.direction} axis`, () => {
  26 |     const start: number = 0;
  27 |     const end: number = 100;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/get-closest-draggable/with-starting-displacement.spec.js,Conditional Test Logic,"{'line': 27, 'column': 23, 'index': 1248}","  25 |
  26 | // Not covering all cases. Full coverage in without-starting-displacement.spec
> 27 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  28 |   describe(`on the ${axis.direction} axis`, () => {
  29 |     const start: number = 0;
  30 |     const end: number = 100;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/get-closest-draggable/with-starting-displacement.spec.js,Duplicate Assert,"{'line': 120, 'column': 8, 'index': 3772}","  118 |           afterCritical,
  119 |         });
> 120 |         expect(result).toEqual(inHome3);
      |        ^ Duplicate Assert
  121 |       }
  122 |       // validation: without initial displacement it would have been inHome2
  123 |       {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/move-in-direction/move-cross-axis/get-closest-draggable/with-starting-displacement.spec.js,Duplicate Assert,"{'line': 131, 'column': 8, 'index': 4143}","  129 |           afterCritical: noAfterCritical,
  130 |         });
> 131 |         expect(result).toEqual(inHome2);
      |        ^ Duplicate Assert
  132 |       }
  133 |     });
  134 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/validate-indexes.spec.js,Duplicate Assert,"{'line': 74, 'column': 2, 'index': 2346}","  72 |   // first lift is preparing
  73 |   store.dispatch(lift(liftArgs));
> 74 |   expect(mock).toHaveBeenCalledWith(lift(liftArgs));
     |  ^ Duplicate Assert
  75 |   expect(mock).toHaveBeenCalledWith(flush());
  76 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
  77 |   expect(mock).toHaveBeenCalledWith(initialPublish(initial));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/validate-indexes.spec.js,Duplicate Assert,"{'line': 75, 'column': 2, 'index': 2399}","  73 |   store.dispatch(lift(liftArgs));
  74 |   expect(mock).toHaveBeenCalledWith(lift(liftArgs));
> 75 |   expect(mock).toHaveBeenCalledWith(flush());
     |  ^ Duplicate Assert
  76 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
  77 |   expect(mock).toHaveBeenCalledWith(initialPublish(initial));
  78 |   expect(mock).toHaveBeenCalledTimes(4);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/validate-indexes.spec.js,Duplicate Assert,"{'line': 76, 'column': 2, 'index': 2445}","  74 |   expect(mock).toHaveBeenCalledWith(lift(liftArgs));
  75 |   expect(mock).toHaveBeenCalledWith(flush());
> 76 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
     |  ^ Duplicate Assert
  77 |   expect(mock).toHaveBeenCalledWith(initialPublish(initial));
  78 |   expect(mock).toHaveBeenCalledTimes(4);
  79 |   expect(store.getState().phase).toBe('DRAGGING');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/validate-indexes.spec.js,Duplicate Assert,"{'line': 77, 'column': 2, 'index': 2523}","  75 |   expect(mock).toHaveBeenCalledWith(flush());
  76 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
> 77 |   expect(mock).toHaveBeenCalledWith(initialPublish(initial));
     |  ^ Duplicate Assert
  78 |   expect(mock).toHaveBeenCalledTimes(4);
  79 |   expect(store.getState().phase).toBe('DRAGGING');
  80 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/validate-indexes.spec.js,Duplicate Assert,"{'line': 78, 'column': 2, 'index': 2585}","  76 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
  77 |   expect(mock).toHaveBeenCalledWith(initialPublish(initial));
> 78 |   expect(mock).toHaveBeenCalledTimes(4);
     |  ^ Duplicate Assert
  79 |   expect(store.getState().phase).toBe('DRAGGING');
  80 |
  81 |   // a warning is logged",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/validate-indexes.spec.js,Duplicate Assert,"{'line': 125, 'column': 2, 'index': 4014}","  123 |   // first lift is preparing
  124 |   store.dispatch(lift(liftArgs));
> 125 |   expect(mock).toHaveBeenCalledWith(lift(liftArgs));
      |  ^ Duplicate Assert
  126 |   expect(mock).toHaveBeenCalledWith(flush());
  127 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
  128 |   expect(mock).toHaveBeenCalledWith(initialPublish(initial));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/validate-indexes.spec.js,Duplicate Assert,"{'line': 126, 'column': 2, 'index': 4067}","  124 |   store.dispatch(lift(liftArgs));
  125 |   expect(mock).toHaveBeenCalledWith(lift(liftArgs));
> 126 |   expect(mock).toHaveBeenCalledWith(flush());
      |  ^ Duplicate Assert
  127 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
  128 |   expect(mock).toHaveBeenCalledWith(initialPublish(initial));
  129 |   expect(mock).toHaveBeenCalledTimes(4);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/validate-indexes.spec.js,Duplicate Assert,"{'line': 127, 'column': 2, 'index': 4113}","  125 |   expect(mock).toHaveBeenCalledWith(lift(liftArgs));
  126 |   expect(mock).toHaveBeenCalledWith(flush());
> 127 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
      |  ^ Duplicate Assert
  128 |   expect(mock).toHaveBeenCalledWith(initialPublish(initial));
  129 |   expect(mock).toHaveBeenCalledTimes(4);
  130 |   expect(store.getState().phase).toBe('DRAGGING');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/validate-indexes.spec.js,Duplicate Assert,"{'line': 128, 'column': 2, 'index': 4191}","  126 |   expect(mock).toHaveBeenCalledWith(flush());
  127 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
> 128 |   expect(mock).toHaveBeenCalledWith(initialPublish(initial));
      |  ^ Duplicate Assert
  129 |   expect(mock).toHaveBeenCalledTimes(4);
  130 |   expect(store.getState().phase).toBe('DRAGGING');
  131 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/validate-indexes.spec.js,Duplicate Assert,"{'line': 129, 'column': 2, 'index': 4253}","  127 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
  128 |   expect(mock).toHaveBeenCalledWith(initialPublish(initial));
> 129 |   expect(mock).toHaveBeenCalledTimes(4);
      |  ^ Duplicate Assert
  130 |   expect(store.getState().phase).toBe('DRAGGING');
  131 |
  132 |   // a warning is logged",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/style.spec.js,Conditional Test Logic,"{'line': 47, 'column': 21, 'index': 1435}","  45 |
  46 | it('should use the resting styles when a drop completes', () => {
> 47 |   ['DROP', 'CANCEL'].forEach((reason: DropReason) => {
     |                     ^ Conditional Test Logic
  48 |     const marshal: StyleMarshal = getMarshalStub();
  49 |     const store: Store = createStore(middleware(marshal));
  50 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/style.spec.js,Duplicate Assert,"{'line': 53, 'column': 4, 'index': 1642}","  51 |     store.dispatch(initialPublish(initialPublishArgs));
  52 |
> 53 |     expect(marshal.resting).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  54 |     store.dispatch(completeDrop(getCompletedArgs(reason)));
  55 |
  56 |     expect(marshal.resting).toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/style.spec.js,Duplicate Assert,"{'line': 56, 'column': 4, 'index': 1755}","  54 |     store.dispatch(completeDrop(getCompletedArgs(reason)));
  55 |
> 56 |     expect(marshal.resting).toHaveBeenCalled();
     |    ^ Duplicate Assert
  57 |   });
  58 | });
  59 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/style.spec.js,Duplicate Assert,"{'line': 66, 'column': 2, 'index': 2033}","  64 |   store.dispatch(initialPublish(initialPublishArgs));
  65 |
> 66 |   expect(marshal.resting).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  67 |   store.dispatch(flush());
  68 |
  69 |   expect(marshal.resting).toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/style.spec.js,Duplicate Assert,"{'line': 69, 'column': 2, 'index': 2111}","  67 |   store.dispatch(flush());
  68 |
> 69 |   expect(marshal.resting).toHaveBeenCalled();
     |  ^ Duplicate Assert
  70 | });
  71 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/pending-drop.spec.js,Duplicate Assert,"{'line': 45, 'column': 2, 'index': 1400}","  43 |   store.dispatch(publishWhileDragging(publishAdditionArgs));
  44 |
> 45 |   expect(mock).toHaveBeenCalledWith(drop({ reason: 'DROP' }));
     |  ^ Duplicate Assert
  46 |
  47 |   expect(mock).toHaveBeenCalledWith(
  48 |     // $ExpectError - this calculation is not completed by this module and it is non trival",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/pending-drop.spec.js,Duplicate Assert,"{'line': 47, 'column': 2, 'index': 1464}","  45 |   expect(mock).toHaveBeenCalledWith(drop({ reason: 'DROP' }));
  46 |
> 47 |   expect(mock).toHaveBeenCalledWith(
     |  ^ Duplicate Assert
  48 |     // $ExpectError - this calculation is not completed by this module and it is non trival
  49 |     completeDrop({
  50 |       completed: expect.any(Object),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/pending-drop.spec.js,Duplicate Assert,"{'line': 53, 'column': 2, 'index': 1662}","  51 |     }),
  52 |   );
> 53 |   expect(mock).toHaveBeenCalledTimes(3);
     |  ^ Duplicate Assert
  54 |   expect(store.getState().phase).toBe('IDLE');
  55 | });
  56 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/pending-drop.spec.js,Duplicate Assert,"{'line': 72, 'column': 2, 'index': 2189}","  70 |   store.dispatch(publishWhileDragging(publishAdditionArgs));
  71 |
> 72 |   expect(mock).toHaveBeenCalledWith(publishWhileDragging(publishAdditionArgs));
     |  ^ Duplicate Assert
  73 |   expect(mock).toHaveBeenCalledTimes(1);
  74 | });
  75 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/pending-drop.spec.js,Duplicate Assert,"{'line': 73, 'column': 2, 'index': 2269}","  71 |
  72 |   expect(mock).toHaveBeenCalledWith(publishWhileDragging(publishAdditionArgs));
> 73 |   expect(mock).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  74 | });
  75 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/lift.spec.js,Duplicate Assert,"{'line': 84, 'column': 2, 'index': 2447}","  82 |   // start a drag
  83 |   store.dispatch(initialPublish(initialPublishArgs));
> 84 |   expect(store.getState().phase).toBe('DRAGGING');
     |  ^ Duplicate Assert
  85 |
  86 |   const completed: CompletedDrag = getCompletedArgs('DROP').completed;
  87 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/lift.spec.js,Duplicate Assert,"{'line': 95, 'column': 2, 'index': 2744}","  93 |   };
  94 |   store.dispatch(animateDrop(args));
> 95 |   expect(store.getState().phase).toBe('DROP_ANIMATING');
     |  ^ Duplicate Assert
  96 |
  97 |   // while drop animating a lift occurs
  98 |   mock.mockReset();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/lift.spec.js,Duplicate Assert,"{'line': 100, 'column': 2, 'index': 2896}","   98 |   mock.mockReset();
   99 |   store.dispatch(lift(liftArgs));
> 100 |   expect(mock).toHaveBeenCalledWith(lift(liftArgs));
      |  ^ Duplicate Assert
  101 |   // the previous drag is flushed
  102 |   expect(mock).toHaveBeenCalledWith(completeDrop({ completed }));
  103 |   // any animations are flushed",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/lift.spec.js,Duplicate Assert,"{'line': 102, 'column': 2, 'index': 2983}","  100 |   expect(mock).toHaveBeenCalledWith(lift(liftArgs));
  101 |   // the previous drag is flushed
> 102 |   expect(mock).toHaveBeenCalledWith(completeDrop({ completed }));
      |  ^ Duplicate Assert
  103 |   // any animations are flushed
  104 |   expect(mock).toHaveBeenCalledWith(flush());
  105 |   // a before capture is fired",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/lift.spec.js,Duplicate Assert,"{'line': 104, 'column': 2, 'index': 3081}","  102 |   expect(mock).toHaveBeenCalledWith(completeDrop({ completed }));
  103 |   // any animations are flushed
> 104 |   expect(mock).toHaveBeenCalledWith(flush());
      |  ^ Duplicate Assert
  105 |   // a before capture is fired
  106 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
  107 |   // the new lift continues",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/lift.spec.js,Duplicate Assert,"{'line': 106, 'column': 2, 'index': 3158}","  104 |   expect(mock).toHaveBeenCalledWith(flush());
  105 |   // a before capture is fired
> 106 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
      |  ^ Duplicate Assert
  107 |   // the new lift continues
  108 |   expect(mock).toHaveBeenCalledTimes(5);
  109 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/lift.spec.js,Duplicate Assert,"{'line': 108, 'column': 2, 'index': 3264}","  106 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
  107 |   // the new lift continues
> 108 |   expect(mock).toHaveBeenCalledTimes(5);
      |  ^ Duplicate Assert
  109 | });
  110 |
  111 | it('should publish the initial dimensions when lifting', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/lift.spec.js,Duplicate Assert,"{'line': 124, 'column': 2, 'index': 3638}","  122 |   // first lift is preparing
  123 |   store.dispatch(lift(liftArgs));
> 124 |   expect(mock).toHaveBeenCalledWith(lift(liftArgs));
      |  ^ Duplicate Assert
  125 |   // last drag flushed
  126 |   expect(mock).toHaveBeenCalledWith(flush());
  127 |   expect(mock).toHaveBeenCalledWith(initialPublish(initialPublishArgs));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/lift.spec.js,Duplicate Assert,"{'line': 126, 'column': 2, 'index': 3714}","  124 |   expect(mock).toHaveBeenCalledWith(lift(liftArgs));
  125 |   // last drag flushed
> 126 |   expect(mock).toHaveBeenCalledWith(flush());
      |  ^ Duplicate Assert
  127 |   expect(mock).toHaveBeenCalledWith(initialPublish(initialPublishArgs));
  128 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
  129 |   expect(mock).toHaveBeenCalledTimes(4);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/lift.spec.js,Duplicate Assert,"{'line': 127, 'column': 2, 'index': 3760}","  125 |   // last drag flushed
  126 |   expect(mock).toHaveBeenCalledWith(flush());
> 127 |   expect(mock).toHaveBeenCalledWith(initialPublish(initialPublishArgs));
      |  ^ Duplicate Assert
  128 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
  129 |   expect(mock).toHaveBeenCalledTimes(4);
  130 |   expect(store.getState().phase).toBe('DRAGGING');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/lift.spec.js,Duplicate Assert,"{'line': 128, 'column': 2, 'index': 3833}","  126 |   expect(mock).toHaveBeenCalledWith(flush());
  127 |   expect(mock).toHaveBeenCalledWith(initialPublish(initialPublishArgs));
> 128 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
      |  ^ Duplicate Assert
  129 |   expect(mock).toHaveBeenCalledTimes(4);
  130 |   expect(store.getState().phase).toBe('DRAGGING');
  131 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/lift.spec.js,Duplicate Assert,"{'line': 129, 'column': 2, 'index': 3911}","  127 |   expect(mock).toHaveBeenCalledWith(initialPublish(initialPublishArgs));
  128 |   expect(mock).toHaveBeenCalledWith(beforeInitialCapture(beforeCaptureArgs));
> 129 |   expect(mock).toHaveBeenCalledTimes(4);
      |  ^ Duplicate Assert
  130 |   expect(store.getState().phase).toBe('DRAGGING');
  131 | });
  132 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/dimension-marshal-stopper.spec.js,Duplicate Assert,"{'line': 35, 'column': 2, 'index': 1038}","  33 |   store.dispatch(initialPublish(initialPublishArgs));
  34 |
> 35 |   expect(stopPublishing).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  36 |   store.dispatch(flush());
  37 |   expect(stopPublishing).toHaveBeenCalledTimes(1);
  38 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/dimension-marshal-stopper.spec.js,Duplicate Assert,"{'line': 37, 'column': 2, 'index': 1114}","  35 |   expect(stopPublishing).not.toHaveBeenCalled();
  36 |   store.dispatch(flush());
> 37 |   expect(stopPublishing).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  38 | });
  39 |
  40 | it('should not stop a collection if a drop is pending', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/dimension-marshal-stopper.spec.js,Duplicate Assert,"{'line': 49, 'column': 2, 'index': 1479}","  47 |
  48 |   store.dispatch(initialPublish(initialPublishArgs));
> 49 |   expect(store.getState().phase).toBe('DRAGGING');
     |  ^ Duplicate Assert
  50 |   store.dispatch(collectionStarting());
  51 |   expect(store.getState().phase).toBe('COLLECTING');
  52 |   expect(stopPublishing).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/dimension-marshal-stopper.spec.js,Duplicate Assert,"{'line': 51, 'column': 2, 'index': 1570}","  49 |   expect(store.getState().phase).toBe('DRAGGING');
  50 |   store.dispatch(collectionStarting());
> 51 |   expect(store.getState().phase).toBe('COLLECTING');
     |  ^ Duplicate Assert
  52 |   expect(stopPublishing).not.toHaveBeenCalled();
  53 |
  54 |   // dropping",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/dimension-marshal-stopper.spec.js,Duplicate Assert,"{'line': 52, 'column': 2, 'index': 1623}","  50 |   store.dispatch(collectionStarting());
  51 |   expect(store.getState().phase).toBe('COLLECTING');
> 52 |   expect(stopPublishing).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  53 |
  54 |   // dropping
  55 |   store.dispatch(drop({ reason: 'DROP' }));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/dimension-marshal-stopper.spec.js,Duplicate Assert,"{'line': 52, 'column': 2, 'index': 1623}","  50 |   store.dispatch(collectionStarting());
  51 |   expect(store.getState().phase).toBe('COLLECTING');
> 52 |   expect(stopPublishing).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  53 |
  54 |   // dropping
  55 |   store.dispatch(drop({ reason: 'DROP' }));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/dimension-marshal-stopper.spec.js,Duplicate Assert,"{'line': 56, 'column': 2, 'index': 1731}","  54 |   // dropping
  55 |   store.dispatch(drop({ reason: 'DROP' }));
> 56 |   expect(store.getState().phase).toBe('DROP_PENDING');
     |  ^ Duplicate Assert
  57 |   expect(stopPublishing).not.toHaveBeenCalled();
  58 | });
  59 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/dimension-marshal-stopper.spec.js,Duplicate Assert,"{'line': 57, 'column': 2, 'index': 1786}","  55 |   store.dispatch(drop({ reason: 'DROP' }));
  56 |   expect(store.getState().phase).toBe('DROP_PENDING');
> 57 |   expect(stopPublishing).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  58 | });
  59 |
  60 | it('should stop a collection if a drag is complete', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/dimension-marshal-stopper.spec.js,Duplicate Assert,"{'line': 57, 'column': 2, 'index': 1786}","  55 |   store.dispatch(drop({ reason: 'DROP' }));
  56 |   expect(store.getState().phase).toBe('DROP_PENDING');
> 57 |   expect(stopPublishing).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  58 | });
  59 |
  60 | it('should stop a collection if a drag is complete', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/dimension-marshal-stopper.spec.js,Duplicate Assert,"{'line': 70, 'column': 2, 'index': 2197}","  68 |   store.dispatch(initialPublish(initialPublishArgs));
  69 |   expect(store.getState().phase).toBe('DRAGGING');
> 70 |   expect(stopPublishing).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  71 |
  72 |   // complete drop
  73 |   store.dispatch(completeDrop(getCompletedArgs('DROP')));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/dimension-marshal-stopper.spec.js,Duplicate Assert,"{'line': 75, 'column': 2, 'index': 2325}","  73 |   store.dispatch(completeDrop(getCompletedArgs('DROP')));
  74 |
> 75 |   expect(stopPublishing).toHaveBeenCalled();
     |  ^ Duplicate Assert
  76 | });
  77 |
  78 | it('should stop a collection if a drop animation starts', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/dimension-marshal-stopper.spec.js,Duplicate Assert,"{'line': 88, 'column': 2, 'index': 2737}","  86 |   store.dispatch(initialPublish(initialPublishArgs));
  87 |   expect(store.getState().phase).toBe('DRAGGING');
> 88 |   expect(stopPublishing).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  89 |
  90 |   store.dispatch(animateDrop(userCancelArgs));
  91 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/dimension-marshal-stopper.spec.js,Duplicate Assert,"{'line': 92, 'column': 2, 'index': 2835}","  90 |   store.dispatch(animateDrop(userCancelArgs));
  91 |
> 92 |   expect(stopPublishing).toHaveBeenCalled();
     |  ^ Duplicate Assert
  93 | });
  94 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/auto-scroll.spec.js,Duplicate Assert,"{'line': 55, 'column': 2, 'index': 1625}","  53 |   expect(scroller.start).toHaveBeenCalledWith(store.getState());
  54 |
> 55 |   expect(scroller.scroll).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  56 |   store.dispatch(moveDown());
  57 |   expect(scroller.scroll).toHaveBeenCalledWith(store.getState());
  58 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/auto-scroll.spec.js,Duplicate Assert,"{'line': 57, 'column': 2, 'index': 1705}","  55 |   expect(scroller.scroll).not.toHaveBeenCalled();
  56 |   store.dispatch(moveDown());
> 57 |   expect(scroller.scroll).toHaveBeenCalledWith(store.getState());
     |  ^ Duplicate Assert
  58 | });
  59 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/update.spec.js,Duplicate Assert,"{'line': 34, 'column': 2, 'index': 1163}","  32 |   start(store.dispatch);
  33 |   expect(responders.onDragStart).toHaveBeenCalledTimes(1);
> 34 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  35 |
  36 |   // Okay let's move it
  37 |   store.dispatch(moveDown());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/update.spec.js,Duplicate Assert,"{'line': 34, 'column': 2, 'index': 1163}","  32 |   start(store.dispatch);
  33 |   expect(responders.onDragStart).toHaveBeenCalledTimes(1);
> 34 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  35 |
  36 |   // Okay let's move it
  37 |   store.dispatch(moveDown());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/update.spec.js,Duplicate Assert,"{'line': 39, 'column': 2, 'index': 1309}","  37 |   store.dispatch(moveDown());
  38 |   // not called until next cycle
> 39 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  40 |
  41 |   jest.runOnlyPendingTimers();
  42 |   const update: DragUpdate = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/update.spec.js,Duplicate Assert,"{'line': 39, 'column': 2, 'index': 1309}","  37 |   store.dispatch(moveDown());
  38 |   // not called until next cycle
> 39 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  40 |
  41 |   jest.runOnlyPendingTimers();
  42 |   const update: DragUpdate = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/update.spec.js,Duplicate Assert,"{'line': 50, 'column': 2, 'index': 1626}","  48 |     },
  49 |   };
> 50 |   expect(responders.onDragUpdate).toHaveBeenCalledWith(
     |  ^ Duplicate Assert
  51 |     update,
  52 |     expect.any(Object),
  53 |   );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/update.spec.js,Duplicate Assert,"{'line': 65, 'column': 2, 'index': 2100}","  63 |   // onDragUpdate not called yet
  64 |   jest.runOnlyPendingTimers();
> 65 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  66 |
  67 |   // A movement to the same index is not causing an update
  68 |   const moveArgs: MoveArgs = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/update.spec.js,Duplicate Assert,"{'line': 65, 'column': 2, 'index': 2100}","  63 |   // onDragUpdate not called yet
  64 |   jest.runOnlyPendingTimers();
> 65 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  66 |
  67 |   // A movement to the same index is not causing an update
  68 |   const moveArgs: MoveArgs = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/update.spec.js,Duplicate Assert,"{'line': 76, 'column': 2, 'index': 2446}","  74 |   // update not called after flushing
  75 |   jest.runOnlyPendingTimers();
> 76 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  77 |
  78 |   // Triggering an actual movement
  79 |   store.dispatch(moveDown());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/update.spec.js,Duplicate Assert,"{'line': 76, 'column': 2, 'index': 2446}","  74 |   // update not called after flushing
  75 |   jest.runOnlyPendingTimers();
> 76 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  77 |
  78 |   // Triggering an actual movement
  79 |   store.dispatch(moveDown());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/update.spec.js,Duplicate Assert,"{'line': 81, 'column': 2, 'index': 2601}","  79 |   store.dispatch(moveDown());
  80 |   jest.runOnlyPendingTimers();
> 81 |   expect(responders.onDragUpdate).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  82 |
  83 |   const state: State = store.getState();
  84 |   invariant(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/update.spec.js,Duplicate Assert,"{'line': 97, 'column': 2, 'index': 3008}","  95 |
  96 |   jest.runOnlyPendingTimers();
> 97 |   expect(responders.onDragUpdate).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  98 | });
  99 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/start.spec.js,Duplicate Assert,"{'line': 23, 'column': 2, 'index': 945}","  21 |
  22 |   // prepare step should not trigger responder
> 23 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  24 |
  25 |   // first initial publish
  26 |   store.dispatch(initialPublish(initialPublishArgs));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/start.spec.js,Duplicate Assert,"{'line': 23, 'column': 2, 'index': 945}","  21 |
  22 |   // prepare step should not trigger responder
> 23 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  24 |
  25 |   // first initial publish
  26 |   store.dispatch(initialPublish(initialPublishArgs));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/start.spec.js,Duplicate Assert,"{'line': 27, 'column': 2, 'index': 1084}","  25 |   // first initial publish
  26 |   store.dispatch(initialPublish(initialPublishArgs));
> 27 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  28 |
  29 |   // flushing onDragStart
  30 |   jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/start.spec.js,Duplicate Assert,"{'line': 27, 'column': 2, 'index': 1084}","  25 |   // first initial publish
  26 |   store.dispatch(initialPublish(initialPublishArgs));
> 27 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  28 |
  29 |   // flushing onDragStart
  30 |   jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/start.spec.js,Duplicate Assert,"{'line': 31, 'column': 2, 'index': 1199}","  29 |   // flushing onDragStart
  30 |   jest.runOnlyPendingTimers();
> 31 |   expect(responders.onDragStart).toHaveBeenCalledWith(
     |  ^ Duplicate Assert
  32 |     getDragStart(),
  33 |     expect.any(Object),
  34 |   );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/start.spec.js,Eager Test,"{'line': 65, 'column': 2, 'index': 2329}","  63 |
  64 |   // checking the order
> 65 |   invariant(onBeforeDragStartCalled);
     |  ^ Eager Test
  66 |   invariant(mockCalled);
  67 |   invariant(onDragStartCalled);
  68 |   expect(mock).toHaveBeenCalledTimes(1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/start.spec.js,Eager Test,"{'line': 66, 'column': 2, 'index': 2367}","  64 |   // checking the order
  65 |   invariant(onBeforeDragStartCalled);
> 66 |   invariant(mockCalled);
     |  ^ Eager Test
  67 |   invariant(onDragStartCalled);
  68 |   expect(mock).toHaveBeenCalledTimes(1);
  69 |   expect(onBeforeDragStartCalled).toBeLessThan(mockCalled);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/start.spec.js,Eager Test,"{'line': 67, 'column': 2, 'index': 2392}","  65 |   invariant(onBeforeDragStartCalled);
  66 |   invariant(mockCalled);
> 67 |   invariant(onDragStartCalled);
     |  ^ Eager Test
  68 |   expect(mock).toHaveBeenCalledTimes(1);
  69 |   expect(onBeforeDragStartCalled).toBeLessThan(mockCalled);
  70 |   expect(mockCalled).toBeLessThan(onDragStartCalled);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/repeated-use.spec.js,Duplicate Assert,"{'line': 32, 'column': 4, 'index': 972}","  30 |     store.dispatch(initialPublish(initialPublishArgs));
  31 |     jest.runOnlyPendingTimers();
> 32 |     expect(responders.onDragStart).toHaveBeenCalledWith(
     |    ^ Duplicate Assert
  33 |       getDragStart(),
  34 |       expect.any(Object),
  35 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/repeated-use.spec.js,Duplicate Assert,"{'line': 36, 'column': 4, 'index': 1084}","  34 |       expect.any(Object),
  35 |     );
> 36 |     expect(responders.onDragStart).toHaveBeenCalledTimes(1);
     |    ^ Duplicate Assert
  37 |
  38 |     // update
  39 |     const update: DragUpdate = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/repeated-use.spec.js,Duplicate Assert,"{'line': 50, 'column': 4, 'index': 1496}","  48 |     // flush responder call
  49 |     jest.runOnlyPendingTimers();
> 50 |     expect(responders.onDragUpdate).toHaveBeenCalledWith(
     |    ^ Duplicate Assert
  51 |       update,
  52 |       expect.any(Object),
  53 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/repeated-use.spec.js,Duplicate Assert,"{'line': 54, 'column': 4, 'index': 1601}","  52 |       expect.any(Object),
  53 |     );
> 54 |     expect(responders.onDragUpdate).toHaveBeenCalledTimes(1);
     |    ^ Duplicate Assert
  55 |
  56 |     // drop
  57 |     const result: DropResult = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/repeated-use.spec.js,Duplicate Assert,"{'line': 66, 'column': 4, 'index': 1882}","  64 |       }),
  65 |     );
> 66 |     expect(responders.onDragEnd).toHaveBeenCalledWith(
     |    ^ Duplicate Assert
  67 |       result,
  68 |       expect.any(Object),
  69 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/repeated-use.spec.js,Duplicate Assert,"{'line': 70, 'column': 4, 'index': 1984}","  68 |       expect.any(Object),
  69 |     );
> 70 |     expect(responders.onDragEnd).toHaveBeenCalledTimes(1);
     |    ^ Duplicate Assert
  71 |
  72 |     // cleanup
  73 |     store.dispatch(flush());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 37, 'column': 2, 'index': 1123}","  35 |
  36 |   store.dispatch(initialPublish(initialPublishArgs));
> 37 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  38 |
  39 |   jest.runOnlyPendingTimers();
  40 |   expect(responders.onDragStart).toHaveBeenCalledTimes(1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 40, 'column': 2, 'index': 1212}","  38 |
  39 |   jest.runOnlyPendingTimers();
> 40 |   expect(responders.onDragStart).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  41 | });
  42 |
  43 | it('should queue a drag start if an action comes in while the timeout is pending', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 48, 'column': 2, 'index': 1553}","  46 |
  47 |   store.dispatch(initialPublish(initialPublishArgs));
> 48 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  49 |
  50 |   store.dispatch(moveDown());
  51 |   expect(responders.onDragStart).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 48, 'column': 2, 'index': 1553}","  46 |
  47 |   store.dispatch(initialPublish(initialPublishArgs));
> 48 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  49 |
  50 |   store.dispatch(moveDown());
  51 |   expect(responders.onDragStart).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 51, 'column': 2, 'index': 1641}","  49 |
  50 |   store.dispatch(moveDown());
> 51 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  52 |
  53 |   jest.runOnlyPendingTimers();
  54 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 51, 'column': 2, 'index': 1641}","  49 |
  50 |   store.dispatch(moveDown());
> 51 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  52 |
  53 |   jest.runOnlyPendingTimers();
  54 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 55, 'column': 2, 'index': 1731}","  53 |   jest.runOnlyPendingTimers();
  54 |
> 55 |   expect(responders.onDragStart).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  56 |   expect(responders.onDragUpdate).toHaveBeenCalledTimes(1);
  57 | });
  58 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 64, 'column': 2, 'index': 2108}","  62 |
  63 |   store.dispatch(initialPublish(initialPublishArgs));
> 64 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  65 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
  66 |
  67 |   store.dispatch(moveDown());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 64, 'column': 2, 'index': 2108}","  62 |
  63 |   store.dispatch(initialPublish(initialPublishArgs));
> 64 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  65 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
  66 |
  67 |   store.dispatch(moveDown());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 65, 'column': 2, 'index': 2165}","  63 |   store.dispatch(initialPublish(initialPublishArgs));
  64 |   expect(responders.onDragStart).not.toHaveBeenCalled();
> 65 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  66 |
  67 |   store.dispatch(moveDown());
  68 |   expect(responders.onDragStart).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 65, 'column': 2, 'index': 2165}","  63 |   store.dispatch(initialPublish(initialPublishArgs));
  64 |   expect(responders.onDragStart).not.toHaveBeenCalled();
> 65 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  66 |
  67 |   store.dispatch(moveDown());
  68 |   expect(responders.onDragStart).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 68, 'column': 2, 'index': 2254}","  66 |
  67 |   store.dispatch(moveDown());
> 68 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  69 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
  70 |
  71 |   store.dispatch(moveUp());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 68, 'column': 2, 'index': 2254}","  66 |
  67 |   store.dispatch(moveDown());
> 68 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  69 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
  70 |
  71 |   store.dispatch(moveUp());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 69, 'column': 2, 'index': 2311}","  67 |   store.dispatch(moveDown());
  68 |   expect(responders.onDragStart).not.toHaveBeenCalled();
> 69 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  70 |
  71 |   store.dispatch(moveUp());
  72 |   expect(responders.onDragStart).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 69, 'column': 2, 'index': 2311}","  67 |   store.dispatch(moveDown());
  68 |   expect(responders.onDragStart).not.toHaveBeenCalled();
> 69 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  70 |
  71 |   store.dispatch(moveUp());
  72 |   expect(responders.onDragStart).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 72, 'column': 2, 'index': 2398}","  70 |
  71 |   store.dispatch(moveUp());
> 72 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  73 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
  74 |
  75 |   store.dispatch(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 72, 'column': 2, 'index': 2398}","  70 |
  71 |   store.dispatch(moveUp());
> 72 |   expect(responders.onDragStart).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  73 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
  74 |
  75 |   store.dispatch(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 73, 'column': 2, 'index': 2455}","  71 |   store.dispatch(moveUp());
  72 |   expect(responders.onDragStart).not.toHaveBeenCalled();
> 73 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  74 |
  75 |   store.dispatch(
  76 |     completeDrop({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 73, 'column': 2, 'index': 2455}","  71 |   store.dispatch(moveUp());
  72 |   expect(responders.onDragStart).not.toHaveBeenCalled();
> 73 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  74 |
  75 |   store.dispatch(
  76 |     completeDrop({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 80, 'column': 2, 'index': 2631}","  78 |     }),
  79 |   );
> 80 |   expect(responders.onDragStart).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  81 |   expect(responders.onDragUpdate).toHaveBeenCalledTimes(2);
  82 |   expect(responders.onDragEnd).toHaveBeenCalledWith(result, expect.any(Object));
  83 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 81, 'column': 2, 'index': 2690}","  79 |   );
  80 |   expect(responders.onDragStart).toHaveBeenCalledTimes(1);
> 81 |   expect(responders.onDragUpdate).toHaveBeenCalledTimes(2);
     |  ^ Duplicate Assert
  82 |   expect(responders.onDragEnd).toHaveBeenCalledWith(result, expect.any(Object));
  83 | });
  84 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 91, 'column': 4, 'index': 3178}","  89 |     store.dispatch(initialPublish(initialPublishArgs));
  90 |     expect(responders.onBeforeDragStart).toHaveBeenCalled();
> 91 |     expect(responders.onDragStart).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  92 |
  93 |     store.dispatch(moveDown());
  94 |     expect(responders.onDragStart).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 91, 'column': 4, 'index': 3178}","  89 |     store.dispatch(initialPublish(initialPublishArgs));
  90 |     expect(responders.onBeforeDragStart).toHaveBeenCalled();
> 91 |     expect(responders.onDragStart).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  92 |
  93 |     store.dispatch(moveDown());
  94 |     expect(responders.onDragStart).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 94, 'column': 4, 'index': 3270}","  92 |
  93 |     store.dispatch(moveDown());
> 94 |     expect(responders.onDragStart).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  95 |     expect(responders.onDragUpdate).not.toHaveBeenCalled();
  96 |
  97 |     store.dispatch(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 94, 'column': 4, 'index': 3270}","  92 |
  93 |     store.dispatch(moveDown());
> 94 |     expect(responders.onDragStart).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  95 |     expect(responders.onDragUpdate).not.toHaveBeenCalled();
  96 |
  97 |     store.dispatch(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 95, 'column': 4, 'index': 3329}","  93 |     store.dispatch(moveDown());
  94 |     expect(responders.onDragStart).not.toHaveBeenCalled();
> 95 |     expect(responders.onDragUpdate).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  96 |
  97 |     store.dispatch(
  98 |       completeDrop({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 102, 'column': 4, 'index': 3517}","  100 |       }),
  101 |     );
> 102 |     expect(responders.onDragStart).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  103 |     expect(responders.onDragUpdate).toHaveBeenCalledTimes(1);
  104 |     expect(responders.onDragEnd).toHaveBeenCalledWith(
  105 |       result,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/flushing.spec.js,Duplicate Assert,"{'line': 103, 'column': 4, 'index': 3578}","  101 |     );
  102 |     expect(responders.onDragStart).toHaveBeenCalledTimes(1);
> 103 |     expect(responders.onDragUpdate).toHaveBeenCalledTimes(1);
      |    ^ Duplicate Assert
  104 |     expect(responders.onDragEnd).toHaveBeenCalledWith(
  105 |       result,
  106 |       expect.any(Object),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/drop.spec.js,Eager Test,"{'line': 81, 'column': 2, 'index': 2551}","  79 |
  80 |   const state: State = store.getState();
> 81 |   invariant(state.phase === 'DRAGGING');
     |  ^ Eager Test
  82 |   const destination: ?DraggableLocation = tryGetDestination(state.impact);
  83 |   invariant(destination);
  84 |   const fakeResult: DropResult = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/drop.spec.js,Eager Test,"{'line': 82, 'column': 42, 'index': 2632}","  80 |   const state: State = store.getState();
  81 |   invariant(state.phase === 'DRAGGING');
> 82 |   const destination: ?DraggableLocation = tryGetDestination(state.impact);
     |                                          ^ Eager Test
  83 |   invariant(destination);
  84 |   const fakeResult: DropResult = {
  85 |     ...getDragStart(),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/drop.spec.js,Eager Test,"{'line': 83, 'column': 2, 'index': 2667}","  81 |   invariant(state.phase === 'DRAGGING');
  82 |   const destination: ?DraggableLocation = tryGetDestination(state.impact);
> 83 |   invariant(destination);
     |  ^ Eager Test
  84 |   const fakeResult: DropResult = {
  85 |     ...getDragStart(),
  86 |     // ensuring the destination is different to the current impact to ensure",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Conditional Test Logic,"{'line': 143, 'column': 6, 'index': 3774}","  141 |     it('should announce with the default message if no responder is provided', () => {
  142 |       // This test is not relevant for onDragEnd as it must always be provided
> 143 |       if (current.responder === 'onDragEnd') {
      |      ^ Conditional Test Logic
  144 |         expect(true).toBe(true);
  145 |         return;
  146 |       }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Duplicate Assert,"{'line': 163, 'column': 10, 'index': 4524}","  161 |           announce.mockReset();
  162 |           provided.announce('hello');
> 163 |           expect(announce).toHaveBeenCalledWith('hello');
      |          ^ Duplicate Assert
  164 |           // asserting there was no double call
  165 |           expect(announce).toHaveBeenCalledTimes(1);
  166 |         },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Duplicate Assert,"{'line': 165, 'column': 10, 'index': 4630}","  163 |           expect(announce).toHaveBeenCalledWith('hello');
  164 |           // asserting there was no double call
> 165 |           expect(announce).toHaveBeenCalledTimes(1);
      |          ^ Duplicate Assert
  166 |         },
  167 |       );
  168 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Duplicate Assert,"{'line': 186, 'column': 6, 'index': 5208}","  184 |
  185 |       // We did not announce so it would have been called with the default message
> 186 |       expect(announce).toHaveBeenCalledWith(current.defaultMessage);
      |      ^ Duplicate Assert
  187 |       expect(announce).toHaveBeenCalledTimes(1);
  188 |       expect(warn).not.toHaveBeenCalled();
  189 |       announce.mockReset();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Duplicate Assert,"{'line': 187, 'column': 6, 'index': 5277}","  185 |       // We did not announce so it would have been called with the default message
  186 |       expect(announce).toHaveBeenCalledWith(current.defaultMessage);
> 187 |       expect(announce).toHaveBeenCalledTimes(1);
      |      ^ Duplicate Assert
  188 |       expect(warn).not.toHaveBeenCalled();
  189 |       announce.mockReset();
  190 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Duplicate Assert,"{'line': 188, 'column': 6, 'index': 5326}","  186 |       expect(announce).toHaveBeenCalledWith(current.defaultMessage);
  187 |       expect(announce).toHaveBeenCalledTimes(1);
> 188 |       expect(warn).not.toHaveBeenCalled();
      |      ^ Duplicate Assert
  189 |       announce.mockReset();
  190 |
  191 |       // perform an async message",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Duplicate Assert,"{'line': 195, 'column': 6, 'index': 5528}","  193 |       jest.runOnlyPendingTimers();
  194 |
> 195 |       expect(announce).not.toHaveBeenCalled();
      |      ^ Duplicate Assert
  196 |       expect(warn).toHaveBeenCalled();
  197 |
  198 |       // cleanup",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Duplicate Assert,"{'line': 196, 'column': 6, 'index': 5575}","  194 |
  195 |       expect(announce).not.toHaveBeenCalled();
> 196 |       expect(warn).toHaveBeenCalled();
      |      ^ Duplicate Assert
  197 |
  198 |       // cleanup
  199 |       warn.mockRestore();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Duplicate Assert,"{'line': 216, 'column': 6, 'index': 6115}","  214 |       current.execute(store);
  215 |
> 216 |       expect(announce).toHaveBeenCalledWith('hello');
      |      ^ Duplicate Assert
  217 |       expect(announce).toHaveBeenCalledTimes(1);
  218 |       expect(warn).not.toHaveBeenCalled();
  219 |       announce.mockReset();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Duplicate Assert,"{'line': 217, 'column': 6, 'index': 6169}","  215 |
  216 |       expect(announce).toHaveBeenCalledWith('hello');
> 217 |       expect(announce).toHaveBeenCalledTimes(1);
      |      ^ Duplicate Assert
  218 |       expect(warn).not.toHaveBeenCalled();
  219 |       announce.mockReset();
  220 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Duplicate Assert,"{'line': 218, 'column': 6, 'index': 6218}","  216 |       expect(announce).toHaveBeenCalledWith('hello');
  217 |       expect(announce).toHaveBeenCalledTimes(1);
> 218 |       expect(warn).not.toHaveBeenCalled();
      |      ^ Duplicate Assert
  219 |       announce.mockReset();
  220 |
  221 |       // perform another announcement",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Duplicate Assert,"{'line': 225, 'column': 6, 'index': 6419}","  223 |       provided.announce('another one');
  224 |
> 225 |       expect(announce).not.toHaveBeenCalled();
      |      ^ Duplicate Assert
  226 |       expect(warn).toHaveBeenCalled();
  227 |
  228 |       warn.mockRestore();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Duplicate Assert,"{'line': 226, 'column': 6, 'index': 6466}","  224 |
  225 |       expect(announce).not.toHaveBeenCalled();
> 226 |       expect(warn).toHaveBeenCalled();
      |      ^ Duplicate Assert
  227 |
  228 |       warn.mockRestore();
  229 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Redundant Assertion,"{'column': 8, 'line': 144}","  142 |       // This test is not relevant for onDragEnd as it must always be provided
  143 |       if (current.responder === 'onDragEnd') {
> 144 |         expect(true).toBe(true);
      |        ^ Redundant Assertion
  145 |         return;
  146 |       }
  147 |       // unsetting responder",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/announcements.spec.js,Sleepy Test,"{'line': 192, 'column': 6, 'index': 5432}","  190 |
  191 |       // perform an async message
> 192 |       setTimeout(() => provided.announce('async message'));
      |      ^ Sleepy Test
  193 |       jest.runOnlyPendingTimers();
  194 |
  195 |       expect(announce).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/abort.spec.js,Duplicate Assert,"{'line': 103, 'column': 2, 'index': 3075}","  101 |     }),
  102 |   );
> 103 |   expect(responders.onDragEnd).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  104 |   // $ExpectError - mock
  105 |   responders.onDragEnd.mockReset();
  106 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/abort.spec.js,Duplicate Assert,"{'line': 109, 'column': 2, 'index': 3232}","  107 |   // abort
  108 |   store.dispatch(flush());
> 109 |   expect(responders.onDragEnd).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  110 | });
  111 |
  112 | it('should publish an on drag end if aborted before the publish of an onDragStart', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/abort.spec.js,Duplicate Assert,"{'line': 120, 'column': 2, 'index': 3643}","  118 |   store.dispatch(initialPublish(initialPublishArgs));
  119 |   // onDragStart not flushed yet
> 120 |   expect(responders.onDragStart).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  121 |
  122 |   // drop
  123 |   const result: DropResult = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/abort.spec.js,Duplicate Assert,"{'line': 137, 'column': 2, 'index': 4056}","  135 |
  136 |   // validation - onDragStart has been flushed
> 137 |   expect(responders.onDragStart).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  138 | });
  139 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/abort.spec.js,Eager Test,"{'line': 59, 'column': 2, 'index': 1878}","  57 |
  58 |   const state: State = store.getState();
> 59 |   invariant(state.phase === 'DRAGGING');
     |  ^ Eager Test
  60 |   // in home location
  61 |   const home: DraggableLocation = {
  62 |     droppableId: initialPublishArgs.critical.droppable.id,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/responders/abort.spec.js,Eager Test,"{'line': 65, 'column': 9, 'index': 2104}","  63 |     index: initialPublishArgs.critical.draggable.index,
  64 |   };
> 65 |   expect(tryGetDestination(state.impact)).toEqual(home);
     |         ^ Eager Test
  66 |
  67 |   store.dispatch(flush());
  68 |   const expected: DropResult = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/timing.spec.js,Duplicate Assert,"{'line': 31, 'column': 2, 'index': 1073}","  29 |   store.dispatch(flush());
  30 |   store.dispatch(initialPublish(initialPublishArgs));
> 31 |   expect(store.getState().phase).toBe('DRAGGING');
     |  ^ Duplicate Assert
  32 |
  33 |   // moving a little bit so that a drop animation will be needed
  34 |   store.dispatch(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/timing.spec.js,Duplicate Assert,"{'line': 41, 'column': 2, 'index': 1348}","  39 |
  40 |   store.dispatch(drop({ reason: 'DROP' }));
> 41 |   expect(store.getState().phase).toBe('DROP_ANIMATING');
     |  ^ Duplicate Assert
  42 |
  43 |   expect(() => store.dispatch(drop({ reason: 'DROP' }))).toThrow();
  44 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/timing.spec.js,Duplicate Assert,"{'line': 51, 'column': 2, 'index': 1693}","  49 |
  50 |   store.dispatch(initialPublish(initialPublishArgs));
> 51 |   expect(store.getState().phase).toBe('DRAGGING');
     |  ^ Duplicate Assert
  52 |   store.dispatch(collectionStarting());
  53 |
  54 |   // now in the bulk collecting phase",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/timing.spec.js,Duplicate Assert,"{'line': 55, 'column': 2, 'index': 1823}","  53 |
  54 |   // now in the bulk collecting phase
> 55 |   expect(store.getState().phase).toBe('COLLECTING');
     |  ^ Duplicate Assert
  56 |   mock.mockReset();
  57 |
  58 |   // drop",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/timing.spec.js,Duplicate Assert,"{'line': 61, 'column': 2, 'index': 1952}","  59 |   store.dispatch(drop({ reason: 'DROP' }));
  60 |
> 61 |   expect(mock).toHaveBeenCalledWith(drop({ reason: 'DROP' }));
     |  ^ Duplicate Assert
  62 |   expect(mock).toHaveBeenCalledWith(dropPending({ reason: 'DROP' }));
  63 |   expect(mock).toHaveBeenCalledTimes(2);
  64 |   expect(store.getState().phase).toBe('DROP_PENDING');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/timing.spec.js,Duplicate Assert,"{'line': 62, 'column': 2, 'index': 2015}","  60 |
  61 |   expect(mock).toHaveBeenCalledWith(drop({ reason: 'DROP' }));
> 62 |   expect(mock).toHaveBeenCalledWith(dropPending({ reason: 'DROP' }));
     |  ^ Duplicate Assert
  63 |   expect(mock).toHaveBeenCalledTimes(2);
  64 |   expect(store.getState().phase).toBe('DROP_PENDING');
  65 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/timing.spec.js,Duplicate Assert,"{'line': 63, 'column': 2, 'index': 2085}","  61 |   expect(mock).toHaveBeenCalledWith(drop({ reason: 'DROP' }));
  62 |   expect(mock).toHaveBeenCalledWith(dropPending({ reason: 'DROP' }));
> 63 |   expect(mock).toHaveBeenCalledTimes(2);
     |  ^ Duplicate Assert
  64 |   expect(store.getState().phase).toBe('DROP_PENDING');
  65 | });
  66 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/timing.spec.js,Duplicate Assert,"{'line': 64, 'column': 2, 'index': 2126}","  62 |   expect(mock).toHaveBeenCalledWith(dropPending({ reason: 'DROP' }));
  63 |   expect(mock).toHaveBeenCalledTimes(2);
> 64 |   expect(store.getState().phase).toBe('DROP_PENDING');
     |  ^ Duplicate Assert
  65 | });
  66 |
  67 | it('should throw if a drop action is fired and there is DROP_PENDING and it is waiting for a publish', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 29, 'column': 2, 'index': 1085}","  27 |   expect(store.getState().phase).toBe('DRAGGING');
  28 |   const initial: State = store.getState();
> 29 |   invariant(initial.phase === 'DRAGGING');
     |  ^ Eager Test
  30 |   invariant(tryGetDestination !== null);
  31 |
  32 |   // no destination",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 30, 'column': 2, 'index': 1128}","  28 |   const initial: State = store.getState();
  29 |   invariant(initial.phase === 'DRAGGING');
> 30 |   invariant(tryGetDestination !== null);
     |  ^ Eager Test
  31 |
  32 |   // no destination
  33 |   store.dispatch(move({ client: { x: 10000, y: 10000 } }));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 36, 'column': 4, 'index': 1301}","  34 |   {
  35 |     const current: State = store.getState();
> 36 |     invariant(current.phase === 'DRAGGING');
     |    ^ Eager Test
  37 |     expect(tryGetDestination(current.impact)).toBe(null);
  38 |   }
  39 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 37, 'column': 11, 'index': 1353}","  35 |     const current: State = store.getState();
  36 |     invariant(current.phase === 'DRAGGING');
> 37 |     expect(tryGetDestination(current.impact)).toBe(null);
     |           ^ Eager Test
  38 |   }
  39 |
  40 |   // drop",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 48, 'column': 9, 'index': 1668}","  46 |
  47 |   // the impact has the home destination for animation
> 48 |   expect(tryGetDestination(completed.impact)).toBe(
     |         ^ Eager Test
  49 |     tryGetDestination(initial.impact),
  50 |   );
  51 |   // but the consumer will be told that there was no destination",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 49, 'column': 4, 'index': 1715}","  47 |   // the impact has the home destination for animation
  48 |   expect(tryGetDestination(completed.impact)).toBe(
> 49 |     tryGetDestination(initial.impact),
     |    ^ Eager Test
  50 |   );
  51 |   // but the consumer will be told that there was no destination
  52 |   expect(completed.result.destination).toBe(null);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 62, 'column': 2, 'index': 2193}","  60 |   expect(store.getState().phase).toBe('DRAGGING');
  61 |   const initial: State = store.getState();
> 62 |   invariant(initial.phase === 'DRAGGING');
     |  ^ Eager Test
  63 |   invariant(tryGetDestination(initial.impact) !== null);
  64 |
  65 |   // cancel",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 63, 'column': 2, 'index': 2236}","  61 |   const initial: State = store.getState();
  62 |   invariant(initial.phase === 'DRAGGING');
> 63 |   invariant(tryGetDestination(initial.impact) !== null);
     |  ^ Eager Test
  64 |
  65 |   // cancel
  66 |   store.dispatch(drop({ reason: 'CANCEL' }));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 63, 'column': 12, 'index': 2246}","  61 |   const initial: State = store.getState();
  62 |   invariant(initial.phase === 'DRAGGING');
> 63 |   invariant(tryGetDestination(initial.impact) !== null);
     |            ^ Eager Test
  64 |
  65 |   // cancel
  66 |   store.dispatch(drop({ reason: 'CANCEL' }));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 73, 'column': 9, 'index': 2559}","  71 |
  72 |   // the impact has the home destination for animation
> 73 |   expect(tryGetDestination(completed.impact)).toBe(
     |         ^ Eager Test
  74 |     tryGetDestination(initial.impact),
  75 |   );
  76 |   // but the consumer will be told that there was no destination",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 74, 'column': 4, 'index': 2606}","  72 |   // the impact has the home destination for animation
  73 |   expect(tryGetDestination(completed.impact)).toBe(
> 74 |     tryGetDestination(initial.impact),
     |    ^ Eager Test
  75 |   );
  76 |   // but the consumer will be told that there was no destination
  77 |   expect(completed.result.destination).toBe(null);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 96, 'column': 2, 'index': 3309}","  94 |   expect(store.getState().phase).toBe('DRAGGING');
  95 |   const initial: State = store.getState();
> 96 |   invariant(initial.phase === 'DRAGGING');
     |  ^ Eager Test
  97 |   invariant(tryGetDestination(initial.impact) !== null);
  98 |
  99 |   // moving onto a combine",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 97, 'column': 2, 'index': 3352}","   95 |   const initial: State = store.getState();
   96 |   invariant(initial.phase === 'DRAGGING');
>  97 |   invariant(tryGetDestination(initial.impact) !== null);
      |  ^ Eager Test
   98 |
   99 |   // moving onto a combine
  100 |   store.dispatch(moveDown());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 97, 'column': 12, 'index': 3362}","   95 |   const initial: State = store.getState();
   96 |   invariant(initial.phase === 'DRAGGING');
>  97 |   invariant(tryGetDestination(initial.impact) !== null);
      |            ^ Eager Test
   98 |
   99 |   // moving onto a combine
  100 |   store.dispatch(moveDown());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 103, 'column': 4, 'index': 3518}","  101 |   {
  102 |     const current: State = store.getState();
> 103 |     invariant(current.phase === 'DRAGGING');
      |    ^ Eager Test
  104 |     expect(tryGetDestination(current.impact)).toBe(null);
  105 |     expect(tryGetCombine(current.impact)).toBeTruthy();
  106 |   }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 104, 'column': 11, 'index': 3570}","  102 |     const current: State = store.getState();
  103 |     invariant(current.phase === 'DRAGGING');
> 104 |     expect(tryGetDestination(current.impact)).toBe(null);
      |           ^ Eager Test
  105 |     expect(tryGetCombine(current.impact)).toBeTruthy();
  106 |   }
  107 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 105, 'column': 11, 'index': 3628}","  103 |     invariant(current.phase === 'DRAGGING');
  104 |     expect(tryGetDestination(current.impact)).toBe(null);
> 105 |     expect(tryGetCombine(current.impact)).toBeTruthy();
      |           ^ Eager Test
  106 |   }
  107 |
  108 |   // drop",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 116, 'column': 9, 'index': 3922}","  114 |
  115 |   // the combine has been removed
> 116 |   expect(tryGetCombine(completed.impact)).toBe(null);
      |         ^ Eager Test
  117 |   // for animation purposes it has a final impact of moving back to the starting position
  118 |   expect(tryGetDestination(completed.impact)).toBe(
  119 |     tryGetDestination(initial.impact),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 118, 'column': 9, 'index': 4066}","  116 |   expect(tryGetCombine(completed.impact)).toBe(null);
  117 |   // for animation purposes it has a final impact of moving back to the starting position
> 118 |   expect(tryGetDestination(completed.impact)).toBe(
      |         ^ Eager Test
  119 |     tryGetDestination(initial.impact),
  120 |   );
  121 |   // the consumer will be told that there was no combine",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Eager Test,"{'line': 119, 'column': 4, 'index': 4113}","  117 |   // for animation purposes it has a final impact of moving back to the starting position
  118 |   expect(tryGetDestination(completed.impact)).toBe(
> 119 |     tryGetDestination(initial.impact),
      |    ^ Eager Test
  120 |   );
  121 |   // the consumer will be told that there was no combine
  122 |   expect(completed.result.combine).toBe(null);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Lazy Test,"{'line': 29, 'column': 2, 'index': 1085}","  27 |   expect(store.getState().phase).toBe('DRAGGING');
  28 |   const initial: State = store.getState();
> 29 |   invariant(initial.phase === 'DRAGGING');
     |  ^ Lazy Test
  30 |   invariant(tryGetDestination !== null);
  31 |
  32 |   // no destination",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Lazy Test,"{'line': 37, 'column': 11, 'index': 1353}","  35 |     const current: State = store.getState();
  36 |     invariant(current.phase === 'DRAGGING');
> 37 |     expect(tryGetDestination(current.impact)).toBe(null);
     |           ^ Lazy Test
  38 |   }
  39 |
  40 |   // drop",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Lazy Test,"{'line': 62, 'column': 2, 'index': 2193}","  60 |   expect(store.getState().phase).toBe('DRAGGING');
  61 |   const initial: State = store.getState();
> 62 |   invariant(initial.phase === 'DRAGGING');
     |  ^ Lazy Test
  63 |   invariant(tryGetDestination(initial.impact) !== null);
  64 |
  65 |   // cancel",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Lazy Test,"{'line': 63, 'column': 12, 'index': 2246}","  61 |   const initial: State = store.getState();
  62 |   invariant(initial.phase === 'DRAGGING');
> 63 |   invariant(tryGetDestination(initial.impact) !== null);
     |            ^ Lazy Test
  64 |
  65 |   // cancel
  66 |   store.dispatch(drop({ reason: 'CANCEL' }));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Lazy Test,"{'line': 96, 'column': 2, 'index': 3309}","  94 |   expect(store.getState().phase).toBe('DRAGGING');
  95 |   const initial: State = store.getState();
> 96 |   invariant(initial.phase === 'DRAGGING');
     |  ^ Lazy Test
  97 |   invariant(tryGetDestination(initial.impact) !== null);
  98 |
  99 |   // moving onto a combine",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/result-impact-mismatch.spec.js,Lazy Test,"{'line': 97, 'column': 12, 'index': 3362}","   95 |   const initial: State = store.getState();
   96 |   invariant(initial.phase === 'DRAGGING');
>  97 |   invariant(tryGetDestination(initial.impact) !== null);
      |            ^ Lazy Test
   98 |
   99 |   // moving onto a combine
  100 |   store.dispatch(moveDown());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/get-drop-duration.spec.js,Duplicate Assert,"{'line': 17, 'column': 2, 'index': 492}","  15 |   });
  16 |
> 17 |   expect(noWhere).toEqual(expect.any(Number));
     |  ^ Duplicate Assert
  18 |   expect(noWhere).toBeLessThan(further);
  19 | });
  20 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/get-drop-duration.spec.js,Duplicate Assert,"{'line': 18, 'column': 2, 'index': 539}","  16 |
  17 |   expect(noWhere).toEqual(expect.any(Number));
> 18 |   expect(noWhere).toBeLessThan(further);
     |  ^ Duplicate Assert
  19 | });
  20 |
  21 | it('should return higher drop times the further away you are', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/drop-position.spec.js,Conditional Test Logic,"{'line': 22, 'column': 23, 'index': 1074}","  20 | import { getForcedDisplacement } from '../../../../util/impact';
  21 |
> 22 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  23 |   describe(`on ${axis.direction} axis`, () => {
  24 |     const preset = getPreset(axis);
  25 |     const { afterCritical, impact: homeImpact } = getLiftEffect({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/drop-position.spec.js,Lazy Test,"{'line': 51, 'column': 19, 'index': 2035}","  49 |       // inHome1 in inHome2 position
  50 |       const pastInHome2: DragImpact = {
> 51 |         displaced: getForcedDisplacement({
     |                   ^ Lazy Test
  52 |           visible: [
  53 |             { dimension: preset.inHome3, shouldAnimate: false },
  54 |             { dimension: preset.inHome4, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/drop-position.spec.js,Lazy Test,"{'line': 95, 'column': 19, 'index': 3425}","  93 |       const mergingWithInHome3: DragImpact = {
  94 |         displacedBy,
> 95 |         displaced: getForcedDisplacement({
     |                   ^ Lazy Test
  96 |           // inHome2 is no longer displaced
  97 |           visible: [
  98 |             { dimension: preset.inHome3, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/drop-impact.spec.js,Lazy Test,"{'line': 80, 'column': 15, 'index': 2313}","  78 |   // inHome1 moved into position of inHome2
  79 |   const lastImpact: DragImpact = {
> 80 |     displaced: getForcedDisplacement({
     |               ^ Lazy Test
  81 |       // initial displacement is not animated
  82 |       visible: [
  83 |         { dimension: preset.inHome3, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/drop-impact.spec.js,Lazy Test,"{'line': 118, 'column': 15, 'index': 3294}","  116 |   // inHome2 has been moved past
  117 |   const lastImpact: DragImpact = {
> 118 |     displaced: getForcedDisplacement({
      |               ^ Lazy Test
  119 |       visible: [
  120 |         // initial displacement is not animated
  121 |         { dimension: preset.inHome3, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/drop-animation-flush-on-scroll-middleware.spec.js,Conditional Test Logic,"{'line': 90, 'column': 4, 'index': 2625}","  88 |     completeDrop(getCompletedArgs('DROP')),
  89 |     dropAnimationFinished(),
> 90 |   ].forEach((action: Action) => {
     |    ^ Conditional Test Logic
  91 |     const mock = jest.fn();
  92 |     const store: Store = getToDropAnimation(mock);
  93 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/drop-animation-flush-on-scroll-middleware.spec.js,Duplicate Assert,"{'line': 60, 'column': 2, 'index': 1767}","  58 |   // waiting for an animation frame before any scroll events would cancel a drag
  59 |   window.dispatchEvent(new Event('scroll'));
> 60 |   expect(mock).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  61 |
  62 |   // after an animation frame, we should be in business
  63 |   requestAnimationFrame.step();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/drop-animation-flush-on-scroll-middleware.spec.js,Duplicate Assert,"{'line': 66, 'column': 2, 'index': 1941}","  64 |   window.dispatchEvent(new Event('scroll'));
  65 |
> 66 |   expect(mock).toHaveBeenCalledWith(dropAnimationFinished());
     |  ^ Duplicate Assert
  67 |   expect(mock).toHaveBeenCalledTimes(1);
  68 | });
  69 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/drop-animation-flush-on-scroll-middleware.spec.js,Duplicate Assert,"{'line': 67, 'column': 2, 'index': 2003}","  65 |
  66 |   expect(mock).toHaveBeenCalledWith(dropAnimationFinished());
> 67 |   expect(mock).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  68 | });
  69 |
  70 | it('should only try to clear once', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/drop-animation-flush-on-scroll-middleware.spec.js,Duplicate Assert,"{'line': 81, 'column': 2, 'index': 2348}","  79 |   window.dispatchEvent(new Event('scroll'));
  80 |
> 81 |   expect(mock).toHaveBeenCalledWith(dropAnimationFinished());
     |  ^ Duplicate Assert
  82 |   expect(mock).toHaveBeenCalledTimes(1);
  83 | });
  84 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/drop-animation-flush-on-scroll-middleware.spec.js,Duplicate Assert,"{'line': 82, 'column': 2, 'index': 2410}","  80 |
  81 |   expect(mock).toHaveBeenCalledWith(dropAnimationFinished());
> 82 |   expect(mock).toHaveBeenCalledTimes(1);
     |  ^ Duplicate Assert
  83 | });
  84 |
  85 | it('should not try to cancel a drop animation if the drop finished', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/drop-animation-finish-middleware.spec.js,Duplicate Assert,"{'line': 52, 'column': 2, 'index': 1568}","  50 |   mock.mockReset();
  51 |   store.dispatch(dropAnimationFinished());
> 52 |   expect(mock).toHaveBeenCalledWith(dropAnimationFinished());
     |  ^ Duplicate Assert
  53 |
  54 |   expect(mock).toHaveBeenCalledWith(completeDrop(getCompletedArgs('DROP')));
  55 |   expect(mock).toHaveBeenCalledTimes(2);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/drop-animation-finish-middleware.spec.js,Duplicate Assert,"{'line': 54, 'column': 2, 'index': 1631}","  52 |   expect(mock).toHaveBeenCalledWith(dropAnimationFinished());
  53 |
> 54 |   expect(mock).toHaveBeenCalledWith(completeDrop(getCompletedArgs('DROP')));
     |  ^ Duplicate Assert
  55 |   expect(mock).toHaveBeenCalledTimes(2);
  56 | });
  57 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/drop-animation-finish-middleware.spec.js,Duplicate Assert,"{'line': 55, 'column': 2, 'index': 1708}","  53 |
  54 |   expect(mock).toHaveBeenCalledWith(completeDrop(getCompletedArgs('DROP')));
> 55 |   expect(mock).toHaveBeenCalledTimes(2);
     |  ^ Duplicate Assert
  56 | });
  57 |
  58 | it('should throw if a drop animation finished action occurs while not in the drop animating phase', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Conditional Test Logic,"{'line': 46, 'column': 19, 'index': 1383}","  44 | import { tryGetCombine } from '../../../../../src/state/get-impact-location';
  45 |
> 46 | ['DROP', 'CANCEL'].forEach((reason: DropReason) => {
     |                   ^ Conditional Test Logic
  47 |   describe(`with drop reason: ${reason}`, () => {
  48 |     it('should fire a complete drop action is no drop animation is required', () => {
  49 |       const mock = jest.fn();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Duplicate Assert,"{'line': 54, 'column': 6, 'index': 1750}","  52 |       store.dispatch(flush());
  53 |       store.dispatch(initialPublish(initialPublishArgs));
> 54 |       expect(store.getState().phase).toBe('DRAGGING');
     |      ^ Duplicate Assert
  55 |
  56 |       // no movement yet
  57 |       mock.mockReset();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Duplicate Assert,"{'line': 60, 'column': 6, 'index': 1896}","  58 |       store.dispatch(drop({ reason }));
  59 |
> 60 |       expect(mock).toHaveBeenCalledWith(drop({ reason }));
     |      ^ Duplicate Assert
  61 |       expect(mock).toHaveBeenCalledWith(completeDrop(getCompletedArgs(reason)));
  62 |       expect(mock).toHaveBeenCalledTimes(2);
  63 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Duplicate Assert,"{'line': 61, 'column': 6, 'index': 1955}","  59 |
  60 |       expect(mock).toHaveBeenCalledWith(drop({ reason }));
> 61 |       expect(mock).toHaveBeenCalledWith(completeDrop(getCompletedArgs(reason)));
     |      ^ Duplicate Assert
  62 |       expect(mock).toHaveBeenCalledTimes(2);
  63 |
  64 |       // reset to initial phase",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Duplicate Assert,"{'line': 62, 'column': 6, 'index': 2036}","  60 |       expect(mock).toHaveBeenCalledWith(drop({ reason }));
  61 |       expect(mock).toHaveBeenCalledWith(completeDrop(getCompletedArgs(reason)));
> 62 |       expect(mock).toHaveBeenCalledTimes(2);
     |      ^ Duplicate Assert
  63 |
  64 |       // reset to initial phase
  65 |       expect(store.getState().phase).toBe('IDLE');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Duplicate Assert,"{'line': 65, 'column': 6, 'index': 2114}","  63 |
  64 |       // reset to initial phase
> 65 |       expect(store.getState().phase).toBe('IDLE');
     |      ^ Duplicate Assert
  66 |     });
  67 |
  68 |     it('should fire an animate drop action if a drop animation movement is required', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Duplicate Assert,"{'line': 73, 'column': 6, 'index': 2428}","  71 |
  72 |       store.dispatch(initialPublish(initialPublishArgs));
> 73 |       expect(store.getState().phase).toBe('DRAGGING');
     |      ^ Duplicate Assert
  74 |
  75 |       // moving a little bit so that a drop animation will be needed
  76 |       const shift: Position = { x: 1, y: 1 };",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Duplicate Assert,"{'line': 112, 'column': 6, 'index': 3536}","  110 |         }),
  111 |       };
> 112 |       expect(mock).toHaveBeenCalledWith(drop({ reason }));
      |      ^ Duplicate Assert
  113 |       expect(mock).toHaveBeenCalledWith(animateDrop(args));
  114 |       expect(mock).toHaveBeenCalledTimes(2);
  115 |       expect(store.getState().phase).toBe('DROP_ANIMATING');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Duplicate Assert,"{'line': 113, 'column': 6, 'index': 3595}","  111 |       };
  112 |       expect(mock).toHaveBeenCalledWith(drop({ reason }));
> 113 |       expect(mock).toHaveBeenCalledWith(animateDrop(args));
      |      ^ Duplicate Assert
  114 |       expect(mock).toHaveBeenCalledTimes(2);
  115 |       expect(store.getState().phase).toBe('DROP_ANIMATING');
  116 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Duplicate Assert,"{'line': 114, 'column': 6, 'index': 3655}","  112 |       expect(mock).toHaveBeenCalledWith(drop({ reason }));
  113 |       expect(mock).toHaveBeenCalledWith(animateDrop(args));
> 114 |       expect(mock).toHaveBeenCalledTimes(2);
      |      ^ Duplicate Assert
  115 |       expect(store.getState().phase).toBe('DROP_ANIMATING');
  116 |     });
  117 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Duplicate Assert,"{'line': 115, 'column': 6, 'index': 3700}","  113 |       expect(mock).toHaveBeenCalledWith(animateDrop(args));
  114 |       expect(mock).toHaveBeenCalledTimes(2);
> 115 |       expect(store.getState().phase).toBe('DROP_ANIMATING');
      |      ^ Duplicate Assert
  116 |     });
  117 |
  118 |     it('should fire an animate drop action if combining', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Duplicate Assert,"{'line': 199, 'column': 6, 'index': 6284}","  197 |         dropDuration: expect.any(Number),
  198 |       };
> 199 |       expect(mock).toHaveBeenCalledWith(drop({ reason }));
      |      ^ Duplicate Assert
  200 |       expect(mock).toHaveBeenCalledWith(animateDrop(args));
  201 |       expect(mock).toHaveBeenCalledTimes(2);
  202 |       expect(store.getState().phase).toBe('DROP_ANIMATING');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Duplicate Assert,"{'line': 200, 'column': 6, 'index': 6343}","  198 |       };
  199 |       expect(mock).toHaveBeenCalledWith(drop({ reason }));
> 200 |       expect(mock).toHaveBeenCalledWith(animateDrop(args));
      |      ^ Duplicate Assert
  201 |       expect(mock).toHaveBeenCalledTimes(2);
  202 |       expect(store.getState().phase).toBe('DROP_ANIMATING');
  203 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Duplicate Assert,"{'line': 201, 'column': 6, 'index': 6403}","  199 |       expect(mock).toHaveBeenCalledWith(drop({ reason }));
  200 |       expect(mock).toHaveBeenCalledWith(animateDrop(args));
> 201 |       expect(mock).toHaveBeenCalledTimes(2);
      |      ^ Duplicate Assert
  202 |       expect(store.getState().phase).toBe('DROP_ANIMATING');
  203 |     });
  204 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Eager Test,"{'line': 135, 'column': 8, 'index': 4331}","  133 |       {
  134 |         const current: State = store.getState();
> 135 |         invariant(current.phase === 'DRAGGING');
      |        ^ Eager Test
  136 |         invariant(current.movementMode === 'SNAP');
  137 |         invariant(
  138 |           current.dimensions.droppables[inSnapMode.critical.droppable.id]",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Eager Test,"{'line': 136, 'column': 8, 'index': 4380}","  134 |         const current: State = store.getState();
  135 |         invariant(current.phase === 'DRAGGING');
> 136 |         invariant(current.movementMode === 'SNAP');
      |        ^ Eager Test
  137 |         invariant(
  138 |           current.dimensions.droppables[inSnapMode.critical.droppable.id]
  139 |             .isCombineEnabled,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Eager Test,"{'line': 137, 'column': 8, 'index': 4432}","  135 |         invariant(current.phase === 'DRAGGING');
  136 |         invariant(current.movementMode === 'SNAP');
> 137 |         invariant(
      |        ^ Eager Test
  138 |           current.dimensions.droppables[inSnapMode.critical.droppable.id]
  139 |             .isCombineEnabled,
  140 |         );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Eager Test,"{'line': 151, 'column': 6, 'index': 4847}","  149 |
  150 |       const current: State = store.getState();
> 151 |       invariant(current.isDragging);
      |      ^ Eager Test
  152 |
  153 |       // if (reason === 'DROP') {
  154 |       const combine: ?Combine = tryGetCombine(current.impact);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Eager Test,"{'line': 154, 'column': 32, 'index': 4945}","  152 |
  153 |       // if (reason === 'DROP') {
> 154 |       const combine: ?Combine = tryGetCombine(current.impact);
      |                                ^ Eager Test
  155 |       invariant(combine);
  156 |       // moved forwards past in home2, and then backwards onto it
  157 |       expect(combine).toEqual({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Eager Test,"{'line': 155, 'column': 6, 'index': 4982}","  153 |       // if (reason === 'DROP') {
  154 |       const combine: ?Combine = tryGetCombine(current.impact);
> 155 |       invariant(combine);
      |      ^ Eager Test
  156 |       // moved forwards past in home2, and then backwards onto it
  157 |       expect(combine).toEqual({
  158 |         draggableId: preset.inHome2.descriptor.id,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Lazy Test,"{'line': 83, 'column': 6, 'index': 2770}","  81 |       );
  82 |       const current: State = store.getState();
> 83 |       invariant(current.isDragging);
     |      ^ Lazy Test
  84 |       // impact is cleared when cancelling
  85 |       const destination: ?DraggableLocation =
  86 |         reason === 'DROP' ? getDragStart().source : null;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,Lazy Test,"{'line': 135, 'column': 8, 'index': 4331}","  133 |       {
  134 |         const current: State = store.getState();
> 135 |         invariant(current.phase === 'DRAGGING');
      |        ^ Lazy Test
  136 |         invariant(current.movementMode === 'SNAP');
  137 |         invariant(
  138 |           current.dimensions.droppables[inSnapMode.critical.droppable.id]",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-lift-effect/get-lift-effect.spec.js,Eager Test,"{'line': 40, 'column': 16, 'index': 1077}","  38 |     const expected: LiftEffect = {
  39 |       inVirtualList: false,
> 40 |       effected: getDraggableIdMap(getDraggableIds(all)),
     |                ^ Eager Test
  41 |       displacedBy,
  42 |     };
  43 |     expect(afterCritical).toEqual(expected);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-lift-effect/get-lift-effect.spec.js,Eager Test,"{'line': 40, 'column': 34, 'index': 1095}","  38 |     const expected: LiftEffect = {
  39 |       inVirtualList: false,
> 40 |       effected: getDraggableIdMap(getDraggableIds(all)),
     |                                  ^ Eager Test
  41 |       displacedBy,
  42 |     };
  43 |     expect(afterCritical).toEqual(expected);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-lift-effect/get-lift-effect.spec.js,Eager Test,"{'line': 47, 'column': 17, 'index': 1249}","  45 |   {
  46 |     const expected: DragImpact = {
> 47 |       displaced: getForcedDisplacement({
     |                 ^ Eager Test
  48 |         visible: all.map((dimension) => ({ dimension, shouldAnimate: false })),
  49 |       }),
  50 |       displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/preferencing.spec.js,Eager Test,"{'line': 89, 'column': 17, 'index': 2142}","  87 |  */
  88 | it('should prefer the furthest away droppable when multiple lists are hit', () => {
> 89 |   const offset = getOffsetForCrossAxisEndEdge({
     |                 ^ Eager Test
  90 |     crossAxisEndEdgeOn: droppableThird.page.borderBox.center,
  91 |     dragging: draggable.page.borderBox,
  92 |     axis: droppableThird.axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/preferencing.spec.js,Eager Test,"{'line': 97, 'column': 4, 'index': 2399}","   95 |   const pageBorderBox: Rect = offsetRectByPosition(
   96 |     draggable.page.borderBox,
>  97 |     afterCrossAxisPoint(droppableThird.axis, offset),
      |    ^ Eager Test
   98 |   );
   99 |
  100 |   const result = getDroppableOver({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/preferencing.spec.js,Eager Test,"{'line': 119, 'column': 17, 'index': 3011}","  117 |  */
  118 | it('should prefer the second furthest away droppable when multiple lists are hit', () => {
> 119 |   const offset = getOffsetForCrossAxisEndEdge({
      |                 ^ Eager Test
  120 |     crossAxisEndEdgeOn: droppableSecond.page.borderBox.center,
  121 |     dragging: draggable.page.borderBox,
  122 |     axis: droppableSecond.axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/preferencing.spec.js,Eager Test,"{'line': 127, 'column': 4, 'index': 3270}","  125 |   const pageBorderBox: Rect = offsetRectByPosition(
  126 |     draggable.page.borderBox,
> 127 |     afterCrossAxisPoint(droppableSecond.axis, offset),
      |    ^ Eager Test
  128 |   );
  129 |
  130 |   const result = getDroppableOver({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/preferencing.spec.js,Lazy Test,"{'line': 89, 'column': 17, 'index': 2142}","  87 |  */
  88 | it('should prefer the furthest away droppable when multiple lists are hit', () => {
> 89 |   const offset = getOffsetForCrossAxisEndEdge({
     |                 ^ Lazy Test
  90 |     crossAxisEndEdgeOn: droppableThird.page.borderBox.center,
  91 |     dragging: draggable.page.borderBox,
  92 |     axis: droppableThird.axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/preferencing.spec.js,Lazy Test,"{'line': 97, 'column': 4, 'index': 2399}","   95 |   const pageBorderBox: Rect = offsetRectByPosition(
   96 |     draggable.page.borderBox,
>  97 |     afterCrossAxisPoint(droppableThird.axis, offset),
      |    ^ Lazy Test
   98 |   );
   99 |
  100 |   const result = getDroppableOver({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/preferencing.spec.js,Lazy Test,"{'line': 119, 'column': 17, 'index': 3011}","  117 |  */
  118 | it('should prefer the second furthest away droppable when multiple lists are hit', () => {
> 119 |   const offset = getOffsetForCrossAxisEndEdge({
      |                 ^ Lazy Test
  120 |     crossAxisEndEdgeOn: droppableSecond.page.borderBox.center,
  121 |     dragging: draggable.page.borderBox,
  122 |     axis: droppableSecond.axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/preferencing.spec.js,Lazy Test,"{'line': 127, 'column': 4, 'index': 3270}","  125 |   const pageBorderBox: Rect = offsetRectByPosition(
  126 |     draggable.page.borderBox,
> 127 |     afterCrossAxisPoint(droppableSecond.axis, offset),
      |    ^ Lazy Test
  128 |   );
  129 |
  130 |   const result = getDroppableOver({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-is-totally-over.spec.js,Duplicate Assert,"{'line': 88, 'column': 4, 'index': 2264}","  86 |     });
  87 |
> 88 |     expect(result).toEqual(null);
     |    ^ Duplicate Assert
  89 |   }
  90 |
  91 |   // we have overlap",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-is-totally-over.spec.js,Duplicate Assert,"{'line': 104, 'column': 4, 'index': 2631}","  102 |     });
  103 |
> 104 |     expect(result).toEqual(droppableSmall.descriptor.id);
      |    ^ Duplicate Assert
  105 |   }
  106 | });
  107 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-is-totally-over.spec.js,Duplicate Assert,"{'line': 134, 'column': 4, 'index': 3417}","  132 |     });
  133 |
> 134 |     expect(result).toEqual(null);
      |    ^ Duplicate Assert
  135 |   }
  136 |
  137 |   // we have overlap",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-is-totally-over.spec.js,Duplicate Assert,"{'line': 150, 'column': 4, 'index': 3785}","  148 |     });
  149 |
> 150 |     expect(result).toEqual(droppableSmall.descriptor.id);
      |    ^ Duplicate Assert
  151 |   }
  152 | });
  153 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-is-totally-over.spec.js,Eager Test,"{'line': 69, 'column': 17, 'index': 1821}","  67 |   );
  68 |
> 69 |   const offset = getOffsetForCrossAxisEndEdge({
     |                 ^ Eager Test
  70 |     crossAxisEndEdgeOn: endEdge,
  71 |     dragging: draggable.page.borderBox,
  72 |     axis: droppableSmall.axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-is-totally-over.spec.js,Eager Test,"{'line': 95, 'column': 6, 'index': 2416}","  93 |     const pageBorderBox: Rect = offsetRectByPosition(
  94 |       draggable.page.borderBox,
> 95 |       afterCrossAxisPoint(droppableSmall.axis, offset),
     |      ^ Eager Test
  96 |     );
  97 |
  98 |     const result = getDroppableOver({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-is-totally-over.spec.js,Eager Test,"{'line': 115, 'column': 17, 'index': 2968}","  113 |   );
  114 |
> 115 |   const offset = getOffsetForCrossAxisStartEdge({
      |                 ^ Eager Test
  116 |     crossAxisStartEdgeOn: startEdge,
  117 |     dragging: draggable.page.borderBox,
  118 |     axis: droppableSmall.axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-is-totally-over.spec.js,Eager Test,"{'line': 141, 'column': 6, 'index': 3569}","  139 |     const pageBorderBox: Rect = offsetRectByPosition(
  140 |       draggable.page.borderBox,
> 141 |       beforeCrossAxisPoint(droppableSmall.axis, offset),
      |      ^ Eager Test
  142 |     );
  143 |
  144 |     const result = getDroppableOver({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-edge-is-over-list-center.spec.js,Duplicate Assert,"{'line': 79, 'column': 4, 'index': 1988}","  77 |     });
  78 |
> 79 |     expect(result).toEqual(null);
     |    ^ Duplicate Assert
  80 |   }
  81 |
  82 |   {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-edge-is-over-list-center.spec.js,Duplicate Assert,"{'line': 94, 'column': 4, 'index': 2334}","  92 |     });
  93 |
> 94 |     expect(result).toEqual(droppableSmall.descriptor.id);
     |    ^ Duplicate Assert
  95 |   }
  96 | });
  97 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-edge-is-over-list-center.spec.js,Duplicate Assert,"{'line': 118, 'column': 4, 'index': 3028}","  116 |     });
  117 |
> 118 |     expect(result).toEqual(null);
      |    ^ Duplicate Assert
  119 |   }
  120 |
  121 |   {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-edge-is-over-list-center.spec.js,Duplicate Assert,"{'line': 133, 'column': 4, 'index': 3375}","  131 |     });
  132 |
> 133 |     expect(result).toEqual(droppableSmall.descriptor.id);
      |    ^ Duplicate Assert
  134 |   }
  135 | });
  136 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-edge-is-over-list-center.spec.js,Eager Test,"{'line': 61, 'column': 17, 'index': 1548}","  59 |
  60 | it('should hit when dragging cross axis end edge is over the list center', () => {
> 61 |   const offset = getOffsetForCrossAxisEndEdge({
     |                 ^ Eager Test
  62 |     crossAxisEndEdgeOn: droppableSmall.page.borderBox.center,
  63 |     dragging: draggable.page.borderBox,
  64 |     axis: droppableSmall.axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-edge-is-over-list-center.spec.js,Eager Test,"{'line': 85, 'column': 6, 'index': 2119}","  83 |     const pageBorderBox: Rect = offsetRectByPosition(
  84 |       draggable.page.borderBox,
> 85 |       afterCrossAxisPoint(droppableSmall.axis, offset),
     |      ^ Eager Test
  86 |     );
  87 |
  88 |     const result = getDroppableOver({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-edge-is-over-list-center.spec.js,Eager Test,"{'line': 100, 'column': 17, 'index': 2584}","   98 | // For this test we are hitting draggableSmall from the (right side) cross axis side
   99 | it('should hit when dragging cross axis start edge is over the list center', () => {
> 100 |   const offset = getOffsetForCrossAxisStartEdge({
      |                 ^ Eager Test
  101 |     crossAxisStartEdgeOn: droppableSmall.page.borderBox.center,
  102 |     dragging: draggable.page.borderBox,
  103 |     axis: droppableSmall.axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/item-edge-is-over-list-center.spec.js,Eager Test,"{'line': 124, 'column': 6, 'index': 3159}","  122 |     const pageBorderBox: Rect = offsetRectByPosition(
  123 |       draggable.page.borderBox,
> 124 |       beforeCrossAxisPoint(droppableSmall.axis, offset),
      |      ^ Eager Test
  125 |     );
  126 |
  127 |     const result = getDroppableOver({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-droppable-over/center-is-over.spec.js,Conditional Test Logic,"{'line': 16, 'column': 23, 'index': 636}","  14 | import { offsetRectByPosition } from '../../../../src/state/rect';
  15 |
> 16 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  17 |   describe(`on ${axis.direction} axis`, () => {
  18 |     const preset = getPreset(axis);
  19 |     const active: ?Rect = preset.home.subject.active;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/over-nothing.spec.js,Conditional Test Logic,"{'line': 10, 'column': 23, 'index': 453}","   8 | import getLiftEffect from '../../../../src/state/get-lift-effect';
   9 |
> 10 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  11 |   describe(`on ${axis.direction} axis`, () => {
  12 |     const preset = getPreset(axis);
  13 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/is-disabled.spec.js,Conditional Test Logic,"{'line': 15, 'column': 23, 'index': 533}","  13 | import { origin } from '../../../../src/state/position';
  14 |
> 15 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  16 |   describe(`on ${axis.direction} axis`, () => {
  17 |     const preset = getPreset(axis);
  18 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/with-droppable-scroll.spec.js,Conditional Test Logic,"{'line': 23, 'column': 23, 'index': 938}","  21 | const viewport: Viewport = getViewport();
  22 |
> 23 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  24 |   describe(`on ${axis.direction} axis`, () => {
  25 |     const preset = getPreset(axis);
  26 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/with-droppable-scroll.spec.js,Lazy Test,"{'line': 74, 'column': 21, 'index': 2685}","  72 |
  73 |         const expected: DragImpact = {
> 74 |           displaced: getForcedDisplacement({
     |                     ^ Lazy Test
  75 |             // inHome2 no longer displaced
  76 |             // originally displaced so not animated
  77 |             visible: [",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/with-droppable-scroll.spec.js,Lazy Test,"{'line': 139, 'column': 21, 'index': 4906}","  137 |
  138 |         const expected: DragImpact = {
> 139 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  140 |             visible: [
  141 |               // ordered by closest to current location
  142 |               { dimension: preset.inHome2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-before-critical.spec.js,Conditional Test Logic,"{'line': 23, 'column': 23, 'index': 878}","  21 | } from '../../util/get-offset-for-edge';
  22 |
> 23 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  24 |   describe(`on ${axis.direction} axis`, () => {
  25 |     const preset = getPreset(axis);
  26 |     const viewport: Viewport = preset.viewport;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-before-critical.spec.js,Duplicate Assert,"{'line': 142, 'column': 8, 'index': 4956}","  140 |           afterCritical,
  141 |         });
> 142 |         expect(impact).toEqual(startBeforeInHome1Center);
      |        ^ Duplicate Assert
  143 |       }
  144 |       // no longer displace as we have moved onto the displaced top edge
  145 |       {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-before-critical.spec.js,Duplicate Assert,"{'line': 174, 'column': 8, 'index': 6065}","  172 |           },
  173 |         };
> 174 |         expect(impact).toEqual(expected);
      |        ^ Duplicate Assert
  175 |       }
  176 |     });
  177 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-before-critical.spec.js,Eager Test,"{'line': 69, 'column': 21, 'index': 2426}","  67 |
  68 |         const expected: DragImpact = {
> 69 |           displaced: getForcedDisplacement({
     |                     ^ Eager Test
  70 |             // ordered by closest to current location
  71 |             visible: [
  72 |               { dimension: preset.inHome2, shouldAnimate: true },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-before-critical.spec.js,Eager Test,"{'line': 93, 'column': 21, 'index': 3292}","  91 |       {
  92 |         const expected: DragImpact = {
> 93 |           displaced: getForcedDisplacement({
     |                     ^ Eager Test
  94 |             // ordered by closest to current location
  95 |             visible: [
  96 |               { dimension: preset.inHome1 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-before-critical.spec.js,Eager Test,"{'line': 123, 'column': 61, 'index': 4407}","  121 |       );
  122 |
> 123 |       const offsetForEndOnDisplacedInHome1Center: Position = getOffsetForEndEdge(
      |                                                             ^ Eager Test
  124 |         {
  125 |           endEdgeOn: displacedInHome1Center,
  126 |           dragging: preset.inHome3.page.borderBox,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-before-critical.spec.js,Eager Test,"{'line': 157, 'column': 21, 'index': 5513}","  155 |
  156 |         const expected: DragImpact = {
> 157 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  158 |             visible: [
  159 |               { dimension: preset.inHome2 },
  160 |               // not displacing inHome3 as it is the dragging item",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-before-critical.spec.js,Lazy Test,"{'line': 69, 'column': 21, 'index': 2426}","  67 |
  68 |         const expected: DragImpact = {
> 69 |           displaced: getForcedDisplacement({
     |                     ^ Lazy Test
  70 |             // ordered by closest to current location
  71 |             visible: [
  72 |               { dimension: preset.inHome2, shouldAnimate: true },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-before-critical.spec.js,Lazy Test,"{'line': 157, 'column': 21, 'index': 5513}","  155 |
  156 |         const expected: DragImpact = {
> 157 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  158 |             visible: [
  159 |               { dimension: preset.inHome2 },
  160 |               // not displacing inHome3 as it is the dragging item",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-after-critical.spec.js,Conditional Test Logic,"{'line': 24, 'column': 23, 'index': 960}","  22 | } from '../../util/get-offset-for-edge';
  23 |
> 24 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  25 |   describe(`on ${axis.direction} axis`, () => {
  26 |     const preset = getPreset(axis);
  27 |     const viewport: Viewport = preset.viewport;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-after-critical.spec.js,Duplicate Assert,"{'line': 143, 'column': 8, 'index': 4665}","  141 |           afterCritical,
  142 |         });
> 143 |         expect(impact).toEqual(endPastInHome3Center);
      |        ^ Duplicate Assert
  144 |       }
  145 |       // no longer displace as we move backwards past the displaced center
  146 |       {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-after-critical.spec.js,Duplicate Assert,"{'line': 183, 'column': 8, 'index': 5953}","  181 |         };
  182 |
> 183 |         expect(impact).toEqual(expected);
      |        ^ Duplicate Assert
  184 |       }
  185 |     });
  186 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-after-critical.spec.js,Eager Test,"{'line': 69, 'column': 21, 'index': 2436}","  67 |
  68 |         const expected: DragImpact = {
> 69 |           displaced: getForcedDisplacement({
     |                     ^ Eager Test
  70 |             // inHome4 would have been displaced on lift so it won't be animated
  71 |             visible: [
  72 |               {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-after-critical.spec.js,Eager Test,"{'line': 93, 'column': 19, 'index': 3102}","  91 |
  92 |       const expected: DragImpact = {
> 93 |         displaced: getForcedDisplacement({
     |                   ^ Eager Test
  94 |           // inHome4 would have been displaced on lift so it won't be animated
  95 |           visible: [
  96 |             {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-after-critical.spec.js,Eager Test,"{'line': 124, 'column': 63, 'index': 4114}","  122 |       );
  123 |
> 124 |       const offsetForStartOnDisplacedInHome2Center: Position = getOffsetForStartEdge(
      |                                                               ^ Eager Test
  125 |         {
  126 |           startEdgeOn: displacedInHome3Center,
  127 |           dragging: preset.inHome2.page.borderBox,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-after-critical.spec.js,Eager Test,"{'line': 158, 'column': 21, 'index': 5219}","  156 |
  157 |         const expected: DragImpact = {
> 158 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  159 |             // inHome4 would have been displaced on lift so it won't be animated
  160 |             visible: [
  161 |               // inHome3 is now animated",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-after-critical.spec.js,Lazy Test,"{'line': 69, 'column': 21, 'index': 2436}","  67 |
  68 |         const expected: DragImpact = {
> 69 |           displaced: getForcedDisplacement({
     |                     ^ Lazy Test
  70 |             // inHome4 would have been displaced on lift so it won't be animated
  71 |             visible: [
  72 |               {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/started-after-critical.spec.js,Lazy Test,"{'line': 158, 'column': 21, 'index': 5219}","  156 |
  157 |         const expected: DragImpact = {
> 158 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  159 |             // inHome4 would have been displaced on lift so it won't be animated
  160 |             visible: [
  161 |               // inHome3 is now animated",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/move-past-last-item.spec.js,Conditional Test Logic,"{'line': 13, 'column': 23, 'index': 709}","  11 | import { getOffsetForEndEdge } from '../../util/get-offset-for-edge';
  12 |
> 13 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  14 |   describe(`on ${axis.direction} axis`, () => {
  15 |     it('should allow movement past the last item', () => {
  16 |       const preset = getPreset(axis);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/displacement-visibility.spec.js,Conditional Test Logic,"{'line': 31, 'column': 23, 'index': 1114}","  29 | // this is just an application of get-displacement.spec
  30 |
> 31 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  32 |   describe(`on ${axis.direction} axis`, () => {
  33 |     const crossAxisStart: number = 0;
  34 |     const crossAxisEnd: number = 100;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/displacement-visibility.spec.js,Lazy Test,"{'line': 141, 'column': 19, 'index': 4746}","  139 |       );
  140 |       const expected: DragImpact = {
> 141 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  142 |           visible: [
  143 |             {
  144 |               dimension: visible,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-home-list/displacement-visibility.spec.js,Lazy Test,"{'line': 280, 'column': 19, 'index': 9328}","  278 |       const expected: DragImpact = {
  279 |         // no longer the same due to visibility overscanning
> 280 |         displaced: getForcedDisplacement({
      |                   ^ Lazy Test
  281 |           visible: [
  282 |             {
  283 |               dimension: partialVisible,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-foreign-list/move-past-last-item.spec.js,Conditional Test Logic,"{'line': 17, 'column': 23, 'index': 675}","  15 | import { getOffsetForStartEdge } from '../../util/get-offset-for-edge';
  16 |
> 17 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  18 |   describe(`on ${axis.direction} axis`, () => {
  19 |     it('should allow movement past the last item', () => {
  20 |       const preset = getPreset(axis);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-foreign-list/move-backward-from-last-item.spec.js,Conditional Test Logic,"{'line': 19, 'column': 23, 'index': 803}","  17 | import { getOffsetForStartEdge } from '../../util/get-offset-for-edge';
  18 |
> 19 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  20 |   describe(`on ${axis.direction} axis`, () => {
  21 |     it('should allow movement past from last item', () => {
  22 |       const preset = getPreset(axis);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-foreign-list/move-backward-from-last-item.spec.js,Eager Test,"{'line': 48, 'column': 55, 'index': 1735}","  46 |       };
  47 |
> 48 |       const offsetForEndOnInForeign4Center: Position = getOffsetForStartEdge({
     |                                                       ^ Eager Test
  49 |         startEdgeOn: preset.inForeign4.page.borderBox.center,
  50 |         dragging: preset.inHome1.page.borderBox,
  51 |         axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-foreign-list/move-backward-from-last-item.spec.js,Eager Test,"{'line': 65, 'column': 19, 'index': 2280}","  63 |
  64 |       const expected: DragImpact = {
> 65 |         displaced: getForcedDisplacement({
     |                   ^ Eager Test
  66 |           visible: [{ dimension: preset.inForeign4 }],
  67 |         }),
  68 |         displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-foreign-list/did-not-start-displaced.spec.js,Conditional Test Logic,"{'line': 23, 'column': 23, 'index': 878}","  21 | } from '../../util/get-offset-for-edge';
  22 |
> 23 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  24 |   describe(`on ${axis.direction} axis`, () => {
  25 |     const preset = getPreset(axis);
  26 |     const viewport: Viewport = preset.viewport;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-foreign-list/did-not-start-displaced.spec.js,Duplicate Assert,"{'line': 134, 'column': 8, 'index': 4403}","  132 |           afterCritical,
  133 |         });
> 134 |         expect(impact).toEqual(goingBackwards);
      |        ^ Duplicate Assert
  135 |       }
  136 |       // no longer displace as we have moved forwards past the displaced center
  137 |       {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-foreign-list/did-not-start-displaced.spec.js,Duplicate Assert,"{'line': 166, 'column': 8, 'index': 5453}","  164 |           },
  165 |         };
> 166 |         expect(impact).toEqual(expected);
      |        ^ Duplicate Assert
  167 |       }
  168 |     });
  169 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-foreign-list/did-not-start-displaced.spec.js,Eager Test,"{'line': 68, 'column': 21, 'index': 2340}","  66 |
  67 |         const expected: DragImpact = {
> 68 |           displaced: getForcedDisplacement({
     |                     ^ Eager Test
  69 |             visible: [
  70 |               // ordered by closest to current location
  71 |               // animated and visible as it is a foreign list",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-foreign-list/did-not-start-displaced.spec.js,Eager Test,"{'line': 91, 'column': 19, 'index': 3036}","  89 |
  90 |       const expected: DragImpact = {
> 91 |         displaced: getForcedDisplacement({
     |                   ^ Eager Test
  92 |           // ordered by closest to current location
  93 |           visible: [
  94 |             { dimension: preset.inForeign2 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-foreign-list/did-not-start-displaced.spec.js,Eager Test,"{'line': 113, 'column': 55, 'index': 3784}","  111 |
  112 |     it('should end displacement if moving forward over the displaced center', () => {
> 113 |       const offsetForEndOnInForeign2Center: Position = getOffsetForEndEdge({
      |                                                       ^ Eager Test
  114 |         endEdgeOn: preset.inForeign2.page.borderBox.center,
  115 |         dragging: preset.inHome1.page.borderBox,
  116 |         axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-foreign-list/did-not-start-displaced.spec.js,Eager Test,"{'line': 149, 'column': 21, 'index': 4920}","  147 |
  148 |         const expected: DragImpact = {
> 149 |           displaced: getForcedDisplacement({
      |                     ^ Eager Test
  150 |             // ordered by closest impacted
  151 |             visible: [
  152 |               { dimension: preset.inForeign3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-foreign-list/did-not-start-displaced.spec.js,Lazy Test,"{'line': 68, 'column': 21, 'index': 2340}","  66 |
  67 |         const expected: DragImpact = {
> 68 |           displaced: getForcedDisplacement({
     |                     ^ Lazy Test
  69 |             visible: [
  70 |               // ordered by closest to current location
  71 |               // animated and visible as it is a foreign list",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/reorder/over-foreign-list/did-not-start-displaced.spec.js,Lazy Test,"{'line': 149, 'column': 21, 'index': 4920}","  147 |
  148 |         const expected: DragImpact = {
> 149 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  150 |             // ordered by closest impacted
  151 |             visible: [
  152 |               { dimension: preset.inForeign3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/with-droppable-scroll.spec.js,Conditional Test Logic,"{'line': 18, 'column': 23, 'index': 756}","  16 | import { getOffsetForEndEdge } from '../util/get-offset-for-edge';
  17 |
> 18 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  19 |   describe(`on ${axis.direction} axis`, () => {
  20 |     const preset = getPreset(axis);
  21 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Conditional Test Logic,"{'line': 24, 'column': 23, 'index': 954}","  22 | } from '../util/get-offset-for-edge';
  23 |
> 24 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  25 |   describe(`on ${axis.direction} axis`, () => {
  26 |     const preset = getPreset(axis);
  27 |     const { afterCritical } = getLiftEffect({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Duplicate Assert,"{'line': 131, 'column': 12, 'index': 4474}","  129 |               afterCritical,
  130 |             });
> 131 |             expect(impact).toEqual(whenEnteredForeign);
      |            ^ Duplicate Assert
  132 |           }
  133 |           // it should merge with the item when it goes onto the displaced start
  134 |           {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Duplicate Assert,"{'line': 144, 'column': 12, 'index': 5021}","  142 |               afterCritical,
  143 |             });
> 144 |             expect(impact).toEqual(combineWithDisplacedInForeign3);
      |            ^ Duplicate Assert
  145 |           }
  146 |         });
  147 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Duplicate Assert,"{'line': 166, 'column': 12, 'index': 5825}","  164 |               afterCritical,
  165 |             });
> 166 |             expect(impact).toEqual(combineWithDisplacedInForeign3);
      |            ^ Duplicate Assert
  167 |           }
  168 |           {
  169 |             const impact: DragImpact = getDragImpact({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Duplicate Assert,"{'line': 193, 'column': 12, 'index': 6796}","  191 |               },
  192 |             };
> 193 |             expect(impact).toEqual(expected);
      |            ^ Duplicate Assert
  194 |           }
  195 |         });
  196 |       });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Duplicate Assert,"{'line': 249, 'column': 10, 'index': 8703}","  247 |             afterCritical,
  248 |           });
> 249 |           expect(impact).toEqual(whenEnteredForeign);
      |          ^ Duplicate Assert
  250 |         }
  251 |         // over edge is enough
  252 |         {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Duplicate Assert,"{'line': 262, 'column': 10, 'index': 9177}","  260 |             afterCritical,
  261 |           });
> 262 |           expect(impact).toEqual(combineWithInForeign2);
      |          ^ Duplicate Assert
  263 |         }
  264 |       });
  265 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Duplicate Assert,"{'line': 283, 'column': 10, 'index': 9935}","  281 |             afterCritical,
  282 |           });
> 283 |           expect(impact).toEqual(combineWithInForeign2);
      |          ^ Duplicate Assert
  284 |         }
  285 |         // on combine start = stop combining
  286 |         {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Duplicate Assert,"{'line': 314, 'column': 10, 'index': 10984}","  312 |             },
  313 |           };
> 314 |           expect(impact).toEqual(expected);
      |          ^ Duplicate Assert
  315 |         }
  316 |       });
  317 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Eager Test,"{'line': 149, 'column': 44, 'index': 5226}","  147 |
  148 |         it('should no longer merge when moving onto 4/5 of the target', () => {
> 149 |           const endOnCombineEnd: Position = getOffsetForEndEdge({
      |                                            ^ Eager Test
  150 |             endEdgeOn: combineEnd,
  151 |             dragging: preset.inHome1.page.borderBox,
  152 |             axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Eager Test,"{'line': 180, 'column': 25, 'index': 6340}","  178 |
  179 |             const expected: DragImpact = {
> 180 |               displaced: getForcedDisplacement({
      |                         ^ Eager Test
  181 |                 visible: [{ dimension: preset.inForeign4 }],
  182 |               }),
  183 |               displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Eager Test,"{'line': 267, 'column': 46, 'index': 9370}","  265 |
  266 |       it('should stop combining when going back onto 2/3 of the size', () => {
> 267 |         const startOnCombineStart: Position = getOffsetForStartEdge({
      |                                              ^ Eager Test
  268 |           startEdgeOn: combineStart,
  269 |           dragging: preset.inHome1.page.borderBox,
  270 |           axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Eager Test,"{'line': 298, 'column': 23, 'index': 10464}","  296 |
  297 |           const expected: DragImpact = {
> 298 |             displaced: getForcedDisplacement({
      |                       ^ Eager Test
  299 |               visible: [
  300 |                 { dimension: preset.inForeign2 },
  301 |                 { dimension: preset.inForeign3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Lazy Test,"{'line': 114, 'column': 46, 'index': 3887}","  112 |
  113 |         it('should combine when moving forward past the displaced start threshold', () => {
> 114 |           const endOnCombineStart: Position = getOffsetForEndEdge({
      |                                              ^ Lazy Test
  115 |             endEdgeOn: combineStart,
  116 |             dragging: preset.inHome1.page.borderBox,
  117 |             axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Lazy Test,"{'line': 149, 'column': 44, 'index': 5226}","  147 |
  148 |         it('should no longer merge when moving onto 4/5 of the target', () => {
> 149 |           const endOnCombineEnd: Position = getOffsetForEndEdge({
      |                                            ^ Lazy Test
  150 |             endEdgeOn: combineEnd,
  151 |             dragging: preset.inHome1.page.borderBox,
  152 |             axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Lazy Test,"{'line': 180, 'column': 25, 'index': 6340}","  178 |
  179 |             const expected: DragImpact = {
> 180 |               displaced: getForcedDisplacement({
      |                         ^ Lazy Test
  181 |                 visible: [{ dimension: preset.inForeign4 }],
  182 |               }),
  183 |               displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Lazy Test,"{'line': 233, 'column': 44, 'index': 8158}","  231 |
  232 |       it('should combine with an item when moving backwards past 1 / 5 of the items size', () => {
> 233 |         const startOnCombineEnd: Position = getOffsetForStartEdge({
      |                                            ^ Lazy Test
  234 |           startEdgeOn: combineEnd,
  235 |           dragging: preset.inHome1.page.borderBox,
  236 |           axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Lazy Test,"{'line': 267, 'column': 46, 'index': 9370}","  265 |
  266 |       it('should stop combining when going back onto 2/3 of the size', () => {
> 267 |         const startOnCombineStart: Position = getOffsetForStartEdge({
      |                                              ^ Lazy Test
  268 |           startEdgeOn: combineStart,
  269 |           dragging: preset.inHome1.page.borderBox,
  270 |           axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-before-critical.spec.js,Lazy Test,"{'line': 298, 'column': 23, 'index': 10464}","  296 |
  297 |           const expected: DragImpact = {
> 298 |             displaced: getForcedDisplacement({
      |                       ^ Lazy Test
  299 |               visible: [
  300 |                 { dimension: preset.inForeign2 },
  301 |                 { dimension: preset.inForeign3 },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-after-critical.spec.js,Conditional Test Logic,"{'line': 25, 'column': 23, 'index': 1030}","  23 | } from '../util/get-offset-for-edge';
  24 |
> 25 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  26 |   describe(`on ${axis.direction} axis`, () => {
  27 |     const preset = getPreset(axis);
  28 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-after-critical.spec.js,Duplicate Assert,"{'line': 96, 'column': 10, 'index': 3433}","  94 |           });
  95 |
> 96 |           expect(impact).toEqual(homeImpact);
     |          ^ Duplicate Assert
  97 |         }
  98 |         // gone past combine point
  99 |         {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-after-critical.spec.js,Duplicate Assert,"{'line': 110, 'column': 10, 'index': 3884}","  108 |           });
  109 |
> 110 |           expect(impact).toEqual(combineWithInHome3Impact);
      |          ^ Duplicate Assert
  111 |         }
  112 |       });
  113 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-after-critical.spec.js,Duplicate Assert,"{'line': 131, 'column': 10, 'index': 4600}","  129 |           });
  130 |
> 131 |           expect(impact).toEqual(combineWithInHome3Impact);
      |          ^ Duplicate Assert
  132 |         }
  133 |         {
  134 |           const impact: DragImpact = getDragImpact({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-after-critical.spec.js,Duplicate Assert,"{'line': 158, 'column': 10, 'index': 5510}","  156 |             },
  157 |           };
> 158 |           expect(impact).toEqual(expected);
      |          ^ Duplicate Assert
  159 |         }
  160 |       });
  161 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-after-critical.spec.js,Eager Test,"{'line': 115, 'column': 33, 'index': 4095}","  113 |
  114 |       it('should remain displaced until the bottom of the dragging item goes onto the (4/5) mark', () => {
> 115 |         const offset: Position = getOffsetForEndEdge({
      |                                 ^ Eager Test
  116 |           endEdgeOn: combineEnd,
  117 |           dragging: preset.inHome2.page.borderBox,
  118 |           axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-after-critical.spec.js,Eager Test,"{'line': 145, 'column': 23, 'index': 5066}","  143 |
  144 |           const expected: DragImpact = {
> 145 |             displaced: getForcedDisplacement({
      |                       ^ Eager Test
  146 |               visible: [{ dimension: preset.inHome4, shouldAnimate: false }],
  147 |             }),
  148 |             displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-after-critical.spec.js,Eager Test,"{'line': 292, 'column': 41, 'index': 9860}","  290 |     // TODO: I am not sure this test is asserting the right thing
  291 |     it('should understand that when re-entering a list, items that started displaced no longer are', () => {
> 292 |       const inHome4Threshold: Position = getThreshold(axis, preset.inHome4);
      |                                         ^ Eager Test
  293 |       const endOfInHome4: Position = patch(
  294 |         axis.line,
  295 |         preset.inHome4.page.borderBox[axis.end],",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-after-critical.spec.js,Eager Test,"{'line': 307, 'column': 31, 'index': 10340}","  305 |       );
  306 |
> 307 |       const offset: Position = getOffsetForStartEdge({
      |                               ^ Eager Test
  308 |         startEdgeOn: combineEnd,
  309 |         dragging: preset.inHome3.page.borderBox,
  310 |         axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-after-critical.spec.js,Lazy Test,"{'line': 78, 'column': 33, 'index': 2908}","  76 |
  77 |       it('should move onto a target once it hits (1/5) of the targets size ', () => {
> 78 |         const offset: Position = getOffsetForEndEdge({
     |                                 ^ Lazy Test
  79 |           endEdgeOn: combineStart,
  80 |           dragging: preset.inHome2.page.borderBox,
  81 |           axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-after-critical.spec.js,Lazy Test,"{'line': 115, 'column': 33, 'index': 4095}","  113 |
  114 |       it('should remain displaced until the bottom of the dragging item goes onto the (4/5) mark', () => {
> 115 |         const offset: Position = getOffsetForEndEdge({
      |                                 ^ Lazy Test
  116 |           endEdgeOn: combineEnd,
  117 |           dragging: preset.inHome2.page.borderBox,
  118 |           axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-after-critical.spec.js,Lazy Test,"{'line': 215, 'column': 33, 'index': 7254}","  213 |
  214 |       it('should move backwards onto an item that has shifted backwards', () => {
> 215 |         const offset: Position = getOffsetForStartEdge({
      |                                 ^ Lazy Test
  216 |           startEdgeOn: combineEnd,
  217 |           dragging: preset.inHome2.page.borderBox,
  218 |           axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-after-critical.spec.js,Lazy Test,"{'line': 251, 'column': 33, 'index': 8450}","  249 |
  250 |       it('should no longer combine with an item once it hits the top threshold', () => {
> 251 |         const offset: Position = getOffsetForStartEdge({
      |                                 ^ Lazy Test
  252 |           startEdgeOn: combineStart,
  253 |           dragging: preset.inHome2.page.borderBox,
  254 |           axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/started-after-critical.spec.js,Lazy Test,"{'line': 307, 'column': 31, 'index': 10340}","  305 |       );
  306 |
> 307 |       const offset: Position = getOffsetForStartEdge({
      |                               ^ Lazy Test
  308 |         startEdgeOn: combineEnd,
  309 |         dragging: preset.inHome3.page.borderBox,
  310 |         axis,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/should-not-combine-with-home-draggable.spec.js,Conditional Test Logic,"{'line': 13, 'column': 23, 'index': 472}","  11 | import { origin } from '../../../../../src/state/position';
  12 |
> 13 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  14 |   describe(`on ${axis.direction} axis`, () => {
  15 |     const preset = getPreset(axis);
  16 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/is-combine-disabled.spec.js,Conditional Test Logic,"{'line': 19, 'column': 23, 'index': 844}","  17 | import { getOffsetForEndEdge } from '../util/get-offset-for-edge';
  18 |
> 19 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  20 |   describe(`on ${axis.direction} axis`, () => {
  21 |     const preset = getPreset(axis);
  22 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/is-combine-disabled.spec.js,Duplicate Assert,"{'line': 57, 'column': 8, 'index': 2167}","  55 |         });
  56 |
> 57 |         expect(impact).toEqual(homeImpact);
     |        ^ Duplicate Assert
  58 |       }
  59 |       // would have combined if was enabled (validation)
  60 |       {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-drag-impact/combine/is-combine-disabled.spec.js,Duplicate Assert,"{'line': 88, 'column': 8, 'index': 3273}","  86 |           },
  87 |         };
> 88 |         expect(impact).toEqual(expected);
     |        ^ Duplicate Assert
  89 |       }
  90 |     });
  91 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-displacement-groups/use-initial-position-not-displaced.spec.js,Conditional Test Logic,"{'line': 20, 'column': 23, 'index': 875}","  18 | import { emptyGroups } from '../../../../src/state/no-impact';
  19 |
> 20 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  21 |   describe(`on ${axis.direction} axis`, () => {
  22 |     const preset = getPreset(axis);
  23 |     const viewport: Viewport = preset.viewport;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-displacement-groups/get-displacement-groups.spec.js,Conditional Test Logic,"{'line': 27, 'column': 23, 'index': 1016}","  25 | import scrollViewport from '../../../../src/state/scroll-viewport';
  26 |
> 27 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  28 |   describe(`on the ${axis.direction} axis`, () => {
  29 |     const viewport: Viewport = createViewport({
  30 |       frame: getRect({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-displacement-groups/get-displacement-groups.spec.js,Eager Test,"{'line': 215, 'column': 39, 'index': 6306}","  213 |
  214 |     it('should mark an item as not animated when moving from invisible to visible', () => {
> 215 |       const last: DisplacementGroups = getForcedDisplacement({
      |                                       ^ Eager Test
  216 |         visible: [
  217 |           { dimension: isVisible },
  218 |           { dimension: isVisibleDueToOverScanning },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-displacement-groups/get-displacement-groups.spec.js,Eager Test,"{'line': 233, 'column': 43, 'index': 6873}","  231 |       });
  232 |
> 233 |       const expected: DisplacementGroups = getForcedDisplacement({
      |                                           ^ Eager Test
  234 |         visible: [
  235 |           { dimension: isVisible },
  236 |           { dimension: isVisibleDueToOverScanning },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-displacement-groups/get-displacement-groups.spec.js,Lazy Test,"{'line': 181, 'column': 43, 'index': 5270}","  179 |       });
  180 |
> 181 |       const expected: DisplacementGroups = getForcedDisplacement({
      |                                           ^ Lazy Test
  182 |         visible: [
  183 |           { dimension: isVisible },
  184 |           // overscanning",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-displacement-groups/get-displacement-groups.spec.js,Lazy Test,"{'line': 194, 'column': 39, 'index': 5651}","  192 |
  193 |     it('should keep displacement animation consistent between calls', () => {
> 194 |       const last: DisplacementGroups = getForcedDisplacement({
      |                                       ^ Lazy Test
  195 |         visible: [
  196 |           // forcing this to be difference so we know this is working
  197 |           { dimension: isVisible, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-displacement-groups/get-displacement-groups.spec.js,Lazy Test,"{'line': 215, 'column': 39, 'index': 6306}","  213 |
  214 |     it('should mark an item as not animated when moving from invisible to visible', () => {
> 215 |       const last: DisplacementGroups = getForcedDisplacement({
      |                                       ^ Lazy Test
  216 |         visible: [
  217 |           { dimension: isVisible },
  218 |           { dimension: isVisibleDueToOverScanning },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-displacement-groups/get-displacement-groups.spec.js,Lazy Test,"{'line': 253, 'column': 43, 'index': 7481}","  251 |       });
  252 |
> 253 |       const expected: DisplacementGroups = getForcedDisplacement({
      |                                           ^ Lazy Test
  254 |         // both are animated
  255 |         visible: [
  256 |           { dimension: isVisible },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-displacement-groups/get-displacement-groups.spec.js,Lazy Test,"{'line': 276, 'column': 43, 'index': 8129}","  274 |       });
  275 |
> 276 |       const expected: DisplacementGroups = getForcedDisplacement({
      |                                           ^ Lazy Test
  277 |         visible: [
  278 |           { dimension: isVisible, shouldAnimate: false },
  279 |           { dimension: isVisibleDueToOverScanning, shouldAnimate: false },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/move-relative-to.spec.js,Conditional Test Logic,"{'line': 56, 'column': 23, 'index': 1282}","  54 |   box.margin[axis.end] + box.borderBox[axis.size] / 2;
  55 |
> 56 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  57 |   describe(`on ${axis.direction} axis`, () => {
  58 |     it('should align before the target', () => {
  59 |       const newCenter: Position = goBefore({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-client-border-box-center.spec.js,Conditional Test Logic,"{'line': 21, 'column': 23, 'index': 921}","  19 | import { getForcedDisplacement } from '../../../util/impact';
  20 |
> 21 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  22 |   const preset = getPreset();
  23 |   const { afterCritical, impact: homeImpact } = getLiftEffect({
  24 |     draggable: preset.inHome1,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/over-nothing.spec.js,Conditional Test Logic,"{'line': 9, 'column': 23, 'index': 443}","   7 | import type { Axis } from '../../../../../src/types';
   8 |
>  9 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  10 |   describe(`on ${axis.direction} axis`, () => {
  11 |     const preset = getPreset(axis);
  12 |     const original: Position = preset.inHome1.page.borderBox.center;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/in-home-location.spec.js,Conditional Test Logic,"{'line': 9, 'column': 23, 'index': 443}","   7 | import type { Axis } from '../../../../../src/types';
   8 |
>  9 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  10 |   describe(`on ${axis.direction} axis`, () => {
  11 |     const preset = getPreset(axis);
  12 |     const original: Position = preset.inHome1.page.borderBox.center;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/reorder/with-droppable-scroll.spec.js,Conditional Test Logic,"{'line': 19, 'column': 23, 'index': 925}","  17 | import { emptyGroups } from '../../../../../../src/state/no-impact';
  18 |
> 19 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  20 |   describe(`on ${axis.direction} axis`, () => {
  21 |     const preset = getPreset(axis);
  22 |     it('should account for any scroll in the droppable being dropped into (into foreign list)', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/reorder/with-droppable-scroll.spec.js,Duplicate Assert,"{'line': 60, 'column': 8, 'index': 2234}","  58 |         });
  59 |
> 60 |         expect(result).toEqual(expectedCenter);
     |        ^ Duplicate Assert
  61 |       }
  62 |       // into start of empty foreign list (with scroll)
  63 |       {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/reorder/with-droppable-scroll.spec.js,Duplicate Assert,"{'line': 82, 'column': 8, 'index': 2913}","  80 |         });
  81 |
> 82 |         expect(result).toEqual(add(expectedCenter, displacement));
     |        ^ Duplicate Assert
  83 |       }
  84 |     });
  85 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/reorder/there-is-displacement.spec.js,Conditional Test Logic,"{'line': 17, 'column': 23, 'index': 769}","  15 | import { getForcedDisplacement } from '../../../../../util/impact';
  16 |
> 17 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  18 |   describe(`on ${axis.direction} axis`, () => {
  19 |     const preset = getPreset(axis);
  20 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/reorder/there-is-displacement.spec.js,Lazy Test,"{'line': 36, 'column': 21, 'index': 1448}","  34 |         const impact: DragImpact = {
  35 |           // moved forward over inHome2
> 36 |           displaced: getForcedDisplacement({
     |                     ^ Lazy Test
  37 |             visible: [
  38 |               {
  39 |                 dimension: preset.inHome3,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/reorder/there-is-displacement.spec.js,Lazy Test,"{'line': 88, 'column': 21, 'index': 2999}","  86 |         // moved into foreign
  87 |         const impact: DragImpact = {
> 88 |           displaced: getForcedDisplacement({
     |                     ^ Lazy Test
  89 |             visible: [
  90 |               {
  91 |                 dimension: preset.inForeign2,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/reorder/nothing-displaced.spec.js,Conditional Test Logic,"{'line': 17, 'column': 23, 'index': 800}","  15 | import { emptyGroups } from '../../../../../../src/state/no-impact';
  16 |
> 17 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  18 |   describe(`on ${axis.direction} axis`, () => {
  19 |     const preset = getPreset(axis);
  20 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/reorder/in-empty-list.spec.js,Conditional Test Logic,"{'line': 10, 'column': 23, 'index': 557}","   8 | import { goIntoStart } from '../../../../../../src/state/get-center-from-impact/move-relative-to';
   9 |
> 10 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  11 |   describe(`on ${axis.direction} axis`, () => {
  12 |     const preset = getPreset(axis);
  13 |     const { afterCritical, impact: homeImpact } = getLiftEffect({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/combine/with-droppable-scroll.spec.js,Conditional Test Logic,"{'line': 18, 'column': 23, 'index': 825}","  16 | import { getForcedDisplacement } from '../../../../../util/impact';
  17 |
> 18 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  19 |   describe(`on ${axis.direction} axis`, () => {
  20 |     const preset = getPreset(axis);
  21 |     const withCombineEnabled: DroppableDimension = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/combine/with-droppable-scroll.spec.js,Duplicate Assert,"{'line': 77, 'column': 8, 'index': 2545}","  75 |         });
  76 |
> 77 |         expect(result).toEqual(inHome2Center);
     |        ^ Duplicate Assert
  78 |       }
  79 |       // into start of empty foreign list (with scroll)
  80 |       {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/combine/with-droppable-scroll.spec.js,Duplicate Assert,"{'line': 99, 'column': 8, 'index': 3222}","   97 |         });
   98 |
>  99 |         expect(result).toEqual(add(inHome2Center, displacement));
      |        ^ Duplicate Assert
  100 |       }
  101 |     });
  102 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/combine/when-combining.spec.js,Conditional Test Logic,"{'line': 17, 'column': 23, 'index': 725}","  15 | import { getForcedDisplacement } from '../../../../../util/impact';
  16 |
> 17 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  18 |   describe(`on ${axis.direction} axis`, () => {
  19 |     const preset = getPreset(axis);
  20 |     const withCombineEnabled: DroppableDimension = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/combine/when-combining.spec.js,Lazy Test,"{'line': 38, 'column': 21, 'index': 1432}","  36 |       it('should move onto a displaced center - the initial visible center', () => {
  37 |         const impact: DragImpact = {
> 38 |           displaced: getForcedDisplacement({
     |                     ^ Lazy Test
  39 |             visible: [
  40 |               {
  41 |                 dimension: preset.inHome3,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/combine/when-combining.spec.js,Lazy Test,"{'line': 76, 'column': 21, 'index': 2595}","  74 |         // inHome2 would have moved forward and is now moving backwards
  75 |         const impact: DragImpact = {
> 76 |           displaced: getForcedDisplacement({
     |                     ^ Lazy Test
  77 |             visible: [{ dimension: preset.inHome4, shouldAnimate: false }],
  78 |           }),
  79 |           displacedBy,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/combine/when-combining.spec.js,Lazy Test,"{'line': 111, 'column': 21, 'index': 3719}","  109 |         // and then moving onto inHome1
  110 |         const impact: DragImpact = {
> 111 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  112 |             // inHome2 not displaced as it is the dragging item
  113 |             visible: [
  114 |               {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/get-center-from-impact/get-page-border-box-center/combine/when-combining.spec.js,Lazy Test,"{'line': 157, 'column': 21, 'index': 5087}","  155 |         // moving inHome2 backwards onto inHome1
  156 |         const impact: DragImpact = {
> 157 |           displaced: getForcedDisplacement({
      |                     ^ Lazy Test
  158 |             // inHome2 not displaced as it is the dragging item
  159 |             visible: [
  160 |               {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/with-placeholder.spec.js,Conditional Test Logic,"{'line': 33, 'column': 23, 'index': 1030}","  31 | const gap: number = 10;
  32 |
> 33 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  34 |   describe(`on ${axis.direction} axis`, () => {
  35 |     const descriptor: DroppableDescriptor = {
  36 |       id: 'foo',",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/with-placeholder.spec.js,Eager Test,"{'line': 248, 'column': 8, 'index': 7976}","  246 |         const increasedBy: Position = patch(axis.line, excess);
  247 |         const active: ?Rect = withFrame.subject.active;
> 248 |         invariant(active);
      |        ^ Eager Test
  249 |         const expected: DroppableSubject = {
  250 |           // unchanged
  251 |           page: withFrame.subject.page,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/with-placeholder.spec.js,Eager Test,"{'line': 267, 'column': 8, 'index': 8592}","  265 |         // max scroll change
  266 |         const newFrame: ?Scrollable = result.frame;
> 267 |         invariant(newFrame);
      |        ^ Eager Test
  268 |         expect(originalFrame.scroll.max).not.toEqual(newFrame.scroll.max);
  269 |         expect(newFrame.scroll.max).toEqual(
  270 |           add(originalFrame.scroll.max, increasedBy),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/with-placeholder.spec.js,Eager Test,"{'line': 333, 'column': 8, 'index': 10889}","  331 |
  332 |         const active: ?Rect = virtual.subject.active;
> 333 |         invariant(active);
      |        ^ Eager Test
  334 |         const expected: DroppableSubject = {
  335 |           // unchanged
  336 |           page: virtual.subject.page,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/with-placeholder.spec.js,Eager Test,"{'line': 352, 'column': 8, 'index': 11514}","  350 |         // max scroll change
  351 |         const newFrame: ?Scrollable = result.frame;
> 352 |         invariant(newFrame);
      |        ^ Eager Test
  353 |         expect(originalFrame.scroll.max).not.toEqual(newFrame.scroll.max);
  354 |         expect(newFrame.scroll.max).toEqual(
  355 |           add(originalFrame.scroll.max, increasedBy),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/with-placeholder.spec.js,Lazy Test,"{'line': 151, 'column': 10, 'index': 4702}","  149 |
  150 |           const active: ?Rect = withoutFrame.subject.active;
> 151 |           invariant(active);
      |          ^ Lazy Test
  152 |           const expected: DroppableSubject = {
  153 |             // unchanged
  154 |             page: withoutFrame.subject.page,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/with-placeholder.spec.js,Lazy Test,"{'line': 231, 'column': 8, 'index': 7382}","  229 |         // no change in frame or scroll
  230 |         const newFrame: ?Scrollable = result.frame;
> 231 |         invariant(newFrame);
      |        ^ Lazy Test
  232 |         expect(originalFrame.scroll.max).toEqual(newFrame.scroll.max);
  233 |         expect(originalFrame).toEqual(newFrame);
  234 |       });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/with-placeholder.spec.js,Lazy Test,"{'line': 248, 'column': 8, 'index': 7976}","  246 |         const increasedBy: Position = patch(axis.line, excess);
  247 |         const active: ?Rect = withFrame.subject.active;
> 248 |         invariant(active);
      |        ^ Lazy Test
  249 |         const expected: DroppableSubject = {
  250 |           // unchanged
  251 |           page: withFrame.subject.page,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/with-placeholder.spec.js,Lazy Test,"{'line': 333, 'column': 8, 'index': 10889}","  331 |
  332 |         const active: ?Rect = virtual.subject.active;
> 333 |         invariant(active);
      |        ^ Lazy Test
  334 |         const expected: DroppableSubject = {
  335 |           // unchanged
  336 |           page: virtual.subject.page,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/scroll-droppable.spec.js,Eager Test,"{'line': 72, 'column': 2, 'index': 1808}","  70 |
  71 |   const originalFrame: ?Scrollable = droppable.frame;
> 72 |   invariant(originalFrame);
     |  ^ Eager Test
  73 |   // original frame
  74 |   expect(originalFrame.pageMarginBox).toEqual(framePage.marginBox);
  75 |   // subject is currently clipped by the frame",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/scroll-droppable.spec.js,Eager Test,"{'line': 82, 'column': 2, 'index': 2233}","  80 |   const updated: DroppableDimension = scrollDroppable(droppable, newScroll);
  81 |   const updatedFrame: ?Scrollable = updated.frame;
> 82 |   invariant(updatedFrame);
     |  ^ Eager Test
  83 |
  84 |   // unchanged frame client
  85 |   expect(updatedFrame.frameClient).toEqual(originalFrame.frameClient);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/scroll-droppable.spec.js,Eager Test,"{'line': 158, 'column': 2, 'index': 4066}","  156 |   });
  157 |   const originalFrame: ?Scrollable = scrollable.frame;
> 158 |   invariant(originalFrame);
      |  ^ Eager Test
  159 |
  160 |   const scrolled: DroppableDimension = scrollDroppable(scrollable, {
  161 |     x: 300,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/scroll-droppable.spec.js,Eager Test,"{'line': 167, 'column': 2, 'index': 4279}","  165 |   // current is larger than max
  166 |   const updatedFrame: ?Scrollable = scrolled.frame;
> 167 |   invariant(updatedFrame);
      |  ^ Eager Test
  168 |   expect(updatedFrame.scroll.current).toEqual({
  169 |     x: 300,
  170 |     y: 300,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/scroll-droppable.spec.js,Lazy Test,"{'line': 72, 'column': 2, 'index': 1808}","  70 |
  71 |   const originalFrame: ?Scrollable = droppable.frame;
> 72 |   invariant(originalFrame);
     |  ^ Lazy Test
  73 |   // original frame
  74 |   expect(originalFrame.pageMarginBox).toEqual(framePage.marginBox);
  75 |   // subject is currently clipped by the frame",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/scroll-droppable.spec.js,Lazy Test,"{'line': 158, 'column': 2, 'index': 4066}","  156 |   });
  157 |   const originalFrame: ?Scrollable = scrollable.frame;
> 158 |   invariant(originalFrame);
      |  ^ Lazy Test
  159 |
  160 |   const scrolled: DroppableDimension = scrollDroppable(scrollable, {
  161 |     x: 300,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/get-subject.spec.js,Conditional Test Logic,"{'line': 78, 'column': 25, 'index': 1933}","  76 |
  77 | it('should increase the subject by a placeholder', () => {
> 78 |   [vertical, horizontal].forEach((axis: Axis) => {
     |                         ^ Conditional Test Logic
  79 |     const increasedBy: Position = patch(axis.line, 100);
  80 |
  81 |     const result: DroppableSubject = getSubject({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/get-droppable.spec.js,Lazy Test,"{'line': 110, 'column': 6, 'index': 2374}","  108 |
  109 |     it('should offset the frame client by the window scroll', () => {
> 110 |       invariant(dimension.frame);
      |      ^ Lazy Test
  111 |       expect(dimension.frame.pageMarginBox).toEqual(page.marginBox);
  112 |     });
  113 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/droppable/get-droppable.spec.js,Lazy Test,"{'line': 207, 'column': 6, 'index': 5265}","  205 |       // Not clipped
  206 |       expect(droppable.subject.active).toEqual(expandedPage.marginBox);
> 207 |       invariant(droppable.frame);
      |      ^ Lazy Test
  208 |       expect(droppable.frame.shouldClipSubject).toBe(false);
  209 |     });
  210 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/jump-scroller.spec.js,Conditional Test Logic,"{'line': 72, 'column': 23, 'index': 1783}","  70 | });
  71 |
> 72 | [vertical, horizontal].forEach((axis: Axis) => {
     |                       ^ Conditional Test Logic
  73 |   describe(`on the ${axis.direction} axis`, () => {
  74 |     const preset = getPreset(axis);
  75 |     const state = getStatePreset(axis);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/choosing-the-right-scroller.spec.js,Duplicate Assert,"{'line': 66, 'column': 2, 'index': 1741}","  64 |   scroller.start(onCenter('FLUID'));
  65 |   requestAnimationFrame.flush();
> 66 |   expect(mocks.scrollWindow).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  67 |
  68 |   // now scrolling on visibile edge. Should cause a big auto scroll
  69 |   // this will be done with the fluid scroller",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/choosing-the-right-scroller.spec.js,Duplicate Assert,"{'line': 72, 'column': 2, 'index': 1977}","  70 |   scroller.scroll(onEnd('FLUID'));
  71 |   requestAnimationFrame.step();
> 72 |   expect(mocks.scrollWindow).toHaveBeenCalled();
     |  ^ Duplicate Assert
  73 | });
  74 |
  75 | it('should use the jump scroller when in SNAP mode and there is a jumpScrollerRequest', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/choosing-the-right-scroller.spec.js,Duplicate Assert,"{'line': 82, 'column': 2, 'index': 2338}","  80 |   scroller.start(onCenter('SNAP'));
  81 |   requestAnimationFrame.flush();
> 82 |   expect(mocks.scrollWindow).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  83 |
  84 |   // now scrolling on visibile edge. Should not cause an auto scroll because we are in SNAP mode
  85 |   scroller.scroll(onEnd('SNAP'));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/choosing-the-right-scroller.spec.js,Duplicate Assert,"{'line': 82, 'column': 2, 'index': 2338}","  80 |   scroller.start(onCenter('SNAP'));
  81 |   requestAnimationFrame.flush();
> 82 |   expect(mocks.scrollWindow).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  83 |
  84 |   // now scrolling on visibile edge. Should not cause an auto scroll because we are in SNAP mode
  85 |   scroller.scroll(onEnd('SNAP'));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/choosing-the-right-scroller.spec.js,Duplicate Assert,"{'line': 87, 'column': 2, 'index': 2555}","  85 |   scroller.scroll(onEnd('SNAP'));
  86 |   requestAnimationFrame.step();
> 87 |   expect(mocks.scrollWindow).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  88 |
  89 |   const request: Position = { x: 1, y: 1 };
  90 |   const withRequest: DraggingState = state.scrollJumpRequest(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/choosing-the-right-scroller.spec.js,Duplicate Assert,"{'line': 87, 'column': 2, 'index': 2555}","  85 |   scroller.scroll(onEnd('SNAP'));
  86 |   requestAnimationFrame.step();
> 87 |   expect(mocks.scrollWindow).not.toHaveBeenCalled();
     |  ^ Duplicate Assert
  88 |
  89 |   const request: Position = { x: 1, y: 1 };
  90 |   const withRequest: DraggingState = state.scrollJumpRequest(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/choosing-the-right-scroller.spec.js,Duplicate Assert,"{'line': 96, 'column': 2, 'index': 2821}","  94 |   scroller.scroll(withRequest);
  95 |   requestAnimationFrame.step();
> 96 |   expect(mocks.scrollWindow).toHaveBeenCalled();
     |  ^ Duplicate Assert
  97 | });
  98 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 85, 'column': 6, 'index': 2669}","  83 |       );
  84 |
> 85 |       expect(mocks.scrollWindow).not.toHaveBeenCalled();
     |      ^ Duplicate Assert
  86 |       requestAnimationFrame.step();
  87 |       expect(mocks.scrollWindow).toHaveBeenCalled();
  88 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 87, 'column': 6, 'index': 2762}","  85 |       expect(mocks.scrollWindow).not.toHaveBeenCalled();
  86 |       requestAnimationFrame.step();
> 87 |       expect(mocks.scrollWindow).toHaveBeenCalled();
     |      ^ Duplicate Assert
  88 |     });
  89 |
  90 |     it('should scroll if moving beyond the start threshold', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 103, 'column': 6, 'index': 3208}","  101 |       );
  102 |
> 103 |       expect(mocks.scrollWindow).not.toHaveBeenCalled();
      |      ^ Duplicate Assert
  104 |
  105 |       // only called after a frame
  106 |       requestAnimationFrame.step();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 107, 'column': 6, 'index': 3337}","  105 |       // only called after a frame
  106 |       requestAnimationFrame.step();
> 107 |       expect(mocks.scrollWindow).toHaveBeenCalled();
      |      ^ Duplicate Assert
  108 |       // moving forwards
  109 |       const request: Position = mocks.scrollWindow.mock.calls[0][0];
  110 |       expect(request[axis.line]).toBeGreaterThan(0);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 125, 'column': 6, 'index': 4001}","  123 |       // this will opt out of time dampening
  124 |       startWithNoScroll(scroller);
> 125 |       expect(mocks.scrollWindow).not.toHaveBeenCalled();
      |      ^ Duplicate Assert
  126 |
  127 |       scroller.scroll(
  128 |         dragTo({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 135, 'column': 6, 'index': 4250}","  133 |       );
  134 |       requestAnimationFrame.step();
> 135 |       expect(mocks.scrollWindow).toHaveBeenCalledTimes(1);
      |      ^ Duplicate Assert
  136 |       const scroll1: Position = (mocks.scrollWindow.mock.calls[0][0]: any);
  137 |
  138 |       scroller.scroll(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 146, 'column': 6, 'index': 4575}","  144 |       );
  145 |       requestAnimationFrame.step();
> 146 |       expect(mocks.scrollWindow).toHaveBeenCalledTimes(2);
      |      ^ Duplicate Assert
  147 |       const scroll2: Position = (mocks.scrollWindow.mock.calls[1][0]: any);
  148 |
  149 |       expect(scroll1[axis.line]).toBeLessThan(scroll2[axis.line]);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 216, 'column': 6, 'index': 6703}","  214 |
  215 |       requestAnimationFrame.step();
> 216 |       expect(mocks.scrollWindow).toHaveBeenCalledTimes(1);
      |      ^ Duplicate Assert
  217 |       expect(mocks.scrollWindow).toHaveBeenCalledWith(
  218 |         patch(axis.line, config.maxPixelScroll),
  219 |       );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 217, 'column': 6, 'index': 6762}","  215 |       requestAnimationFrame.step();
  216 |       expect(mocks.scrollWindow).toHaveBeenCalledTimes(1);
> 217 |       expect(mocks.scrollWindow).toHaveBeenCalledWith(
      |      ^ Duplicate Assert
  218 |         patch(axis.line, config.maxPixelScroll),
  219 |       );
  220 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 283, 'column': 6, 'index': 8663}","  281 |       );
  282 |
> 283 |       expect(mocks.scrollWindow).not.toHaveBeenCalled();
      |      ^ Duplicate Assert
  284 |       requestAnimationFrame.flush();
  285 |       expect(mocks.scrollWindow).toHaveBeenCalled();
  286 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 285, 'column': 6, 'index': 8757}","  283 |       expect(mocks.scrollWindow).not.toHaveBeenCalled();
  284 |       requestAnimationFrame.flush();
> 285 |       expect(mocks.scrollWindow).toHaveBeenCalled();
      |      ^ Duplicate Assert
  286 |     });
  287 |
  288 |     it('should scroll if moving beyond the start threshold', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 301, 'column': 6, 'index': 9206}","  299 |       );
  300 |
> 301 |       expect(mocks.scrollWindow).not.toHaveBeenCalled();
      |      ^ Duplicate Assert
  302 |
  303 |       // only called after a frame
  304 |       requestAnimationFrame.step();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 305, 'column': 6, 'index': 9335}","  303 |       // only called after a frame
  304 |       requestAnimationFrame.step();
> 305 |       expect(mocks.scrollWindow).toHaveBeenCalled();
      |      ^ Duplicate Assert
  306 |       // moving forwards
  307 |       const request: Position = mocks.scrollWindow.mock.calls[0][0];
  308 |       expect(request[axis.line]).toBeLessThan(0);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 320, 'column': 6, 'index': 9966}","  318 |       // this will opt out of time dampening
  319 |       startWithNoScroll(scroller);
> 320 |       expect(mocks.scrollWindow).not.toHaveBeenCalled();
      |      ^ Duplicate Assert
  321 |
  322 |       scroller.scroll(
  323 |         dragTo({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 330, 'column': 6, 'index': 10213}","  328 |       );
  329 |       requestAnimationFrame.step();
> 330 |       expect(mocks.scrollWindow).toHaveBeenCalledTimes(1);
      |      ^ Duplicate Assert
  331 |       const scroll1: Position = (mocks.scrollWindow.mock.calls[0][0]: any);
  332 |
  333 |       scroller.scroll(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 341, 'column': 6, 'index': 10536}","  339 |       );
  340 |       requestAnimationFrame.step();
> 341 |       expect(mocks.scrollWindow).toHaveBeenCalledTimes(2);
      |      ^ Duplicate Assert
  342 |       const scroll2: Position = (mocks.scrollWindow.mock.calls[1][0]: any);
  343 |
  344 |       expect(scroll1[axis.line]).toBeGreaterThan(scroll2[axis.line]);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 411, 'column': 6, 'index': 12680}","  409 |
  410 |       requestAnimationFrame.step();
> 411 |       expect(mocks.scrollWindow).toHaveBeenCalledTimes(1);
      |      ^ Duplicate Assert
  412 |       expect(mocks.scrollWindow).toHaveBeenCalledWith(
  413 |         negate(patch(axis.line, config.maxPixelScroll)),
  414 |       );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Duplicate Assert,"{'line': 412, 'column': 6, 'index': 12739}","  410 |       requestAnimationFrame.step();
  411 |       expect(mocks.scrollWindow).toHaveBeenCalledTimes(1);
> 412 |       expect(mocks.scrollWindow).toHaveBeenCalledWith(
      |      ^ Duplicate Assert
  413 |         negate(patch(axis.line, config.maxPixelScroll)),
  414 |       );
  415 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Magic Number,"{'line': 110, 'column': 49, 'index': 3527}","  108 |       // moving forwards
  109 |       const request: Position = mocks.scrollWindow.mock.calls[0][0];
> 110 |       expect(request[axis.line]).toBeGreaterThan(0);
      |                                                 ^ Magic Number
  111 |     });
  112 |
  113 |     it('should get faster the closer to the max speed point', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Magic Number,"{'line': 152, 'column': 47, 'index': 4840}","  150 |
  151 |       // validation
> 152 |       expect(scroll1[axis.crossAxisLine]).toBe(0);
      |                                               ^ Magic Number
  153 |       expect(scroll2[axis.crossAxisLine]).toBe(0);
  154 |     });
  155 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Magic Number,"{'line': 153, 'column': 47, 'index': 4891}","  151 |       // validation
  152 |       expect(scroll1[axis.crossAxisLine]).toBe(0);
> 153 |       expect(scroll2[axis.crossAxisLine]).toBe(0);
      |                                               ^ Magic Number
  154 |     });
  155 |
  156 |     it('should have the top speed at the max speed point', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Magic Number,"{'line': 308, 'column': 46, 'index': 9522}","  306 |       // moving forwards
  307 |       const request: Position = mocks.scrollWindow.mock.calls[0][0];
> 308 |       expect(request[axis.line]).toBeLessThan(0);
      |                                              ^ Magic Number
  309 |     });
  310 |
  311 |     it('should get faster the closer to the max speed point', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Magic Number,"{'line': 347, 'column': 47, 'index': 10804}","  345 |
  346 |       // validation
> 347 |       expect(scroll1[axis.crossAxisLine]).toBe(0);
      |                                               ^ Magic Number
  348 |       expect(scroll2[axis.crossAxisLine]).toBe(0);
  349 |     });
  350 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,Magic Number,"{'line': 348, 'column': 47, 'index': 10855}","  346 |       // validation
  347 |       expect(scroll1[axis.crossAxisLine]).toBe(0);
> 348 |       expect(scroll2[axis.crossAxisLine]).toBe(0);
      |                                               ^ Magic Number
  349 |     });
  350 |
  351 |     it('should have the top speed at the max speed point', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 66, 'column': 4, 'index': 2289}","  64 |     );
  65 |     requestAnimationFrame.flush();
> 66 |     expect(mocks.scrollWindow).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  67 |
  68 |     // would be a max scroll
  69 |     scroller.scroll(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 78, 'column': 4, 'index': 2549}","  76 |
  77 |     requestAnimationFrame.step();
> 78 |     expect(mocks.scrollWindow).toHaveBeenCalledWith(
     |    ^ Duplicate Assert
  79 |       patch(axis.line, config.maxPixelScroll),
  80 |     );
  81 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 99, 'column': 6, 'index': 3119}","   97 |
   98 |       requestAnimationFrame.step();
>  99 |       expect(mocks.scrollWindow).toHaveBeenCalledWith(
      |      ^ Duplicate Assert
  100 |         patch(axis.line, minScroll),
  101 |       );
  102 |     }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 99, 'column': 6, 'index': 3119}","   97 |
   98 |       requestAnimationFrame.step();
>  99 |       expect(mocks.scrollWindow).toHaveBeenCalledWith(
      |      ^ Duplicate Assert
  100 |         patch(axis.line, minScroll),
  101 |       );
  102 |     }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 118, 'column': 6, 'index': 3594}","  116 |
  117 |       requestAnimationFrame.step();
> 118 |       expect(mocks.scrollWindow).toHaveBeenCalledWith(
      |      ^ Duplicate Assert
  119 |         patch(axis.line, minScroll),
  120 |       );
  121 |     }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 118, 'column': 6, 'index': 3594}","  116 |
  117 |       requestAnimationFrame.step();
> 118 |       expect(mocks.scrollWindow).toHaveBeenCalledWith(
      |      ^ Duplicate Assert
  119 |         patch(axis.line, minScroll),
  120 |       );
  121 |     }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 137, 'column': 4, 'index': 4151}","  135 |     );
  136 |     requestAnimationFrame.step();
> 137 |     expect(mocks.scrollWindow).toHaveBeenCalledWith(
      |    ^ Duplicate Assert
  138 |       patch(axis.line, minScroll),
  139 |     );
  140 |     mocks.scrollWindow.mockClear();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 137, 'column': 4, 'index': 4151}","  135 |     );
  136 |     requestAnimationFrame.step();
> 137 |     expect(mocks.scrollWindow).toHaveBeenCalledWith(
      |    ^ Duplicate Assert
  138 |       patch(axis.line, minScroll),
  139 |     );
  140 |     mocks.scrollWindow.mockClear();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 154, 'column': 4, 'index': 4602}","  152 |     // still on the min scroll
  153 |     requestAnimationFrame.step();
> 154 |     expect(mocks.scrollWindow).toHaveBeenCalledWith(
      |    ^ Duplicate Assert
  155 |       patch(axis.line, minScroll),
  156 |     );
  157 |     mocks.scrollWindow.mockClear();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 154, 'column': 4, 'index': 4602}","  152 |     // still on the min scroll
  153 |     requestAnimationFrame.step();
> 154 |     expect(mocks.scrollWindow).toHaveBeenCalledWith(
      |    ^ Duplicate Assert
  155 |       patch(axis.line, minScroll),
  156 |     );
  157 |     mocks.scrollWindow.mockClear();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 170, 'column': 4, 'index': 5070}","  168 |     requestAnimationFrame.step();
  169 |     // still on the min scroll as the % change will be quite low
> 170 |     expect(mocks.scrollWindow).toHaveBeenCalledWith(
      |    ^ Duplicate Assert
  171 |       patch(axis.line, minScroll),
  172 |     );
  173 |     mocks.scrollWindow.mockClear();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 170, 'column': 4, 'index': 5070}","  168 |     requestAnimationFrame.step();
  169 |     // still on the min scroll as the % change will be quite low
> 170 |     expect(mocks.scrollWindow).toHaveBeenCalledWith(
      |    ^ Duplicate Assert
  171 |       patch(axis.line, minScroll),
  172 |     );
  173 |     mocks.scrollWindow.mockClear();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 187, 'column': 4, 'index': 5604}","  185 |     const firstAcceleratedScroll: Position =
  186 |       mocks.scrollWindow.mock.calls[0][0];
> 187 |     expect(firstAcceleratedScroll[axis.line]).toBeGreaterThan(minScroll);
      |    ^ Duplicate Assert
  188 |     expect(firstAcceleratedScroll[axis.line]).toBeLessThan(
  189 |       config.maxPixelScroll,
  190 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 188, 'column': 4, 'index': 5678}","  186 |       mocks.scrollWindow.mock.calls[0][0];
  187 |     expect(firstAcceleratedScroll[axis.line]).toBeGreaterThan(minScroll);
> 188 |     expect(firstAcceleratedScroll[axis.line]).toBeLessThan(
      |    ^ Duplicate Assert
  189 |       config.maxPixelScroll,
  190 |     );
  191 |     mocks.scrollWindow.mockClear();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 206, 'column': 4, 'index': 6229}","  204 |       mocks.scrollWindow.mock.calls[0][0];
  205 |     // is greater in acceleration
> 206 |     expect(secondAcceleratedScroll[axis.line]).toBeGreaterThan(
      |    ^ Duplicate Assert
  207 |       firstAcceleratedScroll[axis.line],
  208 |     );
  209 |     expect(secondAcceleratedScroll[axis.line]).toBeGreaterThan(minScroll);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 209, 'column': 4, 'index': 6341}","  207 |       firstAcceleratedScroll[axis.line],
  208 |     );
> 209 |     expect(secondAcceleratedScroll[axis.line]).toBeGreaterThan(minScroll);
      |    ^ Duplicate Assert
  210 |     expect(secondAcceleratedScroll[axis.line]).toBeLessThan(
  211 |       config.maxPixelScroll,
  212 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 210, 'column': 4, 'index': 6416}","  208 |     );
  209 |     expect(secondAcceleratedScroll[axis.line]).toBeGreaterThan(minScroll);
> 210 |     expect(secondAcceleratedScroll[axis.line]).toBeLessThan(
      |    ^ Duplicate Assert
  211 |       config.maxPixelScroll,
  212 |     );
  213 |     mocks.scrollWindow.mockClear();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 227, 'column': 4, 'index': 6934}","  225 |     const lastAcceleratedScroll: Position = mocks.scrollWindow.mock.calls[0][0];
  226 |     // is greater in acceleration
> 227 |     expect(lastAcceleratedScroll[axis.line]).toBeGreaterThan(
      |    ^ Duplicate Assert
  228 |       firstAcceleratedScroll[axis.line],
  229 |     );
  230 |     expect(lastAcceleratedScroll[axis.line]).toBeGreaterThan(minScroll);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 230, 'column': 4, 'index': 7044}","  228 |       firstAcceleratedScroll[axis.line],
  229 |     );
> 230 |     expect(lastAcceleratedScroll[axis.line]).toBeGreaterThan(minScroll);
      |    ^ Duplicate Assert
  231 |     expect(lastAcceleratedScroll[axis.line]).toEqual(config.maxPixelScroll);
  232 |   });
  233 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,Duplicate Assert,"{'line': 231, 'column': 4, 'index': 7117}","  229 |     );
  230 |     expect(lastAcceleratedScroll[axis.line]).toBeGreaterThan(minScroll);
> 231 |     expect(lastAcceleratedScroll[axis.line]).toEqual(config.maxPixelScroll);
      |    ^ Duplicate Assert
  232 |   });
  233 | });
  234 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/lifecycle.spec.js,Duplicate Assert,"{'line': 13, 'column': 4, 'index': 511}","  11 |   it('should throw if a scroll occurs before a drag as started', () => {
  12 |     const scroller: FluidScroller = getScroller(getMocks());
> 13 |     expect(() => scroller.scroll(base)).toThrow();
     |    ^ Duplicate Assert
  14 |
  15 |     // after a drag
  16 |     scroller.start(base);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/lifecycle.spec.js,Duplicate Assert,"{'line': 13, 'column': 4, 'index': 511}","  11 |   it('should throw if a scroll occurs before a drag as started', () => {
  12 |     const scroller: FluidScroller = getScroller(getMocks());
> 13 |     expect(() => scroller.scroll(base)).toThrow();
     |    ^ Duplicate Assert
  14 |
  15 |     // after a drag
  16 |     scroller.start(base);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/lifecycle.spec.js,Duplicate Assert,"{'line': 19, 'column': 4, 'index': 631}","  17 |     scroller.stop();
  18 |
> 19 |     expect(() => scroller.scroll(base)).toThrow();
     |    ^ Duplicate Assert
  20 |   });
  21 |
  22 |   it('should allow subsequent drags', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/lifecycle.spec.js,Duplicate Assert,"{'line': 19, 'column': 4, 'index': 631}","  17 |     scroller.stop();
  18 |
> 19 |     expect(() => scroller.scroll(base)).toThrow();
     |    ^ Duplicate Assert
  20 |   });
  21 |
  22 |   it('should allow subsequent drags', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 91, 'column': 6, 'index': 2920}","  89 |       );
  90 |
> 91 |       expect(mocks.scrollDroppable).not.toHaveBeenCalled();
     |      ^ Duplicate Assert
  92 |       requestAnimationFrame.step();
  93 |       expect(mocks.scrollDroppable).toHaveBeenCalled();
  94 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 93, 'column': 6, 'index': 3016}","  91 |       expect(mocks.scrollDroppable).not.toHaveBeenCalled();
  92 |       requestAnimationFrame.step();
> 93 |       expect(mocks.scrollDroppable).toHaveBeenCalled();
     |      ^ Duplicate Assert
  94 |     });
  95 |
  96 |     it('should scroll if moving beyond the start threshold', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 110, 'column': 6, 'index': 3500}","  108 |       );
  109 |
> 110 |       expect(mocks.scrollDroppable).not.toHaveBeenCalled();
      |      ^ Duplicate Assert
  111 |
  112 |       // only called after a frame
  113 |       requestAnimationFrame.step();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 114, 'column': 6, 'index': 3632}","  112 |       // only called after a frame
  113 |       requestAnimationFrame.step();
> 114 |       expect(mocks.scrollDroppable).toHaveBeenCalled();
      |      ^ Duplicate Assert
  115 |       // moving forwards
  116 |       const id: DroppableId = mocks.scrollDroppable.mock.calls[0][0];
  117 |       const request: Position = mocks.scrollDroppable.mock.calls[0][1];",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 134, 'column': 6, 'index': 4424}","  132 |       // this will opt out of time dampening
  133 |       startWithNoScroll(scroller);
> 134 |       expect(mocks.scrollDroppable).not.toHaveBeenCalled();
      |      ^ Duplicate Assert
  135 |
  136 |       scroller.scroll(
  137 |         dragTo({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 145, 'column': 6, 'index': 4711}","  143 |       );
  144 |       requestAnimationFrame.step();
> 145 |       expect(mocks.scrollDroppable).toHaveBeenCalledTimes(1);
      |      ^ Duplicate Assert
  146 |       const scroll1: Position = (mocks.scrollDroppable.mock.calls[0][1]: any);
  147 |
  148 |       scroller.scroll(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 157, 'column': 6, 'index': 5077}","  155 |       );
  156 |       requestAnimationFrame.step();
> 157 |       expect(mocks.scrollDroppable).toHaveBeenCalledTimes(2);
      |      ^ Duplicate Assert
  158 |       const scroll2: Position = (mocks.scrollDroppable.mock.calls[1][1]: any);
  159 |
  160 |       expect(scroll1[axis.line]).toBeLessThan(scroll2[axis.line]);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 233, 'column': 6, 'index': 7425}","  231 |
  232 |       requestAnimationFrame.step();
> 233 |       expect(mocks.scrollDroppable).toHaveBeenCalledTimes(1);
      |      ^ Duplicate Assert
  234 |       expect(mocks.scrollDroppable).toHaveBeenCalledWith(
  235 |         scrollable.descriptor.id,
  236 |         patch(axis.line, config.maxPixelScroll),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 234, 'column': 6, 'index': 7487}","  232 |       requestAnimationFrame.step();
  233 |       expect(mocks.scrollDroppable).toHaveBeenCalledTimes(1);
> 234 |       expect(mocks.scrollDroppable).toHaveBeenCalledWith(
      |      ^ Duplicate Assert
  235 |         scrollable.descriptor.id,
  236 |         patch(axis.line, config.maxPixelScroll),
  237 |       );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 304, 'column': 6, 'index': 9553}","  302 |       );
  303 |
> 304 |       expect(mocks.scrollDroppable).not.toHaveBeenCalled();
      |      ^ Duplicate Assert
  305 |       requestAnimationFrame.flush();
  306 |       expect(mocks.scrollDroppable).toHaveBeenCalled();
  307 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 306, 'column': 6, 'index': 9650}","  304 |       expect(mocks.scrollDroppable).not.toHaveBeenCalled();
  305 |       requestAnimationFrame.flush();
> 306 |       expect(mocks.scrollDroppable).toHaveBeenCalled();
      |      ^ Duplicate Assert
  307 |     });
  308 |
  309 |     it('should scroll if moving beyond the start threshold', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 323, 'column': 6, 'index': 10137}","  321 |       );
  322 |
> 323 |       expect(mocks.scrollDroppable).not.toHaveBeenCalled();
      |      ^ Duplicate Assert
  324 |
  325 |       // only called after a frame
  326 |       requestAnimationFrame.step();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 327, 'column': 6, 'index': 10269}","  325 |       // only called after a frame
  326 |       requestAnimationFrame.step();
> 327 |       expect(mocks.scrollDroppable).toHaveBeenCalled();
      |      ^ Duplicate Assert
  328 |       // moving forwards
  329 |       const request: Position = mocks.scrollDroppable.mock.calls[0][1];
  330 |       expect(request[axis.line]).toBeLessThan(0);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 342, 'column': 6, 'index': 10906}","  340 |       // this will opt out of time dampening
  341 |       startWithNoScroll(scroller);
> 342 |       expect(mocks.scrollDroppable).not.toHaveBeenCalled();
      |      ^ Duplicate Assert
  343 |
  344 |       scroller.scroll(
  345 |         dragTo({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 353, 'column': 6, 'index': 11191}","  351 |       );
  352 |       requestAnimationFrame.step();
> 353 |       expect(mocks.scrollDroppable).toHaveBeenCalledTimes(1);
      |      ^ Duplicate Assert
  354 |       const scroll1: Position = (mocks.scrollDroppable.mock.calls[0][1]: any);
  355 |
  356 |       scroller.scroll(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 365, 'column': 6, 'index': 11555}","  363 |       );
  364 |       requestAnimationFrame.step();
> 365 |       expect(mocks.scrollDroppable).toHaveBeenCalledTimes(2);
      |      ^ Duplicate Assert
  366 |       const scroll2: Position = (mocks.scrollDroppable.mock.calls[1][1]: any);
  367 |
  368 |       expect(scroll1[axis.line]).toBeGreaterThan(scroll2[axis.line]);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 441, 'column': 6, 'index': 13915}","  439 |
  440 |       requestAnimationFrame.step();
> 441 |       expect(mocks.scrollDroppable).toHaveBeenCalledTimes(1);
      |      ^ Duplicate Assert
  442 |       expect(mocks.scrollDroppable).toHaveBeenCalledWith(
  443 |         scrolled.descriptor.id,
  444 |         negate(patch(axis.line, config.maxPixelScroll)),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Duplicate Assert,"{'line': 442, 'column': 6, 'index': 13977}","  440 |       requestAnimationFrame.step();
  441 |       expect(mocks.scrollDroppable).toHaveBeenCalledTimes(1);
> 442 |       expect(mocks.scrollDroppable).toHaveBeenCalledWith(
      |      ^ Duplicate Assert
  443 |         scrolled.descriptor.id,
  444 |         negate(patch(axis.line, config.maxPixelScroll)),
  445 |       );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Magic Number,"{'line': 119, 'column': 49, 'index': 3950}","  117 |       const request: Position = mocks.scrollDroppable.mock.calls[0][1];
  118 |       expect(id).toEqual(scrollable.descriptor.id);
> 119 |       expect(request[axis.line]).toBeGreaterThan(0);
      |                                                 ^ Magic Number
  120 |     });
  121 |
  122 |     it('should get faster the closer to the max speed point', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Magic Number,"{'line': 163, 'column': 47, 'index': 5348}","  161 |
  162 |       // validation
> 163 |       expect(scroll1[axis.crossAxisLine]).toBe(0);
      |                                               ^ Magic Number
  164 |       expect(scroll2[axis.crossAxisLine]).toBe(0);
  165 |     });
  166 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Magic Number,"{'line': 164, 'column': 47, 'index': 5399}","  162 |       // validation
  163 |       expect(scroll1[axis.crossAxisLine]).toBe(0);
> 164 |       expect(scroll2[axis.crossAxisLine]).toBe(0);
      |                                               ^ Magic Number
  165 |     });
  166 |
  167 |     it('should have the top speed at the max speed point', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Magic Number,"{'line': 330, 'column': 46, 'index': 10462}","  328 |       // moving forwards
  329 |       const request: Position = mocks.scrollDroppable.mock.calls[0][1];
> 330 |       expect(request[axis.line]).toBeLessThan(0);
      |                                              ^ Magic Number
  331 |     });
  332 |
  333 |     it('should get faster the closer to the max speed point', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Magic Number,"{'line': 371, 'column': 47, 'index': 11829}","  369 |
  370 |       // validation
> 371 |       expect(scroll1[axis.crossAxisLine]).toBe(0);
      |                                               ^ Magic Number
  372 |       expect(scroll2[axis.crossAxisLine]).toBe(0);
  373 |     });
  374 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,Magic Number,"{'line': 372, 'column': 47, 'index': 11880}","  370 |       // validation
  371 |       expect(scroll1[axis.crossAxisLine]).toBe(0);
> 372 |       expect(scroll2[axis.crossAxisLine]).toBe(0);
      |                                               ^ Magic Number
  373 |     });
  374 |
  375 |     it('should have the top speed at the max speed point', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/state/auto-scroll/fluid-scroller/util/for-each.js,Conditional Test Logic,"{'line': 16, 'column': 25, 'index': 469}","  14 |
  15 | export default (block: BlockFn) => {
> 16 |   [vertical, horizontal].forEach((axis: Axis) => {
     |                         ^ Conditional Test Logic
  17 |     describe(`on the ${axis.direction} axis`, () => {
  18 |       beforeEach(() => {
  19 |         requestAnimationFrame.reset();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-timing.spec.js,Duplicate Assert,"{'line': 99, 'column': 2, 'index': 3167}","   97 |
   98 |   // clearing the initial render before a drag
>  99 |   expect(onItemRender).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  100 |   renderTime = null;
  101 |   onItemRender.mockClear();
  102 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-timing.spec.js,Duplicate Assert,"{'line': 124, 'column': 2, 'index': 3990}","  122 |   expect(responders.onBeforeDragStart).toHaveBeenCalledTimes(1);
  123 |   expect(responders.onDragStart).toHaveBeenCalledTimes(1);
> 124 |   expect(onItemRender).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  125 |   unmount();
  126 | });
  127 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-timing.spec.js,Eager Test,"{'line': 48, 'column': 6, 'index': 1531}","  46 |   const responders: Responders = {
  47 |     onBeforeDragStart: jest.fn().mockImplementation(() => {
> 48 |       invariant(!onBeforeDragStartTime, 'onBeforeDragStartTime already set');
     |      ^ Eager Test
  49 |       onBeforeDragStartTime = performance.now();
  50 |     }),
  51 |     onDragStart: jest.fn().mockImplementation(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-timing.spec.js,Eager Test,"{'line': 52, 'column': 6, 'index': 1720}","  50 |     }),
  51 |     onDragStart: jest.fn().mockImplementation(() => {
> 52 |       invariant(!onDragStartTime, 'onDragStartTime already set');
     |      ^ Eager Test
  53 |       onDragStartTime = performance.now();
  54 |     }),
  55 |     onDragEnd: jest.fn(),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-timing.spec.js,Eager Test,"{'line': 58, 'column': 4, 'index': 1926}","  56 |   };
  57 |   const onItemRender = jest.fn().mockImplementation(() => {
> 58 |     invariant(!renderTime, 'renderTime already set');
     |    ^ Eager Test
  59 |     renderTime = performance.now();
  60 |   });
  61 |   // Both list and item will have the same dimensions",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-timing.spec.js,Eager Test,"{'line': 105, 'column': 2, 'index': 3342}","  103 |   // start a drag
  104 |   const handle: HTMLElement = getByTestId('drag-handle');
> 105 |   simpleLift(keyboard, handle);
      |  ^ Eager Test
  106 |   // flushing onDragStart
  107 |   jest.runOnlyPendingTimers();
  108 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-timing.spec.js,Eager Test,"{'line': 110, 'column': 2, 'index': 3461}","  108 |
  109 |   // checking values are set
> 110 |   invariant(onBeforeDragStartTime, 'onBeforeDragStartTime should be set');
      |  ^ Eager Test
  111 |   invariant(onDragStartTime, 'onDragStartTime should be set');
  112 |   invariant(renderTime, 'renderTime should be set');
  113 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-timing.spec.js,Eager Test,"{'line': 111, 'column': 2, 'index': 3536}","  109 |   // checking values are set
  110 |   invariant(onBeforeDragStartTime, 'onBeforeDragStartTime should be set');
> 111 |   invariant(onDragStartTime, 'onDragStartTime should be set');
      |  ^ Eager Test
  112 |   invariant(renderTime, 'renderTime should be set');
  113 |
  114 |   // expected order",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-timing.spec.js,Eager Test,"{'line': 112, 'column': 2, 'index': 3599}","  110 |   invariant(onBeforeDragStartTime, 'onBeforeDragStartTime should be set');
  111 |   invariant(onDragStartTime, 'onDragStartTime should be set');
> 112 |   invariant(renderTime, 'renderTime should be set');
      |  ^ Eager Test
  113 |
  114 |   // expected order
  115 |   // 1. onBeforeDragStart",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-integration.spec.js,Conditional Test Logic,"{'line': 36, 'column': 2, 'index': 1234}","  34 |
  35 | const setRefDimensions = (ref: ?HTMLElement) => {
> 36 |   if (!ref) {
     |  ^ Conditional Test Logic
  37 |     return;
  38 |   }
  39 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-integration.spec.js,Unknown Test,"{'column': 4, 'line': 263}","  261 |
  262 |   describe('before capture', () => {
> 263 |     it('should call the onBeforeDragCapture responder just before the drag starts', () => {
      |    ^ Unknown Test
  264 |       drag.start();
  265 |
  266 |       wasOnBeforeCaptureCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-integration.spec.js,Unknown Test,"{'column': 4, 'line': 274}","  272 |
  273 |   describe('before drag start', () => {
> 274 |     it('should call the onBeforeDragStart responder just before the drag starts', () => {
      |    ^ Unknown Test
  275 |       drag.start();
  276 |
  277 |       wasOnBeforeDragCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-integration.spec.js,Unknown Test,"{'column': 4, 'line': 299}","  297 |
  298 |   describe('drag start', () => {
> 299 |     it('should call the onDragStart responder when a drag starts', () => {
      |    ^ Unknown Test
  300 |       drag.start();
  301 |
  302 |       wasDragStarted();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-integration.spec.js,Unknown Test,"{'column': 4, 'line': 324}","  322 |
  323 |   describe('drag end', () => {
> 324 |     it('should call the onDragEnd responder when a drag ends', () => {
      |    ^ Unknown Test
  325 |       drag.perform();
  326 |
  327 |       wasDragCompleted();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-integration.spec.js,Unknown Test,"{'column': 4, 'line': 330}","  328 |     });
  329 |
> 330 |     it('should call the onDragEnd responder when a drag ends when instantly stopped', () => {
      |    ^ Unknown Test
  331 |       drag.start();
  332 |       drag.stop();
  333 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-integration.spec.js,Unknown Test,"{'column': 4, 'line': 339}","  337 |
  338 |   describe('drag cancel', () => {
> 339 |     it('should call onDragEnd when a drag is canceled', () => {
      |    ^ Unknown Test
  340 |       drag.start();
  341 |       drag.move();
  342 |       drag.cancel();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-integration.spec.js,Unknown Test,"{'column': 4, 'line': 347}","  345 |     });
  346 |
> 347 |     it('should call onDragEnd when a drag is canceled instantly', () => {
      |    ^ Unknown Test
  348 |       drag.start();
  349 |       drag.cancel();
  350 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-integration.spec.js,Unknown Test,"{'column': 4, 'line': 356}","  354 |
  355 |   describe('unmounted mid drag', () => {
> 356 |     it('should cancel a drag if unmounted mid drag', () => {
      |    ^ Unknown Test
  357 |       drag.start();
  358 |
  359 |       wrapper.unmount();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-integration.spec.js,Unknown Test,"{'column': 4, 'line': 366}","  364 |
  365 |   describe('subsequent drags', () => {
> 366 |     it('should publish subsequent drags', () => {
      |    ^ Unknown Test
  367 |       drag.perform();
  368 |       wasDragStarted(1);
  369 |       wasDragCompleted(1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-integration.spec.js,Unknown Test,"{'column': 4, 'line': 376}","  374 |     });
  375 |
> 376 |     it('should publish subsequent drags after a cancel', () => {
      |    ^ Unknown Test
  377 |       drag.start();
  378 |       drag.cancel();
  379 |       wasOnBeforeDragCalled(1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/responders-integration.spec.js,Unknown Test,"{'column': 4, 'line': 429}","  427 |     });
  428 |
> 429 |     it('should allow you to change responders between drags', () => {
      |    ^ Unknown Test
  430 |       const newResponders: Responders = {
  431 |         onDragStart: jest.fn(),
  432 |         onDragEnd: jest.fn(),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Conditional Test Logic,"{'line': 65, 'column': 4, 'index': 1724}","  63 | class InnerList extends React.Component<InnerListProps> {
  64 |   shouldComponentUpdate(props: InnerListProps) {
> 65 |     if (this.props.tasks === props.tasks) {
     |    ^ Conditional Test Logic
  66 |       return false;
  67 |     }
  68 |     return true;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Conditional Test Logic,"{'line': 87, 'column': 2, 'index': 2325}","  85 |
  86 | const setDroppableBounds = (ref: ?HTMLElement) => {
> 87 |   if (!ref) {
     |  ^ Conditional Test Logic
  88 |     return;
  89 |   }
  90 |   // $FlowFixMe - only reliable way to do this",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Conditional Test Logic,"{'line': 107, 'column': 4, 'index': 2664}","  105 |   onRender: jest.fn(),
  106 |   setRef: (ref: ?HTMLElement) => {
> 107 |     if (!ref) {
      |    ^ Conditional Test Logic
  108 |       return;
  109 |     }
  110 |     // $FlowFixMe - only reliable way to do this",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Conditional Test Logic,"{'line': 125, 'column': 4, 'index': 2992}","  123 |   onRender: jest.fn(),
  124 |   setRef: (ref: ?HTMLElement) => {
> 125 |     if (!ref) {
      |    ^ Conditional Test Logic
  126 |       return;
  127 |     }
  128 |     // $FlowFixMe - only reliable way to do this",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Conditional Test Logic,"{'line': 147, 'column': 4, 'index': 3397}","  145 |
  146 |   onDragEnd = (result: DropResult) => {
> 147 |     if (!result.destination) {
      |    ^ Conditional Test Logic
  148 |       return;
  149 |     }
  150 |     this.setState({",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Duplicate Assert,"{'line': 191, 'column': 2, 'index': 4531}","  189 |
  190 |   // clearing the initial render before a drag
> 191 |   expect(first.onRender).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  192 |   expect(second.onRender).toHaveBeenCalledTimes(1);
  193 |   clearRenderMocks();
  194 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Duplicate Assert,"{'line': 192, 'column': 2, 'index': 4582}","  190 |   // clearing the initial render before a drag
  191 |   expect(first.onRender).toHaveBeenCalledTimes(1);
> 192 |   expect(second.onRender).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  193 |   clearRenderMocks();
  194 |
  195 |   // start a drag",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Duplicate Assert,"{'line': 203, 'column': 2, 'index': 4875}","  201 |
  202 |   // initial lift will render the first item
> 203 |   expect(first.onRender).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  204 |   // it will also render the second item as it needs to be pushed down
  205 |   expect(second.onRender).toHaveBeenCalledTimes(1);
  206 |   clearRenderMocks();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Duplicate Assert,"{'line': 205, 'column': 2, 'index': 4997}","  203 |   expect(first.onRender).toHaveBeenCalledTimes(1);
  204 |   // it will also render the second item as it needs to be pushed down
> 205 |   expect(second.onRender).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  206 |   clearRenderMocks();
  207 |
  208 |   fireEvent.keyDown(handle, { keyCode: keyCodes.arrowDown });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Duplicate Assert,"{'line': 214, 'column': 2, 'index': 5245}","  212 |   // item1: moving down
  213 |   // item2: moving up
> 214 |   expect(first.onRender).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  215 |   expect(second.onRender).toHaveBeenCalledTimes(1);
  216 |   clearRenderMocks();
  217 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Duplicate Assert,"{'line': 215, 'column': 2, 'index': 5296}","  213 |   // item2: moving up
  214 |   expect(first.onRender).toHaveBeenCalledTimes(1);
> 215 |   expect(second.onRender).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  216 |   clearRenderMocks();
  217 |
  218 |   // drop (there is no animation because already in the home spot)",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Duplicate Assert,"{'line': 222, 'column': 2, 'index': 5537}","  220 |
  221 |   // only a single render for the reorder and connected component update
> 222 |   expect(first.onRender).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  223 |   expect(second.onRender).toHaveBeenCalledTimes(1);
  224 |
  225 |   // checking for no post renders",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Duplicate Assert,"{'line': 223, 'column': 2, 'index': 5588}","  221 |   // only a single render for the reorder and connected component update
  222 |   expect(first.onRender).toHaveBeenCalledTimes(1);
> 223 |   expect(second.onRender).toHaveBeenCalledTimes(1);
      |  ^ Duplicate Assert
  224 |
  225 |   // checking for no post renders
  226 |   clearRenderMocks();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Duplicate Assert,"{'line': 229, 'column': 2, 'index': 5753}","  227 |   requestAnimationFrame.flush();
  228 |   jest.runAllTimers();
> 229 |   expect(first.onRender).toHaveBeenCalledTimes(0);
      |  ^ Duplicate Assert
  230 |   expect(second.onRender).toHaveBeenCalledTimes(0);
  231 |
  232 |   unmount();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/reorder-render-sync.spec.js,Duplicate Assert,"{'line': 230, 'column': 2, 'index': 5804}","  228 |   jest.runAllTimers();
  229 |   expect(first.onRender).toHaveBeenCalledTimes(0);
> 230 |   expect(second.onRender).toHaveBeenCalledTimes(0);
      |  ^ Duplicate Assert
  231 |
  232 |   unmount();
  233 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/disable-on-start.spec.js,Duplicate Assert,"{'line': 121, 'column': 2, 'index': 3312}","  119 |
  120 |   // onDragUpdate will occur after setTimeout
> 121 |   expect(responders.onDragUpdate).not.toHaveBeenCalled();
      |  ^ Duplicate Assert
  122 |
  123 |   jest.runOnlyPendingTimers();
  124 |   // an update should be fired as the home location has changed",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/disable-on-start.spec.js,Duplicate Assert,"{'line': 131, 'column': 2, 'index': 3602}","  129 |     combine: null,
  130 |   };
> 131 |   expect(responders.onDragUpdate).toHaveBeenCalledWith(update);
      |  ^ Duplicate Assert
  132 | });
  133 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/body-removal-before-unmount.spec.js,Eager Test,"{'line': 28, 'column': 4, 'index': 850}","  26 |
  27 |     // mid drag
> 28 |     simpleLift(control, handle);
     |    ^ Eager Test
  29 |     expect(isDragging(handle)).toEqual(true);
  30 |
  31 |     expect(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/body-removal-before-unmount.spec.js,Eager Test,"{'line': 29, 'column': 11, 'index': 890}","  27 |     // mid drag
  28 |     simpleLift(control, handle);
> 29 |     expect(isDragging(handle)).toEqual(true);
     |           ^ Eager Test
  30 |
  31 |     expect(() => {
  32 |       getBodyElement().innerHTML = '';",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/server-side-rendering/server-rendering.spec.js,Duplicate Assert,"{'line': 44, 'column': 2, 'index': 1202}","  42 |   const result: string = renderToString(<App />);
  43 |
> 44 |   expect(result).toEqual(expect.any(String));
     |  ^ Duplicate Assert
  45 |   expect(result).toMatchSnapshot();
  46 |   expectConsoleNotCalled();
  47 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/server-side-rendering/server-rendering.spec.js,Duplicate Assert,"{'line': 45, 'column': 2, 'index': 1248}","  43 |
  44 |   expect(result).toEqual(expect.any(String));
> 45 |   expect(result).toMatchSnapshot();
     |  ^ Duplicate Assert
  46 |   expectConsoleNotCalled();
  47 | });
  48 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/server-side-rendering/server-rendering.spec.js,Duplicate Assert,"{'line': 52, 'column': 2, 'index': 1430}","  50 |   const result: string = renderToStaticMarkup(<App />);
  51 |
> 52 |   expect(result).toEqual(expect.any(String));
     |  ^ Duplicate Assert
  53 |   expect(result).toMatchSnapshot();
  54 |   expectConsoleNotCalled();
  55 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/server-side-rendering/server-rendering.spec.js,Duplicate Assert,"{'line': 53, 'column': 2, 'index': 1476}","  51 |
  52 |   expect(result).toEqual(expect.any(String));
> 53 |   expect(result).toMatchSnapshot();
     |  ^ Duplicate Assert
  54 |   expectConsoleNotCalled();
  55 | });
  56 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/server-side-rendering/server-rendering.spec.js,Duplicate Assert,"{'line': 60, 'column': 2, 'index': 1734}","  58 |   const firstRender = renderToString(<App />);
  59 |   const nextRenderBeforeReset = renderToString(<App />);
> 60 |   expect(firstRender).not.toEqual(nextRenderBeforeReset);
     |  ^ Duplicate Assert
  61 |
  62 |   resetServerContext();
  63 |   const nextRenderAfterReset = renderToString(<App />);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/server-side-rendering/server-rendering.spec.js,Duplicate Assert,"{'line': 64, 'column': 2, 'index': 1873}","  62 |   resetServerContext();
  63 |   const nextRenderAfterReset = renderToString(<App />);
> 64 |   expect(firstRender).toEqual(nextRenderAfterReset);
     |  ^ Duplicate Assert
  65 |   expectConsoleNotCalled();
  66 | });
  67 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/server-side-rendering/client-hydration.spec.js,Eager Test,"{'line': 29, 'column': 2, 'index': 1028}","  27 |   const error = jest.spyOn(console, 'error').mockImplementation(noop);
  28 |
> 29 |   resetServerContext();
     |  ^ Eager Test
  30 |   const serverHTML: string = ReactDOMServer.renderToString(<App />);
  31 |
  32 |   error.mock.calls.forEach((call) => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/server-side-rendering/client-hydration.spec.js,Eager Test,"{'line': 41, 'column': 2, 'index': 1384}","  39 |   // would be done client side
  40 |   // would have a fresh server context on the client
> 41 |   resetServerContext();
     |  ^ Eager Test
  42 |   const el = document.createElement('div');
  43 |   el.innerHTML = serverHTML;
  44 |   getBodyElement().appendChild(el);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 77, 'column': 6, 'index': 2733}","  75 |       expandedMouse.move(handle, droppable.client.borderBox.center);
  76 |
> 77 |       expect(isDragging(handle)).toBe(true);
     |      ^ Duplicate Assert
  78 |       expect(isOver(handle)).toBe(droppable.descriptor.id);
  79 |       expect(hasPlaceholder(droppable.descriptor.id, container)).toBe(true);
  80 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 79, 'column': 6, 'index': 2838}","  77 |       expect(isDragging(handle)).toBe(true);
  78 |       expect(isOver(handle)).toBe(droppable.descriptor.id);
> 79 |       expect(hasPlaceholder(droppable.descriptor.id, container)).toBe(true);
     |      ^ Duplicate Assert
  80 |
  81 |       withWarn(() => {
  82 |         const event: Event = new Event('error');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 86, 'column': 6, 'index': 3033}","  84 |       });
  85 |
> 86 |       expect(isDragging(handle)).toBe(false);
     |      ^ Duplicate Assert
  87 |       expect(hasPlaceholder(droppable.descriptor.id, container)).toBe(false);
  88 |
  89 |       unmount();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 87, 'column': 6, 'index': 3079}","  85 |
  86 |       expect(isDragging(handle)).toBe(false);
> 87 |       expect(hasPlaceholder(droppable.descriptor.id, container)).toBe(false);
     |      ^ Duplicate Assert
  88 |
  89 |       unmount();
  90 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 126, 'column': 8, 'index': 4618}","  124 |
  125 |         expandedMouse.startDrop(handle);
> 126 |         expect(hasPlaceholder(droppable.descriptor.id, container)).toBe(true);
      |        ^ Duplicate Assert
  127 |
  128 |         // placeholder removed straight after drop
  129 |         expandedMouse.finishDrop(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 130, 'column': 8, 'index': 4791}","  128 |         // placeholder removed straight after drop
  129 |         expandedMouse.finishDrop(handle);
> 130 |         expect(hasPlaceholder(droppable.descriptor.id, container)).toBe(false);
      |        ^ Duplicate Assert
  131 |
  132 |         unmount();
  133 |       });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 147, 'column': 6, 'index': 5406}","  145 |
  146 |       // placeholder present when over nothing
> 147 |       expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(true);
      |      ^ Duplicate Assert
  148 |
  149 |       // placeholder present when drop started
  150 |       expandedMouse.startDrop(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 147, 'column': 6, 'index': 5406}","  145 |
  146 |       // placeholder present when over nothing
> 147 |       expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(true);
      |      ^ Duplicate Assert
  148 |
  149 |       // placeholder present when drop started
  150 |       expandedMouse.startDrop(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 151, 'column': 6, 'index': 5572}","  149 |       // placeholder present when drop started
  150 |       expandedMouse.startDrop(handle);
> 151 |       expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(true);
      |      ^ Duplicate Assert
  152 |
  153 |       // placeholder gone after drop finished
  154 |       expandedMouse.finishDrop(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 151, 'column': 6, 'index': 5572}","  149 |       // placeholder present when drop started
  150 |       expandedMouse.startDrop(handle);
> 151 |       expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(true);
      |      ^ Duplicate Assert
  152 |
  153 |       // placeholder gone after drop finished
  154 |       expandedMouse.finishDrop(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 155, 'column': 6, 'index': 5738}","  153 |       // placeholder gone after drop finished
  154 |       expandedMouse.finishDrop(handle);
> 155 |       expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(false);
      |      ^ Duplicate Assert
  156 |     });
  157 |   });
  158 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 170, 'column': 6, 'index': 6416}","  168 |       expandedMouse.startDrop(handle);
  169 |       // foreign placeholder remaining in place
> 170 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
      |      ^ Duplicate Assert
  171 |         true,
  172 |       );
  173 |       // home placeholder remaining in place",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 174, 'column': 6, 'index': 6560}","  172 |       );
  173 |       // home placeholder remaining in place
> 174 |       expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(true);
      |      ^ Duplicate Assert
  175 |
  176 |       // gone after drop finished
  177 |       expandedMouse.finishDrop(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 174, 'column': 6, 'index': 6560}","  172 |       );
  173 |       // home placeholder remaining in place
> 174 |       expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(true);
      |      ^ Duplicate Assert
  175 |
  176 |       // gone after drop finished
  177 |       expandedMouse.finishDrop(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 180, 'column': 6, 'index': 6756}","  178 |
  179 |       // foreign placeholder is now gone
> 180 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
      |      ^ Duplicate Assert
  181 |         false,
  182 |       );
  183 |       // home placeholder is still around and will now animate closed",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 184, 'column': 6, 'index': 6926}","  182 |       );
  183 |       // home placeholder is still around and will now animate closed
> 184 |       expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(true);
      |      ^ Duplicate Assert
  185 |
  186 |       // placeholder is now collapsing
  187 |       const placeholder: HTMLElement = getPlaceholder(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 184, 'column': 6, 'index': 6926}","  182 |       );
  183 |       // home placeholder is still around and will now animate closed
> 184 |       expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(true);
      |      ^ Duplicate Assert
  185 |
  186 |       // placeholder is now collapsing
  187 |       const placeholder: HTMLElement = getPlaceholder(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 197, 'column': 6, 'index': 7337}","  195 |
  196 |       // placeholder is gone
> 197 |       expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(false);
      |      ^ Duplicate Assert
  198 |     });
  199 |   });
  200 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 213, 'column': 8, 'index': 8036}","  211 |         expandedMouse.powerDrop(handle);
  212 |         // placeholder still here + animating closed
> 213 |         expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(true);
      |        ^ Duplicate Assert
  214 |         const placeholder: HTMLElement = getPlaceholder(
  215 |           preset.home.descriptor.id,
  216 |           container,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 234, 'column': 8, 'index': 8756}","  232 |
  233 |         // placeholder is gone from home (it got flushed)
> 234 |         expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(
      |        ^ Duplicate Assert
  235 |           false,
  236 |         );
  237 |       }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 266, 'column': 6, 'index': 9863}","  264 |       expandedMouse.move(handle, preset.foreign.client.borderBox.center);
  265 |
> 266 |       expect(isOver(handle)).toBe(preset.foreign.descriptor.id);
      |      ^ Duplicate Assert
  267 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
  268 |         true,
  269 |       );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 273, 'column': 6, 'index': 10130}","  271 |       // moving back over home
  272 |       expandedMouse.move(handle, preset.home.client.borderBox.center);
> 273 |       expect(isOver(handle)).toBe(preset.home.descriptor.id);
      |      ^ Duplicate Assert
  274 |
  275 |       // foreign placeholder is now animating closed
  276 |       const placeholder: HTMLElement = getPlaceholder(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 292, 'column': 6, 'index': 10854}","  290 |       expandedMouse.move(handle, preset.foreign.client.borderBox.center);
  291 |
> 292 |       expect(isOver(handle)).toBe(preset.foreign.descriptor.id);
      |      ^ Duplicate Assert
  293 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
  294 |         true,
  295 |       );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 293, 'column': 6, 'index': 10919}","  291 |
  292 |       expect(isOver(handle)).toBe(preset.foreign.descriptor.id);
> 293 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
      |      ^ Duplicate Assert
  294 |         true,
  295 |       );
  296 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 293, 'column': 6, 'index': 10919}","  291 |
  292 |       expect(isOver(handle)).toBe(preset.foreign.descriptor.id);
> 293 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
      |      ^ Duplicate Assert
  294 |         true,
  295 |       );
  296 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 299, 'column': 6, 'index': 11121}","  297 |       // moving back over home
  298 |       expandedMouse.move(handle, preset.home.client.borderBox.center);
> 299 |       expect(isOver(handle)).toBe(preset.home.descriptor.id);
      |      ^ Duplicate Assert
  300 |
  301 |       // foreign placeholder is now animating closed
  302 |       const placeholder: HTMLElement = getPlaceholder(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 311, 'column': 6, 'index': 11528}","  309 |       expandedMouse.startDrop(handle);
  310 |       // placeholder still in foreign list
> 311 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
      |      ^ Duplicate Assert
  312 |         true,
  313 |       );
  314 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 311, 'column': 6, 'index': 11528}","  309 |       expandedMouse.startDrop(handle);
  310 |       // placeholder still in foreign list
> 311 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
      |      ^ Duplicate Assert
  312 |         true,
  313 |       );
  314 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Duplicate Assert,"{'line': 324, 'column': 6, 'index': 11969}","  322 |       expect(isDragging(second)).toBe(true);
  323 |       expect(isOver(second)).toBe(preset.home.descriptor.id);
> 324 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
      |      ^ Duplicate Assert
  325 |         false,
  326 |       );
  327 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Eager Test,"{'line': 77, 'column': 13, 'index': 2740}","  75 |       expandedMouse.move(handle, droppable.client.borderBox.center);
  76 |
> 77 |       expect(isDragging(handle)).toBe(true);
     |             ^ Eager Test
  78 |       expect(isOver(handle)).toBe(droppable.descriptor.id);
  79 |       expect(hasPlaceholder(droppable.descriptor.id, container)).toBe(true);
  80 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Eager Test,"{'line': 78, 'column': 13, 'index': 2785}","  76 |
  77 |       expect(isDragging(handle)).toBe(true);
> 78 |       expect(isOver(handle)).toBe(droppable.descriptor.id);
     |             ^ Eager Test
  79 |       expect(hasPlaceholder(droppable.descriptor.id, container)).toBe(true);
  80 |
  81 |       withWarn(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Eager Test,"{'line': 86, 'column': 13, 'index': 3040}","  84 |       });
  85 |
> 86 |       expect(isDragging(handle)).toBe(false);
     |             ^ Eager Test
  87 |       expect(hasPlaceholder(droppable.descriptor.id, container)).toBe(false);
  88 |
  89 |       unmount();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Eager Test,"{'line': 166, 'column': 13, 'index': 6270}","  164 |       expandedMouse.powerLift(handle, preset.inHome1.client.borderBox.center);
  165 |       expandedMouse.move(handle, preset.inForeign1.client.borderBox.center);
> 166 |       expect(isOver(handle)).toBe(preset.foreign.descriptor.id);
      |             ^ Eager Test
  167 |
  168 |       expandedMouse.startDrop(handle);
  169 |       // foreign placeholder remaining in place",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Eager Test,"{'line': 194, 'column': 29, 'index': 7272}","  192 |
  193 |       // faking a transition end
> 194 |       fireEvent(placeholder, getTransitionEnd('height'));
      |                             ^ Eager Test
  195 |
  196 |       // placeholder is gone
  197 |       expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Eager Test,"{'line': 266, 'column': 13, 'index': 9870}","  264 |       expandedMouse.move(handle, preset.foreign.client.borderBox.center);
  265 |
> 266 |       expect(isOver(handle)).toBe(preset.foreign.descriptor.id);
      |             ^ Eager Test
  267 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
  268 |         true,
  269 |       );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Eager Test,"{'line': 273, 'column': 13, 'index': 10137}","  271 |       // moving back over home
  272 |       expandedMouse.move(handle, preset.home.client.borderBox.center);
> 273 |       expect(isOver(handle)).toBe(preset.home.descriptor.id);
      |             ^ Eager Test
  274 |
  275 |       // foreign placeholder is now animating closed
  276 |       const placeholder: HTMLElement = getPlaceholder(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Eager Test,"{'line': 292, 'column': 13, 'index': 10861}","  290 |       expandedMouse.move(handle, preset.foreign.client.borderBox.center);
  291 |
> 292 |       expect(isOver(handle)).toBe(preset.foreign.descriptor.id);
      |             ^ Eager Test
  293 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
  294 |         true,
  295 |       );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Eager Test,"{'line': 299, 'column': 13, 'index': 11128}","  297 |       // moving back over home
  298 |       expandedMouse.move(handle, preset.home.client.borderBox.center);
> 299 |       expect(isOver(handle)).toBe(preset.home.descriptor.id);
      |             ^ Eager Test
  300 |
  301 |       // foreign placeholder is now animating closed
  302 |       const placeholder: HTMLElement = getPlaceholder(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Eager Test,"{'line': 322, 'column': 13, 'index': 11869}","  320 |         preset.inHome2.client.borderBox.center,
  321 |       );
> 322 |       expect(isDragging(second)).toBe(true);
      |             ^ Eager Test
  323 |       expect(isOver(second)).toBe(preset.home.descriptor.id);
  324 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
  325 |         false,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Eager Test,"{'line': 323, 'column': 13, 'index': 11914}","  321 |       );
  322 |       expect(isDragging(second)).toBe(true);
> 323 |       expect(isOver(second)).toBe(preset.home.descriptor.id);
      |             ^ Eager Test
  324 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
  325 |         false,
  326 |       );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Lazy Test,"{'line': 59, 'column': 13, 'index': 2062}","  57 |       expandedMouse.move(handle, droppable.client.borderBox.center);
  58 |
> 59 |       expect(isOver(handle)).toBe(droppable.descriptor.id);
     |             ^ Lazy Test
  60 |       expect(hasPlaceholder(droppable.descriptor.id, container)).toBe(true);
  61 |
  62 |       unmount();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Lazy Test,"{'line': 77, 'column': 13, 'index': 2740}","  75 |       expandedMouse.move(handle, droppable.client.borderBox.center);
  76 |
> 77 |       expect(isDragging(handle)).toBe(true);
     |             ^ Lazy Test
  78 |       expect(isOver(handle)).toBe(droppable.descriptor.id);
  79 |       expect(hasPlaceholder(droppable.descriptor.id, container)).toBe(true);
  80 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Lazy Test,"{'line': 78, 'column': 13, 'index': 2785}","  76 |
  77 |       expect(isDragging(handle)).toBe(true);
> 78 |       expect(isOver(handle)).toBe(droppable.descriptor.id);
     |             ^ Lazy Test
  79 |       expect(hasPlaceholder(droppable.descriptor.id, container)).toBe(true);
  80 |
  81 |       withWarn(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Lazy Test,"{'line': 106, 'column': 15, 'index': 3781}","  104 |
  105 |         // doesn't matter what we are over
> 106 |         expect(isOver(handle)).toBe(droppable.descriptor.id);
      |               ^ Lazy Test
  107 |         // there is always a placeholder in home
  108 |         expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(true);
  109 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Lazy Test,"{'line': 123, 'column': 15, 'index': 4521}","  121 |         expandedMouse.powerLift(handle, preset.inHome1.client.borderBox.center);
  122 |         expandedMouse.move(handle, droppable.client.borderBox.center);
> 123 |         expect(isOver(handle)).toBe(droppable.descriptor.id);
      |               ^ Lazy Test
  124 |
  125 |         expandedMouse.startDrop(handle);
  126 |         expect(hasPlaceholder(droppable.descriptor.id, container)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Lazy Test,"{'line': 144, 'column': 13, 'index': 5324}","  142 |       expandedMouse.powerLift(handle, preset.inHome1.client.borderBox.center);
  143 |       expandedMouse.move(handle, { x: 10000, y: 10000 });
> 144 |       expect(isOver(handle)).toBe(null);
      |             ^ Lazy Test
  145 |
  146 |       // placeholder present when over nothing
  147 |       expect(hasPlaceholder(preset.home.descriptor.id, container)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Lazy Test,"{'line': 166, 'column': 13, 'index': 6270}","  164 |       expandedMouse.powerLift(handle, preset.inHome1.client.borderBox.center);
  165 |       expandedMouse.move(handle, preset.inForeign1.client.borderBox.center);
> 166 |       expect(isOver(handle)).toBe(preset.foreign.descriptor.id);
      |             ^ Lazy Test
  167 |
  168 |       expandedMouse.startDrop(handle);
  169 |       // foreign placeholder remaining in place",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Lazy Test,"{'line': 209, 'column': 15, 'index': 7881}","  207 |         expandedMouse.powerLift(handle, preset.inHome1.client.borderBox.center);
  208 |         expandedMouse.move(handle, preset.inForeign1.client.borderBox.center);
> 209 |         expect(isOver(handle)).toBe(preset.foreign.descriptor.id);
      |               ^ Lazy Test
  210 |
  211 |         expandedMouse.powerDrop(handle);
  212 |         // placeholder still here + animating closed",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Lazy Test,"{'line': 251, 'column': 13, 'index': 9278}","  249 |       expandedMouse.powerLift(handle, box0.center);
  250 |
> 251 |       expect(isOver(handle)).toBe(preset.home.descriptor.id);
      |             ^ Lazy Test
  252 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
  253 |         false,
  254 |       );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Lazy Test,"{'line': 266, 'column': 13, 'index': 9870}","  264 |       expandedMouse.move(handle, preset.foreign.client.borderBox.center);
  265 |
> 266 |       expect(isOver(handle)).toBe(preset.foreign.descriptor.id);
      |             ^ Lazy Test
  267 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
  268 |         true,
  269 |       );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Lazy Test,"{'line': 292, 'column': 13, 'index': 10861}","  290 |       expandedMouse.move(handle, preset.foreign.client.borderBox.center);
  291 |
> 292 |       expect(isOver(handle)).toBe(preset.foreign.descriptor.id);
      |             ^ Lazy Test
  293 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
  294 |         true,
  295 |       );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/placeholder.spec.js,Lazy Test,"{'line': 322, 'column': 13, 'index': 11869}","  320 |         preset.inHome2.client.borderBox.center,
  321 |       );
> 322 |       expect(isDragging(second)).toBe(true);
      |             ^ Lazy Test
  323 |       expect(isOver(second)).toBe(preset.home.descriptor.id);
  324 |       expect(hasPlaceholder(preset.foreign.descriptor.id, container)).toBe(
  325 |         false,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Duplicate Assert,"{'line': 52, 'column': 4, 'index': 1689}","  50 |     const { unmount, getByTestId } = render(<App useClone />);
  51 |     simpleLift(keyboard, getByTestId('0'));
> 52 |     expect(getByTestId('0').parentElement).toBe(body);
     |    ^ Duplicate Assert
  53 |     unmount();
  54 |   }
  55 |   {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Duplicate Assert,"{'line': 62, 'column': 4, 'index': 2019}","  60 |     );
  61 |     simpleLift(keyboard, getByTestId('0'));
> 62 |     expect(getByTestId('0').parentElement).toBe(element);
     |    ^ Duplicate Assert
  63 |     unmount();
  64 |   }
  65 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 28, 'column': 4, 'index': 933}","  26 |   Array.from({ length: 4 }).forEach(() => {
  27 |     const beforeLift = getByTestId('0');
> 28 |     simpleLift(keyboard, beforeLift);
     |    ^ Eager Test
  29 |     expect(isClone(beforeLift)).toBe(false);
  30 |
  31 |     // after lift there is still only one item - but it is different",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 29, 'column': 11, 'index': 978}","  27 |     const beforeLift = getByTestId('0');
  28 |     simpleLift(keyboard, beforeLift);
> 29 |     expect(isClone(beforeLift)).toBe(false);
     |           ^ Eager Test
  30 |
  31 |     // after lift there is still only one item - but it is different
  32 |     const clone = getByTestId('0');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 34, 'column': 11, 'index': 1169}","  32 |     const clone = getByTestId('0');
  33 |     expect(clone).not.toBe(beforeLift);
> 34 |     expect(isDragging(clone)).toBe(true);
     |           ^ Eager Test
  35 |     expect(isClone(clone)).toBe(true);
  36 |
  37 |     keyboard.drop(clone);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 35, 'column': 11, 'index': 1211}","  33 |     expect(clone).not.toBe(beforeLift);
  34 |     expect(isDragging(clone)).toBe(true);
> 35 |     expect(isClone(clone)).toBe(true);
     |           ^ Eager Test
  36 |
  37 |     keyboard.drop(clone);
  38 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 41, 'column': 11, 'index': 1355}","  39 |     const finished = getByTestId('0');
  40 |     expect(finished).not.toBe(clone);
> 41 |     expect(isClone(finished)).toBe(false);
     |           ^ Eager Test
  42 |     expect(isDragging(finished)).toBe(false);
  43 |   });
  44 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 42, 'column': 11, 'index': 1398}","  40 |     expect(finished).not.toBe(clone);
  41 |     expect(isClone(finished)).toBe(false);
> 42 |     expect(isDragging(finished)).toBe(false);
     |           ^ Eager Test
  43 |   });
  44 | });
  45 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 51, 'column': 4, 'index': 1645}","  49 |   {
  50 |     const { unmount, getByTestId } = render(<App useClone />);
> 51 |     simpleLift(keyboard, getByTestId('0'));
     |    ^ Eager Test
  52 |     expect(getByTestId('0').parentElement).toBe(body);
  53 |     unmount();
  54 |   }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 61, 'column': 4, 'index': 1975}","  59 |       <App useClone getContainerForClone={() => element} />,
  60 |     );
> 61 |     simpleLift(keyboard, getByTestId('0'));
     |    ^ Eager Test
  62 |     expect(getByTestId('0').parentElement).toBe(element);
  63 |     unmount();
  64 |   }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 72, 'column': 2, 'index': 2315}","  70 |   const { getByTestId } = render(<App renderItem={renderItem} useClone />);
  71 |
> 72 |   simpleLift(keyboard, getByTestId('1'));
     |  ^ Eager Test
  73 |
  74 |   const last: ?Call = getLast(getCallsFor('1', spy));
  75 |   invariant(last);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 74, 'column': 22, 'index': 2378}","  72 |   simpleLift(keyboard, getByTestId('1'));
  73 |
> 74 |   const last: ?Call = getLast(getCallsFor('1', spy));
     |                      ^ Eager Test
  75 |   invariant(last);
  76 |   const expected: DraggableStateSnapshot = {
  77 |     isClone: true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 75, 'column': 2, 'index': 2412}","  73 |
  74 |   const last: ?Call = getLast(getCallsFor('1', spy));
> 75 |   invariant(last);
     |  ^ Eager Test
  76 |   const expected: DraggableStateSnapshot = {
  77 |     isClone: true,
  78 |     isDragging: true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 99, 'column': 11, 'index': 3183}","   97 |
   98 |     const clone: HTMLElement = getByTestId('0');
>  99 |     expect(isClone(clone)).toBe(true);
      |           ^ Eager Test
  100 |     expect(isDragging(clone)).toBe(true);
  101 |
  102 |     // move item 0 to index 1",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 100, 'column': 11, 'index': 3222}","   98 |     const clone: HTMLElement = getByTestId('0');
   99 |     expect(isClone(clone)).toBe(true);
> 100 |     expect(isDragging(clone)).toBe(true);
      |           ^ Eager Test
  101 |
  102 |     // move item 0 to index 1
  103 |     expandedMouse.move(clone, box1.center);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 107, 'column': 11, 'index': 3417}","  105 |     // drop started, but still occurring
  106 |     expandedMouse.startDrop(clone);
> 107 |     expect(isDropAnimating(clone)).toBe(true);
      |           ^ Eager Test
  108 |
  109 |     // starting a new drag with item 1 (which is in index 0 visually now)
  110 |     // using box0.center as the lifting point",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 118, 'column': 11, 'index': 3856}","  116 |     });
  117 |
> 118 |     expect(isDragging(getByTestId('1'))).toBe(true);
      |           ^ Eager Test
  119 |     expect(isDragging(getByTestId('0'))).toBe(false);
  120 |   });
  121 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Eager Test,"{'line': 119, 'column': 11, 'index': 3909}","  117 |
  118 |     expect(isDragging(getByTestId('1'))).toBe(true);
> 119 |     expect(isDragging(getByTestId('0'))).toBe(false);
      |           ^ Eager Test
  120 |   });
  121 | });
  122 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Lazy Test,"{'line': 28, 'column': 4, 'index': 933}","  26 |   Array.from({ length: 4 }).forEach(() => {
  27 |     const beforeLift = getByTestId('0');
> 28 |     simpleLift(keyboard, beforeLift);
     |    ^ Lazy Test
  29 |     expect(isClone(beforeLift)).toBe(false);
  30 |
  31 |     // after lift there is still only one item - but it is different",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Lazy Test,"{'line': 29, 'column': 11, 'index': 978}","  27 |     const beforeLift = getByTestId('0');
  28 |     simpleLift(keyboard, beforeLift);
> 29 |     expect(isClone(beforeLift)).toBe(false);
     |           ^ Lazy Test
  30 |
  31 |     // after lift there is still only one item - but it is different
  32 |     const clone = getByTestId('0');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Lazy Test,"{'line': 34, 'column': 11, 'index': 1169}","  32 |     const clone = getByTestId('0');
  33 |     expect(clone).not.toBe(beforeLift);
> 34 |     expect(isDragging(clone)).toBe(true);
     |           ^ Lazy Test
  35 |     expect(isClone(clone)).toBe(true);
  36 |
  37 |     keyboard.drop(clone);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Lazy Test,"{'line': 51, 'column': 4, 'index': 1645}","  49 |   {
  50 |     const { unmount, getByTestId } = render(<App useClone />);
> 51 |     simpleLift(keyboard, getByTestId('0'));
     |    ^ Lazy Test
  52 |     expect(getByTestId('0').parentElement).toBe(body);
  53 |     unmount();
  54 |   }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Lazy Test,"{'line': 72, 'column': 2, 'index': 2315}","  70 |   const { getByTestId } = render(<App renderItem={renderItem} useClone />);
  71 |
> 72 |   simpleLift(keyboard, getByTestId('1'));
     |  ^ Lazy Test
  73 |
  74 |   const last: ?Call = getLast(getCallsFor('1', spy));
  75 |   invariant(last);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Lazy Test,"{'line': 99, 'column': 11, 'index': 3183}","   97 |
   98 |     const clone: HTMLElement = getByTestId('0');
>  99 |     expect(isClone(clone)).toBe(true);
      |           ^ Lazy Test
  100 |     expect(isDragging(clone)).toBe(true);
  101 |
  102 |     // move item 0 to index 1",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/droppable/clone.spec.js,Lazy Test,"{'line': 100, 'column': 11, 'index': 3222}","   98 |     const clone: HTMLElement = getByTestId('0');
   99 |     expect(isClone(clone)).toBe(true);
> 100 |     expect(isDragging(clone)).toBe(true);
      |           ^ Lazy Test
  101 |
  102 |     // move item 0 to index 1
  103 |     expandedMouse.move(clone, box1.center);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/validation.spec.js,Conditional Test Logic,"{'line': 55, 'column': 28, 'index': 1441}","  53 |
  54 | it('should log an error if draggableId is not a string', () => {
> 55 |   [1, undefined, false, {}].forEach((value: mixed) => {
     |                            ^ Conditional Test Logic
  56 |     const { unmount } = render(
  57 |       <WithCustomProps draggableId={value} index={0} />,
  58 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/validation.spec.js,Conditional Test Logic,"{'line': 68, 'column': 36, 'index': 1751}","  66 |
  67 | it('should log an error if index is not an integer', () => {
> 68 |   ['1', 1.33, undefined, false, {}].forEach((value: mixed) => {
     |                                    ^ Conditional Test Logic
  69 |     const { unmount } = render(
  70 |       <WithCustomProps draggableId=""draggable"" index={value} />,
  71 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/resting.spec.js,Magic Number,"{'line': 29, 'column': 33, 'index': 858}","  27 |
  28 |   const snapshots = getSnapshotsFor('0', snapshotSpy);
> 29 |   expect(snapshots).toHaveLength(1);
     |                                 ^ Magic Number
  30 |   expect(snapshots[0]).toEqual(atRest);
  31 | });
  32 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/resting.spec.js,Magic Number,"{'line': 53, 'column': 33, 'index': 1515}","  51 |     const rubrics: DraggableRubric[] = getRubricsFor(item.id, watcher);
  52 |
> 53 |     expect(rubrics).toHaveLength(1);
     |                                 ^ Magic Number
  54 |     expect(rubrics[0]).toEqual(expected);
  55 |   });
  56 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/portal.spec.js,Conditional Test Logic,"{'line': 37, 'column': 2, 'index': 954}","  35 |   );
  36 |
> 37 |   if (!snapshot.isDragging) {
     |  ^ Conditional Test Logic
  38 |     return child;
  39 |   }
  40 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/portal.spec.js,Eager Test,"{'line': 50, 'column': 9, 'index': 1314}","  48 |   // not in portal yet
  49 |   expect(before.parentElement).not.toBe(portal);
> 50 |   expect(isDragging(before)).toBe(false);
     |         ^ Eager Test
  51 |
  52 |   // moved to portal after lift
  53 |   simpleLift(mouse, before);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/portal.spec.js,Eager Test,"{'line': 53, 'column': 2, 'index': 1382}","  51 |
  52 |   // moved to portal after lift
> 53 |   simpleLift(mouse, before);
     |  ^ Eager Test
  54 |   const inPortal: HTMLElement = getByTestId('0');
  55 |   expect(inPortal.parentElement).toBe(portal);
  56 |   expect(before).not.toBe(inPortal);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/portal.spec.js,Eager Test,"{'line': 57, 'column': 9, 'index': 1552}","  55 |   expect(inPortal.parentElement).toBe(portal);
  56 |   expect(before).not.toBe(inPortal);
> 57 |   expect(isDragging(inPortal)).toBe(true);
     |         ^ Eager Test
  58 |
  59 |   // out of portal after drop
  60 |   mouse.drop(inPortal);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/portal.spec.js,Eager Test,"{'line': 64, 'column': 9, 'index': 1781}","  62 |   expect(after.parentElement).not.toBe(portal);
  63 |   expect(after).not.toBe(inPortal);
> 64 |   expect(isDragging(after)).toBe(false);
     |         ^ Eager Test
  65 | });
  66 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/moving-out-of-the-way.spec.js,Duplicate Assert,"{'line': 33, 'column': 4, 'index': 1078}","  31 |
  32 |     // after critical is moved forward
> 33 |     expect(after.style.transform).toBe(
     |    ^ Duplicate Assert
  34 |       `translate(0px, ${preset.inHome2.displaceBy.y}px)`,
  35 |     );
  36 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/moving-out-of-the-way.spec.js,Duplicate Assert,"{'line': 40, 'column': 4, 'index': 1259}","  38 |
  39 |     // still not moved
> 40 |     expect(after.style.transform).toBe('');
     |    ^ Duplicate Assert
  41 |
  42 |     // critical has now moved
  43 |     expect(critical.style.transform.startsWith('translate')).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/moving-out-of-the-way.spec.js,Duplicate Assert,"{'line': 40, 'column': 4, 'index': 1259}","  38 |
  39 |     // still not moved
> 40 |     expect(after.style.transform).toBe('');
     |    ^ Duplicate Assert
  41 |
  42 |     // critical has now moved
  43 |     expect(critical.style.transform.startsWith('translate')).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/moving-out-of-the-way.spec.js,Duplicate Assert,"{'line': 46, 'column': 4, 'index': 1459}","  44 |
  45 |     // after no longer displaced (moved backwards)
> 46 |     expect(after.style.transform).toBe('');
     |    ^ Duplicate Assert
  47 |   });
  48 | });
  49 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/moving-out-of-the-way.spec.js,Duplicate Assert,"{'line': 46, 'column': 4, 'index': 1459}","  44 |
  45 |     // after no longer displaced (moved backwards)
> 46 |     expect(after.style.transform).toBe('');
     |    ^ Duplicate Assert
  47 |   });
  48 | });
  49 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 40, 'column': 2, 'index': 1029}","  38 |   // start a drop
  39 |   fireEvent.mouseUp(handle);
> 40 |   expect(isDropAnimating(handle)).toBe(true);
     |  ^ Duplicate Assert
  41 |   expect(handle.style.position).toBe('fixed');
  42 |
  43 |   // moving back to origin so no transform",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 41, 'column': 2, 'index': 1075}","  39 |   fireEvent.mouseUp(handle);
  40 |   expect(isDropAnimating(handle)).toBe(true);
> 41 |   expect(handle.style.position).toBe('fixed');
     |  ^ Duplicate Assert
  42 |
  43 |   // moving back to origin so no transform
  44 |   expect(handle.style.transform).toBe('');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 45, 'column': 2, 'index': 1209}","  43 |   // moving back to origin so no transform
  44 |   expect(handle.style.transform).toBe('');
> 45 |   expect(handle.style.transition).toBe(transitions.drop(timings.minDropTime));
     |  ^ Duplicate Assert
  46 |   expect(handle.style.zIndex).toBe(`${zIndexOptions.dropAnimating}`);
  47 |
  48 |   // completing drop",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 50, 'column': 2, 'index': 1421}","  48 |   // completing drop
  49 |   fireEvent(handle, getTransitionEnd());
> 50 |   expect(isDropAnimating(handle)).toBe(false);
     |  ^ Duplicate Assert
  51 |   // transition cleared
  52 |   expect(handle.style.transition).toBe('');
  53 |   // position: fixed cleared",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 52, 'column': 2, 'index': 1492}","  50 |   expect(isDropAnimating(handle)).toBe(false);
  51 |   // transition cleared
> 52 |   expect(handle.style.transition).toBe('');
     |  ^ Duplicate Assert
  53 |   // position: fixed cleared
  54 |   expect(handle.style.position).toBe('');
  55 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 54, 'column': 2, 'index': 1565}","  52 |   expect(handle.style.transition).toBe('');
  53 |   // position: fixed cleared
> 54 |   expect(handle.style.position).toBe('');
     |  ^ Duplicate Assert
  55 | });
  56 |
  57 | it('should provide the correct snapshot to consumers', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 63, 'column': 2, 'index': 1874}","  61 |   const { getByText } = render(<App renderItem={renderItem} />);
  62 |   const handle: HTMLElement = getByText('item: 0');
> 63 |   expect(getSnapshotsFor('0', spy)).toHaveLength(1);
     |  ^ Duplicate Assert
  64 |
  65 |   simpleLift(mouse, handle);
  66 |   expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 67, 'column': 2, 'index': 1998}","  65 |   simpleLift(mouse, handle);
  66 |   expect(isDragging(handle)).toBe(true);
> 67 |   expect(getSnapshotsFor('0', spy)).toHaveLength(2);
     |  ^ Duplicate Assert
  68 |
  69 |   mouse.move(handle);
  70 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 142, 'column': 6, 'index': 4142}","  140 |         mode: 'FLUID',
  141 |       };
> 142 |       expect(snapshot).toEqual(expected);
      |      ^ Duplicate Assert
  143 |       expect(handle.style.opacity).toBe(`${combine.opacity.drop}`);
  144 |       expect(handle.style.transition).toBe(transitions.drop(0.33));
  145 |       expect(handle.style.transform).toEqual(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 142, 'column': 6, 'index': 4142}","  140 |         mode: 'FLUID',
  141 |       };
> 142 |       expect(snapshot).toEqual(expected);
      |      ^ Duplicate Assert
  143 |       expect(handle.style.opacity).toBe(`${combine.opacity.drop}`);
  144 |       expect(handle.style.transition).toBe(transitions.drop(0.33));
  145 |       expect(handle.style.transform).toEqual(",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 143, 'column': 6, 'index': 4184}","  141 |       };
  142 |       expect(snapshot).toEqual(expected);
> 143 |       expect(handle.style.opacity).toBe(`${combine.opacity.drop}`);
      |      ^ Duplicate Assert
  144 |       expect(handle.style.transition).toBe(transitions.drop(0.33));
  145 |       expect(handle.style.transform).toEqual(
  146 |         expect.stringContaining(`scale(${combine.scale.drop})`),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 144, 'column': 6, 'index': 4252}","  142 |       expect(snapshot).toEqual(expected);
  143 |       expect(handle.style.opacity).toBe(`${combine.opacity.drop}`);
> 144 |       expect(handle.style.transition).toBe(transitions.drop(0.33));
      |      ^ Duplicate Assert
  145 |       expect(handle.style.transform).toEqual(
  146 |         expect.stringContaining(`scale(${combine.scale.drop})`),
  147 |       );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 145, 'column': 6, 'index': 4320}","  143 |       expect(handle.style.opacity).toBe(`${combine.opacity.drop}`);
  144 |       expect(handle.style.transition).toBe(transitions.drop(0.33));
> 145 |       expect(handle.style.transform).toEqual(
      |      ^ Duplicate Assert
  146 |         expect.stringContaining(`scale(${combine.scale.drop})`),
  147 |       );
  148 |     }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 164, 'column': 6, 'index': 4828}","  162 |         mode: null,
  163 |       };
> 164 |       expect(snapshot).toEqual(expected);
      |      ^ Duplicate Assert
  165 |       expect(handle.style.opacity).toBe('');
  166 |       expect(handle.style.transition).toBe('');
  167 |       expect(handle.style.transform).toEqual('');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 164, 'column': 6, 'index': 4828}","  162 |         mode: null,
  163 |       };
> 164 |       expect(snapshot).toEqual(expected);
      |      ^ Duplicate Assert
  165 |       expect(handle.style.opacity).toBe('');
  166 |       expect(handle.style.transition).toBe('');
  167 |       expect(handle.style.transform).toEqual('');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 165, 'column': 6, 'index': 4870}","  163 |       };
  164 |       expect(snapshot).toEqual(expected);
> 165 |       expect(handle.style.opacity).toBe('');
      |      ^ Duplicate Assert
  166 |       expect(handle.style.transition).toBe('');
  167 |       expect(handle.style.transform).toEqual('');
  168 |     }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 166, 'column': 6, 'index': 4915}","  164 |       expect(snapshot).toEqual(expected);
  165 |       expect(handle.style.opacity).toBe('');
> 166 |       expect(handle.style.transition).toBe('');
      |      ^ Duplicate Assert
  167 |       expect(handle.style.transform).toEqual('');
  168 |     }
  169 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 167, 'column': 6, 'index': 4963}","  165 |       expect(handle.style.opacity).toBe('');
  166 |       expect(handle.style.transition).toBe('');
> 167 |       expect(handle.style.transform).toEqual('');
      |      ^ Duplicate Assert
  168 |     }
  169 |   });
  170 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 183, 'column': 2, 'index': 5377}","  181 |   // start a drop
  182 |   fireEvent.mouseUp(handle);
> 183 |   expect(isDropAnimating(handle)).toBe(true);
      |  ^ Duplicate Assert
  184 |
  185 |   const event: Event = getTransitionEnd();
  186 |   // $FlowFixMe - unknown property",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 183, 'column': 2, 'index': 5377}","  181 |   // start a drop
  182 |   fireEvent.mouseUp(handle);
> 183 |   expect(isDropAnimating(handle)).toBe(true);
      |  ^ Duplicate Assert
  184 |
  185 |   const event: Event = getTransitionEnd();
  186 |   // $FlowFixMe - unknown property",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 191, 'column': 2, 'index': 5595}","  189 |
  190 |   // still drop animating!
> 191 |   expect(isDropAnimating(handle)).toBe(true);
      |  ^ Duplicate Assert
  192 | });
  193 |
  194 | it('should not trigger a drop if a transitionend event occurs when not dropping', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 191, 'column': 2, 'index': 5595}","  189 |
  190 |   // still drop animating!
> 191 |   expect(isDropAnimating(handle)).toBe(true);
      |  ^ Duplicate Assert
  192 | });
  193 |
  194 | it('should not trigger a drop if a transitionend event occurs when not dropping', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 203, 'column': 2, 'index': 5960}","  201 |   mouse.lift(handle);
  202 |   fireEvent(handle, getTransitionEnd());
> 203 |   expect(isDragging(handle)).toBe(true);
      |  ^ Duplicate Assert
  204 |   expect(isDropAnimating(handle)).toBe(false);
  205 |
  206 |   mouse.move(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 203, 'column': 2, 'index': 5960}","  201 |   mouse.lift(handle);
  202 |   fireEvent(handle, getTransitionEnd());
> 203 |   expect(isDragging(handle)).toBe(true);
      |  ^ Duplicate Assert
  204 |   expect(isDropAnimating(handle)).toBe(false);
  205 |
  206 |   mouse.move(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 204, 'column': 2, 'index': 6001}","  202 |   fireEvent(handle, getTransitionEnd());
  203 |   expect(isDragging(handle)).toBe(true);
> 204 |   expect(isDropAnimating(handle)).toBe(false);
      |  ^ Duplicate Assert
  205 |
  206 |   mouse.move(handle);
  207 |   expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 204, 'column': 2, 'index': 6001}","  202 |   fireEvent(handle, getTransitionEnd());
  203 |   expect(isDragging(handle)).toBe(true);
> 204 |   expect(isDropAnimating(handle)).toBe(false);
      |  ^ Duplicate Assert
  205 |
  206 |   mouse.move(handle);
  207 |   expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 207, 'column': 2, 'index': 6071}","  205 |
  206 |   mouse.move(handle);
> 207 |   expect(isDragging(handle)).toBe(true);
      |  ^ Duplicate Assert
  208 |   expect(isDropAnimating(handle)).toBe(false);
  209 |
  210 |   fireEvent.mouseUp(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 207, 'column': 2, 'index': 6071}","  205 |
  206 |   mouse.move(handle);
> 207 |   expect(isDragging(handle)).toBe(true);
      |  ^ Duplicate Assert
  208 |   expect(isDropAnimating(handle)).toBe(false);
  209 |
  210 |   fireEvent.mouseUp(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 208, 'column': 2, 'index': 6112}","  206 |   mouse.move(handle);
  207 |   expect(isDragging(handle)).toBe(true);
> 208 |   expect(isDropAnimating(handle)).toBe(false);
      |  ^ Duplicate Assert
  209 |
  210 |   fireEvent.mouseUp(handle);
  211 |   expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 208, 'column': 2, 'index': 6112}","  206 |   mouse.move(handle);
  207 |   expect(isDragging(handle)).toBe(true);
> 208 |   expect(isDropAnimating(handle)).toBe(false);
      |  ^ Duplicate Assert
  209 |
  210 |   fireEvent.mouseUp(handle);
  211 |   expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 211, 'column': 2, 'index': 6189}","  209 |
  210 |   fireEvent.mouseUp(handle);
> 211 |   expect(isDragging(handle)).toBe(true);
      |  ^ Duplicate Assert
  212 |   expect(isDropAnimating(handle)).toBe(true);
  213 |
  214 |   fireEvent(handle, getTransitionEnd());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 211, 'column': 2, 'index': 6189}","  209 |
  210 |   fireEvent.mouseUp(handle);
> 211 |   expect(isDragging(handle)).toBe(true);
      |  ^ Duplicate Assert
  212 |   expect(isDropAnimating(handle)).toBe(true);
  213 |
  214 |   fireEvent(handle, getTransitionEnd());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 212, 'column': 2, 'index': 6230}","  210 |   fireEvent.mouseUp(handle);
  211 |   expect(isDragging(handle)).toBe(true);
> 212 |   expect(isDropAnimating(handle)).toBe(true);
      |  ^ Duplicate Assert
  213 |
  214 |   fireEvent(handle, getTransitionEnd());
  215 |   expect(isDragging(handle)).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 215, 'column': 2, 'index': 6318}","  213 |
  214 |   fireEvent(handle, getTransitionEnd());
> 215 |   expect(isDragging(handle)).toBe(false);
      |  ^ Duplicate Assert
  216 |   expect(isDropAnimating(handle)).toBe(false);
  217 | });
  218 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 216, 'column': 2, 'index': 6360}","  214 |   fireEvent(handle, getTransitionEnd());
  215 |   expect(isDragging(handle)).toBe(false);
> 216 |   expect(isDropAnimating(handle)).toBe(false);
      |  ^ Duplicate Assert
  217 | });
  218 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Duplicate Assert,"{'line': 216, 'column': 2, 'index': 6360}","  214 |   fireEvent(handle, getTransitionEnd());
  215 |   expect(isDragging(handle)).toBe(false);
> 216 |   expect(isDropAnimating(handle)).toBe(false);
      |  ^ Duplicate Assert
  217 | });
  218 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 33, 'column': 2, 'index': 888}","  31 |   const handle: HTMLElement = getByText('item: 0');
  32 |
> 33 |   simpleLift(mouse, handle);
     |  ^ Eager Test
  34 |   expect(isDragging(handle)).toBe(true);
  35 |
  36 |   mouse.move(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 34, 'column': 9, 'index': 924}","  32 |
  33 |   simpleLift(mouse, handle);
> 34 |   expect(isDragging(handle)).toBe(true);
     |         ^ Eager Test
  35 |
  36 |   mouse.move(handle);
  37 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 40, 'column': 9, 'index': 1036}","  38 |   // start a drop
  39 |   fireEvent.mouseUp(handle);
> 40 |   expect(isDropAnimating(handle)).toBe(true);
     |         ^ Eager Test
  41 |   expect(handle.style.position).toBe('fixed');
  42 |
  43 |   // moving back to origin so no transform",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 49, 'column': 20, 'index': 1398}","  47 |
  48 |   // completing drop
> 49 |   fireEvent(handle, getTransitionEnd());
     |                    ^ Eager Test
  50 |   expect(isDropAnimating(handle)).toBe(false);
  51 |   // transition cleared
  52 |   expect(handle.style.transition).toBe('');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 50, 'column': 9, 'index': 1428}","  48 |   // completing drop
  49 |   fireEvent(handle, getTransitionEnd());
> 50 |   expect(isDropAnimating(handle)).toBe(false);
     |         ^ Eager Test
  51 |   // transition cleared
  52 |   expect(handle.style.transition).toBe('');
  53 |   // position: fixed cleared",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 65, 'column': 2, 'index': 1928}","  63 |   expect(getSnapshotsFor('0', spy)).toHaveLength(1);
  64 |
> 65 |   simpleLift(mouse, handle);
     |  ^ Eager Test
  66 |   expect(isDragging(handle)).toBe(true);
  67 |   expect(getSnapshotsFor('0', spy)).toHaveLength(2);
  68 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 66, 'column': 9, 'index': 1964}","  64 |
  65 |   simpleLift(mouse, handle);
> 66 |   expect(isDragging(handle)).toBe(true);
     |         ^ Eager Test
  67 |   expect(getSnapshotsFor('0', spy)).toHaveLength(2);
  68 |
  69 |   mouse.move(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 73, 'column': 9, 'index': 2129}","  71 |   // start a drop
  72 |   fireEvent.mouseUp(handle);
> 73 |   expect(isDropAnimating(handle)).toBe(true);
     |         ^ Eager Test
  74 |
  75 |   const snapshot = getLast(getSnapshotsFor('0', spy));
  76 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 75, 'column': 19, 'index': 2186}","  73 |   expect(isDropAnimating(handle)).toBe(true);
  74 |
> 75 |   const snapshot = getLast(getSnapshotsFor('0', spy));
     |                   ^ Eager Test
  76 |
  77 |   const dropping: DropAnimation = {
  78 |     duration: timings.minDropTime,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 113, 'column': 11, 'index': 3284}","  111 |     // lift
  112 |     expandedMouse.powerLift(handle, box0.center);
> 113 |     expect(isDragging(handle)).toBe(true);
      |           ^ Eager Test
  114 |
  115 |     // move into combine
  116 |     expandedMouse.move(handle, box1.center);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 117, 'column': 11, 'index': 3398}","  115 |     // move into combine
  116 |     expandedMouse.move(handle, box1.center);
> 117 |     expect(isCombining(handle)).toBe(true);
      |           ^ Eager Test
  118 |
  119 |     expandedMouse.startDrop(handle);
  120 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 122, 'column': 23, 'index': 3499}","  120 |
  121 |     {
> 122 |       const snapshot = getLast(getSnapshotsFor('0', spy));
      |                       ^ Eager Test
  123 |       const dropping: DropAnimation = {
  124 |         // force cast to number :D
  125 |         duration: ((expect.any(Number): any): number),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 153, 'column': 23, 'index': 4509}","  151 |
  152 |     {
> 153 |       const snapshot = getLast(getSnapshotsFor('0', spy));
      |                       ^ Eager Test
  154 |       const expected: DraggableStateSnapshot = {
  155 |         isDragging: false,
  156 |         isDropAnimating: false,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 176, 'column': 2, 'index': 5236}","  174 |   const handle: HTMLElement = getByText('item: 0');
  175 |
> 176 |   simpleLift(mouse, handle);
      |  ^ Eager Test
  177 |   expect(isDragging(handle)).toBe(true);
  178 |
  179 |   mouse.move(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 177, 'column': 9, 'index': 5272}","  175 |
  176 |   simpleLift(mouse, handle);
> 177 |   expect(isDragging(handle)).toBe(true);
      |         ^ Eager Test
  178 |
  179 |   mouse.move(handle);
  180 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 183, 'column': 9, 'index': 5384}","  181 |   // start a drop
  182 |   fireEvent.mouseUp(handle);
> 183 |   expect(isDropAnimating(handle)).toBe(true);
      |         ^ Eager Test
  184 |
  185 |   const event: Event = getTransitionEnd();
  186 |   // $FlowFixMe - unknown property",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 185, 'column': 23, 'index': 5445}","  183 |   expect(isDropAnimating(handle)).toBe(true);
  184 |
> 185 |   const event: Event = getTransitionEnd();
      |                       ^ Eager Test
  186 |   // $FlowFixMe - unknown property
  187 |   event.propertyName = 'background';
  188 |   fireEvent(handle, event);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 191, 'column': 9, 'index': 5602}","  189 |
  190 |   // still drop animating!
> 191 |   expect(isDropAnimating(handle)).toBe(true);
      |         ^ Eager Test
  192 | });
  193 |
  194 | it('should not trigger a drop if a transitionend event occurs when not dropping', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 199, 'column': 20, 'index': 5873}","  197 |
  198 |   mouse.preLift(handle);
> 199 |   fireEvent(handle, getTransitionEnd());
      |                    ^ Eager Test
  200 |
  201 |   mouse.lift(handle);
  202 |   fireEvent(handle, getTransitionEnd());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 202, 'column': 20, 'index': 5937}","  200 |
  201 |   mouse.lift(handle);
> 202 |   fireEvent(handle, getTransitionEnd());
      |                    ^ Eager Test
  203 |   expect(isDragging(handle)).toBe(true);
  204 |   expect(isDropAnimating(handle)).toBe(false);
  205 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 203, 'column': 9, 'index': 5967}","  201 |   mouse.lift(handle);
  202 |   fireEvent(handle, getTransitionEnd());
> 203 |   expect(isDragging(handle)).toBe(true);
      |         ^ Eager Test
  204 |   expect(isDropAnimating(handle)).toBe(false);
  205 |
  206 |   mouse.move(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 204, 'column': 9, 'index': 6008}","  202 |   fireEvent(handle, getTransitionEnd());
  203 |   expect(isDragging(handle)).toBe(true);
> 204 |   expect(isDropAnimating(handle)).toBe(false);
      |         ^ Eager Test
  205 |
  206 |   mouse.move(handle);
  207 |   expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 207, 'column': 9, 'index': 6078}","  205 |
  206 |   mouse.move(handle);
> 207 |   expect(isDragging(handle)).toBe(true);
      |         ^ Eager Test
  208 |   expect(isDropAnimating(handle)).toBe(false);
  209 |
  210 |   fireEvent.mouseUp(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 208, 'column': 9, 'index': 6119}","  206 |   mouse.move(handle);
  207 |   expect(isDragging(handle)).toBe(true);
> 208 |   expect(isDropAnimating(handle)).toBe(false);
      |         ^ Eager Test
  209 |
  210 |   fireEvent.mouseUp(handle);
  211 |   expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 211, 'column': 9, 'index': 6196}","  209 |
  210 |   fireEvent.mouseUp(handle);
> 211 |   expect(isDragging(handle)).toBe(true);
      |         ^ Eager Test
  212 |   expect(isDropAnimating(handle)).toBe(true);
  213 |
  214 |   fireEvent(handle, getTransitionEnd());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 212, 'column': 9, 'index': 6237}","  210 |   fireEvent.mouseUp(handle);
  211 |   expect(isDragging(handle)).toBe(true);
> 212 |   expect(isDropAnimating(handle)).toBe(true);
      |         ^ Eager Test
  213 |
  214 |   fireEvent(handle, getTransitionEnd());
  215 |   expect(isDragging(handle)).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 214, 'column': 20, 'index': 6295}","  212 |   expect(isDropAnimating(handle)).toBe(true);
  213 |
> 214 |   fireEvent(handle, getTransitionEnd());
      |                    ^ Eager Test
  215 |   expect(isDragging(handle)).toBe(false);
  216 |   expect(isDropAnimating(handle)).toBe(false);
  217 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 215, 'column': 9, 'index': 6325}","  213 |
  214 |   fireEvent(handle, getTransitionEnd());
> 215 |   expect(isDragging(handle)).toBe(false);
      |         ^ Eager Test
  216 |   expect(isDropAnimating(handle)).toBe(false);
  217 | });
  218 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Eager Test,"{'line': 216, 'column': 9, 'index': 6367}","  214 |   fireEvent(handle, getTransitionEnd());
  215 |   expect(isDragging(handle)).toBe(false);
> 216 |   expect(isDropAnimating(handle)).toBe(false);
      |         ^ Eager Test
  217 | });
  218 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 33, 'column': 2, 'index': 888}","  31 |   const handle: HTMLElement = getByText('item: 0');
  32 |
> 33 |   simpleLift(mouse, handle);
     |  ^ Lazy Test
  34 |   expect(isDragging(handle)).toBe(true);
  35 |
  36 |   mouse.move(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 34, 'column': 9, 'index': 924}","  32 |
  33 |   simpleLift(mouse, handle);
> 34 |   expect(isDragging(handle)).toBe(true);
     |         ^ Lazy Test
  35 |
  36 |   mouse.move(handle);
  37 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 40, 'column': 9, 'index': 1036}","  38 |   // start a drop
  39 |   fireEvent.mouseUp(handle);
> 40 |   expect(isDropAnimating(handle)).toBe(true);
     |         ^ Lazy Test
  41 |   expect(handle.style.position).toBe('fixed');
  42 |
  43 |   // moving back to origin so no transform",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 49, 'column': 20, 'index': 1398}","  47 |
  48 |   // completing drop
> 49 |   fireEvent(handle, getTransitionEnd());
     |                    ^ Lazy Test
  50 |   expect(isDropAnimating(handle)).toBe(false);
  51 |   // transition cleared
  52 |   expect(handle.style.transition).toBe('');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 65, 'column': 2, 'index': 1928}","  63 |   expect(getSnapshotsFor('0', spy)).toHaveLength(1);
  64 |
> 65 |   simpleLift(mouse, handle);
     |  ^ Lazy Test
  66 |   expect(isDragging(handle)).toBe(true);
  67 |   expect(getSnapshotsFor('0', spy)).toHaveLength(2);
  68 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 66, 'column': 9, 'index': 1964}","  64 |
  65 |   simpleLift(mouse, handle);
> 66 |   expect(isDragging(handle)).toBe(true);
     |         ^ Lazy Test
  67 |   expect(getSnapshotsFor('0', spy)).toHaveLength(2);
  68 |
  69 |   mouse.move(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 73, 'column': 9, 'index': 2129}","  71 |   // start a drop
  72 |   fireEvent.mouseUp(handle);
> 73 |   expect(isDropAnimating(handle)).toBe(true);
     |         ^ Lazy Test
  74 |
  75 |   const snapshot = getLast(getSnapshotsFor('0', spy));
  76 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 75, 'column': 19, 'index': 2186}","  73 |   expect(isDropAnimating(handle)).toBe(true);
  74 |
> 75 |   const snapshot = getLast(getSnapshotsFor('0', spy));
     |                   ^ Lazy Test
  76 |
  77 |   const dropping: DropAnimation = {
  78 |     duration: timings.minDropTime,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 113, 'column': 11, 'index': 3284}","  111 |     // lift
  112 |     expandedMouse.powerLift(handle, box0.center);
> 113 |     expect(isDragging(handle)).toBe(true);
      |           ^ Lazy Test
  114 |
  115 |     // move into combine
  116 |     expandedMouse.move(handle, box1.center);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 122, 'column': 23, 'index': 3499}","  120 |
  121 |     {
> 122 |       const snapshot = getLast(getSnapshotsFor('0', spy));
      |                       ^ Lazy Test
  123 |       const dropping: DropAnimation = {
  124 |         // force cast to number :D
  125 |         duration: ((expect.any(Number): any): number),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 176, 'column': 2, 'index': 5236}","  174 |   const handle: HTMLElement = getByText('item: 0');
  175 |
> 176 |   simpleLift(mouse, handle);
      |  ^ Lazy Test
  177 |   expect(isDragging(handle)).toBe(true);
  178 |
  179 |   mouse.move(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 177, 'column': 9, 'index': 5272}","  175 |
  176 |   simpleLift(mouse, handle);
> 177 |   expect(isDragging(handle)).toBe(true);
      |         ^ Lazy Test
  178 |
  179 |   mouse.move(handle);
  180 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 183, 'column': 9, 'index': 5384}","  181 |   // start a drop
  182 |   fireEvent.mouseUp(handle);
> 183 |   expect(isDropAnimating(handle)).toBe(true);
      |         ^ Lazy Test
  184 |
  185 |   const event: Event = getTransitionEnd();
  186 |   // $FlowFixMe - unknown property",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 185, 'column': 23, 'index': 5445}","  183 |   expect(isDropAnimating(handle)).toBe(true);
  184 |
> 185 |   const event: Event = getTransitionEnd();
      |                       ^ Lazy Test
  186 |   // $FlowFixMe - unknown property
  187 |   event.propertyName = 'background';
  188 |   fireEvent(handle, event);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 199, 'column': 20, 'index': 5873}","  197 |
  198 |   mouse.preLift(handle);
> 199 |   fireEvent(handle, getTransitionEnd());
      |                    ^ Lazy Test
  200 |
  201 |   mouse.lift(handle);
  202 |   fireEvent(handle, getTransitionEnd());",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 203, 'column': 9, 'index': 5967}","  201 |   mouse.lift(handle);
  202 |   fireEvent(handle, getTransitionEnd());
> 203 |   expect(isDragging(handle)).toBe(true);
      |         ^ Lazy Test
  204 |   expect(isDropAnimating(handle)).toBe(false);
  205 |
  206 |   mouse.move(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Lazy Test,"{'line': 204, 'column': 9, 'index': 6008}","  202 |   fireEvent(handle, getTransitionEnd());
  203 |   expect(isDragging(handle)).toBe(true);
> 204 |   expect(isDropAnimating(handle)).toBe(false);
      |         ^ Lazy Test
  205 |
  206 |   mouse.move(handle);
  207 |   expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Magic Number,"{'line': 63, 'column': 49, 'index': 1921}","  61 |   const { getByText } = render(<App renderItem={renderItem} />);
  62 |   const handle: HTMLElement = getByText('item: 0');
> 63 |   expect(getSnapshotsFor('0', spy)).toHaveLength(1);
     |                                                 ^ Magic Number
  64 |
  65 |   simpleLift(mouse, handle);
  66 |   expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dropping.spec.js,Magic Number,"{'line': 67, 'column': 49, 'index': 2045}","  65 |   simpleLift(mouse, handle);
  66 |   expect(isDragging(handle)).toBe(true);
> 67 |   expect(getSnapshotsFor('0', spy)).toHaveLength(2);
     |                                                 ^ Magic Number
  68 |
  69 |   mouse.move(handle);
  70 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Duplicate Assert,"{'line': 26, 'column': 2, 'index': 840}","  24 |
  25 |   // no transform as we are at {x: 0, y: 0}
> 26 |   expect(handle.style.transform).toBe('');
     |  ^ Duplicate Assert
  27 |   expect(handle.style.transition).toBe(transitions.fluid);
  28 |   expect(handle.style.zIndex).toBe(`${zIndexOptions.dragging}`);
  29 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Duplicate Assert,"{'line': 27, 'column': 2, 'index': 883}","  25 |   // no transform as we are at {x: 0, y: 0}
  26 |   expect(handle.style.transform).toBe('');
> 27 |   expect(handle.style.transition).toBe(transitions.fluid);
     |  ^ Duplicate Assert
  28 |   expect(handle.style.zIndex).toBe(`${zIndexOptions.dragging}`);
  29 |
  30 |   mouse.move(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Duplicate Assert,"{'line': 27, 'column': 2, 'index': 883}","  25 |   // no transform as we are at {x: 0, y: 0}
  26 |   expect(handle.style.transform).toBe('');
> 27 |   expect(handle.style.transition).toBe(transitions.fluid);
     |  ^ Duplicate Assert
  28 |   expect(handle.style.zIndex).toBe(`${zIndexOptions.dragging}`);
  29 |
  30 |   mouse.move(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Duplicate Assert,"{'line': 28, 'column': 2, 'index': 942}","  26 |   expect(handle.style.transform).toBe('');
  27 |   expect(handle.style.transition).toBe(transitions.fluid);
> 28 |   expect(handle.style.zIndex).toBe(`${zIndexOptions.dragging}`);
     |  ^ Duplicate Assert
  29 |
  30 |   mouse.move(handle);
  31 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Duplicate Assert,"{'line': 28, 'column': 2, 'index': 942}","  26 |   expect(handle.style.transform).toBe('');
  27 |   expect(handle.style.transition).toBe(transitions.fluid);
> 28 |   expect(handle.style.zIndex).toBe(`${zIndexOptions.dragging}`);
     |  ^ Duplicate Assert
  29 |
  30 |   mouse.move(handle);
  31 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Duplicate Assert,"{'line': 32, 'column': 2, 'index': 1031}","  30 |   mouse.move(handle);
  31 |
> 32 |   expect(handle.style.transform).toBe(`translate(0px, 1px)`);
     |  ^ Duplicate Assert
  33 |   expect(handle.style.transition).toBe(transitions.fluid);
  34 |   expect(handle.style.zIndex).toBe(`${zIndexOptions.dragging}`);
  35 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Duplicate Assert,"{'line': 33, 'column': 2, 'index': 1093}","  31 |
  32 |   expect(handle.style.transform).toBe(`translate(0px, 1px)`);
> 33 |   expect(handle.style.transition).toBe(transitions.fluid);
     |  ^ Duplicate Assert
  34 |   expect(handle.style.zIndex).toBe(`${zIndexOptions.dragging}`);
  35 | });
  36 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Duplicate Assert,"{'line': 33, 'column': 2, 'index': 1093}","  31 |
  32 |   expect(handle.style.transform).toBe(`translate(0px, 1px)`);
> 33 |   expect(handle.style.transition).toBe(transitions.fluid);
     |  ^ Duplicate Assert
  34 |   expect(handle.style.zIndex).toBe(`${zIndexOptions.dragging}`);
  35 | });
  36 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Duplicate Assert,"{'line': 34, 'column': 2, 'index': 1152}","  32 |   expect(handle.style.transform).toBe(`translate(0px, 1px)`);
  33 |   expect(handle.style.transition).toBe(transitions.fluid);
> 34 |   expect(handle.style.zIndex).toBe(`${zIndexOptions.dragging}`);
     |  ^ Duplicate Assert
  35 | });
  36 |
  37 | it('should pass on the snapshot', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Duplicate Assert,"{'line': 34, 'column': 2, 'index': 1152}","  32 |   expect(handle.style.transform).toBe(`translate(0px, 1px)`);
  33 |   expect(handle.style.transition).toBe(transitions.fluid);
> 34 |   expect(handle.style.zIndex).toBe(`${zIndexOptions.dragging}`);
     |  ^ Duplicate Assert
  35 | });
  36 |
  37 | it('should pass on the snapshot', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Duplicate Assert,"{'line': 43, 'column': 2, 'index': 1463}","  41 |   const { getByText } = render(<App renderItem={renderItem} />);
  42 |   const handle: HTMLElement = getByText('item: 0');
> 43 |   expect(getSnapshotsFor('0', spy)).toHaveLength(1);
     |  ^ Duplicate Assert
  44 |
  45 |   simpleLift(mouse, handle);
  46 |   expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Duplicate Assert,"{'line': 47, 'column': 2, 'index': 1587}","  45 |   simpleLift(mouse, handle);
  46 |   expect(isDragging(handle)).toBe(true);
> 47 |   expect(getSnapshotsFor('0', spy)).toHaveLength(2);
     |  ^ Duplicate Assert
  48 |
  49 |   {
  50 |     const snapshot = getLast(getSnapshotsFor('0', spy));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Duplicate Assert,"{'line': 61, 'column': 4, 'index': 1966}","  59 |       mode: 'FLUID',
  60 |     };
> 61 |     expect(snapshot).toEqual(lift);
     |    ^ Duplicate Assert
  62 |   }
  63 |
  64 |   mouse.move(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Duplicate Assert,"{'line': 80, 'column': 4, 'index': 2449}","  78 |       mode: 'FLUID',
  79 |     };
> 80 |     expect(snapshot).toEqual(move);
     |    ^ Duplicate Assert
  81 |   }
  82 | });
  83 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Eager Test,"{'line': 22, 'column': 2, 'index': 725}","  20 |   const handle: HTMLElement = getByText('item: 0');
  21 |
> 22 |   simpleLift(mouse, handle);
     |  ^ Eager Test
  23 |   expect(isDragging(handle)).toBe(true);
  24 |
  25 |   // no transform as we are at {x: 0, y: 0}",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Eager Test,"{'line': 23, 'column': 9, 'index': 761}","  21 |
  22 |   simpleLift(mouse, handle);
> 23 |   expect(isDragging(handle)).toBe(true);
     |         ^ Eager Test
  24 |
  25 |   // no transform as we are at {x: 0, y: 0}
  26 |   expect(handle.style.transform).toBe('');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Eager Test,"{'line': 45, 'column': 2, 'index': 1517}","  43 |   expect(getSnapshotsFor('0', spy)).toHaveLength(1);
  44 |
> 45 |   simpleLift(mouse, handle);
     |  ^ Eager Test
  46 |   expect(isDragging(handle)).toBe(true);
  47 |   expect(getSnapshotsFor('0', spy)).toHaveLength(2);
  48 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Eager Test,"{'line': 46, 'column': 9, 'index': 1553}","  44 |
  45 |   simpleLift(mouse, handle);
> 46 |   expect(isDragging(handle)).toBe(true);
     |         ^ Eager Test
  47 |   expect(getSnapshotsFor('0', spy)).toHaveLength(2);
  48 |
  49 |   {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Eager Test,"{'line': 50, 'column': 21, 'index': 1664}","  48 |
  49 |   {
> 50 |     const snapshot = getLast(getSnapshotsFor('0', spy));
     |                     ^ Eager Test
  51 |     const lift: DraggableStateSnapshot = {
  52 |       isDragging: true,
  53 |       isDropAnimating: false,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Eager Test,"{'line': 67, 'column': 21, 'index': 2051}","  65 |
  66 |   {
> 67 |     const snapshot = getLast(getSnapshotsFor('0', spy));
     |                     ^ Eager Test
  68 |     const move: DraggableStateSnapshot = {
  69 |       isDragging: true,
  70 |       isDropAnimating: false,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Eager Test,"{'line': 88, 'column': 2, 'index': 2643}","  86 |   const handle: HTMLElement = getByText('item: 0');
  87 |
> 88 |   simpleLift(keyboard, handle);
     |  ^ Eager Test
  89 |
  90 |   expect(isDragging(handle)).toBe(true);
  91 |   expect(handle.style.transition).toBe(transitions.snap);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Eager Test,"{'line': 90, 'column': 9, 'index': 2683}","  88 |   simpleLift(keyboard, handle);
  89 |
> 90 |   expect(isDragging(handle)).toBe(true);
     |         ^ Eager Test
  91 |   expect(handle.style.transition).toBe(transitions.snap);
  92 | });
  93 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Lazy Test,"{'line': 22, 'column': 2, 'index': 725}","  20 |   const handle: HTMLElement = getByText('item: 0');
  21 |
> 22 |   simpleLift(mouse, handle);
     |  ^ Lazy Test
  23 |   expect(isDragging(handle)).toBe(true);
  24 |
  25 |   // no transform as we are at {x: 0, y: 0}",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Lazy Test,"{'line': 23, 'column': 9, 'index': 761}","  21 |
  22 |   simpleLift(mouse, handle);
> 23 |   expect(isDragging(handle)).toBe(true);
     |         ^ Lazy Test
  24 |
  25 |   // no transform as we are at {x: 0, y: 0}
  26 |   expect(handle.style.transform).toBe('');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Lazy Test,"{'line': 45, 'column': 2, 'index': 1517}","  43 |   expect(getSnapshotsFor('0', spy)).toHaveLength(1);
  44 |
> 45 |   simpleLift(mouse, handle);
     |  ^ Lazy Test
  46 |   expect(isDragging(handle)).toBe(true);
  47 |   expect(getSnapshotsFor('0', spy)).toHaveLength(2);
  48 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Lazy Test,"{'line': 46, 'column': 9, 'index': 1553}","  44 |
  45 |   simpleLift(mouse, handle);
> 46 |   expect(isDragging(handle)).toBe(true);
     |         ^ Lazy Test
  47 |   expect(getSnapshotsFor('0', spy)).toHaveLength(2);
  48 |
  49 |   {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Lazy Test,"{'line': 50, 'column': 21, 'index': 1664}","  48 |
  49 |   {
> 50 |     const snapshot = getLast(getSnapshotsFor('0', spy));
     |                     ^ Lazy Test
  51 |     const lift: DraggableStateSnapshot = {
  52 |       isDragging: true,
  53 |       isDropAnimating: false,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Lazy Test,"{'line': 88, 'column': 2, 'index': 2643}","  86 |   const handle: HTMLElement = getByText('item: 0');
  87 |
> 88 |   simpleLift(keyboard, handle);
     |  ^ Lazy Test
  89 |
  90 |   expect(isDragging(handle)).toBe(true);
  91 |   expect(handle.style.transition).toBe(transitions.snap);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Lazy Test,"{'line': 90, 'column': 9, 'index': 2683}","  88 |   simpleLift(keyboard, handle);
  89 |
> 90 |   expect(isDragging(handle)).toBe(true);
     |         ^ Lazy Test
  91 |   expect(handle.style.transition).toBe(transitions.snap);
  92 | });
  93 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Lazy Test,"{'line': 111, 'column': 21, 'index': 3405}","  109 |     expandedMouse.move(handle, box2.center);
  110 |
> 111 |     const snapshot = getLast(getSnapshotsFor('0', spy));
      |                     ^ Lazy Test
  112 |
  113 |     const expected: DraggableStateSnapshot = {
  114 |       isDragging: true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Magic Number,"{'line': 43, 'column': 49, 'index': 1510}","  41 |   const { getByText } = render(<App renderItem={renderItem} />);
  42 |   const handle: HTMLElement = getByText('item: 0');
> 43 |   expect(getSnapshotsFor('0', spy)).toHaveLength(1);
     |                                                 ^ Magic Number
  44 |
  45 |   simpleLift(mouse, handle);
  46 |   expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/dragging.spec.js,Magic Number,"{'line': 47, 'column': 49, 'index': 1634}","  45 |   simpleLift(mouse, handle);
  46 |   expect(isDragging(handle)).toBe(true);
> 47 |   expect(getSnapshotsFor('0', spy)).toHaveLength(2);
     |                                                 ^ Magic Number
  48 |
  49 |   {
  50 |     const snapshot = getLast(getSnapshotsFor('0', spy));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/combined-with.spec.js,Eager Test,"{'line': 30, 'column': 11, 'index': 996}","  28 |
  29 |     expandedMouse.powerLift(critical, criticalBox.center);
> 30 |     expect(isDragging(critical)).toBe(true);
     |           ^ Eager Test
  31 |
  32 |     // will now be combining
  33 |     expandedMouse.move(critical, afterBox.center);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/combined-with.spec.js,Eager Test,"{'line': 35, 'column': 11, 'index': 1123}","  33 |     expandedMouse.move(critical, afterBox.center);
  34 |
> 35 |     expect(isCombining(critical)).toBe(true);
     |           ^ Eager Test
  36 |     expect(isCombineTarget(after)).toBe(true);
  37 |
  38 |     const snapshot = getLast(getSnapshotsFor('1', spy));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/combined-with.spec.js,Eager Test,"{'line': 36, 'column': 11, 'index': 1169}","  34 |
  35 |     expect(isCombining(critical)).toBe(true);
> 36 |     expect(isCombineTarget(after)).toBe(true);
     |           ^ Eager Test
  37 |
  38 |     const snapshot = getLast(getSnapshotsFor('1', spy));
  39 |     const expected: DraggableStateSnapshot = {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/draggable/combined-with.spec.js,Eager Test,"{'line': 38, 'column': 21, 'index': 1227}","  36 |     expect(isCombineTarget(after)).toBe(true);
  37 |
> 38 |     const snapshot = getLast(getSnapshotsFor('1', spy));
     |                     ^ Eager Test
  39 |     const expected: DraggableStateSnapshot = {
  40 |       isDragging: false,
  41 |       isDropAnimating: false,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Conditional Test Logic,"{'line': 60, 'column': 65, 'index': 1946}","  58 |
  59 | it('should not prevent the default behaviour for an indirect cancel', () => {
> 60 |   ['orientationchange', 'keydown', 'resize', supportedEventName].forEach(
     |                                                                 ^ Conditional Test Logic
  61 |     (eventName: string) => {
  62 |       const onDragEnd = jest.fn();
  63 |       const { getByText, unmount } = render(<App onDragEnd={onDragEnd} />);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 17, 'column': 2, 'index': 684}","  15 |   const handle: HTMLElement = getByText('item: 0');
  16 |
> 17 |   simpleLift(touch, handle);
     |  ^ Eager Test
  18 |
  19 |   const event: Event = createEvent.touchEnd(handle);
  20 |   fireEvent(handle, event);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 23, 'column': 9, 'index': 848}","  21 |
  22 |   expect(event.defaultPrevented).toBe(true);
> 23 |   expect(getDropReason(onDragEnd)).toBe('DROP');
     |         ^ Eager Test
  24 | });
  25 |
  26 | it('should prevent default on an escape press', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 31, 'column': 2, 'index': 1098}","  29 |   const handle: HTMLElement = getByText('item: 0');
  30 |
> 31 |   simpleLift(touch, handle);
     |  ^ Eager Test
  32 |
  33 |   const event: Event = createEvent.keyDown(handle, {
  34 |     keyCode: keyCodes.escape,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 39, 'column': 9, 'index': 1298}","  37 |
  38 |   expect(event.defaultPrevented).toBe(true);
> 39 |   expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |         ^ Eager Test
  40 | });
  41 |
  42 | it('should prevent default on a touchcancel', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 47, 'column': 2, 'index': 1548}","  45 |   const handle: HTMLElement = getByText('item: 0');
  46 |
> 47 |   simpleLift(touch, handle);
     |  ^ Eager Test
  48 |
  49 |   const event: Event = new Event('touchcancel', {
  50 |     bubbles: true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 56, 'column': 9, 'index': 1756}","  54 |
  55 |   expect(event.defaultPrevented).toBe(true);
> 56 |   expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |         ^ Eager Test
  57 | });
  58 |
  59 | it('should not prevent the default behaviour for an indirect cancel', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 66, 'column': 6, 'index': 2158}","  64 |       const handle: HTMLElement = getByText('item: 0');
  65 |
> 66 |       simpleLift(touch, handle);
     |      ^ Eager Test
  67 |
  68 |       const event: Event = new Event(eventName, {
  69 |         bubbles: true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 78, 'column': 13, 'index': 2448}","  76 |       // not an explicit cancel
  77 |       expect(event.defaultPrevented).toBe(false);
> 78 |       expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |             ^ Eager Test
  79 |
  80 |       unmount();
  81 |     },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 17, 'column': 2, 'index': 684}","  15 |   const handle: HTMLElement = getByText('item: 0');
  16 |
> 17 |   simpleLift(touch, handle);
     |  ^ Lazy Test
  18 |
  19 |   const event: Event = createEvent.touchEnd(handle);
  20 |   fireEvent(handle, event);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 23, 'column': 9, 'index': 848}","  21 |
  22 |   expect(event.defaultPrevented).toBe(true);
> 23 |   expect(getDropReason(onDragEnd)).toBe('DROP');
     |         ^ Lazy Test
  24 | });
  25 |
  26 | it('should prevent default on an escape press', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 31, 'column': 2, 'index': 1098}","  29 |   const handle: HTMLElement = getByText('item: 0');
  30 |
> 31 |   simpleLift(touch, handle);
     |  ^ Lazy Test
  32 |
  33 |   const event: Event = createEvent.keyDown(handle, {
  34 |     keyCode: keyCodes.escape,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 39, 'column': 9, 'index': 1298}","  37 |
  38 |   expect(event.defaultPrevented).toBe(true);
> 39 |   expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |         ^ Lazy Test
  40 | });
  41 |
  42 | it('should prevent default on a touchcancel', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 47, 'column': 2, 'index': 1548}","  45 |   const handle: HTMLElement = getByText('item: 0');
  46 |
> 47 |   simpleLift(touch, handle);
     |  ^ Lazy Test
  48 |
  49 |   const event: Event = new Event('touchcancel', {
  50 |     bubbles: true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 56, 'column': 9, 'index': 1756}","  54 |
  55 |   expect(event.defaultPrevented).toBe(true);
> 56 |   expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |         ^ Lazy Test
  57 | });
  58 |
  59 | it('should not prevent the default behaviour for an indirect cancel', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 66, 'column': 6, 'index': 2158}","  64 |       const handle: HTMLElement = getByText('item: 0');
  65 |
> 66 |       simpleLift(touch, handle);
     |      ^ Lazy Test
  67 |
  68 |       const event: Event = new Event(eventName, {
  69 |         bubbles: true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 78, 'column': 13, 'index': 2448}","  76 |       // not an explicit cancel
  77 |       expect(event.defaultPrevented).toBe(false);
> 78 |       expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |             ^ Lazy Test
  79 |
  80 |       unmount();
  81 |     },",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Duplicate Assert,"{'line': 27, 'column': 2, 'index': 871}","  25 |
  26 |   // not dragging yet
> 27 |   expect(isDragging(handle)).toBe(false);
     |  ^ Duplicate Assert
  28 |
  29 |   // allow long press to run
  30 |   jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Duplicate Assert,"{'line': 33, 'column': 2, 'index': 993}","  31 |
  32 |   // now dragging
> 33 |   expect(isDragging(handle)).toBe(true);
     |  ^ Duplicate Assert
  34 | });
  35 |
  36 | it('should not start dragging if finished before a long press', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Duplicate Assert,"{'line': 47, 'column': 2, 'index': 1458}","  45 |
  46 |   // not dragging yet
> 47 |   expect(isDragging(handle)).toBe(false);
     |  ^ Duplicate Assert
  48 |
  49 |   // allow long press to run
  50 |   jest.advanceTimersByTime(timeForLongPress - 1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Duplicate Assert,"{'line': 47, 'column': 2, 'index': 1458}","  45 |
  46 |   // not dragging yet
> 47 |   expect(isDragging(handle)).toBe(false);
     |  ^ Duplicate Assert
  48 |
  49 |   // allow long press to run
  50 |   jest.advanceTimersByTime(timeForLongPress - 1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Duplicate Assert,"{'line': 53, 'column': 2, 'index': 1603}","  51 |
  52 |   // not dragging yet
> 53 |   expect(isDragging(handle)).toBe(false);
     |  ^ Duplicate Assert
  54 |
  55 |   const touchEnd: Event = createEvent.touchEnd(handle);
  56 |   fireEvent(handle, touchEnd);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Duplicate Assert,"{'line': 53, 'column': 2, 'index': 1603}","  51 |
  52 |   // not dragging yet
> 53 |   expect(isDragging(handle)).toBe(false);
     |  ^ Duplicate Assert
  54 |
  55 |   const touchEnd: Event = createEvent.touchEnd(handle);
  56 |   fireEvent(handle, touchEnd);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Duplicate Assert,"{'line': 64, 'column': 2, 'index': 1866}","  62 |   jest.runOnlyPendingTimers();
  63 |
> 64 |   expect(isDragging(handle)).toBe(false);
     |  ^ Duplicate Assert
  65 | });
  66 |
  67 | it('should allow a false start', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Duplicate Assert,"{'line': 64, 'column': 2, 'index': 1866}","  62 |   jest.runOnlyPendingTimers();
  63 |
> 64 |   expect(isDragging(handle)).toBe(false);
     |  ^ Duplicate Assert
  65 | });
  66 |
  67 | it('should allow a false start', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Duplicate Assert,"{'line': 75, 'column': 2, 'index': 2216}","  73 |   jest.advanceTimersByTime(timeForLongPress - 1);
  74 |   fireEvent.touchEnd(handle);
> 75 |   expect(isDragging(handle)).toBe(false);
     |  ^ Duplicate Assert
  76 |
  77 |   // Let's try again - this time we will wait
  78 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Duplicate Assert,"{'line': 81, 'column': 2, 'index': 2396}","  79 |   fireEvent(handle, getTouchStart(handle));
  80 |   jest.advanceTimersByTime(timeForLongPress);
> 81 |   expect(isDragging(handle)).toBe(true);
     |  ^ Duplicate Assert
  82 | });
  83 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Eager Test,"{'line': 27, 'column': 9, 'index': 878}","  25 |
  26 |   // not dragging yet
> 27 |   expect(isDragging(handle)).toBe(false);
     |         ^ Eager Test
  28 |
  29 |   // allow long press to run
  30 |   jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Eager Test,"{'line': 33, 'column': 9, 'index': 1000}","  31 |
  32 |   // now dragging
> 33 |   expect(isDragging(handle)).toBe(true);
     |         ^ Eager Test
  34 | });
  35 |
  36 | it('should not start dragging if finished before a long press', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Eager Test,"{'line': 47, 'column': 9, 'index': 1465}","  45 |
  46 |   // not dragging yet
> 47 |   expect(isDragging(handle)).toBe(false);
     |         ^ Eager Test
  48 |
  49 |   // allow long press to run
  50 |   jest.advanceTimersByTime(timeForLongPress - 1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Eager Test,"{'line': 53, 'column': 9, 'index': 1610}","  51 |
  52 |   // not dragging yet
> 53 |   expect(isDragging(handle)).toBe(false);
     |         ^ Eager Test
  54 |
  55 |   const touchEnd: Event = createEvent.touchEnd(handle);
  56 |   fireEvent(handle, touchEnd);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Eager Test,"{'line': 64, 'column': 9, 'index': 1873}","  62 |   jest.runOnlyPendingTimers();
  63 |
> 64 |   expect(isDragging(handle)).toBe(false);
     |         ^ Eager Test
  65 | });
  66 |
  67 | it('should allow a false start', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Eager Test,"{'line': 75, 'column': 9, 'index': 2223}","  73 |   jest.advanceTimersByTime(timeForLongPress - 1);
  74 |   fireEvent.touchEnd(handle);
> 75 |   expect(isDragging(handle)).toBe(false);
     |         ^ Eager Test
  76 |
  77 |   // Let's try again - this time we will wait
  78 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Eager Test,"{'line': 81, 'column': 9, 'index': 2403}","  79 |   fireEvent(handle, getTouchStart(handle));
  80 |   jest.advanceTimersByTime(timeForLongPress);
> 81 |   expect(isDragging(handle)).toBe(true);
     |         ^ Eager Test
  82 | });
  83 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Lazy Test,"{'line': 27, 'column': 9, 'index': 878}","  25 |
  26 |   // not dragging yet
> 27 |   expect(isDragging(handle)).toBe(false);
     |         ^ Lazy Test
  28 |
  29 |   // allow long press to run
  30 |   jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Lazy Test,"{'line': 47, 'column': 9, 'index': 1465}","  45 |
  46 |   // not dragging yet
> 47 |   expect(isDragging(handle)).toBe(false);
     |         ^ Lazy Test
  48 |
  49 |   // allow long press to run
  50 |   jest.advanceTimersByTime(timeForLongPress - 1);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,Lazy Test,"{'line': 75, 'column': 9, 'index': 2223}","  73 |   jest.advanceTimersByTime(timeForLongPress - 1);
  74 |   fireEvent.touchEnd(handle);
> 75 |   expect(isDragging(handle)).toBe(false);
     |         ^ Lazy Test
  76 |
  77 |   // Let's try again - this time we will wait
  78 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Duplicate Assert,"{'line': 76, 'column': 4, 'index': 2300}","  74 |
  75 |     touch.lift(handle);
> 76 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  77 |
  78 |     // this force press will be prevented
  79 |     const second: Event = getForceChange(forcePressThreshold);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Duplicate Assert,"{'line': 76, 'column': 4, 'index': 2300}","  74 |
  75 |     touch.lift(handle);
> 76 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  77 |
  78 |     // this force press will be prevented
  79 |     const second: Event = getForceChange(forcePressThreshold);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Duplicate Assert,"{'line': 84, 'column': 4, 'index': 2573}","  82 |
  83 |     // force presses did not abort the drag
> 84 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  85 |   });
  86 | });
  87 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Duplicate Assert,"{'line': 84, 'column': 4, 'index': 2573}","  82 |
  83 |     // force presses did not abort the drag
> 84 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  85 |   });
  86 | });
  87 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Eager Test,"{'line': 76, 'column': 11, 'index': 2307}","  74 |
  75 |     touch.lift(handle);
> 76 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  77 |
  78 |     // this force press will be prevented
  79 |     const second: Event = getForceChange(forcePressThreshold);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Eager Test,"{'line': 84, 'column': 11, 'index': 2580}","  82 |
  83 |     // force presses did not abort the drag
> 84 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  85 |   });
  86 | });
  87 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Eager Test,"{'line': 111, 'column': 4, 'index': 3401}","  109 |     const handle: HTMLElement = getByText('item: 0');
  110 |
> 111 |     simpleLift(touch, handle);
      |    ^ Eager Test
  112 |
  113 |     // indirect cancel so event is not consumed
  114 |     const press: Event = getForceChange(forcePressThreshold);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Eager Test,"{'line': 119, 'column': 11, 'index': 3652}","  117 |
  118 |     // drag is no more
> 119 |     expect(isDragging(handle)).toBe(false);
      |           ^ Eager Test
  120 |   });
  121 |
  122 |   it('should abort a force press if dragging and some movement has occurred', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Eager Test,"{'line': 126, 'column': 4, 'index': 3894}","  124 |     const handle: HTMLElement = getByText('item: 0');
  125 |
> 126 |     simpleLift(touch, handle);
      |    ^ Eager Test
  127 |
  128 |     fireEvent.touchMove(handle, { touches: [{ clientX: 0, clientY: 0 }] });
  129 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Eager Test,"{'line': 135, 'column': 11, 'index': 4207}","  133 |     expect(press.defaultPrevented).toBe(true);
  134 |
> 135 |     expect(isDragging(handle)).toBe(true);
      |           ^ Eager Test
  136 |   });
  137 | });
  138 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Eager Test,"{'line': 145, 'column': 2, 'index': 4539}","  143 |   const handle: HTMLElement = getByText('item: 0');
  144 |
> 145 |   simpleLift(touch, handle);
      |  ^ Eager Test
  146 |
  147 |   // changing
  148 |   const withoutForcePress: Item[] = [",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Eager Test,"{'line': 159, 'column': 9, 'index': 5032}","  157 |
  158 |   // drag is no more
> 159 |   expect(isDragging(handle)).toBe(false);
      |         ^ Eager Test
  160 | });
  161 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Lazy Test,"{'line': 47, 'column': 11, 'index': 1463}","  45 |
  46 |     // force presses did not abort the pending or actual drag
> 47 |     expect(isDragging(handle)).toBe(true);
     |           ^ Lazy Test
  48 |   });
  49 |
  50 |   it('should not prevent a force press when pending (strange I know)', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Lazy Test,"{'line': 62, 'column': 11, 'index': 1914}","  60 |     touch.lift(handle);
  61 |     // did not prevent lifting
> 62 |     expect(isDragging(handle)).toBe(true);
     |           ^ Lazy Test
  63 |   });
  64 |
  65 |   it('prevent a force press when dragging', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Lazy Test,"{'line': 76, 'column': 11, 'index': 2307}","  74 |
  75 |     touch.lift(handle);
> 76 |     expect(isDragging(handle)).toBe(true);
     |           ^ Lazy Test
  77 |
  78 |     // this force press will be prevented
  79 |     const second: Event = getForceChange(forcePressThreshold);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Lazy Test,"{'line': 104, 'column': 11, 'index': 3177}","  102 |     touch.lift(handle);
  103 |
> 104 |     expect(isDragging(handle)).toBe(false);
      |           ^ Lazy Test
  105 |   });
  106 |
  107 |   it('should cancel a drag if a force press is registered', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Lazy Test,"{'line': 111, 'column': 4, 'index': 3401}","  109 |     const handle: HTMLElement = getByText('item: 0');
  110 |
> 111 |     simpleLift(touch, handle);
      |    ^ Lazy Test
  112 |
  113 |     // indirect cancel so event is not consumed
  114 |     const press: Event = getForceChange(forcePressThreshold);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Lazy Test,"{'line': 119, 'column': 11, 'index': 3652}","  117 |
  118 |     // drag is no more
> 119 |     expect(isDragging(handle)).toBe(false);
      |           ^ Lazy Test
  120 |   });
  121 |
  122 |   it('should abort a force press if dragging and some movement has occurred', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Lazy Test,"{'line': 126, 'column': 4, 'index': 3894}","  124 |     const handle: HTMLElement = getByText('item: 0');
  125 |
> 126 |     simpleLift(touch, handle);
      |    ^ Lazy Test
  127 |
  128 |     fireEvent.touchMove(handle, { touches: [{ clientX: 0, clientY: 0 }] });
  129 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Lazy Test,"{'line': 135, 'column': 11, 'index': 4207}","  133 |     expect(press.defaultPrevented).toBe(true);
  134 |
> 135 |     expect(isDragging(handle)).toBe(true);
      |           ^ Lazy Test
  136 |   });
  137 | });
  138 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Lazy Test,"{'line': 145, 'column': 2, 'index': 4539}","  143 |   const handle: HTMLElement = getByText('item: 0');
  144 |
> 145 |   simpleLift(touch, handle);
      |  ^ Lazy Test
  146 |
  147 |   // changing
  148 |   const withoutForcePress: Item[] = [",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/touch-sensor/force-press.spec.js,Lazy Test,"{'line': 159, 'column': 9, 'index': 5032}","  157 |
  158 |   // drag is no more
> 159 |   expect(isDragging(handle)).toBe(false);
      |         ^ Lazy Test
  160 | });
  161 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 19, 'column': 6, 'index': 667}","  17 |     Array.from({ length: 4 }).forEach(() => {
  18 |       control.preLift(handle);
> 19 |       expect(isDragging(handle)).toBe(false);
     |      ^ Duplicate Assert
  20 |
  21 |       control.lift(handle);
  22 |       expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 19, 'column': 6, 'index': 667}","  17 |     Array.from({ length: 4 }).forEach(() => {
  18 |       control.preLift(handle);
> 19 |       expect(isDragging(handle)).toBe(false);
     |      ^ Duplicate Assert
  20 |
  21 |       control.lift(handle);
  22 |       expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 22, 'column': 6, 'index': 742}","  20 |
  21 |       control.lift(handle);
> 22 |       expect(isDragging(handle)).toBe(true);
     |      ^ Duplicate Assert
  23 |
  24 |       // on drag start is async
  25 |       jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 22, 'column': 6, 'index': 742}","  20 |
  21 |       control.lift(handle);
> 22 |       expect(isDragging(handle)).toBe(true);
     |      ^ Duplicate Assert
  23 |
  24 |       // on drag start is async
  25 |       jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 30, 'column': 6, 'index': 944}","  28 |       // move
  29 |       control.move(handle);
> 30 |       expect(isDragging(handle)).toBe(true);
     |      ^ Duplicate Assert
  31 |
  32 |       // drop
  33 |       expect(onDragEnd).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 30, 'column': 6, 'index': 944}","  28 |       // move
  29 |       control.move(handle);
> 30 |       expect(isDragging(handle)).toBe(true);
     |      ^ Duplicate Assert
  31 |
  32 |       // drop
  33 |       expect(onDragEnd).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 33, 'column': 6, 'index': 1004}","  31 |
  32 |       // drop
> 33 |       expect(onDragEnd).not.toHaveBeenCalled();
     |      ^ Duplicate Assert
  34 |
  35 |       control.drop(handle);
  36 |       expect(isDragging(handle)).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 36, 'column': 6, 'index': 1081}","  34 |
  35 |       control.drop(handle);
> 36 |       expect(isDragging(handle)).toBe(false);
     |      ^ Duplicate Assert
  37 |
  38 |       expect(onDragEnd).toHaveBeenCalledTimes(1);
  39 |       expect(getDropReason(onDragEnd)).toBe('DROP');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 36, 'column': 6, 'index': 1081}","  34 |
  35 |       control.drop(handle);
> 36 |       expect(isDragging(handle)).toBe(false);
     |      ^ Duplicate Assert
  37 |
  38 |       expect(onDragEnd).toHaveBeenCalledTimes(1);
  39 |       expect(getDropReason(onDragEnd)).toBe('DROP');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 38, 'column': 6, 'index': 1128}","  36 |       expect(isDragging(handle)).toBe(false);
  37 |
> 38 |       expect(onDragEnd).toHaveBeenCalledTimes(1);
     |      ^ Duplicate Assert
  39 |       expect(getDropReason(onDragEnd)).toBe('DROP');
  40 |
  41 |       onDragEnd.mockClear();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 55, 'column': 6, 'index': 1639}","  53 |     Array.from({ length: 4 }).forEach(() => {
  54 |       control.preLift(handle);
> 55 |       expect(isDragging(handle)).toBe(false);
     |      ^ Duplicate Assert
  56 |
  57 |       control.lift(handle);
  58 |       expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 55, 'column': 6, 'index': 1639}","  53 |     Array.from({ length: 4 }).forEach(() => {
  54 |       control.preLift(handle);
> 55 |       expect(isDragging(handle)).toBe(false);
     |      ^ Duplicate Assert
  56 |
  57 |       control.lift(handle);
  58 |       expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 58, 'column': 6, 'index': 1714}","  56 |
  57 |       control.lift(handle);
> 58 |       expect(isDragging(handle)).toBe(true);
     |      ^ Duplicate Assert
  59 |
  60 |       // on drag start is async
  61 |       jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 58, 'column': 6, 'index': 1714}","  56 |
  57 |       control.lift(handle);
> 58 |       expect(isDragging(handle)).toBe(true);
     |      ^ Duplicate Assert
  59 |
  60 |       // on drag start is async
  61 |       jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 66, 'column': 6, 'index': 1916}","  64 |       // move
  65 |       control.move(handle);
> 66 |       expect(isDragging(handle)).toBe(true);
     |      ^ Duplicate Assert
  67 |
  68 |       control.cancel(handle);
  69 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 66, 'column': 6, 'index': 1916}","  64 |       // move
  65 |       control.move(handle);
> 66 |       expect(isDragging(handle)).toBe(true);
     |      ^ Duplicate Assert
  67 |
  68 |       control.cancel(handle);
  69 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 70, 'column': 6, 'index': 1993}","  68 |       control.cancel(handle);
  69 |
> 70 |       expect(isDragging(handle)).toBe(false);
     |      ^ Duplicate Assert
  71 |       expect(onDragEnd).toHaveBeenCalledTimes(1);
  72 |       expect(getDropReason(onDragEnd)).toBe('CANCEL');
  73 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Duplicate Assert,"{'line': 70, 'column': 6, 'index': 1993}","  68 |       control.cancel(handle);
  69 |
> 70 |       expect(isDragging(handle)).toBe(false);
     |      ^ Duplicate Assert
  71 |       expect(onDragEnd).toHaveBeenCalledTimes(1);
  72 |       expect(getDropReason(onDragEnd)).toBe('CANCEL');
  73 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Eager Test,"{'line': 19, 'column': 13, 'index': 674}","  17 |     Array.from({ length: 4 }).forEach(() => {
  18 |       control.preLift(handle);
> 19 |       expect(isDragging(handle)).toBe(false);
     |             ^ Eager Test
  20 |
  21 |       control.lift(handle);
  22 |       expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Eager Test,"{'line': 22, 'column': 13, 'index': 749}","  20 |
  21 |       control.lift(handle);
> 22 |       expect(isDragging(handle)).toBe(true);
     |             ^ Eager Test
  23 |
  24 |       // on drag start is async
  25 |       jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Eager Test,"{'line': 30, 'column': 13, 'index': 951}","  28 |       // move
  29 |       control.move(handle);
> 30 |       expect(isDragging(handle)).toBe(true);
     |             ^ Eager Test
  31 |
  32 |       // drop
  33 |       expect(onDragEnd).not.toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Eager Test,"{'line': 36, 'column': 13, 'index': 1088}","  34 |
  35 |       control.drop(handle);
> 36 |       expect(isDragging(handle)).toBe(false);
     |             ^ Eager Test
  37 |
  38 |       expect(onDragEnd).toHaveBeenCalledTimes(1);
  39 |       expect(getDropReason(onDragEnd)).toBe('DROP');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Eager Test,"{'line': 39, 'column': 13, 'index': 1185}","  37 |
  38 |       expect(onDragEnd).toHaveBeenCalledTimes(1);
> 39 |       expect(getDropReason(onDragEnd)).toBe('DROP');
     |             ^ Eager Test
  40 |
  41 |       onDragEnd.mockClear();
  42 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Eager Test,"{'line': 55, 'column': 13, 'index': 1646}","  53 |     Array.from({ length: 4 }).forEach(() => {
  54 |       control.preLift(handle);
> 55 |       expect(isDragging(handle)).toBe(false);
     |             ^ Eager Test
  56 |
  57 |       control.lift(handle);
  58 |       expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Eager Test,"{'line': 58, 'column': 13, 'index': 1721}","  56 |
  57 |       control.lift(handle);
> 58 |       expect(isDragging(handle)).toBe(true);
     |             ^ Eager Test
  59 |
  60 |       // on drag start is async
  61 |       jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Eager Test,"{'line': 66, 'column': 13, 'index': 1923}","  64 |       // move
  65 |       control.move(handle);
> 66 |       expect(isDragging(handle)).toBe(true);
     |             ^ Eager Test
  67 |
  68 |       control.cancel(handle);
  69 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Eager Test,"{'line': 70, 'column': 13, 'index': 2000}","  68 |       control.cancel(handle);
  69 |
> 70 |       expect(isDragging(handle)).toBe(false);
     |             ^ Eager Test
  71 |       expect(onDragEnd).toHaveBeenCalledTimes(1);
  72 |       expect(getDropReason(onDragEnd)).toBe('CANCEL');
  73 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Eager Test,"{'line': 72, 'column': 13, 'index': 2096}","  70 |       expect(isDragging(handle)).toBe(false);
  71 |       expect(onDragEnd).toHaveBeenCalledTimes(1);
> 72 |       expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |             ^ Eager Test
  73 |
  74 |       onDragEnd.mockClear();
  75 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Lazy Test,"{'line': 19, 'column': 13, 'index': 674}","  17 |     Array.from({ length: 4 }).forEach(() => {
  18 |       control.preLift(handle);
> 19 |       expect(isDragging(handle)).toBe(false);
     |             ^ Lazy Test
  20 |
  21 |       control.lift(handle);
  22 |       expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Lazy Test,"{'line': 39, 'column': 13, 'index': 1185}","  37 |
  38 |       expect(onDragEnd).toHaveBeenCalledTimes(1);
> 39 |       expect(getDropReason(onDragEnd)).toBe('DROP');
     |             ^ Lazy Test
  40 |
  41 |       onDragEnd.mockClear();
  42 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Lazy Test,"{'line': 55, 'column': 13, 'index': 1646}","  53 |     Array.from({ length: 4 }).forEach(() => {
  54 |       control.preLift(handle);
> 55 |       expect(isDragging(handle)).toBe(false);
     |             ^ Lazy Test
  56 |
  57 |       control.lift(handle);
  58 |       expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/validate-controls.spec.js,Lazy Test,"{'line': 72, 'column': 13, 'index': 2096}","  70 |       expect(isDragging(handle)).toBe(false);
  71 |       expect(onDragEnd).toHaveBeenCalledTimes(1);
> 72 |       expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |             ^ Lazy Test
  73 |
  74 |       onDragEnd.mockClear();
  75 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/parent-rendering-should-not-kill-drag.spec.js,Duplicate Assert,"{'line': 14, 'column': 4, 'index': 497}","  12 |
  13 |     simpleLift(control, handle);
> 14 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  15 |
  16 |     rerender(<App />);
  17 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/parent-rendering-should-not-kill-drag.spec.js,Duplicate Assert,"{'line': 14, 'column': 4, 'index': 497}","  12 |
  13 |     simpleLift(control, handle);
> 14 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  15 |
  16 |     rerender(<App />);
  17 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/parent-rendering-should-not-kill-drag.spec.js,Duplicate Assert,"{'line': 21, 'column': 4, 'index': 675}","  19 |     expect(getByText('item: 0')).toBe(handle);
  20 |     // it is still dragging
> 21 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  22 |   });
  23 | });
  24 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/parent-rendering-should-not-kill-drag.spec.js,Duplicate Assert,"{'line': 21, 'column': 4, 'index': 675}","  19 |     expect(getByText('item: 0')).toBe(handle);
  20 |     // it is still dragging
> 21 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  22 |   });
  23 | });
  24 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/parent-rendering-should-not-kill-drag.spec.js,Eager Test,"{'line': 13, 'column': 4, 'index': 464}","  11 |     const handle: HTMLElement = getByText('item: 0');
  12 |
> 13 |     simpleLift(control, handle);
     |    ^ Eager Test
  14 |     expect(isDragging(handle)).toBe(true);
  15 |
  16 |     rerender(<App />);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/parent-rendering-should-not-kill-drag.spec.js,Eager Test,"{'line': 14, 'column': 11, 'index': 504}","  12 |
  13 |     simpleLift(control, handle);
> 14 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  15 |
  16 |     rerender(<App />);
  17 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/parent-rendering-should-not-kill-drag.spec.js,Eager Test,"{'line': 21, 'column': 11, 'index': 682}","  19 |     expect(getByText('item: 0')).toBe(handle);
  20 |     // it is still dragging
> 21 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  22 |   });
  23 | });
  24 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/no-dragging-svgs.spec.js,Eager Test,"{'line': 37, 'column': 4, 'index': 1175}","  35 |       });
  36 |     });
> 37 |     invariant(api);
     |    ^ Eager Test
  38 |     const draggable = api.getByTestId('draggable-0');
  39 |     const handle = api.getByTestId('handle-0');
  40 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/no-dragging-svgs.spec.js,Eager Test,"{'line': 42, 'column': 6, 'index': 1321}","  40 |
  41 |     withWarn(() => {
> 42 |       simpleLift(control, handle);
     |      ^ Eager Test
  43 |     });
  44 |
  45 |     expect(isDragging(draggable)).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/no-dragging-svgs.spec.js,Eager Test,"{'line': 45, 'column': 11, 'index': 1370}","  43 |     });
  44 |
> 45 |     expect(isDragging(draggable)).toBe(false);
     |           ^ Eager Test
  46 |   });
  47 |
  48 |   it('should allow an SVG within a draggable', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/no-dragging-svgs.spec.js,Eager Test,"{'line': 67, 'column': 4, 'index': 2048}","  65 |     const startFrom = getByTestId('svg-0');
  66 |
> 67 |     simpleLift(control, startFrom);
     |    ^ Eager Test
  68 |
  69 |     expect(isDragging(draggable)).toBe(true);
  70 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/no-dragging-svgs.spec.js,Eager Test,"{'line': 69, 'column': 11, 'index': 2092}","  67 |     simpleLift(control, startFrom);
  68 |
> 69 |     expect(isDragging(draggable)).toBe(true);
     |           ^ Eager Test
  70 |   });
  71 | });
  72 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/no-dragging-svgs.spec.js,Lazy Test,"{'line': 42, 'column': 6, 'index': 1321}","  40 |
  41 |     withWarn(() => {
> 42 |       simpleLift(control, handle);
     |      ^ Lazy Test
  43 |     });
  44 |
  45 |     expect(isDragging(draggable)).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/no-dragging-svgs.spec.js,Lazy Test,"{'line': 45, 'column': 11, 'index': 1370}","  43 |     });
  44 |
> 45 |     expect(isDragging(draggable)).toBe(false);
     |           ^ Lazy Test
  46 |   });
  47 |
  48 |   it('should allow an SVG within a draggable', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/no-dragging-svgs.spec.js,Lazy Test,"{'line': 67, 'column': 4, 'index': 2048}","  65 |     const startFrom = getByTestId('svg-0');
  66 |
> 67 |     simpleLift(control, startFrom);
     |    ^ Lazy Test
  68 |
  69 |     expect(isDragging(draggable)).toBe(true);
  70 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/no-dragging-svgs.spec.js,Lazy Test,"{'line': 69, 'column': 11, 'index': 2092}","  67 |     simpleLift(control, startFrom);
  68 |
> 69 |     expect(isDragging(draggable)).toBe(true);
     |           ^ Lazy Test
  70 |   });
  71 | });
  72 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/nested-handles.spec.js,Eager Test,"{'line': 14, 'column': 4, 'index': 567}","  12 |     const columnHandle: HTMLElement = getByTestId('home');
  13 |
> 14 |     simpleLift(control, cardHandle);
     |    ^ Eager Test
  15 |
  16 |     expect(isDragging(cardHandle)).toBe(true);
  17 |     expect(isDragging(columnHandle)).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/nested-handles.spec.js,Eager Test,"{'line': 16, 'column': 11, 'index': 612}","  14 |     simpleLift(control, cardHandle);
  15 |
> 16 |     expect(isDragging(cardHandle)).toBe(true);
     |           ^ Eager Test
  17 |     expect(isDragging(columnHandle)).toBe(false);
  18 |   });
  19 |   it('should start a drag on a pare~nt the event is trigged on the parent', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/nested-handles.spec.js,Eager Test,"{'line': 17, 'column': 11, 'index': 659}","  15 |
  16 |     expect(isDragging(cardHandle)).toBe(true);
> 17 |     expect(isDragging(columnHandle)).toBe(false);
     |           ^ Eager Test
  18 |   });
  19 |   it('should start a drag on a pare~nt the event is trigged on the parent', () => {
  20 |     const { getByTestId } = render(<Board />);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/nested-handles.spec.js,Eager Test,"{'line': 24, 'column': 4, 'index': 959}","  22 |     const columnHandle: HTMLElement = getByTestId('home');
  23 |
> 24 |     simpleLift(control, columnHandle);
     |    ^ Eager Test
  25 |
  26 |     expect(isDragging(columnHandle)).toBe(true);
  27 |     expect(isDragging(cardHandle)).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/nested-handles.spec.js,Eager Test,"{'line': 26, 'column': 11, 'index': 1006}","  24 |     simpleLift(control, columnHandle);
  25 |
> 26 |     expect(isDragging(columnHandle)).toBe(true);
     |           ^ Eager Test
  27 |     expect(isDragging(cardHandle)).toBe(false);
  28 |   });
  29 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/nested-handles.spec.js,Eager Test,"{'line': 27, 'column': 11, 'index': 1055}","  25 |
  26 |     expect(isDragging(columnHandle)).toBe(true);
> 27 |     expect(isDragging(cardHandle)).toBe(false);
     |           ^ Eager Test
  28 |   });
  29 | });
  30 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/nested-handles.spec.js,Lazy Test,"{'line': 14, 'column': 4, 'index': 567}","  12 |     const columnHandle: HTMLElement = getByTestId('home');
  13 |
> 14 |     simpleLift(control, cardHandle);
     |    ^ Lazy Test
  15 |
  16 |     expect(isDragging(cardHandle)).toBe(true);
  17 |     expect(isDragging(columnHandle)).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/nested-handles.spec.js,Lazy Test,"{'line': 16, 'column': 11, 'index': 612}","  14 |     simpleLift(control, cardHandle);
  15 |
> 16 |     expect(isDragging(cardHandle)).toBe(true);
     |           ^ Lazy Test
  17 |     expect(isDragging(columnHandle)).toBe(false);
  18 |   });
  19 |   it('should start a drag on a pare~nt the event is trigged on the parent', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/nested-handles.spec.js,Lazy Test,"{'line': 24, 'column': 4, 'index': 959}","  22 |     const columnHandle: HTMLElement = getByTestId('home');
  23 |
> 24 |     simpleLift(control, columnHandle);
     |    ^ Lazy Test
  25 |
  26 |     expect(isDragging(columnHandle)).toBe(true);
  27 |     expect(isDragging(cardHandle)).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/nested-handles.spec.js,Lazy Test,"{'line': 26, 'column': 11, 'index': 1006}","  24 |     simpleLift(control, columnHandle);
  25 |
> 26 |     expect(isDragging(columnHandle)).toBe(true);
     |           ^ Lazy Test
  27 |     expect(isDragging(cardHandle)).toBe(false);
  28 |   });
  29 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Conditional Test Logic,"{'line': 12, 'column': 2, 'index': 443}","  10 | forEachSensor((control: Control) => {
  11 |   // keyboard has no pre lift
> 12 |   if (control.name === 'keyboard') {
     |  ^ Conditional Test Logic
  13 |     return;
  14 |   }
  15 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Duplicate Assert,"{'line': 29, 'column': 4, 'index': 891}","  27 |
  28 |     // lock is claimed but not dragging yet
> 29 |     expect(api.isLockClaimed()).toBe(true);
     |    ^ Duplicate Assert
  30 |     expect(isDragging(handle)).toBe(false);
  31 |
  32 |     api.tryReleaseLock();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Duplicate Assert,"{'line': 29, 'column': 4, 'index': 891}","  27 |
  28 |     // lock is claimed but not dragging yet
> 29 |     expect(api.isLockClaimed()).toBe(true);
     |    ^ Duplicate Assert
  30 |     expect(isDragging(handle)).toBe(false);
  31 |
  32 |     api.tryReleaseLock();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Duplicate Assert,"{'line': 30, 'column': 4, 'index': 935}","  28 |     // lock is claimed but not dragging yet
  29 |     expect(api.isLockClaimed()).toBe(true);
> 30 |     expect(isDragging(handle)).toBe(false);
     |    ^ Duplicate Assert
  31 |
  32 |     api.tryReleaseLock();
  33 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Duplicate Assert,"{'line': 30, 'column': 4, 'index': 935}","  28 |     // lock is claimed but not dragging yet
  29 |     expect(api.isLockClaimed()).toBe(true);
> 30 |     expect(isDragging(handle)).toBe(false);
     |    ^ Duplicate Assert
  31 |
  32 |     api.tryReleaseLock();
  33 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Duplicate Assert,"{'line': 34, 'column': 4, 'index': 1007}","  32 |     api.tryReleaseLock();
  33 |
> 34 |     expect(isDragging(handle)).toBe(false);
     |    ^ Duplicate Assert
  35 |     expect(api.isLockClaimed()).toBe(false);
  36 |
  37 |     // a lift after a released lock can get the lock all good",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Duplicate Assert,"{'line': 34, 'column': 4, 'index': 1007}","  32 |     api.tryReleaseLock();
  33 |
> 34 |     expect(isDragging(handle)).toBe(false);
     |    ^ Duplicate Assert
  35 |     expect(api.isLockClaimed()).toBe(false);
  36 |
  37 |     // a lift after a released lock can get the lock all good",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Duplicate Assert,"{'line': 35, 'column': 4, 'index': 1051}","  33 |
  34 |     expect(isDragging(handle)).toBe(false);
> 35 |     expect(api.isLockClaimed()).toBe(false);
     |    ^ Duplicate Assert
  36 |
  37 |     // a lift after a released lock can get the lock all good
  38 |     simpleLift(control, handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Duplicate Assert,"{'line': 39, 'column': 4, 'index': 1192}","  37 |     // a lift after a released lock can get the lock all good
  38 |     simpleLift(control, handle);
> 39 |     expect(api.isLockClaimed()).toBe(true);
     |    ^ Duplicate Assert
  40 |     expect(isDragging(handle)).toBe(true);
  41 |   });
  42 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Duplicate Assert,"{'line': 39, 'column': 4, 'index': 1192}","  37 |     // a lift after a released lock can get the lock all good
  38 |     simpleLift(control, handle);
> 39 |     expect(api.isLockClaimed()).toBe(true);
     |    ^ Duplicate Assert
  40 |     expect(isDragging(handle)).toBe(true);
  41 |   });
  42 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Duplicate Assert,"{'line': 40, 'column': 4, 'index': 1236}","  38 |     simpleLift(control, handle);
  39 |     expect(api.isLockClaimed()).toBe(true);
> 40 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  41 |   });
  42 | });
  43 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Eager Test,"{'line': 24, 'column': 4, 'index': 796}","  22 |     const { getByText } = render(<App sensors={[sensor]} />);
  23 |     const handle: HTMLElement = getByText('item: 0');
> 24 |     invariant(api);
     |    ^ Eager Test
  25 |
  26 |     control.preLift(handle);
  27 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Eager Test,"{'line': 30, 'column': 11, 'index': 942}","  28 |     // lock is claimed but not dragging yet
  29 |     expect(api.isLockClaimed()).toBe(true);
> 30 |     expect(isDragging(handle)).toBe(false);
     |           ^ Eager Test
  31 |
  32 |     api.tryReleaseLock();
  33 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Eager Test,"{'line': 34, 'column': 11, 'index': 1014}","  32 |     api.tryReleaseLock();
  33 |
> 34 |     expect(isDragging(handle)).toBe(false);
     |           ^ Eager Test
  35 |     expect(api.isLockClaimed()).toBe(false);
  36 |
  37 |     // a lift after a released lock can get the lock all good",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Eager Test,"{'line': 38, 'column': 4, 'index': 1159}","  36 |
  37 |     // a lift after a released lock can get the lock all good
> 38 |     simpleLift(control, handle);
     |    ^ Eager Test
  39 |     expect(api.isLockClaimed()).toBe(true);
  40 |     expect(isDragging(handle)).toBe(true);
  41 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,Eager Test,"{'line': 40, 'column': 11, 'index': 1243}","  38 |     simpleLift(control, handle);
  39 |     expect(api.isLockClaimed()).toBe(true);
> 40 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  41 |   });
  42 | });
  43 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Duplicate Assert,"{'line': 23, 'column': 4, 'index': 767}","  21 |     simpleLift(control, handle);
  22 |
> 23 |     expect(api.isLockClaimed()).toBe(true);
     |    ^ Duplicate Assert
  24 |     expect(isDragging(handle)).toBe(true);
  25 |
  26 |     api.tryReleaseLock();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Duplicate Assert,"{'line': 23, 'column': 4, 'index': 767}","  21 |     simpleLift(control, handle);
  22 |
> 23 |     expect(api.isLockClaimed()).toBe(true);
     |    ^ Duplicate Assert
  24 |     expect(isDragging(handle)).toBe(true);
  25 |
  26 |     api.tryReleaseLock();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Duplicate Assert,"{'line': 24, 'column': 4, 'index': 811}","  22 |
  23 |     expect(api.isLockClaimed()).toBe(true);
> 24 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  25 |
  26 |     api.tryReleaseLock();
  27 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Duplicate Assert,"{'line': 24, 'column': 4, 'index': 811}","  22 |
  23 |     expect(api.isLockClaimed()).toBe(true);
> 24 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  25 |
  26 |     api.tryReleaseLock();
  27 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Duplicate Assert,"{'line': 28, 'column': 4, 'index': 882}","  26 |     api.tryReleaseLock();
  27 |
> 28 |     expect(api.isLockClaimed()).toBe(false);
     |    ^ Duplicate Assert
  29 |     expect(isDragging(handle)).toBe(false);
  30 |
  31 |     // allowing reclaiming after",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Duplicate Assert,"{'line': 29, 'column': 4, 'index': 927}","  27 |
  28 |     expect(api.isLockClaimed()).toBe(false);
> 29 |     expect(isDragging(handle)).toBe(false);
     |    ^ Duplicate Assert
  30 |
  31 |     // allowing reclaiming after
  32 |     simpleLift(control, handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Duplicate Assert,"{'line': 34, 'column': 4, 'index': 1039}","  32 |     simpleLift(control, handle);
  33 |
> 34 |     expect(api.isLockClaimed()).toBe(true);
     |    ^ Duplicate Assert
  35 |     expect(isDragging(handle)).toBe(true);
  36 |   });
  37 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Duplicate Assert,"{'line': 34, 'column': 4, 'index': 1039}","  32 |     simpleLift(control, handle);
  33 |
> 34 |     expect(api.isLockClaimed()).toBe(true);
     |    ^ Duplicate Assert
  35 |     expect(isDragging(handle)).toBe(true);
  36 |   });
  37 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Duplicate Assert,"{'line': 35, 'column': 4, 'index': 1083}","  33 |
  34 |     expect(api.isLockClaimed()).toBe(true);
> 35 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  36 |   });
  37 | });
  38 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Duplicate Assert,"{'line': 35, 'column': 4, 'index': 1083}","  33 |
  34 |     expect(api.isLockClaimed()).toBe(true);
> 35 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  36 |   });
  37 | });
  38 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Eager Test,"{'line': 19, 'column': 4, 'index': 712}","  17 |     const { getByText } = render(<App sensors={[sensor]} />);
  18 |     const handle: HTMLElement = getByText('item: 0');
> 19 |     invariant(api);
     |    ^ Eager Test
  20 |
  21 |     simpleLift(control, handle);
  22 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Eager Test,"{'line': 21, 'column': 4, 'index': 733}","  19 |     invariant(api);
  20 |
> 21 |     simpleLift(control, handle);
     |    ^ Eager Test
  22 |
  23 |     expect(api.isLockClaimed()).toBe(true);
  24 |     expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Eager Test,"{'line': 24, 'column': 11, 'index': 818}","  22 |
  23 |     expect(api.isLockClaimed()).toBe(true);
> 24 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  25 |
  26 |     api.tryReleaseLock();
  27 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Eager Test,"{'line': 29, 'column': 11, 'index': 934}","  27 |
  28 |     expect(api.isLockClaimed()).toBe(false);
> 29 |     expect(isDragging(handle)).toBe(false);
     |           ^ Eager Test
  30 |
  31 |     // allowing reclaiming after
  32 |     simpleLift(control, handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Eager Test,"{'line': 32, 'column': 4, 'index': 1005}","  30 |
  31 |     // allowing reclaiming after
> 32 |     simpleLift(control, handle);
     |    ^ Eager Test
  33 |
  34 |     expect(api.isLockClaimed()).toBe(true);
  35 |     expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,Eager Test,"{'line': 35, 'column': 11, 'index': 1090}","  33 |
  34 |     expect(api.isLockClaimed()).toBe(true);
> 35 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  36 |   });
  37 | });
  38 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Eager Test,"{'line': 52, 'column': 6, 'index': 1701}","  50 |       const handle: HTMLElement = getByTestId('0');
  51 |
> 52 |       simpleLift(control, handle);
     |      ^ Eager Test
  53 |
  54 |       expect(isDragging(handle)).toBe(false);
  55 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Eager Test,"{'line': 54, 'column': 13, 'index': 1744}","  52 |       simpleLift(control, handle);
  53 |
> 54 |       expect(isDragging(handle)).toBe(false);
     |             ^ Eager Test
  55 |
  56 |       unmount();
  57 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Eager Test,"{'line': 84, 'column': 6, 'index': 2644}","  82 |       const handle: HTMLElement = getByTestId('0');
  83 |
> 84 |       simpleLift(control, handle);
     |      ^ Eager Test
  85 |
  86 |       expect(isDragging(handle)).toBe(true);
  87 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Eager Test,"{'line': 86, 'column': 13, 'index': 2687}","  84 |       simpleLift(control, handle);
  85 |
> 86 |       expect(isDragging(handle)).toBe(true);
     |             ^ Eager Test
  87 |
  88 |       unmount();
  89 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Eager Test,"{'line': 116, 'column': 6, 'index': 3589}","  114 |       const handle: HTMLElement = getByTestId('handle-0');
  115 |
> 116 |       simpleLift(control, inner);
      |      ^ Eager Test
  117 |
  118 |       expect(isDragging(handle)).toBe(false);
  119 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Eager Test,"{'line': 118, 'column': 13, 'index': 3631}","  116 |       simpleLift(control, inner);
  117 |
> 118 |       expect(isDragging(handle)).toBe(false);
      |             ^ Eager Test
  119 |
  120 |       unmount();
  121 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Eager Test,"{'line': 151, 'column': 6, 'index': 4657}","  149 |       const inner: HTMLElement = getByTestId('inner-0');
  150 |
> 151 |       simpleLift(control, inner);
      |      ^ Eager Test
  152 |
  153 |       expect(isDragging(handle)).toBe(true);
  154 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Eager Test,"{'line': 153, 'column': 13, 'index': 4699}","  151 |       simpleLift(control, inner);
  152 |
> 153 |       expect(isDragging(handle)).toBe(true);
      |             ^ Eager Test
  154 |
  155 |       unmount();
  156 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Lazy Test,"{'line': 52, 'column': 6, 'index': 1701}","  50 |       const handle: HTMLElement = getByTestId('0');
  51 |
> 52 |       simpleLift(control, handle);
     |      ^ Lazy Test
  53 |
  54 |       expect(isDragging(handle)).toBe(false);
  55 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Lazy Test,"{'line': 54, 'column': 13, 'index': 1744}","  52 |       simpleLift(control, handle);
  53 |
> 54 |       expect(isDragging(handle)).toBe(false);
     |             ^ Lazy Test
  55 |
  56 |       unmount();
  57 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Lazy Test,"{'line': 84, 'column': 6, 'index': 2644}","  82 |       const handle: HTMLElement = getByTestId('0');
  83 |
> 84 |       simpleLift(control, handle);
     |      ^ Lazy Test
  85 |
  86 |       expect(isDragging(handle)).toBe(true);
  87 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Lazy Test,"{'line': 86, 'column': 13, 'index': 2687}","  84 |       simpleLift(control, handle);
  85 |
> 86 |       expect(isDragging(handle)).toBe(true);
     |             ^ Lazy Test
  87 |
  88 |       unmount();
  89 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Lazy Test,"{'line': 116, 'column': 6, 'index': 3589}","  114 |       const handle: HTMLElement = getByTestId('handle-0');
  115 |
> 116 |       simpleLift(control, inner);
      |      ^ Lazy Test
  117 |
  118 |       expect(isDragging(handle)).toBe(false);
  119 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Lazy Test,"{'line': 118, 'column': 13, 'index': 3631}","  116 |       simpleLift(control, inner);
  117 |
> 118 |       expect(isDragging(handle)).toBe(false);
      |             ^ Lazy Test
  119 |
  120 |       unmount();
  121 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Lazy Test,"{'line': 151, 'column': 6, 'index': 4657}","  149 |       const inner: HTMLElement = getByTestId('inner-0');
  150 |
> 151 |       simpleLift(control, inner);
      |      ^ Lazy Test
  152 |
  153 |       expect(isDragging(handle)).toBe(true);
  154 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,Lazy Test,"{'line': 153, 'column': 13, 'index': 4699}","  151 |       simpleLift(control, inner);
  152 |
> 153 |       expect(isDragging(handle)).toBe(true);
      |             ^ Lazy Test
  154 |
  155 |       unmount();
  156 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/disable-default-sensors.spec.js,Eager Test,"{'line': 13, 'column': 4, 'index': 495}","  11 |     const handle: HTMLElement = getByText('item: 0');
  12 |
> 13 |     simpleLift(control, handle);
     |    ^ Eager Test
  14 |     expect(isDragging(handle)).toBe(false);
  15 |   });
  16 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/disable-default-sensors.spec.js,Eager Test,"{'line': 14, 'column': 11, 'index': 535}","  12 |
  13 |     simpleLift(control, handle);
> 14 |     expect(isDragging(handle)).toBe(false);
     |           ^ Eager Test
  15 |   });
  16 | });
  17 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Eager Test,"{'line': 40, 'column': 4, 'index': 1213}","  38 |     const handle: HTMLElement = getByTestId('0');
  39 |
> 40 |     simpleLift(control, handle);
     |    ^ Eager Test
  41 |
  42 |     expect(isDragging(handle)).toBe(false);
  43 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Eager Test,"{'line': 42, 'column': 11, 'index': 1254}","  40 |     simpleLift(control, handle);
  41 |
> 42 |     expect(isDragging(handle)).toBe(false);
     |           ^ Eager Test
  43 |   });
  44 |
  45 |   it('should block the drag if originated from a child contenteditable', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Eager Test,"{'line': 65, 'column': 4, 'index': 1989}","  63 |     const handle: HTMLElement = getByTestId('handle-0');
  64 |
> 65 |     simpleLift(control, inner);
     |    ^ Eager Test
  66 |
  67 |     expect(isDragging(handle)).toBe(false);
  68 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Eager Test,"{'line': 67, 'column': 11, 'index': 2029}","  65 |     simpleLift(control, inner);
  66 |
> 67 |     expect(isDragging(handle)).toBe(false);
     |           ^ Eager Test
  68 |   });
  69 |
  70 |   it('should block the drag if originated from a child of a child contenteditable', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Eager Test,"{'line': 93, 'column': 4, 'index': 2849}","  91 |     const handle: HTMLElement = getByTestId('handle-0');
  92 |
> 93 |     simpleLift(control, inner);
     |    ^ Eager Test
  94 |
  95 |     expect(isDragging(handle)).toBe(false);
  96 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Eager Test,"{'line': 95, 'column': 11, 'index': 2889}","  93 |     simpleLift(control, inner);
  94 |
> 95 |     expect(isDragging(handle)).toBe(false);
     |           ^ Eager Test
  96 |   });
  97 |
  98 |   it('should not block if contenteditable is set to false', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Eager Test,"{'line': 116, 'column': 4, 'index': 3492}","  114 |     const handle: HTMLElement = getByTestId('0');
  115 |
> 116 |     simpleLift(control, handle);
      |    ^ Eager Test
  117 |
  118 |     expect(isDragging(handle)).toBe(true);
  119 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Eager Test,"{'line': 118, 'column': 11, 'index': 3533}","  116 |     simpleLift(control, handle);
  117 |
> 118 |     expect(isDragging(handle)).toBe(true);
      |           ^ Eager Test
  119 |   });
  120 |
  121 |   it('should not block a drag if dragging interactive elements is allowed', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Eager Test,"{'line': 143, 'column': 4, 'index': 4246}","  141 |     const handle: HTMLElement = getByTestId('0');
  142 |
> 143 |     simpleLift(control, handle);
      |    ^ Eager Test
  144 |
  145 |     expect(isDragging(handle)).toBe(true);
  146 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Eager Test,"{'line': 145, 'column': 11, 'index': 4287}","  143 |     simpleLift(control, handle);
  144 |
> 145 |     expect(isDragging(handle)).toBe(true);
      |           ^ Eager Test
  146 |   });
  147 | });
  148 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Lazy Test,"{'line': 40, 'column': 4, 'index': 1213}","  38 |     const handle: HTMLElement = getByTestId('0');
  39 |
> 40 |     simpleLift(control, handle);
     |    ^ Lazy Test
  41 |
  42 |     expect(isDragging(handle)).toBe(false);
  43 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Lazy Test,"{'line': 42, 'column': 11, 'index': 1254}","  40 |     simpleLift(control, handle);
  41 |
> 42 |     expect(isDragging(handle)).toBe(false);
     |           ^ Lazy Test
  43 |   });
  44 |
  45 |   it('should block the drag if originated from a child contenteditable', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Lazy Test,"{'line': 65, 'column': 4, 'index': 1989}","  63 |     const handle: HTMLElement = getByTestId('handle-0');
  64 |
> 65 |     simpleLift(control, inner);
     |    ^ Lazy Test
  66 |
  67 |     expect(isDragging(handle)).toBe(false);
  68 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Lazy Test,"{'line': 67, 'column': 11, 'index': 2029}","  65 |     simpleLift(control, inner);
  66 |
> 67 |     expect(isDragging(handle)).toBe(false);
     |           ^ Lazy Test
  68 |   });
  69 |
  70 |   it('should block the drag if originated from a child of a child contenteditable', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Lazy Test,"{'line': 93, 'column': 4, 'index': 2849}","  91 |     const handle: HTMLElement = getByTestId('handle-0');
  92 |
> 93 |     simpleLift(control, inner);
     |    ^ Lazy Test
  94 |
  95 |     expect(isDragging(handle)).toBe(false);
  96 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Lazy Test,"{'line': 95, 'column': 11, 'index': 2889}","  93 |     simpleLift(control, inner);
  94 |
> 95 |     expect(isDragging(handle)).toBe(false);
     |           ^ Lazy Test
  96 |   });
  97 |
  98 |   it('should not block if contenteditable is set to false', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Lazy Test,"{'line': 116, 'column': 4, 'index': 3492}","  114 |     const handle: HTMLElement = getByTestId('0');
  115 |
> 116 |     simpleLift(control, handle);
      |    ^ Lazy Test
  117 |
  118 |     expect(isDragging(handle)).toBe(true);
  119 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Lazy Test,"{'line': 118, 'column': 11, 'index': 3533}","  116 |     simpleLift(control, handle);
  117 |
> 118 |     expect(isDragging(handle)).toBe(true);
      |           ^ Lazy Test
  119 |   });
  120 |
  121 |   it('should not block a drag if dragging interactive elements is allowed', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Lazy Test,"{'line': 143, 'column': 4, 'index': 4246}","  141 |     const handle: HTMLElement = getByTestId('0');
  142 |
> 143 |     simpleLift(control, handle);
      |    ^ Lazy Test
  144 |
  145 |     expect(isDragging(handle)).toBe(true);
  146 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,Lazy Test,"{'line': 145, 'column': 11, 'index': 4287}","  143 |     simpleLift(control, handle);
  144 |
> 145 |     expect(isDragging(handle)).toBe(true);
      |           ^ Lazy Test
  146 |   });
  147 | });
  148 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cleanup.spec.js,Eager Test,"{'line': 34, 'column': 4, 'index': 997}","  32 |
  33 |     // mid drag
> 34 |     simpleLift(control, handle);
     |    ^ Eager Test
  35 |     expect(isDragging(handle)).toEqual(true);
  36 |
  37 |     unmount();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cleanup.spec.js,Eager Test,"{'line': 35, 'column': 11, 'index': 1037}","  33 |     // mid drag
  34 |     simpleLift(control, handle);
> 35 |     expect(isDragging(handle)).toEqual(true);
     |           ^ Eager Test
  36 |
  37 |     unmount();
  38 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cannot-start-when-unmounted.spec.js,Eager Test,"{'line': 15, 'column': 4, 'index': 485}","  13 |     unmount();
  14 |
> 15 |     simpleLift(control, handle);
     |    ^ Eager Test
  16 |
  17 |     expect(isDragging(handle)).toBe(false);
  18 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cannot-start-when-unmounted.spec.js,Eager Test,"{'line': 17, 'column': 11, 'index': 526}","  15 |     simpleLift(control, handle);
  16 |
> 17 |     expect(isDragging(handle)).toBe(false);
     |           ^ Eager Test
  18 |   });
  19 | });
  20 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cannot-start-when-something-else-has-lock.spec.js,Eager Test,"{'line': 19, 'column': 4, 'index': 684}","  17 |     const handle: HTMLElement = getByText('item: 0');
  18 |
> 19 |     invariant(api, 'Expected function to be set');
     |    ^ Eager Test
  20 |     api.tryGetLock('0');
  21 |
  22 |     // won't be able to lift as the lock is already claimed",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cannot-start-when-something-else-has-lock.spec.js,Eager Test,"{'line': 23, 'column': 4, 'index': 821}","  21 |
  22 |     // won't be able to lift as the lock is already claimed
> 23 |     simpleLift(control, handle);
     |    ^ Eager Test
  24 |
  25 |     expect(isDragging(handle)).toBe(false);
  26 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cannot-start-when-something-else-has-lock.spec.js,Eager Test,"{'line': 25, 'column': 11, 'index': 862}","  23 |     simpleLift(control, handle);
  24 |
> 25 |     expect(isDragging(handle)).toBe(false);
     |           ^ Eager Test
  26 |   });
  27 | });
  28 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cannot-start-when-disabled.spec.js,Eager Test,"{'line': 15, 'column': 4, 'index': 529}","  13 |     const handle: HTMLElement = getByText('item: 0');
  14 |
> 15 |     simpleLift(control, handle);
     |    ^ Eager Test
  16 |
  17 |     expect(isDragging(handle)).toBe(false);
  18 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cannot-start-when-disabled.spec.js,Eager Test,"{'line': 17, 'column': 11, 'index': 570}","  15 |     simpleLift(control, handle);
  16 |
> 17 |     expect(isDragging(handle)).toBe(false);
     |           ^ Eager Test
  18 |   });
  19 | });
  20 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Duplicate Assert,"{'line': 17, 'column': 4, 'index': 756}","  15 |
  16 |     simpleLift(control, handle);
> 17 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  18 |
  19 |     // cancel
  20 |     const event: Event = createEvent.keyDown(handle, {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Duplicate Assert,"{'line': 29, 'column': 4, 'index': 1028}","  27 |     expect(event.defaultPrevented).toBe(true);
  28 |     // drag ended
> 29 |     expect(isDragging(handle)).toBe(false);
     |    ^ Duplicate Assert
  30 |     expect(onDragEnd.mock.calls[0][0].reason).toBe('CANCEL');
  31 |   });
  32 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Duplicate Assert,"{'line': 39, 'column': 4, 'index': 1380}","  37 |
  38 |     simpleLift(control, handle);
> 39 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  40 |
  41 |     // cancel
  42 |     const event: Event = new Event('resize', {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Duplicate Assert,"{'line': 52, 'column': 4, 'index': 1690}","  50 |     expect(event.defaultPrevented).toBe(false);
  51 |     // drag ended
> 52 |     expect(isDragging(handle)).toBe(false);
     |    ^ Duplicate Assert
  53 |     expect(onDragEnd.mock.calls[0][0].reason).toBe('CANCEL');
  54 |   });
  55 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Duplicate Assert,"{'line': 62, 'column': 4, 'index': 2053}","  60 |
  61 |     simpleLift(control, handle);
> 62 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  63 |
  64 |     // cancel
  65 |     const event: Event = new Event(supportedEventName, {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Duplicate Assert,"{'line': 75, 'column': 4, 'index': 2373}","  73 |     expect(event.defaultPrevented).toBe(false);
  74 |     // drag ended
> 75 |     expect(isDragging(handle)).toBe(false);
     |    ^ Duplicate Assert
  76 |     expect(getDropReason(onDragEnd)).toBe('CANCEL');
  77 |   });
  78 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Eager Test,"{'line': 16, 'column': 4, 'index': 723}","  14 |     const handle: HTMLElement = getByText('item: 0');
  15 |
> 16 |     simpleLift(control, handle);
     |    ^ Eager Test
  17 |     expect(isDragging(handle)).toBe(true);
  18 |
  19 |     // cancel",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Eager Test,"{'line': 17, 'column': 11, 'index': 763}","  15 |
  16 |     simpleLift(control, handle);
> 17 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  18 |
  19 |     // cancel
  20 |     const event: Event = createEvent.keyDown(handle, {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Eager Test,"{'line': 29, 'column': 11, 'index': 1035}","  27 |     expect(event.defaultPrevented).toBe(true);
  28 |     // drag ended
> 29 |     expect(isDragging(handle)).toBe(false);
     |           ^ Eager Test
  30 |     expect(onDragEnd.mock.calls[0][0].reason).toBe('CANCEL');
  31 |   });
  32 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Eager Test,"{'line': 38, 'column': 4, 'index': 1347}","  36 |     const handle: HTMLElement = getByText('item: 0');
  37 |
> 38 |     simpleLift(control, handle);
     |    ^ Eager Test
  39 |     expect(isDragging(handle)).toBe(true);
  40 |
  41 |     // cancel",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Eager Test,"{'line': 39, 'column': 11, 'index': 1387}","  37 |
  38 |     simpleLift(control, handle);
> 39 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  40 |
  41 |     // cancel
  42 |     const event: Event = new Event('resize', {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Eager Test,"{'line': 52, 'column': 11, 'index': 1697}","  50 |     expect(event.defaultPrevented).toBe(false);
  51 |     // drag ended
> 52 |     expect(isDragging(handle)).toBe(false);
     |           ^ Eager Test
  53 |     expect(onDragEnd.mock.calls[0][0].reason).toBe('CANCEL');
  54 |   });
  55 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Eager Test,"{'line': 61, 'column': 4, 'index': 2020}","  59 |     const handle: HTMLElement = getByText('item: 0');
  60 |
> 61 |     simpleLift(control, handle);
     |    ^ Eager Test
  62 |     expect(isDragging(handle)).toBe(true);
  63 |
  64 |     // cancel",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Eager Test,"{'line': 62, 'column': 11, 'index': 2060}","  60 |
  61 |     simpleLift(control, handle);
> 62 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  63 |
  64 |     // cancel
  65 |     const event: Event = new Event(supportedEventName, {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Eager Test,"{'line': 75, 'column': 11, 'index': 2380}","  73 |     expect(event.defaultPrevented).toBe(false);
  74 |     // drag ended
> 75 |     expect(isDragging(handle)).toBe(false);
     |           ^ Eager Test
  76 |     expect(getDropReason(onDragEnd)).toBe('CANCEL');
  77 |   });
  78 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Eager Test,"{'line': 76, 'column': 11, 'index': 2424}","  74 |     // drag ended
  75 |     expect(isDragging(handle)).toBe(false);
> 76 |     expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |           ^ Eager Test
  77 |   });
  78 | });
  79 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Lazy Test,"{'line': 16, 'column': 4, 'index': 723}","  14 |     const handle: HTMLElement = getByText('item: 0');
  15 |
> 16 |     simpleLift(control, handle);
     |    ^ Lazy Test
  17 |     expect(isDragging(handle)).toBe(true);
  18 |
  19 |     // cancel",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Lazy Test,"{'line': 17, 'column': 11, 'index': 763}","  15 |
  16 |     simpleLift(control, handle);
> 17 |     expect(isDragging(handle)).toBe(true);
     |           ^ Lazy Test
  18 |
  19 |     // cancel
  20 |     const event: Event = createEvent.keyDown(handle, {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Lazy Test,"{'line': 38, 'column': 4, 'index': 1347}","  36 |     const handle: HTMLElement = getByText('item: 0');
  37 |
> 38 |     simpleLift(control, handle);
     |    ^ Lazy Test
  39 |     expect(isDragging(handle)).toBe(true);
  40 |
  41 |     // cancel",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Lazy Test,"{'line': 39, 'column': 11, 'index': 1387}","  37 |
  38 |     simpleLift(control, handle);
> 39 |     expect(isDragging(handle)).toBe(true);
     |           ^ Lazy Test
  40 |
  41 |     // cancel
  42 |     const event: Event = new Event('resize', {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Lazy Test,"{'line': 61, 'column': 4, 'index': 2020}","  59 |     const handle: HTMLElement = getByText('item: 0');
  60 |
> 61 |     simpleLift(control, handle);
     |    ^ Lazy Test
  62 |     expect(isDragging(handle)).toBe(true);
  63 |
  64 |     // cancel",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/cancel-while-dragging.spec.js,Lazy Test,"{'line': 62, 'column': 11, 'index': 2060}","  60 |
  61 |     simpleLift(control, handle);
> 62 |     expect(isDragging(handle)).toBe(true);
     |           ^ Lazy Test
  63 |
  64 |     // cancel
  65 |     const event: Event = new Event(supportedEventName, {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Conditional Test Logic,"{'line': 27, 'column': 2, 'index': 814}","  25 |   props.setForceThrow(chuck);
  26 |
> 27 |   if (shouldThrowRef.current) {
     |  ^ Conditional Test Logic
  28 |     shouldThrowRef.current = false;
  29 |     props.throw();
  30 |   }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Eager Test,"{'line': 66, 'column': 14, 'index': 1632}","  64 |           <Vomit
  65 |             throw={() =>
> 66 |               invariant(false, 'Do not pass go, do not collect $200')
     |              ^ Eager Test
  67 |             }
  68 |             setForceThrow={thrower.setForceThrow}
  69 |           />",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Eager Test,"{'line': 75, 'column': 4, 'index': 1851}","  73 |     const handle: HTMLElement = getByText('item: 0');
  74 |
> 75 |     simpleLift(control, handle);
     |    ^ Eager Test
  76 |     expect(isDragging(handle)).toBe(true);
  77 |
  78 |     thrower.execute();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Eager Test,"{'line': 76, 'column': 11, 'index': 1891}","  74 |
  75 |     simpleLift(control, handle);
> 76 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  77 |
  78 |     thrower.execute();
  79 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Eager Test,"{'line': 83, 'column': 11, 'index': 2091}","  81 |     // handle is now a new element
  82 |     expect(handle).not.toBe(newHandle);
> 83 |     expect(isDragging(newHandle)).toBe(false);
     |           ^ Eager Test
  84 |
  85 |     // moving the handles around
  86 |     expect(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Eager Test,"{'line': 89, 'column': 13, 'index': 2252}","  87 |       control.move(handle);
  88 |       control.move(newHandle);
> 89 |       expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |             ^ Eager Test
  90 |       expect(getOffset(newHandle)).toEqual({ x: 0, y: 0 });
  91 |     }).not.toThrow();
  92 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Eager Test,"{'line': 90, 'column': 13, 'index': 2309}","  88 |       control.move(newHandle);
  89 |       expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
> 90 |       expect(getOffset(newHandle)).toEqual({ x: 0, y: 0 });
     |             ^ Eager Test
  91 |     }).not.toThrow();
  92 |   });
  93 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Eager Test,"{'line': 110, 'column': 4, 'index': 2857}","  108 |     const handle: HTMLElement = getByText('item: 0');
  109 |
> 110 |     simpleLift(control, handle);
      |    ^ Eager Test
  111 |     expect(isDragging(handle)).toBe(true);
  112 |
  113 |     expect(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Eager Test,"{'line': 111, 'column': 11, 'index': 2897}","  109 |
  110 |     simpleLift(control, handle);
> 111 |     expect(isDragging(handle)).toBe(true);
      |           ^ Eager Test
  112 |
  113 |     expect(() => {
  114 |       thrower.execute();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Eager Test,"{'line': 123, 'column': 13, 'index': 3172}","  121 |     expect(() => {
  122 |       control.move(handle);
> 123 |       expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
      |             ^ Eager Test
  124 |     }).not.toThrow();
  125 |   });
  126 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Eager Test,"{'line': 143, 'column': 4, 'index': 3661}","  141 |     const handle: HTMLElement = getByText('item: 0');
  142 |
> 143 |     simpleLift(control, handle);
      |    ^ Eager Test
  144 |     expect(isDragging(handle)).toBe(true);
  145 |
  146 |     withWarn(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Eager Test,"{'line': 144, 'column': 11, 'index': 3701}","  142 |
  143 |     simpleLift(control, handle);
> 144 |     expect(isDragging(handle)).toBe(true);
      |           ^ Eager Test
  145 |
  146 |     withWarn(() => {
  147 |       thrower.execute();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Eager Test,"{'line': 150, 'column': 11, 'index': 3800}","  148 |     });
  149 |
> 150 |     expect(isDragging(getByText('item: 0'))).toBe(false);
      |           ^ Eager Test
  151 |   });
  152 | });
  153 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Exception Handling,"{'line': 101, 'column': 14, 'index': 2657}","   99 |           <Vomit
  100 |             throw={() => {
> 101 |               throw new Error('Raw error throw');
      |              ^ Exception Handling
  102 |             }}
  103 |             setForceThrow={thrower.setForceThrow}
  104 |           />",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Lazy Test,"{'line': 75, 'column': 4, 'index': 1851}","  73 |     const handle: HTMLElement = getByText('item: 0');
  74 |
> 75 |     simpleLift(control, handle);
     |    ^ Lazy Test
  76 |     expect(isDragging(handle)).toBe(true);
  77 |
  78 |     thrower.execute();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Lazy Test,"{'line': 76, 'column': 11, 'index': 1891}","  74 |
  75 |     simpleLift(control, handle);
> 76 |     expect(isDragging(handle)).toBe(true);
     |           ^ Lazy Test
  77 |
  78 |     thrower.execute();
  79 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Lazy Test,"{'line': 89, 'column': 13, 'index': 2252}","  87 |       control.move(handle);
  88 |       control.move(newHandle);
> 89 |       expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |             ^ Lazy Test
  90 |       expect(getOffset(newHandle)).toEqual({ x: 0, y: 0 });
  91 |     }).not.toThrow();
  92 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Lazy Test,"{'line': 110, 'column': 4, 'index': 2857}","  108 |     const handle: HTMLElement = getByText('item: 0');
  109 |
> 110 |     simpleLift(control, handle);
      |    ^ Lazy Test
  111 |     expect(isDragging(handle)).toBe(true);
  112 |
  113 |     expect(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Lazy Test,"{'line': 111, 'column': 11, 'index': 2897}","  109 |
  110 |     simpleLift(control, handle);
> 111 |     expect(isDragging(handle)).toBe(true);
      |           ^ Lazy Test
  112 |
  113 |     expect(() => {
  114 |       thrower.execute();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Lazy Test,"{'line': 123, 'column': 13, 'index': 3172}","  121 |     expect(() => {
  122 |       control.move(handle);
> 123 |       expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
      |             ^ Lazy Test
  124 |     }).not.toThrow();
  125 |   });
  126 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Lazy Test,"{'line': 143, 'column': 4, 'index': 3661}","  141 |     const handle: HTMLElement = getByText('item: 0');
  142 |
> 143 |     simpleLift(control, handle);
      |    ^ Lazy Test
  144 |     expect(isDragging(handle)).toBe(true);
  145 |
  146 |     withWarn(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,Lazy Test,"{'line': 144, 'column': 11, 'index': 3701}","  142 |
  143 |     simpleLift(control, handle);
> 144 |     expect(isDragging(handle)).toBe(true);
      |           ^ Lazy Test
  145 |
  146 |     withWarn(() => {
  147 |       thrower.execute();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Duplicate Assert,"{'line': 33, 'column': 2, 'index': 809}","  31 |   invariant(preDrag);
  32 |   // it is currently active
> 33 |   expect(preDrag.isActive()).toBe(true);
     |  ^ Duplicate Assert
  34 |
  35 |   const drag: SnapDragActions = preDrag.snapLift();
  36 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Duplicate Assert,"{'line': 38, 'column': 2, 'index': 931}","  36 |
  37 |   // pre drag now outdated
> 38 |   expect(preDrag.isActive()).toBe(false);
     |  ^ Duplicate Assert
  39 |   preDrag.abort();
  40 |   expect(warn.mock.calls[0][0]).toEqual(
  41 |     expect.stringContaining('Cannot perform action'),",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Duplicate Assert,"{'line': 40, 'column': 2, 'index': 992}","  38 |   expect(preDrag.isActive()).toBe(false);
  39 |   preDrag.abort();
> 40 |   expect(warn.mock.calls[0][0]).toEqual(
     |  ^ Duplicate Assert
  41 |     expect.stringContaining('Cannot perform action'),
  42 |   );
  43 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Duplicate Assert,"{'line': 40, 'column': 2, 'index': 992}","  38 |   expect(preDrag.isActive()).toBe(false);
  39 |   preDrag.abort();
> 40 |   expect(warn.mock.calls[0][0]).toEqual(
     |  ^ Duplicate Assert
  41 |     expect.stringContaining('Cannot perform action'),
  42 |   );
  43 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Duplicate Assert,"{'line': 54, 'column': 2, 'index': 1333}","  52 |   // preDrag is still out of date
  53 |   preDrag.abort();
> 54 |   expect(warn.mock.calls[0][0]).toEqual(
     |  ^ Duplicate Assert
  55 |     expect.stringContaining('Cannot perform action'),
  56 |   );
  57 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Duplicate Assert,"{'line': 54, 'column': 2, 'index': 1333}","  52 |   // preDrag is still out of date
  53 |   preDrag.abort();
> 54 |   expect(warn.mock.calls[0][0]).toEqual(
     |  ^ Duplicate Assert
  55 |     expect.stringContaining('Cannot perform action'),
  56 |   );
  57 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Duplicate Assert,"{'line': 72, 'column': 2, 'index': 1843}","  70 |
  71 |   const drag: SnapDragActions = preDrag.snapLift();
> 72 |   expect(drag.isActive()).toBe(true);
     |  ^ Duplicate Assert
  73 |
  74 |   act(() => drag.cancel());
  75 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Duplicate Assert,"{'line': 77, 'column': 2, 'index': 1933}","  75 |
  76 |   // no longer active
> 77 |   expect(drag.isActive()).toBe(false);
     |  ^ Duplicate Assert
  78 |   expect(warn).not.toHaveBeenCalled();
  79 |
  80 |   drag.moveUp();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Duplicate Assert,"{'line': 96, 'column': 2, 'index': 2470}","  94 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
  95 |   invariant(preDrag);
> 96 |   expect(preDrag.isActive()).toBe(true);
     |  ^ Duplicate Assert
  97 |
  98 |   // will cause all lock to be lost
  99 |   unmount();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Duplicate Assert,"{'line': 101, 'column': 2, 'index': 2562}","   99 |   unmount();
  100 |
> 101 |   expect(preDrag.isActive()).toBe(false);
      |  ^ Duplicate Assert
  102 | });
  103 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Eager Test,"{'line': 28, 'column': 2, 'index': 658}","  26 |   };
  27 |   render(<App sensors={[a]} />);
> 28 |   invariant(api, 'expected api to be set');
     |  ^ Eager Test
  29 |
  30 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
  31 |   invariant(preDrag);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Eager Test,"{'line': 31, 'column': 2, 'index': 759}","  29 |
  30 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
> 31 |   invariant(preDrag);
     |  ^ Eager Test
  32 |   // it is currently active
  33 |   expect(preDrag.isActive()).toBe(true);
  34 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Eager Test,"{'line': 65, 'column': 2, 'index': 1626}","  63 |   };
  64 |   render(<App sensors={[sensor]} />);
> 65 |   invariant(api, 'expected api to be set');
     |  ^ Eager Test
  66 |
  67 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
  68 |   invariant(preDrag);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Eager Test,"{'line': 68, 'column': 2, 'index': 1727}","  66 |
  67 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
> 68 |   invariant(preDrag);
     |  ^ Eager Test
  69 |   expect(preDrag.isActive()).toBe(true);
  70 |
  71 |   const drag: SnapDragActions = preDrag.snapLift();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Eager Test,"{'line': 92, 'column': 2, 'index': 2345}","  90 |   };
  91 |   const { unmount } = render(<App sensors={[sensor]} />);
> 92 |   invariant(api, 'expected first to be set');
     |  ^ Eager Test
  93 |
  94 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
  95 |   invariant(preDrag);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Eager Test,"{'line': 95, 'column': 2, 'index': 2448}","  93 |
  94 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
> 95 |   invariant(preDrag);
     |  ^ Eager Test
  96 |   expect(preDrag.isActive()).toBe(true);
  97 |
  98 |   // will cause all lock to be lost",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Lazy Test,"{'line': 28, 'column': 2, 'index': 658}","  26 |   };
  27 |   render(<App sensors={[a]} />);
> 28 |   invariant(api, 'expected api to be set');
     |  ^ Lazy Test
  29 |
  30 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
  31 |   invariant(preDrag);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Lazy Test,"{'line': 65, 'column': 2, 'index': 1626}","  63 |   };
  64 |   render(<App sensors={[sensor]} />);
> 65 |   invariant(api, 'expected api to be set');
     |  ^ Lazy Test
  66 |
  67 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
  68 |   invariant(preDrag);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,Lazy Test,"{'line': 92, 'column': 2, 'index': 2345}","  90 |   };
  91 |   const { unmount } = render(<App sensors={[sensor]} />);
> 92 |   invariant(api, 'expected first to be set');
     |  ^ Lazy Test
  93 |
  94 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
  95 |   invariant(preDrag);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Conditional Test Logic,"{'line': 137, 'column': 21, 'index': 3923}","  135 |   invariant(api, 'expected getter to be set');
  136 |
> 137 |   ['cancel', 'drop'].forEach((property: string) => {
      |                     ^ Conditional Test Logic
  138 |     const preDrag: ?PreDragActions = api.tryGetLock('0', noop);
  139 |     invariant(preDrag, 'Expected to get lock');
  140 |     expect(preDrag.isActive()).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Duplicate Assert,"{'line': 33, 'column': 2, 'index': 811}","  31 |
  32 |   // first can get a lock
> 33 |   expect(first.tryGetLock('0')).toBeTruthy();
     |  ^ Duplicate Assert
  34 |
  35 |   // second cannot get a lock
  36 |   expect(second.tryGetLock('0')).toBe(null);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Duplicate Assert,"{'line': 39, 'column': 2, 'index': 989}","  37 |
  38 |   // first cannot get another lock on the same element
> 39 |   expect(first.tryGetLock('0')).toBe(null);
     |  ^ Duplicate Assert
  40 |
  41 |   // nothing cannot get lock on a different element
  42 |   expect(first.tryGetLock('1')).toBe(null);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Duplicate Assert,"{'line': 82, 'column': 2, 'index': 2254}","  80 |
  81 |   // drag not started yet
> 82 |   expect(isDragging(handle)).toBe(false);
     |  ^ Duplicate Assert
  83 |   // start a drag
  84 |   const actions: FluidDragActions = preDrag.fluidLift({ x: 0, y: 0 });
  85 |   expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Duplicate Assert,"{'line': 85, 'column': 2, 'index': 2385}","  83 |   // start a drag
  84 |   const actions: FluidDragActions = preDrag.fluidLift({ x: 0, y: 0 });
> 85 |   expect(isDragging(handle)).toBe(true);
     |  ^ Duplicate Assert
  86 |
  87 |   // release the movement
  88 |   actions.move({ x: 100, y: 100 });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Duplicate Assert,"{'line': 115, 'column': 2, 'index': 3286}","  113 |   const preDrag: ?PreDragActions = api.tryGetLock('0', noop);
  114 |   invariant(preDrag, 'Expected to get lock');
> 115 |   expect(preDrag.isActive()).toBe(true);
      |  ^ Duplicate Assert
  116 |   // should release the lock
  117 |   preDrag.abort();
  118 |   expect(preDrag.isActive()).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Duplicate Assert,"{'line': 118, 'column': 2, 'index': 3375}","  116 |   // should release the lock
  117 |   preDrag.abort();
> 118 |   expect(preDrag.isActive()).toBe(false);
      |  ^ Duplicate Assert
  119 |
  120 |   // can get another lock
  121 |   const second: ?PreDragActions = api.tryGetLock('1', noop);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 29, 'column': 2, 'index': 686}","  27 |
  28 |   render(<App sensors={[a, b]} />);
> 29 |   invariant(first, 'expected first to be set');
     |  ^ Eager Test
  30 |   invariant(second, 'expected second to be set');
  31 |
  32 |   // first can get a lock",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 30, 'column': 2, 'index': 734}","  28 |   render(<App sensors={[a, b]} />);
  29 |   invariant(first, 'expected first to be set');
> 30 |   invariant(second, 'expected second to be set');
     |  ^ Eager Test
  31 |
  32 |   // first can get a lock
  33 |   expect(first.tryGetLock('0')).toBeTruthy();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 53, 'column': 2, 'index': 1361}","  51 |
  52 |   render(<App sensors={[sensor]} />);
> 53 |   invariant(api, 'expected getter to be set');
     |  ^ Eager Test
  54 |
  55 |   Array.from({ length: 4 }).forEach(() => {
  56 |     // get the lock",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 59, 'column': 4, 'index': 1567}","  57 |     const lock: ?PreDragActions = api.tryGetLock('0', noop);
  58 |     expect(lock).toBeTruthy();
> 59 |     invariant(lock, 'Expected lock to be set');
     |    ^ Eager Test
  60 |
  61 |     // cannot get another lock
  62 |     expect(api.tryGetLock('0')).toBe(null);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 75, 'column': 2, 'index': 2019}","  73 |   };
  74 |   const { getByText } = render(<App sensors={[sensor]} />);
> 75 |   invariant(api, 'expected getter to be set');
     |  ^ Eager Test
  76 |   const handle: HTMLElement = getByText('item: 0');
  77 |
  78 |   const preDrag: ?PreDragActions = api.tryGetLock('0', noop);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 79, 'column': 2, 'index': 2181}","  77 |
  78 |   const preDrag: ?PreDragActions = api.tryGetLock('0', noop);
> 79 |   invariant(preDrag, 'Expected to get lock');
     |  ^ Eager Test
  80 |
  81 |   // drag not started yet
  82 |   expect(isDragging(handle)).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 82, 'column': 9, 'index': 2261}","  80 |
  81 |   // drag not started yet
> 82 |   expect(isDragging(handle)).toBe(false);
     |         ^ Eager Test
  83 |   // start a drag
  84 |   const actions: FluidDragActions = preDrag.fluidLift({ x: 0, y: 0 });
  85 |   expect(isDragging(handle)).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 85, 'column': 9, 'index': 2392}","  83 |   // start a drag
  84 |   const actions: FluidDragActions = preDrag.fluidLift({ x: 0, y: 0 });
> 85 |   expect(isDragging(handle)).toBe(true);
     |         ^ Eager Test
  86 |
  87 |   // release the movement
  88 |   actions.move({ x: 100, y: 100 });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 92, 'column': 9, 'index': 2548}","  90 |
  91 |   actions.drop();
> 92 |   expect(isDropAnimating(handle)).toBe(true);
     |         ^ Eager Test
  93 |
  94 |   // lock is no longer active
  95 |   expect(actions.isActive()).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 111, 'column': 2, 'index': 3130}","  109 |   };
  110 |   render(<App sensors={[sensor]} />);
> 111 |   invariant(api, 'expected getter to be set');
      |  ^ Eager Test
  112 |
  113 |   const preDrag: ?PreDragActions = api.tryGetLock('0', noop);
  114 |   invariant(preDrag, 'Expected to get lock');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 114, 'column': 2, 'index': 3240}","  112 |
  113 |   const preDrag: ?PreDragActions = api.tryGetLock('0', noop);
> 114 |   invariant(preDrag, 'Expected to get lock');
      |  ^ Eager Test
  115 |   expect(preDrag.isActive()).toBe(true);
  116 |   // should release the lock
  117 |   preDrag.abort();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 123, 'column': 2, 'index': 3536}","  121 |   const second: ?PreDragActions = api.tryGetLock('1', noop);
  122 |   expect(second).toBeTruthy();
> 123 |   invariant(second);
      |  ^ Eager Test
  124 |   // need to release this one :)
  125 |   second.abort();
  126 |   expect(second.isActive()).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 135, 'column': 2, 'index': 3856}","  133 |   };
  134 |   render(<App sensors={[sensor]} />);
> 135 |   invariant(api, 'expected getter to be set');
      |  ^ Eager Test
  136 |
  137 |   ['cancel', 'drop'].forEach((property: string) => {
  138 |     const preDrag: ?PreDragActions = api.tryGetLock('0', noop);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 139, 'column': 4, 'index': 4023}","  137 |   ['cancel', 'drop'].forEach((property: string) => {
  138 |     const preDrag: ?PreDragActions = api.tryGetLock('0', noop);
> 139 |     invariant(preDrag, 'Expected to get lock');
      |    ^ Eager Test
  140 |     expect(preDrag.isActive()).toBe(true);
  141 |
  142 |     const drag: SnapDragActions = preDrag.snapLift();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Eager Test,"{'line': 158, 'column': 4, 'index': 4574}","  156 |     expect(third).toBeTruthy();
  157 |     // need to try to release it
> 158 |     invariant(third);
      |    ^ Eager Test
  159 |     third.abort();
  160 |   });
  161 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Lazy Test,"{'line': 29, 'column': 2, 'index': 686}","  27 |
  28 |   render(<App sensors={[a, b]} />);
> 29 |   invariant(first, 'expected first to be set');
     |  ^ Lazy Test
  30 |   invariant(second, 'expected second to be set');
  31 |
  32 |   // first can get a lock",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Lazy Test,"{'line': 53, 'column': 2, 'index': 1361}","  51 |
  52 |   render(<App sensors={[sensor]} />);
> 53 |   invariant(api, 'expected getter to be set');
     |  ^ Lazy Test
  54 |
  55 |   Array.from({ length: 4 }).forEach(() => {
  56 |     // get the lock",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Lazy Test,"{'line': 75, 'column': 2, 'index': 2019}","  73 |   };
  74 |   const { getByText } = render(<App sensors={[sensor]} />);
> 75 |   invariant(api, 'expected getter to be set');
     |  ^ Lazy Test
  76 |   const handle: HTMLElement = getByText('item: 0');
  77 |
  78 |   const preDrag: ?PreDragActions = api.tryGetLock('0', noop);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Lazy Test,"{'line': 111, 'column': 2, 'index': 3130}","  109 |   };
  110 |   render(<App sensors={[sensor]} />);
> 111 |   invariant(api, 'expected getter to be set');
      |  ^ Lazy Test
  112 |
  113 |   const preDrag: ?PreDragActions = api.tryGetLock('0', noop);
  114 |   invariant(preDrag, 'Expected to get lock');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,Lazy Test,"{'line': 135, 'column': 2, 'index': 3856}","  133 |   };
  134 |   render(<App sensors={[sensor]} />);
> 135 |   invariant(api, 'expected getter to be set');
      |  ^ Lazy Test
  136 |
  137 |   ['cancel', 'drop'].forEach((property: string) => {
  138 |     const preDrag: ?PreDragActions = api.tryGetLock('0', noop);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/no-double-lift.spec.js,Eager Test,"{'line': 19, 'column': 2, 'index': 456}","  17 |   };
  18 |   render(<App sensors={[a]} />);
> 19 |   invariant(api, 'expected first to be set');
     |  ^ Eager Test
  20 |
  21 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
  22 |   invariant(preDrag);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/no-double-lift.spec.js,Eager Test,"{'line': 22, 'column': 2, 'index': 559}","  20 |
  21 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
> 22 |   invariant(preDrag);
     |  ^ Eager Test
  23 |   // it is currently active
  24 |   expect(preDrag.isActive()).toBe(true);
  25 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Duplicate Assert,"{'line': 33, 'column': 2, 'index': 1000}","  31 |   const actions: FluidDragActions = preDrag.fluidLift(initial);
  32 |   // has not moved yet
> 33 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |  ^ Duplicate Assert
  34 |
  35 |   const offset: Position = { x: 1, y: 5 };
  36 |   actions.move(add(initial, offset));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Duplicate Assert,"{'line': 33, 'column': 2, 'index': 1000}","  31 |   const actions: FluidDragActions = preDrag.fluidLift(initial);
  32 |   // has not moved yet
> 33 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |  ^ Duplicate Assert
  34 |
  35 |   const offset: Position = { x: 1, y: 5 };
  36 |   actions.move(add(initial, offset));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Duplicate Assert,"{'line': 41, 'column': 2, 'index': 1233}","  39 |
  40 |   // still not moved
> 41 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |  ^ Duplicate Assert
  42 |
  43 |   // moved after frame
  44 |   requestAnimationFrame.step();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Duplicate Assert,"{'line': 41, 'column': 2, 'index': 1233}","  39 |
  40 |   // still not moved
> 41 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |  ^ Duplicate Assert
  42 |
  43 |   // moved after frame
  44 |   requestAnimationFrame.step();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Duplicate Assert,"{'line': 45, 'column': 2, 'index': 1342}","  43 |   // moved after frame
  44 |   requestAnimationFrame.step();
> 45 |   expect(getOffset(handle)).toEqual(offset);
     |  ^ Duplicate Assert
  46 | });
  47 |
  48 | it('should cancel any pending moves after a lock is released', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Duplicate Assert,"{'line': 63, 'column': 2, 'index': 1919}","  61 |   const actions: FluidDragActions = preDrag.fluidLift(initial);
  62 |   // has not moved yet
> 63 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |  ^ Duplicate Assert
  64 |
  65 |   const offset: Position = { x: 1, y: 5 };
  66 |   actions.move(add(initial, offset));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Duplicate Assert,"{'line': 63, 'column': 2, 'index': 1919}","  61 |   const actions: FluidDragActions = preDrag.fluidLift(initial);
  62 |   // has not moved yet
> 63 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |  ^ Duplicate Assert
  64 |
  65 |   const offset: Position = { x: 1, y: 5 };
  66 |   actions.move(add(initial, offset));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Duplicate Assert,"{'line': 68, 'column': 2, 'index': 2073}","  66 |   actions.move(add(initial, offset));
  67 |   // not moved yet
> 68 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |  ^ Duplicate Assert
  69 |
  70 |   actions.cancel();
  71 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Duplicate Assert,"{'line': 68, 'column': 2, 'index': 2073}","  66 |   actions.move(add(initial, offset));
  67 |   // not moved yet
> 68 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |  ^ Duplicate Assert
  69 |
  70 |   actions.cancel();
  71 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Duplicate Assert,"{'line': 74, 'column': 2, 'index': 2206}","  72 |   // will not do anything
  73 |   requestAnimationFrame.step();
> 74 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |  ^ Duplicate Assert
  75 | });
  76 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Duplicate Assert,"{'line': 74, 'column': 2, 'index': 2206}","  72 |   // will not do anything
  73 |   requestAnimationFrame.step();
> 74 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |  ^ Duplicate Assert
  75 | });
  76 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Eager Test,"{'line': 24, 'column': 2, 'index': 684}","  22 |   };
  23 |   const { getByText } = render(<App sensors={[sensor]} />);
> 24 |   invariant(api, 'expected getter to be set');
     |  ^ Eager Test
  25 |   const handle: HTMLElement = getByText('item: 0');
  26 |
  27 |   const preDrag: ?PreDragActions = api.tryGetLock('0', noop);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Eager Test,"{'line': 28, 'column': 2, 'index': 846}","  26 |
  27 |   const preDrag: ?PreDragActions = api.tryGetLock('0', noop);
> 28 |   invariant(preDrag);
     |  ^ Eager Test
  29 |
  30 |   const initial: Position = { x: 2, y: 3 };
  31 |   const actions: FluidDragActions = preDrag.fluidLift(initial);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Eager Test,"{'line': 33, 'column': 9, 'index': 1007}","  31 |   const actions: FluidDragActions = preDrag.fluidLift(initial);
  32 |   // has not moved yet
> 33 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |         ^ Eager Test
  34 |
  35 |   const offset: Position = { x: 1, y: 5 };
  36 |   actions.move(add(initial, offset));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Eager Test,"{'line': 41, 'column': 9, 'index': 1240}","  39 |
  40 |   // still not moved
> 41 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |         ^ Eager Test
  42 |
  43 |   // moved after frame
  44 |   requestAnimationFrame.step();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Eager Test,"{'line': 45, 'column': 9, 'index': 1349}","  43 |   // moved after frame
  44 |   requestAnimationFrame.step();
> 45 |   expect(getOffset(handle)).toEqual(offset);
     |         ^ Eager Test
  46 | });
  47 |
  48 | it('should cancel any pending moves after a lock is released', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Eager Test,"{'line': 54, 'column': 2, 'index': 1606}","  52 |   };
  53 |   const { getByText } = render(<App sensors={[a]} />);
> 54 |   invariant(api, 'expected api to be set');
     |  ^ Eager Test
  55 |   const handle: HTMLElement = getByText('item: 0');
  56 |
  57 |   const preDrag: ?PreDragActions = api.tryGetLock('0', noop);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Eager Test,"{'line': 58, 'column': 2, 'index': 1765}","  56 |
  57 |   const preDrag: ?PreDragActions = api.tryGetLock('0', noop);
> 58 |   invariant(preDrag);
     |  ^ Eager Test
  59 |
  60 |   const initial: Position = { x: 2, y: 3 };
  61 |   const actions: FluidDragActions = preDrag.fluidLift(initial);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Eager Test,"{'line': 63, 'column': 9, 'index': 1926}","  61 |   const actions: FluidDragActions = preDrag.fluidLift(initial);
  62 |   // has not moved yet
> 63 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |         ^ Eager Test
  64 |
  65 |   const offset: Position = { x: 1, y: 5 };
  66 |   actions.move(add(initial, offset));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Eager Test,"{'line': 68, 'column': 9, 'index': 2080}","  66 |   actions.move(add(initial, offset));
  67 |   // not moved yet
> 68 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |         ^ Eager Test
  69 |
  70 |   actions.cancel();
  71 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Eager Test,"{'line': 74, 'column': 9, 'index': 2213}","  72 |   // will not do anything
  73 |   requestAnimationFrame.step();
> 74 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |         ^ Eager Test
  75 | });
  76 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Lazy Test,"{'line': 24, 'column': 2, 'index': 684}","  22 |   };
  23 |   const { getByText } = render(<App sensors={[sensor]} />);
> 24 |   invariant(api, 'expected getter to be set');
     |  ^ Lazy Test
  25 |   const handle: HTMLElement = getByText('item: 0');
  26 |
  27 |   const preDrag: ?PreDragActions = api.tryGetLock('0', noop);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Lazy Test,"{'line': 33, 'column': 9, 'index': 1007}","  31 |   const actions: FluidDragActions = preDrag.fluidLift(initial);
  32 |   // has not moved yet
> 33 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |         ^ Lazy Test
  34 |
  35 |   const offset: Position = { x: 1, y: 5 };
  36 |   actions.move(add(initial, offset));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Lazy Test,"{'line': 54, 'column': 2, 'index': 1606}","  52 |   };
  53 |   const { getByText } = render(<App sensors={[a]} />);
> 54 |   invariant(api, 'expected api to be set');
     |  ^ Lazy Test
  55 |   const handle: HTMLElement = getByText('item: 0');
  56 |
  57 |   const preDrag: ?PreDragActions = api.tryGetLock('0', noop);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,Lazy Test,"{'line': 63, 'column': 9, 'index': 1926}","  61 |   const actions: FluidDragActions = preDrag.fluidLift(initial);
  62 |   // has not moved yet
> 63 |   expect(getOffset(handle)).toEqual({ x: 0, y: 0 });
     |         ^ Lazy Test
  64 |
  65 |   const offset: Position = { x: 1, y: 5 };
  66 |   actions.move(add(initial, offset));",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/lock-context-isolation.spec.js,Eager Test,"{'line': 32, 'column': 2, 'index': 856}","  30 |
  31 |   // each sensor can get a different lock
> 32 |   invariant(first, 'expected first to be set');
     |  ^ Eager Test
  33 |   invariant(second, 'expected second to be set');
  34 |   expect(first.tryGetLock('0')).toBeTruthy();
  35 |   expect(second.tryGetLock('0')).toBeTruthy();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/lock-context-isolation.spec.js,Eager Test,"{'line': 33, 'column': 2, 'index': 904}","  31 |   // each sensor can get a different lock
  32 |   invariant(first, 'expected first to be set');
> 33 |   invariant(second, 'expected second to be set');
     |  ^ Eager Test
  34 |   expect(first.tryGetLock('0')).toBeTruthy();
  35 |   expect(second.tryGetLock('0')).toBeTruthy();
  36 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/lock-context-isolation.spec.js,Magic Number,"{'line': 27, 'column': 29, 'index': 732}","  25 |
  26 |   const items: HTMLElement[] = getAllByText('item: 0');
> 27 |   expect(items).toHaveLength(2);
     |                             ^ Magic Number
  28 |   const [inFirst, inSecond] = items;
  29 |   expect(inFirst).not.toBe(inSecond);
  30 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/is-lock-claimed.spec.js,Duplicate Assert,"{'line': 30, 'column': 2, 'index': 693}","  28 |
  29 |   // both sensors know that the lock is not claimed
> 30 |   expect(first.isLockClaimed()).toBe(false);
     |  ^ Duplicate Assert
  31 |   expect(second.isLockClaimed()).toBe(false);
  32 |
  33 |   const preDrag: ?PreDragActions = first.tryGetLock('0');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/is-lock-claimed.spec.js,Duplicate Assert,"{'line': 31, 'column': 2, 'index': 738}","  29 |   // both sensors know that the lock is not claimed
  30 |   expect(first.isLockClaimed()).toBe(false);
> 31 |   expect(second.isLockClaimed()).toBe(false);
     |  ^ Duplicate Assert
  32 |
  33 |   const preDrag: ?PreDragActions = first.tryGetLock('0');
  34 |   expect(preDrag).toBeTruthy();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/is-lock-claimed.spec.js,Duplicate Assert,"{'line': 37, 'column': 2, 'index': 926}","  35 |
  36 |   // both sensors can know if the lock is claimed
> 37 |   expect(first.isLockClaimed()).toBe(true);
     |  ^ Duplicate Assert
  38 |   expect(second.isLockClaimed()).toBe(true);
  39 | });
  40 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/is-lock-claimed.spec.js,Duplicate Assert,"{'line': 38, 'column': 2, 'index': 970}","  36 |   // both sensors can know if the lock is claimed
  37 |   expect(first.isLockClaimed()).toBe(true);
> 38 |   expect(second.isLockClaimed()).toBe(true);
     |  ^ Duplicate Assert
  39 | });
  40 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/force-releasing-locks.spec.js,Duplicate Assert,"{'line': 33, 'column': 2, 'index': 788}","  31 |   const preDrag: ?PreDragActions = first.tryGetLock('0', onForceStop);
  32 |   expect(preDrag).toBeTruthy();
> 33 |   expect(second.isLockClaimed()).toBe(true);
     |  ^ Duplicate Assert
  34 |
  35 |   second.tryReleaseLock();
  36 |   expect(onForceStop).toHaveBeenCalled();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/force-releasing-locks.spec.js,Duplicate Assert,"{'line': 38, 'column': 2, 'index': 921}","  36 |   expect(onForceStop).toHaveBeenCalled();
  37 |   // lock is gone
> 38 |   expect(second.isLockClaimed()).toBe(false);
     |  ^ Duplicate Assert
  39 | });
  40 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/force-releasing-locks.spec.js,Eager Test,"{'line': 28, 'column': 2, 'index': 643}","  26 |     </React.Fragment>,
  27 |   );
> 28 |   invariant(first);
     |  ^ Eager Test
  29 |   invariant(second);
  30 |
  31 |   const preDrag: ?PreDragActions = first.tryGetLock('0', onForceStop);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/force-releasing-locks.spec.js,Eager Test,"{'line': 29, 'column': 2, 'index': 663}","  27 |   );
  28 |   invariant(first);
> 29 |   invariant(second);
     |  ^ Eager Test
  30 |
  31 |   const preDrag: ?PreDragActions = first.tryGetLock('0', onForceStop);
  32 |   expect(preDrag).toBeTruthy();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/click-blocking.spec.js,Eager Test,"{'line': 26, 'column': 2, 'index': 672}","  24 |   );
  25 |   const handle: HTMLElement = getByText('item: 0');
> 26 |   invariant(api);
     |  ^ Eager Test
  27 |
  28 |   // trigger a drop
  29 |   const preDrag: ?PreDragActions = api.tryGetLock('0');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/click-blocking.spec.js,Eager Test,"{'line': 30, 'column': 2, 'index': 767}","  28 |   // trigger a drop
  29 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
> 30 |   invariant(preDrag);
     |  ^ Eager Test
  31 |   const drag: SnapDragActions = preDrag.snapLift();
  32 |   act(() => drag.drop({ shouldBlockNextClick: true }));
  33 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/click-blocking.spec.js,Eager Test,"{'line': 58, 'column': 2, 'index': 1525}","  56 |   );
  57 |   const handle: HTMLElement = getByText('item: 0');
> 58 |   invariant(api);
     |  ^ Eager Test
  59 |
  60 |   // trigger a drop
  61 |   const preDrag: ?PreDragActions = api.tryGetLock('0');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/click-blocking.spec.js,Eager Test,"{'line': 62, 'column': 2, 'index': 1620}","  60 |   // trigger a drop
  61 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
> 62 |   invariant(preDrag);
     |  ^ Eager Test
  63 |   const drag: SnapDragActions = preDrag.snapLift();
  64 |   act(() => drag.drop({ shouldBlockNextClick: false }));
  65 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/click-blocking.spec.js,Eager Test,"{'line': 88, 'column': 2, 'index': 2271}","  86 |   );
  87 |   const handle: HTMLElement = getByText('item: 0');
> 88 |   invariant(api);
     |  ^ Eager Test
  89 |
  90 |   // trigger a drop
  91 |   const preDrag: ?PreDragActions = api.tryGetLock('0');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/click-blocking.spec.js,Eager Test,"{'line': 92, 'column': 2, 'index': 2366}","  90 |   // trigger a drop
  91 |   const preDrag: ?PreDragActions = api.tryGetLock('0');
> 92 |   invariant(preDrag);
     |  ^ Eager Test
  93 |   const drag: SnapDragActions = preDrag.snapLift();
  94 |   act(() => drag.drop({ shouldBlockNextClick: true }));
  95 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/click-blocking.spec.js,Lazy Test,"{'line': 26, 'column': 2, 'index': 672}","  24 |   );
  25 |   const handle: HTMLElement = getByText('item: 0');
> 26 |   invariant(api);
     |  ^ Lazy Test
  27 |
  28 |   // trigger a drop
  29 |   const preDrag: ?PreDragActions = api.tryGetLock('0');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/click-blocking.spec.js,Lazy Test,"{'line': 58, 'column': 2, 'index': 1525}","  56 |   );
  57 |   const handle: HTMLElement = getByText('item: 0');
> 58 |   invariant(api);
     |  ^ Lazy Test
  59 |
  60 |   // trigger a drop
  61 |   const preDrag: ?PreDragActions = api.tryGetLock('0');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/sensor-marshal/click-blocking.spec.js,Lazy Test,"{'line': 88, 'column': 2, 'index': 2271}","  86 |   );
  87 |   const handle: HTMLElement = getByText('item: 0');
> 88 |   invariant(api);
     |  ^ Lazy Test
  89 |
  90 |   // trigger a drop
  91 |   const preDrag: ?PreDragActions = api.tryGetLock('0');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Conditional Test Logic,"{'line': 41, 'column': 33, 'index': 1432}","  39 |
  40 | it('should not prevent the default behaviour for an indirect cancel', () => {
> 41 |   ['resize', supportedEventName].forEach((eventName: string) => {
     |                                 ^ Conditional Test Logic
  42 |     const onDragEnd = jest.fn();
  43 |     const { getByText, unmount } = render(<App onDragEnd={onDragEnd} />);
  44 |     const handle: HTMLElement = getByText('item: 0');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 15, 'column': 2, 'index': 661}","  13 |   const handle: HTMLElement = getByText('item: 0');
  14 |
> 15 |   simpleLift(mouse, handle);
     |  ^ Eager Test
  16 |
  17 |   const event: Event = createEvent.mouseUp(handle);
  18 |   fireEvent(handle, event);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 21, 'column': 9, 'index': 824}","  19 |
  20 |   expect(event.defaultPrevented).toBe(true);
> 21 |   expect(getDropReason(onDragEnd)).toBe('DROP');
     |         ^ Eager Test
  22 | });
  23 |
  24 | it('should prevent default on an escape press', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 29, 'column': 2, 'index': 1074}","  27 |   const handle: HTMLElement = getByText('item: 0');
  28 |
> 29 |   simpleLift(mouse, handle);
     |  ^ Eager Test
  30 |
  31 |   const event: Event = createEvent.keyDown(handle, {
  32 |     keyCode: keyCodes.escape,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 37, 'column': 9, 'index': 1274}","  35 |
  36 |   expect(event.defaultPrevented).toBe(true);
> 37 |   expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |         ^ Eager Test
  38 | });
  39 |
  40 | it('should not prevent the default behaviour for an indirect cancel', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 46, 'column': 4, 'index': 1631}","  44 |     const handle: HTMLElement = getByText('item: 0');
  45 |
> 46 |     simpleLift(mouse, handle);
     |    ^ Eager Test
  47 |
  48 |     const event: Event = new Event(eventName, {
  49 |       bubbles: true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 58, 'column': 11, 'index': 1903}","  56 |     // not an explicit cancel
  57 |     expect(event.defaultPrevented).toBe(false);
> 58 |     expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |           ^ Eager Test
  59 |
  60 |     unmount();
  61 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 69, 'column': 2, 'index': 2235}","  67 |   const handle: HTMLElement = getByText('item: 0');
  68 |
> 69 |   simpleLift(mouse, handle);
     |  ^ Eager Test
  70 |
  71 |   const event: Event = createEvent.mouseDown(handle);
  72 |   fireEvent(handle, event);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 75, 'column': 9, 'index': 2400}","  73 |
  74 |   expect(event.defaultPrevented).toBe(true);
> 75 |   expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |         ^ Eager Test
  76 | });
  77 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 15, 'column': 2, 'index': 661}","  13 |   const handle: HTMLElement = getByText('item: 0');
  14 |
> 15 |   simpleLift(mouse, handle);
     |  ^ Lazy Test
  16 |
  17 |   const event: Event = createEvent.mouseUp(handle);
  18 |   fireEvent(handle, event);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 21, 'column': 9, 'index': 824}","  19 |
  20 |   expect(event.defaultPrevented).toBe(true);
> 21 |   expect(getDropReason(onDragEnd)).toBe('DROP');
     |         ^ Lazy Test
  22 | });
  23 |
  24 | it('should prevent default on an escape press', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 29, 'column': 2, 'index': 1074}","  27 |   const handle: HTMLElement = getByText('item: 0');
  28 |
> 29 |   simpleLift(mouse, handle);
     |  ^ Lazy Test
  30 |
  31 |   const event: Event = createEvent.keyDown(handle, {
  32 |     keyCode: keyCodes.escape,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 37, 'column': 9, 'index': 1274}","  35 |
  36 |   expect(event.defaultPrevented).toBe(true);
> 37 |   expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |         ^ Lazy Test
  38 | });
  39 |
  40 | it('should not prevent the default behaviour for an indirect cancel', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 46, 'column': 4, 'index': 1631}","  44 |     const handle: HTMLElement = getByText('item: 0');
  45 |
> 46 |     simpleLift(mouse, handle);
     |    ^ Lazy Test
  47 |
  48 |     const event: Event = new Event(eventName, {
  49 |       bubbles: true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 58, 'column': 11, 'index': 1903}","  56 |     // not an explicit cancel
  57 |     expect(event.defaultPrevented).toBe(false);
> 58 |     expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |           ^ Lazy Test
  59 |
  60 |     unmount();
  61 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 69, 'column': 2, 'index': 2235}","  67 |   const handle: HTMLElement = getByText('item: 0');
  68 |
> 69 |   simpleLift(mouse, handle);
     |  ^ Lazy Test
  70 |
  71 |   const event: Event = createEvent.mouseDown(handle);
  72 |   fireEvent(handle, event);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 75, 'column': 9, 'index': 2400}","  73 |
  74 |   expect(event.defaultPrevented).toBe(true);
> 75 |   expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |         ^ Lazy Test
  76 | });
  77 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/starting-a-dragging.spec.js,Duplicate Assert,"{'line': 40, 'column': 4, 'index': 1293}","  38 |
  39 |     // not dragging yet
> 40 |     expect(isDragging(handle)).toBe(false);
     |    ^ Duplicate Assert
  41 |
  42 |     // mouse move to start drag
  43 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/starting-a-dragging.spec.js,Duplicate Assert,"{'line': 53, 'column': 4, 'index': 1660}","  51 |
  52 |     // now dragging
> 53 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  54 |
  55 |     unmount();
  56 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/starting-a-dragging.spec.js,Duplicate Assert,"{'line': 109, 'column': 4, 'index': 3209}","  107 |     fireEvent.mouseUp(handle);
  108 |
> 109 |     expect(isDragging(handle)).toBe(false);
      |    ^ Duplicate Assert
  110 |   });
  111 |
  112 |   fireEvent.mouseDown(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/starting-a-dragging.spec.js,Duplicate Assert,"{'line': 118, 'column': 2, 'index': 3379}","  116 |   });
  117 |
> 118 |   expect(isDragging(handle)).toBe(true);
      |  ^ Duplicate Assert
  119 | });
  120 |
  121 | it('should not start a drag if there was too little mouse movement while mouse was pressed', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/starting-a-dragging.spec.js,Eager Test,"{'line': 40, 'column': 11, 'index': 1300}","  38 |
  39 |     // not dragging yet
> 40 |     expect(isDragging(handle)).toBe(false);
     |           ^ Eager Test
  41 |
  42 |     // mouse move to start drag
  43 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/starting-a-dragging.spec.js,Eager Test,"{'line': 53, 'column': 11, 'index': 1667}","  51 |
  52 |     // now dragging
> 53 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  54 |
  55 |     unmount();
  56 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/starting-a-dragging.spec.js,Eager Test,"{'line': 109, 'column': 11, 'index': 3216}","  107 |     fireEvent.mouseUp(handle);
  108 |
> 109 |     expect(isDragging(handle)).toBe(false);
      |           ^ Eager Test
  110 |   });
  111 |
  112 |   fireEvent.mouseDown(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/starting-a-dragging.spec.js,Eager Test,"{'line': 118, 'column': 9, 'index': 3386}","  116 |   });
  117 |
> 118 |   expect(isDragging(handle)).toBe(true);
      |         ^ Eager Test
  119 | });
  120 |
  121 | it('should not start a drag if there was too little mouse movement while mouse was pressed', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/starting-a-dragging.spec.js,Lazy Test,"{'line': 40, 'column': 11, 'index': 1300}","  38 |
  39 |     // not dragging yet
> 40 |     expect(isDragging(handle)).toBe(false);
     |           ^ Lazy Test
  41 |
  42 |     // mouse move to start drag
  43 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/starting-a-dragging.spec.js,Lazy Test,"{'line': 87, 'column': 9, 'index': 2512}","  85 |   fireEvent(handle, mouseMove);
  86 |
> 87 |   expect(isDragging(handle)).toBe(false);
     |         ^ Lazy Test
  88 |   expect(mouseMove.defaultPrevented).toBe(false);
  89 | });
  90 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/starting-a-dragging.spec.js,Lazy Test,"{'line': 109, 'column': 11, 'index': 3216}","  107 |     fireEvent.mouseUp(handle);
  108 |
> 109 |     expect(isDragging(handle)).toBe(false);
      |           ^ Lazy Test
  110 |   });
  111 |
  112 |   fireEvent.mouseDown(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/starting-a-dragging.spec.js,Lazy Test,"{'line': 131, 'column': 9, 'index': 3752}","  129 |   });
  130 |
> 131 |   expect(isDragging(handle)).toBe(false);
      |         ^ Lazy Test
  132 | });
  133 |
  134 | it('should not start a drag if not using the primary mouse button', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/starting-a-dragging.spec.js,Lazy Test,"{'line': 147, 'column': 9, 'index': 4187}","  145 |   });
  146 |
> 147 |   expect(isDragging(handle)).toBe(false);
      |         ^ Lazy Test
  148 | });
  149 |
  150 | it('should not start a drag if a modifier key was used while pressing the mouse down', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/starting-a-dragging.spec.js,Lazy Test,"{'line': 166, 'column': 11, 'index': 4835}","  164 |     });
  165 |
> 166 |     expect(isDragging(handle)).toBe(false);
      |           ^ Lazy Test
  167 |   });
  168 | });
  169 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/prevent-standard-keys-while-dragging.spec.js,Conditional Test Logic,"{'line': 16, 'column': 33, 'index': 581}","  14 |   expect(isDragging(handle)).toBe(true);
  15 |
> 16 |   [keyCodes.enter, keyCodes.tab].forEach((keyCode: number) => {
     |                                 ^ Conditional Test Logic
  17 |     const event: Event = createEvent.keyDown(handle, { keyCode });
  18 |     fireEvent(handle, event);
  19 |     expect(event.defaultPrevented).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/prevent-standard-keys-while-dragging.spec.js,Duplicate Assert,"{'line': 14, 'column': 2, 'index': 508}","  12 |
  13 |   simpleLift(mouse, handle);
> 14 |   expect(isDragging(handle)).toBe(true);
     |  ^ Duplicate Assert
  15 |
  16 |   [keyCodes.enter, keyCodes.tab].forEach((keyCode: number) => {
  17 |     const event: Event = createEvent.keyDown(handle, { keyCode });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/prevent-standard-keys-while-dragging.spec.js,Duplicate Assert,"{'line': 14, 'column': 2, 'index': 508}","  12 |
  13 |   simpleLift(mouse, handle);
> 14 |   expect(isDragging(handle)).toBe(true);
     |  ^ Duplicate Assert
  15 |
  16 |   [keyCodes.enter, keyCodes.tab].forEach((keyCode: number) => {
  17 |     const event: Event = createEvent.keyDown(handle, { keyCode });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/prevent-standard-keys-while-dragging.spec.js,Duplicate Assert,"{'line': 20, 'column': 4, 'index': 760}","  18 |     fireEvent(handle, event);
  19 |     expect(event.defaultPrevented).toBe(true);
> 20 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  21 |   });
  22 | });
  23 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/prevent-standard-keys-while-dragging.spec.js,Duplicate Assert,"{'line': 20, 'column': 4, 'index': 760}","  18 |     fireEvent(handle, event);
  19 |     expect(event.defaultPrevented).toBe(true);
> 20 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  21 |   });
  22 | });
  23 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/prevent-standard-keys-while-dragging.spec.js,Eager Test,"{'line': 13, 'column': 2, 'index': 479}","  11 |   const handle: HTMLElement = getByText('item: 0');
  12 |
> 13 |   simpleLift(mouse, handle);
     |  ^ Eager Test
  14 |   expect(isDragging(handle)).toBe(true);
  15 |
  16 |   [keyCodes.enter, keyCodes.tab].forEach((keyCode: number) => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/prevent-standard-keys-while-dragging.spec.js,Eager Test,"{'line': 14, 'column': 9, 'index': 515}","  12 |
  13 |   simpleLift(mouse, handle);
> 14 |   expect(isDragging(handle)).toBe(true);
     |         ^ Eager Test
  15 |
  16 |   [keyCodes.enter, keyCodes.tab].forEach((keyCode: number) => {
  17 |     const event: Event = createEvent.keyDown(handle, { keyCode });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/prevent-standard-keys-while-dragging.spec.js,Eager Test,"{'line': 20, 'column': 11, 'index': 767}","  18 |     fireEvent(handle, event);
  19 |     expect(event.defaultPrevented).toBe(true);
> 20 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  21 |   });
  22 | });
  23 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/force-press.spec.js,Duplicate Assert,"{'line': 93, 'column': 4, 'index': 2953}","  91 |
  92 |     simpleLift(mouse, handle);
> 93 |     expect(isDragging(handle)).toBe(true);
     |    ^ Duplicate Assert
  94 |
  95 |     const event: Event = new Event('webkitmouseforcedown', {
  96 |       bubbles: true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/force-press.spec.js,Duplicate Assert,"{'line': 102, 'column': 4, 'index': 3190}","  100 |     expect(event.defaultPrevented).toBe(false);
  101 |
> 102 |     expect(isDragging(handle)).toBe(false);
      |    ^ Duplicate Assert
  103 |   });
  104 | });
  105 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/force-press.spec.js,Eager Test,"{'line': 22, 'column': 4, 'index': 709}","  20 |
  21 |     // lift not prevented
> 22 |     simpleLift(mouse, handle);
     |    ^ Eager Test
  23 |     expect(isDragging(handle)).toBe(true);
  24 |   });
  25 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/force-press.spec.js,Eager Test,"{'line': 23, 'column': 11, 'index': 747}","  21 |     // lift not prevented
  22 |     simpleLift(mouse, handle);
> 23 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  24 |   });
  25 |
  26 |   it('should prevent the default of a `webkitmouseforcedown` event', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/force-press.spec.js,Eager Test,"{'line': 92, 'column': 4, 'index': 2922}","  90 |     const handle: HTMLElement = getByText('item: 0');
  91 |
> 92 |     simpleLift(mouse, handle);
     |    ^ Eager Test
  93 |     expect(isDragging(handle)).toBe(true);
  94 |
  95 |     const event: Event = new Event('webkitmouseforcedown', {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/force-press.spec.js,Eager Test,"{'line': 93, 'column': 11, 'index': 2960}","  91 |
  92 |     simpleLift(mouse, handle);
> 93 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  94 |
  95 |     const event: Event = new Event('webkitmouseforcedown', {
  96 |       bubbles: true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/force-press.spec.js,Eager Test,"{'line': 102, 'column': 11, 'index': 3197}","  100 |     expect(event.defaultPrevented).toBe(false);
  101 |
> 102 |     expect(isDragging(handle)).toBe(false);
      |           ^ Eager Test
  103 |   });
  104 | });
  105 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/force-press.spec.js,Lazy Test,"{'line': 22, 'column': 4, 'index': 709}","  20 |
  21 |     // lift not prevented
> 22 |     simpleLift(mouse, handle);
     |    ^ Lazy Test
  23 |     expect(isDragging(handle)).toBe(true);
  24 |   });
  25 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/force-press.spec.js,Lazy Test,"{'line': 23, 'column': 11, 'index': 747}","  21 |     // lift not prevented
  22 |     simpleLift(mouse, handle);
> 23 |     expect(isDragging(handle)).toBe(true);
     |           ^ Lazy Test
  24 |   });
  25 |
  26 |   it('should prevent the default of a `webkitmouseforcedown` event', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/force-press.spec.js,Lazy Test,"{'line': 49, 'column': 11, 'index': 1481}","  47 |
  48 |     // dragging not aborted
> 49 |     expect(isDragging(handle)).toBe(true);
     |           ^ Lazy Test
  50 |   });
  51 | });
  52 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/force-press.spec.js,Lazy Test,"{'line': 84, 'column': 11, 'index': 2615}","  82 |
  83 |     mouse.lift(handle);
> 84 |     expect(isDragging(handle)).toBe(false);
     |           ^ Lazy Test
  85 |   });
  86 |
  87 |   it('should cancel an active drag with a webkitmouseforcedown event', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/force-press.spec.js,Lazy Test,"{'line': 92, 'column': 4, 'index': 2922}","  90 |     const handle: HTMLElement = getByText('item: 0');
  91 |
> 92 |     simpleLift(mouse, handle);
     |    ^ Lazy Test
  93 |     expect(isDragging(handle)).toBe(true);
  94 |
  95 |     const event: Event = new Event('webkitmouseforcedown', {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/force-press.spec.js,Lazy Test,"{'line': 93, 'column': 11, 'index': 2960}","  91 |
  92 |     simpleLift(mouse, handle);
> 93 |     expect(isDragging(handle)).toBe(true);
     |           ^ Lazy Test
  94 |
  95 |     const event: Event = new Event('webkitmouseforcedown', {
  96 |       bubbles: true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Duplicate Assert,"{'line': 40, 'column': 2, 'index': 1277}","  38 |
  39 |   simpleLift(mouse, handle);
> 40 |   expect(isDragging(handle)).toBe(true);
     |  ^ Duplicate Assert
  41 |
  42 |   // cancel
  43 |   fireEvent.keyDown(handle, { keyCode: keyCodes.escape });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Duplicate Assert,"{'line': 47, 'column': 2, 'index': 1462}","  45 |   // drag cancelled
  46 |   expect(getDropReason(onDragEnd)).toBe('CANCEL');
> 47 |   expect(isDragging(handle)).toBe(false);
     |  ^ Duplicate Assert
  48 |
  49 |   // click event prevented
  50 |   const click: Event = createEvent.click(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Duplicate Assert,"{'line': 61, 'column': 2, 'index': 1903}","  59 |
  60 |   simpleLift(mouse, handle);
> 61 |   expect(isDragging(handle)).toBe(true);
     |  ^ Duplicate Assert
  62 |
  63 |   // cancel
  64 |   fireEvent.mouseUp(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Duplicate Assert,"{'line': 67, 'column': 2, 'index': 2036}","  65 |
  66 |   expect(getDropReason(onDragEnd)).toBe('DROP');
> 67 |   expect(isDragging(handle)).toBe(false);
     |  ^ Duplicate Assert
  68 |
  69 |   // click event prevented
  70 |   const click: Event = createEvent.click(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Eager Test,"{'line': 39, 'column': 2, 'index': 1248}","  37 |   const handle: HTMLElement = getByText('item: 0');
  38 |
> 39 |   simpleLift(mouse, handle);
     |  ^ Eager Test
  40 |   expect(isDragging(handle)).toBe(true);
  41 |
  42 |   // cancel",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Eager Test,"{'line': 40, 'column': 9, 'index': 1284}","  38 |
  39 |   simpleLift(mouse, handle);
> 40 |   expect(isDragging(handle)).toBe(true);
     |         ^ Eager Test
  41 |
  42 |   // cancel
  43 |   fireEvent.keyDown(handle, { keyCode: keyCodes.escape });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Eager Test,"{'line': 46, 'column': 9, 'index': 1418}","  44 |
  45 |   // drag cancelled
> 46 |   expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |         ^ Eager Test
  47 |   expect(isDragging(handle)).toBe(false);
  48 |
  49 |   // click event prevented",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Eager Test,"{'line': 47, 'column': 9, 'index': 1469}","  45 |   // drag cancelled
  46 |   expect(getDropReason(onDragEnd)).toBe('CANCEL');
> 47 |   expect(isDragging(handle)).toBe(false);
     |         ^ Eager Test
  48 |
  49 |   // click event prevented
  50 |   const click: Event = createEvent.click(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Eager Test,"{'line': 60, 'column': 2, 'index': 1874}","  58 |   const handle: HTMLElement = getByText('item: 0');
  59 |
> 60 |   simpleLift(mouse, handle);
     |  ^ Eager Test
  61 |   expect(isDragging(handle)).toBe(true);
  62 |
  63 |   // cancel",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Eager Test,"{'line': 61, 'column': 9, 'index': 1910}","  59 |
  60 |   simpleLift(mouse, handle);
> 61 |   expect(isDragging(handle)).toBe(true);
     |         ^ Eager Test
  62 |
  63 |   // cancel
  64 |   fireEvent.mouseUp(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Eager Test,"{'line': 66, 'column': 9, 'index': 1994}","  64 |   fireEvent.mouseUp(handle);
  65 |
> 66 |   expect(getDropReason(onDragEnd)).toBe('DROP');
     |         ^ Eager Test
  67 |   expect(isDragging(handle)).toBe(false);
  68 |
  69 |   // click event prevented",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Eager Test,"{'line': 67, 'column': 9, 'index': 2043}","  65 |
  66 |   expect(getDropReason(onDragEnd)).toBe('DROP');
> 67 |   expect(isDragging(handle)).toBe(false);
     |         ^ Eager Test
  68 |
  69 |   // click event prevented
  70 |   const click: Event = createEvent.click(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Lazy Test,"{'line': 26, 'column': 9, 'index': 866}","  24 |
  25 |   // drag not started
> 26 |   expect(isDragging(handle)).toBe(false);
     |         ^ Lazy Test
  27 |
  28 |   const click: Event = createEvent.click(handle);
  29 |   fireEvent(handle, click);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Lazy Test,"{'line': 39, 'column': 2, 'index': 1248}","  37 |   const handle: HTMLElement = getByText('item: 0');
  38 |
> 39 |   simpleLift(mouse, handle);
     |  ^ Lazy Test
  40 |   expect(isDragging(handle)).toBe(true);
  41 |
  42 |   // cancel",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Lazy Test,"{'line': 40, 'column': 9, 'index': 1284}","  38 |
  39 |   simpleLift(mouse, handle);
> 40 |   expect(isDragging(handle)).toBe(true);
     |         ^ Lazy Test
  41 |
  42 |   // cancel
  43 |   fireEvent.keyDown(handle, { keyCode: keyCodes.escape });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Lazy Test,"{'line': 46, 'column': 9, 'index': 1418}","  44 |
  45 |   // drag cancelled
> 46 |   expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |         ^ Lazy Test
  47 |   expect(isDragging(handle)).toBe(false);
  48 |
  49 |   // click event prevented",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Lazy Test,"{'line': 60, 'column': 2, 'index': 1874}","  58 |   const handle: HTMLElement = getByText('item: 0');
  59 |
> 60 |   simpleLift(mouse, handle);
     |  ^ Lazy Test
  61 |   expect(isDragging(handle)).toBe(true);
  62 |
  63 |   // cancel",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Lazy Test,"{'line': 61, 'column': 9, 'index': 1910}","  59 |
  60 |   simpleLift(mouse, handle);
> 61 |   expect(isDragging(handle)).toBe(true);
     |         ^ Lazy Test
  62 |
  63 |   // cancel
  64 |   fireEvent.mouseUp(handle);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/mouse-sensor/click-blocking.spec.js,Lazy Test,"{'line': 66, 'column': 9, 'index': 1994}","  64 |   fireEvent.mouseUp(handle);
  65 |
> 66 |   expect(getDropReason(onDragEnd)).toBe('DROP');
     |         ^ Lazy Test
  67 |   expect(isDragging(handle)).toBe(false);
  68 |
  69 |   // click event prevented",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Conditional Test Logic,"{'line': 51, 'column': 4, 'index': 1653}","  49 |     'wheel',
  50 |     supportedEventName,
> 51 |   ].forEach((eventName: string) => {
     |    ^ Conditional Test Logic
  52 |     const onDragEnd = jest.fn();
  53 |     const { getByText, unmount } = render(<App onDragEnd={onDragEnd} />);
  54 |     const handle: HTMLElement = getByText('item: 0');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 15, 'column': 2, 'index': 676}","  13 |   const handle: HTMLElement = getByText('item: 0');
  14 |
> 15 |   simpleLift(keyboard, handle);
     |  ^ Eager Test
  16 |   expect(isDragging(handle)).toBe(true);
  17 |
  18 |   const event: Event = createEvent.keyDown(handle, { keyCode: keyCodes.space });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 16, 'column': 9, 'index': 715}","  14 |
  15 |   simpleLift(keyboard, handle);
> 16 |   expect(isDragging(handle)).toBe(true);
     |         ^ Eager Test
  17 |
  18 |   const event: Event = createEvent.keyDown(handle, { keyCode: keyCodes.space });
  19 |   fireEvent(handle, event);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 22, 'column': 9, 'index': 912}","  20 |
  21 |   expect(event.defaultPrevented).toBe(true);
> 22 |   expect(getDropReason(onDragEnd)).toBe('DROP');
     |         ^ Eager Test
  23 | });
  24 |
  25 | it('should prevent default on an escape press', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 30, 'column': 2, 'index': 1162}","  28 |   const handle: HTMLElement = getByText('item: 0');
  29 |
> 30 |   simpleLift(keyboard, handle);
     |  ^ Eager Test
  31 |   expect(isDragging(handle)).toBe(true);
  32 |
  33 |   const event: Event = createEvent.keyDown(handle, {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 31, 'column': 9, 'index': 1201}","  29 |
  30 |   simpleLift(keyboard, handle);
> 31 |   expect(isDragging(handle)).toBe(true);
     |         ^ Eager Test
  32 |
  33 |   const event: Event = createEvent.keyDown(handle, {
  34 |     keyCode: keyCodes.escape,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 39, 'column': 9, 'index': 1406}","  37 |
  38 |   expect(event.defaultPrevented).toBe(true);
> 39 |   expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |         ^ Eager Test
  40 | });
  41 |
  42 | it('should not prevent the default behaviour for an indirect cancel', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 56, 'column': 4, 'index': 1852}","  54 |     const handle: HTMLElement = getByText('item: 0');
  55 |
> 56 |     simpleLift(keyboard, handle);
     |    ^ Eager Test
  57 |     expect(isDragging(handle)).toBe(true);
  58 |
  59 |     const event: Event = new Event(eventName, {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 57, 'column': 11, 'index': 1893}","  55 |
  56 |     simpleLift(keyboard, handle);
> 57 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  58 |
  59 |     const event: Event = new Event(eventName, {
  60 |       bubbles: true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Eager Test,"{'line': 69, 'column': 11, 'index': 2170}","  67 |     // not an explicit cancel
  68 |     expect(event.defaultPrevented).toBe(false);
> 69 |     expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |           ^ Eager Test
  70 |
  71 |     unmount();
  72 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 15, 'column': 2, 'index': 676}","  13 |   const handle: HTMLElement = getByText('item: 0');
  14 |
> 15 |   simpleLift(keyboard, handle);
     |  ^ Lazy Test
  16 |   expect(isDragging(handle)).toBe(true);
  17 |
  18 |   const event: Event = createEvent.keyDown(handle, { keyCode: keyCodes.space });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 16, 'column': 9, 'index': 715}","  14 |
  15 |   simpleLift(keyboard, handle);
> 16 |   expect(isDragging(handle)).toBe(true);
     |         ^ Lazy Test
  17 |
  18 |   const event: Event = createEvent.keyDown(handle, { keyCode: keyCodes.space });
  19 |   fireEvent(handle, event);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 22, 'column': 9, 'index': 912}","  20 |
  21 |   expect(event.defaultPrevented).toBe(true);
> 22 |   expect(getDropReason(onDragEnd)).toBe('DROP');
     |         ^ Lazy Test
  23 | });
  24 |
  25 | it('should prevent default on an escape press', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 30, 'column': 2, 'index': 1162}","  28 |   const handle: HTMLElement = getByText('item: 0');
  29 |
> 30 |   simpleLift(keyboard, handle);
     |  ^ Lazy Test
  31 |   expect(isDragging(handle)).toBe(true);
  32 |
  33 |   const event: Event = createEvent.keyDown(handle, {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 31, 'column': 9, 'index': 1201}","  29 |
  30 |   simpleLift(keyboard, handle);
> 31 |   expect(isDragging(handle)).toBe(true);
     |         ^ Lazy Test
  32 |
  33 |   const event: Event = createEvent.keyDown(handle, {
  34 |     keyCode: keyCodes.escape,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 39, 'column': 9, 'index': 1406}","  37 |
  38 |   expect(event.defaultPrevented).toBe(true);
> 39 |   expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |         ^ Lazy Test
  40 | });
  41 |
  42 | it('should not prevent the default behaviour for an indirect cancel', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 56, 'column': 4, 'index': 1852}","  54 |     const handle: HTMLElement = getByText('item: 0');
  55 |
> 56 |     simpleLift(keyboard, handle);
     |    ^ Lazy Test
  57 |     expect(isDragging(handle)).toBe(true);
  58 |
  59 |     const event: Event = new Event(eventName, {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 57, 'column': 11, 'index': 1893}","  55 |
  56 |     simpleLift(keyboard, handle);
> 57 |     expect(isDragging(handle)).toBe(true);
     |           ^ Lazy Test
  58 |
  59 |     const event: Event = new Event(eventName, {
  60 |       bubbles: true,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/stopping-a-drag.spec.js,Lazy Test,"{'line': 69, 'column': 11, 'index': 2170}","  67 |     // not an explicit cancel
  68 |     expect(event.defaultPrevented).toBe(false);
> 69 |     expect(getDropReason(onDragEnd)).toBe('CANCEL');
     |           ^ Lazy Test
  70 |
  71 |     unmount();
  72 |   });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/prevent-standard-keys-while-dragging.spec.js,Conditional Test Logic,"{'line': 16, 'column': 33, 'index': 587}","  14 |   expect(isDragging(handle)).toBe(true);
  15 |
> 16 |   [keyCodes.enter, keyCodes.tab].forEach((keyCode: number) => {
     |                                 ^ Conditional Test Logic
  17 |     const event: Event = createEvent.keyDown(handle, { keyCode });
  18 |     fireEvent(handle, event);
  19 |     expect(event.defaultPrevented).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/prevent-standard-keys-while-dragging.spec.js,Eager Test,"{'line': 13, 'column': 2, 'index': 482}","  11 |   const handle: HTMLElement = getByText('item: 0');
  12 |
> 13 |   simpleLift(keyboard, handle);
     |  ^ Eager Test
  14 |   expect(isDragging(handle)).toBe(true);
  15 |
  16 |   [keyCodes.enter, keyCodes.tab].forEach((keyCode: number) => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/prevent-standard-keys-while-dragging.spec.js,Eager Test,"{'line': 14, 'column': 9, 'index': 521}","  12 |
  13 |   simpleLift(keyboard, handle);
> 14 |   expect(isDragging(handle)).toBe(true);
     |         ^ Eager Test
  15 |
  16 |   [keyCodes.enter, keyCodes.tab].forEach((keyCode: number) => {
  17 |     const event: Event = createEvent.keyDown(handle, { keyCode });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/prevent-keyboard-scroll.spec.js,Eager Test,"{'line': 19, 'column': 2, 'index': 593}","  17 |   const handle: HTMLElement = getByText('item: 0');
  18 |
> 19 |   simpleLift(keyboard, handle);
     |  ^ Eager Test
  20 |
  21 |   keys.forEach((keyCode: number) => {
  22 |     const event: Event = createEvent.keyDown(handle, { keyCode });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/prevent-keyboard-scroll.spec.js,Eager Test,"{'line': 26, 'column': 11, 'index': 818}","  24 |
  25 |     expect(event.defaultPrevented).toBe(true);
> 26 |     expect(isDragging(handle)).toBe(true);
     |           ^ Eager Test
  27 |   });
  28 | });
  29 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/directional-movement.spec.js,Lazy Test,"{'line': 15, 'column': 2, 'index': 504}","  13 |   const handle: HTMLElement = getByText('item: 1');
  14 |
> 15 |   simpleLift(keyboard, handle);
     |  ^ Lazy Test
  16 |
  17 |   const event: Event = createEvent.keyDown(handle, {
  18 |     keyCode: keyCodes.arrowUp,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/directional-movement.spec.js,Lazy Test,"{'line': 36, 'column': 2, 'index': 1111}","  34 |   const handle: HTMLElement = getByText('item: 0');
  35 |
> 36 |   simpleLift(keyboard, handle);
     |  ^ Lazy Test
  37 |
  38 |   const event: Event = createEvent.keyDown(handle, {
  39 |     keyCode: keyCodes.arrowDown,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/directional-movement.spec.js,Lazy Test,"{'line': 59, 'column': 2, 'index': 1754}","  57 |   const handle: HTMLElement = getByText('item: 0');
  58 |
> 59 |   simpleLift(keyboard, handle);
     |  ^ Lazy Test
  60 |
  61 |   const event: Event = createEvent.keyDown(handle, {
  62 |     keyCode: keyCodes.arrowRight,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/directional-movement.spec.js,Lazy Test,"{'line': 82, 'column': 2, 'index': 2396}","  80 |   const handle: HTMLElement = getByText('item: 1');
  81 |
> 82 |   simpleLift(keyboard, handle);
     |  ^ Lazy Test
  83 |
  84 |   const event: Event = createEvent.keyDown(handle, {
  85 |     keyCode: keyCodes.arrowLeft,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/directional-movement.spec.js,Magic Number,"{'line': 25, 'column': 63, 'index': 818}","  23 |   jest.runOnlyPendingTimers();
  24 |   expect(onDragUpdate).toHaveBeenCalled();
> 25 |   expect(onDragUpdate.mock.calls[0][0].destination.index).toBe(0);
     |                                                               ^ Magic Number
  26 |
  27 |   // event consumed
  28 |   expect(event.defaultPrevented).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/directional-movement.spec.js,Magic Number,"{'line': 46, 'column': 63, 'index': 1427}","  44 |   jest.runOnlyPendingTimers();
  45 |   expect(onDragUpdate).toHaveBeenCalled();
> 46 |   expect(onDragUpdate.mock.calls[0][0].destination.index).toBe(1);
     |                                                               ^ Magic Number
  47 |
  48 |   // event consumed
  49 |   expect(event.defaultPrevented).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/directional-movement.spec.js,Magic Number,"{'line': 69, 'column': 63, 'index': 2071}","  67 |   jest.runOnlyPendingTimers();
  68 |   expect(onDragUpdate).toHaveBeenCalled();
> 69 |   expect(onDragUpdate.mock.calls[0][0].destination.index).toBe(1);
     |                                                               ^ Magic Number
  70 |
  71 |   // event consumed
  72 |   expect(event.defaultPrevented).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-handle/keyboard-sensor/directional-movement.spec.js,Magic Number,"{'line': 92, 'column': 63, 'index': 2712}","  90 |   jest.runOnlyPendingTimers();
  91 |   expect(onDragUpdate).toHaveBeenCalled();
> 92 |   expect(onDragUpdate.mock.calls[0][0].destination.index).toBe(0);
     |                                                               ^ Magic Number
  93 |
  94 |   // event consumed
  95 |   expect(event.defaultPrevented).toBe(true);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/reset-server-context.spec.js,Duplicate Assert,"{'line': 14, 'column': 2, 'index': 486}","  12 |
  13 | it('should reset the style marshal context', () => {
> 14 |   expect(doesStyleElementExist(1)).toBe(false);
     |  ^ Duplicate Assert
  15 |
  16 |   const wrapper1 = render(
  17 |     <DragDropContext onDragEnd={() => {}}>{null}</DragDropContext>,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/reset-server-context.spec.js,Duplicate Assert,"{'line': 14, 'column': 2, 'index': 486}","  12 |
  13 | it('should reset the style marshal context', () => {
> 14 |   expect(doesStyleElementExist(1)).toBe(false);
     |  ^ Duplicate Assert
  15 |
  16 |   const wrapper1 = render(
  17 |     <DragDropContext onDragEnd={() => {}}>{null}</DragDropContext>,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/reset-server-context.spec.js,Duplicate Assert,"{'line': 19, 'column': 2, 'index': 635}","  17 |     <DragDropContext onDragEnd={() => {}}>{null}</DragDropContext>,
  18 |   );
> 19 |   expect(doesStyleElementExist(0)).toBe(true);
     |  ^ Duplicate Assert
  20 |
  21 |   const wrapper2 = render(
  22 |     <DragDropContext onDragEnd={() => {}}>{null}</DragDropContext>,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/reset-server-context.spec.js,Duplicate Assert,"{'line': 19, 'column': 2, 'index': 635}","  17 |     <DragDropContext onDragEnd={() => {}}>{null}</DragDropContext>,
  18 |   );
> 19 |   expect(doesStyleElementExist(0)).toBe(true);
     |  ^ Duplicate Assert
  20 |
  21 |   const wrapper2 = render(
  22 |     <DragDropContext onDragEnd={() => {}}>{null}</DragDropContext>,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/reset-server-context.spec.js,Duplicate Assert,"{'line': 24, 'column': 2, 'index': 783}","  22 |     <DragDropContext onDragEnd={() => {}}>{null}</DragDropContext>,
  23 |   );
> 24 |   expect(doesStyleElementExist(1)).toBe(true);
     |  ^ Duplicate Assert
  25 |
  26 |   // not created yet
  27 |   expect(doesStyleElementExist(2)).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/reset-server-context.spec.js,Duplicate Assert,"{'line': 40, 'column': 2, 'index': 1167}","  38 |
  39 |   // now only '0' exists
> 40 |   expect(doesStyleElementExist(0)).toBe(true);
     |  ^ Duplicate Assert
  41 |   expect(doesStyleElementExist(1)).toBe(false);
  42 |
  43 |   wrapper3.unmount();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/reset-server-context.spec.js,Duplicate Assert,"{'line': 40, 'column': 2, 'index': 1167}","  38 |
  39 |   // now only '0' exists
> 40 |   expect(doesStyleElementExist(0)).toBe(true);
     |  ^ Duplicate Assert
  41 |   expect(doesStyleElementExist(1)).toBe(false);
  42 |
  43 |   wrapper3.unmount();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/reset-server-context.spec.js,Duplicate Assert,"{'line': 41, 'column': 2, 'index': 1214}","  39 |   // now only '0' exists
  40 |   expect(doesStyleElementExist(0)).toBe(true);
> 41 |   expect(doesStyleElementExist(1)).toBe(false);
     |  ^ Duplicate Assert
  42 |
  43 |   wrapper3.unmount();
  44 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/reset-server-context.spec.js,Duplicate Assert,"{'line': 41, 'column': 2, 'index': 1214}","  39 |   // now only '0' exists
  40 |   expect(doesStyleElementExist(0)).toBe(true);
> 41 |   expect(doesStyleElementExist(1)).toBe(false);
     |  ^ Duplicate Assert
  42 |
  43 |   wrapper3.unmount();
  44 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/check-react-version.spec.js,Duplicate Assert,"{'line': 28, 'column': 4, 'index': 688}","  26 |     checkReactVersion(peerDep, actual);
  27 |
> 28 |     expect(warn).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  29 |   }
  30 |   // minor
  31 |   {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/check-react-version.spec.js,Duplicate Assert,"{'line': 28, 'column': 4, 'index': 688}","  26 |     checkReactVersion(peerDep, actual);
  27 |
> 28 |     expect(warn).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  29 |   }
  30 |   // minor
  31 |   {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/check-react-version.spec.js,Duplicate Assert,"{'line': 37, 'column': 4, 'index': 863}","  35 |     checkReactVersion(peerDep, actual);
  36 |
> 37 |     expect(warn).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  38 |   }
  39 |   // major
  40 |   {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/check-react-version.spec.js,Duplicate Assert,"{'line': 37, 'column': 4, 'index': 863}","  35 |     checkReactVersion(peerDep, actual);
  36 |
> 37 |     expect(warn).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  38 |   }
  39 |   // major
  40 |   {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/check-react-version.spec.js,Duplicate Assert,"{'line': 46, 'column': 4, 'index': 1038}","  44 |     checkReactVersion(peerDep, actual);
  45 |
> 46 |     expect(warn).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  47 |   }
  48 | });
  49 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/check-react-version.spec.js,Duplicate Assert,"{'line': 46, 'column': 4, 'index': 1038}","  44 |     checkReactVersion(peerDep, actual);
  45 |
> 46 |     expect(warn).not.toHaveBeenCalled();
     |    ^ Duplicate Assert
  47 |   }
  48 | });
  49 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/check-react-version.spec.js,Duplicate Assert,"{'line': 58, 'column': 4, 'index': 1293}","  56 |     checkReactVersion(peerDep, actual);
  57 |
> 58 |     expect(warn).toHaveBeenCalledTimes(1);
     |    ^ Duplicate Assert
  59 |     warn.mockClear();
  60 |   }
  61 |   // minor not met",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/check-react-version.spec.js,Duplicate Assert,"{'line': 68, 'column': 4, 'index': 1500}","  66 |     checkReactVersion(peerDep, actual);
  67 |
> 68 |     expect(warn).toHaveBeenCalledTimes(1);
     |    ^ Duplicate Assert
  69 |     warn.mockClear();
  70 |   }
  71 |   // major not met",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/check-react-version.spec.js,Duplicate Assert,"{'line': 78, 'column': 4, 'index': 1707}","  76 |     checkReactVersion(peerDep, actual);
  77 |
> 78 |     expect(warn).toHaveBeenCalledTimes(1);
     |    ^ Duplicate Assert
  79 |     warn.mockClear();
  80 |   }
  81 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/on-before-capture/removals.spec.js,Duplicate Assert,"{'line': 72, 'column': 2, 'index': 2235}","  70 |
  71 |   // initially it had an index of 1
> 72 |   expect(getIndex(second)).toBe(1);
     |  ^ Duplicate Assert
  73 |
  74 |   // act(() => {}); is joining the two into one update which is
  75 |   // causing unexpected mounting behaviour",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/on-before-capture/removals.spec.js,Duplicate Assert,"{'line': 86, 'column': 2, 'index': 2691}","  84 |   expect(isDragging(second)).toBe(true);
  85 |   // second index accounts for removal
> 86 |   expect(getIndex(second)).toBe(0);
     |  ^ Duplicate Assert
  87 |
  88 |   // flush onDragStart timer
  89 |   jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/on-before-capture/removals.spec.js,Magic Number,"{'line': 72, 'column': 32, 'index': 2265}","  70 |
  71 |   // initially it had an index of 1
> 72 |   expect(getIndex(second)).toBe(1);
     |                                ^ Magic Number
  73 |
  74 |   // act(() => {}); is joining the two into one update which is
  75 |   // causing unexpected mounting behaviour",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/on-before-capture/removals.spec.js,Magic Number,"{'line': 86, 'column': 32, 'index': 2721}","  84 |   expect(isDragging(second)).toBe(true);
  85 |   // second index accounts for removal
> 86 |   expect(getIndex(second)).toBe(0);
     |                                ^ Magic Number
  87 |
  88 |   // flush onDragStart timer
  89 |   jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/on-before-capture/additions.spec.js,Duplicate Assert,"{'line': 127, 'column': 2, 'index': 3700}","  125 |
  126 |   // initially it had an index of 1
> 127 |   expect(getIndex(initial)).toBe(0);
      |  ^ Duplicate Assert
  128 |   // first item does not exist yet
  129 |   expect(queryByTestId('first')).toBe(null);
  130 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/on-before-capture/additions.spec.js,Duplicate Assert,"{'line': 129, 'column': 2, 'index': 3772}","  127 |   expect(getIndex(initial)).toBe(0);
  128 |   // first item does not exist yet
> 129 |   expect(queryByTestId('first')).toBe(null);
      |  ^ Duplicate Assert
  130 |
  131 |   // act(() => {}); is joining the two into one update which is
  132 |   // causing unexpected mounting behaviour",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/on-before-capture/additions.spec.js,Duplicate Assert,"{'line': 138, 'column': 2, 'index': 4040}","  136 |
  137 |   // first item has been added
> 138 |   expect(queryByTestId('first')).toBeTruthy();
      |  ^ Duplicate Assert
  139 |   // initial is now dragging
  140 |   expect(isDragging(initial)).toBe(true);
  141 |   // initial index accounts for addition",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/on-before-capture/additions.spec.js,Duplicate Assert,"{'line': 142, 'column': 2, 'index': 4199}","  140 |   expect(isDragging(initial)).toBe(true);
  141 |   // initial index accounts for addition
> 142 |   expect(getIndex(initial)).toBe(1);
      |  ^ Duplicate Assert
  143 |
  144 |   // flush onDragStart timer
  145 |   jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/on-before-capture/additions.spec.js,Lazy Test,"{'line': 67, 'column': 9, 'index': 1834}","  65 |   });
  66 |
> 67 |   expect(isDragging(handle)).toBe(true);
     |         ^ Lazy Test
  68 | });
  69 |
  70 | function getIndex(el: HTMLElement): number {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/on-before-capture/additions.spec.js,Lazy Test,"{'line': 140, 'column': 9, 'index': 4123}","  138 |   expect(queryByTestId('first')).toBeTruthy();
  139 |   // initial is now dragging
> 140 |   expect(isDragging(initial)).toBe(true);
      |         ^ Lazy Test
  141 |   // initial index accounts for addition
  142 |   expect(getIndex(initial)).toBe(1);
  143 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/on-before-capture/additions.spec.js,Magic Number,"{'line': 127, 'column': 33, 'index': 3731}","  125 |
  126 |   // initially it had an index of 1
> 127 |   expect(getIndex(initial)).toBe(0);
      |                                 ^ Magic Number
  128 |   // first item does not exist yet
  129 |   expect(queryByTestId('first')).toBe(null);
  130 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/on-before-capture/additions.spec.js,Magic Number,"{'line': 142, 'column': 33, 'index': 4230}","  140 |   expect(isDragging(initial)).toBe(true);
  141 |   // initial index accounts for addition
> 142 |   expect(getIndex(initial)).toBe(1);
      |                                 ^ Magic Number
  143 |
  144 |   // flush onDragStart timer
  145 |   jest.runOnlyPendingTimers();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Duplicate Assert,"{'line': 22, 'column': 2, 'index': 738}","  20 |
  21 |   simpleLift(keyboard, getByTestId('0'));
> 22 |   expect(isDragging(getByTestId('0'))).toBe(true);
     |  ^ Duplicate Assert
  23 |   const event: Event = getRbdErrorEvent();
  24 |
  25 |   withWarn(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Duplicate Assert,"{'line': 32, 'column': 2, 'index': 942}","  30 |
  31 |   // drag aborted
> 32 |   expect(isDragging(getByTestId('0'))).toBe(false);
     |  ^ Duplicate Assert
  33 |   // error event prevented
  34 |   expect(event.defaultPrevented).toBe(true);
  35 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Duplicate Assert,"{'line': 40, 'column': 2, 'index': 1215}","  38 |   const { getByTestId } = render(<App />);
  39 |   simpleLift(keyboard, getByTestId('0'));
> 40 |   expect(isDragging(getByTestId('0'))).toBe(true);
     |  ^ Duplicate Assert
  41 |   const event: Event = getRuntimeError();
  42 |
  43 |   // not logging the raw error",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Duplicate Assert,"{'line': 52, 'column': 2, 'index': 1493}","  50 |
  51 |   // drag aborted
> 52 |   expect(isDragging(getByTestId('0'))).toBe(false);
     |  ^ Duplicate Assert
  53 |   // error event not prevented
  54 |   expect(event.defaultPrevented).toBe(false);
  55 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Eager Test,"{'line': 21, 'column': 2, 'index': 696}","  19 |   const { getByTestId } = render(<App />);
  20 |
> 21 |   simpleLift(keyboard, getByTestId('0'));
     |  ^ Eager Test
  22 |   expect(isDragging(getByTestId('0'))).toBe(true);
  23 |   const event: Event = getRbdErrorEvent();
  24 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Eager Test,"{'line': 22, 'column': 9, 'index': 745}","  20 |
  21 |   simpleLift(keyboard, getByTestId('0'));
> 22 |   expect(isDragging(getByTestId('0'))).toBe(true);
     |         ^ Eager Test
  23 |   const event: Event = getRbdErrorEvent();
  24 |
  25 |   withWarn(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Eager Test,"{'line': 32, 'column': 9, 'index': 949}","  30 |
  31 |   // drag aborted
> 32 |   expect(isDragging(getByTestId('0'))).toBe(false);
     |         ^ Eager Test
  33 |   // error event prevented
  34 |   expect(event.defaultPrevented).toBe(true);
  35 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Eager Test,"{'line': 39, 'column': 2, 'index': 1173}","  37 | it('should abort any active drag (non-rbd error)', () => {
  38 |   const { getByTestId } = render(<App />);
> 39 |   simpleLift(keyboard, getByTestId('0'));
     |  ^ Eager Test
  40 |   expect(isDragging(getByTestId('0'))).toBe(true);
  41 |   const event: Event = getRuntimeError();
  42 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Eager Test,"{'line': 40, 'column': 9, 'index': 1222}","  38 |   const { getByTestId } = render(<App />);
  39 |   simpleLift(keyboard, getByTestId('0'));
> 40 |   expect(isDragging(getByTestId('0'))).toBe(true);
     |         ^ Eager Test
  41 |   const event: Event = getRuntimeError();
  42 |
  43 |   // not logging the raw error",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Eager Test,"{'line': 41, 'column': 23, 'index': 1287}","  39 |   simpleLift(keyboard, getByTestId('0'));
  40 |   expect(isDragging(getByTestId('0'))).toBe(true);
> 41 |   const event: Event = getRuntimeError();
     |                       ^ Eager Test
  42 |
  43 |   // not logging the raw error
  44 |   withoutError(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Eager Test,"{'line': 52, 'column': 9, 'index': 1500}","  50 |
  51 |   // drag aborted
> 52 |   expect(isDragging(getByTestId('0'))).toBe(false);
     |         ^ Eager Test
  53 |   // error event not prevented
  54 |   expect(event.defaultPrevented).toBe(false);
  55 | });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Lazy Test,"{'line': 21, 'column': 2, 'index': 696}","  19 |   const { getByTestId } = render(<App />);
  20 |
> 21 |   simpleLift(keyboard, getByTestId('0'));
     |  ^ Lazy Test
  22 |   expect(isDragging(getByTestId('0'))).toBe(true);
  23 |   const event: Event = getRbdErrorEvent();
  24 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Lazy Test,"{'line': 22, 'column': 9, 'index': 745}","  20 |
  21 |   simpleLift(keyboard, getByTestId('0'));
> 22 |   expect(isDragging(getByTestId('0'))).toBe(true);
     |         ^ Lazy Test
  23 |   const event: Event = getRbdErrorEvent();
  24 |
  25 |   withWarn(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Lazy Test,"{'line': 39, 'column': 2, 'index': 1173}","  37 | it('should abort any active drag (non-rbd error)', () => {
  38 |   const { getByTestId } = render(<App />);
> 39 |   simpleLift(keyboard, getByTestId('0'));
     |  ^ Lazy Test
  40 |   expect(isDragging(getByTestId('0'))).toBe(true);
  41 |   const event: Event = getRuntimeError();
  42 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-on-window.spec.js,Lazy Test,"{'line': 40, 'column': 9, 'index': 1222}","  38 |   const { getByTestId } = render(<App />);
  39 |   simpleLift(keyboard, getByTestId('0'));
> 40 |   expect(isDragging(getByTestId('0'))).toBe(true);
     |         ^ Lazy Test
  41 |   const event: Event = getRuntimeError();
  42 |
  43 |   // not logging the raw error",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Conditional Test Logic,"{'line': 13, 'column': 4, 'index': 479}","  11 |   let hasThrown: boolean = false;
  12 |   function CanThrow(props: { shouldThrow: boolean }) {
> 13 |     if (!hasThrown && props.shouldThrow) {
     |    ^ Conditional Test Logic
  14 |       hasThrown = true;
  15 |       invariant(false, 'throwing');
  16 |     }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Conditional Test Logic,"{'line': 37, 'column': 4, 'index': 1104}","  35 |   let hasThrown: boolean = false;
  36 |   function CanThrow(props: { shouldThrow: boolean }) {
> 37 |     if (!hasThrown && props.shouldThrow) {
     |    ^ Conditional Test Logic
  38 |       hasThrown = true;
  39 |       throw new Error('Boom');
  40 |     }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Conditional Test Logic,"{'line': 61, 'column': 4, 'index': 1710}","  59 |   let hasThrown: boolean = false;
  60 |   function CanThrow(props: { shouldThrow: boolean }) {
> 61 |     if (!hasThrown && props.shouldThrow) {
     |    ^ Conditional Test Logic
  62 |       hasThrown = true;
  63 |       // Boom: TypeError
  64 |       window.foo();",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Duplicate Assert,"{'line': 25, 'column': 2, 'index': 761}","  23 |
  24 |   simpleLift(keyboard, getByTestId('0'));
> 25 |   expect(isDragging(getByTestId('0'))).toBe(true);
     |  ^ Duplicate Assert
  26 |
  27 |   withError(() => {
  28 |     rerender(<App anotherChild={<CanThrow shouldThrow />} />);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Duplicate Assert,"{'line': 31, 'column': 2, 'index': 903}","  29 |   });
  30 |
> 31 |   expect(isDragging(getByTestId('0'))).toBe(false);
     |  ^ Duplicate Assert
  32 | });
  33 |
  34 | it('should not recover from non-rbd errors', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Eager Test,"{'line': 15, 'column': 6, 'index': 548}","  13 |     if (!hasThrown && props.shouldThrow) {
  14 |       hasThrown = true;
> 15 |       invariant(false, 'throwing');
     |      ^ Eager Test
  16 |     }
  17 |     return null;
  18 |   }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Eager Test,"{'line': 24, 'column': 2, 'index': 719}","  22 |   );
  23 |
> 24 |   simpleLift(keyboard, getByTestId('0'));
     |  ^ Eager Test
  25 |   expect(isDragging(getByTestId('0'))).toBe(true);
  26 |
  27 |   withError(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Eager Test,"{'line': 25, 'column': 9, 'index': 768}","  23 |
  24 |   simpleLift(keyboard, getByTestId('0'));
> 25 |   expect(isDragging(getByTestId('0'))).toBe(true);
     |         ^ Eager Test
  26 |
  27 |   withError(() => {
  28 |     rerender(<App anotherChild={<CanThrow shouldThrow />} />);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Eager Test,"{'line': 31, 'column': 9, 'index': 910}","  29 |   });
  30 |
> 31 |   expect(isDragging(getByTestId('0'))).toBe(false);
     |         ^ Eager Test
  32 | });
  33 |
  34 | it('should not recover from non-rbd errors', () => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Eager Test,"{'line': 48, 'column': 2, 'index': 1339}","  46 |   );
  47 |
> 48 |   simpleLift(keyboard, getByTestId('0'));
     |  ^ Eager Test
  49 |   expect(isDragging(getByTestId('0'))).toBe(true);
  50 |
  51 |   withError(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Eager Test,"{'line': 49, 'column': 9, 'index': 1388}","  47 |
  48 |   simpleLift(keyboard, getByTestId('0'));
> 49 |   expect(isDragging(getByTestId('0'))).toBe(true);
     |         ^ Eager Test
  50 |
  51 |   withError(() => {
  52 |     expect(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Eager Test,"{'line': 73, 'column': 2, 'index': 1959}","  71 |   );
  72 |
> 73 |   simpleLift(keyboard, getByTestId('0'));
     |  ^ Eager Test
  74 |   expect(isDragging(getByTestId('0'))).toBe(true);
  75 |
  76 |   withError(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Eager Test,"{'line': 74, 'column': 9, 'index': 2008}","  72 |
  73 |   simpleLift(keyboard, getByTestId('0'));
> 74 |   expect(isDragging(getByTestId('0'))).toBe(true);
     |         ^ Eager Test
  75 |
  76 |   withError(() => {
  77 |     expect(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Exception Handling,"{'line': 39, 'column': 6, 'index': 1173}","  37 |     if (!hasThrown && props.shouldThrow) {
  38 |       hasThrown = true;
> 39 |       throw new Error('Boom');
     |      ^ Exception Handling
  40 |     }
  41 |     return null;
  42 |   }",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Lazy Test,"{'line': 24, 'column': 2, 'index': 719}","  22 |   );
  23 |
> 24 |   simpleLift(keyboard, getByTestId('0'));
     |  ^ Lazy Test
  25 |   expect(isDragging(getByTestId('0'))).toBe(true);
  26 |
  27 |   withError(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Lazy Test,"{'line': 25, 'column': 9, 'index': 768}","  23 |
  24 |   simpleLift(keyboard, getByTestId('0'));
> 25 |   expect(isDragging(getByTestId('0'))).toBe(true);
     |         ^ Lazy Test
  26 |
  27 |   withError(() => {
  28 |     rerender(<App anotherChild={<CanThrow shouldThrow />} />);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Lazy Test,"{'line': 48, 'column': 2, 'index': 1339}","  46 |   );
  47 |
> 48 |   simpleLift(keyboard, getByTestId('0'));
     |  ^ Lazy Test
  49 |   expect(isDragging(getByTestId('0'))).toBe(true);
  50 |
  51 |   withError(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Lazy Test,"{'line': 49, 'column': 9, 'index': 1388}","  47 |
  48 |   simpleLift(keyboard, getByTestId('0'));
> 49 |   expect(isDragging(getByTestId('0'))).toBe(true);
     |         ^ Lazy Test
  50 |
  51 |   withError(() => {
  52 |     expect(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Lazy Test,"{'line': 73, 'column': 2, 'index': 1959}","  71 |   );
  72 |
> 73 |   simpleLift(keyboard, getByTestId('0'));
     |  ^ Lazy Test
  74 |   expect(isDragging(getByTestId('0'))).toBe(true);
  75 |
  76 |   withError(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,Lazy Test,"{'line': 74, 'column': 9, 'index': 2008}","  72 |
  73 |   simpleLift(keyboard, getByTestId('0'));
> 74 |   expect(isDragging(getByTestId('0'))).toBe(true);
     |         ^ Lazy Test
  75 |
  76 |   withError(() => {
  77 |     expect(() => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/health/src-file-name-convention.spec.js,Conditional Test Logic,"{'line': 28, 'column': 4, 'index': 791}","  26 |
  27 |   paths.forEach((filePath: string) => {
> 28 |     if (exceptions.includes(filePath)) {
     |    ^ Conditional Test Logic
  29 |       return;
  30 |     }
  31 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/health/src-file-name-convention.spec.js,Eager Test,"{'line': 22, 'column': 2, 'index': 647}","  20 |   const paths: string[] = await globby(targets);
  21 |
> 22 |   invariant(
     |  ^ Eager Test
  23 |     paths.length,
  24 |     'Could not find files to test against file name convention',
  25 |   );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/health/src-file-name-convention.spec.js,Eager Test,"{'line': 34, 'column': 4, 'index': 909}","  32 |     const isMatching: boolean = isSnakeCase(filePath);
  33 |
> 34 |     invariant(
     |    ^ Eager Test
  35 |       isMatching,
  36 |       `${filePath} does not follow the file path convention (snake-case.js) ${convention.toString()}`,
  37 |     );",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/no-broken-links.spec.js,Conditional Test Logic,"{'line': 19, 'column': 2, 'index': 483}","  17 | // adding a forward slash to start of path
  18 | const withLeadingSlash = (file: string): string => {
> 19 |   if (file.startsWith('/')) {
     |  ^ Conditional Test Logic
  20 |     return file;
  21 |   }
  22 |   return `/${file}`;",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/no-broken-links.spec.js,Conditional Test Logic,"{'line': 28, 'column': 2, 'index': 711}","  26 |   const href: string = token.attrs[0][1];
  27 |   // Not validating external links
> 28 |   if (href.startsWith('http')) {
     |  ^ Conditional Test Logic
  29 |     return;
  30 |   }
  31 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/no-broken-links.spec.js,Conditional Test Logic,"{'line': 33, 'column': 2, 'index': 807}","  31 |
  32 |   // not checking links within a file for now
> 33 |   if (href.startsWith('#')) {
     |  ^ Conditional Test Logic
  34 |     return;
  35 |   }
  36 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/no-broken-links.spec.js,Conditional Test Logic,"{'line': 38, 'column': 2, 'index': 897}","  36 |
  37 |   // not checking links to stories for now
> 38 |   if (href.startsWith('/stories')) {
     |  ^ Conditional Test Logic
  39 |     return;
  40 |   }
  41 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/no-broken-links.spec.js,Conditional Test Logic,"{'line': 49, 'column': 2, 'index': 1140}","  47 |   );
  48 |
> 49 |   if (isValid) {
     |  ^ Conditional Test Logic
  50 |     return;
  51 |   }
  52 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/no-broken-links.spec.js,Conditional Test Logic,"{'line': 62, 'column': 2, 'index': 1390}","  60 |
  61 | const parse = (token: Token, file: string, files: string[]) => {
> 62 |   if (token.type === 'link_open') {
     |  ^ Conditional Test Logic
  63 |     validate(token, file, files);
  64 |   }
  65 |   if (token.children) {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/no-broken-links.spec.js,Conditional Test Logic,"{'line': 65, 'column': 2, 'index': 1464}","  63 |     validate(token, file, files);
  64 |   }
> 65 |   if (token.children) {
     |  ^ Conditional Test Logic
  66 |     token.children.forEach((child: Token) => parse(child, file, files));
  67 |   }
  68 | };",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/no-broken-links.spec.js,Conditional Test Logic,"{'line': 74, 'column': 2, 'index': 1734}","  72 |   expect(files.length).toBeGreaterThan(0);
  73 |
> 74 |   for (const file of files) {
     |  ^ Conditional Test Logic
  75 |     const contents: string = await fs.readFile(file, 'utf8');
  76 |
  77 |     const tokens: Token[] = markdown.parse(contents, {});",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/no-broken-links.spec.js,Magic Number,"{'line': 72, 'column': 39, 'index': 1727}","  70 | it('should use have no dead links', async () => {
  71 |   const files: string[] = await globby(['**/*.md', '!node_modules/']);
> 72 |   expect(files.length).toBeGreaterThan(0);
     |                                       ^ Magic Number
  73 |
  74 |   for (const file of files) {
  75 |     const contents: string = await fs.readFile(file, 'utf8');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/no-broken-links.spec.js,Magic Number,"{'line': 78, 'column': 42, 'index': 1925}","  76 |
  77 |     const tokens: Token[] = markdown.parse(contents, {});
> 78 |     expect(tokens.length).toBeGreaterThan(0);
     |                                          ^ Magic Number
  79 |     tokens.forEach((token: Token) => parse(token, file, files));
  80 |   }
  81 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/no-broken-links.spec.js,Redundant Assertion,"{'column': 2, 'line': 58}","  56 |   `;
  57 |
> 58 |   expect(false).toBe(message);
     |  ^ Redundant Assertion
  59 | };
  60 |
  61 | const parse = (token: Token, file: string, files: string[]) => {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/no-broken-links.spec.js,Redundant Assertion,"{'column': 2, 'line': 83}","  81 |
  82 |   // need at least one assertion
> 83 |   expect(true).toBe(true);
     |  ^ Redundant Assertion
  84 | });
  85 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/no-broken-links.spec.js,Resource Optimism,"{'line': 75, 'column': 35, 'index': 1797}","  73 |
  74 |   for (const file of files) {
> 75 |     const contents: string = await fs.readFile(file, 'utf8');
     |                                   ^ Resource Optimism
  76 |
  77 |     const tokens: Token[] = markdown.parse(contents, {});
  78 |     expect(tokens.length).toBeGreaterThan(0);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/content.spec.js,Conditional Test Logic,"{'line': 14, 'column': 2, 'index': 510}","  12 |     '[← Back to documentation](/README.md#documentation-)';
  13 |
> 14 |   for (const file of files) {
     |  ^ Conditional Test Logic
  15 |     const contents: string = await fs.readFile(file, 'utf8');
  16 |
  17 |     // Printing a nice message to allow for quick fixing",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/content.spec.js,Conditional Test Logic,"{'line': 20, 'column': 4, 'index': 737}","  18 |     const endsWithBacklink: boolean = contents.trim().endsWith(backLink);
  19 |
> 20 |     if (!endsWithBacklink) {
     |    ^ Conditional Test Logic
  21 |       expect(`
  22 |         File: ""${file}""
  23 |         Did not end with back link",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/content.spec.js,Conditional Test Logic,"{'line': 36, 'column': 2, 'index': 1101}","  34 |   expect(files.length).toBeGreaterThan(0);
  35 |
> 36 |   for (const file of files) {
     |  ^ Conditional Test Logic
  37 |     const contents: string = await fs.readFile(file, 'utf8');
  38 |
  39 |     // Expected: <Draggable />, <Droppable />, `<DragDropContext />`",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/content.spec.js,Magic Number,"{'line': 10, 'column': 39, 'index': 416}","   8 | it('should end all nested docs with a link back to the documentation root', async () => {
   9 |   const files: string[] = await globby('docs/**/*.md');
> 10 |   expect(files.length).toBeGreaterThan(0);
     |                                       ^ Magic Number
  11 |   const backLink: string =
  12 |     '[← Back to documentation](/README.md#documentation-)';
  13 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/content.spec.js,Magic Number,"{'line': 34, 'column': 39, 'index': 1094}","  32 | it('should use correct wording', async () => {
  33 |   const files: string[] = await globby(['**/*.md', '!node_modules/']);
> 34 |   expect(files.length).toBeGreaterThan(0);
     |                                       ^ Magic Number
  35 |
  36 |   for (const file of files) {
  37 |     const contents: string = await fs.readFile(file, 'utf8');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/content.spec.js,Redundant Assertion,"{'column': 4, 'line': 28}","  26 |
  27 |     // need at least one assertion
> 28 |     expect(true).toBe(true);
     |    ^ Redundant Assertion
  29 |   }
  30 | });
  31 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/content.spec.js,Resource Optimism,"{'line': 15, 'column': 35, 'index': 573}","  13 |
  14 |   for (const file of files) {
> 15 |     const contents: string = await fs.readFile(file, 'utf8');
     |                                   ^ Resource Optimism
  16 |
  17 |     // Printing a nice message to allow for quick fixing
  18 |     const endsWithBacklink: boolean = contents.trim().endsWith(backLink);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/test/unit/docs/content.spec.js,Resource Optimism,"{'line': 37, 'column': 35, 'index': 1164}","  35 |
  36 |   for (const file of files) {
> 37 |     const contents: string = await fs.readFile(file, 'utf8');
     |                                   ^ Resource Optimism
  38 |
  39 |     // Expected: <Draggable />, <Droppable />, `<DragDropContext />`
  40 |     expect(contents.includes('`Draggable`')).toBe(false);",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/reorder.spec.js,Eager Test,"{'line': 13, 'column': 11, 'index': 347}","  11 |   it('should reorder within a list', () => {
  12 |     // order: 1, 2
> 13 |     cy.get(getHandleSelector()).eq(0).as('first').should('contain', 'id:1');
     |           ^ Eager Test
  14 |     cy.get(getHandleSelector()).eq(1).should('contain', 'id:2');
  15 |
  16 |     // reorder operation",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/reorder.spec.js,Eager Test,"{'line': 14, 'column': 11, 'index': 424}","  12 |     // order: 1, 2
  13 |     cy.get(getHandleSelector()).eq(0).as('first').should('contain', 'id:1');
> 14 |     cy.get(getHandleSelector()).eq(1).should('contain', 'id:2');
     |           ^ Eager Test
  15 |
  16 |     // reorder operation
  17 |     cy.get('@first')",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/reorder.spec.js,Eager Test,"{'line': 29, 'column': 11, 'index': 1020}","  27 |     // order now 2, 1
  28 |     // note: not using get aliases as they where returning incorrect results
> 29 |     cy.get(getHandleSelector()).eq(0).should('contain', 'id:2');
     |           ^ Eager Test
  30 |
  31 |     cy.get(getHandleSelector()).eq(1).should('contain', 'id:1');
  32 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/reorder.spec.js,Eager Test,"{'line': 31, 'column': 11, 'index': 1086}","  29 |     cy.get(getHandleSelector()).eq(0).should('contain', 'id:2');
  30 |
> 31 |     cy.get(getHandleSelector()).eq(1).should('contain', 'id:1');
     |           ^ Eager Test
  32 |
  33 |     // element should maintain focus post drag
  34 |     cy.focused().should('contain', 'id:1');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/reorder-virtual.spec.js,Eager Test,"{'line': 14, 'column': 11, 'index': 371}","  12 |     const movements: number = 12;
  13 |
> 14 |     cy.get(getHandleSelector()).first().as('item');
     |           ^ Eager Test
  15 |
  16 |     cy.get('@item').invoke('attr', 'data-testid').as('item-id');
  17 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/reorder-virtual.spec.js,Eager Test,"{'line': 48, 'column': 13, 'index': 1508}","  46 |     // eslint-disable-next-line jest/valid-expect-in-promise
  47 |     cy.get('@item-id').then((id) => {
> 48 |       cy.get(getHandleSelector(id))
     |             ^ Eager Test
  49 |         .invoke('attr', 'data-index')
  50 |         .should('equal', `${movements}`);
  51 |     });",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/move-between-lists.spec.js,Eager Test,"{'line': 13, 'column': 11, 'index': 381}","  11 |   it('should move between lists', () => {
  12 |     // first list has item with id:2
> 13 |     cy.get(getDroppableSelector())
     |           ^ Eager Test
  14 |       .eq(1)
  15 |       .as('first-list')
  16 |       .should('contain', 'id:2');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/move-between-lists.spec.js,Eager Test,"{'line': 19, 'column': 11, 'index': 536}","  17 |
  18 |     // second list does not have item with id:2
> 19 |     cy.get(getDroppableSelector())
     |           ^ Eager Test
  20 |       .eq(2)
  21 |       .as('second-list')
  22 |       .should('not.contain', 'id:2');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/move-between-lists.spec.js,Eager Test,"{'line': 25, 'column': 12, 'index': 675}","  23 |
  24 |     cy.get('@first-list')
> 25 |       .find(getHandleSelector())
     |            ^ Eager Test
  26 |       .first()
  27 |       .should('contain', 'id:2')
  28 |       .focus()",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 9, 'column': 11, 'index': 333}","   7 |     cy.visit('/iframe.html?id=board--dragging-a-clone');
   8 |     // focusing on another handle
>  9 |     cy.get(getHandleSelector('1')).focus();
     |           ^ Eager Test
  10 |     cy.focused().should('contain', 'id:1');
  11 |
  12 |     cy.get(getHandleSelector('2'))",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 12, 'column': 11, 'index': 422}","  10 |     cy.focused().should('contain', 'id:1');
  11 |
> 12 |     cy.get(getHandleSelector('2'))
     |           ^ Eager Test
  13 |       .as('id:2')
  14 |       .trigger('mousedown', { button: 0 })
  15 |       .trigger('mousemove', {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 23, 'column': 11, 'index': 681}","  21 |
  22 |     // asserting id:2 is now dragging
> 23 |     cy.get(getHandleSelector('2')).should(
     |           ^ Eager Test
  24 |       'have.attr',
  25 |       'data-is-dragging',
  26 |       'true',",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 32, 'column': 11, 'index': 860}","  30 |     cy.focused().should('contain', 'id:1');
  31 |
> 32 |     cy.get(getHandleSelector('2'))
     |           ^ Eager Test
  33 |       .trigger('mouseup', { force: true })
  34 |       // clone will be unmounting during drop
  35 |       .should('not.exist');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 38, 'column': 11, 'index': 1046}","  36 |
  37 |     // getting post clone handle
> 38 |     cy.get(getHandleSelector('2')).should(
     |           ^ Eager Test
  39 |       'have.attr',
  40 |       'data-is-dragging',
  41 |       'false',",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 51, 'column': 11, 'index': 1381}","  49 |     cy.visit('/iframe.html?id=board--dragging-a-clone');
  50 |     // focusing on another handle
> 51 |     cy.get(getHandleSelector('2')).focus();
     |           ^ Eager Test
  52 |     cy.focused().should('contain', 'id:2');
  53 |
  54 |     cy.get(getHandleSelector('2')).trigger('keydown', {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 54, 'column': 11, 'index': 1470}","  52 |     cy.focused().should('contain', 'id:2');
  53 |
> 54 |     cy.get(getHandleSelector('2')).trigger('keydown', {
     |           ^ Eager Test
  55 |       keyCode: keyCodes.space,
  56 |     });
  57 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 59, 'column': 11, 'index': 1604}","  57 |
  58 |     // asserting id:2 is now dragging
> 59 |     cy.get(getHandleSelector('2')).should(
     |           ^ Eager Test
  60 |       'have.attr',
  61 |       'data-is-dragging',
  62 |       'true',",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 68, 'column': 11, 'index': 1783}","  66 |     cy.focused().should('contain', 'id:2');
  67 |
> 68 |     cy.get(getHandleSelector('2'))
     |           ^ Eager Test
  69 |       .trigger('keydown', { keyCode: keyCodes.arrowRight, force: true })
  70 |       .trigger('keydown', { keyCode: keyCodes.space, force: true })
  71 |       // clone will be unmounting during drop",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 75, 'column': 11, 'index': 2067}","  73 |
  74 |     // getting post clone handle
> 75 |     cy.get(getHandleSelector('2'))
     |           ^ Eager Test
  76 |       // no longer dragging
  77 |       .should('have.attr', 'data-is-dragging', 'false')
  78 |       // is in the second column (normally would loose focus moving between lists)",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 79, 'column': 15, 'index': 2273}","  77 |       .should('have.attr', 'data-is-dragging', 'false')
  78 |       // is in the second column (normally would loose focus moving between lists)
> 79 |       .closest(getDraggableSelector('BMO'));
     |               ^ Eager Test
  80 |
  81 |     // focus maintained
  82 |     cy.focused().should('contain', 'id:2');",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 87, 'column': 11, 'index': 2511}","  85 |   it('should give focus to a combine target', () => {
  86 |     cy.visit('/iframe.html?id=board--with-combining-and-cloning');
> 87 |     cy.get(getHandleSelector('2')).focus();
     |           ^ Eager Test
  88 |     cy.focused().should('contain', 'id:2');
  89 |
  90 |     cy.get(getHandleSelector('2')).trigger('keydown', {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 90, 'column': 11, 'index': 2600}","  88 |     cy.focused().should('contain', 'id:2');
  89 |
> 90 |     cy.get(getHandleSelector('2')).trigger('keydown', {
     |           ^ Eager Test
  91 |       keyCode: keyCodes.space,
  92 |     });
  93 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 95, 'column': 11, 'index': 2734}","  93 |
  94 |     // asserting id:2 is now dragging
> 95 |     cy.get(getHandleSelector('2')).should(
     |           ^ Eager Test
  96 |       'have.attr',
  97 |       'data-is-dragging',
  98 |       'true',",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 104, 'column': 11, 'index': 2913}","  102 |     cy.focused().should('contain', 'id:2');
  103 |
> 104 |     cy.get(getHandleSelector('2'))
      |           ^ Eager Test
  105 |       .trigger('keydown', { keyCode: keyCodes.arrowRight, force: true })
  106 |       // combining with item:1
  107 |       .trigger('keydown', { keyCode: keyCodes.arrowUp, force: true })",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 120, 'column': 11, 'index': 3605}","  118 |     cy.visit('/iframe.html?id=board--with-combining-and-cloning');
  119 |     // focusing on something unrelated to the drag
> 120 |     cy.get(getHandleSelector('3')).focus();
      |           ^ Eager Test
  121 |
  122 |     cy.get(getHandleSelector('2')).trigger('keydown', {
  123 |       keyCode: keyCodes.space,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 122, 'column': 11, 'index': 3650}","  120 |     cy.get(getHandleSelector('3')).focus();
  121 |
> 122 |     cy.get(getHandleSelector('2')).trigger('keydown', {
      |           ^ Eager Test
  123 |       keyCode: keyCodes.space,
  124 |     });
  125 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 127, 'column': 11, 'index': 3784}","  125 |
  126 |     // asserting id:2 is now dragging
> 127 |     cy.get(getHandleSelector('2')).should(
      |           ^ Eager Test
  128 |       'have.attr',
  129 |       'data-is-dragging',
  130 |       'true',",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Eager Test,"{'line': 136, 'column': 11, 'index': 3963}","  134 |     cy.focused().should('contain', 'id:3');
  135 |
> 136 |     cy.get(getHandleSelector('2'))
      |           ^ Eager Test
  137 |       .trigger('keydown', { keyCode: keyCodes.arrowRight, force: true })
  138 |       // combining with item:1
  139 |       .trigger('keydown', { keyCode: keyCodes.arrowUp, force: true })",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Lazy Test,"{'line': 9, 'column': 11, 'index': 333}","   7 |     cy.visit('/iframe.html?id=board--dragging-a-clone');
   8 |     // focusing on another handle
>  9 |     cy.get(getHandleSelector('1')).focus();
     |           ^ Lazy Test
  10 |     cy.focused().should('contain', 'id:1');
  11 |
  12 |     cy.get(getHandleSelector('2'))",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Lazy Test,"{'line': 51, 'column': 11, 'index': 1381}","  49 |     cy.visit('/iframe.html?id=board--dragging-a-clone');
  50 |     // focusing on another handle
> 51 |     cy.get(getHandleSelector('2')).focus();
     |           ^ Lazy Test
  52 |     cy.focused().should('contain', 'id:2');
  53 |
  54 |     cy.get(getHandleSelector('2')).trigger('keydown', {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Lazy Test,"{'line': 87, 'column': 11, 'index': 2511}","  85 |   it('should give focus to a combine target', () => {
  86 |     cy.visit('/iframe.html?id=board--with-combining-and-cloning');
> 87 |     cy.get(getHandleSelector('2')).focus();
     |           ^ Lazy Test
  88 |     cy.focused().should('contain', 'id:2');
  89 |
  90 |     cy.get(getHandleSelector('2')).trigger('keydown', {",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/focus.spec.js,Lazy Test,"{'line': 120, 'column': 11, 'index': 3605}","  118 |     cy.visit('/iframe.html?id=board--with-combining-and-cloning');
  119 |     // focusing on something unrelated to the drag
> 120 |     cy.get(getHandleSelector('3')).focus();
      |           ^ Lazy Test
  121 |
  122 |     cy.get(getHandleSelector('2')).trigger('keydown', {
  123 |       keyCode: keyCodes.space,",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/content-security-policy.spec.js,Unknown Test,"{'column': 2, 'line': 37}","  35 |
  36 | describe('content security policy', () => {
> 37 |   it('should reorder a list without a nonce', () => {
     |  ^ Unknown Test
  38 |     commonTest(`http://localhost:${ports.cspServer}`, 'contain');
  39 |   });
  40 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/content-security-policy.spec.js,Unknown Test,"{'column': 2, 'line': 41}","  39 |   });
  40 |
> 41 |   it('should reorder a list with a nonce', () => {
     |  ^ Unknown Test
  42 |     commonTest(`http://localhost:${ports.cspServer}/nonce`, 'contain');
  43 |   });
  44 |",,
/home/gabriel/Desktop/research/projects/react-beautiful-dnd/cypress/integration/content-security-policy.spec.js,Unknown Test,"{'column': 2, 'line': 45}","  43 |   });
  44 |
> 45 |   it('should reorder a list with a wrong nonce', () => {
     |  ^ Unknown Test
  46 |     commonTest(
  47 |       `http://localhost:${ports.cspServer}/wrong-nonce`,
  48 |       'not.contain',",,
test/unit/dev-warning.spec.js,NonFunctionalStatement,"[{""startLine"":4,""endLine"":4}]",,2.0,0.0
cypress/integration/reorder.spec.js,OvercommentedTest,"[{""startLine"":11,""endLine"":35}]",,1.0,1.0
cypress/integration/reorder-virtual.spec.js,OvercommentedTest,"[{""startLine"":11,""endLine"":52}]",,1.0,1.0
cypress/integration/reorder-lists.spec.js,OvercommentedTest,"[{""startLine"":11,""endLine"":33}]",,1.0,1.0
cypress/integration/focus.spec.js,OvercommentedTest,"[{""startLine"":48,""endLine"":83}]",,4.0,1.0
cypress/integration/focus.spec.js,OvercommentedTest,"[{""startLine"":85,""endLine"":115}]",,4.0,1.0
cypress/integration/focus.spec.js,OvercommentedTest,"[{""startLine"":117,""endLine"":147}]",,4.0,1.0
test/unit/view/use-draggable-publisher.spec.js,OvercommentedTest,"[{""startLine"":130,""endLine"":182}]",,8.0,2.0
test/unit/view/use-draggable-publisher.spec.js,NonFunctionalStatement,"[{""startLine"":77,""endLine"":77}]",,8.0,2.0
test/unit/view/use-draggable-publisher.spec.js,VerboseStatement,"[{""startLine"":130,""endLine"":182}]",,8.0,2.0
test/unit/integration/responders-timing.spec.js,OvercommentedTest,"[{""startLine"":42,""endLine"":126}]",,1.0,0.0
test/unit/integration/responders-timing.spec.js,VerboseStatement,"[{""startLine"":42,""endLine"":126}]",,1.0,0.0
test/unit/integration/responders-integration.spec.js,IdenticalTestDescription,"[{""startLine"":308,""endLine"":320}]",,15.0,9.0
test/unit/integration/responders-integration.spec.js,NonFunctionalStatement,"[{""startLine"":107,""endLine"":107}]",,15.0,9.0
test/unit/integration/reorder-render-sync.spec.js,OvercommentedTest,"[{""startLine"":181,""endLine"":233}]",,1.0,0.0
test/unit/integration/reorder-render-sync.spec.js,VerboseStatement,"[{""startLine"":181,""endLine"":233}]",,1.0,0.0
test/unit/health/src-file-name-convention.spec.js,ConditionalTestLogic,"[{""startLine"":28,""endLine"":30}]",,1.0,0.0
test/unit/docs/content.spec.js,ConditionalTestLogic,"[{""startLine"":20,""endLine"":25}]",,2.0,0.0
test/unit/view/use-droppable-publisher/scroll-watching.spec.js,OvercommentedTest,"[{""startLine"":59,""endLine"":100}]",,10.0,2.0
test/unit/view/use-droppable-publisher/scroll-watching.spec.js,OvercommentedTest,"[{""startLine"":134,""endLine"":171}]",,10.0,2.0
test/unit/view/use-droppable-publisher/scroll-watching.spec.js,OvercommentedTest,"[{""startLine"":173,""endLine"":215}]",,10.0,2.0
test/unit/view/use-droppable-publisher/scroll-watching.spec.js,OvercommentedTest,"[{""startLine"":217,""endLine"":254}]",,10.0,2.0
test/unit/view/use-droppable-publisher/scroll-watching.spec.js,OvercommentedTest,"[{""startLine"":257,""endLine"":288}]",,10.0,2.0
test/unit/view/use-droppable-publisher/scroll-watching.spec.js,OvercommentedTest,"[{""startLine"":290,""endLine"":321}]",,10.0,2.0
test/unit/view/use-droppable-publisher/scroll-watching.spec.js,NonFunctionalStatement,"[{""startLine"":291,""endLine"":291}]",,10.0,2.0
test/unit/view/use-droppable-publisher/scroll-watching.spec.js,VerboseStatement,"[{""startLine"":59,""endLine"":100}]",,10.0,2.0
test/unit/view/use-droppable-publisher/scroll-watching.spec.js,VerboseStatement,"[{""startLine"":134,""endLine"":171}]",,10.0,2.0
test/unit/view/use-droppable-publisher/scroll-watching.spec.js,VerboseStatement,"[{""startLine"":173,""endLine"":215}]",,10.0,2.0
test/unit/view/use-droppable-publisher/scroll-watching.spec.js,VerboseStatement,"[{""startLine"":217,""endLine"":254}]",,10.0,2.0
test/unit/view/use-droppable-publisher/scroll-watching.spec.js,VerboseStatement,"[{""startLine"":257,""endLine"":288}]",,10.0,2.0
test/unit/view/use-droppable-publisher/scroll-watching.spec.js,VerboseStatement,"[{""startLine"":290,""endLine"":321}]",,10.0,2.0
test/unit/view/use-droppable-publisher/scroll-watching.spec.js,VerboseStatement,"[{""startLine"":347,""endLine"":396}]",,10.0,2.0
test/unit/view/use-droppable-publisher/registration.spec.js,VerboseStatement,"[{""startLine"":60,""endLine"":109}]",,4.0,0.0
test/unit/view/use-droppable-publisher/recollection.spec.js,OvercommentedTest,"[{""startLine"":63,""endLine"":102}]",,3.0,0.0
test/unit/view/use-droppable-publisher/recollection.spec.js,VerboseStatement,"[{""startLine"":63,""endLine"":102}]",,3.0,0.0
test/unit/view/use-droppable-publisher/publishing.spec.js,OvercommentedTest,"[{""startLine"":170,""endLine"":232}]",,9.0,4.0
test/unit/view/use-droppable-publisher/publishing.spec.js,OvercommentedTest,"[{""startLine"":234,""endLine"":299}]",,9.0,4.0
test/unit/view/use-droppable-publisher/publishing.spec.js,IdenticalTestDescription,"[{""startLine"":303,""endLine"":357}]",,9.0,4.0
test/unit/view/use-droppable-publisher/publishing.spec.js,NonFunctionalStatement,"[{""startLine"":362,""endLine"":362}]",,9.0,4.0
test/unit/view/use-droppable-publisher/publishing.spec.js,VerboseStatement,"[{""startLine"":234,""endLine"":299}]",,9.0,4.0
test/unit/view/use-droppable-publisher/publishing.spec.js,VerboseStatement,"[{""startLine"":303,""endLine"":357}]",,9.0,4.0
test/unit/view/use-droppable-publisher/publishing.spec.js,VerboseStatement,"[{""startLine"":361,""endLine"":423}]",,9.0,4.0
test/unit/view/use-droppable-publisher/publishing.spec.js,VerboseStatement,"[{""startLine"":426,""endLine"":485}]",,9.0,4.0
test/unit/view/use-droppable-publisher/publishing.spec.js,VerboseStatement,"[{""startLine"":487,""endLine"":546}]",,9.0,4.0
test/unit/view/use-droppable-publisher/is-element-scrollable.spec.js,NonFunctionalStatement,"[{""startLine"":47,""endLine"":47}]",,5.0,1.0
test/unit/view/use-droppable-publisher/is-element-scrollable.spec.js,SubOptimalAssert,"[{""startLine"":21,""endLine"":21}]",,5.0,1.0
test/unit/view/use-droppable-publisher/is-element-scrollable.spec.js,SubOptimalAssert,"[{""startLine"":64,""endLine"":64}]",,5.0,1.0
test/unit/view/use-droppable-publisher/is-element-scrollable.spec.js,SubOptimalAssert,"[{""startLine"":70,""endLine"":70}]",,5.0,1.0
test/unit/view/use-droppable-publisher/is-element-scrollable.spec.js,SubOptimalAssert,"[{""startLine"":77,""endLine"":77}]",,5.0,1.0
test/unit/view/use-droppable-publisher/is-combined-enabled-change.spec.js,VerboseStatement,"[{""startLine"":23,""endLine"":63}]",,3.0,0.0
test/unit/view/use-droppable-publisher/forced-scroll.spec.js,VerboseStatement,"[{""startLine"":31,""endLine"":70}]",,3.0,1.0
test/unit/view/placeholder/on-transition-end.spec.js,OvercommentedTest,"[{""startLine"":12,""endLine"":63}]",,1.0,0.0
test/unit/view/placeholder/on-transition-end.spec.js,VerboseStatement,"[{""startLine"":12,""endLine"":63}]",,1.0,0.0
test/unit/view/placeholder/animated-mount.spec.js,OvercommentedTest,"[{""startLine"":60,""endLine"":98}]",,3.0,0.0
test/unit/view/placeholder/animated-mount.spec.js,SubOptimalAssert,"[{""startLine"":42,""endLine"":42}]",,3.0,0.0
test/unit/view/placeholder/animated-mount.spec.js,VerboseStatement,"[{""startLine"":60,""endLine"":98}]",,3.0,0.0
test/unit/view/droppable/placeholder.spec.js,IdenticalTestDescription,"[{""startLine"":54,""endLine"":61}]",,7.0,2.0
test/unit/view/droppable/placeholder.spec.js,IdenticalTestDescription,"[{""startLine"":63,""endLine"":70}]",,7.0,2.0
test/unit/view/droppable/placeholder-setup-warning.spec.js,NonFunctionalStatement,"[{""startLine"":29,""endLine"":29}]",,4.0,2.0
test/unit/view/droppable/own-props-validation.spec.js,NonFunctionalStatement,"[{""startLine"":8,""endLine"":8}]",,4.0,0.0
test/unit/view/is-type-of-element/is-svg-element.spec.js,SubOptimalAssert,"[{""startLine"":10,""endLine"":10}]",,5.0,0.0
test/unit/view/is-type-of-element/is-svg-element.spec.js,SubOptimalAssert,"[{""startLine"":27,""endLine"":27}]",,5.0,0.0
test/unit/view/is-type-of-element/is-svg-element.spec.js,SubOptimalAssert,"[{""startLine"":28,""endLine"":28}]",,5.0,0.0
test/unit/view/is-type-of-element/is-svg-element.spec.js,SubOptimalAssert,"[{""startLine"":36,""endLine"":36}]",,5.0,0.0
test/unit/view/is-type-of-element/is-svg-element.spec.js,SubOptimalAssert,"[{""startLine"":37,""endLine"":37}]",,5.0,0.0
test/unit/view/is-type-of-element/is-html-element.spec.js,SubOptimalAssert,"[{""startLine"":12,""endLine"":12}]",,4.0,0.0
test/unit/view/is-type-of-element/is-html-element.spec.js,SubOptimalAssert,"[{""startLine"":21,""endLine"":21}]",,4.0,0.0
test/unit/view/is-type-of-element/is-html-element.spec.js,SubOptimalAssert,"[{""startLine"":30,""endLine"":30}]",,4.0,0.0
test/unit/view/is-type-of-element/is-html-element.spec.js,SubOptimalAssert,"[{""startLine"":31,""endLine"":31}]",,4.0,0.0
test/unit/view/is-type-of-element/is-html-element.spec.js,SubOptimalAssert,"[{""startLine"":44,""endLine"":44}]",,4.0,0.0
test/unit/view/is-type-of-element/is-html-element.spec.js,SubOptimalAssert,"[{""startLine"":45,""endLine"":45}]",,4.0,0.0
test/unit/view/is-type-of-element/is-element.spec.js,NonFunctionalStatement,"[{""startLine"":16,""endLine"":16}]",,3.0,0.0
test/unit/view/is-type-of-element/is-element.spec.js,SubOptimalAssert,"[{""startLine"":30,""endLine"":30}]",,3.0,0.0
test/unit/view/is-type-of-element/is-element.spec.js,SubOptimalAssert,"[{""startLine"":31,""endLine"":31}]",,3.0,0.0
test/unit/view/is-type-of-element/is-element.spec.js,SubOptimalAssert,"[{""startLine"":32,""endLine"":32}]",,3.0,0.0
test/unit/view/is-type-of-element/is-element.spec.js,SubOptimalAssert,"[{""startLine"":33,""endLine"":33}]",,3.0,0.0
test/unit/view/drag-drop-context/content-security-protection-nonce.spec.js,NonFunctionalStatement,"[{""startLine"":13,""endLine"":13}]",,1.0,0.0
test/unit/view/dimension-marshal/publish-while-dragging.spec.js,OvercommentedTest,"[{""startLine"":181,""endLine"":230}]",,14.0,5.0
test/unit/view/dimension-marshal/publish-while-dragging.spec.js,VerboseStatement,"[{""startLine"":112,""endLine"":158}]",,14.0,5.0
test/unit/view/dimension-marshal/publish-while-dragging.spec.js,VerboseStatement,"[{""startLine"":181,""endLine"":230}]",,14.0,5.0
test/unit/view/dimension-marshal/publish-while-dragging.spec.js,VerboseStatement,"[{""startLine"":410,""endLine"":454}]",,14.0,5.0
test/unit/view/dimension-marshal/publish-while-dragging.spec.js,VerboseStatement,"[{""startLine"":456,""endLine"":492}]",,14.0,5.0
test/unit/view/dimension-marshal/publish-while-dragging.spec.js,VerboseStatement,"[{""startLine"":559,""endLine"":588}]",,14.0,5.0
test/unit/view/dimension-marshal/initial-publish.spec.js,VerboseStatement,"[{""startLine"":309,""endLine"":355}]",,9.0,1.0
test/unit/view/dimension-marshal/droppable-passthrough.spec.js,IdenticalTestDescription,"[{""startLine"":91,""endLine"":112}]",,9.0,3.0
test/unit/view/dimension-marshal/droppable-passthrough.spec.js,IdenticalTestDescription,"[{""startLine"":129,""endLine"":147}]",,9.0,3.0
test/unit/view/dimension-marshal/droppable-passthrough.spec.js,IdenticalTestDescription,"[{""startLine"":149,""endLine"":167}]",,9.0,3.0
test/unit/view/connected-droppable/post-drop.spec.js,IdenticalTestDescription,"[{""startLine"":110,""endLine"":132}]",,5.0,4.0
test/unit/view/connected-droppable/dropping.spec.js,OvercommentedTest,"[{""startLine"":82,""endLine"":111}]",,5.0,3.0
test/unit/view/connected-droppable/dropping.spec.js,SubOptimalAssert,"[{""startLine"":92,""endLine"":92}]",,5.0,3.0
test/unit/view/connected-droppable/dragging.spec.js,IdenticalTestDescription,"[{""startLine"":126,""endLine"":150}]",,10.0,6.0
test/unit/view/connected-droppable/dragging.spec.js,IdenticalTestDescription,"[{""startLine"":186,""endLine"":195}]",,10.0,6.0
test/unit/view/connected-droppable/dragging.spec.js,IdenticalTestDescription,"[{""startLine"":196,""endLine"":211}]",,10.0,6.0
test/unit/view/connected-droppable/dragging.spec.js,IdenticalTestDescription,"[{""startLine"":213,""endLine"":230}]",,10.0,6.0
test/unit/view/connected-droppable/dragging.spec.js,IdenticalTestDescription,"[{""startLine"":244,""endLine"":249}]",,10.0,6.0
test/unit/view/connected-droppable/dragging.spec.js,IdenticalTestDescription,"[{""startLine"":251,""endLine"":266}]",,10.0,6.0
test/unit/view/connected-droppable/dragging.spec.js,VerboseStatement,"[{""startLine"":73,""endLine"":98}]",,10.0,6.0
test/unit/view/connected-droppable/disabled.spec.js,IdenticalTestDescription,"[{""startLine"":67,""endLine"":69}]",,3.0,2.0
test/unit/view/connected-droppable/child-render-behaviour.spec.js,NonFunctionalStatement,"[{""startLine"":23,""endLine"":23}]",,3.0,0.0
test/unit/view/animate-in-out/animate-in-out.spec.js,OvercommentedTest,"[{""startLine"":121,""endLine"":175}]",,7.0,0.0
test/unit/view/animate-in-out/animate-in-out.spec.js,VerboseStatement,"[{""startLine"":121,""endLine"":175}]",,7.0,0.0
test/unit/view/connected-draggable/something-else-is-dragging.spec.js,IdenticalTestDescription,"[{""startLine"":162,""endLine"":202}]",,9.0,2.0
test/unit/view/connected-draggable/dropping-with-result-mismatch.spec.js,SubOptimalAssert,"[{""startLine"":25,""endLine"":25}]",,1.0,0.0
test/unit/view/connected-draggable/dragging.spec.js,SubOptimalAssert,"[{""startLine"":61,""endLine"":63}]",,6.0,1.0
test/unit/view/connected-draggable/dragging.spec.js,SubOptimalAssert,"[{""startLine"":105,""endLine"":105}]",,6.0,1.0
test/unit/view/connected-draggable/child-render-behaviour.spec.js,NonFunctionalStatement,"[{""startLine"":42,""endLine"":42}]",,3.0,0.0
test/unit/state/visibility/is-totally-visible.spec.js,IdenticalTestDescription,"[{""startLine"":186,""endLine"":213}]",,19.0,13.0
test/unit/state/visibility/is-totally-visible.spec.js,IdenticalTestDescription,"[{""startLine"":384,""endLine"":415}]",,19.0,13.0
test/unit/state/visibility/is-totally-visible.spec.js,IdenticalTestDescription,"[{""startLine"":419,""endLine"":445}]",,19.0,13.0
test/unit/state/visibility/is-totally-visible.spec.js,SubOptimalAssert,"[{""startLine"":543,""endLine"":543}]",,19.0,13.0
test/unit/state/visibility/is-partially-visible.spec.js,IdenticalTestDescription,"[{""startLine"":173,""endLine"":200}]",,19.0,13.0
test/unit/state/visibility/is-partially-visible.spec.js,IdenticalTestDescription,"[{""startLine"":361,""endLine"":388}]",,19.0,13.0
test/unit/state/visibility/is-partially-visible.spec.js,IdenticalTestDescription,"[{""startLine"":392,""endLine"":418}]",,19.0,13.0
test/unit/state/visibility/is-partially-visible.spec.js,SubOptimalAssert,"[{""startLine"":518,""endLine"":518}]",,19.0,13.0
test/unit/state/update-displacement-visibility/speculative-displacement.spec.js,OvercommentedTest,"[{""startLine"":175,""endLine"":293}]",,3.0,1.0
test/unit/state/update-displacement-visibility/speculative-displacement.spec.js,OvercommentedTest,"[{""startLine"":295,""endLine"":430}]",,3.0,1.0
test/unit/state/registry/queries.spec.js,IdenticalTestDescription,"[{""startLine"":65,""endLine"":67}]",,14.0,10.0
test/unit/state/registry/queries.spec.js,IdenticalTestDescription,"[{""startLine"":104,""endLine"":106}]",,14.0,10.0
test/unit/state/registry/queries.spec.js,IdenticalTestDescription,"[{""startLine"":107,""endLine"":109}]",,14.0,10.0
test/unit/state/registry/queries.spec.js,IdenticalTestDescription,"[{""startLine"":112,""endLine"":114}]",,14.0,10.0
test/unit/state/registry/queries.spec.js,IdenticalTestDescription,"[{""startLine"":115,""endLine"":117}]",,14.0,10.0
test/unit/state/registry/queries.spec.js,IdenticalTestDescription,"[{""startLine"":120,""endLine"":122}]",,14.0,10.0
test/unit/state/registry/queries.spec.js,IdenticalTestDescription,"[{""startLine"":123,""endLine"":125}]",,14.0,10.0
test/unit/state/registry/queries.spec.js,IdenticalTestDescription,"[{""startLine"":128,""endLine"":132}]",,14.0,10.0
test/unit/state/registry/queries.spec.js,SubOptimalAssert,"[{""startLine"":56,""endLine"":56}]",,14.0,10.0
test/unit/state/registry/queries.spec.js,SubOptimalAssert,"[{""startLine"":116,""endLine"":116}]",,14.0,10.0
test/unit/state/registry/droppable-registration.spec.js,SubOptimalAssert,"[{""startLine"":34,""endLine"":34}]",,5.0,0.0
test/unit/state/registry/droppable-registration.spec.js,SubOptimalAssert,"[{""startLine"":86,""endLine"":86}]",,5.0,0.0
test/unit/state/registry/draggable-registration.spec.js,SubOptimalAssert,"[{""startLine"":34,""endLine"":34}]",,7.0,0.0
test/unit/state/registry/draggable-registration.spec.js,SubOptimalAssert,"[{""startLine"":136,""endLine"":136}]",,7.0,0.0
test/unit/state/publish-while-dragging/displacement-animation.spec.js,OvercommentedTest,"[{""startLine"":27,""endLine"":116}]",,1.0,0.0
test/unit/state/publish-while-dragging/displacement-animation.spec.js,VerboseStatement,"[{""startLine"":27,""endLine"":116}]",,1.0,0.0
test/unit/state/move-in-direction/move-in-direction.spec.js,SubOptimalAssert,"[{""startLine"":158,""endLine"":163}]",,9.0,3.0
test/unit/state/move-in-direction/move-in-direction.spec.js,SubOptimalAssert,"[{""startLine"":164,""endLine"":169}]",,9.0,3.0
test/unit/state/middleware/validate-indexes.spec.js,OvercommentedTest,"[{""startLine"":45,""endLine"":93}]",,2.0,0.0
test/unit/state/middleware/validate-indexes.spec.js,NonFunctionalStatement,"[{""startLine"":46,""endLine"":46}]",,2.0,0.0
test/unit/state/middleware/validate-indexes.spec.js,NonFunctionalStatement,"[{""startLine"":96,""endLine"":96}]",,2.0,0.0
test/unit/state/middleware/validate-indexes.spec.js,VerboseStatement,"[{""startLine"":45,""endLine"":93}]",,2.0,0.0
test/unit/state/middleware/validate-indexes.spec.js,VerboseStatement,"[{""startLine"":95,""endLine"":139}]",,2.0,0.0
test/unit/state/middleware/pending-drop.spec.js,VerboseStatement,"[{""startLine"":21,""endLine"":55}]",,2.0,0.0
test/unit/state/middleware/lift.spec.js,OvercommentedTest,"[{""startLine"":71,""endLine"":109}]",,3.0,0.0
test/unit/state/middleware/lift.spec.js,VerboseStatement,"[{""startLine"":71,""endLine"":109}]",,3.0,0.0
test/unit/state/get-droppable-over/is-over-nothing.spec.js,SubOptimalAssert,"[{""startLine"":19,""endLine"":19}]",,1.0,0.0
test/unit/state/get-droppable-over/is-not-visible.spec.js,SubOptimalAssert,"[{""startLine"":122,""endLine"":122}]",,4.0,0.0
test/unit/state/get-droppable-over/is-not-visible.spec.js,SubOptimalAssert,"[{""startLine"":167,""endLine"":167}]",,4.0,0.0
test/unit/state/get-droppable-over/is-not-visible.spec.js,SubOptimalAssert,"[{""startLine"":212,""endLine"":212}]",,4.0,0.0
test/unit/state/get-droppable-over/is-disabled.spec.js,SubOptimalAssert,"[{""startLine"":26,""endLine"":26}]",,1.0,0.0
test/unit/state/get-droppable-over/center-is-over.spec.js,SubOptimalAssert,"[{""startLine"":68,""endLine"":68}]",,2.0,1.0
test/unit/state/droppable/with-placeholder.spec.js,OvercommentedTest,"[{""startLine"":315,""endLine"":359}]",,9.0,5.0
test/unit/state/droppable/with-placeholder.spec.js,IdenticalTestDescription,"[{""startLine"":207,""endLine"":234}]",,9.0,5.0
test/unit/state/droppable/with-placeholder.spec.js,IdenticalTestDescription,"[{""startLine"":236,""endLine"":274}]",,9.0,5.0
test/unit/state/droppable/with-placeholder.spec.js,IdenticalTestDescription,"[{""startLine"":361,""endLine"":373}]",,9.0,5.0
test/unit/state/droppable/scroll-droppable.spec.js,OvercommentedTest,"[{""startLine"":27,""endLine"":118}]",,2.0,0.0
test/unit/state/droppable/scroll-droppable.spec.js,VerboseStatement,"[{""startLine"":27,""endLine"":118}]",,2.0,0.0
test/unit/state/droppable/get-droppable.spec.js,SubOptimalAssert,"[{""startLine"":84,""endLine"":84}]",,8.0,8.0
test/unit/state/auto-scroll/jump-scroller.spec.js,IdenticalTestDescription,"[{""startLine"":138,""endLine"":156}]",,17.0,15.0
test/unit/state/auto-scroll/jump-scroller.spec.js,IdenticalTestDescription,"[{""startLine"":158,""endLine"":169}]",,17.0,15.0
test/unit/state/auto-scroll/jump-scroller.spec.js,IdenticalTestDescription,"[{""startLine"":171,""endLine"":198}]",,17.0,15.0
test/unit/state/auto-scroll/jump-scroller.spec.js,IdenticalTestDescription,"[{""startLine"":436,""endLine"":457}]",,17.0,15.0
test/unit/state/auto-scroll/jump-scroller.spec.js,IdenticalTestDescription,"[{""startLine"":461,""endLine"":479}]",,17.0,15.0
test/unit/state/auto-scroll/jump-scroller.spec.js,IdenticalTestDescription,"[{""startLine"":482,""endLine"":511}]",,17.0,15.0
test/unit/state/auto-scroll/jump-scroller.spec.js,IdenticalTestDescription,"[{""startLine"":515,""endLine"":543}]",,17.0,15.0
test/unit/state/auto-scroll/jump-scroller.spec.js,IdenticalTestDescription,"[{""startLine"":545,""endLine"":583}]",,17.0,15.0
test/unit/state/auto-scroll/jump-scroller.spec.js,VerboseStatement,"[{""startLine"":373,""endLine"":429}]",,17.0,15.0
test/unit/state/auto-scroll/can-scroll.spec.js,OvercommentedTest,"[{""startLine"":392,""endLine"":433}]",,25.0,7.0
test/unit/state/auto-scroll/can-scroll.spec.js,IdenticalTestDescription,"[{""startLine"":564,""endLine"":595}]",,25.0,7.0
test/unit/state/auto-scroll/can-scroll.spec.js,IdenticalTestDescription,"[{""startLine"":597,""endLine"":608}]",,25.0,7.0
test/unit/state/auto-scroll/can-scroll.spec.js,SubOptimalAssert,"[{""startLine"":496,""endLine"":496}]",,25.0,7.0
test/unit/state/auto-scroll/can-scroll.spec.js,SubOptimalAssert,"[{""startLine"":508,""endLine"":508}]",,25.0,7.0
test/unit/state/auto-scroll/can-scroll.spec.js,SubOptimalAssert,"[{""startLine"":560,""endLine"":560}]",,25.0,7.0
test/unit/state/auto-scroll/can-scroll.spec.js,SubOptimalAssert,"[{""startLine"":607,""endLine"":607}]",,25.0,7.0
test/unit/integration/server-side-rendering/client-hydration.spec.js,OvercommentedTest,"[{""startLine"":22,""endLine"":47}]",,1.0,0.0
test/unit/integration/droppable/placeholder.spec.js,OvercommentedTest,"[{""startLine"":159,""endLine"":199}]",,11.0,2.0
test/unit/integration/droppable/placeholder.spec.js,SubOptimalAssert,"[{""startLine"":144,""endLine"":144}]",,11.0,2.0
test/unit/integration/droppable/clone.spec.js,OvercommentedTest,"[{""startLine"":90,""endLine"":121}]",,4.0,0.0
test/unit/integration/draggable/validation.spec.js,NonFunctionalStatement,"[{""startLine"":28,""endLine"":28}]",,6.0,0.0
test/unit/integration/draggable/validation.spec.js,NonFunctionalStatement,"[{""startLine"":83,""endLine"":83}]",,6.0,0.0
test/unit/integration/draggable/validation.spec.js,NonFunctionalStatement,"[{""startLine"":118,""endLine"":118}]",,6.0,0.0
test/unit/integration/draggable/validation.spec.js,NonFunctionalStatement,"[{""startLine"":153,""endLine"":153}]",,6.0,0.0
test/unit/integration/draggable/validation.spec.js,NonFunctionalStatement,"[{""startLine"":188,""endLine"":188}]",,6.0,0.0
test/unit/integration/draggable/portal.spec.js,VerboseStatement,"[{""startLine"":44,""endLine"":65}]",,1.0,0.0
test/unit/integration/draggable/moving-out-of-the-way.spec.js,OvercommentedTest,"[{""startLine"":12,""endLine"":48}]",,1.0,0.0
test/unit/integration/draggable/dropping.spec.js,VerboseStatement,"[{""startLine"":29,""endLine"":55}]",,5.0,0.0
test/unit/integration/draggable/dropping.spec.js,VerboseStatement,"[{""startLine"":57,""endLine"":97}]",,5.0,0.0
test/unit/integration/draggable/dropping.spec.js,VerboseStatement,"[{""startLine"":194,""endLine"":217}]",,5.0,0.0
test/unit/integration/drag-drop-context/unmount.spec.js,NonFunctionalStatement,"[{""startLine"":8,""endLine"":8}]",,2.0,0.0
test/unit/integration/drag-drop-context/unmount.spec.js,NonFunctionalStatement,"[{""startLine"":19,""endLine"":19}]",,2.0,0.0
test/unit/integration/drag-drop-context/reset-server-context.spec.js,NonFunctionalStatement,"[{""startLine"":17,""endLine"":17}]",,1.0,0.0
test/unit/integration/drag-drop-context/reset-server-context.spec.js,NonFunctionalStatement,"[{""startLine"":22,""endLine"":22}]",,1.0,0.0
test/unit/integration/drag-drop-context/reset-server-context.spec.js,NonFunctionalStatement,"[{""startLine"":36,""endLine"":36}]",,1.0,0.0
test/unit/integration/drag-drop-context/clashing-with-consumers-redux.spec.js,NonFunctionalStatement,"[{""startLine"":40,""endLine"":40}]",,2.0,0.0
test/unit/integration/drag-drop-context/clashing-with-consumers-redux.spec.js,NonFunctionalStatement,"[{""startLine"":78,""endLine"":78}]",,2.0,0.0
test/unit/integration/drag-drop-context/check-react-version.spec.js,NonFunctionalStatement,"[{""startLine"":6,""endLine"":6}]",,7.0,0.0
test/unit/integration/drag-drop-context/check-doctype.spec.js,NonFunctionalStatement,"[{""startLine"":5,""endLine"":5}]",,3.0,0.0
test/unit/state/move-in-direction/move-cross-axis/no-visible-targets-in-list.spec.js,SubOptimalAssert,"[{""startLine"":80,""endLine"":80}]",,1.0,0.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,IdenticalTestDescription,"[{""startLine"":467,""endLine"":510}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,IdenticalTestDescription,"[{""startLine"":512,""endLine"":556}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,IdenticalTestDescription,"[{""startLine"":558,""endLine"":611}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,IdenticalTestDescription,"[{""startLine"":613,""endLine"":657}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,IdenticalTestDescription,"[{""startLine"":722,""endLine"":765}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,IdenticalTestDescription,"[{""startLine"":767,""endLine"":813}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,IdenticalTestDescription,"[{""startLine"":869,""endLine"":885}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,IdenticalTestDescription,"[{""startLine"":888,""endLine"":906}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,IdenticalTestDescription,"[{""startLine"":908,""endLine"":938}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,IdenticalTestDescription,"[{""startLine"":1125,""endLine"":1164}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,SubOptimalAssert,"[{""startLine"":153,""endLine"":153}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,SubOptimalAssert,"[{""startLine"":209,""endLine"":209}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,SubOptimalAssert,"[{""startLine"":254,""endLine"":254}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,SubOptimalAssert,"[{""startLine"":301,""endLine"":301}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,SubOptimalAssert,"[{""startLine"":600,""endLine"":600}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,SubOptimalAssert,"[{""startLine"":656,""endLine"":656}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,SubOptimalAssert,"[{""startLine"":719,""endLine"":719}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,SubOptimalAssert,"[{""startLine"":764,""endLine"":764}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,SubOptimalAssert,"[{""startLine"":812,""endLine"":812}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,SubOptimalAssert,"[{""startLine"":1029,""endLine"":1029}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,SubOptimalAssert,"[{""startLine"":1076,""endLine"":1076}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,SubOptimalAssert,"[{""startLine"":1163,""endLine"":1163}]",,26.0,10.0
test/unit/state/move-in-direction/move-cross-axis/get-best-cross-axis-droppable.spec.js,SubOptimalAssert,"[{""startLine"":1210,""endLine"":1210}]",,26.0,10.0
test/unit/state/middleware/responders/update.spec.js,OvercommentedTest,"[{""startLine"":56,""endLine"":98}]",,2.0,0.0
test/unit/state/middleware/responders/update.spec.js,VerboseStatement,"[{""startLine"":56,""endLine"":98}]",,2.0,0.0
test/unit/state/middleware/responders/start.spec.js,VerboseStatement,"[{""startLine"":37,""endLine"":71}]",,3.0,0.0
test/unit/state/middleware/responders/repeated-use.spec.js,OvercommentedTest,"[{""startLine"":25,""endLine"":81}]",,1.0,0.0
test/unit/state/middleware/responders/flushing.spec.js,VerboseStatement,"[{""startLine"":59,""endLine"":83}]",,4.0,0.0
test/unit/state/middleware/responders/announcements.spec.js,ConditionalTestLogic,"[{""startLine"":143,""endLine"":146}]",,5.0,1.0
test/unit/state/middleware/responders/announcements.spec.js,NonFunctionalStatement,"[{""startLine"":173,""endLine"":173}]",,5.0,1.0
test/unit/state/middleware/responders/announcements.spec.js,NonFunctionalStatement,"[{""startLine"":203,""endLine"":203}]",,5.0,1.0
test/unit/state/middleware/drop/result-impact-mismatch.spec.js,SubOptimalAssert,"[{""startLine"":37,""endLine"":37}]",,3.0,0.0
test/unit/state/middleware/drop/result-impact-mismatch.spec.js,SubOptimalAssert,"[{""startLine"":52,""endLine"":52}]",,3.0,0.0
test/unit/state/middleware/drop/result-impact-mismatch.spec.js,SubOptimalAssert,"[{""startLine"":77,""endLine"":77}]",,3.0,0.0
test/unit/state/middleware/drop/result-impact-mismatch.spec.js,SubOptimalAssert,"[{""startLine"":104,""endLine"":104}]",,3.0,0.0
test/unit/state/middleware/drop/result-impact-mismatch.spec.js,SubOptimalAssert,"[{""startLine"":116,""endLine"":116}]",,3.0,0.0
test/unit/state/middleware/drop/result-impact-mismatch.spec.js,SubOptimalAssert,"[{""startLine"":122,""endLine"":122}]",,3.0,0.0
test/unit/state/middleware/drop/result-impact-mismatch.spec.js,VerboseStatement,"[{""startLine"":22,""endLine"":53}]",,3.0,0.0
test/unit/state/middleware/drop/result-impact-mismatch.spec.js,VerboseStatement,"[{""startLine"":80,""endLine"":123}]",,3.0,0.0
test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,OvercommentedTest,"[{""startLine"":118,""endLine"":203}]",,3.0,1.0
test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,VerboseStatement,"[{""startLine"":68,""endLine"":116}]",,3.0,1.0
test/unit/state/middleware/drop/conditionally-animate-drop.spec.js,VerboseStatement,"[{""startLine"":118,""endLine"":203}]",,3.0,1.0
test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,IdenticalTestDescription,"[{""startLine"":254,""endLine"":269}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,IdenticalTestDescription,"[{""startLine"":271,""endLine"":286}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,IdenticalTestDescription,"[{""startLine"":288,""endLine"":309}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,IdenticalTestDescription,"[{""startLine"":311,""endLine"":349}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,IdenticalTestDescription,"[{""startLine"":351,""endLine"":367}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,IdenticalTestDescription,"[{""startLine"":369,""endLine"":386}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,IdenticalTestDescription,"[{""startLine"":388,""endLine"":415}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,VerboseStatement,"[{""startLine"":113,""endLine"":154}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/window-scrolling.spec.js,VerboseStatement,"[{""startLine"":311,""endLine"":349}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,OvercommentedTest,"[{""startLine"":124,""endLine"":232}]",,3.0,0.0
test/unit/state/auto-scroll/fluid-scroller/time-dampening.spec.js,VerboseStatement,"[{""startLine"":124,""endLine"":232}]",,3.0,0.0
test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,IdenticalTestDescription,"[{""startLine"":273,""endLine"":289}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,IdenticalTestDescription,"[{""startLine"":291,""endLine"":307}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,IdenticalTestDescription,"[{""startLine"":309,""endLine"":331}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,IdenticalTestDescription,"[{""startLine"":333,""endLine"":373}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,IdenticalTestDescription,"[{""startLine"":375,""endLine"":393}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,IdenticalTestDescription,"[{""startLine"":395,""endLine"":414}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,IdenticalTestDescription,"[{""startLine"":416,""endLine"":446}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,VerboseStatement,"[{""startLine"":122,""endLine"":165}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/droppable-scrolling.spec.js,VerboseStatement,"[{""startLine"":333,""endLine"":373}]",,14.0,2.0
test/unit/state/auto-scroll/fluid-scroller/big-draggables.spec.js,IdenticalTestDescription,"[{""startLine"":146,""endLine"":175}]",,6.0,2.0
test/unit/state/auto-scroll/fluid-scroller/big-draggables.spec.js,IdenticalTestDescription,"[{""startLine"":177,""endLine"":206}]",,6.0,2.0
test/unit/state/auto-scroll/fluid-scroller/big-draggables.spec.js,IdenticalTestDescription,"[{""startLine"":208,""endLine"":233}]",,6.0,2.0
test/unit/integration/drag-handle/touch-sensor/starting-a-drag.spec.js,OvercommentedTest,"[{""startLine"":36,""endLine"":65}]",,3.0,0.0
test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,NonFunctionalStatement,"[{""startLine"":14,""endLine"":14}]",,3.0,0.0
test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,VerboseStatement,"[{""startLine"":22,""endLine"":57}]",,3.0,0.0
test/unit/integration/drag-handle/sensor-marshal/outdated-locks.spec.js,VerboseStatement,"[{""startLine"":59,""endLine"":84}]",,3.0,0.0
test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,OvercommentedTest,"[{""startLine"":69,""endLine"":103}]",,5.0,0.0
test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,NonFunctionalStatement,"[{""startLine"":15,""endLine"":15}]",,5.0,0.0
test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,SubOptimalAssert,"[{""startLine"":36,""endLine"":36}]",,5.0,0.0
test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,SubOptimalAssert,"[{""startLine"":39,""endLine"":39}]",,5.0,0.0
test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,SubOptimalAssert,"[{""startLine"":42,""endLine"":42}]",,5.0,0.0
test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,SubOptimalAssert,"[{""startLine"":43,""endLine"":43}]",,5.0,0.0
test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,SubOptimalAssert,"[{""startLine"":62,""endLine"":62}]",,5.0,0.0
test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,SubOptimalAssert,"[{""startLine"":99,""endLine"":99}]",,5.0,0.0
test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,SubOptimalAssert,"[{""startLine"":147,""endLine"":147}]",,5.0,0.0
test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,VerboseStatement,"[{""startLine"":69,""endLine"":103}]",,5.0,0.0
test/unit/integration/drag-handle/sensor-marshal/obtaining-lock.spec.js,VerboseStatement,"[{""startLine"":105,""endLine"":127}]",,5.0,0.0
test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,NonFunctionalStatement,"[{""startLine"":16,""endLine"":16}]",,2.0,0.0
test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,VerboseStatement,"[{""startLine"":18,""endLine"":46}]",,2.0,0.0
test/unit/integration/drag-handle/sensor-marshal/move-throttling.spec.js,VerboseStatement,"[{""startLine"":48,""endLine"":75}]",,2.0,0.0
test/unit/integration/drag-handle/sensor-marshal/force-releasing-locks.spec.js,VerboseStatement,"[{""startLine"":12,""endLine"":39}]",,1.0,0.0
test/unit/integration/drag-handle/sensor-marshal/click-blocking.spec.js,VerboseStatement,"[{""startLine"":14,""endLine"":43}]",,3.0,0.0
test/unit/integration/drag-handle/sensor-marshal/click-blocking.spec.js,VerboseStatement,"[{""startLine"":74,""endLine"":106}]",,3.0,0.0
test/unit/integration/drag-handle/shared-behaviours/lock-released-pre-drag.spec.js,VerboseStatement,"[{""startLine"":16,""endLine"":41}]",,1.0,0.0
test/unit/integration/drag-handle/shared-behaviours/lock-released-mid-drag.spec.js,VerboseStatement,"[{""startLine"":11,""endLine"":36}]",,1.0,0.0
test/unit/integration/drag-handle/shared-behaviours/interactive-elements.spec.js,NonFunctionalStatement,"[{""startLine"":24,""endLine"":24}]",,4.0,0.0
test/unit/integration/drag-handle/shared-behaviours/contenteditable.spec.js,NonFunctionalStatement,"[{""startLine"":15,""endLine"":15}]",,5.0,0.0
test/unit/integration/drag-handle/shared-behaviours/abort-on-error.spec.js,SubOptimalAssert,"[{""startLine"":118,""endLine"":118}]",,3.0,0.0
test/unit/integration/drag-drop-context/on-before-capture/removals.spec.js,OvercommentedTest,"[{""startLine"":19,""endLine"":104}]",,1.0,0.0
test/unit/integration/drag-drop-context/on-before-capture/removals.spec.js,SubOptimalAssert,"[{""startLine"":82,""endLine"":82}]",,1.0,0.0
test/unit/integration/drag-drop-context/on-before-capture/removals.spec.js,VerboseStatement,"[{""startLine"":19,""endLine"":104}]",,1.0,0.0
test/unit/integration/drag-drop-context/on-before-capture/additions.spec.js,OvercommentedTest,"[{""startLine"":74,""endLine"":160}]",,2.0,0.0
test/unit/integration/drag-drop-context/on-before-capture/additions.spec.js,SubOptimalAssert,"[{""startLine"":129,""endLine"":129}]",,2.0,0.0
test/unit/integration/drag-drop-context/on-before-capture/additions.spec.js,VerboseStatement,"[{""startLine"":74,""endLine"":160}]",,2.0,0.0
test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,ConditionalTestLogic,"[{""startLine"":13,""endLine"":16}]",,3.0,0.0
test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,ConditionalTestLogic,"[{""startLine"":37,""endLine"":40}]",,3.0,0.0
test/unit/integration/drag-drop-context/error-handling/error-in-react-tree.spec.js,ConditionalTestLogic,"[{""startLine"":61,""endLine"":65}]",,3.0,0.0
test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-viewport.spec.js,OvercommentedTest,"[{""startLine"":252,""endLine"":333}]",,4.0,3.0
test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-viewport.spec.js,IdenticalTestDescription,"[{""startLine"":216,""endLine"":250}]",,4.0,3.0
test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-viewport.spec.js,IdenticalTestDescription,"[{""startLine"":252,""endLine"":333}]",,4.0,3.0
test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-droppable.spec.js,OvercommentedTest,"[{""startLine"":273,""endLine"":350}]",,4.0,3.0
test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-droppable.spec.js,IdenticalTestDescription,"[{""startLine"":237,""endLine"":271}]",,4.0,3.0
test/unit/state/move-in-direction/move-to-next-place/moving-to-invisible-place/not-visible-in-droppable.spec.js,IdenticalTestDescription,"[{""startLine"":273,""endLine"":350}]",,4.0,3.0
test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-home-list.legacy.spec.js,SubOptimalAssert,"[{""startLine"":181,""endLine"":181}]",,6.0,1.0
test/unit/state/move-in-direction/move-to-next-place/move-to-next-combine/in-home-list.legacy.spec.js,SubOptimalAssert,"[{""startLine"":200,""endLine"":200}]",,6.0,1.0
test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-home-list.spec.js,SubOptimalAssert,"[{""startLine"":33,""endLine"":44}]",,4.0,4.0
test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,IdenticalTestDescription,"[{""startLine"":334,""endLine"":379}]",,7.0,6.0
test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,SubOptimalAssert,"[{""startLine"":168,""endLine"":168}]",,7.0,6.0
test/unit/state/move-in-direction/move-cross-axis/move-to-new-droppable/to-foreign-list.spec.js,SubOptimalAssert,"[{""startLine"":242,""endLine"":242}]",,7.0,6.0
test/unit/state/move-in-direction/move-cross-axis/get-closest-draggable/without-starting-displacement.spec.js,SubOptimalAssert,"[{""startLine"":220,""endLine"":220}]",,10.0,2.0
test/unit/state/move-in-direction/move-cross-axis/get-closest-draggable/without-starting-displacement.spec.js,SubOptimalAssert,"[{""startLine"":379,""endLine"":379}]",,10.0,2.0
test/unit/state/get-drag-impact/reorder/over-home-list/started-before-critical.spec.js,OvercommentedTest,"[{""startLine"":55,""endLine"":115}]",,2.0,1.0
test/unit/state/get-drag-impact/reorder/over-home-list/displacement-visibility.spec.js,OvercommentedTest,"[{""startLine"":36,""endLine"":187}]",,2.0,1.0
test/unit/state/get-drag-impact/reorder/over-home-list/displacement-visibility.spec.js,VerboseStatement,"[{""startLine"":36,""endLine"":187}]",,2.0,1.0
test/unit/state/get-center-from-impact/get-page-border-box-center/reorder/nothing-displaced.spec.js,IdenticalTestDescription,"[{""startLine"":86,""endLine"":123}]",,3.0,4.0
test/unit/state/get-center-from-impact/get-page-border-box-center/combine/when-combining.spec.js,IdenticalTestDescription,"[{""startLine"":154,""endLine"":190}]",,4.0,3.0
test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,VerboseStatement,"[{""startLine"":19,""endLine"":179}]",,2.0,1.0
test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-home-list.spec.js,VerboseStatement,"[{""startLine"":181,""endLine"":366}]",,2.0,1.0
test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,OvercommentedTest,"[{""startLine"":32,""endLine"":186}]",,6.0,1.0
test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,OvercommentedTest,"[{""startLine"":188,""endLine"":348}]",,6.0,1.0
test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,SubOptimalAssert,"[{""startLine"":384,""endLine"":384}]",,6.0,1.0
test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-reorder/in-foreign-list.spec.js,SubOptimalAssert,"[{""startLine"":461,""endLine"":461}]",,6.0,1.0
test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/did-not-start-after-critical.spec.js,OvercommentedTest,"[{""startLine"":136,""endLine"":202}]",,4.0,1.0
test/unit/state/move-in-direction/move-to-next-place/move-to-next-index/from-combine/did-not-start-after-critical.spec.js,OvercommentedTest,"[{""startLine"":204,""endLine"":270}]",,4.0,1.0
test/test-flow-types.js,NonFunctionalStatement,"[{""startLine"":10,""endLine"":10}]",,0.0,0.0
test/test-flow-types.js,NonFunctionalStatement,"[{""startLine"":14,""endLine"":14}]",,0.0,0.0
test/unit/integration/util/controls.js,NonFunctionalStatement,"[{""startLine"":61,""endLine"":61}]",,0.0,1.0
test/unit/view/droppable/util/get-stubber.js,NonFunctionalStatement,"[{""startLine"":8,""endLine"":8}]",,0.0,0.0
test/unit/view/droppable/util/get-props.js,NonFunctionalStatement,"[{""startLine"":108,""endLine"":108}]",,0.0,0.0
