file,type,smells,frame,itCount,describeCount
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 20, 'column': 8, 'index': 1016}","  18 |     it(""should not parse Latin-1 outside \\text{} with strict"", function() {
  19 |         const chars = 'ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ';
> 20 |         for (const ch of chars) {
     |        ^ Conditional Test Logic
  21 |             expect(ch).not.toParse(strictSettings);
  22 |         }
  23 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 144, 'column': 8, 'index': 5144}","  142 |
  143 |     it(""supportedCodepoint() should return the correct values"", () => {
> 144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |        ^ Conditional Test Logic
  145 |             expect(supportedCodepoint(codepoint)).toBe(
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 152, 'column': 15, 'index': 5441}","  150 |
  151 |     it(""scriptFromCodepoint() should return correct values"", () => {
> 152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |               ^ Conditional Test Logic
  153 |             const character = String.fromCharCode(codepoint);
  154 |             const script = scriptFromCodepoint(codepoint);
  155 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 156, 'column': 12, 'index': 5635}","  154 |             const script = scriptFromCodepoint(codepoint);
  155 |
> 156 |             for (const scriptName of scriptNames) {
      |            ^ Conditional Test Logic
  157 |                 if (scriptRegExps[scriptName].test(character)) {
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 157, 'column': 16, 'index': 5691}","  155 |
  156 |             for (const scriptName of scriptNames) {
> 157 |                 if (scriptRegExps[scriptName].test(character)) {
      |                ^ Conditional Test Logic
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;
  160 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 158, 'column': 20, 'index': 5760}","  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {
> 158 |                     expect(script).toEqual(scriptName);
      |                    ^ Duplicate Assert
  159 |                     continue outer;
  160 |                 }
  161 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 163, 'column': 12, 'index': 5877}","  161 |             }
  162 |
> 163 |             expect(script).toBe(null);
      |            ^ Duplicate Assert
  164 |             expect(supportedCodepoint(codepoint)).toBe(false);
  165 |         }
  166 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 154, 'column': 27, 'index': 5590}","  152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
  153 |             const character = String.fromCharCode(codepoint);
> 154 |             const script = scriptFromCodepoint(codepoint);
      |                           ^ Eager Test
  155 |
  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Eager Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 145, 'column': 19, 'index': 5223}","  143 |     it(""supportedCodepoint() should return the correct values"", () => {
  144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
> 145 |             expect(supportedCodepoint(codepoint)).toBe(
      |                   ^ Lazy Test
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );
  148 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Lazy Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 7}","   5 |
   6 | describe(""unicode"", function() {
>  7 |     it(""should build Latin-1 inside \\text{}"", function() {
     |    ^ Unknown Test
   8 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}`
   9 |             .toBuild();
  10 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 12}","  10 |     });
  11 |
> 12 |     it(""should build Latin-1 inside \\text{} like accent commands"", function() {
     |    ^ Unknown Test
  13 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}`
  14 |             .toParseLike`\text{\`A\'A\^A\~A\""A\r A\`E\'E\^E\""E\`I\'I\^I\""I\~N\`O\'O\^O\~O\""O\`U\'U\^U\""U\'Y\`a\'a\^a\~a\""a\r a\`e\'e\^e\""e\`ı\'ı\^ı\""ı\~n\`o\'o\^o\~o\""o\`u\'u\^u\""u\'y\""y\c C\c c}`;
  15 |         // TODO(edemaine): A few characters don't have analogs yet.",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 25}","  23 |     });
  24 |
> 25 |     it(""should build Latin-1 outside \\text{}"", function() {
     |    ^ Unknown Test
  26 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ`
  27 |             .toBuild(nonstrictSettings);
  28 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 30}","  28 |     });
  29 |
> 30 |     it(""should build all lower case Greek letters"", function() {
     |    ^ Unknown Test
  31 |         expect`αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω`.toBuild();
  32 |     });
  33 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 34}","  32 |     });
  33 |
> 34 |     it(""should build math upper case Greek letters"", function() {
     |    ^ Unknown Test
  35 |         expect`ΓΔΘΛΞΠΣΥΦΨΩ`.toBuild();
  36 |     });
  37 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 38}","  36 |     });
  37 |
> 38 |     it(""should build Cyrillic inside \\text{}"", function() {
     |    ^ Unknown Test
  39 |         expect`\text{БГДЖЗЙЛФЦШЫЮЯ}`.toBuild();
  40 |     });
  41 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 42}","  40 |     });
  41 |
> 42 |     it(""should build Cyrillic outside \\text{}"", function() {
     |    ^ Unknown Test
  43 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.toBuild(nonstrictSettings);
  44 |     });
  45 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 46}","  44 |     });
  45 |
> 46 |     it(""should not parse Cyrillic outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  47 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.not.toParse(strictSettings);
  48 |     });
  49 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 50}","  48 |     });
  49 |
> 50 |     it(""should build CJK inside \\text{}"", function() {
     |    ^ Unknown Test
  51 |         expect`\text{私はバナナです}`.toBuild();
  52 |         expect`\text{여보세요}`.toBuild();
  53 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 55}","  53 |     });
  54 |
> 55 |     it(""should build CJK outside \\text{}"", function() {
     |    ^ Unknown Test
  56 |         expect`私はバナナです`.toBuild(nonstrictSettings);
  57 |         expect`여보세요`.toBuild(nonstrictSettings);
  58 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 60}","  58 |     });
  59 |
> 60 |     it(""should not parse CJK outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  61 |         expect`私はバナナです。`.not.toParse(strictSettings);
  62 |         expect`여보세요`.not.toParse(strictSettings);
  63 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 65}","  63 |     });
  64 |
> 65 |     it(""should build Devanagari inside \\text{}"", function() {
     |    ^ Unknown Test
  66 |         expect`\text{नमस्ते}`.toBuild();
  67 |     });
  68 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 69}","  67 |     });
  68 |
> 69 |     it(""should build Devanagari outside \\text{}"", function() {
     |    ^ Unknown Test
  70 |         expect`नमस्ते`.toBuild(nonstrictSettings);
  71 |     });
  72 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 73}","  71 |     });
  72 |
> 73 |     it(""should not parse Devanagari outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  74 |         expect`नमस्ते`.not.toParse(strictSettings);
  75 |     });
  76 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 77}","  75 |     });
  76 |
> 77 |     it(""should build Georgian inside \\text{}"", function() {
     |    ^ Unknown Test
  78 |         expect`\text{გამარჯობა}`.toBuild();
  79 |     });
  80 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 81}","  79 |     });
  80 |
> 81 |     it(""should build Georgian outside \\text{}"", function() {
     |    ^ Unknown Test
  82 |         expect`გამარჯობა`.toBuild(nonstrictSettings);
  83 |     });
  84 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 85}","  83 |     });
  84 |
> 85 |     it(""should not parse Georgian outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  86 |         expect`გამარჯობა`.not.toParse(strictSettings);
  87 |     });
  88 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 89}","  87 |     });
  88 |
> 89 |     it(""should build Armenian both inside and outside \\text{}"", function() {
     |    ^ Unknown Test
  90 |         expect`ԱԲԳաբգ`.toBuild(nonstrictSettings);
  91 |         expect`\text{ԱԲԳաբգ}`.toBuild(nonstrictSettings);
  92 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 94}","  92 |     });
  93 |
> 94 |     it(""should build extended Latin characters inside \\text{}"", function() {
     |    ^ Unknown Test
  95 |         expect`\text{ěščřžůřťďňőİı}`.toBuild();
  96 |     });
  97 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 98}","   96 |     });
   97 |
>  98 |     it(""should not parse extended Latin outside \\text{} with strict"", function() {
      |    ^ Unknown Test
   99 |         expect`ěščřžůřťďňőİı`.not.toParse(strictSettings);
  100 |     });
  101 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 102}","  100 |     });
  101 |
> 102 |     it(""should not allow emoji in strict mode"", function() {
      |    ^ Unknown Test
  103 |         expect`✌`.not.toParse(strictSettings);
  104 |         expect`\text{✌}`.not.toParse(strictSettings);
  105 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 113}","  111 |     });
  112 |
> 113 |     it(""should allow emoji outside strict mode"", function() {
      |    ^ Unknown Test
  114 |         expect`✌`.toWarn();
  115 |         expect`\text{✌}`.toWarn();
  116 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 4, 'column': 4, 'index': 98}","  2 |
  3 | describe(""Screenshotter item"", function() {
> 4 |     for (const key in data) {
    |    ^ Conditional Test Logic
  5 |         if (data.hasOwnProperty(key)) {
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 5, 'column': 8, 'index': 132}","  3 | describe(""Screenshotter item"", function() {
  4 |     for (const key in data) {
> 5 |         if (data.hasOwnProperty(key)) {
    |        ^ Conditional Test Logic
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {
  8 |                 expect(item.tex).toBuild({",,
/home/gabriel/Desktop/research/projects/katex/test/mathml-spec.js,Conditional Test Logic,"{'line': 9, 'column': 4, 'index': 300}","   7 | const getMathML = function(expr, settings = new Settings()) {
   8 |     let startStyle = Style.TEXT;
>  9 |     if (settings.displayMode) {
     |    ^ Conditional Test Logic
  10 |         startStyle = Style.DISPLAY;
  11 |     }
  12 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 46, 'column': 8, 'index': 1257}","  44 |         const parse = getParsed(expression);
  45 |
> 46 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  47 |             const group = parse[i];
  48 |             expect(group.type).toMatch(""ord"");
  49 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 60, 'column': 8, 'index': 1751}","  58 |         
  59 |         // Verify each character is parsed as an individual ord
> 60 |         for (let i = 0; i < expectedLength; i++) {
     |        ^ Conditional Test Logic
  61 |             const group = parse[i];
  62 |             expect(group.type).toMatch(""ord"");
  63 |             expect(group.text).toBe(expression[i]);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 78, 'column': 8, 'index': 2225}","  76 |         const parse = getParsed(expression);
  77 |
> 78 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  79 |             const group = parse[i];
  80 |             expect(group.type).toEqual(""atom"");
  81 |             expect(group.family).toEqual(""bin"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 98, 'column': 8, 'index': 2820}","   96 |         const parse = getParsed(expression);
   97 |
>  98 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
   99 |             let group = parse[i];
  100 |             if (group.type === ""htmlmathml"") {
  101 |                 expect(group.html).toHaveLength(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 100, 'column': 12, 'index': 2907}","   98 |         for (let i = 0; i < parse.length; i++) {
   99 |             let group = parse[i];
> 100 |             if (group.type === ""htmlmathml"") {
      |            ^ Conditional Test Logic
  101 |                 expect(group.html).toHaveLength(1);
  102 |                 group = group.html[0];
  103 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 104, 'column': 12, 'index': 3059}","  102 |                 group = group.html[0];
  103 |             }
> 104 |             if (group.type === ""mclass"") {
      |            ^ Conditional Test Logic
  105 |                 expect(group.mclass).toEqual(""mrel"");
  106 |             } else {
  107 |                 expect(group.type).toEqual(""atom"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 137, 'column': 8, 'index': 4075}","  135 |         const parse = getParsed(expression);
  136 |
> 137 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  138 |             const group = parse[i];
  139 |             expect(group.type).toEqual(""atom"");
  140 |             expect(group.family).toEqual(""punct"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 155, 'column': 8, 'index': 4536}","  153 |         const parse = getParsed(expression);
  154 |
> 155 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  156 |             const group = parse[i];
  157 |             expect(group.type).toEqual(""atom"");
  158 |             expect(group.family).toEqual(""open"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 173, 'column': 8, 'index': 4999}","  171 |         const parse = getParsed(expression);
  172 |
> 173 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  174 |             const group = parse[i];
  175 |             expect(group.type).toEqual(""atom"");
  176 |             expect(group.family).toEqual(""close"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1271, 'column': 4, 'index': 40799}","  1269 |     ];
  1270 |
> 1271 |     for (const [actual, expected] of cases) {
       |    ^ Conditional Test Logic
  1272 |         it(`should build ""${actual}"" like ""${expected}""`, () => {
  1273 |             expect(actual).toBuildLike(expected);
  1274 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1420, 'column': 8, 'index': 46045}","  1418 |         ];
  1419 |
> 1420 |         for (let i = 0; i < missingGroups.length; i++) {
       |        ^ Conditional Test Logic
  1421 |             expect(missingGroups[i]).not.toParse();
  1422 |         }
  1423 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1447, 'column': 8, 'index': 47006}","  1445 |         ];
  1446 |
> 1447 |         for (let i = 0; i < badArguments.length; i++) {
       |        ^ Conditional Test Logic
  1448 |             expect(badArguments[i]).not.toParse();
  1449 |         }
  1450 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1465, 'column': 8, 'index': 47572}","  1463 |         ];
  1464 |
> 1465 |         for (let i = 0; i < goodArguments.length; i++) {
       |        ^ Conditional Test Logic
  1466 |             expect(goodArguments[i]).toParse();
  1467 |         }
  1468 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1478, 'column': 8, 'index': 47928}","  1476 |         ];
  1477 |
> 1478 |         for (let i = 0; i < badSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1479 |             expect(badSupSubscripts[i]).not.toParse();
  1480 |         }
  1481 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1491, 'column': 8, 'index': 48307}","  1489 |         ];
  1490 |
> 1491 |         for (let i = 0; i < goodSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1492 |             expect(goodSupSubscripts[i]).toParse();
  1493 |         }
  1494 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1529, 'column': 8, 'index': 49539}","  1527 |         ];
  1528 |
> 1529 |         for (let i = 0; i < badLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1530 |             expect(badLeftArguments[i]).not.toParse();
  1531 |         }
  1532 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1543, 'column': 8, 'index': 50016}","  1541 |         ];
  1542 |
> 1543 |         for (let i = 0; i < goodLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1544 |             expect(goodLeftArguments[i]).toParse();
  1545 |         }
  1546 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 2181, 'column': 8, 'index': 77966}","  2179 |
  2180 |     it(""should throw Error when HTML attribute name is invalid"", function() {
> 2181 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
       |        ^ Conditional Test Logic
  2182 |             try {
  2183 |                 katex.renderToString(
  2184 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 3844, 'column': 4, 'index': 141903}","  3842 | describe(""leqno and fleqn rendering options"", () => {
  3843 |     const expr = r`\tag{hi}x+y`;
> 3844 |     for (const opt of [""leqno"", ""fleqn""]) {
       |    ^ Conditional Test Logic
  3845 |         it(`should not add ${opt} class by default`, () => {
  3846 |             const settings = new Settings({displayMode: true});
  3847 |             const built = katex.__renderToDomTree(expr, settings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4249, 'column': 8, 'index': 158843}","  4247 |         // add eastern arabic numbers to symbols table
  4248 |         // these symbols are ۰۱۲۳۴۵۶۷۸۹ and ٠١٢٣٤٥٦٧٨٩
> 4249 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4250 |             const persianNum = String.fromCharCode(0x0660 + number);
  4251 |             katex.__defineSymbol(
  4252 |                 ""math"", fontName, ""textord"", persianNum, persianNum);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4268, 'column': 8, 'index': 159789}","  4266 |         const mockMetrics = {};
  4267 |         // mock font metrics for the symbols that we added previously
> 4268 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4269 |             mockMetrics[0x0660 + number] = [-0.00244140625, 0.6875, 0, 0];
  4270 |             mockMetrics[0x06F0 + number] = [-0.00244140625, 0.6875, 0, 0];
  4271 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 583, 'column': 8, 'index': 17465}","  581 |         parse = getParsed(simpleOver)[0];
  582 |
> 583 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  584 |         expect(parse.numer).toBeDefined();
  585 |         expect(parse.denom).toBeDefined();
  586 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 583, 'column': 8, 'index': 17465}","  581 |         parse = getParsed(simpleOver)[0];
  582 |
> 583 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  584 |         expect(parse.numer).toBeDefined();
  585 |         expect(parse.denom).toBeDefined();
  586 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 584, 'column': 8, 'index': 17512}","  582 |
  583 |         expect(parse.type).toEqual(""genfrac"");
> 584 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  585 |         expect(parse.denom).toBeDefined();
  586 |
  587 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 584, 'column': 8, 'index': 17512}","  582 |
  583 |         expect(parse.type).toEqual(""genfrac"");
> 584 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  585 |         expect(parse.denom).toBeDefined();
  586 |
  587 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 585, 'column': 8, 'index': 17555}","  583 |         expect(parse.type).toEqual(""genfrac"");
  584 |         expect(parse.numer).toBeDefined();
> 585 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  586 |
  587 |         parse = getParsed(complexOver)[0];
  588 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 585, 'column': 8, 'index': 17555}","  583 |         expect(parse.type).toEqual(""genfrac"");
  584 |         expect(parse.numer).toBeDefined();
> 585 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  586 |
  587 |         parse = getParsed(complexOver)[0];
  588 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 589, 'column': 8, 'index': 17643}","  587 |         parse = getParsed(complexOver)[0];
  588 |
> 589 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  590 |         expect(parse.numer).toBeDefined();
  591 |         expect(parse.denom).toBeDefined();
  592 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 589, 'column': 8, 'index': 17643}","  587 |         parse = getParsed(complexOver)[0];
  588 |
> 589 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  590 |         expect(parse.numer).toBeDefined();
  591 |         expect(parse.denom).toBeDefined();
  592 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 590, 'column': 8, 'index': 17690}","  588 |
  589 |         expect(parse.type).toEqual(""genfrac"");
> 590 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  591 |         expect(parse.denom).toBeDefined();
  592 |
  593 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 590, 'column': 8, 'index': 17690}","  588 |
  589 |         expect(parse.type).toEqual(""genfrac"");
> 590 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  591 |         expect(parse.denom).toBeDefined();
  592 |
  593 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 591, 'column': 8, 'index': 17733}","  589 |         expect(parse.type).toEqual(""genfrac"");
  590 |         expect(parse.numer).toBeDefined();
> 591 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  592 |
  593 |         const parseBraceFrac = getParsed(braceFrac)[0];
  594 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 591, 'column': 8, 'index': 17733}","  589 |         expect(parse.type).toEqual(""genfrac"");
  590 |         expect(parse.numer).toBeDefined();
> 591 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  592 |
  593 |         const parseBraceFrac = getParsed(braceFrac)[0];
  594 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1648, 'column': 8, 'index': 53785}","  1646 |         expect(bbBody).toHaveLength(3);
  1647 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1648 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1649 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1650 |         expect(bbBody[2].type).toEqual(""font"");
  1651 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1648, 'column': 8, 'index': 53785}","  1646 |         expect(bbBody).toHaveLength(3);
  1647 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1648 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1649 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1650 |         expect(bbBody[2].type).toEqual(""font"");
  1651 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1650, 'column': 8, 'index': 53883}","  1648 |         expect(bbBody[2].type).toEqual(""font"");
  1649 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1650 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1651 |     });
  1652 |
  1653 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1650, 'column': 8, 'index': 53883}","  1648 |         expect(bbBody[2].type).toEqual(""font"");
  1649 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1650 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1651 |     });
  1652 |
  1653 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1843, 'column': 8, 'index': 61438}","  1841 |     it(""should render \\text{R\\textit{S}T} with the correct fonts"", function() {
  1842 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
> 1843 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
       |        ^ Duplicate Assert
  1844 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
  1845 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1846 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1844, 'column': 8, 'index': 61505}","  1842 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
  1843 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
> 1844 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
       |        ^ Duplicate Assert
  1845 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1846 |     });
  1847 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1845, 'column': 8, 'index': 61579}","  1843 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
  1844 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
> 1845 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
       |        ^ Duplicate Assert
  1846 |     });
  1847 |
  1848 |     it(""should render \\textbf{R } with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1869, 'column': 8, 'index': 62770}","  1867 |     it(""should render \\textsf{\\textit{R}G\\textbf{B}} with the correct font"", function() {
  1868 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
> 1869 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
       |        ^ Duplicate Assert
  1870 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
  1871 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1872 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1870, 'column': 8, 'index': 62851}","  1868 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
  1869 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
> 1870 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
       |        ^ Duplicate Assert
  1871 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1872 |     });
  1873 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1871, 'column': 8, 'index': 62925}","  1869 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
  1870 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
> 1871 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
       |        ^ Duplicate Assert
  1872 |     });
  1873 |
  1874 |     it(""should render \\textsf{\\textbf{$\\mathrm{A}$}} with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1892, 'column': 8, 'index': 64000}","  1890 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1891 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1892 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1893 |
  1894 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1895 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1892, 'column': 8, 'index': 64000}","  1890 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1891 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1892 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1893 |
  1894 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1895 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1896, 'column': 8, 'index': 64190}","  1894 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1895 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1896 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1897 |     });
  1898 |
  1899 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1896, 'column': 8, 'index': 64190}","  1894 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1895 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1896 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1897 |     });
  1898 |
  1899 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2089, 'column': 8, 'index': 74463}","  2087 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2088 |             ""</mstyle>"";
> 2089 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2090 |
  2091 |         // reverse the order of the commands
  2092 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2089, 'column': 8, 'index': 74463}","  2087 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2088 |             ""</mstyle>"";
> 2089 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2090 |
  2091 |         // reverse the order of the commands
  2092 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2098, 'column': 8, 'index': 74824}","  2096 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2097 |             ""</mstyle>"";
> 2098 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2099 |     });
  2100 |
  2101 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2098, 'column': 8, 'index': 74824}","  2096 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2097 |             ""</mstyle>"";
> 2098 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2099 |     });
  2100 |
  2101 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2112, 'column': 8, 'index': 75385}","  2110 |         const tree = getParsed(tex);
  2111 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
> 2112 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
       |        ^ Duplicate Assert
  2113 |         expect(markup).toContain(
  2114 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2115 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2113, 'column': 8, 'index': 75456}","  2111 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2112 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
> 2113 |         expect(markup).toContain(
       |        ^ Duplicate Assert
  2114 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2115 |     });
  2116 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2210, 'column': 8, 'index': 79019}","  2208 |         const built = getBuilt`+ x`;
  2209 |
> 2210 |         expect(built[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2211 |         expect(built[0].classes).not.toContain(""mbin"");
  2212 |     });
  2213 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2211, 'column': 8, 'index': 79071}","  2209 |
  2210 |         expect(built[0].classes).toContain(""mord"");
> 2211 |         expect(built[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2212 |     });
  2213 |
  2214 |     it(""should create ords after some other objects"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2245, 'column': 8, 'index': 80587}","  2243 |         const markup = katex.renderToString(r`\sigma^2`);
  2244 |         expect(markup.indexOf(""<span"")).toBe(0);
> 2245 |         expect(markup).toContain(""\u03c3"");  // sigma
       |        ^ Duplicate Assert
  2246 |         expect(markup).toContain(""margin-right"");
  2247 |         expect(markup).not.toContain(""marginRight"");
  2248 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2246, 'column': 8, 'index': 80641}","  2244 |         expect(markup.indexOf(""<span"")).toBe(0);
  2245 |         expect(markup).toContain(""\u03c3"");  // sigma
> 2246 |         expect(markup).toContain(""margin-right"");
       |        ^ Duplicate Assert
  2247 |         expect(markup).not.toContain(""marginRight"");
  2248 |     });
  2249 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2247, 'column': 8, 'index': 80691}","  2245 |         expect(markup).toContain(""\u03c3"");  // sigma
  2246 |         expect(markup).toContain(""margin-right"");
> 2247 |         expect(markup).not.toContain(""marginRight"");
       |        ^ Duplicate Assert
  2248 |     });
  2249 |
  2250 |     it(""generates both MathML and HTML"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2253, 'column': 8, 'index': 80858}","  2251 |         const markup = katex.renderToString(""a"");
  2252 |
> 2253 |         expect(markup).toContain(""<span"");
       |        ^ Duplicate Assert
  2254 |         expect(markup).toContain(""<math"");
  2255 |     });
  2256 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2254, 'column': 8, 'index': 80901}","  2252 |
  2253 |         expect(markup).toContain(""<span"");
> 2254 |         expect(markup).toContain(""<math"");
       |        ^ Duplicate Assert
  2255 |     });
  2256 | });
  2257 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2306, 'column': 8, 'index': 82364}","  2304 |     it(""should produce mords"", function() {
  2305 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
> 2306 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2307 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2308 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2309 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2307, 'column': 8, 'index': 82427}","  2305 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
  2306 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
> 2307 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2308 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2309 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2310 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2308, 'column': 8, 'index': 82494}","  2306 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
  2307 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
> 2308 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2309 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2310 |     });
  2311 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2309, 'column': 8, 'index': 82559}","  2307 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2308 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
> 2309 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2310 |     });
  2311 | });
  2312 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2324, 'column': 8, 'index': 83076}","  2322 |     it(""should produce mords"", function() {
  2323 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
> 2324 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2325 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2326 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2327 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2325, 'column': 8, 'index': 83143}","  2323 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
  2324 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
> 2325 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2326 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2327 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2328 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2326, 'column': 8, 'index': 83214}","  2324 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
  2325 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
> 2326 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2327 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2328 |     });
  2329 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2327, 'column': 8, 'index': 83283}","  2325 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2326 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
> 2327 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2328 |     });
  2329 | });
  2330 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2341, 'column': 8, 'index': 83801}","  2339 |     it(""should produce mords"", function() {
  2340 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
> 2341 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2342 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2343 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2344 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2342, 'column': 8, 'index': 83875}","  2340 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
  2341 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
> 2342 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2343 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2344 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2345 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2343, 'column': 8, 'index': 83953}","  2341 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
  2342 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
> 2343 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2344 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2345 |     });
  2346 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2344, 'column': 8, 'index': 84029}","  2342 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2343 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
> 2344 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2345 |     });
  2346 | });
  2347 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2388, 'column': 8, 'index': 85518}","  2386 |     it(""should produce mords"", function() {
  2387 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
> 2388 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2389 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2390 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2391 |         expect(getBuilt`\underrightarrow )^2`[0].classes)",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2389, 'column': 8, 'index': 85593}","  2387 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
  2388 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
> 2389 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2390 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2391 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2392 |             .not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2390, 'column': 8, 'index': 85672}","  2388 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
  2389 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
> 2390 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2391 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2392 |             .not.toContain(""mclose"");
  2393 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2391, 'column': 8, 'index': 85749}","  2389 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2390 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
> 2391 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
       |        ^ Duplicate Assert
  2392 |             .not.toContain(""mclose"");
  2393 |     });
  2394 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2430, 'column': 8, 'index': 87052}","  2428 |         expect(getBuilt`\xrightarrow x`[0].classes).toContain(""mrel"");
  2429 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
> 2430 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2431 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2432 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2433 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2431, 'column': 8, 'index': 87123}","  2429 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
  2430 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
> 2431 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2432 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2433 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2434 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2432, 'column': 8, 'index': 87198}","  2430 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
  2431 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
> 2432 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2433 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2434 |     });
  2435 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2433, 'column': 8, 'index': 87271}","  2431 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2432 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
> 2433 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2434 |     });
  2435 | });
  2436 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2471, 'column': 8, 'index': 88516}","  2469 |         expect(getBuilt`\overbrace x`[0].classes).toContain(""mord"");
  2470 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
> 2471 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2472 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2473 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2474 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2472, 'column': 8, 'index': 88585}","  2470 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
  2471 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
> 2472 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2473 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2474 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2475 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2473, 'column': 8, 'index': 88658}","  2471 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
  2472 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
> 2473 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2474 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2475 |     });
  2476 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2474, 'column': 8, 'index': 88729}","  2472 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2473 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
> 2474 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2475 |     });
  2476 | });
  2477 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2503, 'column': 8, 'index': 89565}","  2501 |     it(""should produce mords"", function() {
  2502 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
> 2503 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2504 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2505 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2506 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2504, 'column': 8, 'index': 89630}","  2502 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
  2503 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
> 2504 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2505 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2506 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2507 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2505, 'column': 8, 'index': 89699}","  2503 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
  2504 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
> 2505 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2506 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2507 |     });
  2508 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2506, 'column': 8, 'index': 89766}","  2504 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2505 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
> 2506 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2507 |     });
  2508 | });
  2509 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2623, 'column': 8, 'index': 93555}","  2621 |     it(""should produce mords"", function() {
  2622 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
> 2623 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2624 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2625 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2626 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2624, 'column': 8, 'index': 93621}","  2622 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
  2623 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
> 2624 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2625 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2626 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2627 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2625, 'column': 8, 'index': 93691}","  2623 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
  2624 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
> 2625 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2626 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2627 |     });
  2628 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2626, 'column': 8, 'index': 93759}","  2624 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2625 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
> 2626 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2627 |     });
  2628 | });
  2629 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3474, 'column': 8, 'index': 126899}","  3472 |     it(""\\char produces literal characters"", () => {
  3473 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3474 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Duplicate Assert
  3475 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3476 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3477 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3475, 'column': 8, 'index': 126950}","  3473 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3474 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3475 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Duplicate Assert
  3476 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3477 |         expect`\char`.not.toParse();
  3478 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3476, 'column': 8, 'index': 127002}","  3474 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3475 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3476 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Duplicate Assert
  3477 |         expect`\char`.not.toParse();
  3478 |         expect(""\\char`"").not.toParse();
  3479 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4108, 'column': 8, 'index': 153124}","  4106 |         const example = exp32 + r`\a{1}`;
  4107 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
> 4108 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4109 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4110 |     });
  4111 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4109, 'column': 8, 'index': 153191}","  4107 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
  4108 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4109 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4110 |     });
  4111 |
  4112 |     it(""should count correctly with Unicode sub/superscripts"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4115, 'column': 8, 'index': 153460}","  4113 |         const example = exp32 + r`\def+{\a{1}}x⁺x⁺x⁺x⁺`;
  4114 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
> 4115 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4116 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4117 |     });
  4118 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4116, 'column': 8, 'index': 153527}","  4114 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
  4115 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4116 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4117 |     });
  4118 | });
  4119 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4158, 'column': 8, 'index': 155174}","  4156 |         // Ensure newlines appear outside base spans (because, in this regexp,
  4157 |         // base span occurs immediately after each newline span).
> 4158 |         expect(markup).toMatch(
       |        ^ Duplicate Assert
  4159 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
  4160 |         expect(markup).toMatchSnapshot();
  4161 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4160, 'column': 8, 'index': 155314}","  4158 |         expect(markup).toMatch(
  4159 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
> 4160 |         expect(markup).toMatchSnapshot();
       |        ^ Duplicate Assert
  4161 |     });
  4162 | });
  4163 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 518, 'column': 27, 'index': 15350}","  516 |
  517 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 518 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Eager Test
  519 |
  520 |         expect(dfracParse.type).toEqual(""genfrac"");
  521 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 524, 'column': 27, 'index': 15558}","  522 |         expect(dfracParse.denom).toBeDefined();
  523 |
> 524 |         const tfracParse = getParsed(tfracExpression)[0];
      |                           ^ Eager Test
  525 |
  526 |         expect(tfracParse.type).toEqual(""genfrac"");
  527 |         expect(tfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 530, 'column': 27, 'index': 15766}","  528 |         expect(tfracParse.denom).toBeDefined();
  529 |
> 530 |         const cfracParse = getParsed(cfracExpression)[0];
      |                           ^ Eager Test
  531 |
  532 |         expect(cfracParse.type).toEqual(""genfrac"");
  533 |         expect(cfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 536, 'column': 29, 'index': 15976}","  534 |         expect(cfracParse.denom).toBeDefined();
  535 |
> 536 |         const genfracParse = getParsed(genfrac1)[0];
      |                             ^ Eager Test
  537 |
  538 |         expect(genfracParse.type).toEqual(""genfrac"");
  539 |         expect(genfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 581, 'column': 16, 'index': 17430}","  579 |         let parse;
  580 |
> 581 |         parse = getParsed(simpleOver)[0];
      |                ^ Eager Test
  582 |
  583 |         expect(parse.type).toEqual(""genfrac"");
  584 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 587, 'column': 16, 'index': 17607}","  585 |         expect(parse.denom).toBeDefined();
  586 |
> 587 |         parse = getParsed(complexOver)[0];
      |                ^ Eager Test
  588 |
  589 |         expect(parse.type).toEqual(""genfrac"");
  590 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 593, 'column': 31, 'index': 17800}","  591 |         expect(parse.denom).toBeDefined();
  592 |
> 593 |         const parseBraceFrac = getParsed(braceFrac)[0];
      |                               ^ Eager Test
  594 |
  595 |         expect(parseBraceFrac.type).toEqual(""genfrac"");
  596 |         expect(parseBraceFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 601, 'column': 31, 'index': 18131}","  599 |         expect(parseBraceFrac.rightDelim).toBeDefined();
  600 |
> 601 |         const parseBrackFrac = getParsed(brackFrac)[0];
      |                               ^ Eager Test
  602 |
  603 |         expect(parseBrackFrac.type).toEqual(""genfrac"");
  604 |         expect(parseBrackFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 878, 'column': 23, 'index': 28092}","  876 |
  877 |     it(""should correctly extract the custom color"", function() {
> 878 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Eager Test
  879 |         const parse2 = getParsed(customColorExpression2)[0];
  880 |         const parse3 = getParsed(customColorExpression3)[0];
  881 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 879, 'column': 23, 'index': 28153}","  877 |     it(""should correctly extract the custom color"", function() {
  878 |         const parse1 = getParsed(customColorExpression1)[0];
> 879 |         const parse2 = getParsed(customColorExpression2)[0];
      |                       ^ Eager Test
  880 |         const parse3 = getParsed(customColorExpression3)[0];
  881 |
  882 |         expect(parse1.color).toEqual(""#fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 880, 'column': 23, 'index': 28214}","  878 |         const parse1 = getParsed(customColorExpression1)[0];
  879 |         const parse2 = getParsed(customColorExpression2)[0];
> 880 |         const parse3 = getParsed(customColorExpression3)[0];
      |                       ^ Eager Test
  881 |
  882 |         expect(parse1.color).toEqual(""#fA6"");
  883 |         expect(parse2.color).toEqual(""#fA6fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 978, 'column': 26, 'index': 31164}","  976 |
  977 |     it(""should produce the correct direction delimiter"", function() {
> 978 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Eager Test
  979 |         const rightParse = getParsed(bigDelim)[0];
  980 |
  981 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 979, 'column': 27, 'index': 31218}","  977 |     it(""should produce the correct direction delimiter"", function() {
  978 |         const leftParse = getParsed(normalDelim)[0];
> 979 |         const rightParse = getParsed(bigDelim)[0];
      |                           ^ Eager Test
  980 |
  981 |         expect(leftParse.mclass).toEqual(""mopen"");
  982 |         expect(rightParse.mclass).toEqual(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 986, 'column': 27, 'index': 31446}","  984 |
  985 |     it(""should parse the correct size delimiter"", function() {
> 986 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Eager Test
  987 |         const bigParse = getParsed(bigDelim)[0];
  988 |
  989 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 987, 'column': 25, 'index': 31498}","  985 |     it(""should parse the correct size delimiter"", function() {
  986 |         const smallParse = getParsed(normalDelim)[0];
> 987 |         const bigParse = getParsed(bigDelim)[0];
      |                         ^ Eager Test
  988 |
  989 |         expect(smallParse.size).toEqual(1);
  990 |         expect(bigParse.size).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1067, 'column': 24, 'index': 33864}","  1065 |
  1066 |     it(""should list the correct units"", function() {
> 1067 |         const emParse = getParsed(emRule)[0];
       |                        ^ Eager Test
  1068 |         const exParse = getParsed(exRule)[0];
  1069 |
  1070 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1068, 'column': 24, 'index': 33910}","  1066 |     it(""should list the correct units"", function() {
  1067 |         const emParse = getParsed(emRule)[0];
> 1068 |         const exParse = getParsed(exRule)[0];
       |                        ^ Eager Test
  1069 |
  1070 |         expect(emParse.width.unit).toEqual(""em"");
  1071 |         expect(emParse.height.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1105, 'column': 24, 'index': 35080}","  1103 |
  1104 |     it(""should list the correct units"", function() {
> 1105 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1106 |         const exParse = getParsed(exKern)[0];
  1107 |         const muParse = getParsed(muKern)[0];
  1108 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1106, 'column': 24, 'index': 35126}","  1104 |     it(""should list the correct units"", function() {
  1105 |         const emParse = getParsed(emKern)[0];
> 1106 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1107 |         const muParse = getParsed(muKern)[0];
  1108 |         const abParse = getParsed(abKern)[1];
  1109 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1107, 'column': 24, 'index': 35172}","  1105 |         const emParse = getParsed(emKern)[0];
  1106 |         const exParse = getParsed(exKern)[0];
> 1107 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1108 |         const abParse = getParsed(abKern)[1];
  1109 |
  1110 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1108, 'column': 24, 'index': 35218}","  1106 |         const exParse = getParsed(exKern)[0];
  1107 |         const muParse = getParsed(muKern)[0];
> 1108 |         const abParse = getParsed(abKern)[1];
       |                        ^ Eager Test
  1109 |
  1110 |         expect(emParse.dimension.unit).toEqual(""em"");
  1111 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1143, 'column': 24, 'index': 36363}","  1141 |
  1142 |     it(""should list the correct units"", function() {
> 1143 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1144 |         const exParse = getParsed(exKern)[0];
  1145 |         const muParse = getParsed(muKern)[0];
  1146 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1144, 'column': 24, 'index': 36409}","  1142 |     it(""should list the correct units"", function() {
  1143 |         const emParse = getParsed(emKern)[0];
> 1144 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1145 |         const muParse = getParsed(muKern)[0];
  1146 |         const abParse1 = getParsed(abKern1)[1];
  1147 |         const abParse2 = getParsed(abKern2)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1145, 'column': 24, 'index': 36455}","  1143 |         const emParse = getParsed(emKern)[0];
  1144 |         const exParse = getParsed(exKern)[0];
> 1145 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1146 |         const abParse1 = getParsed(abKern1)[1];
  1147 |         const abParse2 = getParsed(abKern2)[1];
  1148 |         const abParse3 = getParsed(abKern3)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1146, 'column': 25, 'index': 36502}","  1144 |         const exParse = getParsed(exKern)[0];
  1145 |         const muParse = getParsed(muKern)[0];
> 1146 |         const abParse1 = getParsed(abKern1)[1];
       |                         ^ Eager Test
  1147 |         const abParse2 = getParsed(abKern2)[1];
  1148 |         const abParse3 = getParsed(abKern3)[1];
  1149 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1147, 'column': 25, 'index': 36550}","  1145 |         const muParse = getParsed(muKern)[0];
  1146 |         const abParse1 = getParsed(abKern1)[1];
> 1147 |         const abParse2 = getParsed(abKern2)[1];
       |                         ^ Eager Test
  1148 |         const abParse3 = getParsed(abKern3)[1];
  1149 |
  1150 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1148, 'column': 25, 'index': 36598}","  1146 |         const abParse1 = getParsed(abKern1)[1];
  1147 |         const abParse2 = getParsed(abKern2)[1];
> 1148 |         const abParse3 = getParsed(abKern3)[1];
       |                         ^ Eager Test
  1149 |
  1150 |         expect(emParse.dimension.unit).toEqual(""em"");
  1151 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1159, 'column': 25, 'index': 37053}","  1157 |
  1158 |     it(""should parse elements on either side of a kern"", function() {
> 1159 |         const abParse1 = getParsed(abKern1);
       |                         ^ Eager Test
  1160 |         const abParse2 = getParsed(abKern2);
  1161 |         const abParse3 = getParsed(abKern3);
  1162 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1160, 'column': 25, 'index': 37098}","  1158 |     it(""should parse elements on either side of a kern"", function() {
  1159 |         const abParse1 = getParsed(abKern1);
> 1160 |         const abParse2 = getParsed(abKern2);
       |                         ^ Eager Test
  1161 |         const abParse3 = getParsed(abKern3);
  1162 |
  1163 |         expect(abParse1).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1161, 'column': 25, 'index': 37143}","  1159 |         const abParse1 = getParsed(abKern1);
  1160 |         const abParse2 = getParsed(abKern2);
> 1161 |         const abParse3 = getParsed(abKern3);
       |                         ^ Eager Test
  1162 |
  1163 |         expect(abParse1).toHaveLength(3);
  1164 |         expect(abParse1[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2084, 'column': 19, 'index': 74234}","  2082 |     it(""should render a combination of font and color changes"", function() {
  2083 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2084 |         let tree = getParsed(tex);
       |                   ^ Eager Test
  2085 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2086 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2087 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2093, 'column': 15, 'index': 74603}","  2091 |         // reverse the order of the commands
  2092 |         tex = r`\mathbb{\textcolor{blue}{R}}`;
> 2093 |         tree = getParsed(tex);
       |               ^ Eager Test
  2094 |         markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2095 |         node = ""<mstyle mathcolor=\""blue\"">"" +
  2096 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3001, 'column': 24, 'index': 108458}","  2999 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  3000 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 3001 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3002 |         expect(parsed1.href).toBe(url);
  3003 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3004 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3003, 'column': 24, 'index': 108578}","  3001 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  3002 |         expect(parsed1.href).toBe(url);
> 3003 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3004 |         expect(parsed2.href).toBe(url);
  3005 |     });
  3006 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3009, 'column': 24, 'index': 108808}","  3007 |     it(""should allow balanced braces in url"", function() {
  3008 |         const url = ""http://example.org/{{}t{oo}}"";
> 3009 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3010 |         expect(parsed1.href).toBe(url);
  3011 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3012 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3011, 'column': 24, 'index': 108928}","  3009 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  3010 |         expect(parsed1.href).toBe(url);
> 3011 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3012 |         expect(parsed2.href).toBe(url);
  3013 |     });
  3014 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3025, 'column': 24, 'index': 109582}","  3023 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3024 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3025 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3026 |         expect(parsed1.href).toBe(url);
  3027 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3028 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3027, 'column': 24, 'index': 109704}","  3025 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
  3026 |         expect(parsed1.href).toBe(url);
> 3027 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
       |                        ^ Eager Test
  3028 |         expect(parsed2.href).toBe(url);
  3029 |     });
  3030 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2182, 'column': 12, 'index': 78045}","  2180 |     it(""should throw Error when HTML attribute name is invalid"", function() {
  2181 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
> 2182 |             try {
       |            ^ Exception Handling
  2183 |                 katex.renderToString(
  2184 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);
  2185 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2747, 'column': 8, 'index': 97676}","  2745 | describe(""A parser error"", function() {
  2746 |     it(""should report the position of an error"", function() {
> 2747 |         try {
       |        ^ Exception Handling
  2748 |             parseTree(r`\sqrt}`, new Settings());
  2749 |         } catch (e) {
  2750 |             expect(e.position).toEqual(5);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3166, 'column': 8, 'index': 115141}","  3164 | describe(""ParseError properties"", function() {
  3165 |     it(""should contain affected position and length information"", function() {
> 3166 |         try {
       |        ^ Exception Handling
  3167 |             katex.renderToString(""1 + \\fraq{}{}"");
  3168 |
  3169 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3181, 'column': 8, 'index': 115804}","  3179 |
  3180 |     it(""should contain position and length information at end of input"", function() {
> 3181 |         try {
       |        ^ Exception Handling
  3182 |             katex.renderToString(""\\frac{}"");
  3183 |
  3184 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3196, 'column': 8, 'index': 116500}","  3194 |
  3195 |     it(""should contain no position and length information if unavailable"", function() {
> 3196 |         try {
       |        ^ Exception Handling
  3197 |             katex.renderToString(""\\verb|hello\nworld|"");
  3198 |
  3199 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 44, 'column': 22, 'index': 1225}","  42 |
  43 |     it(""should build a list of ords"", function() {
> 44 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  45 |
  46 |         for (let i = 0; i < parse.length; i++) {
  47 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 53, 'column': 22, 'index': 1491}","  51 |
  52 |     it(""should parse each character as a separate ord"", function() {
> 53 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  54 |         const expectedLength = expression.length;
  55 |         
  56 |         // Verify total length matches input",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 76, 'column': 22, 'index': 2193}","  74 |
  75 |     it(""should build a list of bins"", function() {
> 76 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  77 |
  78 |         for (let i = 0; i < parse.length; i++) {
  79 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 96, 'column': 22, 'index': 2788}","  94 |
  95 |     it(""should build a list of rels"", function() {
> 96 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  97 |
  98 |         for (let i = 0; i < parse.length; i++) {
  99 |             let group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 122, 'column': 32, 'index': 3689}","  120 |     it(""should return one group, not a fragment"", function() {
  121 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
> 122 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
      |                                ^ Lazy Test
  123 |         expect(mml.children.length).toEqual(1);
  124 |     });
  125 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 135, 'column': 22, 'index': 4043}","  133 |
  134 |     it(""should build a list of puncts"", function() {
> 135 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  136 |
  137 |         for (let i = 0; i < parse.length; i++) {
  138 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 153, 'column': 22, 'index': 4504}","  151 |
  152 |     it(""should build a list of opens"", function() {
> 153 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  154 |
  155 |         for (let i = 0; i < parse.length; i++) {
  156 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 171, 'column': 22, 'index': 4967}","  169 |
  170 |     it(""should build a list of closes"", function() {
> 171 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  172 |
  173 |         for (let i = 0; i < parse.length; i++) {
  174 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 502, 'column': 22, 'index': 14792}","  500 |
  501 |     it(""should produce a frac"", function() {
> 502 |         const parse = getParsed(expression)[0];
      |                      ^ Lazy Test
  503 |
  504 |         expect(parse.type).toEqual(""genfrac"");
  505 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 518, 'column': 27, 'index': 15350}","  516 |
  517 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 518 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Lazy Test
  519 |
  520 |         expect(dfracParse.type).toEqual(""genfrac"");
  521 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 581, 'column': 16, 'index': 17430}","  579 |         let parse;
  580 |
> 581 |         parse = getParsed(simpleOver)[0];
      |                ^ Lazy Test
  582 |
  583 |         expect(parse.type).toEqual(""genfrac"");
  584 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 611, 'column': 22, 'index': 18539}","  609 |
  610 |     it(""should create a numerator from the atoms before \\over"", function() {
> 611 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  612 |
  613 |         const numer = parse.numer;
  614 |         expect(numer.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 618, 'column': 22, 'index': 18756}","  616 |
  617 |     it(""should create a denominator from the atoms after \\over"", function() {
> 618 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  619 |
  620 |         const denom = parse.denom;
  621 |         expect(denom.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 626, 'column': 22, 'index': 18991}","  624 |     it(""should handle empty numerators"", function() {
  625 |         const emptyNumerator = r`\over x`;
> 626 |         const parse = getParsed(emptyNumerator)[0];
      |                      ^ Lazy Test
  627 |         expect(parse.type).toEqual(""genfrac"");
  628 |         expect(parse.numer).toBeDefined();
  629 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 634, 'column': 22, 'index': 19286}","  632 |     it(""should handle empty denominators"", function() {
  633 |         const emptyDenominator = r`1 \over`;
> 634 |         const parse = getParsed(emptyDenominator)[0];
      |                      ^ Lazy Test
  635 |         expect(parse.type).toEqual(""genfrac"");
  636 |         expect(parse.numer).toBeDefined();
  637 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 642, 'column': 22, 'index': 19611}","  640 |     it(""should handle \\displaystyle correctly"", function() {
  641 |         const displaystyleExpression = r`\displaystyle 1 \over 2`;
> 642 |         const parse = getParsed(displaystyleExpression)[0];
      |                      ^ Lazy Test
  643 |         expect(parse.type).toEqual(""genfrac"");
  644 |         expect(parse.numer.body[0].type).toEqual(""styling"");
  645 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 655, 'column': 22, 'index': 20163}","  653 |     it(""should handle nested factions"", function() {
  654 |         const nestedOverExpression = r`{1 \over 2} \over 3`;
> 655 |         const parse = getParsed(nestedOverExpression)[0];
      |                      ^ Lazy Test
  656 |         expect(parse.type).toEqual(""genfrac"");
  657 |         expect(parse.numer.body[0].type).toEqual(""genfrac"");
  658 |         expect(parse.numer.body[0].numer.body[0].text).toEqual(""1"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 704, 'column': 22, 'index': 21873}","  702 |
  703 |     it(""should produce a sizing node"", function() {
> 704 |         const parse = getParsed(sizeExpression)[0];
      |                      ^ Lazy Test
  705 |
  706 |         expect(parse.type).toEqual(""sizing"");
  707 |         expect(parse.size).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 728, 'column': 22, 'index': 22682}","  726 |
  727 |     it(""should produce a text"", function() {
> 728 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  729 |
  730 |         expect(parse.type).toEqual(""text"");
  731 |         expect(parse.body).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 735, 'column': 22, 'index': 22897}","  733 |
  734 |     it(""should produce textords instead of mathords"", function() {
> 735 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  736 |         const group = parse.body;
  737 |
  738 |         expect(group[0].type).toEqual(""textord"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 758, 'column': 22, 'index': 23560}","  756 |
  757 |     it(""should contract spaces"", function() {
> 758 |         const parse = getParsed(spaceTextExpression)[0];
      |                      ^ Lazy Test
  759 |         const group = parse.body;
  760 |
  761 |         expect(group.length).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 777, 'column': 22, 'index': 24236}","  775 |
  776 |     it(""should ignore a space before the text group"", function() {
> 777 |         const parse = getParsed(leadingSpaceTextExpression)[0];
      |                      ^ Lazy Test
  778 |         // [m, o, o]
  779 |         expect(parse.body).toHaveLength(3);
  780 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 864, 'column': 22, 'index': 27623}","  862 |
  863 |     it(""should build a color node"", function() {
> 864 |         const parse = getParsed(colorExpression)[0];
      |                      ^ Lazy Test
  865 |
  866 |         expect(parse.type).toEqual(""color"");
  867 |         expect(parse.color).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 878, 'column': 23, 'index': 28092}","  876 |
  877 |     it(""should correctly extract the custom color"", function() {
> 878 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Lazy Test
  879 |         const parse2 = getParsed(customColorExpression2)[0];
  880 |         const parse3 = getParsed(customColorExpression3)[0];
  881 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 937, 'column': 22, 'index': 30018}","  935 |
  936 |     it(""should produce spacing in math mode"", function() {
> 937 |         const parse = getParsed(mathTie);
      |                      ^ Lazy Test
  938 |
  939 |         expect(parse[1].type).toEqual(""spacing"");
  940 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 943, 'column': 21, 'index': 30178}","  941 |
  942 |     it(""should produce spacing in text mode"", function() {
> 943 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  944 |         const parse = text.body;
  945 |
  946 |         expect(parse[1].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 950, 'column': 21, 'index': 30383}","  948 |
  949 |     it(""should not contract with spaces in text mode"", function() {
> 950 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  951 |         const parse = text.body;
  952 |
  953 |         expect(parse[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 972, 'column': 22, 'index': 30980}","  970 |
  971 |     it(""should produce a delimsizing"", function() {
> 972 |         const parse = getParsed(normalDelim)[0];
      |                      ^ Lazy Test
  973 |
  974 |         expect(parse.type).toEqual(""delimsizing"");
  975 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 978, 'column': 26, 'index': 31164}","  976 |
  977 |     it(""should produce the correct direction delimiter"", function() {
> 978 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Lazy Test
  979 |         const rightParse = getParsed(bigDelim)[0];
  980 |
  981 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 986, 'column': 27, 'index': 31446}","  984 |
  985 |     it(""should parse the correct size delimiter"", function() {
> 986 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Lazy Test
  987 |         const bigParse = getParsed(bigDelim)[0];
  988 |
  989 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1002, 'column': 22, 'index': 31861}","  1000 |
  1001 |     it(""should produce an overline"", function() {
> 1002 |         const parse = getParsed(overline)[0];
       |                      ^ Lazy Test
  1003 |
  1004 |         expect(parse.type).toEqual(""overline"");
  1005 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1061, 'column': 22, 'index': 33711}","  1059 |
  1060 |     it(""should produce a rule"", function() {
> 1061 |         const parse = getParsed(emRule)[0];
       |                      ^ Lazy Test
  1062 |
  1063 |         expect(parse.type).toEqual(""rule"");
  1064 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1067, 'column': 24, 'index': 33864}","  1065 |
  1066 |     it(""should list the correct units"", function() {
> 1067 |         const emParse = getParsed(emRule)[0];
       |                        ^ Lazy Test
  1068 |         const exParse = getParsed(exRule)[0];
  1069 |
  1070 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1078, 'column': 32, 'index': 34234}","  1076 |
  1077 |     it(""should parse the number correctly"", function() {
> 1078 |         const hardNumberParse = getParsed(hardNumberRule)[0];
       |                                ^ Lazy Test
  1079 |
  1080 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
  1081 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1105, 'column': 24, 'index': 35080}","  1103 |
  1104 |     it(""should list the correct units"", function() {
> 1105 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1106 |         const exParse = getParsed(exKern)[0];
  1107 |         const muParse = getParsed(muKern)[0];
  1108 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1143, 'column': 24, 'index': 36363}","  1141 |
  1142 |     it(""should list the correct units"", function() {
> 1143 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1144 |         const exParse = getParsed(exKern)[0];
  1145 |         const muParse = getParsed(muKern)[0];
  1146 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1159, 'column': 25, 'index': 37053}","  1157 |
  1158 |     it(""should parse elements on either side of a kern"", function() {
> 1159 |         const abParse1 = getParsed(abKern1);
       |                         ^ Lazy Test
  1160 |         const abParse2 = getParsed(abKern2);
  1161 |         const abParse3 = getParsed(abKern3);
  1162 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1190, 'column': 24, 'index': 38128}","  1188 |
  1189 |     it(""should handle whitespace"", function() {
> 1190 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
       |                        ^ Lazy Test
  1191 |
  1192 |         expect(abParse).toHaveLength(3);
  1193 |         expect(abParse[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1208, 'column': 22, 'index': 38695}","  1206 |
  1207 |     it(""should produce a leftright"", function() {
> 1208 |         const parse = getParsed(normalLeftRight)[0];
       |                      ^ Lazy Test
  1209 |
  1210 |         expect(parse.type).toEqual(""leftright"");
  1211 |         expect(parse.left).toEqual(""("");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1385, 'column': 22, 'index': 45060}","  1383 |
  1384 |     it(""should produce sqrts"", function() {
> 1385 |         const parse = getParsed(sqrt)[0];
       |                      ^ Lazy Test
  1386 |
  1387 |         expect(parse.type).toEqual(""sqrt"");
  1388 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1584, 'column': 22, 'index': 51480}","  1582 |     it(""should only change the style within its group"", function() {
  1583 |         const text = r`a b { c d \displaystyle e f } g h`;
> 1584 |         const parse = getParsed(text);
       |                      ^ Lazy Test
  1585 |
  1586 |         const displayNode = parse[2].body[2];
  1587 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2084, 'column': 19, 'index': 74234}","  2082 |     it(""should render a combination of font and color changes"", function() {
  2083 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2084 |         let tree = getParsed(tex);
       |                   ^ Lazy Test
  2085 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2086 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2087 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2103, 'column': 21, 'index': 74975}","  2101 |     it(""should render text as <mtext>"", function() {
  2102 |         const tex = r`\text{for }`;
> 2103 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2104 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2105 |         expect(markup).toContain(""<mtext>for\u00a0</mtext>"");
  2106 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2110, 'column': 21, 'index': 75287}","  2108 |     it(""should render math within text as side-by-side children"", function() {
  2109 |         const tex = r`\text{graph: $y = mx + b$}`;
> 2110 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2111 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2112 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
  2113 |         expect(markup).toContain(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2125, 'column': 15, 'index': 75947}","  2123 |
  2124 |     it(""should produce mords"", function() {
> 2125 |         expect(getBuilt(img, trustSettings)[0].classes).toContain(""mord"");
       |               ^ Lazy Test
  2126 |     });
  2127 |
  2128 |     it(""should not render without trust setting"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2129, 'column': 22, 'index': 76101}","  2127 |
  2128 |     it(""should not render without trust setting"", function() {
> 2129 |         const built = getBuilt(img);
       |                      ^ Lazy Test
  2130 |         expect(built).toMatchSnapshot();
  2131 |     });
  2132 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2134, 'column': 22, 'index': 76244}","  2132 |
  2133 |     it(""should render with trust setting"", function() {
> 2134 |         const built = getBuilt(img, trustSettings);
       |                      ^ Lazy Test
  2135 |         expect(built).toMatchSnapshot();
  2136 |     });
  2137 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2160, 'column': 22, 'index': 77190}","  2158 |
  2159 |     it(""should set HTML attributes"", function() {
> 2160 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2161 |         expect(built[0].attributes.id).toMatch(""bar"");
  2162 |         expect(built[1].classes).toContain(""foo"");
  2163 |         expect(built[2].attributes.style).toMatch(""color: red"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2171, 'column': 22, 'index': 77597}","  2169 |
  2170 |     it(""should not affect spacing"", function() {
> 2171 |         const built = getBuilt(""\\htmlId{a}{x+}y"", trustNonStrictSettings);
       |                      ^ Lazy Test
  2172 |         expect(built).toMatchSnapshot();
  2173 |     });
  2174 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2176, 'column': 22, 'index': 77790}","  2174 |
  2175 |     it(""should render with trust and strict setting"", function() {
> 2176 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2177 |         expect(built).toMatchSnapshot();
  2178 |     });
  2179 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2351, 'column': 21, 'index': 84292}","  2349 |     it(""should properly render stretchy accents"", function() {
  2350 |         const tex = `\\widetilde{ABCD}`;
> 2351 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2352 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2353 |         expect(markup).toContain('<mo stretchy=""true"">~</mo>');
  2354 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3001, 'column': 24, 'index': 108458}","  2999 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  3000 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 3001 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3002 |         expect(parsed1.href).toBe(url);
  3003 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3004 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3009, 'column': 24, 'index': 108808}","  3007 |     it(""should allow balanced braces in url"", function() {
  3008 |         const url = ""http://example.org/{{}t{oo}}"";
> 3009 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3010 |         expect(parsed1.href).toBe(url);
  3011 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3012 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3025, 'column': 24, 'index': 109582}","  3023 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3024 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3025 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3026 |         expect(parsed1.href).toBe(url);
  3027 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3028 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3041, 'column': 22, 'index': 110247}","  3039 |
  3040 |     it(""should not affect spacing around"", function() {
> 3041 |         const built = getBuilt(""a\\href{http://example.com/}{+b}"", trustSettings);
       |                      ^ Lazy Test
  3042 |         expect(built).toMatchSnapshot();
  3043 |     });
  3044 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3051, 'column': 23, 'index': 110621}","  3049 |
  3050 |     it(""should allow explicitly allowed protocols"", () => {
> 3051 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3052 |             ""\\href{ftp://x}{foo}"",
  3053 |             new Settings({trust: (context) => context.protocol === ""ftp""}),
  3054 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3059, 'column': 23, 'index': 110900}","  3057 |
  3058 |     it(""should allow all protocols when trust option is true"", () => {
> 3059 |         const parsed = getParsed(""\\href{ftp://x}{foo}"", trustSettings);
       |                       ^ Lazy Test
  3060 |         expect(parsed).toMatchSnapshot();
  3061 |     });
  3062 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3064, 'column': 23, 'index': 111091}","  3062 |
  3063 |     it(""should not allow explicitly disallowed protocols"", () => {
> 3064 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3065 |             ""\\href{javascript:alert('x')}{foo}"",
  3066 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3067 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3072, 'column': 23, 'index': 111396}","  3070 |
  3071 |     it(""should not allow explicitly uppercased disallowed protocols"", () => {
> 3072 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3073 |             ""\\href{JavaScript:alert('x')}{foo}"",
  3074 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3075 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3148, 'column': 28, 'index': 114477}","  3146 |
  3147 |     it(""should produce color nodes with a color value given by errorColor"", function() {
> 3148 |         const parsedInput = getParsed(r`\error`, noThrowSettings);
       |                            ^ Lazy Test
  3149 |         expect(parsedInput[0].type).toBe(""color"");
  3150 |         expect(parsedInput[0].color).toBe(errorColor);
  3151 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3154, 'column': 22, 'index': 114736}","  3152 |
  3153 |     it(""should build katex-error span for other type of KaTeX error"", function() {
> 3154 |         const built = getBuilt(`2^2^2`, noThrowSettings);
       |                      ^ Lazy Test
  3155 |         expect(built).toMatchSnapshot();
  3156 |     });
  3157 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3489, 'column': 27, 'index': 127494}","  3487 |         const parsedBare = getParsed`~`;
  3488 |         expect(parsedBare[0].type).toEqual(""spacing"");
> 3489 |         const parsedChar = getParsed(""\\char`\\~"");
       |                           ^ Lazy Test
  3490 |         expect(parsedChar[0].type).toEqual(""textord"");
  3491 |     });
  3492 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4061, 'column': 22, 'index': 151455}","  4059 |
  4060 |     it(""should clamp size when set"", function() {
> 4061 |         const built = getBuilt(rule, new Settings({maxSize: 5}))[0];
       |                      ^ Lazy Test
  4062 |         expect(built.style.borderRightWidth).toEqual(""5em"");
  4063 |         expect(built.style.borderTopWidth).toEqual(""5em"");
  4064 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4067, 'column': 22, 'index': 151711}","  4065 |
  4066 |     it(""should not clamp size when not set"", function() {
> 4067 |         const built = getBuilt(rule)[0];
       |                      ^ Lazy Test
  4068 |         expect(built.style.borderRightWidth).toEqual(""999em"");
  4069 |         expect(built.style.borderTopWidth).toEqual(""999em"");
  4070 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4073, 'column': 22, 'index': 151969}","  4071 |
  4072 |     it(""should make zero-width rules if a negative maxSize is passed"", function() {
> 4073 |         const built = getBuilt(rule, new Settings({maxSize: -5}))[0];
       |                      ^ Lazy Test
  4074 |         expect(built.style.borderRightWidth).toEqual(""0em"");
  4075 |         expect(built.style.borderTopWidth).toEqual(""0em"");
  4076 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 101, 'column': 48, 'index': 2990}","   99 |             let group = parse[i];
  100 |             if (group.type === ""htmlmathml"") {
> 101 |                 expect(group.html).toHaveLength(1);
      |                                                ^ Magic Number
  102 |                 group = group.html[0];
  103 |             }
  104 |             if (group.type === ""mclass"") {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 123, 'column': 44, 'index': 3781}","  121 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
  122 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
> 123 |         expect(mml.children.length).toEqual(1);
      |                                            ^ Magic Number
  124 |     });
  125 | });
  126 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 355, 'column': 35, 'index': 10451}","  353 |         const parse = getParsed`{xy}`;
  354 |
> 355 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  356 |
  357 |         const ord = parse[0];
  358 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 377, 'column': 35, 'index': 11053}","  375 |         const parse = getParsed`\begingroup xy \endgroup`;
  376 |
> 377 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  378 |
  379 |         const ord = parse[0];
  380 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 400, 'column': 35, 'index': 11680}","  398 |         const parse = getParsed`\Large abc`;
  399 |
> 400 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  401 |
  402 |         const sizing = parse[0];
  403 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 412, 'column': 35, 'index': 12003}","  410 |         const parse = getParsed`a \Large abc`;
  411 |
> 412 |         expect(parse).toHaveLength(2);
      |                                   ^ Magic Number
  413 |
  414 |         const sizing = parse[1];
  415 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 417, 'column': 41, 'index': 12130}","  415 |
  416 |         expect(sizing.type).toEqual(""sizing"");
> 417 |         expect(sizing.body).toHaveLength(3);
      |                                         ^ Magic Number
  418 |     });
  419 |
  420 |     it(""should stop at the ends of groups"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 427, 'column': 41, 'index': 12413}","  425 |
  426 |         expect(sizing.type).toEqual(""sizing"");
> 427 |         expect(sizing.body).toHaveLength(1);
      |                                         ^ Magic Number
  428 |     });
  429 |
  430 |     describe(""within optional groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 614, 'column': 40, 'index': 18642}","  612 |
  613 |         const numer = parse.numer;
> 614 |         expect(numer.body).toHaveLength(4);
      |                                        ^ Magic Number
  615 |     });
  616 |
  617 |     it(""should create a denominator from the atoms after \\over"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 621, 'column': 40, 'index': 18859}","  619 |
  620 |         const denom = parse.denom;
> 621 |         expect(denom.body).toHaveLength(4);
      |                                        ^ Magic Number
  622 |     });
  623 |
  624 |     it(""should handle empty numerators"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 761, 'column': 37, 'index': 23667}","  759 |         const group = parse.body;
  760 |
> 761 |         expect(group.length).toEqual(4);
      |                                     ^ Magic Number
  762 |         expect(group[0].type).toEqual(""spacing"");
  763 |         expect(group[1].type).toEqual(""textord"");
  764 |         expect(group[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 779, 'column': 40, 'index': 24339}","  777 |         const parse = getParsed(leadingSpaceTextExpression)[0];
  778 |         // [m, o, o]
> 779 |         expect(parse.body).toHaveLength(3);
      |                                        ^ Magic Number
  780 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");
  781 |     });
  782 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 989, 'column': 40, 'index': 31563}","  987 |         const bigParse = getParsed(bigDelim)[0];
  988 |
> 989 |         expect(smallParse.size).toEqual(1);
      |                                        ^ Magic Number
  990 |         expect(bigParse.size).toEqual(4);
  991 |     });
  992 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 990, 'column': 38, 'index': 31605}","  988 |
  989 |         expect(smallParse.size).toEqual(1);
> 990 |         expect(bigParse.size).toEqual(4);
      |                                      ^ Magic Number
  991 |     });
  992 | });
  993 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1080, 'column': 57, 'index': 34322}","  1078 |         const hardNumberParse = getParsed(hardNumberRule)[0];
  1079 |
> 1080 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
       |                                                         ^ Magic Number
  1081 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
  1082 |     });
  1083 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1081, 'column': 58, 'index': 34387}","  1079 |
  1080 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
> 1081 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
       |                                                          ^ Magic Number
  1082 |     });
  1083 |
  1084 |     it(""should parse negative sizes"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1128, 'column': 51, 'index': 35932}","  1126 |     it(""should parse positive sizes"", function() {
  1127 |         const parse = getParsed`\kern{+1em}`[0];
> 1128 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1129 |     });
  1130 | });
  1131 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1163, 'column': 38, 'index': 37202}","  1161 |         const abParse3 = getParsed(abKern3);
  1162 |
> 1163 |         expect(abParse1).toHaveLength(3);
       |                                      ^ Magic Number
  1164 |         expect(abParse1[0].text).toEqual(""a"");
  1165 |         expect(abParse1[2].text).toEqual(""b"");
  1166 |         expect(abParse2).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1166, 'column': 38, 'index': 37338}","  1164 |         expect(abParse1[0].text).toEqual(""a"");
  1165 |         expect(abParse1[2].text).toEqual(""b"");
> 1166 |         expect(abParse2).toHaveLength(3);
       |                                      ^ Magic Number
  1167 |         expect(abParse2[0].text).toEqual(""a"");
  1168 |         expect(abParse2[2].text).toEqual(""b"");
  1169 |         expect(abParse3).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1169, 'column': 38, 'index': 37474}","  1167 |         expect(abParse2[0].text).toEqual(""a"");
  1168 |         expect(abParse2[2].text).toEqual(""b"");
> 1169 |         expect(abParse3).toHaveLength(3);
       |                                      ^ Magic Number
  1170 |         expect(abParse3[0].text).toEqual(""a"");
  1171 |         expect(abParse3[2].text).toEqual(""b"");
  1172 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1186, 'column': 51, 'index': 38043}","  1184 |     it(""should parse positive sizes"", function() {
  1185 |         const parse = getParsed`\kern+1em`[0];
> 1186 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1187 |     });
  1188 |
  1189 |     it(""should handle whitespace"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1192, 'column': 37, 'index': 38205}","  1190 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
  1191 |
> 1192 |         expect(abParse).toHaveLength(3);
       |                                     ^ Magic Number
  1193 |         expect(abParse[0].text).toEqual(""a"");
  1194 |         expect(abParse[1].dimension.unit).toEqual(""mu"");
  1195 |         expect(abParse[2].text).toEqual(""b"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1345, 'column': 37, 'index': 43501}","  1343 |     it(""should eat a final newline"", function() {
  1344 |         const m3 = getParsed`\begin{matrix}a&b\\ c&d \\ \end{matrix}`[0];
> 1345 |         expect(m3.body).toHaveLength(2);
       |                                     ^ Magic Number
  1346 |     });
  1347 |
  1348 |     it(""should grab \\arraystretch"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1592, 'column': 41, 'index': 51687}","  1590 |         const displayBody = displayNode.body;
  1591 |
> 1592 |         expect(displayBody).toHaveLength(2);
       |                                         ^ Magic Number
  1593 |         expect(displayBody[0].text).toEqual(""e"");
  1594 |     });
  1595 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1646, 'column': 36, 'index': 53722}","  1644 |
  1645 |         const bbBody = nestedParse.body.body;
> 1646 |         expect(bbBody).toHaveLength(3);
       |                                    ^ Magic Number
  1647 |         expect(bbBody[0].type).toEqual(""mathord"");
  1648 |         expect(bbBody[2].type).toEqual(""font"");
  1649 |         expect(bbBody[2].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1658, 'column': 34, 'index': 54250}","  1656 |         expect(colorMathbbParse.color).toEqual(""blue"");
  1657 |         const body = colorMathbbParse.body;
> 1658 |         expect(body).toHaveLength(1);
       |                                  ^ Magic Number
  1659 |         expect(body[0].type).toEqual(""font"");
  1660 |         expect(body[0].font).toEqual(""mathbb"");
  1661 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1671, 'column': 42, 'index': 54714}","  1669 |         expect(bf.type).toEqual(""font"");
  1670 |         expect(bf.font).toEqual(""mathbf"");
> 1671 |         expect(bf.body.body).toHaveLength(3);
       |                                          ^ Magic Number
  1672 |         expect(bf.body.body[0].text).toEqual(""a"");
  1673 |         expect(bf.body.body[1].type).toEqual(""font"");
  1674 |         expect(bf.body.body[1].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2244, 'column': 45, 'index': 80575}","  2242 |         // Just a few quick sanity checks here...
  2243 |         const markup = katex.renderToString(r`\sigma^2`);
> 2244 |         expect(markup.indexOf(""<span"")).toBe(0);
       |                                             ^ Magic Number
  2245 |         expect(markup).toContain(""\u03c3"");  // sigma
  2246 |         expect(markup).toContain(""margin-right"");
  2247 |         expect(markup).not.toContain(""marginRight"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2750, 'column': 39, 'index': 97793}","  2748 |             parseTree(r`\sqrt}`, new Settings());
  2749 |         } catch (e) {
> 2750 |             expect(e.position).toEqual(5);
       |                                       ^ Magic Number
  2751 |         }
  2752 |     });
  2753 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2884, 'column': 37, 'index': 102088}","  2882 |     it(""should not eat the last row when its first cell is empty"", function() {
  2883 |         const ae = getParsed`\begin{aligned}&E_1 & (1)\\&E_2 & (2)\\&E_3 & (3)\end{aligned}`[0];
> 2884 |         expect(ae.body).toHaveLength(3);
       |                                     ^ Magic Number
  2885 |     });
  2886 | });
  2887 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3175, 'column': 40, 'index': 115645}","  3173 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");
  3174 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
> 3175 |             expect(error.position).toBe(4);
       |                                        ^ Magic Number
  3176 |             expect(error.length).toBe(5);
  3177 |         }
  3178 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3176, 'column': 38, 'index': 115687}","  3174 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
  3175 |             expect(error.position).toBe(4);
> 3176 |             expect(error.length).toBe(5);
       |                                      ^ Magic Number
  3177 |         }
  3178 |     });
  3179 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3190, 'column': 40, 'index': 116339}","  3188 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");
  3189 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
> 3190 |             expect(error.position).toBe(7);
       |                                        ^ Magic Number
  3191 |             expect(error.length).toBe(0);
  3192 |         }
  3193 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3191, 'column': 38, 'index': 116381}","  3189 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
  3190 |             expect(error.position).toBe(7);
> 3191 |             expect(error.length).toBe(0);
       |                                      ^ Magic Number
  3192 |         }
  3193 |     });
  3194 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 769}","  767 |
  768 |     it(""should handle backslash followed by newline"", () => {
> 769 |         expect(""\\text{\\ \t\r \n \t\r  }"").toParseLike`\text{\ }`;
      |        ^ Redundant Assertion
  770 |     });
  771 |
  772 |     it(""should accept math mode tokens after its argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1740}","  1738 | describe(""A comment parser"", function() {
  1739 |     it(""should parse comments at the end of a line"", () => {
> 1740 |         expect(""a^2 + b^2 = c^2 % Pythagoras' Theorem\n"").toParse();
       |        ^ Redundant Assertion
  1741 |     });
  1742 |
  1743 |     it(""should parse comments at the start of a line"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1744}","  1742 |
  1743 |     it(""should parse comments at the start of a line"", () => {
> 1744 |         expect(""% comment\n"").toParse();
       |        ^ Redundant Assertion
  1745 |     });
  1746 |
  1747 |     it(""should parse multiple lines of comments in a row"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1748}","  1746 |
  1747 |     it(""should parse multiple lines of comments in a row"", () => {
> 1748 |         expect(""% comment 1\n% comment 2\n"").toParse();
       |        ^ Redundant Assertion
  1749 |     });
  1750 |
  1751 |     it(""should parse comments between subscript and superscript"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1752}","  1750 |
  1751 |     it(""should parse comments between subscript and superscript"", () => {
> 1752 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
       |        ^ Redundant Assertion
  1753 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
  1754 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1755 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1753}","  1751 |     it(""should parse comments between subscript and superscript"", () => {
  1752 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
> 1753 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
       |        ^ Redundant Assertion
  1754 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1755 |     });
  1756 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1754}","  1752 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
  1753 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
> 1754 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
       |        ^ Redundant Assertion
  1755 |     });
  1756 |
  1757 |     it(""should parse comments in size and color groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1758}","  1756 |
  1757 |     it(""should parse comments in size and color groups"", () => {
> 1758 |         expect(""\\kern{1 %kern\nem}"").toParse();
       |        ^ Redundant Assertion
  1759 |         expect(""\\kern1 %kern\nem"").toParse();
  1760 |         expect(""\\color{#f00%red\n}"").toParse();
  1761 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1759}","  1757 |     it(""should parse comments in size and color groups"", () => {
  1758 |         expect(""\\kern{1 %kern\nem}"").toParse();
> 1759 |         expect(""\\kern1 %kern\nem"").toParse();
       |        ^ Redundant Assertion
  1760 |         expect(""\\color{#f00%red\n}"").toParse();
  1761 |     });
  1762 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1760}","  1758 |         expect(""\\kern{1 %kern\nem}"").toParse();
  1759 |         expect(""\\kern1 %kern\nem"").toParse();
> 1760 |         expect(""\\color{#f00%red\n}"").toParse();
       |        ^ Redundant Assertion
  1761 |     });
  1762 |
  1763 |     it(""should parse comments before an expression"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1764}","  1762 |
  1763 |     it(""should parse comments before an expression"", () => {
> 1764 |         expect(""%comment\n{2}"").toParseLike`{2}`;
       |        ^ Redundant Assertion
  1765 |     });
  1766 |
  1767 |     it(""should parse comments before and between \\hline"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1774}","  1772 |
  1773 |     it(""should parse comments in the macro definition"", () => {
> 1774 |         expect(""\\def\\foo{1 %}\n2}\n\\foo"").toParseLike`12`;
       |        ^ Redundant Assertion
  1775 |     });
  1776 |
  1777 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1778}","  1776 |
  1777 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {
> 1778 |         expect(""\\def\\foo{1\n2}\nx %\\foo\n"").toParseLike`x`;
       |        ^ Redundant Assertion
  1779 |     });
  1780 |
  1781 |     it(""should not parse a comment without newline in strict mode"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1787}","  1785 |
  1786 |     it(""should not produce or consume space"", () => {
> 1787 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
       |        ^ Redundant Assertion
  1788 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
  1789 |     });
  1790 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1788}","  1786 |     it(""should not produce or consume space"", () => {
  1787 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
> 1788 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
       |        ^ Redundant Assertion
  1789 |     });
  1790 |
  1791 |     it(""should not include comments in the output"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1792}","  1790 |
  1791 |     it(""should not include comments in the output"", () => {
> 1792 |         expect(""5 % comment\n"").toParseLike`5`;
       |        ^ Redundant Assertion
  1793 |     });
  1794 | });
  1795 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 16, 'line': 2187}","  2185 |
  2186 |                 // Render is expected to throw, so this should not be called.
> 2187 |                 expect(true).toBe(false);
       |                ^ Redundant Assertion
  2188 |             } catch (error) {
  2189 |                 expect(error).toBeInstanceOf(ParseError);
  2190 |                 const message =",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 2989}","  2987 |         expect`\href%end`.toParseLike(""\\href{%}end"", trustSettings);
  2988 |         expect`\url%end`.toParseLike(""\\url{%}end"", trustSettings);
> 2989 |         expect(""\\url%%end\n"").toParseLike(""\\url{%}"", trustSettings);
       |        ^ Redundant Assertion
  2990 |         expect`\url end`.toParseLike(""\\url{e}nd"", trustSettings);
  2991 |         expect`\url%end`.toParseLike(""\\url {%}end"", trustSettings);
  2992 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3032}","  3030 |
  3031 |     it(""should allow comments after URLs"", function() {
> 3032 |         expect(""\\url{http://example.com/}%comment\n"").toBuild();
       |        ^ Redundant Assertion
  3033 |     });
  3034 |
  3035 |     it(""should be marked up correctly"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3170}","  3168 |
  3169 |             // Render is expected to throw, so this should not be called.
> 3170 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3171 |         } catch (error) {
  3172 |             expect(error).toBeInstanceOf(ParseError);
  3173 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3185}","  3183 |
  3184 |             // Render is expected to throw, so this should not be called.
> 3185 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3186 |         } catch (error) {
  3187 |             expect(error).toBeInstanceOf(ParseError);
  3188 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3200}","  3198 |
  3199 |             // Render is expected to throw, so this should not be called.
> 3200 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3201 |         } catch (error) {
  3202 |             expect(error).toBeInstanceOf(ParseError);
  3203 |             expect(error.message).toBe(""KaTeX parse error: \\verb ended by end of line instead of matching delimiter"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3473}","  3471 |
  3472 |     it(""\\char produces literal characters"", () => {
> 3473 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
       |        ^ Redundant Assertion
  3474 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3475 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3476 |         expect(""\\char`\\%"").toParseLike`\char""25`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3474}","  3472 |     it(""\\char produces literal characters"", () => {
  3473 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3474 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Redundant Assertion
  3475 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3476 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3477 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3475}","  3473 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3474 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3475 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Redundant Assertion
  3476 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3477 |         expect`\char`.not.toParse();
  3478 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3476}","  3474 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3475 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3476 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Redundant Assertion
  3477 |         expect`\char`.not.toParse();
  3478 |         expect(""\\char`"").not.toParse();
  3479 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3478}","  3476 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3477 |         expect`\char`.not.toParse();
> 3478 |         expect(""\\char`"").not.toParse();
       |        ^ Redundant Assertion
  3479 |         expect`\char'`.not.toParse();
  3480 |         expect`\char""`.not.toParse();
  3481 |         expect`\char'a`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3942}","  3940 |
  3941 |     it(""should parse combining characters"", function() {
> 3942 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
       |        ^ Redundant Assertion
  3943 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
  3944 |     });
  3945 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3943}","  3941 |     it(""should parse combining characters"", function() {
  3942 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
> 3943 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
       |        ^ Redundant Assertion
  3944 |     });
  3945 |
  3946 |     it(""should parse multi-accented characters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3981}","  3979 |
  3980 |     it(""should parse symbols"", function() {
> 3981 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3982 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
  3983 |     });
  3984 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3982}","  3980 |     it(""should parse symbols"", function() {
  3981 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
> 3982 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3983 |     });
  3984 |
  3985 |     it(""should build Greek capital letters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3999}","  3997 |
  3998 |     it(""should build binary operators"", function() {
> 3999 |         expect(""±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞\u22C5\u2218\u2216\u2219"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  4000 |     });
  4001 |
  4002 |     it(""should build common ords"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4003}","  4001 |
  4002 |     it(""should build common ords"", function() {
> 4003 |         expect(""§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  4004 |     });
  4005 |
  4006 |     it(""should build delimiters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4007}","  4005 |
  4006 |     it(""should build delimiters"", function() {
> 4007 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
       |        ^ Redundant Assertion
  4008 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4009 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4010 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4008}","  4006 |     it(""should build delimiters"", function() {
  4007 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
> 4008 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
       |        ^ Redundant Assertion
  4009 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4010 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4011 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4009}","  4007 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
  4008 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
> 4009 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
       |        ^ Redundant Assertion
  4010 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4011 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4012 |         expect`┌x┐ └x┘`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4010}","  4008 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4009 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
> 4010 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
       |        ^ Redundant Assertion
  4011 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4012 |         expect`┌x┐ └x┘`.toBuild();
  4013 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4011}","  4009 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4010 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
> 4011 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
       |        ^ Redundant Assertion
  4012 |         expect`┌x┐ └x┘`.toBuild();
  4013 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4014 |         expect(""\u27E6x\u27E7"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4013}","  4011 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4012 |         expect`┌x┐ └x┘`.toBuild();
> 4013 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
       |        ^ Redundant Assertion
  4014 |         expect(""\u27E6x\u27E7"").toBuild();
  4015 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4016 |         expect(""\\lBrace \\rBrace"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4014}","  4012 |         expect`┌x┐ └x┘`.toBuild();
  4013 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
> 4014 |         expect(""\u27E6x\u27E7"").toBuild();
       |        ^ Redundant Assertion
  4015 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4016 |         expect(""\\lBrace \\rBrace"").toBuild();
  4017 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4015}","  4013 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4014 |         expect(""\u27E6x\u27E7"").toBuild();
> 4015 |         expect(""\\llbracket \\rrbracket"").toBuild();
       |        ^ Redundant Assertion
  4016 |         expect(""\\lBrace \\rBrace"").toBuild();
  4017 |     });
  4018 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4016}","  4014 |         expect(""\u27E6x\u27E7"").toBuild();
  4015 |         expect(""\\llbracket \\rrbracket"").toBuild();
> 4016 |         expect(""\\lBrace \\rBrace"").toBuild();
       |        ^ Redundant Assertion
  4017 |     });
  4018 |
  4019 |     it(""should build some surrogate pairs"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4286, 'column': 19, 'index': 160577}","  4284 |             expect`\message{Hello, world}`.toParse();
  4285 |             // eslint-disable-next-line no-console
> 4286 |             expect(console.log).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4287 |         });
  4288 |     });
  4289 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4295, 'column': 19, 'index': 160942}","  4293 |             expect`\errmessage{Hello, world}`.toParse();
  4294 |             // eslint-disable-next-line no-console
> 4295 |             expect(console.error).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4296 |         });
  4297 |     });
  4298 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 23}","  21 |
  22 | describe(""A parser"", function() {
> 23 |     it(""should not fail on an empty string"", function() {
     |    ^ Unknown Test
  24 |         expect``.toParse(strictSettings);
  25 |     });
  26 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 27}","  25 |     });
  26 |
> 27 |     it(""should ignore whitespace"", function() {
     |    ^ Unknown Test
  28 |         expect`    x    y    `.toParseLike(""xy"", strictSettings);
  29 |     });
  30 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 31}","  29 |     });
  30 |
> 31 |     it(""should ignore whitespace in atom"", function() {
     |    ^ Unknown Test
  32 |         expect`    x   ^ y    `.toParseLike(""x^y"", strictSettings);
  33 |     });
  34 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 115}","  113 |
  114 | describe(""A mathinner parser"", function() {
> 115 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  116 |         expect`\mathinner{\langle{\psi}\rangle}`.toParse();
  117 |         expect`\frac 1 {\mathinner{\langle{\psi}\rangle}}`.toParse();
  118 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 182}","  180 |
  181 | describe(""A \\KaTeX parser"", function() {
> 182 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  183 |         expect`\KaTeX`.toParse();
  184 |     });
  185 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 188}","  186 |
  187 | describe(""A subscript and superscript parser"", function() {
> 188 |     it(""should not fail on superscripts"", function() {
      |    ^ Unknown Test
  189 |         expect`x^2`.toParse();
  190 |     });
  191 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 192}","  190 |     });
  191 |
> 192 |     it(""should not fail on subscripts"", function() {
      |    ^ Unknown Test
  193 |         expect`x_3`.toParse();
  194 |     });
  195 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 196}","  194 |     });
  195 |
> 196 |     it(""should not fail on both subscripts and superscripts"", function() {
      |    ^ Unknown Test
  197 |         expect`x^2_3`.toParse();
  198 |
  199 |         expect`x_2^3`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 202}","  200 |     });
  201 |
> 202 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  203 |         expect`^3`.toParse();
  204 |         expect`^3+`.toParse();
  205 |         expect`_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 246}","  244 |     });
  245 |
> 246 |     it(""should produce the same thing regardless of order"", function() {
      |    ^ Unknown Test
  247 |         expect`x^2_3`.toParseLike`x_3^2`;
  248 |     });
  249 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 250}","  248 |     });
  249 |
> 250 |     it(""should not parse double subscripts or superscripts"", function() {
      |    ^ Unknown Test
  251 |         expect`x^x^x`.not.toParse();
  252 |
  253 |         expect`x_x_x`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 264}","  262 |     });
  263 |
> 264 |     it(""should work correctly with {}s"", function() {
      |    ^ Unknown Test
  265 |         expect`x^{2+3}`.toParse();
  266 |
  267 |         expect`x_{3-2}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 282}","  280 |     });
  281 |
> 282 |     it(""should work with nested super/subscripts"", function() {
      |    ^ Unknown Test
  283 |         expect`x^{x^x}`.toParse();
  284 |         expect`x^{x_x}`.toParse();
  285 |         expect`x_{x^x}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 289}","  287 |     });
  288 |
> 289 |     it(""should work with Unicode (sub|super)script characters"", function() {
      |    ^ Unknown Test
  290 |         expect`A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃`.toParseLike`A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}`;
  291 |     });
  292 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 293}","  291 |     });
  292 |
> 293 |     it(""should not fail if \\relax is in an atom"", function() {
      |    ^ Unknown Test
  294 |         expect`\hskip1em\relax^2`.toParse(strictSettings);
  295 |     });
  296 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 297}","  295 |     });
  296 |
> 297 |     it(""should skip \\relax in super/subscripts"", function() {
      |    ^ Unknown Test
  298 |         expect`x^\relax 2`.toParseLike`x^2`;
  299 |         expect`x_\relax 2`.toParseLike`x_2`;
  300 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 304}","  302 |
  303 | describe(""A subscript and superscript tree-builder"", function() {
> 304 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  305 |         expect`^3`.toBuild();
  306 |         expect`_2`.toBuild();
  307 |         expect`^3_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 313}","  311 |
  312 | describe(""A parser with limit controls"", function() {
> 313 |     it(""should fail when the limit control is not preceded by an op node"", function() {
      |    ^ Unknown Test
  314 |         expect`3\nolimits_2^2`.not.toParse();
  315 |         expect`\sqrt\limits_2^2`.not.toParse();
  316 |         expect`45 +\nolimits 45`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 319}","  317 |     });
  318 |
> 319 |     it(""should parse when the limit control directly follows an op node"", function() {
      |    ^ Unknown Test
  320 |         expect`\int\limits_2^2 3`.toParse();
  321 |         expect`\sum\nolimits_3^4 4`.toParse();
  322 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 324}","  322 |     });
  323 |
> 324 |     it(""should parse when the limit control is in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  325 |         expect`\int_2^2\limits`.toParse();
  326 |         expect`\int^2\nolimits_2`.toParse();
  327 |         expect`\int_2\limits^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 330}","  328 |     });
  329 |
> 330 |     it(""should allow multiple limit controls in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  331 |         expect`\int_2\nolimits^2\limits 3`.toParse();
  332 |         expect`\int\nolimits\limits_2^2`.toParse();
  333 |         expect`\int\limits\limits\limits_2^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 348}","  346 |
  347 | describe(""A group parser"", function() {
> 348 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  349 |         expect`{xy}`.toParse();
  350 |     });
  351 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 365}","  363 |
  364 | describe(""A \\begingroup...\\endgroup parser"", function() {
> 365 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  366 |         expect`\begingroup xy \endgroup`.toParse();
  367 |     });
  368 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 369}","  367 |     });
  368 |
> 369 |     it(""should fail when it is mismatched"", function() {
      |    ^ Unknown Test
  370 |         expect`\begingroup xy`.not.toParse();
  371 |         expect`\begingroup xy }`.not.toParse();
  372 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 386}","  384 |     });
  385 |
> 386 |     it(""should not affect spacing in math mode"", function() {
      |    ^ Unknown Test
  387 |         expect`\begingroup x+ \endgroup y`.toBuildLike`x+y`;
  388 |     });
  389 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 392}","  390 |
  391 | describe(""An implicit group parser"", function() {
> 392 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  393 |         expect`\Large x`.toParse();
  394 |         expect`abc {abc \Large xyz} abc`.toParse();
  395 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 454}","  452 |
  453 | describe(""A function parser"", function() {
> 454 |     it(""should parse no argument functions"", function() {
      |    ^ Unknown Test
  455 |         expect`\div`.toParse();
  456 |     });
  457 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 458}","  456 |     });
  457 |
> 458 |     it(""should parse 1 argument functions"", function() {
      |    ^ Unknown Test
  459 |         expect`\blue x`.toParse();
  460 |     });
  461 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 462}","  460 |     });
  461 |
> 462 |     it(""should parse 2 argument functions"", function() {
      |    ^ Unknown Test
  463 |         expect`\frac 1 2`.toParse();
  464 |     });
  465 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 466}","  464 |     });
  465 |
> 466 |     it(""should not parse 1 argument functions with no arguments"", function() {
      |    ^ Unknown Test
  467 |         expect`\blue`.not.toParse();
  468 |     });
  469 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 470}","  468 |     });
  469 |
> 470 |     it(""should not parse 2 argument functions with 0 or 1 arguments"", function() {
      |    ^ Unknown Test
  471 |         expect`\frac`.not.toParse();
  472 |
  473 |         expect`\frac 1`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 476}","  474 |     });
  475 |
> 476 |     it(""should not parse a function with text right after it"", function() {
      |    ^ Unknown Test
  477 |         expect`\redx`.not.toParse();
  478 |     });
  479 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 480}","  478 |     });
  479 |
> 480 |     it(""should parse a function with a number right after it"", function() {
      |    ^ Unknown Test
  481 |         expect`\frac12`.toParse();
  482 |     });
  483 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 484}","  482 |     });
  483 |
> 484 |     it(""should parse some functions with text right after it"", function() {
      |    ^ Unknown Test
  485 |         expect`\;x`.toParse();
  486 |     });
  487 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 648}","  646 |     });
  647 |
> 648 |     it(""should handle \\textstyle correctly"", function() {
      |    ^ Unknown Test
  649 |         expect`\textstyle 1 \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  650 |         expect`{\textstyle 1} \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  651 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 674}","  672 |
  673 | describe(""A genfrac builder"", function() {
> 674 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  675 |         expect`\frac{x}{y}`.toBuild();
  676 |         expect`\dfrac{x}{y}`.toBuild();
  677 |         expect`\tfrac{x}{y}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 687}","  685 |
  686 | describe(""A infix builder"", function() {
> 687 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  688 |         expect`a \over b`.toBuild();
  689 |         expect`a \atop b`.toBuild();
  690 |         expect`a \choose b`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 783}","  781 |     });
  782 |
> 783 |     it(""should parse math within text group"", function() {
      |    ^ Unknown Test
  784 |         expect`\text{graph: $y = mx + b$}`.toParse(strictSettings);
  785 |         expect`\text{graph: \(y = mx + b\)}`.toParse(strictSettings);
  786 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 788}","  786 |     });
  787 |
> 788 |     it(""should parse math within text within math within text"", function() {
      |    ^ Unknown Test
  789 |         expect`\text{hello $x + \text{world $y$} + z$}`.toParse(strictSettings);
  790 |         expect`\text{hello \(x + \text{world $y$} + z\)}`.toParse(strictSettings);
  791 |         expect`\text{hello $x + \text{world \(y\)} + z$}`.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 795}","  793 |     });
  794 |
> 795 |     it(""should forbid \\( within math mode"", function() {
      |    ^ Unknown Test
  796 |         expect`\(`.not.toParse();
  797 |         expect`\text{$\(x\)$}`.not.toParse();
  798 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 800}","  798 |     });
  799 |
> 800 |     it(""should forbid $ within math mode"", function() {
      |    ^ Unknown Test
  801 |         expect`$x$`.not.toParse();
  802 |         expect`\text{\($x$\)}`.not.toParse();
  803 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 805}","  803 |     });
  804 |
> 805 |     it(""should detect unbalanced \\)"", function() {
      |    ^ Unknown Test
  806 |         expect`\)`.not.toParse();
  807 |         expect`\text{\)}`.not.toParse();
  808 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 810}","  808 |     });
  809 |
> 810 |     it(""should detect unbalanced $"", function() {
      |    ^ Unknown Test
  811 |         expect`$`.not.toParse();
  812 |         expect`\text{$}`.not.toParse();
  813 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 815}","  813 |     });
  814 |
> 815 |     it(""should not mix $ and \\(..\\)"", function() {
      |    ^ Unknown Test
  816 |         expect`\text{$x\)}`.not.toParse();
  817 |         expect`\text{\(x$}`.not.toParse();
  818 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 820}","  818 |     });
  819 |
> 820 |     it(""should parse spacing functions"", function() {
      |    ^ Unknown Test
  821 |         expect`a b\, \; \! \: \> ~ \thinspace \medspace \quad \ `.toBuild();
  822 |         expect`\enspace \thickspace \qquad \space \nobreakspace`.toBuild();
  823 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 825}","  823 |     });
  824 |
> 825 |     it(""should omit spaces after commands"", function() {
      |    ^ Unknown Test
  826 |         expect`\text{\textellipsis !}`.toParseLike`\text{\textellipsis!}`;
  827 |     });
  828 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 829}","  827 |     });
  828 |
> 829 |     it(""should handle ⋮ and \\vdots"", function() {
      |    ^ Unknown Test
  830 |         expect`\text{a \vdots b ⋮ d}`.toParse();
  831 |     });
  832 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 835}","  833 |
  834 | describe(""A texvc builder"", function() {
> 835 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  836 |         expect`\lang\N\darr\R\dArr\Z\Darr\alef\rang`.toBuild();
  837 |         expect`\alefsym\uarr\Alpha\uArr\Beta\Uarr\Chi`.toBuild();
  838 |         expect`\clubs\diamonds\hearts\spades\cnums\Complex`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1009}","  1007 |
  1008 | describe(""An lap parser"", function() {
> 1009 |     it(""should not fail on a text argument"", function() {
       |    ^ Unknown Test
  1010 |         expect`\rlap{\,/}{=}`.toParse();
  1011 |         expect`\mathrlap{\,/}{=}`.toParse();
  1012 |         expect`{=}\llap{/\,}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1018}","  1016 |     });
  1017 |
> 1018 |     it(""should not fail if math version is used"", function() {
       |    ^ Unknown Test
  1019 |         expect`\mathrlap{\frac{a}{b}}{=}`.toParse();
  1020 |         expect`{=}\mathllap{\frac{a}{b}}`.toParse();
  1021 |         expect`\sum_{\mathclap{\frac{a}{b}}}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1024}","  1022 |     });
  1023 |
> 1024 |     it(""should fail on math if AMS version is used"", function() {
       |    ^ Unknown Test
  1025 |         expect`\rlap{\frac{a}{b}}{=}`.not.toParse();
  1026 |         expect`{=}\llap{\frac{a}{b}}`.not.toParse();
  1027 |         expect`\sum_{\clap{\frac{a}{b}}}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1280}","  1278 | describe(""A begin/end parser"", function() {
  1279 |
> 1280 |     it(""should parse a simple environment"", function() {
       |    ^ Unknown Test
  1281 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1282 |     });
  1283 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1284}","  1282 |     });
  1283 |
> 1284 |     it(""should parse an environment with argument"", function() {
       |    ^ Unknown Test
  1285 |         expect`\begin{array}{cc}a&b\\c&d\end{array}`.toParse();
  1286 |     });
  1287 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1288}","  1286 |     });
  1287 |
> 1288 |     it(""should parse and build an empty environment"", function() {
       |    ^ Unknown Test
  1289 |         expect`\begin{aligned}\end{aligned}`.toBuild();
  1290 |         expect`\begin{matrix}\end{matrix}`.toBuild();
  1291 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1293}","  1291 |     });
  1292 |
> 1293 |     it(""should parse an environment with hlines"", function() {
       |    ^ Unknown Test
  1294 |         expect`\begin{matrix}\hline a&b\\ \hline c&d\end{matrix}`.toParse();
  1295 |         expect`\begin{matrix}\hline a&b\cr \hline c&d\end{matrix}`.toParse();
  1296 |         expect`\begin{matrix}\hdashline a&b\\ \hdashline c&d\end{matrix}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1299}","  1297 |     });
  1298 |
> 1299 |     it(""should forbid hlines outside array environment"", () => {
       |    ^ Unknown Test
  1300 |         expect`\hline`.not.toParse();
  1301 |     });
  1302 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1303}","  1301 |     });
  1302 |
> 1303 |     it(""should error when name is mismatched"", function() {
       |    ^ Unknown Test
  1304 |         expect`\begin{matrix}a&b\\c&d\end{pmatrix}`.not.toParse();
  1305 |     });
  1306 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1307}","  1305 |     });
  1306 |
> 1307 |     it(""should error when commands are mismatched"", function() {
       |    ^ Unknown Test
  1308 |         expect`\begin{matrix}a&b\\c&d\right{pmatrix}`.not.toParse();
  1309 |     });
  1310 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1311}","  1309 |     });
  1310 |
> 1311 |     it(""should error when end is missing"", function() {
       |    ^ Unknown Test
  1312 |         expect`\begin{matrix}a&b\\c&d`.not.toParse();
  1313 |     });
  1314 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1315}","  1313 |     });
  1314 |
> 1315 |     it(""should error when braces are mismatched"", function() {
       |    ^ Unknown Test
  1316 |         expect`{\begin{matrix}a&b\\c&d}\end{matrix}`.not.toParse();
  1317 |     });
  1318 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1319}","  1317 |     });
  1318 |
> 1319 |     it(""should cooperate with infix notation"", function() {
       |    ^ Unknown Test
  1320 |         expect`\begin{matrix}0&1\over2&3\\4&5&6\end{matrix}`.toParse();
  1321 |     });
  1322 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1329}","  1327 |     });
  1328 |
> 1329 |     it(""should allow \\cr and \\\\ as a line terminator"", function() {
       |    ^ Unknown Test
  1330 |         expect`\begin{matrix}a&b\cr c&d\end{matrix}`.toParse();
  1331 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1332 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1334}","  1332 |     });
  1333 |
> 1334 |     it(""should not allow \\cr to scan for an optional size argument"", function() {
       |    ^ Unknown Test
  1335 |         expect`\begin{matrix}a&b\cr[c]&d\end{matrix}`.toParse();
  1336 |     });
  1337 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1338}","  1336 |     });
  1337 |
> 1338 |     it(""should not treat [ after space as optional argument to \\\\"", function() {
       |    ^ Unknown Test
  1339 |         expect`\begin{matrix}a&b\\ [c]&d\end{matrix}`.toParse();
  1340 |         expect`a\\ [b]`.toParse();
  1341 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1353}","  1351 |     });
  1352 |
> 1353 |     it(""should allow an optional argument in {matrix*} and company."", function() {
       |    ^ Unknown Test
  1354 |         expect`\begin{matrix*}[r] a & -1 \\ -1 & d \end{matrix*}`.toBuild();
  1355 |         expect`\begin{pmatrix*}[r] a & -1 \\ -1 & d \end{pmatrix*}`.toBuild();
  1356 |         expect`\begin{bmatrix*}[r] a & -1 \\ -1 & d \end{bmatrix*}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1390}","  1388 |     });
  1389 |
> 1390 |     it(""should build sized square roots"", function() {
       |    ^ Unknown Test
  1391 |         expect`\Large\sqrt[3]{x}`.toBuild();
  1392 |     });
  1393 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1394}","  1392 |     });
  1393 |
> 1394 |     it(""should expand argument if optional argument doesn't exist"", function() {
       |    ^ Unknown Test
  1395 |         expect`\sqrt\foo`.toParseLike(""\\sqrt123"",
  1396 |             new Settings({macros: {""\\foo"": ""123""}}));
  1397 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1399}","  1397 |     });
  1398 |
> 1399 |     it(""should not expand argument if optional argument exists"", function() {
       |    ^ Unknown Test
  1400 |         expect`\sqrt[2]\foo`.toParseLike(""\\sqrt[2]{123}"",
  1401 |             new Settings({macros: {""\\foo"": ""123""}}));
  1402 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1406}","  1404 |
  1405 | describe(""A TeX-compliant parser"", function() {
> 1406 |     it(""should work"", function() {
       |    ^ Unknown Test
  1407 |         expect`\frac 2 3`.toParse();
  1408 |     });
  1409 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1425}","  1423 |     });
  1424 |
> 1425 |     it(""should fail when there are missing sup/subscripts"", function() {
       |    ^ Unknown Test
  1426 |         expect`x^`.not.toParse();
  1427 |         expect`x_`.not.toParse();
  1428 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1496}","  1494 |     });
  1495 |
> 1496 |     it(""should parse multiple primes correctly"", function() {
       |    ^ Unknown Test
  1497 |         expect`x''''`.toParse();
  1498 |         expect`x_2''`.toParse();
  1499 |         expect`x''_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1502}","  1500 |     });
  1501 |
> 1502 |     it(""should fail when sup/subscripts are interspersed with arguments"", function() {
       |    ^ Unknown Test
  1503 |         expect`\sqrt^23`.not.toParse();
  1504 |         expect`\frac^234`.not.toParse();
  1505 |         expect`\frac2^34`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1508}","  1506 |     });
  1507 |
> 1508 |     it(""should succeed when sup/subscripts come after whole functions"", function() {
       |    ^ Unknown Test
  1509 |         expect`\sqrt2^3`.toParse();
  1510 |         expect`\frac23^4`.toParse();
  1511 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1513}","  1511 |     });
  1512 |
> 1513 |     it(""should succeed with a sqrt around a text/frac"", function() {
       |    ^ Unknown Test
  1514 |         expect`\sqrt \frac x y`.toParse();
  1515 |         expect`\sqrt \text x`.toParse();
  1516 |         expect`x^\frac x y`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1550}","  1548 |
  1549 | describe(""An op symbol builder"", function() {
> 1550 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1551 |         expect`\int_i^n`.toBuild();
  1552 |         expect`\iint_i^n`.toBuild();
  1553 |         expect`\iiint_i^n`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1567}","  1565 |
  1566 | describe(""A style change parser"", function() {
> 1567 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1568 |         expect`\displaystyle x`.toParse();
  1569 |         expect`\textstyle x`.toParse();
  1570 |         expect`\scriptstyle x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1598}","  1596 |
  1597 | describe(""A font parser"", function() {
> 1598 |     it(""should parse \\mathrm, \\mathbb, \\mathit, and \\mathnormal"", function() {
       |    ^ Unknown Test
  1599 |         expect`\mathrm x`.toParse();
  1600 |         expect`\mathbb x`.toParse();
  1601 |         expect`\mathit x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1609}","  1607 |     });
  1608 |
> 1609 |     it(""should parse \\mathcal and \\mathfrak"", function() {
       |    ^ Unknown Test
  1610 |         expect`\mathcal{ABC123}`.toParse();
  1611 |         expect`\mathfrak{abcABC123}`.toParse();
  1612 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1663}","  1661 |     });
  1662 |
> 1663 |     it(""should not parse a series of font commands"", function() {
       |    ^ Unknown Test
  1664 |         expect`\mathbb \mathrm R`.not.toParse();
  1665 |     });
  1666 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1678}","  1676 |     });
  1677 |
> 1678 |     it(""should be allowed in the argument"", function() {
       |    ^ Unknown Test
  1679 |         expect`e^\mathbf{x}`.toParse();
  1680 |     });
  1681 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1687}","  1685 |     });
  1686 |
> 1687 |     it(""old-style fonts work like new-style fonts"", () => {
       |    ^ Unknown Test
  1688 |         expect`\rm xyz`.toParseLike`\mathrm{xyz}`;
  1689 |         expect`\sf xyz`.toParseLike`\mathsf{xyz}`;
  1690 |         expect`\tt xyz`.toParseLike`\mathtt{xyz}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1698}","  1696 |
  1697 | describe(""A \\pmb builder"", function() {
> 1698 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1699 |         expect`\pmb{\mu}`.toBuild();
  1700 |         expect`\pmb{=}`.toBuild();
  1701 |         expect`\pmb{+}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1709}","  1707 |
  1708 | describe(""A raise parser"", function() {
> 1709 |     it(""should parse and build text in \\raisebox"", function() {
       |    ^ Unknown Test
  1710 |         expect`\raisebox{5pt}{text}`.toBuild(strictSettings);
  1711 |         expect`\raisebox{-5pt}{text}`.toBuild(strictSettings);
  1712 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1714}","  1712 |     });
  1713 |
> 1714 |     it(""should parse and build math in non-strict \\vcenter"", function() {
       |    ^ Unknown Test
  1715 |         expect`\vcenter{\frac a b}`.toBuild(nonstrictSettings);
  1716 |     });
  1717 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1718}","  1716 |     });
  1717 |
> 1718 |     it(""should fail to parse math in \\raisebox"", function() {
       |    ^ Unknown Test
  1719 |         expect`\raisebox{5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1720 |         expect`\raisebox{-5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1721 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1723}","  1721 |     });
  1722 |
> 1723 |     it(""should fail to parse math in an \\hbox"", function() {
       |    ^ Unknown Test
  1724 |         expect`\hbox{\frac a b}`.not.toParse(nonstrictSettings);
  1725 |     });
  1726 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1727}","  1725 |     });
  1726 |
> 1727 |     it(""should fail to build, given an unbraced length"", function() {
       |    ^ Unknown Test
  1728 |         expect`\raisebox5pt{text}`.not.toBuild(strictSettings);
  1729 |         expect`\raisebox-5pt{text}`.not.toBuild(strictSettings);
  1730 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1732}","  1730 |     });
  1731 |
> 1732 |     it(""should build math in an hbox when math mode is set"", function() {
       |    ^ Unknown Test
  1733 |         expect`a + \vcenter{\hbox{$\frac{\frac a b}c$}}`
  1734 |             .toBuild(strictSettings);
  1735 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1781}","  1779 |     });
  1780 |
> 1781 |     it(""should not parse a comment without newline in strict mode"", () => {
       |    ^ Unknown Test
  1782 |         expect`x%y`.not.toParse(strictSettings);
  1783 |         expect`x%y`.toParse(nonstrictSettings);
  1784 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2266}","  2264 |
  2265 | describe(""An accent parser"", function() {
> 2266 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2267 |         expect`\vec{x}`.toParse();
  2268 |         expect`\vec{x^2}`.toParse();
  2269 |         expect`\vec{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2286}","  2284 |     });
  2285 |
> 2286 |     it(""should parse stretchy, shifty accents"", function() {
       |    ^ Unknown Test
  2287 |         expect`\widehat{x}`.toParse();
  2288 |         expect`\widecheck{x}`.toParse();
  2289 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2291}","  2289 |     });
  2290 |
> 2291 |     it(""should parse stretchy, non-shifty accents"", function() {
       |    ^ Unknown Test
  2292 |         expect`\overrightarrow{x}`.toParse();
  2293 |     });
  2294 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2297}","  2295 |
  2296 | describe(""An accent builder"", function() {
> 2297 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2298 |         expect`\vec{x}`.toBuild();
  2299 |         expect`\vec{x}^2`.toBuild();
  2300 |         expect`\vec{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2314}","  2312 |
  2313 | describe(""A stretchy and shifty accent builder"", function() {
> 2314 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2315 |         expect`\widehat{AB}`.toBuild();
  2316 |         expect`\widecheck{AB}`.toBuild();
  2317 |         expect`\widehat{AB}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2332}","  2330 |
  2331 | describe(""A stretchy and non-shifty accent builder"", function() {
> 2332 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2333 |         expect`\overrightarrow{AB}`.toBuild();
  2334 |         expect`\overrightarrow{AB}^2`.toBuild();
  2335 |         expect`\overrightarrow{AB}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2358}","  2356 |
  2357 | describe(""An under-accent parser"", function() {
> 2358 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2359 |         expect`\underrightarrow{x}`.toParse();
  2360 |         expect`\underrightarrow{x^2}`.toParse();
  2361 |         expect`\underrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2379}","  2377 |
  2378 | describe(""An under-accent builder"", function() {
> 2379 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2380 |         expect`\underrightarrow{x}`.toBuild();
  2381 |         expect`\underrightarrow{x}^2`.toBuild();
  2382 |         expect`\underrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2397}","  2395 |
  2396 | describe(""An extensible arrow parser"", function() {
> 2397 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2398 |         expect`\xrightarrow{x}`.toParse();
  2399 |         expect`\xrightarrow{x^2}`.toParse();
  2400 |         expect`\xrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2419}","  2417 |
  2418 | describe(""An extensible arrow builder"", function() {
> 2419 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2420 |         expect`\xrightarrow{x}`.toBuild();
  2421 |         expect`\xrightarrow{x}^2`.toBuild();
  2422 |         expect`\xrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2438}","  2436 |
  2437 | describe(""A horizontal brace parser"", function() {
> 2438 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2439 |         expect`\overbrace{x}`.toParse();
  2440 |         expect`\overbrace{x^2}`.toParse();
  2441 |         expect`\overbrace{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2461}","  2459 |
  2460 | describe(""A horizontal brace builder"", function() {
> 2461 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2462 |         expect`\overbrace{x}`.toBuild();
  2463 |         expect`\overbrace{x}^2`.toBuild();
  2464 |         expect`\underbrace{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2479}","  2477 |
  2478 | describe(""A boxed parser"", function() {
> 2479 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2480 |         expect`\boxed{x}`.toParse();
  2481 |         expect`\boxed{x^2}`.toParse();
  2482 |         expect`\boxed{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2494}","  2492 |
  2493 | describe(""A boxed builder"", function() {
> 2494 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2495 |         expect`\boxed{x}`.toBuild();
  2496 |         expect`\boxed{x}^2`.toBuild();
  2497 |         expect`\boxed{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2511}","  2509 |
  2510 | describe(""An fbox parser, unlike a boxed parser,"", function() {
> 2511 |     it(""should fail when given math"", function() {
       |    ^ Unknown Test
  2512 |         expect`\fbox{\frac a b}`.not.toParse();
  2513 |     });
  2514 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2517}","  2515 |
  2516 | describe(""A colorbox parser"", function() {
> 2517 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2518 |         expect`\colorbox{red}{a b}`.toParse();
  2519 |         expect`\colorbox{red}{x}^2`.toParse();
  2520 |         expect`\colorbox{red} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2523}","  2521 |     });
  2522 |
> 2523 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2524 |         expect`\colorbox{red}{\alpha}`.not.toParse();
  2525 |         expect`\colorbox{red}{\frac{a}{b}}`.not.toParse();
  2526 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2528}","  2526 |     });
  2527 |
> 2528 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2529 |         expect`\colorbox{red}{a b}`.toParse();
  2530 |         expect`\colorbox{#197}{a b}`.toParse();
  2531 |         expect`\colorbox{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2541}","  2539 |
  2540 | describe(""A colorbox builder"", function() {
> 2541 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2542 |         expect`\colorbox{red}{a b}`.toBuild();
  2543 |         expect`\colorbox{red}{a b}^2`.toBuild();
  2544 |         expect`\colorbox{red} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2553}","  2551 |
  2552 | describe(""An fcolorbox parser"", function() {
> 2553 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2554 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2555 |         expect`\fcolorbox{blue}{yellow}{x}^2`.toParse();
  2556 |         expect`\fcolorbox{blue}{yellow} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2559}","  2557 |     });
  2558 |
> 2559 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2560 |         expect`\fcolorbox{blue}{yellow}{\alpha}`.not.toParse();
  2561 |         expect`\fcolorbox{blue}{yellow}{\frac{a}{b}}`.not.toParse();
  2562 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2564}","  2562 |     });
  2563 |
> 2564 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2565 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2566 |         expect`\fcolorbox{blue}{#197}{a b}`.toParse();
  2567 |         expect`\fcolorbox{blue}{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2577}","  2575 |
  2576 | describe(""A fcolorbox builder"", function() {
> 2577 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2578 |         expect`\fcolorbox{blue}{yellow}{a b}`.toBuild();
  2579 |         expect`\fcolorbox{blue}{yellow}{a b}^2`.toBuild();
  2580 |         expect`\fcolorbox{blue}{yellow} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2589}","  2587 |
  2588 | describe(""A strike-through parser"", function() {
> 2589 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2590 |         expect`\cancel{x}`.toParse();
  2591 |         expect`\cancel{x^2}`.toParse();
  2592 |         expect`\cancel{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2610}","  2608 |
  2609 | describe(""A strike-through builder"", function() {
> 2610 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2611 |         expect`\cancel{x}`.toBuild();
  2612 |         expect`\cancel{x}^2`.toBuild();
  2613 |         expect`\cancel{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2631}","  2629 |
  2630 | describe(""A actuarial angle parser"", function() {
> 2631 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2632 |         expect`a_{\angl{n}}`.toParse();
  2633 |     });
  2634 |     it(""should fail in text mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2634}","  2632 |         expect`a_{\angl{n}}`.toParse();
  2633 |     });
> 2634 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2635 |         expect`\text{a_{\angl{n}}}`.not.toParse();
  2636 |     });
  2637 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2640}","  2638 |
  2639 | describe(""A actuarial angle builder"", function() {
> 2640 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2641 |         expect`a_{\angl{n}}`.toBuild();
  2642 |         expect`a_{\angl{n}i}`.toBuild();
  2643 |         expect`a_{\angl n}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2649}","  2647 |
  2648 | describe(""\\phase"", function() {
> 2649 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2650 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2651 |     });
  2652 |     it(""should not fail in math mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2652}","  2650 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2651 |     });
> 2652 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2653 |         expect`\phase{-78.2^\circ}`.toBuild();
  2654 |     });
  2655 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2658}","  2656 |
  2657 | describe(""A phantom parser"", function() {
> 2658 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2659 |         expect`\phantom{x}`.toParse();
  2660 |         expect`\phantom{x^2}`.toParse();
  2661 |         expect`\phantom{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2678}","  2676 |
  2677 | describe(""A phantom builder"", function() {
> 2678 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2679 |         expect`\phantom{x}`.toBuild();
  2680 |         expect`\phantom{x^2}`.toBuild();
  2681 |         expect`\phantom{x}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2707}","  2705 |
  2706 | describe(""A smash parser"", function() {
> 2707 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2708 |         expect`\smash{x}`.toParse();
  2709 |         expect`\smash{x^2}`.toParse();
  2710 |         expect`\smash{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2732}","  2730 |
  2731 | describe(""A smash builder"", function() {
> 2732 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2733 |         expect`\smash{x}`.toBuild(nonstrictSettings);
  2734 |         expect`\smash{x^2}`.toBuild(nonstrictSettings);
  2735 |         expect`\smash{x}^2`.toBuild(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2756}","  2754 |
  2755 | describe(""An optional argument parser"", function() {
> 2756 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2757 |         // Note this doesn't actually make an optional argument, but still
  2758 |         // should work
  2759 |         expect`\frac[1]{2}{3}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2764}","  2762 |     });
  2763 |
> 2764 |     it(""should work with sqrts with optional arguments"", function() {
       |    ^ Unknown Test
  2765 |         expect`\sqrt[3]{2}`.toParse();
  2766 |     });
  2767 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2768}","  2766 |     });
  2767 |
> 2768 |     it(""should work when the optional argument is missing"", function() {
       |    ^ Unknown Test
  2769 |         expect`\sqrt{2}`.toParse();
  2770 |         expect`\rule{1em}{2em}`.toParse();
  2771 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2773}","  2771 |     });
  2772 |
> 2773 |     it(""should fail when the optional argument is malformed"", function() {
       |    ^ Unknown Test
  2774 |         expect`\rule[1]{2em}{3em}`.not.toParse();
  2775 |     });
  2776 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2777}","  2775 |     });
  2776 |
> 2777 |     it(""should not work if the optional argument isn't closed"", function() {
       |    ^ Unknown Test
  2778 |         expect`\sqrt[`.not.toParse();
  2779 |     });
  2780 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2827}","  2825 | describe(""A substack function"", function() {
  2826 |
> 2827 |     it(""should build"", function() {
       |    ^ Unknown Test
  2828 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2829 |     });
  2830 |     it(""should accommodate spaces in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2830}","  2828 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2829 |     });
> 2830 |     it(""should accommodate spaces in the argument"", function() {
       |    ^ Unknown Test
  2831 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2832 |     });
  2833 |     it(""should accommodate macros in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2833}","  2831 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2832 |     });
> 2833 |     it(""should accommodate macros in the argument"", function() {
       |    ^ Unknown Test
  2834 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2835 |     });
  2836 |     it(""should accommodate an empty argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2836}","  2834 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2835 |     });
> 2836 |     it(""should accommodate an empty argument"", function() {
       |    ^ Unknown Test
  2837 |         expect`\sum_{\substack{}}  P(i,j)`.toBuild();
  2838 |     });
  2839 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2844}","  2842 | describe(""A smallmatrix environment"", function() {
  2843 |
> 2844 |     it(""should build"", function() {
       |    ^ Unknown Test
  2845 |         expect`\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}`.toBuild();
  2846 |     });
  2847 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2852}","  2850 | describe(""A cases environment"", function() {
  2851 |
> 2852 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2853 |         expect`f(a,b)=\begin{cases}a+1&\text{if }b\text{ is odd}\\a&\text{if }b=0\\a-1&\text{otherwise}\end{cases}`
  2854 |             .toParse();
  2855 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2861}","  2859 | describe(""An rcases environment"", function() {
  2860 |
> 2861 |     it(""should build"", function() {
       |    ^ Unknown Test
  2862 |         expect`\begin{rcases} a &\text{if } b \\ c &\text{if } d \end{rcases}⇒…`
  2863 |             .toBuild();
  2864 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2870}","  2868 | describe(""An aligned environment"", function() {
  2869 |
> 2870 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2871 |         expect`\begin{aligned}a&=b&c&=d\\e&=f\end{aligned}`.toParse();
  2872 |     });
  2873 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2874}","  2872 |     });
  2873 |
> 2874 |     it(""should allow cells in brackets"", function() {
       |    ^ Unknown Test
  2875 |         expect`\begin{aligned}[a]&[b]\\ [c]&[d]\end{aligned}`.toParse();
  2876 |     });
  2877 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2878}","  2876 |     });
  2877 |
> 2878 |     it(""should forbid cells in brackets without space"", function() {
       |    ^ Unknown Test
  2879 |         expect`\begin{aligned}[a]&[b]\\[c]&[d]\end{aligned}`.not.toParse();
  2880 |     });
  2881 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2889}","  2887 |
  2888 | describe(""AMS environments"", function() {
> 2889 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  2890 |         expect`\begin{gather}a+b\\c+d\end{gather}`.not.toParse(nonstrictSettings);
  2891 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.not.toParse(nonstrictSettings);
  2892 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.not.toParse(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2902}","  2900 |
  2901 |     const displayMode = new Settings({displayMode: true});
> 2902 |     it(""should build if in display mode"", () => {
       |    ^ Unknown Test
  2903 |         expect`\begin{gather}a+b\\c+d\end{gather}`.toBuild(displayMode);
  2904 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.toBuild(displayMode);
  2905 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2915}","  2913 |     });
  2914 |
> 2915 |     it(""should build an empty environment"", () => {
       |    ^ Unknown Test
  2916 |         expect`\begin{gather}\end{gather}`.toBuild(displayMode);
  2917 |         expect`\begin{gather*}\end{gather*}`.toBuild(displayMode);
  2918 |         expect`\begin{align}\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2927}","  2925 |     });
  2926 |
> 2927 |     it(""{equation} should fail if argument contains two rows."", () => {
       |    ^ Unknown Test
  2928 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2929 |     });
  2930 |     it(""{equation} should fail if argument contains two columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2930}","  2928 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2929 |     });
> 2930 |     it(""{equation} should fail if argument contains two columns."", () => {
       |    ^ Unknown Test
  2931 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2932 |     });
  2933 |     it(""{split} should fail if argument contains three columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2933}","  2931 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2932 |     });
> 2933 |     it(""{split} should fail if argument contains three columns."", () => {
       |    ^ Unknown Test
  2934 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2935 |     });
  2936 |     it(""{array} should fail if body contains more columns than specification."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2936}","  2934 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2935 |     });
> 2936 |     it(""{array} should fail if body contains more columns than specification."", () => {
       |    ^ Unknown Test
  2937 |         expect`\begin{array}{2}a & b & c\\d & e  f\end{array}`.not.toBuild(displayMode);
  2938 |     });
  2939 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2965}","  2963 |
  2964 | describe(""operatorname support"", function() {
> 2965 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2966 |         expect`\operatorname{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2967 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2968 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}_y x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2976}","  2974 |
  2975 | describe(""href and url commands"", function() {
> 2976 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2977 |         expect`\href{http://example.com/}{\sin}`.toBuild(trustSettings);
  2978 |         expect`\url{http://example.com/}`.toBuild(trustSettings);
  2979 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2981}","  2979 |     });
  2980 |
> 2981 |     it(""should allow empty URLs"", function() {
       |    ^ Unknown Test
  2982 |         expect`\href{}{example here}`.toBuild(trustSettings);
  2983 |         expect`\url{}`.toBuild(trustSettings);
  2984 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2994}","  2992 |     });
  2993 |
> 2994 |     it(""should allow spaces single-character URLs"", () => {
       |    ^ Unknown Test
  2995 |         expect`\href %end`.toParseLike(""\\href{%}end"", trustSettings);
  2996 |         expect`\url %end`.toParseLike(""\\url{%}end"", trustSettings);
  2997 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3015}","  3013 |     });
  3014 |
> 3015 |     it(""should not allow unbalanced brace(s) in url"", function() {
       |    ^ Unknown Test
  3016 |         expect`\href{http://example.com/{a}{bar}`.not.toParse();
  3017 |         expect`\href{http://example.com/}a}{bar}`.not.toParse();
  3018 |         expect`\url{http://example.com/{a}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3106}","  3104 |
  3105 | describe(""A raw text parser"", function() {
> 3106 |     it(""should return null for a omitted optional string"", function() {
       |    ^ Unknown Test
  3107 |         expect`\includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}`.toParse();
  3108 |     });
  3109 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3121}","  3119 |     });
  3120 |
> 3121 |     it(""should still parse on unrecognized control sequences"", function() {
       |    ^ Unknown Test
  3122 |         expect`\error`.toParse(noThrowSettings);
  3123 |     });
  3124 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3126}","  3124 |
  3125 |     describe(""should allow unrecognized controls sequences anywhere, including"", function() {
> 3126 |         it(""in superscripts and subscripts"", function() {
       |        ^ Unknown Test
  3127 |             expect`2_\error`.toBuild(noThrowSettings);
  3128 |             expect`3^{\error}_\error`.toBuild(noThrowSettings);
  3129 |             expect`\int\nolimits^\error_\error`.toBuild(noThrowSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3132}","  3130 |         });
  3131 |
> 3132 |         it(""in fractions"", function() {
       |        ^ Unknown Test
  3133 |             expect`\frac{345}{\error}`.toBuild(noThrowSettings);
  3134 |             expect`\frac\error{\error}`.toBuild(noThrowSettings);
  3135 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3137}","  3135 |         });
  3136 |
> 3137 |         it(""in square roots"", function() {
       |        ^ Unknown Test
  3138 |             expect`\sqrt\error`.toBuild(noThrowSettings);
  3139 |             expect`\sqrt{234\error}`.toBuild(noThrowSettings);
  3140 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3142}","  3140 |         });
  3141 |
> 3142 |         it(""in text boxes"", function() {
       |        ^ Unknown Test
  3143 |             expect`\text{\error}`.toBuild(noThrowSettings);
  3144 |         });
  3145 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3212}","  3210 |
  3211 | describe(""The symbol table integrity"", function() {
> 3212 |     it(""should treat certain symbols as synonyms"", function() {
       |    ^ Unknown Test
  3213 |         expect`<`.toBuildLike`\lt`;
  3214 |         expect`>`.toBuildLike`\gt`;
  3215 |         expect`\left<\frac{1}{x}\right>`.toBuildLike`\left\lt\frac{1}{x}\right\gt`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3230}","  3228 |
  3229 | describe(""A macro expander"", function() {
> 3230 |     it(""should produce individual tokens"", function() {
       |    ^ Unknown Test
  3231 |         expect`e^\foo`.toParseLike(""e^1 23"",
  3232 |             new Settings({macros: {""\\foo"": ""123""}}));
  3233 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3235}","  3233 |     });
  3234 |
> 3235 |     it(""should preserve leading spaces inside macro definition"", function() {
       |    ^ Unknown Test
  3236 |         expect`\text{\foo}`.toParseLike(r`\text{ x}`,
  3237 |             new Settings({macros: {""\\foo"": "" x""}}));
  3238 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3240}","  3238 |     });
  3239 |
> 3240 |     it(""should preserve leading spaces inside macro argument"", function() {
       |    ^ Unknown Test
  3241 |         expect`\text{\foo{ x}}`.toParseLike(r`\text{ x}`,
  3242 |             new Settings({macros: {""\\foo"": ""#1""}}));
  3243 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3245}","  3243 |     });
  3244 |
> 3245 |     it(""should ignore expanded spaces in math mode"", function() {
       |    ^ Unknown Test
  3246 |         expect`\foo`.toParseLike(""x"", new Settings({macros: {""\\foo"": "" x""}}));
  3247 |     });
  3248 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3249}","  3247 |     });
  3248 |
> 3249 |     it(""should consume spaces after control-word macro"", function() {
       |    ^ Unknown Test
  3250 |         expect`\text{\foo }`.toParseLike(r`\text{x}`,
  3251 |             new Settings({macros: {""\\foo"": ""x""}}));
  3252 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3254}","  3252 |     });
  3253 |
> 3254 |     it(""should consume spaces after macro with \\relax"", function() {
       |    ^ Unknown Test
  3255 |         expect`\text{\foo }`.toParseLike(r`\text{}`,
  3256 |             new Settings({macros: {""\\foo"": ""\\relax""}}));
  3257 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3259}","  3257 |     });
  3258 |
> 3259 |     it(""should not consume spaces after control-word expansion"", function() {
       |    ^ Unknown Test
  3260 |         expect`\text{\\ }`.toParseLike(r`\text{ }`,
  3261 |             new Settings({macros: {""\\\\"": ""\\relax""}}));
  3262 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3264}","  3262 |     });
  3263 |
> 3264 |     it(""should consume spaces after \\relax"", function() {
       |    ^ Unknown Test
  3265 |         expect`\text{\relax }`.toParseLike`\text{}`;
  3266 |     });
  3267 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3268}","  3266 |     });
  3267 |
> 3268 |     it(""should consume spaces after control-word function"", function() {
       |    ^ Unknown Test
  3269 |         expect`\text{\KaTeX }`.toParseLike`\text{\KaTeX}`;
  3270 |     });
  3271 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3272}","  3270 |     });
  3271 |
> 3272 |     it(""should preserve spaces after control-symbol macro"", function() {
       |    ^ Unknown Test
  3273 |         expect`\text{\% y}`.toParseLike(r`\text{x y}`,
  3274 |             new Settings({macros: {""\\%"": ""x""}}));
  3275 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3277}","  3275 |     });
  3276 |
> 3277 |     it(""should preserve spaces after control-symbol function"", function() {
       |    ^ Unknown Test
  3278 |         expect`\text{\' }`.toParse();
  3279 |     });
  3280 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3281}","  3279 |     });
  3280 |
> 3281 |     it(""should consume spaces between arguments"", function() {
       |    ^ Unknown Test
  3282 |         expect`\text{\foo 1 2}`.toParseLike(r`\text{12end}`,
  3283 |             new Settings({macros: {""\\foo"": ""#1#2end""}}));
  3284 |         expect`\text{\foo {1} {2}}`.toParseLike(r`\text{12end}`,",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3288}","  3286 |     });
  3287 |
> 3288 |     it(""should allow for multiple expansion"", function() {
       |    ^ Unknown Test
  3289 |         expect`1\foo2`.toParseLike(""1aa2"", new Settings({macros: {
  3290 |             ""\\foo"": ""\\bar\\bar"",
  3291 |             ""\\bar"": ""a"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3295}","  3293 |     });
  3294 |
> 3295 |     it(""should allow for multiple expansion with argument"", function() {
       |    ^ Unknown Test
  3296 |         expect`1\foo2`.toParseLike(""12222"", new Settings({macros: {
  3297 |             ""\\foo"": ""\\bar{#1}\\bar{#1}"",
  3298 |             ""\\bar"": ""#1#1"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3302}","  3300 |     });
  3301 |
> 3302 |     it(""should allow for macro argument"", function() {
       |    ^ Unknown Test
  3303 |         expect`\foo\bar`.toParseLike(""(xyz)"", new Settings({macros: {
  3304 |             ""\\foo"": ""(#1)"",
  3305 |             ""\\bar"": ""xyz"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3309}","  3307 |     });
  3308 |
> 3309 |     it(""should allow properly nested group for macro argument"", function() {
       |    ^ Unknown Test
  3310 |         expect`\foo{e^{x_{12}+3}}`.toParseLike(""(e^{x_{12}+3})"",
  3311 |             new Settings({macros: {""\\foo"": ""(#1)""}}));
  3312 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3314}","  3312 |     });
  3313 |
> 3314 |     it(""should delay expansion if preceded by \\expandafter"", function() {
       |    ^ Unknown Test
  3315 |         expect`\expandafter\foo\bar`.toParseLike(""x+y"", new Settings({macros: {
  3316 |             ""\\foo"": ""#1+#2"",
  3317 |             ""\\bar"": ""xy"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3324}","  3322 |     });
  3323 |
> 3324 |     it(""should not expand if preceded by \\noexpand"", function() {
       |    ^ Unknown Test
  3325 |         // \foo is not expanded and interpreted as if its meaning were \relax
  3326 |         expect`\noexpand\foo y`.toParseLike(""y"",
  3327 |             new Settings({macros: {""\\foo"": ""x""}}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3337}","  3335 |     });
  3336 |
> 3337 |     it(""should allow for space macro argument (text version)"", function() {
       |    ^ Unknown Test
  3338 |         expect`\text{\foo\bar}`.toParseLike(r`\text{( )}`, new Settings({macros: {
  3339 |             ""\\foo"": ""(#1)"",
  3340 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3344}","  3342 |     });
  3343 |
> 3344 |     it(""should allow for space macro argument (math version)"", function() {
       |    ^ Unknown Test
  3345 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3346 |             ""\\foo"": ""(#1)"",
  3347 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3351}","  3349 |     });
  3350 |
> 3351 |     it(""should allow for space second argument (text version)"", function() {
       |    ^ Unknown Test
  3352 |         expect`\text{\foo\bar\bar}`.toParseLike(r`\text{( , )}`, new Settings({macros: {
  3353 |             ""\\foo"": ""(#1,#2)"",
  3354 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3358}","  3356 |     });
  3357 |
> 3358 |     it(""should treat \\relax as empty argument"", function() {
       |    ^ Unknown Test
  3359 |         expect`\text{\foo\relax x}`.toParseLike(r`\text{(,x)}`, new Settings({macros: {
  3360 |             ""\\foo"": ""(#1,#2)"",
  3361 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3364}","  3362 |     });
  3363 |
> 3364 |     it(""should allow for space second argument (math version)"", function() {
       |    ^ Unknown Test
  3365 |         expect`\foo\bar\bar`.toParseLike(""(,)"", new Settings({macros: {
  3366 |             ""\\foo"": ""(#1,#2)"",
  3367 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3371}","  3369 |     });
  3370 |
> 3371 |     it(""should allow for empty macro argument"", function() {
       |    ^ Unknown Test
  3372 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3373 |             ""\\foo"": ""(#1)"",
  3374 |             ""\\bar"": """",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3378}","  3376 |     });
  3377 |
> 3378 |     it(""should allow for space function arguments"", function() {
       |    ^ Unknown Test
  3379 |         expect`\frac\bar\bar`.toParseLike(r`\frac{}{}`, new Settings({macros: {
  3380 |             ""\\bar"": "" "",
  3381 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3384}","  3382 |     });
  3383 |
> 3384 |     it(""should build \\overset and \\underset"", function() {
       |    ^ Unknown Test
  3385 |         expect`\overset{f}{\rightarrow} Y`.toBuild();
  3386 |         expect`\underset{f}{\rightarrow} Y`.toBuild();
  3387 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3389}","  3387 |     });
  3388 |
> 3389 |     it(""should build \\iff, \\implies, \\impliedby"", function() {
       |    ^ Unknown Test
  3390 |         expect`X \iff Y`.toBuild();
  3391 |         expect`X \implies Y`.toBuild();
  3392 |         expect`X \impliedby Y`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3395}","  3393 |     });
  3394 |
> 3395 |     it(""should allow aliasing characters"", function() {
       |    ^ Unknown Test
  3396 |         expect`x’=c`.toParseLike(""x'=c"", new Settings({macros: {
  3397 |             ""’"": ""'"",
  3398 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3401}","  3399 |     });
  3400 |
> 3401 |     it(""\\@firstoftwo should consume both, and avoid errors"", function() {
       |    ^ Unknown Test
  3402 |         expect`\@firstoftwo{yes}{no}`.toParseLike`yes`;
  3403 |         expect`\@firstoftwo{yes}{1'_2^3}`.toParseLike`yes`;
  3404 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3406}","  3404 |     });
  3405 |
> 3406 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3407 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3408 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3409 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3411}","  3409 |     });
  3410 |
> 3411 |     it(""\\@ifnextchar should not consume nonspaces"", function() {
       |    ^ Unknown Test
  3412 |         expect`\@ifnextchar!{yes}{no}!!`.toParseLike`yes!!`;
  3413 |         expect`\@ifnextchar!{yes}{no}?!`.toParseLike`no?!`;
  3414 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3416}","  3414 |     });
  3415 |
> 3416 |     it(""\\@ifnextchar should consume spaces"", function() {
       |    ^ Unknown Test
  3417 |         expect`\def\x#1{\@ifnextchar x{yes}{no}}\x{}x\x{} x`
  3418 |             .toParseLike`yesxyesx`;
  3419 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3421}","  3419 |     });
  3420 |
> 3421 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3422 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3423 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3424 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3426}","  3424 |     });
  3425 |
> 3426 |     it(""\\TextOrMath should work immediately"", function() {
       |    ^ Unknown Test
  3427 |         expect`\TextOrMath{text}{math}`.toParseLike`math`;
  3428 |     });
  3429 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3430}","  3428 |     });
  3429 |
> 3430 |     it(""\\TextOrMath should work after other math"", function() {
       |    ^ Unknown Test
  3431 |         expect`x+\TextOrMath{text}{math}`.toParseLike`x+math`;
  3432 |     });
  3433 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3434}","  3432 |     });
  3433 |
> 3434 |     it(""\\TextOrMath should work immediately after \\text"", function() {
       |    ^ Unknown Test
  3435 |         expect`\text{\TextOrMath{text}{math}}`.toParseLike`\text{text}`;
  3436 |     });
  3437 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3438}","  3436 |     });
  3437 |
> 3438 |     it(""\\TextOrMath should work later after \\text"", function() {
       |    ^ Unknown Test
  3439 |         expect`\text{hello \TextOrMath{text}{math}}`.toParseLike`\text{hello text}`;
  3440 |     });
  3441 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3442}","  3440 |     });
  3441 |
> 3442 |     it(""\\TextOrMath should work immediately after \\text ends"", function() {
       |    ^ Unknown Test
  3443 |         expect`\text{\TextOrMath{text}{math}}\TextOrMath{text}{math}`
  3444 |             .toParseLike`\text{text}math`;
  3445 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3447}","  3445 |     });
  3446 |
> 3447 |     it(""\\TextOrMath should work immediately after $"", function() {
       |    ^ Unknown Test
  3448 |         expect`\text{$\TextOrMath{text}{math}$}`.toParseLike`\text{$math$}`;
  3449 |     });
  3450 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3451}","  3449 |     });
  3450 |
> 3451 |     it(""\\TextOrMath should work later after $"", function() {
       |    ^ Unknown Test
  3452 |         expect`\text{$x+\TextOrMath{text}{math}$}`.toParseLike`\text{$x+math$}`;
  3453 |     });
  3454 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3455}","  3453 |     });
  3454 |
> 3455 |     it(""\\TextOrMath should work immediately after $ ends"", function() {
       |    ^ Unknown Test
  3456 |         expect`\text{$\TextOrMath{text}{math}$\TextOrMath{text}{math}}`
  3457 |             .toParseLike`\text{$math$text}`;
  3458 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3460}","  3458 |     });
  3459 |
> 3460 |     it(""\\TextOrMath should work in a macro"", function() {
       |    ^ Unknown Test
  3461 |         expect`\mode\text{\mode$\mode$\mode}\mode`
  3462 |             .toParseLike(r`math\text{text$math$text}math`, new Settings({macros: {
  3463 |                 ""\\mode"": ""\\TextOrMath{text}{math}"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3467}","  3465 |     });
  3466 |
> 3467 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3468 |         expect`\text\mode`.toParseLike(r`\text t`, new Settings({macros:
  3469 |             {""\\mode"": ""\\TextOrMath{t}{m}""}}));
  3470 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3499}","  3497 |     });
  3498 |
> 3499 |     it(""should build Unicode private area characters"", function() {
       |    ^ Unknown Test
  3500 |         expect`\gvertneqq\lvertneqq\ngeqq\ngeqslant\nleqq`.toBuild();
  3501 |         expect`\nleqslant\nshortmid\nshortparallel\varsubsetneq`.toBuild();
  3502 |         expect`\varsubsetneqq\varsupsetneq\varsupsetneqq`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3505}","  3503 |     });
  3504 |
> 3505 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3506 |         expect`\text\mode`.toParseLike(r`\text{text}`, new Settings({macros:
  3507 |             {""\\mode"": ""\\TextOrMath{text}{math}""}}));
  3508 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3510}","  3508 |     });
  3509 |
> 3510 |     it(""\\gdef defines macros"", function() {
       |    ^ Unknown Test
  3511 |         expect`\gdef\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3512 |         expect`\gdef\foo{hi}\foo+\text\foo`.toParseLike`hi+\text{hi}`;
  3513 |         expect`\gdef\foo#1{hi #1}\text{\foo{Alice}, \foo{Bob}}`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3528}","  3526 |     });
  3527 |
> 3528 |     it(""\\gdef defines macros with delimited parameter"", function() {
       |    ^ Unknown Test
  3529 |         expect`\gdef\foo|#1||{#1}\text{\foo| x y ||}`.toParseLike`\text{ x y }`;
  3530 |         expect`\gdef\foo#1|#2{#1+#2}\foo 1 2 |34`.toParseLike`12+34`;
  3531 |         expect`\gdef\foo#1#{#1}\foo1^{23}`.toParseLike`1^{23}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3537}","  3535 |     });
  3536 |
> 3537 |     it(""\\xdef should expand definition"", function() {
       |    ^ Unknown Test
  3538 |         expect`\def\foo{a}\xdef\bar{\foo}\def\foo{}\bar`.toParseLike`a`;
  3539 |         // \def\noexpand\foo{} expands into \def\foo{}
  3540 |         expect`\def\foo{a}\xdef\bar{\def\noexpand\foo{}}\foo\bar\foo`.toParseLike`a`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3547}","  3545 |     });
  3546 |
> 3547 |     it(""\\def should be handled in Parser"", () => {
       |    ^ Unknown Test
  3548 |         expect`\gdef\foo{1}`.toParse(new Settings({maxExpand: 0}));
  3549 |         expect`2^\def\foo{1}2`.not.toParse();
  3550 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3552}","  3550 |     });
  3551 |
> 3552 |     it(""\\def works locally"", () => {
       |    ^ Unknown Test
  3553 |         expect`\def\x{1}\x{\def\x{2}\x{\def\x{3}\x}\x}\x`
  3554 |             .toParseLike`1{2{3}2}1`;
  3555 |         expect`\def\x{1}\x\def\x{2}\x{\def\x{3}\x\def\x{4}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3559}","  3557 |     });
  3558 |
> 3559 |     it(""\\gdef overrides at all levels"", () => {
       |    ^ Unknown Test
  3560 |         expect`\def\x{1}\x{\def\x{2}\x{\gdef\x{3}\x}\x}\x`
  3561 |             .toParseLike`1{2{3}3}3`;
  3562 |         expect`\def\x{1}\x{\def\x{2}\x{\global\def\x{3}\x}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3568}","  3566 |     });
  3567 |
> 3568 |     it(""\\global needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3569 |         expect`\global\def\foo{}\foo`.toParseLike``;
  3570 |         expect`\global\edef\foo{}\foo`.toParseLike``;
  3571 |         expect`\def\DEF{\def}\global\DEF\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3578}","  3576 |     });
  3577 |
> 3578 |     it(""\\long needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3579 |         expect`\long\def\foo{}\foo`.toParseLike``;
  3580 |         expect`\long\edef\foo{}\foo`.toParseLike``;
  3581 |         expect`\long\global\def\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3585}","  3583 |     });
  3584 |
> 3585 |     it(""Macro arguments do not generate groups"", () => {
       |    ^ Unknown Test
  3586 |         expect`\def\x{1}\x\def\foo#1{#1}\foo{\x\def\x{2}\x}\x`
  3587 |             .toParseLike`1122`;
  3588 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3590}","  3588 |     });
  3589 |
> 3590 |     it(""\\textbf arguments do generate groups"", () => {
       |    ^ Unknown Test
  3591 |         expect`\def\x{1}\x\textbf{\x\def\x{2}\x}\x`.toParseLike`1\textbf{12}1`;
  3592 |     });
  3593 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3594}","  3592 |     });
  3593 |
> 3594 |     it(""\\sqrt optional arguments generate groups"", () => {
       |    ^ Unknown Test
  3595 |         expect`\def\x{1}\def\y{1}\x\y\sqrt[\def\x{2}\x]{\def\y{2}\y}\x\y`
  3596 |             .toParseLike`11\sqrt[2]{2}11`;
  3597 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3599}","  3597 |     });
  3598 |
> 3599 |     it(""array cells generate groups"", () => {
       |    ^ Unknown Test
  3600 |         expect`\def\x{1}\begin{matrix}\x&\def\x{2}\x&\x\end{matrix}\x`
  3601 |             .toParseLike`\begin{matrix}1&2&1\end{matrix}1`;
  3602 |         expect`\def\x{1}\begin{matrix}\def\x{2}\x&\x\end{matrix}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3630}","  3628 |     });
  3629 |
> 3630 |     it(""\\let copies the definition"", () => {
       |    ^ Unknown Test
  3631 |         expect`\let\foo=\frac\def\frac{}\foo12`.toParseLike`\frac12`;
  3632 |         expect`\def\foo{1}\let\bar\foo\def\foo{2}\bar`.toParseLike`1`;
  3633 |         expect`\let\foo=\kern\edef\bar{\foo1em}\let\kern=\relax\bar`.toParseLike`\kern1em`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3650}","  3648 |     });
  3649 |
> 3650 |     it(""\\futurelet should parse correctly"", () => {
       |    ^ Unknown Test
  3651 |         expect`\futurelet\foo\frac1{2+\foo}`.toParseLike`\frac1{2+1}`;
  3652 |     });
  3653 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3654}","  3652 |     });
  3653 |
> 3654 |     it(""macros argument can simulate \\let"", () => {
       |    ^ Unknown Test
  3655 |         expect`\int`.toParseLike(""\\int\\limits"", {macros: {
  3656 |             ""\\Oldint"": {
  3657 |                 tokens: [{text: ""\\int"", noexpand: true}],",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3681}","  3679 |     });
  3680 |
> 3681 |     it(""\\newcommand defines new macros"", () => {
       |    ^ Unknown Test
  3682 |         expect`\newcommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3683 |         expect`\newcommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3684 |         // Function detection",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3696}","  3694 |     });
  3695 |
> 3696 |     it(""\\renewcommand redefines macros"", () => {
       |    ^ Unknown Test
  3697 |         expect`\renewcommand\foo{x^2}\foo+\foo`.not.toParse();
  3698 |         expect`\renewcommand{\foo}{x^2}\foo+\foo`.not.toParse();
  3699 |         expect`\renewcommand\bar{x^2}\bar+\bar`.toParseLike`x^2+x^2`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3704}","  3702 |     });
  3703 |
> 3704 |     it(""\\providecommand defines but does not redefine macros"", () => {
       |    ^ Unknown Test
  3705 |         expect`\providecommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3706 |         expect`\providecommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3707 |         expect`\newcommand{\foo}{1}\foo\providecommand{\foo}{2}\foo`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3715}","  3713 |     });
  3714 |
> 3715 |     it(""\\newcommand is local"", () => {
       |    ^ Unknown Test
  3716 |         expect`\newcommand\foo{1}\foo{\renewcommand\foo{2}\foo}\foo`
  3717 |             .toParseLike`1{2}1`;
  3718 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3720}","  3718 |     });
  3719 |
> 3720 |     it(""\\newcommand accepts number of arguments"", () => {
       |    ^ Unknown Test
  3721 |         expect`\newcommand\foo[1]{#1^2}\foo x+\foo{y}`.toParseLike`x^2+y^2`;
  3722 |         expect`\newcommand\foo[10]{#1^2}\foo 0123456789`.toParseLike`0^2`;
  3723 |         expect`\newcommand\foo[x]{}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3729}","  3727 |     // This may change in the future, if we support the extra features of
  3728 |     // \hspace.
> 3729 |     it(""should treat \\hspace, \\hskip like \\kern"", function() {
       |    ^ Unknown Test
  3730 |         expect`\hspace{1em}`.toParseLike`\kern1em`;
  3731 |         expect`\hskip{1em}`.toParseLike`\kern1em`;
  3732 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3734}","  3732 |     });
  3733 |
> 3734 |     it(""should expand \\limsup as expected"", () => {
       |    ^ Unknown Test
  3735 |         expect`\limsup`.toParseLike`\operatorname*{lim\,sup}`;
  3736 |     });
  3737 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3738}","  3736 |     });
  3737 |
> 3738 |     it(""should expand \\liminf as expected"", () => {
       |    ^ Unknown Test
  3739 |         expect`\liminf`.toParseLike`\operatorname*{lim\,inf}`;
  3740 |     });
  3741 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3742}","  3740 |     });
  3741 |
> 3742 |     it(""should expand AMS log-like symbols as expected"", () => {
       |    ^ Unknown Test
  3743 |         expect`\injlim`.toParseLike`\operatorname*{inj\,lim}`;
  3744 |         expect`\projlim`.toParseLike`\operatorname*{proj\,lim}`;
  3745 |         expect`\varlimsup`.toParseLike`\operatorname*{\overline{lim}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3752}","  3750 |     });
  3751 |
> 3752 |     it(""should expand \\plim as expected"", () => {
       |    ^ Unknown Test
  3753 |         expect`\plim`.toParseLike`\mathop{\operatorname{plim}}\limits`;
  3754 |     });
  3755 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3756}","  3754 |     });
  3755 |
> 3756 |     it(""should expand \\argmin as expected"", () => {
       |    ^ Unknown Test
  3757 |         expect`\argmin`.toParseLike`\operatorname*{arg\,min}`;
  3758 |     });
  3759 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3760}","  3758 |     });
  3759 |
> 3760 |     it(""should expand \\argmax as expected"", () => {
       |    ^ Unknown Test
  3761 |         expect`\argmax`.toParseLike`\operatorname*{arg\,max}`;
  3762 |     });
  3763 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3764}","  3762 |     });
  3763 |
> 3764 |     it(""should expand \\bra as expected"", () => {
       |    ^ Unknown Test
  3765 |         expect`\bra{\phi}`.toParseLike`\mathinner{\langle{\phi}|}`;
  3766 |     });
  3767 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3768}","  3766 |     });
  3767 |
> 3768 |     it(""should expand \\ket as expected"", () => {
       |    ^ Unknown Test
  3769 |         expect`\ket{\psi}`.toParseLike`\mathinner{|{\psi}\rangle}`;
  3770 |     });
  3771 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3772}","  3770 |     });
  3771 |
> 3772 |     it(""should expand \\braket as expected"", () => {
       |    ^ Unknown Test
  3773 |         expect`\braket{\phi|\psi}`.toParseLike`\mathinner{\langle{\phi|\psi}\rangle}`;
  3774 |     });
  3775 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3776}","  3774 |     });
  3775 |
> 3776 |     it(""should expand \\Bra as expected"", () => {
       |    ^ Unknown Test
  3777 |         expect`\Bra{\phi}`.toParseLike`\left\langle\phi\right|`;
  3778 |     });
  3779 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3780}","  3778 |     });
  3779 |
> 3780 |     it(""should expand \\Ket as expected"", () => {
       |    ^ Unknown Test
  3781 |         expect`\Ket{\psi}`.toParseLike`\left|\psi\right\rangle`;
  3782 |     });
  3783 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3784}","  3782 |     });
  3783 |
> 3784 |     it(""should expand \\Braket as expected"", () => {
       |    ^ Unknown Test
  3785 |         expect`\Braket{ ϕ | \frac{∂^2}{∂ t^2} | ψ }`.toParseLike`\left\langle ϕ\,\middle\vert\,\frac{∂^2}{∂ t^2}\,\middle\vert\, ψ\right\rangle`;
  3786 |     });
  3787 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3788}","  3786 |     });
  3787 |
> 3788 |     it(""should expand \\set as expected"", () => {
       |    ^ Unknown Test
  3789 |         expect`\set{x|x<5|S|}`.toParseLike`\{\,x\mid x<5|S|\,\}`;
  3790 |         // \set doesn't support special || or \| handling
  3791 |         expect`\set{x||x<5|S|}`.toParseLike`\{\,x\mid |x<5|S|\,\}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3795}","  3793 |     });
  3794 |
> 3795 |     it(""should expand \\Set as expected"", () => {
       |    ^ Unknown Test
  3796 |         expect`\Set{ x | x<\frac 1 2 |S| }`
  3797 |         .toParseLike`\left\{\: x\;\middle\vert\; x<\frac 1 2 |S| \:\right\}`;
  3798 |         expect`\Set{ x || x<\frac 1 2 |S| }`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3808}","  3806 |     const displayMode = new Settings({displayMode: true});
  3807 |
> 3808 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  3809 |         expect`\tag{hi}x+y`.not.toParse();
  3810 |     });
  3811 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3812}","  3810 |     });
  3811 |
> 3812 |     it(""should fail with multiple tags"", () => {
       |    ^ Unknown Test
  3813 |         expect`\tag{1}\tag{2}x+y`.not.toParse(displayMode);
  3814 |     });
  3815 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3816}","  3814 |     });
  3815 |
> 3816 |     it(""should fail with multiple tags in one row"", () => {
       |    ^ Unknown Test
  3817 |         expect`\begin{align}\tag{1}x+y\tag{2}\end{align}`.not.toParse(displayMode);
  3818 |     });
  3819 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3820}","  3818 |     });
  3819 |
> 3820 |     it(""should work with one tag per row"", () => {
       |    ^ Unknown Test
  3821 |         expect`\begin{align}\tag{1}x\\&+y\tag{2}\end{align}`.toParse(displayMode);
  3822 |     });
  3823 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3824}","  3822 |     });
  3823 |
> 3824 |     it(""should work with \\nonumber/\\notag"", () => {
       |    ^ Unknown Test
  3825 |         expect`\begin{align}\tag{1}\nonumber x\\&+y\notag\end{align}`
  3826 |         .toParseLike(r`\begin{align}\tag{1}x\\&+y\nonumber\end{align}`, displayMode);
  3827 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3829}","  3827 |     });
  3828 |
> 3829 |     it(""should build"", () => {
       |    ^ Unknown Test
  3830 |         expect`\tag{hi}x+y`.toBuild(displayMode);
  3831 |     });
  3832 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3833}","  3831 |     });
  3832 |
> 3833 |     it(""should ignore location of \\tag"", () => {
       |    ^ Unknown Test
  3834 |         expect`\tag{hi}x+y`.toParseLike(r`x+y\tag{hi}`, displayMode);
  3835 |     });
  3836 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3837}","  3835 |     });
  3836 |
> 3837 |     it(""should handle \\tag* like \\tag"", () => {
       |    ^ Unknown Test
  3838 |         expect`\tag{hi}x+y`.toParseLike(r`\tag*{({hi})}x+y`, displayMode);
  3839 |     });
  3840 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3866}","  3864 |
  3865 | describe(""\\@binrel automatic bin/rel/ord"", () => {
> 3866 |     it(""should generate proper class"", () => {
       |    ^ Unknown Test
  3867 |         expect`L\@binrel+xR`.toParseLike`L\mathbin xR`;
  3868 |         expect`L\@binrel=xR`.toParseLike`L\mathrel xR`;
  3869 |         expect`L\@binrel xxR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3875}","  3873 |     });
  3874 |
> 3875 |     it(""should base on just first character in group"", () => {
       |    ^ Unknown Test
  3876 |         expect`L\@binrel{+x}xR`.toParseLike`L\mathbin xR`;
  3877 |         expect`L\@binrel{=x}xR`.toParseLike`L\mathrel xR`;
  3878 |         expect`L\@binrel{xx}xR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3895}","  3893 |
  3894 | describe(""Unicode accents"", function() {
> 3895 |     it(""should parse Latin-1 letters in math mode"", function() {
       |    ^ Unknown Test
  3896 |         // TODO(edemaine): Unsupported Latin-1 letters in math: ÇÐÞçðþ
  3897 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ`
  3898 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3915}","  3913 |     });
  3914 |
> 3915 |     it(""should parse Latin-1 letters in text mode"", function() {
       |    ^ Unknown Test
  3916 |         // TODO(edemaine): Unsupported Latin-1 letters in text: ÇÐÞçðþ
  3917 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}`
  3918 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3935}","  3933 |     });
  3934 |
> 3935 |     it(""should support \\aa in text mode"", function() {
       |    ^ Unknown Test
  3936 |         expect`\text{\aa\AA}`.toParseLike(r`\text{\r a\r A}`, strictSettings);
  3937 |         expect`\aa`.not.toParse(strictSettings);
  3938 |         expect`\Aa`.not.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3946}","  3944 |     });
  3945 |
> 3946 |     it(""should parse multi-accented characters"", function() {
       |    ^ Unknown Test
  3947 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3948 |         // Doesn't parse quite the same as
  3949 |         // ""\\text{\\'{\\^a}\\'{\\=a}\\'{\\u a}}"" because of the ordgroups.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3952}","  3950 |     });
  3951 |
> 3952 |     it(""should parse accented i's and j's"", function() {
       |    ^ Unknown Test
  3953 |         expect`íȷ́`.toParseLike(r`\acute ı\acute ȷ`, nonstrictSettings);
  3954 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3955 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3959}","  3957 |
  3958 | describe(""Unicode"", function() {
> 3959 |     it(""should parse negated relations"", function() {
       |    ^ Unknown Test
  3960 |         expect`∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌`.toParse(strictSettings);
  3961 |     });
  3962 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3963}","  3961 |     });
  3962 |
> 3963 |     it(""should build relations"", function() {
       |    ^ Unknown Test
  3964 |         expect`∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌`.toBuild(strictSettings);
  3965 |     });
  3966 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3967}","  3965 |     });
  3966 |
> 3967 |     it(""should parse relations"", function() {
       |    ^ Unknown Test
  3968 |         // These characters are not in the KaTeX fonts. So they build with an error message.
  3969 |         expect`⊶⊷`.toParse();
  3970 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3972}","  3970 |     });
  3971 |
> 3972 |     it(""should build big operators"", function() {
       |    ^ Unknown Test
  3973 |         expect`∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆`.toBuild(strictSettings);
  3974 |     });
  3975 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3976}","  3974 |     });
  3975 |
> 3976 |     it(""should build more relations"", function() {
       |    ^ Unknown Test
  3977 |         expect`⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋`.toBuild(strictSettings);
  3978 |     });
  3979 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3990}","  3988 |     });
  3989 |
> 3990 |     it(""should build arrows"", function() {
       |    ^ Unknown Test
  3991 |         expect`←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉`.toBuild(strictSettings);
  3992 |     });
  3993 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3994}","  3992 |     });
  3993 |
> 3994 |     it(""should build more arrows"", function() {
       |    ^ Unknown Test
  3995 |         expect`⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼`.toBuild(strictSettings);
  3996 |     });
  3997 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4080}","  4078 |
  4079 | describe(""The maxExpand setting"", () => {
> 4080 |     it(""should prevent expansion"", () => {
       |    ^ Unknown Test
  4081 |         expect`\gdef\foo{1}\foo`.toParse();
  4082 |         expect`\gdef\foo{1}\foo`.toParse(new Settings({maxExpand: 1}));
  4083 |         expect`\gdef\foo{1}\foo`.not.toParse(new Settings({maxExpand: 0}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4086}","  4084 |     });
  4085 |
> 4086 |     it(""should prevent infinite loops"", () => {
       |    ^ Unknown Test
  4087 |         expect`\gdef\foo{\foo}\foo`.not.toParse(
  4088 |             new Settings({maxExpand: 10}));
  4089 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4091}","  4089 |     });
  4090 |
> 4091 |     it(""should prevent exponential blowup via \\edef"", () => {
       |    ^ Unknown Test
  4092 |         expect`\edef0{x}\edef0{00}\edef0{00}\edef0{00}\edef0{00}`.not.toParse(
  4093 |             new Settings({maxExpand: 10}));
  4094 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4142}","  4140 |
  4141 | describe(""Newlines via \\\\ and \\newline"", function() {
> 4142 |     it(""should build \\\\ without the optional argument and \\newline the same"", () => {
       |    ^ Unknown Test
  4143 |         expect`hello \\ world`.toBuildLike`hello \newline world`;
  4144 |     });
  4145 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4146}","  4144 |     });
  4145 |
> 4146 |     it(""should not allow \\newline to scan for an optional size argument"", () => {
       |    ^ Unknown Test
  4147 |         expect`hello \newline[w]orld`.toBuild();
  4148 |     });
  4149 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4150}","  4148 |     });
  4149 |
> 4150 |     it(""should not allow \\cr at top level"", () => {
       |    ^ Unknown Test
  4151 |         expect`hello \cr world`.not.toBuild();
  4152 |     });
  4153 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4165}","  4163 |
  4164 | describe(""Symbols"", function() {
> 4165 |     it(""should parse \\text{\\i\\j}"", () => {
       |    ^ Unknown Test
  4166 |         expect`\text{\i\j}`.toBuild(strictSettings);
  4167 |     });
  4168 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4169}","  4167 |     });
  4168 |
> 4169 |     it(""should parse spacing functions in math or text mode"", () => {
       |    ^ Unknown Test
  4170 |         expect`A\;B\,C\nobreakspace \text{A\;B\,C\nobreakspace}`.toBuild(strictSettings);
  4171 |     });
  4172 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4173}","  4171 |     });
  4172 |
> 4173 |     it(""should build \\minuso"", () => {
       |    ^ Unknown Test
  4174 |         expect`\\minuso`.toBuild(strictSettings);
  4175 |     });
  4176 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4177}","  4175 |     });
  4176 |
> 4177 |     it(""should render ligature commands like their unicode characters"", () => {
       |    ^ Unknown Test
  4178 |         expect`\text{\ae\AE\oe\OE\o\O\ss}`.toBuildLike(r`\text{æÆœŒøØß}`, strictSettings);
  4179 |     });
  4180 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4183}","  4181 |
  4182 | describe(""strict setting"", function() {
> 4183 |     it(""should allow unicode text when not strict"", () => {
       |    ^ Unknown Test
  4184 |         expect`é`.toParse(new Settings(nonstrictSettings));
  4185 |         expect`試`.toParse(new Settings(nonstrictSettings));
  4186 |         expect`é`.toParse(new Settings({strict: ""ignore""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4194}","  4192 |     });
  4193 |
> 4194 |     it(""should forbid unicode text when strict"", () => {
       |    ^ Unknown Test
  4195 |         expect`é`.not.toParse(new Settings({strict: true}));
  4196 |         expect`試`.not.toParse(new Settings({strict: true}));
  4197 |         expect`é`.not.toParse(new Settings({strict: ""error""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4205}","  4203 |     });
  4204 |
> 4205 |     it(""should warn about unicode text when default"", () => {
       |    ^ Unknown Test
  4206 |         expect`é`.toWarn(new Settings());
  4207 |         expect`試`.toWarn(new Settings());
  4208 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4210}","  4208 |     });
  4209 |
> 4210 |     it(""should always allow unicode text in text mode"", () => {
       |    ^ Unknown Test
  4211 |         expect`\text{é試}`.toParse(nonstrictSettings);
  4212 |         expect`\text{é試}`.toParse(strictSettings);
  4213 |         expect`\text{é試}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4216}","  4214 |     });
  4215 |
> 4216 |     it(""should warn about top-level \\newline in display mode"", () => {
       |    ^ Unknown Test
  4217 |         expect`x\\y`.toWarn(new Settings({displayMode: true}));
  4218 |         expect`x\\y`.toParse(new Settings({displayMode: false}));
  4219 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4265}","  4263 |         }).toThrow(errorMessage);
  4264 |     });
> 4265 |     it(""should add font metrics to metrics map and render successfully"", () => {
       |    ^ Unknown Test
  4266 |         const mockMetrics = {};
  4267 |         // mock font metrics for the symbols that we added previously
  4268 |         for (let number = 0; number <= 9; number++) {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4301}","  4299 |
  4300 | describe(""\\relax"", () => {
> 4301 |     it(""should stop the expansion"", () => {
       |    ^ Unknown Test
  4302 |         expect`\kern2\relax em`.not.toParse();
  4303 |     });
  4304 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4307}","  4305 |
  4306 | describe(""\\emph"", () => {
> 4307 |     it(""should toggle italics"", () => {
       |    ^ Unknown Test
  4308 |         expect`\emph{foo \emph{bar}}`.toBuildLike`\textit{foo \textup{bar}}`;
  4309 |     });
  4310 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4311}","  4309 |     });
  4310 |
> 4311 |     it(""should toggle italics within text"", () => {
       |    ^ Unknown Test
  4312 |         expect`\text{\emph{foo \emph{bar}}}`.toBuildLike`\text{\textit{foo \textup{bar}}}`;
  4313 |     });
  4314 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4315}","  4313 |     });
  4314 |
> 4315 |     it(""should toggle italics within textup"", () => {
       |    ^ Unknown Test
  4316 |         expect`\textup{\emph{foo \emph{bar}}}`.toBuildLike`\textup{\textit{foo \textup{bar}}}`;
  4317 |     });
  4318 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4319}","  4317 |     });
  4318 |
> 4319 |     it(""should toggle italics within textit"", () => {
       |    ^ Unknown Test
  4320 |         expect`\textit{\emph{foo \emph{bar}}}`.toBuildLike`\textit{\textup{foo \textit{bar}}}`;
  4321 |     });
  4322 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 132}","  130 |         });
  131 |         it(""complains about mismatched \\verb with end of line"", function() {
> 132 |             expect(""\\verb|hello\nworld|"").toFailWithParseError(
      |            ^ Redundant Assertion
  133 |                 ""\\verb ended by end of line instead of matching delimiter"");
  134 |         });
  135 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 291}","  289 |     describe(""#_innerLex"", function() {
  290 |         it(""rejects lone surrogate char"", function() {
> 291 |             expect(""\udcba "").toFailWithParseError(
      |            ^ Redundant Assertion
  292 |                    ""Unexpected character: '\udcba' at position 1:"" +
  293 |                     "" \udcba\u0332 "");
  294 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 296}","  294 |         });
  295 |         it(""rejects lone backslash at end of input"", function() {
> 296 |             expect(""\\"").toFailWithParseError(
      |            ^ Redundant Assertion
  297 |                    ""Unexpected character: '\\' at position 1: \\̲"");
  298 |         });
  299 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 8, 'line': 328}","  326 | describe(""Unicode accents"", function() {
  327 |     it(""should return error for invalid combining characters"", function() {
> 328 |         expect(""A\u0328"").toFailWithParseError(
      |        ^ Redundant Assertion
  329 |             ""Unknown accent ' ̨' at position 1: Ą̲̲"");
  330 |     });
  331 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 6}","  4 |
  5 |     describe(""#handleInfixNodes"", function() {
> 6 |         it(""rejects repeated infix operators"", function() {
    |        ^ Unknown Test
  7 |             expect`1\over 2\over 3`.toFailWithParseError(
  8 |                    ""only one infix operator per group at position 9: "" +
  9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 11}","   9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");
  10 |         });
> 11 |         it(""rejects conflicting infix operators"", function() {
     |        ^ Unknown Test
  12 |             expect`1\over 2\choose 3`.toFailWithParseError(
  13 |                    ""only one infix operator per group at position 9: "" +
  14 |                    ""1\\over 2\\̲c̲h̲o̲o̲s̲e̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 19}","  17 |
  18 |     describe(""#handleSupSubscript"", function() {
> 19 |         it(""rejects ^ at end of group"", function() {
     |        ^ Unknown Test
  20 |             expect`{1^}`.toFailWithParseError(
  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 23}","  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });
> 23 |         it(""rejects _ at end of input"", function() {
     |        ^ Unknown Test
  24 |             expect`1_`.toFailWithParseError(
  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 27}","  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });
> 27 |         it(""rejects \\sqrt as argument to ^"", function() {
     |        ^ Unknown Test
  28 |             expect`1^\sqrt{2}`.toFailWithParseError(
  29 |                    ""Got function '\\sqrt' with no arguments as superscript"" +
  30 |                    "" at position 3: 1^\\̲s̲q̲r̲t̲{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 35}","  33 |
  34 |     describe(""#parseAtom"", function() {
> 35 |         it(""rejects \\limits without operator"", function() {
     |        ^ Unknown Test
  36 |             expect`\alpha\limits\omega`.toFailWithParseError(
  37 |                    ""Limit controls must follow a math operator"" +
  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 40}","  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");
  39 |         });
> 40 |         it(""rejects \\limits at the beginning of the input"", function() {
     |        ^ Unknown Test
  41 |             expect`\limits\omega`.toFailWithParseError(
  42 |                    ""Limit controls must follow a math operator"" +
  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 45}","  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");
  44 |         });
> 45 |         it(""rejects double superscripts"", function() {
     |        ^ Unknown Test
  46 |             expect`1^2^3`.toFailWithParseError(
  47 |                    ""Double superscript at position 4: 1^2^̲3"");
  48 |             expect`1^{2+3}_4^5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 51}","  49 |                    ""Double superscript at position 10: 1^{2+3}_4^̲5"");
  50 |         });
> 51 |         it(""rejects double superscripts involving primes"", function() {
     |        ^ Unknown Test
  52 |             expect`1'_2^3`.toFailWithParseError(
  53 |                    ""Double superscript at position 5: 1'_2^̲3"");
  54 |             expect`1^2'`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 61}","  59 |                    ""Double superscript at position 5: 1'_2'̲"");
  60 |         });
> 61 |         it(""rejects double subscripts"", function() {
     |        ^ Unknown Test
  62 |             expect`1_2_3`.toFailWithParseError(
  63 |                    ""Double subscript at position 4: 1_2_̲3"");
  64 |             expect`1_{2+3}^4_5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 70}","  68 |
  69 |     describe(""#parseImplicitGroup"", function() {
> 70 |         it(""reports unknown environments"", function() {
     |        ^ Unknown Test
  71 |             expect`\begin{foo}bar\end{foo}`.toFailWithParseError(
  72 |                    ""No such environment: foo at position 7:"" +
  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 75}","  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");
  74 |         });
> 75 |         it(""reports mismatched environments"", function() {
     |        ^ Unknown Test
  76 |             expect`\begin{pmatrix}1&2\\3&4\end{bmatrix}+5`
  77 |                 .toFailWithParseError(
  78 |                    ""Mismatch: \\begin{pmatrix} matched by \\end{bmatrix}"" +",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 84}","  82 |
  83 |     describe(""#parseFunction"", function() {
> 84 |         it(""rejects math-mode functions in text mode"", function() {
     |        ^ Unknown Test
  85 |             expect`\text{\sqrt2 is irrational}`.toFailWithParseError(
  86 |                 ""Can't use function '\\sqrt' in text mode"" +
  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 89}","  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");
  88 |         });
> 89 |         it(""rejects text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  90 |             expect`$`.toFailWithParseError(
  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 93}","  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });
> 93 |         it(""rejects strict-mode text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  94 |             expect`\'echec`.toFailWithParseError(""LaTeX-incompatible input "" +
  95 |                 ""and strict mode is set to 'error': LaTeX's accent \\' works "" +
  96 |                 ""only in text mode [mathVsTextAccents]"", strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 101}","   99 |
  100 |     describe(""#parseArguments"", function() {
> 101 |         it(""complains about missing argument at end of input"", function() {
      |        ^ Unknown Test
  102 |             expect`2\sqrt`.toFailWithParseError(
  103 |                    ""Expected group as argument to '\\sqrt'"" +
  104 |                    "" at end of input: 2\\sqrt"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 106}","  104 |                    "" at end of input: 2\\sqrt"");
  105 |         });
> 106 |         it(""complains about missing argument at end of group"", function() {
      |        ^ Unknown Test
  107 |             expect`1^{2\sqrt}`.toFailWithParseError(
  108 |                    ""Expected group as argument to '\\sqrt'"" +
  109 |                    "" at position 10: 1^{2\\sqrt}̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 111}","  109 |                    "" at position 10: 1^{2\\sqrt}̲"");
  110 |         });
> 111 |         it(""complains about functions as arguments to others"", function() {
      |        ^ Unknown Test
  112 |             expect`\sqrt\over2`.toFailWithParseError(
  113 |                    ""Got function '\\over' with no arguments as argument to"" +
  114 |                    "" '\\sqrt' at position 6: \\sqrt\\̲o̲v̲e̲r̲2"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 119}","  117 |
  118 |     describe(""#parseGroup"", function() {
> 119 |         it(""complains about undefined control sequence"", function() {
      |        ^ Unknown Test
  120 |             expect`\xyz`.toFailWithParseError(
  121 |                    ""Undefined control sequence: \\xyz"" +
  122 |                    "" at position 1: \\̲x̲y̲z̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 127}","  125 |
  126 |     describe(""#verb"", function() {
> 127 |         it(""complains about mismatched \\verb with end of string"", function() {
      |        ^ Unknown Test
  128 |             expect`\verb|hello`.toFailWithParseError(
  129 |                 ""\\verb ended by end of line instead of matching delimiter"");
  130 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 142}","  140 |
  141 |     describe(""#parseInput expecting EOF"", function() {
> 142 |         it(""complains about extra }"", function() {
      |        ^ Unknown Test
  143 |             expect`{1+2}}`.toFailWithParseError(
  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 146}","  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });
> 146 |         it(""complains about extra \\end"", function() {
      |        ^ Unknown Test
  147 |             expect`x\end{matrix}`.toFailWithParseError(
  148 |                    ""Expected 'EOF', got '\\end' at position 2:"" +
  149 |                    "" x\\̲e̲n̲d̲{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 151}","  149 |                    "" x\\̲e̲n̲d̲{matrix}"");
  150 |         });
> 151 |         it(""complains about top-level &"", function() {
      |        ^ Unknown Test
  152 |             expect`1&2`.toFailWithParseError(
  153 |                    ""Expected 'EOF', got '&' at position 2: 1&̲2"");
  154 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 158}","  156 |
  157 |     describe(""#parseImplicitGroup expecting \\right"", function() {
> 158 |         it(""rejects missing \\right"", function() {
      |        ^ Unknown Test
  159 |             expect`\left(1+2)`.toFailWithParseError(
  160 |                    ""Expected '\\right', got 'EOF' at end of input:"" +
  161 |                    "" \\left(1+2)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 163}","  161 |                    "" \\left(1+2)"");
  162 |         });
> 163 |         it(""rejects incorrectly scoped \\right"", function() {
      |        ^ Unknown Test
  164 |             expect`{\left(1+2}\right)`.toFailWithParseError(
  165 |                    ""Expected '\\right', got '}' at position 11:"" +
  166 |                    "" {\\left(1+2}̲\\right)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 174}","  172 |
  173 |     describe(""#parseSpecialGroup expecting braces"", function() {
> 174 |         it(""complains about missing { for color"", function() {
      |        ^ Unknown Test
  175 |             expect`\textcolor#ffffff{text}`.toFailWithParseError(
  176 |                    ""Invalid color: '#' at position 11:"" +
  177 |                    "" \\textcolor#̲ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 179}","  177 |                    "" \\textcolor#̲ffffff{text}"");
  178 |         });
> 179 |         it(""complains about missing { for size"", function() {
      |        ^ Unknown Test
  180 |             expect`\rule{1em}[2em]`.toFailWithParseError(
  181 |                    ""Invalid size: '[' at position 11: \\rule{1em}[̲2em]"");
  182 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 184}","  182 |         });
  183 |         // Can't test for the [ of an optional group since it's optional
> 184 |         it(""complains about missing } for color"", function() {
      |        ^ Unknown Test
  185 |             expect`\textcolor{#ffffff{text}`.toFailWithParseError(
  186 |                    ""Unexpected end of input in a macro argument,"" +
  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 189}","  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");
  188 |         });
> 189 |         it(""complains about missing ] for size"", function() {
      |        ^ Unknown Test
  190 |             expect`\rule[1em{2em}{3em}`.toFailWithParseError(
  191 |                    ""Unexpected end of input in a macro argument,"" +
  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 194}","  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");
  193 |         });
> 194 |         it(""complains about missing ] for size at end of input"", function() {
      |        ^ Unknown Test
  195 |             expect`\rule[1em`.toFailWithParseError(
  196 |                    ""Unexpected end of input in a macro argument,"" +
  197 |                    "" expected ']' at end of input: \\rule[1em"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 199}","  197 |                    "" expected ']' at end of input: \\rule[1em"");
  198 |         });
> 199 |         it(""complains about missing } for color at end of input"", function() {
      |        ^ Unknown Test
  200 |             expect`\textcolor{#123456`.toFailWithParseError(
  201 |                    ""Unexpected end of input in a macro argument,"" +
  202 |                    "" expected '}' at end of input: …xtcolor{#123456"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 207}","  205 |
  206 |     describe(""#parseGroup expecting }"", function() {
> 207 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  208 |             expect`\sqrt{2`.toFailWithParseError(
  209 |                    ""Expected '}', got 'EOF' at end of input: \\sqrt{2"");
  210 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 214}","  212 |
  213 |     describe(""#parseOptionalGroup expecting ]"", function() {
> 214 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  215 |             expect`\sqrt[3`.toFailWithParseError(
  216 |                    ""Unexpected end of input in a macro argument,"" +
  217 |                    "" expected ']' at end of input: \\sqrt[3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 219}","  217 |                    "" expected ']' at end of input: \\sqrt[3"");
  218 |         });
> 219 |         it(""before group"", function() {
      |        ^ Unknown Test
  220 |             expect`\sqrt[3{2}`.toFailWithParseError(
  221 |                    ""Unexpected end of input in a macro argument,"" +
  222 |                    "" expected ']' at end of input: \\sqrt[3{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 231}","  229 |
  230 |     describe(""parseArray"", function() {
> 231 |         it(""rejects missing \\end"", function() {
      |        ^ Unknown Test
  232 |             expect`\begin{matrix}1`.toFailWithParseError(
  233 |                    ""Expected & or \\\\ or \\cr or \\end at end of input:"" +
  234 |                    "" \\begin{matrix}1"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 236}","  234 |                    "" \\begin{matrix}1"");
  235 |         });
> 236 |         it(""rejects incorrectly scoped \\end"", function() {
      |        ^ Unknown Test
  237 |             expect`{\begin{matrix}1}\end{matrix}`.toFailWithParseError(
  238 |                    ""Expected & or \\\\ or \\cr or \\end at position 17:"" +
  239 |                    "" …\\begin{matrix}1}̲\\end{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 244}","  242 |
  243 |     describe(""array environment"", function() {
> 244 |         it(""rejects unknown column types"", function() {
      |        ^ Unknown Test
  245 |             expect`\begin{array}{cba}\end{array}`.toFailWithParseError(
  246 |                    ""Unknown column alignment: b at position 16:"" +
  247 |                    "" \\begin{array}{cb̲a}\\end{array}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 256}","  254 |
  255 |     describe(""delimiter functions"", function() {
> 256 |         it(""reject invalid opening delimiters"", function() {
      |        ^ Unknown Test
  257 |             expect`\bigl 1 + 2 \bigr`.toFailWithParseError(
  258 |                    ""Invalid delimiter '1' after '\\bigl' at position 7:"" +
  259 |                    "" \\bigl 1̲ + 2 \\bigr"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 261}","  259 |                    "" \\bigl 1̲ + 2 \\bigr"");
  260 |         });
> 261 |         it(""reject invalid closing delimiters"", function() {
      |        ^ Unknown Test
  262 |             expect`\bigl(1+2\bigr=3`.toFailWithParseError(
  263 |                    ""Invalid delimiter '=' after '\\bigr' at position 15:"" +
  264 |                    "" \\bigl(1+2\\bigr=̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 266}","  264 |                    "" \\bigl(1+2\\bigr=̲3"");
  265 |         });
> 266 |         it(""reject group opening delimiters"", function() {
      |        ^ Unknown Test
  267 |             expect`\bigl{(}1+2\bigr)3`.toFailWithParseError(
  268 |                    ""Invalid delimiter type 'ordgroup' at position 6:"" +
  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 271}","  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");
  270 |         });
> 271 |         it(""reject group closing delimiters"", function() {
      |        ^ Unknown Test
  272 |             expect`\bigl(1+2\bigr{)}3`.toFailWithParseError(
  273 |                    ""Invalid delimiter type 'ordgroup' at position 15:"" +
  274 |                    "" \\bigl(1+2\\bigr{̲)̲}̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 279}","  277 |
  278 |     describe(""\\begin and \\end"", function() {
> 279 |         it(""reject invalid environment names"", function() {
      |        ^ Unknown Test
  280 |             expect`\begin x\end y`.toFailWithParseError(
  281 |                    ""No such environment: x at position 8: \\begin x̲\\end y"");
  282 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 302}","  300 |
  301 |     describe(""#_innerLexColor"", function() {
> 302 |         it(""reject 3-digit hex notation without #"", function() {
      |        ^ Unknown Test
  303 |             expect`\textcolor{1a2}{foo}`.toFailWithParseError(
  304 |                    ""Invalid color: '1a2'"" +
  305 |                    "" at position 11: \\textcolor{̲1̲a̲2̲}̲{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 310}","  308 |
  309 |     describe(""#_innerLexSize"", function() {
> 310 |         it(""reject size without unit"", function() {
      |        ^ Unknown Test
  311 |             expect`\rule{0}{2em}`.toFailWithParseError(
  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 314}","  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });
> 314 |         it(""reject size with bogus unit"", function() {
      |        ^ Unknown Test
  315 |             expect`\rule{1au}{2em}`.toFailWithParseError(
  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 318}","  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });
> 318 |         it(""reject size without number"", function() {
      |        ^ Unknown Test
  319 |             expect`\rule{em}{2em}`.toFailWithParseError(
  320 |                    ""Invalid size: 'em' at position 6: \\rule{̲e̲m̲}̲{2em}"");
  321 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 5, 'column': 4, 'index': 124}","  3 |
  4 | describe(""Symbols and macros"", () => {
> 5 |     for (const macro in macros) {
    |    ^ Conditional Test Logic
  6 |         if (!macros.hasOwnProperty(macro)) {
  7 |             continue;
  8 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 6, 'column': 8, 'index': 162}","  4 | describe(""Symbols and macros"", () => {
  5 |     for (const macro in macros) {
> 6 |         if (!macros.hasOwnProperty(macro)) {
    |        ^ Conditional Test Logic
  7 |             continue;
  8 |         }
  9 |         it(`macro ${macro} should not shadow a symbol`, () => {",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 10, 'column': 12, 'index': 307}","   8 |         }
   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
> 10 |             for (const kind in symbols) {
     |            ^ Conditional Test Logic
  11 |                 if (!symbols.hasOwnProperty(kind)) {
  12 |                     continue;
  13 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 11, 'column': 16, 'index': 353}","   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
  10 |             for (const kind in symbols) {
> 11 |                 if (!symbols.hasOwnProperty(kind)) {
     |                ^ Conditional Test Logic
  12 |                     continue;
  13 |                 }
  14 |                 expect(symbols[kind][macro]).toBeFalsy();",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 18, 'column': 12, 'index': 481}","  16 |                   splitAtDelimiters(actual, delimiters);
  17 |
> 18 |             if (split.length !== result.length) {
     |            ^ Conditional Test Logic
  19 |                 message.pass = false;
  20 |                 message.message = () => ""Different number of splits: "" +
  21 |                     split.length + "" vs. "" + result.length + "" ("" +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 27, 'column': 12, 'index': 861}","  25 |             }
  26 |
> 27 |             for (let i = 0; i < split.length; i++) {
     |            ^ Conditional Test Logic
  28 |                 const real = split[i];
  29 |                 const correct = result[i];
  30 |",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 34, 'column': 16, 'index': 1061}","  32 |                 let diff;
  33 |
> 34 |                 if (real.type !== correct.type) {
     |                ^ Conditional Test Logic
  35 |                     good = false;
  36 |                     diff = ""type"";
  37 |                 } else if (real.data !== correct.data) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 37, 'column': 23, 'index': 1187}","  35 |                     good = false;
  36 |                     diff = ""type"";
> 37 |                 } else if (real.data !== correct.data) {
     |                       ^ Conditional Test Logic
  38 |                     good = false;
  39 |                     diff = ""data"";
  40 |                 } else if (real.display !== correct.display) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 40, 'column': 23, 'index': 1313}","  38 |                     good = false;
  39 |                     diff = ""data"";
> 40 |                 } else if (real.display !== correct.display) {
     |                       ^ Conditional Test Logic
  41 |                     good = false;
  42 |                     diff = ""display"";
  43 |                 }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 45, 'column': 16, 'index': 1460}","  43 |                 }
  44 |
> 45 |                 if (!good) {
     |                ^ Conditional Test Logic
  46 |                     message.pass = false;
  47 |                     message.message = () => ""Difference at split "" +
  48 |                         (i + 1) + "": "" + JSON.stringify(real) +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 332, 'column': 8, 'index': 11671}","  330 |             '\\]'];
  331 |         const el = document.createElement('div');
> 332 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  333 |             const txt = document.createTextNode(textNodes[i]);
  334 |             el.appendChild(txt);
  335 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 350, 'column': 8, 'index': 12420}","  348 |             'consectetur adipiscing elit'];
  349 |         const el = document.createElement('div');
> 350 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  351 |             const txt = document.createTextNode(textNodes[i]);
  352 |             el.appendChild(txt);
  353 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 355, 'column': 8, 'index': 12630}","  353 |         }
  354 |         const el2 = document.createElement('div');
> 355 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  356 |             const txt = document.createTextNode(textNodes[i]);
  357 |             el2.appendChild(txt);
  358 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 62}","  60 | describe(""A delimiter splitter"", function() {
  61 |     it(""doesn't split when there are no delimiters"", function() {
> 62 |         expect(""hello"").toSplitInto(
     |        ^ Redundant Assertion
  63 |             [
  64 |                 {type: ""text"", data: ""hello""},
  65 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 72}","  70 |
  71 |     it(""doesn't create a math node with only one left delimiter"", function() {
> 72 |         expect(""hello ( world"").toSplitInto(
     |        ^ Redundant Assertion
  73 |             [
  74 |                 {type: ""text"", data: ""hello ""},
  75 |                 {type: ""text"", data: ""( world""},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 83}","  81 |
  82 |     it(""doesn't split when there's only a right delimiter"", function() {
> 83 |         expect(""hello ) world"").toSplitInto(
     |        ^ Redundant Assertion
  84 |             [
  85 |                 {type: ""text"", data: ""hello ) world""},
  86 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 93}","  91 |
  92 |     it(""splits when there are both delimiters"", function() {
> 93 |         expect(""hello ( world ) boo"").toSplitInto(
     |        ^ Redundant Assertion
  94 |             [
  95 |                 {type: ""text"", data: ""hello ""},
  96 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 106}","  104 |
  105 |     it(""splits on multi-character delimiters"", function() {
> 106 |         expect(""hello [[ world ]] boo"").toSplitInto(
      |        ^ Redundant Assertion
  107 |             [
  108 |                 {type: ""text"", data: ""hello ""},
  109 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 116}","  114 |                 {left: ""[["", right: ""]]"", display: false},
  115 |             ]);
> 116 |         expect(""hello \\begin{equation} world \\end{equation} boo"").toSplitInto(
      |        ^ Redundant Assertion
  117 |             [
  118 |                 {type: ""text"", data: ""hello ""},
  119 |                 {type: ""math"", data: ""\\begin{equation} world \\end{equation}"",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 131}","  129 |
  130 |     it(""splits multiple times"", function() {
> 131 |         expect(""hello ( world ) boo ( more ) stuff"").toSplitInto(
      |        ^ Redundant Assertion
  132 |             [
  133 |                 {type: ""text"", data: ""hello ""},
  134 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 147}","  145 |
  146 |     it(""leaves the ending when there's only a left delimiter"", function() {
> 147 |         expect(""hello ( world ) boo ( left"").toSplitInto(
      |        ^ Redundant Assertion
  148 |             [
  149 |                 {type: ""text"", data: ""hello ""},
  150 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 161}","  159 |
  160 |     it(""doesn't split when close delimiters are in {}s"", function() {
> 161 |         expect(""hello ( world { ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  162 |             [
  163 |                 {type: ""text"", data: ""hello ""},
  164 |                 {type: ""math"", data: "" world { ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 172}","  170 |             ]);
  171 |
> 172 |         expect(""hello ( world { { } ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  173 |             [
  174 |                 {type: ""text"", data: ""hello ""},
  175 |                 {type: ""math"", data: "" world { { } ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 185}","  183 |
  184 |     it(""correctly processes sequences of $..$"", function() {
> 185 |         expect(""$hello$$world$$boo$"").toSplitInto(
      |        ^ Redundant Assertion
  186 |             [
  187 |                 {type: ""math"", data: ""hello"",
  188 |                     rawData: ""$hello$"", display: false},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 200}","  198 |
  199 |     it(""doesn't split at escaped delimiters"", function() {
> 200 |         expect(""hello ( world \\) ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  201 |             [
  202 |                 {type: ""text"", data: ""hello ""},
  203 |                 {type: ""math"", data: "" world \\) "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 224}","  222 |
  223 |     it(""splits when the right and left delimiters are the same"", function() {
> 224 |         expect(""hello $ world $ boo"").toSplitInto(
      |        ^ Redundant Assertion
  225 |             [
  226 |                 {type: ""text"", data: ""hello ""},
  227 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 237}","  235 |
  236 |     it(""ignores \\$"", function() {
> 237 |         expect(""$x = \\$5$"").toSplitInto(
      |        ^ Redundant Assertion
  238 |             [
  239 |                 {type: ""math"", data: ""x = \\$5"",
  240 |                     rawData: ""$x = \\$5$"", display: false},",,
test/unicode-spec.js,ConditionalTestLogic,"[{""startLine"":157,""endLine"":160}]",,25.0,2.0
test/unicode-spec.js,SubOptimalAssert,"[{""startLine"":163,""endLine"":163}]",,25.0,2.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1323,""endLine"":1327}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1406,""endLine"":1408}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2827,""endLine"":2829}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2844,""endLine"":2846}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2861,""endLine"":2864}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3132,""endLine"":3135}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3829,""endLine"":3831}]",,556.0,117.0
test/katex-spec.js,OvercommentedTest,"[{""startLine"":4019,""endLine"":4054}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":71,""endLine"":73}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":90,""endLine"":93}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":115,""endLine"":118}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":130,""endLine"":132}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":148,""endLine"":150}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":166,""endLine"":168}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":182,""endLine"":184}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":304,""endLine"":309}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":348,""endLine"":350}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":365,""endLine"":367}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":392,""endLine"":395}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":497,""endLine"":499}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":571,""endLine"":576}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":578,""endLine"":608}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":674,""endLine"":683}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":687,""endLine"":693}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":699,""endLine"":701}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":723,""endLine"":725}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":835,""endLine"":845}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":859,""endLine"":861}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":997,""endLine"":999}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1045,""endLine"":1048}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1104,""endLine"":1114}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1116,""endLine"":1119}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1121,""endLine"":1124}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1142,""endLine"":1156}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1174,""endLine"":1177}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1179,""endLine"":1182}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1184,""endLine"":1187}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1203,""endLine"":1205}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1315,""endLine"":1317}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1550,""endLine"":1563}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1567,""endLine"":1572}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1698,""endLine"":1705}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2082,""endLine"":2099}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2120,""endLine"":2122}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2155,""endLine"":2157}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2266,""endLine"":2272}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2297,""endLine"":2302}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2304,""endLine"":2310}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2314,""endLine"":2320}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2322,""endLine"":2328}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2332,""endLine"":2337}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2339,""endLine"":2345}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2358,""endLine"":2363}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2371,""endLine"":2375}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2379,""endLine"":2384}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2386,""endLine"":2393}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2397,""endLine"":2403}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2411,""endLine"":2415}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2419,""endLine"":2425}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2438,""endLine"":2445}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2453,""endLine"":2457}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2461,""endLine"":2466}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2468,""endLine"":2475}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2479,""endLine"":2484}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2494,""endLine"":2499}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2501,""endLine"":2507}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2534,""endLine"":2537}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2541,""endLine"":2545}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2547,""endLine"":2549}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2553,""endLine"":2557}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2559,""endLine"":2562}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2564,""endLine"":2568}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2570,""endLine"":2573}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2577,""endLine"":2581}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2583,""endLine"":2585}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2589,""endLine"":2594}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2596,""endLine"":2600}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2602,""endLine"":2606}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2610,""endLine"":2619}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2621,""endLine"":2627}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2640,""endLine"":2645}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2649,""endLine"":2651}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2652,""endLine"":2654}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2658,""endLine"":2667}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2678,""endLine"":2689}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2707,""endLine"":2722}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2732,""endLine"":2742}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2756,""endLine"":2762}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2844,""endLine"":2846}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2861,""endLine"":2864}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2870,""endLine"":2872}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2965,""endLine"":2972}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2976,""endLine"":2979}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3421,""endLine"":3424}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3505,""endLine"":3508}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3808,""endLine"":3810}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3829,""endLine"":3831}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":100,""endLine"":103}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":104,""endLine"":109}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1768,""endLine"":1770}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1903,""endLine"":1904}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3176,""endLine"":3176}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3191,""endLine"":3191}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3986,""endLine"":3987}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":517,""endLine"":543}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":578,""endLine"":608}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":1614,""endLine"":1638}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3087,""endLine"":3102}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3510,""endLine"":3526}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":4019,""endLine"":4054}]",,556.0,117.0
test/errors-spec.js,AnonymousTest,"[{""startLine"":219,""endLine"":223}]",,50.0,26.0
test/errors-spec.js,IdenticalTestDescription,"[{""startLine"":214,""endLine"":218}]",,50.0,26.0
