file,type,smells,frame,itCount,describeCount
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 20, 'column': 8, 'index': 1016}","  18 |     it(""should not parse Latin-1 outside \\text{} with strict"", function() {
  19 |         const chars = 'ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ';
> 20 |         for (const ch of chars) {
     |        ^ Conditional Test Logic
  21 |             expect(ch).not.toParse(strictSettings);
  22 |         }
  23 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 144, 'column': 8, 'index': 5144}","  142 |
  143 |     it(""supportedCodepoint() should return the correct values"", () => {
> 144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |        ^ Conditional Test Logic
  145 |             expect(supportedCodepoint(codepoint)).toBe(
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 152, 'column': 15, 'index': 5441}","  150 |
  151 |     it(""scriptFromCodepoint() should return correct values"", () => {
> 152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |               ^ Conditional Test Logic
  153 |             const character = String.fromCharCode(codepoint);
  154 |             const script = scriptFromCodepoint(codepoint);
  155 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 156, 'column': 12, 'index': 5635}","  154 |             const script = scriptFromCodepoint(codepoint);
  155 |
> 156 |             for (const scriptName of scriptNames) {
      |            ^ Conditional Test Logic
  157 |                 if (scriptRegExps[scriptName].test(character)) {
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 157, 'column': 16, 'index': 5691}","  155 |
  156 |             for (const scriptName of scriptNames) {
> 157 |                 if (scriptRegExps[scriptName].test(character)) {
      |                ^ Conditional Test Logic
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;
  160 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 158, 'column': 20, 'index': 5760}","  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {
> 158 |                     expect(script).toEqual(scriptName);
      |                    ^ Duplicate Assert
  159 |                     continue outer;
  160 |                 }
  161 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 163, 'column': 12, 'index': 5877}","  161 |             }
  162 |
> 163 |             expect(script).toBe(null);
      |            ^ Duplicate Assert
  164 |             expect(supportedCodepoint(codepoint)).toBe(false);
  165 |         }
  166 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 154, 'column': 27, 'index': 5590}","  152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
  153 |             const character = String.fromCharCode(codepoint);
> 154 |             const script = scriptFromCodepoint(codepoint);
      |                           ^ Eager Test
  155 |
  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Eager Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 145, 'column': 19, 'index': 5223}","  143 |     it(""supportedCodepoint() should return the correct values"", () => {
  144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
> 145 |             expect(supportedCodepoint(codepoint)).toBe(
      |                   ^ Lazy Test
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );
  148 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Lazy Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 7}","   5 |
   6 | describe(""unicode"", function() {
>  7 |     it(""should build Latin-1 inside \\text{}"", function() {
     |    ^ Unknown Test
   8 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}`
   9 |             .toBuild();
  10 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 12}","  10 |     });
  11 |
> 12 |     it(""should build Latin-1 inside \\text{} like accent commands"", function() {
     |    ^ Unknown Test
  13 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}`
  14 |             .toParseLike`\text{\`A\'A\^A\~A\""A\r A\`E\'E\^E\""E\`I\'I\^I\""I\~N\`O\'O\^O\~O\""O\`U\'U\^U\""U\'Y\`a\'a\^a\~a\""a\r a\`e\'e\^e\""e\`ı\'ı\^ı\""ı\~n\`o\'o\^o\~o\""o\`u\'u\^u\""u\'y\""y\c C\c c}`;
  15 |         // TODO(edemaine): A few characters don't have analogs yet.",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 25}","  23 |     });
  24 |
> 25 |     it(""should build Latin-1 outside \\text{}"", function() {
     |    ^ Unknown Test
  26 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ`
  27 |             .toBuild(nonstrictSettings);
  28 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 30}","  28 |     });
  29 |
> 30 |     it(""should build all lower case Greek letters"", function() {
     |    ^ Unknown Test
  31 |         expect`αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω`.toBuild();
  32 |     });
  33 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 34}","  32 |     });
  33 |
> 34 |     it(""should build math upper case Greek letters"", function() {
     |    ^ Unknown Test
  35 |         expect`ΓΔΘΛΞΠΣΥΦΨΩ`.toBuild();
  36 |     });
  37 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 38}","  36 |     });
  37 |
> 38 |     it(""should build Cyrillic inside \\text{}"", function() {
     |    ^ Unknown Test
  39 |         expect`\text{БГДЖЗЙЛФЦШЫЮЯ}`.toBuild();
  40 |     });
  41 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 42}","  40 |     });
  41 |
> 42 |     it(""should build Cyrillic outside \\text{}"", function() {
     |    ^ Unknown Test
  43 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.toBuild(nonstrictSettings);
  44 |     });
  45 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 46}","  44 |     });
  45 |
> 46 |     it(""should not parse Cyrillic outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  47 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.not.toParse(strictSettings);
  48 |     });
  49 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 50}","  48 |     });
  49 |
> 50 |     it(""should build CJK inside \\text{}"", function() {
     |    ^ Unknown Test
  51 |         expect`\text{私はバナナです}`.toBuild();
  52 |         expect`\text{여보세요}`.toBuild();
  53 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 55}","  53 |     });
  54 |
> 55 |     it(""should build CJK outside \\text{}"", function() {
     |    ^ Unknown Test
  56 |         expect`私はバナナです`.toBuild(nonstrictSettings);
  57 |         expect`여보세요`.toBuild(nonstrictSettings);
  58 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 60}","  58 |     });
  59 |
> 60 |     it(""should not parse CJK outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  61 |         expect`私はバナナです。`.not.toParse(strictSettings);
  62 |         expect`여보세요`.not.toParse(strictSettings);
  63 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 65}","  63 |     });
  64 |
> 65 |     it(""should build Devanagari inside \\text{}"", function() {
     |    ^ Unknown Test
  66 |         expect`\text{नमस्ते}`.toBuild();
  67 |     });
  68 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 69}","  67 |     });
  68 |
> 69 |     it(""should build Devanagari outside \\text{}"", function() {
     |    ^ Unknown Test
  70 |         expect`नमस्ते`.toBuild(nonstrictSettings);
  71 |     });
  72 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 73}","  71 |     });
  72 |
> 73 |     it(""should not parse Devanagari outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  74 |         expect`नमस्ते`.not.toParse(strictSettings);
  75 |     });
  76 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 77}","  75 |     });
  76 |
> 77 |     it(""should build Georgian inside \\text{}"", function() {
     |    ^ Unknown Test
  78 |         expect`\text{გამარჯობა}`.toBuild();
  79 |     });
  80 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 81}","  79 |     });
  80 |
> 81 |     it(""should build Georgian outside \\text{}"", function() {
     |    ^ Unknown Test
  82 |         expect`გამარჯობა`.toBuild(nonstrictSettings);
  83 |     });
  84 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 85}","  83 |     });
  84 |
> 85 |     it(""should not parse Georgian outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  86 |         expect`გამარჯობა`.not.toParse(strictSettings);
  87 |     });
  88 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 89}","  87 |     });
  88 |
> 89 |     it(""should build Armenian both inside and outside \\text{}"", function() {
     |    ^ Unknown Test
  90 |         expect`ԱԲԳաբգ`.toBuild(nonstrictSettings);
  91 |         expect`\text{ԱԲԳաբգ}`.toBuild(nonstrictSettings);
  92 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 94}","  92 |     });
  93 |
> 94 |     it(""should build extended Latin characters inside \\text{}"", function() {
     |    ^ Unknown Test
  95 |         expect`\text{ěščřžůřťďňőİı}`.toBuild();
  96 |     });
  97 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 98}","   96 |     });
   97 |
>  98 |     it(""should not parse extended Latin outside \\text{} with strict"", function() {
      |    ^ Unknown Test
   99 |         expect`ěščřžůřťďňőİı`.not.toParse(strictSettings);
  100 |     });
  101 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 102}","  100 |     });
  101 |
> 102 |     it(""should not allow emoji in strict mode"", function() {
      |    ^ Unknown Test
  103 |         expect`✌`.not.toParse(strictSettings);
  104 |         expect`\text{✌}`.not.toParse(strictSettings);
  105 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 113}","  111 |     });
  112 |
> 113 |     it(""should allow emoji outside strict mode"", function() {
      |    ^ Unknown Test
  114 |         expect`✌`.toWarn();
  115 |         expect`\text{✌}`.toWarn();
  116 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 4, 'column': 4, 'index': 98}","  2 |
  3 | describe(""Screenshotter item"", function() {
> 4 |     for (const key in data) {
    |    ^ Conditional Test Logic
  5 |         if (data.hasOwnProperty(key)) {
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 5, 'column': 8, 'index': 132}","  3 | describe(""Screenshotter item"", function() {
  4 |     for (const key in data) {
> 5 |         if (data.hasOwnProperty(key)) {
    |        ^ Conditional Test Logic
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {
  8 |                 expect(item.tex).toBuild({",,
/home/gabriel/Desktop/research/projects/katex/test/mathml-spec.js,Conditional Test Logic,"{'line': 9, 'column': 4, 'index': 300}","   7 | const getMathML = function(expr, settings = new Settings()) {
   8 |     let startStyle = Style.TEXT;
>  9 |     if (settings.displayMode) {
     |    ^ Conditional Test Logic
  10 |         startStyle = Style.DISPLAY;
  11 |     }
  12 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 46, 'column': 8, 'index': 1257}","  44 |         const parse = getParsed(expression);
  45 |
> 46 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  47 |             const group = parse[i];
  48 |             expect(group.type).toMatch(""ord"");
  49 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 69, 'column': 8, 'index': 1848}","  67 |         const parse = getParsed(expression);
  68 |
> 69 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  70 |             const group = parse[i];
  71 |             expect(group.type).toEqual(""atom"");
  72 |             expect(group.family).toEqual(""bin"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 90, 'column': 12, 'index': 2496}","  88 |         
  89 |         const verifyGroup = (group) => {
> 90 |             if (group.type === ""mclass"") {
     |            ^ Conditional Test Logic
  91 |                 expect(group.mclass).toEqual(""mrel"");
  92 |             } else {
  93 |                 expect(group.type).toEqual(""atom""); ",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 99, 'column': 12, 'index': 2779}","   97 |
   98 |         parse.forEach(group => {
>  99 |             if (group.type === ""htmlmathml"") {
      |            ^ Conditional Test Logic
  100 |                 expect(group.html).toHaveLength(1);
  101 |                 verifyGroup(group.html[0]);
  102 |             } else {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 132, 'column': 8, 'index': 3774}","  130 |         const parse = getParsed(expression);
  131 |
> 132 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  133 |             const group = parse[i];
  134 |             expect(group.type).toEqual(""atom"");
  135 |             expect(group.family).toEqual(""punct"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 150, 'column': 8, 'index': 4235}","  148 |         const parse = getParsed(expression);
  149 |
> 150 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  151 |             const group = parse[i];
  152 |             expect(group.type).toEqual(""atom"");
  153 |             expect(group.family).toEqual(""open"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 168, 'column': 8, 'index': 4698}","  166 |         const parse = getParsed(expression);
  167 |
> 168 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  169 |             const group = parse[i];
  170 |             expect(group.type).toEqual(""atom"");
  171 |             expect(group.family).toEqual(""close"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1266, 'column': 4, 'index': 40498}","  1264 |     ];
  1265 |
> 1266 |     for (const [actual, expected] of cases) {
       |    ^ Conditional Test Logic
  1267 |         it(`should build ""${actual}"" like ""${expected}""`, () => {
  1268 |             expect(actual).toBuildLike(expected);
  1269 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1415, 'column': 8, 'index': 45744}","  1413 |         ];
  1414 |
> 1415 |         for (let i = 0; i < missingGroups.length; i++) {
       |        ^ Conditional Test Logic
  1416 |             expect(missingGroups[i]).not.toParse();
  1417 |         }
  1418 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1442, 'column': 8, 'index': 46705}","  1440 |         ];
  1441 |
> 1442 |         for (let i = 0; i < badArguments.length; i++) {
       |        ^ Conditional Test Logic
  1443 |             expect(badArguments[i]).not.toParse();
  1444 |         }
  1445 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1460, 'column': 8, 'index': 47271}","  1458 |         ];
  1459 |
> 1460 |         for (let i = 0; i < goodArguments.length; i++) {
       |        ^ Conditional Test Logic
  1461 |             expect(goodArguments[i]).toParse();
  1462 |         }
  1463 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1473, 'column': 8, 'index': 47627}","  1471 |         ];
  1472 |
> 1473 |         for (let i = 0; i < badSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1474 |             expect(badSupSubscripts[i]).not.toParse();
  1475 |         }
  1476 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1486, 'column': 8, 'index': 48006}","  1484 |         ];
  1485 |
> 1486 |         for (let i = 0; i < goodSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1487 |             expect(goodSupSubscripts[i]).toParse();
  1488 |         }
  1489 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1524, 'column': 8, 'index': 49238}","  1522 |         ];
  1523 |
> 1524 |         for (let i = 0; i < badLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1525 |             expect(badLeftArguments[i]).not.toParse();
  1526 |         }
  1527 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1538, 'column': 8, 'index': 49715}","  1536 |         ];
  1537 |
> 1538 |         for (let i = 0; i < goodLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1539 |             expect(goodLeftArguments[i]).toParse();
  1540 |         }
  1541 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 2176, 'column': 8, 'index': 77665}","  2174 |
  2175 |     it(""should throw Error when HTML attribute name is invalid"", function() {
> 2176 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
       |        ^ Conditional Test Logic
  2177 |             try {
  2178 |                 katex.renderToString(
  2179 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 3839, 'column': 4, 'index': 141602}","  3837 | describe(""leqno and fleqn rendering options"", () => {
  3838 |     const expr = r`\tag{hi}x+y`;
> 3839 |     for (const opt of [""leqno"", ""fleqn""]) {
       |    ^ Conditional Test Logic
  3840 |         it(`should not add ${opt} class by default`, () => {
  3841 |             const settings = new Settings({displayMode: true});
  3842 |             const built = katex.__renderToDomTree(expr, settings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4244, 'column': 8, 'index': 158542}","  4242 |         // add eastern arabic numbers to symbols table
  4243 |         // these symbols are ۰۱۲۳۴۵۶۷۸۹ and ٠١٢٣٤٥٦٧٨٩
> 4244 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4245 |             const persianNum = String.fromCharCode(0x0660 + number);
  4246 |             katex.__defineSymbol(
  4247 |                 ""math"", fontName, ""textord"", persianNum, persianNum);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4263, 'column': 8, 'index': 159488}","  4261 |         const mockMetrics = {};
  4262 |         // mock font metrics for the symbols that we added previously
> 4263 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4264 |             mockMetrics[0x0660 + number] = [-0.00244140625, 0.6875, 0, 0];
  4265 |             mockMetrics[0x06F0 + number] = [-0.00244140625, 0.6875, 0, 0];
  4266 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 578, 'column': 8, 'index': 17164}","  576 |         parse = getParsed(simpleOver)[0];
  577 |
> 578 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  579 |         expect(parse.numer).toBeDefined();
  580 |         expect(parse.denom).toBeDefined();
  581 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 578, 'column': 8, 'index': 17164}","  576 |         parse = getParsed(simpleOver)[0];
  577 |
> 578 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  579 |         expect(parse.numer).toBeDefined();
  580 |         expect(parse.denom).toBeDefined();
  581 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 579, 'column': 8, 'index': 17211}","  577 |
  578 |         expect(parse.type).toEqual(""genfrac"");
> 579 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  580 |         expect(parse.denom).toBeDefined();
  581 |
  582 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 579, 'column': 8, 'index': 17211}","  577 |
  578 |         expect(parse.type).toEqual(""genfrac"");
> 579 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  580 |         expect(parse.denom).toBeDefined();
  581 |
  582 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 580, 'column': 8, 'index': 17254}","  578 |         expect(parse.type).toEqual(""genfrac"");
  579 |         expect(parse.numer).toBeDefined();
> 580 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  581 |
  582 |         parse = getParsed(complexOver)[0];
  583 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 580, 'column': 8, 'index': 17254}","  578 |         expect(parse.type).toEqual(""genfrac"");
  579 |         expect(parse.numer).toBeDefined();
> 580 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  581 |
  582 |         parse = getParsed(complexOver)[0];
  583 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 584, 'column': 8, 'index': 17342}","  582 |         parse = getParsed(complexOver)[0];
  583 |
> 584 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  585 |         expect(parse.numer).toBeDefined();
  586 |         expect(parse.denom).toBeDefined();
  587 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 584, 'column': 8, 'index': 17342}","  582 |         parse = getParsed(complexOver)[0];
  583 |
> 584 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  585 |         expect(parse.numer).toBeDefined();
  586 |         expect(parse.denom).toBeDefined();
  587 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 585, 'column': 8, 'index': 17389}","  583 |
  584 |         expect(parse.type).toEqual(""genfrac"");
> 585 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  586 |         expect(parse.denom).toBeDefined();
  587 |
  588 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 585, 'column': 8, 'index': 17389}","  583 |
  584 |         expect(parse.type).toEqual(""genfrac"");
> 585 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  586 |         expect(parse.denom).toBeDefined();
  587 |
  588 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 586, 'column': 8, 'index': 17432}","  584 |         expect(parse.type).toEqual(""genfrac"");
  585 |         expect(parse.numer).toBeDefined();
> 586 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  587 |
  588 |         const parseBraceFrac = getParsed(braceFrac)[0];
  589 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 586, 'column': 8, 'index': 17432}","  584 |         expect(parse.type).toEqual(""genfrac"");
  585 |         expect(parse.numer).toBeDefined();
> 586 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  587 |
  588 |         const parseBraceFrac = getParsed(braceFrac)[0];
  589 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1643, 'column': 8, 'index': 53484}","  1641 |         expect(bbBody).toHaveLength(3);
  1642 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1643 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1644 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1645 |         expect(bbBody[2].type).toEqual(""font"");
  1646 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1643, 'column': 8, 'index': 53484}","  1641 |         expect(bbBody).toHaveLength(3);
  1642 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1643 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1644 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1645 |         expect(bbBody[2].type).toEqual(""font"");
  1646 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1645, 'column': 8, 'index': 53582}","  1643 |         expect(bbBody[2].type).toEqual(""font"");
  1644 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1645 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1646 |     });
  1647 |
  1648 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1645, 'column': 8, 'index': 53582}","  1643 |         expect(bbBody[2].type).toEqual(""font"");
  1644 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1645 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1646 |     });
  1647 |
  1648 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1838, 'column': 8, 'index': 61137}","  1836 |     it(""should render \\text{R\\textit{S}T} with the correct fonts"", function() {
  1837 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
> 1838 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
       |        ^ Duplicate Assert
  1839 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
  1840 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1841 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1839, 'column': 8, 'index': 61204}","  1837 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
  1838 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
> 1839 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
       |        ^ Duplicate Assert
  1840 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1841 |     });
  1842 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1840, 'column': 8, 'index': 61278}","  1838 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
  1839 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
> 1840 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
       |        ^ Duplicate Assert
  1841 |     });
  1842 |
  1843 |     it(""should render \\textbf{R } with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1864, 'column': 8, 'index': 62469}","  1862 |     it(""should render \\textsf{\\textit{R}G\\textbf{B}} with the correct font"", function() {
  1863 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
> 1864 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
       |        ^ Duplicate Assert
  1865 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
  1866 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1867 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1865, 'column': 8, 'index': 62550}","  1863 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
  1864 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
> 1865 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
       |        ^ Duplicate Assert
  1866 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1867 |     });
  1868 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1866, 'column': 8, 'index': 62624}","  1864 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
  1865 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
> 1866 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
       |        ^ Duplicate Assert
  1867 |     });
  1868 |
  1869 |     it(""should render \\textsf{\\textbf{$\\mathrm{A}$}} with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1887, 'column': 8, 'index': 63699}","  1885 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1886 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1887 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1888 |
  1889 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1890 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1887, 'column': 8, 'index': 63699}","  1885 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1886 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1887 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1888 |
  1889 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1890 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1891, 'column': 8, 'index': 63889}","  1889 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1890 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1891 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1892 |     });
  1893 |
  1894 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1891, 'column': 8, 'index': 63889}","  1889 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1890 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1891 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1892 |     });
  1893 |
  1894 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2084, 'column': 8, 'index': 74162}","  2082 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2083 |             ""</mstyle>"";
> 2084 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2085 |
  2086 |         // reverse the order of the commands
  2087 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2084, 'column': 8, 'index': 74162}","  2082 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2083 |             ""</mstyle>"";
> 2084 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2085 |
  2086 |         // reverse the order of the commands
  2087 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2093, 'column': 8, 'index': 74523}","  2091 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2092 |             ""</mstyle>"";
> 2093 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2094 |     });
  2095 |
  2096 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2093, 'column': 8, 'index': 74523}","  2091 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2092 |             ""</mstyle>"";
> 2093 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2094 |     });
  2095 |
  2096 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2107, 'column': 8, 'index': 75084}","  2105 |         const tree = getParsed(tex);
  2106 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
> 2107 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
       |        ^ Duplicate Assert
  2108 |         expect(markup).toContain(
  2109 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2110 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2108, 'column': 8, 'index': 75155}","  2106 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2107 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
> 2108 |         expect(markup).toContain(
       |        ^ Duplicate Assert
  2109 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2110 |     });
  2111 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2205, 'column': 8, 'index': 78718}","  2203 |         const built = getBuilt`+ x`;
  2204 |
> 2205 |         expect(built[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2206 |         expect(built[0].classes).not.toContain(""mbin"");
  2207 |     });
  2208 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2206, 'column': 8, 'index': 78770}","  2204 |
  2205 |         expect(built[0].classes).toContain(""mord"");
> 2206 |         expect(built[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2207 |     });
  2208 |
  2209 |     it(""should create ords after some other objects"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2240, 'column': 8, 'index': 80286}","  2238 |         const markup = katex.renderToString(r`\sigma^2`);
  2239 |         expect(markup.indexOf(""<span"")).toBe(0);
> 2240 |         expect(markup).toContain(""\u03c3"");  // sigma
       |        ^ Duplicate Assert
  2241 |         expect(markup).toContain(""margin-right"");
  2242 |         expect(markup).not.toContain(""marginRight"");
  2243 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2241, 'column': 8, 'index': 80340}","  2239 |         expect(markup.indexOf(""<span"")).toBe(0);
  2240 |         expect(markup).toContain(""\u03c3"");  // sigma
> 2241 |         expect(markup).toContain(""margin-right"");
       |        ^ Duplicate Assert
  2242 |         expect(markup).not.toContain(""marginRight"");
  2243 |     });
  2244 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2242, 'column': 8, 'index': 80390}","  2240 |         expect(markup).toContain(""\u03c3"");  // sigma
  2241 |         expect(markup).toContain(""margin-right"");
> 2242 |         expect(markup).not.toContain(""marginRight"");
       |        ^ Duplicate Assert
  2243 |     });
  2244 |
  2245 |     it(""generates both MathML and HTML"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2248, 'column': 8, 'index': 80557}","  2246 |         const markup = katex.renderToString(""a"");
  2247 |
> 2248 |         expect(markup).toContain(""<span"");
       |        ^ Duplicate Assert
  2249 |         expect(markup).toContain(""<math"");
  2250 |     });
  2251 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2249, 'column': 8, 'index': 80600}","  2247 |
  2248 |         expect(markup).toContain(""<span"");
> 2249 |         expect(markup).toContain(""<math"");
       |        ^ Duplicate Assert
  2250 |     });
  2251 | });
  2252 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2301, 'column': 8, 'index': 82063}","  2299 |     it(""should produce mords"", function() {
  2300 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
> 2301 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2302 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2303 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2304 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2302, 'column': 8, 'index': 82126}","  2300 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
  2301 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
> 2302 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2303 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2304 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2305 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2303, 'column': 8, 'index': 82193}","  2301 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
  2302 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
> 2303 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2304 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2305 |     });
  2306 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2304, 'column': 8, 'index': 82258}","  2302 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2303 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
> 2304 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2305 |     });
  2306 | });
  2307 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2319, 'column': 8, 'index': 82775}","  2317 |     it(""should produce mords"", function() {
  2318 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
> 2319 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2320 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2321 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2322 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2320, 'column': 8, 'index': 82842}","  2318 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
  2319 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
> 2320 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2321 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2322 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2323 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2321, 'column': 8, 'index': 82913}","  2319 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
  2320 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
> 2321 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2322 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2323 |     });
  2324 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2322, 'column': 8, 'index': 82982}","  2320 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2321 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
> 2322 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2323 |     });
  2324 | });
  2325 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2336, 'column': 8, 'index': 83500}","  2334 |     it(""should produce mords"", function() {
  2335 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
> 2336 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2337 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2338 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2339 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2337, 'column': 8, 'index': 83574}","  2335 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
  2336 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
> 2337 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2338 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2339 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2340 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2338, 'column': 8, 'index': 83652}","  2336 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
  2337 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
> 2338 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2339 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2340 |     });
  2341 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2339, 'column': 8, 'index': 83728}","  2337 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2338 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
> 2339 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2340 |     });
  2341 | });
  2342 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2383, 'column': 8, 'index': 85217}","  2381 |     it(""should produce mords"", function() {
  2382 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
> 2383 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2384 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2385 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2386 |         expect(getBuilt`\underrightarrow )^2`[0].classes)",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2384, 'column': 8, 'index': 85292}","  2382 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
  2383 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
> 2384 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2385 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2386 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2387 |             .not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2385, 'column': 8, 'index': 85371}","  2383 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
  2384 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
> 2385 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2386 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2387 |             .not.toContain(""mclose"");
  2388 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2386, 'column': 8, 'index': 85448}","  2384 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2385 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
> 2386 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
       |        ^ Duplicate Assert
  2387 |             .not.toContain(""mclose"");
  2388 |     });
  2389 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2425, 'column': 8, 'index': 86751}","  2423 |         expect(getBuilt`\xrightarrow x`[0].classes).toContain(""mrel"");
  2424 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
> 2425 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2426 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2427 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2428 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2426, 'column': 8, 'index': 86822}","  2424 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
  2425 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
> 2426 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2427 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2428 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2429 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2427, 'column': 8, 'index': 86897}","  2425 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
  2426 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
> 2427 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2428 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2429 |     });
  2430 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2428, 'column': 8, 'index': 86970}","  2426 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2427 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
> 2428 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2429 |     });
  2430 | });
  2431 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2466, 'column': 8, 'index': 88215}","  2464 |         expect(getBuilt`\overbrace x`[0].classes).toContain(""mord"");
  2465 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
> 2466 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2467 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2468 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2469 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2467, 'column': 8, 'index': 88284}","  2465 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
  2466 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
> 2467 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2468 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2469 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2470 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2468, 'column': 8, 'index': 88357}","  2466 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
  2467 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
> 2468 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2469 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2470 |     });
  2471 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2469, 'column': 8, 'index': 88428}","  2467 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2468 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
> 2469 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2470 |     });
  2471 | });
  2472 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2498, 'column': 8, 'index': 89264}","  2496 |     it(""should produce mords"", function() {
  2497 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
> 2498 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2499 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2500 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2501 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2499, 'column': 8, 'index': 89329}","  2497 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
  2498 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
> 2499 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2500 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2501 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2502 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2500, 'column': 8, 'index': 89398}","  2498 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
  2499 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
> 2500 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2501 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2502 |     });
  2503 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2501, 'column': 8, 'index': 89465}","  2499 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2500 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
> 2501 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2502 |     });
  2503 | });
  2504 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2618, 'column': 8, 'index': 93254}","  2616 |     it(""should produce mords"", function() {
  2617 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
> 2618 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2619 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2620 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2621 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2619, 'column': 8, 'index': 93320}","  2617 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
  2618 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
> 2619 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2620 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2621 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2622 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2620, 'column': 8, 'index': 93390}","  2618 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
  2619 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
> 2620 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2621 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2622 |     });
  2623 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2621, 'column': 8, 'index': 93458}","  2619 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2620 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
> 2621 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2622 |     });
  2623 | });
  2624 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3469, 'column': 8, 'index': 126598}","  3467 |     it(""\\char produces literal characters"", () => {
  3468 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3469 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Duplicate Assert
  3470 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3471 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3472 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3470, 'column': 8, 'index': 126649}","  3468 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3469 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3470 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Duplicate Assert
  3471 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3472 |         expect`\char`.not.toParse();
  3473 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3471, 'column': 8, 'index': 126701}","  3469 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3470 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3471 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Duplicate Assert
  3472 |         expect`\char`.not.toParse();
  3473 |         expect(""\\char`"").not.toParse();
  3474 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4103, 'column': 8, 'index': 152823}","  4101 |         const example = exp32 + r`\a{1}`;
  4102 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
> 4103 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4104 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4105 |     });
  4106 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4104, 'column': 8, 'index': 152890}","  4102 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
  4103 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4104 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4105 |     });
  4106 |
  4107 |     it(""should count correctly with Unicode sub/superscripts"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4110, 'column': 8, 'index': 153159}","  4108 |         const example = exp32 + r`\def+{\a{1}}x⁺x⁺x⁺x⁺`;
  4109 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
> 4110 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4111 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4112 |     });
  4113 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4111, 'column': 8, 'index': 153226}","  4109 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
  4110 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4111 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4112 |     });
  4113 | });
  4114 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4153, 'column': 8, 'index': 154873}","  4151 |         // Ensure newlines appear outside base spans (because, in this regexp,
  4152 |         // base span occurs immediately after each newline span).
> 4153 |         expect(markup).toMatch(
       |        ^ Duplicate Assert
  4154 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
  4155 |         expect(markup).toMatchSnapshot();
  4156 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4155, 'column': 8, 'index': 155013}","  4153 |         expect(markup).toMatch(
  4154 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
> 4155 |         expect(markup).toMatchSnapshot();
       |        ^ Duplicate Assert
  4156 |     });
  4157 | });
  4158 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 513, 'column': 27, 'index': 15049}","  511 |
  512 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 513 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Eager Test
  514 |
  515 |         expect(dfracParse.type).toEqual(""genfrac"");
  516 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 519, 'column': 27, 'index': 15257}","  517 |         expect(dfracParse.denom).toBeDefined();
  518 |
> 519 |         const tfracParse = getParsed(tfracExpression)[0];
      |                           ^ Eager Test
  520 |
  521 |         expect(tfracParse.type).toEqual(""genfrac"");
  522 |         expect(tfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 525, 'column': 27, 'index': 15465}","  523 |         expect(tfracParse.denom).toBeDefined();
  524 |
> 525 |         const cfracParse = getParsed(cfracExpression)[0];
      |                           ^ Eager Test
  526 |
  527 |         expect(cfracParse.type).toEqual(""genfrac"");
  528 |         expect(cfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 531, 'column': 29, 'index': 15675}","  529 |         expect(cfracParse.denom).toBeDefined();
  530 |
> 531 |         const genfracParse = getParsed(genfrac1)[0];
      |                             ^ Eager Test
  532 |
  533 |         expect(genfracParse.type).toEqual(""genfrac"");
  534 |         expect(genfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 576, 'column': 16, 'index': 17129}","  574 |         let parse;
  575 |
> 576 |         parse = getParsed(simpleOver)[0];
      |                ^ Eager Test
  577 |
  578 |         expect(parse.type).toEqual(""genfrac"");
  579 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 582, 'column': 16, 'index': 17306}","  580 |         expect(parse.denom).toBeDefined();
  581 |
> 582 |         parse = getParsed(complexOver)[0];
      |                ^ Eager Test
  583 |
  584 |         expect(parse.type).toEqual(""genfrac"");
  585 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 588, 'column': 31, 'index': 17499}","  586 |         expect(parse.denom).toBeDefined();
  587 |
> 588 |         const parseBraceFrac = getParsed(braceFrac)[0];
      |                               ^ Eager Test
  589 |
  590 |         expect(parseBraceFrac.type).toEqual(""genfrac"");
  591 |         expect(parseBraceFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 596, 'column': 31, 'index': 17830}","  594 |         expect(parseBraceFrac.rightDelim).toBeDefined();
  595 |
> 596 |         const parseBrackFrac = getParsed(brackFrac)[0];
      |                               ^ Eager Test
  597 |
  598 |         expect(parseBrackFrac.type).toEqual(""genfrac"");
  599 |         expect(parseBrackFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 873, 'column': 23, 'index': 27791}","  871 |
  872 |     it(""should correctly extract the custom color"", function() {
> 873 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Eager Test
  874 |         const parse2 = getParsed(customColorExpression2)[0];
  875 |         const parse3 = getParsed(customColorExpression3)[0];
  876 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 874, 'column': 23, 'index': 27852}","  872 |     it(""should correctly extract the custom color"", function() {
  873 |         const parse1 = getParsed(customColorExpression1)[0];
> 874 |         const parse2 = getParsed(customColorExpression2)[0];
      |                       ^ Eager Test
  875 |         const parse3 = getParsed(customColorExpression3)[0];
  876 |
  877 |         expect(parse1.color).toEqual(""#fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 875, 'column': 23, 'index': 27913}","  873 |         const parse1 = getParsed(customColorExpression1)[0];
  874 |         const parse2 = getParsed(customColorExpression2)[0];
> 875 |         const parse3 = getParsed(customColorExpression3)[0];
      |                       ^ Eager Test
  876 |
  877 |         expect(parse1.color).toEqual(""#fA6"");
  878 |         expect(parse2.color).toEqual(""#fA6fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 973, 'column': 26, 'index': 30863}","  971 |
  972 |     it(""should produce the correct direction delimiter"", function() {
> 973 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Eager Test
  974 |         const rightParse = getParsed(bigDelim)[0];
  975 |
  976 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 974, 'column': 27, 'index': 30917}","  972 |     it(""should produce the correct direction delimiter"", function() {
  973 |         const leftParse = getParsed(normalDelim)[0];
> 974 |         const rightParse = getParsed(bigDelim)[0];
      |                           ^ Eager Test
  975 |
  976 |         expect(leftParse.mclass).toEqual(""mopen"");
  977 |         expect(rightParse.mclass).toEqual(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 981, 'column': 27, 'index': 31145}","  979 |
  980 |     it(""should parse the correct size delimiter"", function() {
> 981 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Eager Test
  982 |         const bigParse = getParsed(bigDelim)[0];
  983 |
  984 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 982, 'column': 25, 'index': 31197}","  980 |     it(""should parse the correct size delimiter"", function() {
  981 |         const smallParse = getParsed(normalDelim)[0];
> 982 |         const bigParse = getParsed(bigDelim)[0];
      |                         ^ Eager Test
  983 |
  984 |         expect(smallParse.size).toEqual(1);
  985 |         expect(bigParse.size).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1062, 'column': 24, 'index': 33563}","  1060 |
  1061 |     it(""should list the correct units"", function() {
> 1062 |         const emParse = getParsed(emRule)[0];
       |                        ^ Eager Test
  1063 |         const exParse = getParsed(exRule)[0];
  1064 |
  1065 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1063, 'column': 24, 'index': 33609}","  1061 |     it(""should list the correct units"", function() {
  1062 |         const emParse = getParsed(emRule)[0];
> 1063 |         const exParse = getParsed(exRule)[0];
       |                        ^ Eager Test
  1064 |
  1065 |         expect(emParse.width.unit).toEqual(""em"");
  1066 |         expect(emParse.height.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1100, 'column': 24, 'index': 34779}","  1098 |
  1099 |     it(""should list the correct units"", function() {
> 1100 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1101 |         const exParse = getParsed(exKern)[0];
  1102 |         const muParse = getParsed(muKern)[0];
  1103 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1101, 'column': 24, 'index': 34825}","  1099 |     it(""should list the correct units"", function() {
  1100 |         const emParse = getParsed(emKern)[0];
> 1101 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1102 |         const muParse = getParsed(muKern)[0];
  1103 |         const abParse = getParsed(abKern)[1];
  1104 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1102, 'column': 24, 'index': 34871}","  1100 |         const emParse = getParsed(emKern)[0];
  1101 |         const exParse = getParsed(exKern)[0];
> 1102 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1103 |         const abParse = getParsed(abKern)[1];
  1104 |
  1105 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1103, 'column': 24, 'index': 34917}","  1101 |         const exParse = getParsed(exKern)[0];
  1102 |         const muParse = getParsed(muKern)[0];
> 1103 |         const abParse = getParsed(abKern)[1];
       |                        ^ Eager Test
  1104 |
  1105 |         expect(emParse.dimension.unit).toEqual(""em"");
  1106 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1138, 'column': 24, 'index': 36062}","  1136 |
  1137 |     it(""should list the correct units"", function() {
> 1138 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1139 |         const exParse = getParsed(exKern)[0];
  1140 |         const muParse = getParsed(muKern)[0];
  1141 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1139, 'column': 24, 'index': 36108}","  1137 |     it(""should list the correct units"", function() {
  1138 |         const emParse = getParsed(emKern)[0];
> 1139 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1140 |         const muParse = getParsed(muKern)[0];
  1141 |         const abParse1 = getParsed(abKern1)[1];
  1142 |         const abParse2 = getParsed(abKern2)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1140, 'column': 24, 'index': 36154}","  1138 |         const emParse = getParsed(emKern)[0];
  1139 |         const exParse = getParsed(exKern)[0];
> 1140 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1141 |         const abParse1 = getParsed(abKern1)[1];
  1142 |         const abParse2 = getParsed(abKern2)[1];
  1143 |         const abParse3 = getParsed(abKern3)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1141, 'column': 25, 'index': 36201}","  1139 |         const exParse = getParsed(exKern)[0];
  1140 |         const muParse = getParsed(muKern)[0];
> 1141 |         const abParse1 = getParsed(abKern1)[1];
       |                         ^ Eager Test
  1142 |         const abParse2 = getParsed(abKern2)[1];
  1143 |         const abParse3 = getParsed(abKern3)[1];
  1144 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1142, 'column': 25, 'index': 36249}","  1140 |         const muParse = getParsed(muKern)[0];
  1141 |         const abParse1 = getParsed(abKern1)[1];
> 1142 |         const abParse2 = getParsed(abKern2)[1];
       |                         ^ Eager Test
  1143 |         const abParse3 = getParsed(abKern3)[1];
  1144 |
  1145 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1143, 'column': 25, 'index': 36297}","  1141 |         const abParse1 = getParsed(abKern1)[1];
  1142 |         const abParse2 = getParsed(abKern2)[1];
> 1143 |         const abParse3 = getParsed(abKern3)[1];
       |                         ^ Eager Test
  1144 |
  1145 |         expect(emParse.dimension.unit).toEqual(""em"");
  1146 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1154, 'column': 25, 'index': 36752}","  1152 |
  1153 |     it(""should parse elements on either side of a kern"", function() {
> 1154 |         const abParse1 = getParsed(abKern1);
       |                         ^ Eager Test
  1155 |         const abParse2 = getParsed(abKern2);
  1156 |         const abParse3 = getParsed(abKern3);
  1157 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1155, 'column': 25, 'index': 36797}","  1153 |     it(""should parse elements on either side of a kern"", function() {
  1154 |         const abParse1 = getParsed(abKern1);
> 1155 |         const abParse2 = getParsed(abKern2);
       |                         ^ Eager Test
  1156 |         const abParse3 = getParsed(abKern3);
  1157 |
  1158 |         expect(abParse1).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1156, 'column': 25, 'index': 36842}","  1154 |         const abParse1 = getParsed(abKern1);
  1155 |         const abParse2 = getParsed(abKern2);
> 1156 |         const abParse3 = getParsed(abKern3);
       |                         ^ Eager Test
  1157 |
  1158 |         expect(abParse1).toHaveLength(3);
  1159 |         expect(abParse1[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2079, 'column': 19, 'index': 73933}","  2077 |     it(""should render a combination of font and color changes"", function() {
  2078 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2079 |         let tree = getParsed(tex);
       |                   ^ Eager Test
  2080 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2081 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2082 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2088, 'column': 15, 'index': 74302}","  2086 |         // reverse the order of the commands
  2087 |         tex = r`\mathbb{\textcolor{blue}{R}}`;
> 2088 |         tree = getParsed(tex);
       |               ^ Eager Test
  2089 |         markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2090 |         node = ""<mstyle mathcolor=\""blue\"">"" +
  2091 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2996, 'column': 24, 'index': 108157}","  2994 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2995 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2996 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  2997 |         expect(parsed1.href).toBe(url);
  2998 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2999 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2998, 'column': 24, 'index': 108277}","  2996 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  2997 |         expect(parsed1.href).toBe(url);
> 2998 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  2999 |         expect(parsed2.href).toBe(url);
  3000 |     });
  3001 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3004, 'column': 24, 'index': 108507}","  3002 |     it(""should allow balanced braces in url"", function() {
  3003 |         const url = ""http://example.org/{{}t{oo}}"";
> 3004 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3005 |         expect(parsed1.href).toBe(url);
  3006 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3007 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3006, 'column': 24, 'index': 108627}","  3004 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  3005 |         expect(parsed1.href).toBe(url);
> 3006 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3007 |         expect(parsed2.href).toBe(url);
  3008 |     });
  3009 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3020, 'column': 24, 'index': 109281}","  3018 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3019 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3020 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3021 |         expect(parsed1.href).toBe(url);
  3022 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3023 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3022, 'column': 24, 'index': 109403}","  3020 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
  3021 |         expect(parsed1.href).toBe(url);
> 3022 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
       |                        ^ Eager Test
  3023 |         expect(parsed2.href).toBe(url);
  3024 |     });
  3025 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2177, 'column': 12, 'index': 77744}","  2175 |     it(""should throw Error when HTML attribute name is invalid"", function() {
  2176 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
> 2177 |             try {
       |            ^ Exception Handling
  2178 |                 katex.renderToString(
  2179 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);
  2180 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2742, 'column': 8, 'index': 97375}","  2740 | describe(""A parser error"", function() {
  2741 |     it(""should report the position of an error"", function() {
> 2742 |         try {
       |        ^ Exception Handling
  2743 |             parseTree(r`\sqrt}`, new Settings());
  2744 |         } catch (e) {
  2745 |             expect(e.position).toEqual(5);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3161, 'column': 8, 'index': 114840}","  3159 | describe(""ParseError properties"", function() {
  3160 |     it(""should contain affected position and length information"", function() {
> 3161 |         try {
       |        ^ Exception Handling
  3162 |             katex.renderToString(""1 + \\fraq{}{}"");
  3163 |
  3164 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3176, 'column': 8, 'index': 115503}","  3174 |
  3175 |     it(""should contain position and length information at end of input"", function() {
> 3176 |         try {
       |        ^ Exception Handling
  3177 |             katex.renderToString(""\\frac{}"");
  3178 |
  3179 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3191, 'column': 8, 'index': 116199}","  3189 |
  3190 |     it(""should contain no position and length information if unavailable"", function() {
> 3191 |         try {
       |        ^ Exception Handling
  3192 |             katex.renderToString(""\\verb|hello\nworld|"");
  3193 |
  3194 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 44, 'column': 22, 'index': 1225}","  42 |
  43 |     it(""should build a list of ords"", function() {
> 44 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  45 |
  46 |         for (let i = 0; i < parse.length; i++) {
  47 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 53, 'column': 22, 'index': 1483}","  51 |
  52 |     it(""should parse the right number of ords"", function() {
> 53 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  54 |
  55 |         expect(parse).toHaveLength(expression.length);
  56 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 67, 'column': 22, 'index': 1816}","  65 |
  66 |     it(""should build a list of bins"", function() {
> 67 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  68 |
  69 |         for (let i = 0; i < parse.length; i++) {
  70 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 87, 'column': 22, 'index': 2411}","  85 |
  86 |     it(""should build a list of rels"", function() {
> 87 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  88 |         
  89 |         const verifyGroup = (group) => {
  90 |             if (group.type === ""mclass"") {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 117, 'column': 32, 'index': 3388}","  115 |     it(""should return one group, not a fragment"", function() {
  116 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
> 117 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
      |                                ^ Lazy Test
  118 |         expect(mml.children.length).toEqual(1);
  119 |     });
  120 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 130, 'column': 22, 'index': 3742}","  128 |
  129 |     it(""should build a list of puncts"", function() {
> 130 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  131 |
  132 |         for (let i = 0; i < parse.length; i++) {
  133 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 148, 'column': 22, 'index': 4203}","  146 |
  147 |     it(""should build a list of opens"", function() {
> 148 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  149 |
  150 |         for (let i = 0; i < parse.length; i++) {
  151 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 166, 'column': 22, 'index': 4666}","  164 |
  165 |     it(""should build a list of closes"", function() {
> 166 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  167 |
  168 |         for (let i = 0; i < parse.length; i++) {
  169 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 497, 'column': 22, 'index': 14491}","  495 |
  496 |     it(""should produce a frac"", function() {
> 497 |         const parse = getParsed(expression)[0];
      |                      ^ Lazy Test
  498 |
  499 |         expect(parse.type).toEqual(""genfrac"");
  500 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 513, 'column': 27, 'index': 15049}","  511 |
  512 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 513 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Lazy Test
  514 |
  515 |         expect(dfracParse.type).toEqual(""genfrac"");
  516 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 576, 'column': 16, 'index': 17129}","  574 |         let parse;
  575 |
> 576 |         parse = getParsed(simpleOver)[0];
      |                ^ Lazy Test
  577 |
  578 |         expect(parse.type).toEqual(""genfrac"");
  579 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 606, 'column': 22, 'index': 18238}","  604 |
  605 |     it(""should create a numerator from the atoms before \\over"", function() {
> 606 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  607 |
  608 |         const numer = parse.numer;
  609 |         expect(numer.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 613, 'column': 22, 'index': 18455}","  611 |
  612 |     it(""should create a denominator from the atoms after \\over"", function() {
> 613 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  614 |
  615 |         const denom = parse.denom;
  616 |         expect(denom.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 621, 'column': 22, 'index': 18690}","  619 |     it(""should handle empty numerators"", function() {
  620 |         const emptyNumerator = r`\over x`;
> 621 |         const parse = getParsed(emptyNumerator)[0];
      |                      ^ Lazy Test
  622 |         expect(parse.type).toEqual(""genfrac"");
  623 |         expect(parse.numer).toBeDefined();
  624 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 629, 'column': 22, 'index': 18985}","  627 |     it(""should handle empty denominators"", function() {
  628 |         const emptyDenominator = r`1 \over`;
> 629 |         const parse = getParsed(emptyDenominator)[0];
      |                      ^ Lazy Test
  630 |         expect(parse.type).toEqual(""genfrac"");
  631 |         expect(parse.numer).toBeDefined();
  632 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 637, 'column': 22, 'index': 19310}","  635 |     it(""should handle \\displaystyle correctly"", function() {
  636 |         const displaystyleExpression = r`\displaystyle 1 \over 2`;
> 637 |         const parse = getParsed(displaystyleExpression)[0];
      |                      ^ Lazy Test
  638 |         expect(parse.type).toEqual(""genfrac"");
  639 |         expect(parse.numer.body[0].type).toEqual(""styling"");
  640 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 650, 'column': 22, 'index': 19862}","  648 |     it(""should handle nested factions"", function() {
  649 |         const nestedOverExpression = r`{1 \over 2} \over 3`;
> 650 |         const parse = getParsed(nestedOverExpression)[0];
      |                      ^ Lazy Test
  651 |         expect(parse.type).toEqual(""genfrac"");
  652 |         expect(parse.numer.body[0].type).toEqual(""genfrac"");
  653 |         expect(parse.numer.body[0].numer.body[0].text).toEqual(""1"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 699, 'column': 22, 'index': 21572}","  697 |
  698 |     it(""should produce a sizing node"", function() {
> 699 |         const parse = getParsed(sizeExpression)[0];
      |                      ^ Lazy Test
  700 |
  701 |         expect(parse.type).toEqual(""sizing"");
  702 |         expect(parse.size).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 723, 'column': 22, 'index': 22381}","  721 |
  722 |     it(""should produce a text"", function() {
> 723 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  724 |
  725 |         expect(parse.type).toEqual(""text"");
  726 |         expect(parse.body).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 730, 'column': 22, 'index': 22596}","  728 |
  729 |     it(""should produce textords instead of mathords"", function() {
> 730 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  731 |         const group = parse.body;
  732 |
  733 |         expect(group[0].type).toEqual(""textord"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 753, 'column': 22, 'index': 23259}","  751 |
  752 |     it(""should contract spaces"", function() {
> 753 |         const parse = getParsed(spaceTextExpression)[0];
      |                      ^ Lazy Test
  754 |         const group = parse.body;
  755 |
  756 |         expect(group.length).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 772, 'column': 22, 'index': 23935}","  770 |
  771 |     it(""should ignore a space before the text group"", function() {
> 772 |         const parse = getParsed(leadingSpaceTextExpression)[0];
      |                      ^ Lazy Test
  773 |         // [m, o, o]
  774 |         expect(parse.body).toHaveLength(3);
  775 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 859, 'column': 22, 'index': 27322}","  857 |
  858 |     it(""should build a color node"", function() {
> 859 |         const parse = getParsed(colorExpression)[0];
      |                      ^ Lazy Test
  860 |
  861 |         expect(parse.type).toEqual(""color"");
  862 |         expect(parse.color).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 873, 'column': 23, 'index': 27791}","  871 |
  872 |     it(""should correctly extract the custom color"", function() {
> 873 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Lazy Test
  874 |         const parse2 = getParsed(customColorExpression2)[0];
  875 |         const parse3 = getParsed(customColorExpression3)[0];
  876 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 932, 'column': 22, 'index': 29717}","  930 |
  931 |     it(""should produce spacing in math mode"", function() {
> 932 |         const parse = getParsed(mathTie);
      |                      ^ Lazy Test
  933 |
  934 |         expect(parse[1].type).toEqual(""spacing"");
  935 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 938, 'column': 21, 'index': 29877}","  936 |
  937 |     it(""should produce spacing in text mode"", function() {
> 938 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  939 |         const parse = text.body;
  940 |
  941 |         expect(parse[1].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 945, 'column': 21, 'index': 30082}","  943 |
  944 |     it(""should not contract with spaces in text mode"", function() {
> 945 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  946 |         const parse = text.body;
  947 |
  948 |         expect(parse[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 967, 'column': 22, 'index': 30679}","  965 |
  966 |     it(""should produce a delimsizing"", function() {
> 967 |         const parse = getParsed(normalDelim)[0];
      |                      ^ Lazy Test
  968 |
  969 |         expect(parse.type).toEqual(""delimsizing"");
  970 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 973, 'column': 26, 'index': 30863}","  971 |
  972 |     it(""should produce the correct direction delimiter"", function() {
> 973 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Lazy Test
  974 |         const rightParse = getParsed(bigDelim)[0];
  975 |
  976 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 981, 'column': 27, 'index': 31145}","  979 |
  980 |     it(""should parse the correct size delimiter"", function() {
> 981 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Lazy Test
  982 |         const bigParse = getParsed(bigDelim)[0];
  983 |
  984 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 997, 'column': 22, 'index': 31560}","   995 |
   996 |     it(""should produce an overline"", function() {
>  997 |         const parse = getParsed(overline)[0];
       |                      ^ Lazy Test
   998 |
   999 |         expect(parse.type).toEqual(""overline"");
  1000 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1056, 'column': 22, 'index': 33410}","  1054 |
  1055 |     it(""should produce a rule"", function() {
> 1056 |         const parse = getParsed(emRule)[0];
       |                      ^ Lazy Test
  1057 |
  1058 |         expect(parse.type).toEqual(""rule"");
  1059 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1062, 'column': 24, 'index': 33563}","  1060 |
  1061 |     it(""should list the correct units"", function() {
> 1062 |         const emParse = getParsed(emRule)[0];
       |                        ^ Lazy Test
  1063 |         const exParse = getParsed(exRule)[0];
  1064 |
  1065 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1073, 'column': 32, 'index': 33933}","  1071 |
  1072 |     it(""should parse the number correctly"", function() {
> 1073 |         const hardNumberParse = getParsed(hardNumberRule)[0];
       |                                ^ Lazy Test
  1074 |
  1075 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
  1076 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1100, 'column': 24, 'index': 34779}","  1098 |
  1099 |     it(""should list the correct units"", function() {
> 1100 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1101 |         const exParse = getParsed(exKern)[0];
  1102 |         const muParse = getParsed(muKern)[0];
  1103 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1138, 'column': 24, 'index': 36062}","  1136 |
  1137 |     it(""should list the correct units"", function() {
> 1138 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1139 |         const exParse = getParsed(exKern)[0];
  1140 |         const muParse = getParsed(muKern)[0];
  1141 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1154, 'column': 25, 'index': 36752}","  1152 |
  1153 |     it(""should parse elements on either side of a kern"", function() {
> 1154 |         const abParse1 = getParsed(abKern1);
       |                         ^ Lazy Test
  1155 |         const abParse2 = getParsed(abKern2);
  1156 |         const abParse3 = getParsed(abKern3);
  1157 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1185, 'column': 24, 'index': 37827}","  1183 |
  1184 |     it(""should handle whitespace"", function() {
> 1185 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
       |                        ^ Lazy Test
  1186 |
  1187 |         expect(abParse).toHaveLength(3);
  1188 |         expect(abParse[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1203, 'column': 22, 'index': 38394}","  1201 |
  1202 |     it(""should produce a leftright"", function() {
> 1203 |         const parse = getParsed(normalLeftRight)[0];
       |                      ^ Lazy Test
  1204 |
  1205 |         expect(parse.type).toEqual(""leftright"");
  1206 |         expect(parse.left).toEqual(""("");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1380, 'column': 22, 'index': 44759}","  1378 |
  1379 |     it(""should produce sqrts"", function() {
> 1380 |         const parse = getParsed(sqrt)[0];
       |                      ^ Lazy Test
  1381 |
  1382 |         expect(parse.type).toEqual(""sqrt"");
  1383 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1579, 'column': 22, 'index': 51179}","  1577 |     it(""should only change the style within its group"", function() {
  1578 |         const text = r`a b { c d \displaystyle e f } g h`;
> 1579 |         const parse = getParsed(text);
       |                      ^ Lazy Test
  1580 |
  1581 |         const displayNode = parse[2].body[2];
  1582 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2079, 'column': 19, 'index': 73933}","  2077 |     it(""should render a combination of font and color changes"", function() {
  2078 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2079 |         let tree = getParsed(tex);
       |                   ^ Lazy Test
  2080 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2081 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2082 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2098, 'column': 21, 'index': 74674}","  2096 |     it(""should render text as <mtext>"", function() {
  2097 |         const tex = r`\text{for }`;
> 2098 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2099 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2100 |         expect(markup).toContain(""<mtext>for\u00a0</mtext>"");
  2101 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2105, 'column': 21, 'index': 74986}","  2103 |     it(""should render math within text as side-by-side children"", function() {
  2104 |         const tex = r`\text{graph: $y = mx + b$}`;
> 2105 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2106 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2107 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
  2108 |         expect(markup).toContain(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2120, 'column': 15, 'index': 75646}","  2118 |
  2119 |     it(""should produce mords"", function() {
> 2120 |         expect(getBuilt(img, trustSettings)[0].classes).toContain(""mord"");
       |               ^ Lazy Test
  2121 |     });
  2122 |
  2123 |     it(""should not render without trust setting"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2124, 'column': 22, 'index': 75800}","  2122 |
  2123 |     it(""should not render without trust setting"", function() {
> 2124 |         const built = getBuilt(img);
       |                      ^ Lazy Test
  2125 |         expect(built).toMatchSnapshot();
  2126 |     });
  2127 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2129, 'column': 22, 'index': 75943}","  2127 |
  2128 |     it(""should render with trust setting"", function() {
> 2129 |         const built = getBuilt(img, trustSettings);
       |                      ^ Lazy Test
  2130 |         expect(built).toMatchSnapshot();
  2131 |     });
  2132 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2155, 'column': 22, 'index': 76889}","  2153 |
  2154 |     it(""should set HTML attributes"", function() {
> 2155 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2156 |         expect(built[0].attributes.id).toMatch(""bar"");
  2157 |         expect(built[1].classes).toContain(""foo"");
  2158 |         expect(built[2].attributes.style).toMatch(""color: red"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2166, 'column': 22, 'index': 77296}","  2164 |
  2165 |     it(""should not affect spacing"", function() {
> 2166 |         const built = getBuilt(""\\htmlId{a}{x+}y"", trustNonStrictSettings);
       |                      ^ Lazy Test
  2167 |         expect(built).toMatchSnapshot();
  2168 |     });
  2169 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2171, 'column': 22, 'index': 77489}","  2169 |
  2170 |     it(""should render with trust and strict setting"", function() {
> 2171 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2172 |         expect(built).toMatchSnapshot();
  2173 |     });
  2174 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2346, 'column': 21, 'index': 83991}","  2344 |     it(""should properly render stretchy accents"", function() {
  2345 |         const tex = `\\widetilde{ABCD}`;
> 2346 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2347 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2348 |         expect(markup).toContain('<mo stretchy=""true"">~</mo>');
  2349 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2996, 'column': 24, 'index': 108157}","  2994 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2995 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2996 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  2997 |         expect(parsed1.href).toBe(url);
  2998 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2999 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3004, 'column': 24, 'index': 108507}","  3002 |     it(""should allow balanced braces in url"", function() {
  3003 |         const url = ""http://example.org/{{}t{oo}}"";
> 3004 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3005 |         expect(parsed1.href).toBe(url);
  3006 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3007 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3020, 'column': 24, 'index': 109281}","  3018 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3019 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3020 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3021 |         expect(parsed1.href).toBe(url);
  3022 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3023 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3036, 'column': 22, 'index': 109946}","  3034 |
  3035 |     it(""should not affect spacing around"", function() {
> 3036 |         const built = getBuilt(""a\\href{http://example.com/}{+b}"", trustSettings);
       |                      ^ Lazy Test
  3037 |         expect(built).toMatchSnapshot();
  3038 |     });
  3039 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3046, 'column': 23, 'index': 110320}","  3044 |
  3045 |     it(""should allow explicitly allowed protocols"", () => {
> 3046 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3047 |             ""\\href{ftp://x}{foo}"",
  3048 |             new Settings({trust: (context) => context.protocol === ""ftp""}),
  3049 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3054, 'column': 23, 'index': 110599}","  3052 |
  3053 |     it(""should allow all protocols when trust option is true"", () => {
> 3054 |         const parsed = getParsed(""\\href{ftp://x}{foo}"", trustSettings);
       |                       ^ Lazy Test
  3055 |         expect(parsed).toMatchSnapshot();
  3056 |     });
  3057 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3059, 'column': 23, 'index': 110790}","  3057 |
  3058 |     it(""should not allow explicitly disallowed protocols"", () => {
> 3059 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3060 |             ""\\href{javascript:alert('x')}{foo}"",
  3061 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3062 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3067, 'column': 23, 'index': 111095}","  3065 |
  3066 |     it(""should not allow explicitly uppercased disallowed protocols"", () => {
> 3067 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3068 |             ""\\href{JavaScript:alert('x')}{foo}"",
  3069 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3070 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3143, 'column': 28, 'index': 114176}","  3141 |
  3142 |     it(""should produce color nodes with a color value given by errorColor"", function() {
> 3143 |         const parsedInput = getParsed(r`\error`, noThrowSettings);
       |                            ^ Lazy Test
  3144 |         expect(parsedInput[0].type).toBe(""color"");
  3145 |         expect(parsedInput[0].color).toBe(errorColor);
  3146 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3149, 'column': 22, 'index': 114435}","  3147 |
  3148 |     it(""should build katex-error span for other type of KaTeX error"", function() {
> 3149 |         const built = getBuilt(`2^2^2`, noThrowSettings);
       |                      ^ Lazy Test
  3150 |         expect(built).toMatchSnapshot();
  3151 |     });
  3152 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3484, 'column': 27, 'index': 127193}","  3482 |         const parsedBare = getParsed`~`;
  3483 |         expect(parsedBare[0].type).toEqual(""spacing"");
> 3484 |         const parsedChar = getParsed(""\\char`\\~"");
       |                           ^ Lazy Test
  3485 |         expect(parsedChar[0].type).toEqual(""textord"");
  3486 |     });
  3487 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4056, 'column': 22, 'index': 151154}","  4054 |
  4055 |     it(""should clamp size when set"", function() {
> 4056 |         const built = getBuilt(rule, new Settings({maxSize: 5}))[0];
       |                      ^ Lazy Test
  4057 |         expect(built.style.borderRightWidth).toEqual(""5em"");
  4058 |         expect(built.style.borderTopWidth).toEqual(""5em"");
  4059 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4062, 'column': 22, 'index': 151410}","  4060 |
  4061 |     it(""should not clamp size when not set"", function() {
> 4062 |         const built = getBuilt(rule)[0];
       |                      ^ Lazy Test
  4063 |         expect(built.style.borderRightWidth).toEqual(""999em"");
  4064 |         expect(built.style.borderTopWidth).toEqual(""999em"");
  4065 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4068, 'column': 22, 'index': 151668}","  4066 |
  4067 |     it(""should make zero-width rules if a negative maxSize is passed"", function() {
> 4068 |         const built = getBuilt(rule, new Settings({maxSize: -5}))[0];
       |                      ^ Lazy Test
  4069 |         expect(built.style.borderRightWidth).toEqual(""0em"");
  4070 |         expect(built.style.borderTopWidth).toEqual(""0em"");
  4071 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 100, 'column': 48, 'index': 2862}","   98 |         parse.forEach(group => {
   99 |             if (group.type === ""htmlmathml"") {
> 100 |                 expect(group.html).toHaveLength(1);
      |                                                ^ Magic Number
  101 |                 verifyGroup(group.html[0]);
  102 |             } else {
  103 |                 verifyGroup(group);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 118, 'column': 44, 'index': 3480}","  116 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
  117 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
> 118 |         expect(mml.children.length).toEqual(1);
      |                                            ^ Magic Number
  119 |     });
  120 | });
  121 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 350, 'column': 35, 'index': 10150}","  348 |         const parse = getParsed`{xy}`;
  349 |
> 350 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  351 |
  352 |         const ord = parse[0];
  353 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 372, 'column': 35, 'index': 10752}","  370 |         const parse = getParsed`\begingroup xy \endgroup`;
  371 |
> 372 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  373 |
  374 |         const ord = parse[0];
  375 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 395, 'column': 35, 'index': 11379}","  393 |         const parse = getParsed`\Large abc`;
  394 |
> 395 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  396 |
  397 |         const sizing = parse[0];
  398 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 407, 'column': 35, 'index': 11702}","  405 |         const parse = getParsed`a \Large abc`;
  406 |
> 407 |         expect(parse).toHaveLength(2);
      |                                   ^ Magic Number
  408 |
  409 |         const sizing = parse[1];
  410 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 412, 'column': 41, 'index': 11829}","  410 |
  411 |         expect(sizing.type).toEqual(""sizing"");
> 412 |         expect(sizing.body).toHaveLength(3);
      |                                         ^ Magic Number
  413 |     });
  414 |
  415 |     it(""should stop at the ends of groups"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 422, 'column': 41, 'index': 12112}","  420 |
  421 |         expect(sizing.type).toEqual(""sizing"");
> 422 |         expect(sizing.body).toHaveLength(1);
      |                                         ^ Magic Number
  423 |     });
  424 |
  425 |     describe(""within optional groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 609, 'column': 40, 'index': 18341}","  607 |
  608 |         const numer = parse.numer;
> 609 |         expect(numer.body).toHaveLength(4);
      |                                        ^ Magic Number
  610 |     });
  611 |
  612 |     it(""should create a denominator from the atoms after \\over"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 616, 'column': 40, 'index': 18558}","  614 |
  615 |         const denom = parse.denom;
> 616 |         expect(denom.body).toHaveLength(4);
      |                                        ^ Magic Number
  617 |     });
  618 |
  619 |     it(""should handle empty numerators"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 756, 'column': 37, 'index': 23366}","  754 |         const group = parse.body;
  755 |
> 756 |         expect(group.length).toEqual(4);
      |                                     ^ Magic Number
  757 |         expect(group[0].type).toEqual(""spacing"");
  758 |         expect(group[1].type).toEqual(""textord"");
  759 |         expect(group[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 774, 'column': 40, 'index': 24038}","  772 |         const parse = getParsed(leadingSpaceTextExpression)[0];
  773 |         // [m, o, o]
> 774 |         expect(parse.body).toHaveLength(3);
      |                                        ^ Magic Number
  775 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");
  776 |     });
  777 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 984, 'column': 40, 'index': 31262}","  982 |         const bigParse = getParsed(bigDelim)[0];
  983 |
> 984 |         expect(smallParse.size).toEqual(1);
      |                                        ^ Magic Number
  985 |         expect(bigParse.size).toEqual(4);
  986 |     });
  987 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 985, 'column': 38, 'index': 31304}","  983 |
  984 |         expect(smallParse.size).toEqual(1);
> 985 |         expect(bigParse.size).toEqual(4);
      |                                      ^ Magic Number
  986 |     });
  987 | });
  988 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1075, 'column': 57, 'index': 34021}","  1073 |         const hardNumberParse = getParsed(hardNumberRule)[0];
  1074 |
> 1075 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
       |                                                         ^ Magic Number
  1076 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
  1077 |     });
  1078 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1076, 'column': 58, 'index': 34086}","  1074 |
  1075 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
> 1076 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
       |                                                          ^ Magic Number
  1077 |     });
  1078 |
  1079 |     it(""should parse negative sizes"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1123, 'column': 51, 'index': 35631}","  1121 |     it(""should parse positive sizes"", function() {
  1122 |         const parse = getParsed`\kern{+1em}`[0];
> 1123 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1124 |     });
  1125 | });
  1126 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1158, 'column': 38, 'index': 36901}","  1156 |         const abParse3 = getParsed(abKern3);
  1157 |
> 1158 |         expect(abParse1).toHaveLength(3);
       |                                      ^ Magic Number
  1159 |         expect(abParse1[0].text).toEqual(""a"");
  1160 |         expect(abParse1[2].text).toEqual(""b"");
  1161 |         expect(abParse2).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1161, 'column': 38, 'index': 37037}","  1159 |         expect(abParse1[0].text).toEqual(""a"");
  1160 |         expect(abParse1[2].text).toEqual(""b"");
> 1161 |         expect(abParse2).toHaveLength(3);
       |                                      ^ Magic Number
  1162 |         expect(abParse2[0].text).toEqual(""a"");
  1163 |         expect(abParse2[2].text).toEqual(""b"");
  1164 |         expect(abParse3).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1164, 'column': 38, 'index': 37173}","  1162 |         expect(abParse2[0].text).toEqual(""a"");
  1163 |         expect(abParse2[2].text).toEqual(""b"");
> 1164 |         expect(abParse3).toHaveLength(3);
       |                                      ^ Magic Number
  1165 |         expect(abParse3[0].text).toEqual(""a"");
  1166 |         expect(abParse3[2].text).toEqual(""b"");
  1167 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1181, 'column': 51, 'index': 37742}","  1179 |     it(""should parse positive sizes"", function() {
  1180 |         const parse = getParsed`\kern+1em`[0];
> 1181 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1182 |     });
  1183 |
  1184 |     it(""should handle whitespace"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1187, 'column': 37, 'index': 37904}","  1185 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
  1186 |
> 1187 |         expect(abParse).toHaveLength(3);
       |                                     ^ Magic Number
  1188 |         expect(abParse[0].text).toEqual(""a"");
  1189 |         expect(abParse[1].dimension.unit).toEqual(""mu"");
  1190 |         expect(abParse[2].text).toEqual(""b"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1340, 'column': 37, 'index': 43200}","  1338 |     it(""should eat a final newline"", function() {
  1339 |         const m3 = getParsed`\begin{matrix}a&b\\ c&d \\ \end{matrix}`[0];
> 1340 |         expect(m3.body).toHaveLength(2);
       |                                     ^ Magic Number
  1341 |     });
  1342 |
  1343 |     it(""should grab \\arraystretch"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1587, 'column': 41, 'index': 51386}","  1585 |         const displayBody = displayNode.body;
  1586 |
> 1587 |         expect(displayBody).toHaveLength(2);
       |                                         ^ Magic Number
  1588 |         expect(displayBody[0].text).toEqual(""e"");
  1589 |     });
  1590 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1641, 'column': 36, 'index': 53421}","  1639 |
  1640 |         const bbBody = nestedParse.body.body;
> 1641 |         expect(bbBody).toHaveLength(3);
       |                                    ^ Magic Number
  1642 |         expect(bbBody[0].type).toEqual(""mathord"");
  1643 |         expect(bbBody[2].type).toEqual(""font"");
  1644 |         expect(bbBody[2].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1653, 'column': 34, 'index': 53949}","  1651 |         expect(colorMathbbParse.color).toEqual(""blue"");
  1652 |         const body = colorMathbbParse.body;
> 1653 |         expect(body).toHaveLength(1);
       |                                  ^ Magic Number
  1654 |         expect(body[0].type).toEqual(""font"");
  1655 |         expect(body[0].font).toEqual(""mathbb"");
  1656 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1666, 'column': 42, 'index': 54413}","  1664 |         expect(bf.type).toEqual(""font"");
  1665 |         expect(bf.font).toEqual(""mathbf"");
> 1666 |         expect(bf.body.body).toHaveLength(3);
       |                                          ^ Magic Number
  1667 |         expect(bf.body.body[0].text).toEqual(""a"");
  1668 |         expect(bf.body.body[1].type).toEqual(""font"");
  1669 |         expect(bf.body.body[1].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2239, 'column': 45, 'index': 80274}","  2237 |         // Just a few quick sanity checks here...
  2238 |         const markup = katex.renderToString(r`\sigma^2`);
> 2239 |         expect(markup.indexOf(""<span"")).toBe(0);
       |                                             ^ Magic Number
  2240 |         expect(markup).toContain(""\u03c3"");  // sigma
  2241 |         expect(markup).toContain(""margin-right"");
  2242 |         expect(markup).not.toContain(""marginRight"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2745, 'column': 39, 'index': 97492}","  2743 |             parseTree(r`\sqrt}`, new Settings());
  2744 |         } catch (e) {
> 2745 |             expect(e.position).toEqual(5);
       |                                       ^ Magic Number
  2746 |         }
  2747 |     });
  2748 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2879, 'column': 37, 'index': 101787}","  2877 |     it(""should not eat the last row when its first cell is empty"", function() {
  2878 |         const ae = getParsed`\begin{aligned}&E_1 & (1)\\&E_2 & (2)\\&E_3 & (3)\end{aligned}`[0];
> 2879 |         expect(ae.body).toHaveLength(3);
       |                                     ^ Magic Number
  2880 |     });
  2881 | });
  2882 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3170, 'column': 40, 'index': 115344}","  3168 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");
  3169 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
> 3170 |             expect(error.position).toBe(4);
       |                                        ^ Magic Number
  3171 |             expect(error.length).toBe(5);
  3172 |         }
  3173 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3171, 'column': 38, 'index': 115386}","  3169 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
  3170 |             expect(error.position).toBe(4);
> 3171 |             expect(error.length).toBe(5);
       |                                      ^ Magic Number
  3172 |         }
  3173 |     });
  3174 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3185, 'column': 40, 'index': 116038}","  3183 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");
  3184 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
> 3185 |             expect(error.position).toBe(7);
       |                                        ^ Magic Number
  3186 |             expect(error.length).toBe(0);
  3187 |         }
  3188 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3186, 'column': 38, 'index': 116080}","  3184 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
  3185 |             expect(error.position).toBe(7);
> 3186 |             expect(error.length).toBe(0);
       |                                      ^ Magic Number
  3187 |         }
  3188 |     });
  3189 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 764}","  762 |
  763 |     it(""should handle backslash followed by newline"", () => {
> 764 |         expect(""\\text{\\ \t\r \n \t\r  }"").toParseLike`\text{\ }`;
      |        ^ Redundant Assertion
  765 |     });
  766 |
  767 |     it(""should accept math mode tokens after its argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1735}","  1733 | describe(""A comment parser"", function() {
  1734 |     it(""should parse comments at the end of a line"", () => {
> 1735 |         expect(""a^2 + b^2 = c^2 % Pythagoras' Theorem\n"").toParse();
       |        ^ Redundant Assertion
  1736 |     });
  1737 |
  1738 |     it(""should parse comments at the start of a line"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1739}","  1737 |
  1738 |     it(""should parse comments at the start of a line"", () => {
> 1739 |         expect(""% comment\n"").toParse();
       |        ^ Redundant Assertion
  1740 |     });
  1741 |
  1742 |     it(""should parse multiple lines of comments in a row"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1743}","  1741 |
  1742 |     it(""should parse multiple lines of comments in a row"", () => {
> 1743 |         expect(""% comment 1\n% comment 2\n"").toParse();
       |        ^ Redundant Assertion
  1744 |     });
  1745 |
  1746 |     it(""should parse comments between subscript and superscript"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1747}","  1745 |
  1746 |     it(""should parse comments between subscript and superscript"", () => {
> 1747 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
       |        ^ Redundant Assertion
  1748 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
  1749 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1750 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1748}","  1746 |     it(""should parse comments between subscript and superscript"", () => {
  1747 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
> 1748 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
       |        ^ Redundant Assertion
  1749 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1750 |     });
  1751 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1749}","  1747 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
  1748 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
> 1749 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
       |        ^ Redundant Assertion
  1750 |     });
  1751 |
  1752 |     it(""should parse comments in size and color groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1753}","  1751 |
  1752 |     it(""should parse comments in size and color groups"", () => {
> 1753 |         expect(""\\kern{1 %kern\nem}"").toParse();
       |        ^ Redundant Assertion
  1754 |         expect(""\\kern1 %kern\nem"").toParse();
  1755 |         expect(""\\color{#f00%red\n}"").toParse();
  1756 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1754}","  1752 |     it(""should parse comments in size and color groups"", () => {
  1753 |         expect(""\\kern{1 %kern\nem}"").toParse();
> 1754 |         expect(""\\kern1 %kern\nem"").toParse();
       |        ^ Redundant Assertion
  1755 |         expect(""\\color{#f00%red\n}"").toParse();
  1756 |     });
  1757 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1755}","  1753 |         expect(""\\kern{1 %kern\nem}"").toParse();
  1754 |         expect(""\\kern1 %kern\nem"").toParse();
> 1755 |         expect(""\\color{#f00%red\n}"").toParse();
       |        ^ Redundant Assertion
  1756 |     });
  1757 |
  1758 |     it(""should parse comments before an expression"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1759}","  1757 |
  1758 |     it(""should parse comments before an expression"", () => {
> 1759 |         expect(""%comment\n{2}"").toParseLike`{2}`;
       |        ^ Redundant Assertion
  1760 |     });
  1761 |
  1762 |     it(""should parse comments before and between \\hline"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1769}","  1767 |
  1768 |     it(""should parse comments in the macro definition"", () => {
> 1769 |         expect(""\\def\\foo{1 %}\n2}\n\\foo"").toParseLike`12`;
       |        ^ Redundant Assertion
  1770 |     });
  1771 |
  1772 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1773}","  1771 |
  1772 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {
> 1773 |         expect(""\\def\\foo{1\n2}\nx %\\foo\n"").toParseLike`x`;
       |        ^ Redundant Assertion
  1774 |     });
  1775 |
  1776 |     it(""should not parse a comment without newline in strict mode"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1782}","  1780 |
  1781 |     it(""should not produce or consume space"", () => {
> 1782 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
       |        ^ Redundant Assertion
  1783 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
  1784 |     });
  1785 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1783}","  1781 |     it(""should not produce or consume space"", () => {
  1782 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
> 1783 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
       |        ^ Redundant Assertion
  1784 |     });
  1785 |
  1786 |     it(""should not include comments in the output"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1787}","  1785 |
  1786 |     it(""should not include comments in the output"", () => {
> 1787 |         expect(""5 % comment\n"").toParseLike`5`;
       |        ^ Redundant Assertion
  1788 |     });
  1789 | });
  1790 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 16, 'line': 2182}","  2180 |
  2181 |                 // Render is expected to throw, so this should not be called.
> 2182 |                 expect(true).toBe(false);
       |                ^ Redundant Assertion
  2183 |             } catch (error) {
  2184 |                 expect(error).toBeInstanceOf(ParseError);
  2185 |                 const message =",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 2984}","  2982 |         expect`\href%end`.toParseLike(""\\href{%}end"", trustSettings);
  2983 |         expect`\url%end`.toParseLike(""\\url{%}end"", trustSettings);
> 2984 |         expect(""\\url%%end\n"").toParseLike(""\\url{%}"", trustSettings);
       |        ^ Redundant Assertion
  2985 |         expect`\url end`.toParseLike(""\\url{e}nd"", trustSettings);
  2986 |         expect`\url%end`.toParseLike(""\\url {%}end"", trustSettings);
  2987 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3027}","  3025 |
  3026 |     it(""should allow comments after URLs"", function() {
> 3027 |         expect(""\\url{http://example.com/}%comment\n"").toBuild();
       |        ^ Redundant Assertion
  3028 |     });
  3029 |
  3030 |     it(""should be marked up correctly"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3165}","  3163 |
  3164 |             // Render is expected to throw, so this should not be called.
> 3165 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3166 |         } catch (error) {
  3167 |             expect(error).toBeInstanceOf(ParseError);
  3168 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3180}","  3178 |
  3179 |             // Render is expected to throw, so this should not be called.
> 3180 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3181 |         } catch (error) {
  3182 |             expect(error).toBeInstanceOf(ParseError);
  3183 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3195}","  3193 |
  3194 |             // Render is expected to throw, so this should not be called.
> 3195 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3196 |         } catch (error) {
  3197 |             expect(error).toBeInstanceOf(ParseError);
  3198 |             expect(error.message).toBe(""KaTeX parse error: \\verb ended by end of line instead of matching delimiter"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3468}","  3466 |
  3467 |     it(""\\char produces literal characters"", () => {
> 3468 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
       |        ^ Redundant Assertion
  3469 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3470 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3471 |         expect(""\\char`\\%"").toParseLike`\char""25`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3469}","  3467 |     it(""\\char produces literal characters"", () => {
  3468 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3469 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Redundant Assertion
  3470 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3471 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3472 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3470}","  3468 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3469 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3470 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Redundant Assertion
  3471 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3472 |         expect`\char`.not.toParse();
  3473 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3471}","  3469 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3470 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3471 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Redundant Assertion
  3472 |         expect`\char`.not.toParse();
  3473 |         expect(""\\char`"").not.toParse();
  3474 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3473}","  3471 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3472 |         expect`\char`.not.toParse();
> 3473 |         expect(""\\char`"").not.toParse();
       |        ^ Redundant Assertion
  3474 |         expect`\char'`.not.toParse();
  3475 |         expect`\char""`.not.toParse();
  3476 |         expect`\char'a`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3937}","  3935 |
  3936 |     it(""should parse combining characters"", function() {
> 3937 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
       |        ^ Redundant Assertion
  3938 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
  3939 |     });
  3940 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3938}","  3936 |     it(""should parse combining characters"", function() {
  3937 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
> 3938 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
       |        ^ Redundant Assertion
  3939 |     });
  3940 |
  3941 |     it(""should parse multi-accented characters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3976}","  3974 |
  3975 |     it(""should parse symbols"", function() {
> 3976 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3977 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
  3978 |     });
  3979 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3977}","  3975 |     it(""should parse symbols"", function() {
  3976 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
> 3977 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3978 |     });
  3979 |
  3980 |     it(""should build Greek capital letters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3994}","  3992 |
  3993 |     it(""should build binary operators"", function() {
> 3994 |         expect(""±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞\u22C5\u2218\u2216\u2219"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3995 |     });
  3996 |
  3997 |     it(""should build common ords"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3998}","  3996 |
  3997 |     it(""should build common ords"", function() {
> 3998 |         expect(""§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3999 |     });
  4000 |
  4001 |     it(""should build delimiters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4002}","  4000 |
  4001 |     it(""should build delimiters"", function() {
> 4002 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
       |        ^ Redundant Assertion
  4003 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4004 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4005 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4003}","  4001 |     it(""should build delimiters"", function() {
  4002 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
> 4003 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
       |        ^ Redundant Assertion
  4004 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4005 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4006 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4004}","  4002 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
  4003 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
> 4004 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
       |        ^ Redundant Assertion
  4005 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4006 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4007 |         expect`┌x┐ └x┘`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4005}","  4003 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4004 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
> 4005 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
       |        ^ Redundant Assertion
  4006 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4007 |         expect`┌x┐ └x┘`.toBuild();
  4008 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4006}","  4004 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4005 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
> 4006 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
       |        ^ Redundant Assertion
  4007 |         expect`┌x┐ └x┘`.toBuild();
  4008 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4009 |         expect(""\u27E6x\u27E7"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4008}","  4006 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4007 |         expect`┌x┐ └x┘`.toBuild();
> 4008 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
       |        ^ Redundant Assertion
  4009 |         expect(""\u27E6x\u27E7"").toBuild();
  4010 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4011 |         expect(""\\lBrace \\rBrace"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4009}","  4007 |         expect`┌x┐ └x┘`.toBuild();
  4008 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
> 4009 |         expect(""\u27E6x\u27E7"").toBuild();
       |        ^ Redundant Assertion
  4010 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4011 |         expect(""\\lBrace \\rBrace"").toBuild();
  4012 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4010}","  4008 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4009 |         expect(""\u27E6x\u27E7"").toBuild();
> 4010 |         expect(""\\llbracket \\rrbracket"").toBuild();
       |        ^ Redundant Assertion
  4011 |         expect(""\\lBrace \\rBrace"").toBuild();
  4012 |     });
  4013 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4011}","  4009 |         expect(""\u27E6x\u27E7"").toBuild();
  4010 |         expect(""\\llbracket \\rrbracket"").toBuild();
> 4011 |         expect(""\\lBrace \\rBrace"").toBuild();
       |        ^ Redundant Assertion
  4012 |     });
  4013 |
  4014 |     it(""should build some surrogate pairs"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4281, 'column': 19, 'index': 160276}","  4279 |             expect`\message{Hello, world}`.toParse();
  4280 |             // eslint-disable-next-line no-console
> 4281 |             expect(console.log).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4282 |         });
  4283 |     });
  4284 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4290, 'column': 19, 'index': 160641}","  4288 |             expect`\errmessage{Hello, world}`.toParse();
  4289 |             // eslint-disable-next-line no-console
> 4290 |             expect(console.error).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4291 |         });
  4292 |     });
  4293 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 23}","  21 |
  22 | describe(""A parser"", function() {
> 23 |     it(""should not fail on an empty string"", function() {
     |    ^ Unknown Test
  24 |         expect``.toParse(strictSettings);
  25 |     });
  26 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 27}","  25 |     });
  26 |
> 27 |     it(""should ignore whitespace"", function() {
     |    ^ Unknown Test
  28 |         expect`    x    y    `.toParseLike(""xy"", strictSettings);
  29 |     });
  30 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 31}","  29 |     });
  30 |
> 31 |     it(""should ignore whitespace in atom"", function() {
     |    ^ Unknown Test
  32 |         expect`    x   ^ y    `.toParseLike(""x^y"", strictSettings);
  33 |     });
  34 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 110}","  108 |
  109 | describe(""A mathinner parser"", function() {
> 110 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  111 |         expect`\mathinner{\langle{\psi}\rangle}`.toParse();
  112 |         expect`\frac 1 {\mathinner{\langle{\psi}\rangle}}`.toParse();
  113 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 177}","  175 |
  176 | describe(""A \\KaTeX parser"", function() {
> 177 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  178 |         expect`\KaTeX`.toParse();
  179 |     });
  180 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 183}","  181 |
  182 | describe(""A subscript and superscript parser"", function() {
> 183 |     it(""should not fail on superscripts"", function() {
      |    ^ Unknown Test
  184 |         expect`x^2`.toParse();
  185 |     });
  186 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 187}","  185 |     });
  186 |
> 187 |     it(""should not fail on subscripts"", function() {
      |    ^ Unknown Test
  188 |         expect`x_3`.toParse();
  189 |     });
  190 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 191}","  189 |     });
  190 |
> 191 |     it(""should not fail on both subscripts and superscripts"", function() {
      |    ^ Unknown Test
  192 |         expect`x^2_3`.toParse();
  193 |
  194 |         expect`x_2^3`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 197}","  195 |     });
  196 |
> 197 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  198 |         expect`^3`.toParse();
  199 |         expect`^3+`.toParse();
  200 |         expect`_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 241}","  239 |     });
  240 |
> 241 |     it(""should produce the same thing regardless of order"", function() {
      |    ^ Unknown Test
  242 |         expect`x^2_3`.toParseLike`x_3^2`;
  243 |     });
  244 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 245}","  243 |     });
  244 |
> 245 |     it(""should not parse double subscripts or superscripts"", function() {
      |    ^ Unknown Test
  246 |         expect`x^x^x`.not.toParse();
  247 |
  248 |         expect`x_x_x`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 259}","  257 |     });
  258 |
> 259 |     it(""should work correctly with {}s"", function() {
      |    ^ Unknown Test
  260 |         expect`x^{2+3}`.toParse();
  261 |
  262 |         expect`x_{3-2}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 277}","  275 |     });
  276 |
> 277 |     it(""should work with nested super/subscripts"", function() {
      |    ^ Unknown Test
  278 |         expect`x^{x^x}`.toParse();
  279 |         expect`x^{x_x}`.toParse();
  280 |         expect`x_{x^x}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 284}","  282 |     });
  283 |
> 284 |     it(""should work with Unicode (sub|super)script characters"", function() {
      |    ^ Unknown Test
  285 |         expect`A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃`.toParseLike`A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}`;
  286 |     });
  287 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 288}","  286 |     });
  287 |
> 288 |     it(""should not fail if \\relax is in an atom"", function() {
      |    ^ Unknown Test
  289 |         expect`\hskip1em\relax^2`.toParse(strictSettings);
  290 |     });
  291 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 292}","  290 |     });
  291 |
> 292 |     it(""should skip \\relax in super/subscripts"", function() {
      |    ^ Unknown Test
  293 |         expect`x^\relax 2`.toParseLike`x^2`;
  294 |         expect`x_\relax 2`.toParseLike`x_2`;
  295 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 299}","  297 |
  298 | describe(""A subscript and superscript tree-builder"", function() {
> 299 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  300 |         expect`^3`.toBuild();
  301 |         expect`_2`.toBuild();
  302 |         expect`^3_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 308}","  306 |
  307 | describe(""A parser with limit controls"", function() {
> 308 |     it(""should fail when the limit control is not preceded by an op node"", function() {
      |    ^ Unknown Test
  309 |         expect`3\nolimits_2^2`.not.toParse();
  310 |         expect`\sqrt\limits_2^2`.not.toParse();
  311 |         expect`45 +\nolimits 45`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 314}","  312 |     });
  313 |
> 314 |     it(""should parse when the limit control directly follows an op node"", function() {
      |    ^ Unknown Test
  315 |         expect`\int\limits_2^2 3`.toParse();
  316 |         expect`\sum\nolimits_3^4 4`.toParse();
  317 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 319}","  317 |     });
  318 |
> 319 |     it(""should parse when the limit control is in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  320 |         expect`\int_2^2\limits`.toParse();
  321 |         expect`\int^2\nolimits_2`.toParse();
  322 |         expect`\int_2\limits^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 325}","  323 |     });
  324 |
> 325 |     it(""should allow multiple limit controls in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  326 |         expect`\int_2\nolimits^2\limits 3`.toParse();
  327 |         expect`\int\nolimits\limits_2^2`.toParse();
  328 |         expect`\int\limits\limits\limits_2^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 343}","  341 |
  342 | describe(""A group parser"", function() {
> 343 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  344 |         expect`{xy}`.toParse();
  345 |     });
  346 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 360}","  358 |
  359 | describe(""A \\begingroup...\\endgroup parser"", function() {
> 360 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  361 |         expect`\begingroup xy \endgroup`.toParse();
  362 |     });
  363 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 364}","  362 |     });
  363 |
> 364 |     it(""should fail when it is mismatched"", function() {
      |    ^ Unknown Test
  365 |         expect`\begingroup xy`.not.toParse();
  366 |         expect`\begingroup xy }`.not.toParse();
  367 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 381}","  379 |     });
  380 |
> 381 |     it(""should not affect spacing in math mode"", function() {
      |    ^ Unknown Test
  382 |         expect`\begingroup x+ \endgroup y`.toBuildLike`x+y`;
  383 |     });
  384 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 387}","  385 |
  386 | describe(""An implicit group parser"", function() {
> 387 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  388 |         expect`\Large x`.toParse();
  389 |         expect`abc {abc \Large xyz} abc`.toParse();
  390 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 449}","  447 |
  448 | describe(""A function parser"", function() {
> 449 |     it(""should parse no argument functions"", function() {
      |    ^ Unknown Test
  450 |         expect`\div`.toParse();
  451 |     });
  452 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 453}","  451 |     });
  452 |
> 453 |     it(""should parse 1 argument functions"", function() {
      |    ^ Unknown Test
  454 |         expect`\blue x`.toParse();
  455 |     });
  456 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 457}","  455 |     });
  456 |
> 457 |     it(""should parse 2 argument functions"", function() {
      |    ^ Unknown Test
  458 |         expect`\frac 1 2`.toParse();
  459 |     });
  460 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 461}","  459 |     });
  460 |
> 461 |     it(""should not parse 1 argument functions with no arguments"", function() {
      |    ^ Unknown Test
  462 |         expect`\blue`.not.toParse();
  463 |     });
  464 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 465}","  463 |     });
  464 |
> 465 |     it(""should not parse 2 argument functions with 0 or 1 arguments"", function() {
      |    ^ Unknown Test
  466 |         expect`\frac`.not.toParse();
  467 |
  468 |         expect`\frac 1`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 471}","  469 |     });
  470 |
> 471 |     it(""should not parse a function with text right after it"", function() {
      |    ^ Unknown Test
  472 |         expect`\redx`.not.toParse();
  473 |     });
  474 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 475}","  473 |     });
  474 |
> 475 |     it(""should parse a function with a number right after it"", function() {
      |    ^ Unknown Test
  476 |         expect`\frac12`.toParse();
  477 |     });
  478 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 479}","  477 |     });
  478 |
> 479 |     it(""should parse some functions with text right after it"", function() {
      |    ^ Unknown Test
  480 |         expect`\;x`.toParse();
  481 |     });
  482 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 643}","  641 |     });
  642 |
> 643 |     it(""should handle \\textstyle correctly"", function() {
      |    ^ Unknown Test
  644 |         expect`\textstyle 1 \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  645 |         expect`{\textstyle 1} \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  646 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 669}","  667 |
  668 | describe(""A genfrac builder"", function() {
> 669 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  670 |         expect`\frac{x}{y}`.toBuild();
  671 |         expect`\dfrac{x}{y}`.toBuild();
  672 |         expect`\tfrac{x}{y}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 682}","  680 |
  681 | describe(""A infix builder"", function() {
> 682 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  683 |         expect`a \over b`.toBuild();
  684 |         expect`a \atop b`.toBuild();
  685 |         expect`a \choose b`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 778}","  776 |     });
  777 |
> 778 |     it(""should parse math within text group"", function() {
      |    ^ Unknown Test
  779 |         expect`\text{graph: $y = mx + b$}`.toParse(strictSettings);
  780 |         expect`\text{graph: \(y = mx + b\)}`.toParse(strictSettings);
  781 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 783}","  781 |     });
  782 |
> 783 |     it(""should parse math within text within math within text"", function() {
      |    ^ Unknown Test
  784 |         expect`\text{hello $x + \text{world $y$} + z$}`.toParse(strictSettings);
  785 |         expect`\text{hello \(x + \text{world $y$} + z\)}`.toParse(strictSettings);
  786 |         expect`\text{hello $x + \text{world \(y\)} + z$}`.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 790}","  788 |     });
  789 |
> 790 |     it(""should forbid \\( within math mode"", function() {
      |    ^ Unknown Test
  791 |         expect`\(`.not.toParse();
  792 |         expect`\text{$\(x\)$}`.not.toParse();
  793 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 795}","  793 |     });
  794 |
> 795 |     it(""should forbid $ within math mode"", function() {
      |    ^ Unknown Test
  796 |         expect`$x$`.not.toParse();
  797 |         expect`\text{\($x$\)}`.not.toParse();
  798 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 800}","  798 |     });
  799 |
> 800 |     it(""should detect unbalanced \\)"", function() {
      |    ^ Unknown Test
  801 |         expect`\)`.not.toParse();
  802 |         expect`\text{\)}`.not.toParse();
  803 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 805}","  803 |     });
  804 |
> 805 |     it(""should detect unbalanced $"", function() {
      |    ^ Unknown Test
  806 |         expect`$`.not.toParse();
  807 |         expect`\text{$}`.not.toParse();
  808 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 810}","  808 |     });
  809 |
> 810 |     it(""should not mix $ and \\(..\\)"", function() {
      |    ^ Unknown Test
  811 |         expect`\text{$x\)}`.not.toParse();
  812 |         expect`\text{\(x$}`.not.toParse();
  813 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 815}","  813 |     });
  814 |
> 815 |     it(""should parse spacing functions"", function() {
      |    ^ Unknown Test
  816 |         expect`a b\, \; \! \: \> ~ \thinspace \medspace \quad \ `.toBuild();
  817 |         expect`\enspace \thickspace \qquad \space \nobreakspace`.toBuild();
  818 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 820}","  818 |     });
  819 |
> 820 |     it(""should omit spaces after commands"", function() {
      |    ^ Unknown Test
  821 |         expect`\text{\textellipsis !}`.toParseLike`\text{\textellipsis!}`;
  822 |     });
  823 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 824}","  822 |     });
  823 |
> 824 |     it(""should handle ⋮ and \\vdots"", function() {
      |    ^ Unknown Test
  825 |         expect`\text{a \vdots b ⋮ d}`.toParse();
  826 |     });
  827 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 830}","  828 |
  829 | describe(""A texvc builder"", function() {
> 830 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  831 |         expect`\lang\N\darr\R\dArr\Z\Darr\alef\rang`.toBuild();
  832 |         expect`\alefsym\uarr\Alpha\uArr\Beta\Uarr\Chi`.toBuild();
  833 |         expect`\clubs\diamonds\hearts\spades\cnums\Complex`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1004}","  1002 |
  1003 | describe(""An lap parser"", function() {
> 1004 |     it(""should not fail on a text argument"", function() {
       |    ^ Unknown Test
  1005 |         expect`\rlap{\,/}{=}`.toParse();
  1006 |         expect`\mathrlap{\,/}{=}`.toParse();
  1007 |         expect`{=}\llap{/\,}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1013}","  1011 |     });
  1012 |
> 1013 |     it(""should not fail if math version is used"", function() {
       |    ^ Unknown Test
  1014 |         expect`\mathrlap{\frac{a}{b}}{=}`.toParse();
  1015 |         expect`{=}\mathllap{\frac{a}{b}}`.toParse();
  1016 |         expect`\sum_{\mathclap{\frac{a}{b}}}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1019}","  1017 |     });
  1018 |
> 1019 |     it(""should fail on math if AMS version is used"", function() {
       |    ^ Unknown Test
  1020 |         expect`\rlap{\frac{a}{b}}{=}`.not.toParse();
  1021 |         expect`{=}\llap{\frac{a}{b}}`.not.toParse();
  1022 |         expect`\sum_{\clap{\frac{a}{b}}}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1275}","  1273 | describe(""A begin/end parser"", function() {
  1274 |
> 1275 |     it(""should parse a simple environment"", function() {
       |    ^ Unknown Test
  1276 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1277 |     });
  1278 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1279}","  1277 |     });
  1278 |
> 1279 |     it(""should parse an environment with argument"", function() {
       |    ^ Unknown Test
  1280 |         expect`\begin{array}{cc}a&b\\c&d\end{array}`.toParse();
  1281 |     });
  1282 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1283}","  1281 |     });
  1282 |
> 1283 |     it(""should parse and build an empty environment"", function() {
       |    ^ Unknown Test
  1284 |         expect`\begin{aligned}\end{aligned}`.toBuild();
  1285 |         expect`\begin{matrix}\end{matrix}`.toBuild();
  1286 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1288}","  1286 |     });
  1287 |
> 1288 |     it(""should parse an environment with hlines"", function() {
       |    ^ Unknown Test
  1289 |         expect`\begin{matrix}\hline a&b\\ \hline c&d\end{matrix}`.toParse();
  1290 |         expect`\begin{matrix}\hline a&b\cr \hline c&d\end{matrix}`.toParse();
  1291 |         expect`\begin{matrix}\hdashline a&b\\ \hdashline c&d\end{matrix}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1294}","  1292 |     });
  1293 |
> 1294 |     it(""should forbid hlines outside array environment"", () => {
       |    ^ Unknown Test
  1295 |         expect`\hline`.not.toParse();
  1296 |     });
  1297 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1298}","  1296 |     });
  1297 |
> 1298 |     it(""should error when name is mismatched"", function() {
       |    ^ Unknown Test
  1299 |         expect`\begin{matrix}a&b\\c&d\end{pmatrix}`.not.toParse();
  1300 |     });
  1301 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1302}","  1300 |     });
  1301 |
> 1302 |     it(""should error when commands are mismatched"", function() {
       |    ^ Unknown Test
  1303 |         expect`\begin{matrix}a&b\\c&d\right{pmatrix}`.not.toParse();
  1304 |     });
  1305 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1306}","  1304 |     });
  1305 |
> 1306 |     it(""should error when end is missing"", function() {
       |    ^ Unknown Test
  1307 |         expect`\begin{matrix}a&b\\c&d`.not.toParse();
  1308 |     });
  1309 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1310}","  1308 |     });
  1309 |
> 1310 |     it(""should error when braces are mismatched"", function() {
       |    ^ Unknown Test
  1311 |         expect`{\begin{matrix}a&b\\c&d}\end{matrix}`.not.toParse();
  1312 |     });
  1313 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1314}","  1312 |     });
  1313 |
> 1314 |     it(""should cooperate with infix notation"", function() {
       |    ^ Unknown Test
  1315 |         expect`\begin{matrix}0&1\over2&3\\4&5&6\end{matrix}`.toParse();
  1316 |     });
  1317 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1324}","  1322 |     });
  1323 |
> 1324 |     it(""should allow \\cr and \\\\ as a line terminator"", function() {
       |    ^ Unknown Test
  1325 |         expect`\begin{matrix}a&b\cr c&d\end{matrix}`.toParse();
  1326 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1327 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1329}","  1327 |     });
  1328 |
> 1329 |     it(""should not allow \\cr to scan for an optional size argument"", function() {
       |    ^ Unknown Test
  1330 |         expect`\begin{matrix}a&b\cr[c]&d\end{matrix}`.toParse();
  1331 |     });
  1332 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1333}","  1331 |     });
  1332 |
> 1333 |     it(""should not treat [ after space as optional argument to \\\\"", function() {
       |    ^ Unknown Test
  1334 |         expect`\begin{matrix}a&b\\ [c]&d\end{matrix}`.toParse();
  1335 |         expect`a\\ [b]`.toParse();
  1336 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1348}","  1346 |     });
  1347 |
> 1348 |     it(""should allow an optional argument in {matrix*} and company."", function() {
       |    ^ Unknown Test
  1349 |         expect`\begin{matrix*}[r] a & -1 \\ -1 & d \end{matrix*}`.toBuild();
  1350 |         expect`\begin{pmatrix*}[r] a & -1 \\ -1 & d \end{pmatrix*}`.toBuild();
  1351 |         expect`\begin{bmatrix*}[r] a & -1 \\ -1 & d \end{bmatrix*}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1385}","  1383 |     });
  1384 |
> 1385 |     it(""should build sized square roots"", function() {
       |    ^ Unknown Test
  1386 |         expect`\Large\sqrt[3]{x}`.toBuild();
  1387 |     });
  1388 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1389}","  1387 |     });
  1388 |
> 1389 |     it(""should expand argument if optional argument doesn't exist"", function() {
       |    ^ Unknown Test
  1390 |         expect`\sqrt\foo`.toParseLike(""\\sqrt123"",
  1391 |             new Settings({macros: {""\\foo"": ""123""}}));
  1392 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1394}","  1392 |     });
  1393 |
> 1394 |     it(""should not expand argument if optional argument exists"", function() {
       |    ^ Unknown Test
  1395 |         expect`\sqrt[2]\foo`.toParseLike(""\\sqrt[2]{123}"",
  1396 |             new Settings({macros: {""\\foo"": ""123""}}));
  1397 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1401}","  1399 |
  1400 | describe(""A TeX-compliant parser"", function() {
> 1401 |     it(""should work"", function() {
       |    ^ Unknown Test
  1402 |         expect`\frac 2 3`.toParse();
  1403 |     });
  1404 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1420}","  1418 |     });
  1419 |
> 1420 |     it(""should fail when there are missing sup/subscripts"", function() {
       |    ^ Unknown Test
  1421 |         expect`x^`.not.toParse();
  1422 |         expect`x_`.not.toParse();
  1423 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1491}","  1489 |     });
  1490 |
> 1491 |     it(""should parse multiple primes correctly"", function() {
       |    ^ Unknown Test
  1492 |         expect`x''''`.toParse();
  1493 |         expect`x_2''`.toParse();
  1494 |         expect`x''_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1497}","  1495 |     });
  1496 |
> 1497 |     it(""should fail when sup/subscripts are interspersed with arguments"", function() {
       |    ^ Unknown Test
  1498 |         expect`\sqrt^23`.not.toParse();
  1499 |         expect`\frac^234`.not.toParse();
  1500 |         expect`\frac2^34`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1503}","  1501 |     });
  1502 |
> 1503 |     it(""should succeed when sup/subscripts come after whole functions"", function() {
       |    ^ Unknown Test
  1504 |         expect`\sqrt2^3`.toParse();
  1505 |         expect`\frac23^4`.toParse();
  1506 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1508}","  1506 |     });
  1507 |
> 1508 |     it(""should succeed with a sqrt around a text/frac"", function() {
       |    ^ Unknown Test
  1509 |         expect`\sqrt \frac x y`.toParse();
  1510 |         expect`\sqrt \text x`.toParse();
  1511 |         expect`x^\frac x y`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1545}","  1543 |
  1544 | describe(""An op symbol builder"", function() {
> 1545 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1546 |         expect`\int_i^n`.toBuild();
  1547 |         expect`\iint_i^n`.toBuild();
  1548 |         expect`\iiint_i^n`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1562}","  1560 |
  1561 | describe(""A style change parser"", function() {
> 1562 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1563 |         expect`\displaystyle x`.toParse();
  1564 |         expect`\textstyle x`.toParse();
  1565 |         expect`\scriptstyle x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1593}","  1591 |
  1592 | describe(""A font parser"", function() {
> 1593 |     it(""should parse \\mathrm, \\mathbb, \\mathit, and \\mathnormal"", function() {
       |    ^ Unknown Test
  1594 |         expect`\mathrm x`.toParse();
  1595 |         expect`\mathbb x`.toParse();
  1596 |         expect`\mathit x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1604}","  1602 |     });
  1603 |
> 1604 |     it(""should parse \\mathcal and \\mathfrak"", function() {
       |    ^ Unknown Test
  1605 |         expect`\mathcal{ABC123}`.toParse();
  1606 |         expect`\mathfrak{abcABC123}`.toParse();
  1607 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1658}","  1656 |     });
  1657 |
> 1658 |     it(""should not parse a series of font commands"", function() {
       |    ^ Unknown Test
  1659 |         expect`\mathbb \mathrm R`.not.toParse();
  1660 |     });
  1661 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1673}","  1671 |     });
  1672 |
> 1673 |     it(""should be allowed in the argument"", function() {
       |    ^ Unknown Test
  1674 |         expect`e^\mathbf{x}`.toParse();
  1675 |     });
  1676 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1682}","  1680 |     });
  1681 |
> 1682 |     it(""old-style fonts work like new-style fonts"", () => {
       |    ^ Unknown Test
  1683 |         expect`\rm xyz`.toParseLike`\mathrm{xyz}`;
  1684 |         expect`\sf xyz`.toParseLike`\mathsf{xyz}`;
  1685 |         expect`\tt xyz`.toParseLike`\mathtt{xyz}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1693}","  1691 |
  1692 | describe(""A \\pmb builder"", function() {
> 1693 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1694 |         expect`\pmb{\mu}`.toBuild();
  1695 |         expect`\pmb{=}`.toBuild();
  1696 |         expect`\pmb{+}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1704}","  1702 |
  1703 | describe(""A raise parser"", function() {
> 1704 |     it(""should parse and build text in \\raisebox"", function() {
       |    ^ Unknown Test
  1705 |         expect`\raisebox{5pt}{text}`.toBuild(strictSettings);
  1706 |         expect`\raisebox{-5pt}{text}`.toBuild(strictSettings);
  1707 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1709}","  1707 |     });
  1708 |
> 1709 |     it(""should parse and build math in non-strict \\vcenter"", function() {
       |    ^ Unknown Test
  1710 |         expect`\vcenter{\frac a b}`.toBuild(nonstrictSettings);
  1711 |     });
  1712 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1713}","  1711 |     });
  1712 |
> 1713 |     it(""should fail to parse math in \\raisebox"", function() {
       |    ^ Unknown Test
  1714 |         expect`\raisebox{5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1715 |         expect`\raisebox{-5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1716 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1718}","  1716 |     });
  1717 |
> 1718 |     it(""should fail to parse math in an \\hbox"", function() {
       |    ^ Unknown Test
  1719 |         expect`\hbox{\frac a b}`.not.toParse(nonstrictSettings);
  1720 |     });
  1721 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1722}","  1720 |     });
  1721 |
> 1722 |     it(""should fail to build, given an unbraced length"", function() {
       |    ^ Unknown Test
  1723 |         expect`\raisebox5pt{text}`.not.toBuild(strictSettings);
  1724 |         expect`\raisebox-5pt{text}`.not.toBuild(strictSettings);
  1725 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1727}","  1725 |     });
  1726 |
> 1727 |     it(""should build math in an hbox when math mode is set"", function() {
       |    ^ Unknown Test
  1728 |         expect`a + \vcenter{\hbox{$\frac{\frac a b}c$}}`
  1729 |             .toBuild(strictSettings);
  1730 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1776}","  1774 |     });
  1775 |
> 1776 |     it(""should not parse a comment without newline in strict mode"", () => {
       |    ^ Unknown Test
  1777 |         expect`x%y`.not.toParse(strictSettings);
  1778 |         expect`x%y`.toParse(nonstrictSettings);
  1779 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2261}","  2259 |
  2260 | describe(""An accent parser"", function() {
> 2261 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2262 |         expect`\vec{x}`.toParse();
  2263 |         expect`\vec{x^2}`.toParse();
  2264 |         expect`\vec{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2281}","  2279 |     });
  2280 |
> 2281 |     it(""should parse stretchy, shifty accents"", function() {
       |    ^ Unknown Test
  2282 |         expect`\widehat{x}`.toParse();
  2283 |         expect`\widecheck{x}`.toParse();
  2284 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2286}","  2284 |     });
  2285 |
> 2286 |     it(""should parse stretchy, non-shifty accents"", function() {
       |    ^ Unknown Test
  2287 |         expect`\overrightarrow{x}`.toParse();
  2288 |     });
  2289 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2292}","  2290 |
  2291 | describe(""An accent builder"", function() {
> 2292 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2293 |         expect`\vec{x}`.toBuild();
  2294 |         expect`\vec{x}^2`.toBuild();
  2295 |         expect`\vec{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2309}","  2307 |
  2308 | describe(""A stretchy and shifty accent builder"", function() {
> 2309 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2310 |         expect`\widehat{AB}`.toBuild();
  2311 |         expect`\widecheck{AB}`.toBuild();
  2312 |         expect`\widehat{AB}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2327}","  2325 |
  2326 | describe(""A stretchy and non-shifty accent builder"", function() {
> 2327 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2328 |         expect`\overrightarrow{AB}`.toBuild();
  2329 |         expect`\overrightarrow{AB}^2`.toBuild();
  2330 |         expect`\overrightarrow{AB}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2353}","  2351 |
  2352 | describe(""An under-accent parser"", function() {
> 2353 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2354 |         expect`\underrightarrow{x}`.toParse();
  2355 |         expect`\underrightarrow{x^2}`.toParse();
  2356 |         expect`\underrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2374}","  2372 |
  2373 | describe(""An under-accent builder"", function() {
> 2374 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2375 |         expect`\underrightarrow{x}`.toBuild();
  2376 |         expect`\underrightarrow{x}^2`.toBuild();
  2377 |         expect`\underrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2392}","  2390 |
  2391 | describe(""An extensible arrow parser"", function() {
> 2392 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2393 |         expect`\xrightarrow{x}`.toParse();
  2394 |         expect`\xrightarrow{x^2}`.toParse();
  2395 |         expect`\xrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2414}","  2412 |
  2413 | describe(""An extensible arrow builder"", function() {
> 2414 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2415 |         expect`\xrightarrow{x}`.toBuild();
  2416 |         expect`\xrightarrow{x}^2`.toBuild();
  2417 |         expect`\xrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2433}","  2431 |
  2432 | describe(""A horizontal brace parser"", function() {
> 2433 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2434 |         expect`\overbrace{x}`.toParse();
  2435 |         expect`\overbrace{x^2}`.toParse();
  2436 |         expect`\overbrace{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2456}","  2454 |
  2455 | describe(""A horizontal brace builder"", function() {
> 2456 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2457 |         expect`\overbrace{x}`.toBuild();
  2458 |         expect`\overbrace{x}^2`.toBuild();
  2459 |         expect`\underbrace{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2474}","  2472 |
  2473 | describe(""A boxed parser"", function() {
> 2474 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2475 |         expect`\boxed{x}`.toParse();
  2476 |         expect`\boxed{x^2}`.toParse();
  2477 |         expect`\boxed{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2489}","  2487 |
  2488 | describe(""A boxed builder"", function() {
> 2489 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2490 |         expect`\boxed{x}`.toBuild();
  2491 |         expect`\boxed{x}^2`.toBuild();
  2492 |         expect`\boxed{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2506}","  2504 |
  2505 | describe(""An fbox parser, unlike a boxed parser,"", function() {
> 2506 |     it(""should fail when given math"", function() {
       |    ^ Unknown Test
  2507 |         expect`\fbox{\frac a b}`.not.toParse();
  2508 |     });
  2509 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2512}","  2510 |
  2511 | describe(""A colorbox parser"", function() {
> 2512 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2513 |         expect`\colorbox{red}{a b}`.toParse();
  2514 |         expect`\colorbox{red}{x}^2`.toParse();
  2515 |         expect`\colorbox{red} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2518}","  2516 |     });
  2517 |
> 2518 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2519 |         expect`\colorbox{red}{\alpha}`.not.toParse();
  2520 |         expect`\colorbox{red}{\frac{a}{b}}`.not.toParse();
  2521 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2523}","  2521 |     });
  2522 |
> 2523 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2524 |         expect`\colorbox{red}{a b}`.toParse();
  2525 |         expect`\colorbox{#197}{a b}`.toParse();
  2526 |         expect`\colorbox{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2536}","  2534 |
  2535 | describe(""A colorbox builder"", function() {
> 2536 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2537 |         expect`\colorbox{red}{a b}`.toBuild();
  2538 |         expect`\colorbox{red}{a b}^2`.toBuild();
  2539 |         expect`\colorbox{red} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2548}","  2546 |
  2547 | describe(""An fcolorbox parser"", function() {
> 2548 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2549 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2550 |         expect`\fcolorbox{blue}{yellow}{x}^2`.toParse();
  2551 |         expect`\fcolorbox{blue}{yellow} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2554}","  2552 |     });
  2553 |
> 2554 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2555 |         expect`\fcolorbox{blue}{yellow}{\alpha}`.not.toParse();
  2556 |         expect`\fcolorbox{blue}{yellow}{\frac{a}{b}}`.not.toParse();
  2557 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2559}","  2557 |     });
  2558 |
> 2559 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2560 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2561 |         expect`\fcolorbox{blue}{#197}{a b}`.toParse();
  2562 |         expect`\fcolorbox{blue}{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2572}","  2570 |
  2571 | describe(""A fcolorbox builder"", function() {
> 2572 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2573 |         expect`\fcolorbox{blue}{yellow}{a b}`.toBuild();
  2574 |         expect`\fcolorbox{blue}{yellow}{a b}^2`.toBuild();
  2575 |         expect`\fcolorbox{blue}{yellow} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2584}","  2582 |
  2583 | describe(""A strike-through parser"", function() {
> 2584 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2585 |         expect`\cancel{x}`.toParse();
  2586 |         expect`\cancel{x^2}`.toParse();
  2587 |         expect`\cancel{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2605}","  2603 |
  2604 | describe(""A strike-through builder"", function() {
> 2605 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2606 |         expect`\cancel{x}`.toBuild();
  2607 |         expect`\cancel{x}^2`.toBuild();
  2608 |         expect`\cancel{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2626}","  2624 |
  2625 | describe(""A actuarial angle parser"", function() {
> 2626 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2627 |         expect`a_{\angl{n}}`.toParse();
  2628 |     });
  2629 |     it(""should fail in text mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2629}","  2627 |         expect`a_{\angl{n}}`.toParse();
  2628 |     });
> 2629 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2630 |         expect`\text{a_{\angl{n}}}`.not.toParse();
  2631 |     });
  2632 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2635}","  2633 |
  2634 | describe(""A actuarial angle builder"", function() {
> 2635 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2636 |         expect`a_{\angl{n}}`.toBuild();
  2637 |         expect`a_{\angl{n}i}`.toBuild();
  2638 |         expect`a_{\angl n}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2644}","  2642 |
  2643 | describe(""\\phase"", function() {
> 2644 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2645 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2646 |     });
  2647 |     it(""should not fail in math mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2647}","  2645 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2646 |     });
> 2647 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2648 |         expect`\phase{-78.2^\circ}`.toBuild();
  2649 |     });
  2650 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2653}","  2651 |
  2652 | describe(""A phantom parser"", function() {
> 2653 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2654 |         expect`\phantom{x}`.toParse();
  2655 |         expect`\phantom{x^2}`.toParse();
  2656 |         expect`\phantom{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2673}","  2671 |
  2672 | describe(""A phantom builder"", function() {
> 2673 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2674 |         expect`\phantom{x}`.toBuild();
  2675 |         expect`\phantom{x^2}`.toBuild();
  2676 |         expect`\phantom{x}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2702}","  2700 |
  2701 | describe(""A smash parser"", function() {
> 2702 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2703 |         expect`\smash{x}`.toParse();
  2704 |         expect`\smash{x^2}`.toParse();
  2705 |         expect`\smash{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2727}","  2725 |
  2726 | describe(""A smash builder"", function() {
> 2727 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2728 |         expect`\smash{x}`.toBuild(nonstrictSettings);
  2729 |         expect`\smash{x^2}`.toBuild(nonstrictSettings);
  2730 |         expect`\smash{x}^2`.toBuild(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2751}","  2749 |
  2750 | describe(""An optional argument parser"", function() {
> 2751 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2752 |         // Note this doesn't actually make an optional argument, but still
  2753 |         // should work
  2754 |         expect`\frac[1]{2}{3}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2759}","  2757 |     });
  2758 |
> 2759 |     it(""should work with sqrts with optional arguments"", function() {
       |    ^ Unknown Test
  2760 |         expect`\sqrt[3]{2}`.toParse();
  2761 |     });
  2762 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2763}","  2761 |     });
  2762 |
> 2763 |     it(""should work when the optional argument is missing"", function() {
       |    ^ Unknown Test
  2764 |         expect`\sqrt{2}`.toParse();
  2765 |         expect`\rule{1em}{2em}`.toParse();
  2766 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2768}","  2766 |     });
  2767 |
> 2768 |     it(""should fail when the optional argument is malformed"", function() {
       |    ^ Unknown Test
  2769 |         expect`\rule[1]{2em}{3em}`.not.toParse();
  2770 |     });
  2771 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2772}","  2770 |     });
  2771 |
> 2772 |     it(""should not work if the optional argument isn't closed"", function() {
       |    ^ Unknown Test
  2773 |         expect`\sqrt[`.not.toParse();
  2774 |     });
  2775 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2822}","  2820 | describe(""A substack function"", function() {
  2821 |
> 2822 |     it(""should build"", function() {
       |    ^ Unknown Test
  2823 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2824 |     });
  2825 |     it(""should accommodate spaces in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2825}","  2823 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2824 |     });
> 2825 |     it(""should accommodate spaces in the argument"", function() {
       |    ^ Unknown Test
  2826 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2827 |     });
  2828 |     it(""should accommodate macros in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2828}","  2826 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2827 |     });
> 2828 |     it(""should accommodate macros in the argument"", function() {
       |    ^ Unknown Test
  2829 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2830 |     });
  2831 |     it(""should accommodate an empty argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2831}","  2829 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2830 |     });
> 2831 |     it(""should accommodate an empty argument"", function() {
       |    ^ Unknown Test
  2832 |         expect`\sum_{\substack{}}  P(i,j)`.toBuild();
  2833 |     });
  2834 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2839}","  2837 | describe(""A smallmatrix environment"", function() {
  2838 |
> 2839 |     it(""should build"", function() {
       |    ^ Unknown Test
  2840 |         expect`\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}`.toBuild();
  2841 |     });
  2842 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2847}","  2845 | describe(""A cases environment"", function() {
  2846 |
> 2847 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2848 |         expect`f(a,b)=\begin{cases}a+1&\text{if }b\text{ is odd}\\a&\text{if }b=0\\a-1&\text{otherwise}\end{cases}`
  2849 |             .toParse();
  2850 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2856}","  2854 | describe(""An rcases environment"", function() {
  2855 |
> 2856 |     it(""should build"", function() {
       |    ^ Unknown Test
  2857 |         expect`\begin{rcases} a &\text{if } b \\ c &\text{if } d \end{rcases}⇒…`
  2858 |             .toBuild();
  2859 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2865}","  2863 | describe(""An aligned environment"", function() {
  2864 |
> 2865 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2866 |         expect`\begin{aligned}a&=b&c&=d\\e&=f\end{aligned}`.toParse();
  2867 |     });
  2868 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2869}","  2867 |     });
  2868 |
> 2869 |     it(""should allow cells in brackets"", function() {
       |    ^ Unknown Test
  2870 |         expect`\begin{aligned}[a]&[b]\\ [c]&[d]\end{aligned}`.toParse();
  2871 |     });
  2872 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2873}","  2871 |     });
  2872 |
> 2873 |     it(""should forbid cells in brackets without space"", function() {
       |    ^ Unknown Test
  2874 |         expect`\begin{aligned}[a]&[b]\\[c]&[d]\end{aligned}`.not.toParse();
  2875 |     });
  2876 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2884}","  2882 |
  2883 | describe(""AMS environments"", function() {
> 2884 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  2885 |         expect`\begin{gather}a+b\\c+d\end{gather}`.not.toParse(nonstrictSettings);
  2886 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.not.toParse(nonstrictSettings);
  2887 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.not.toParse(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2897}","  2895 |
  2896 |     const displayMode = new Settings({displayMode: true});
> 2897 |     it(""should build if in display mode"", () => {
       |    ^ Unknown Test
  2898 |         expect`\begin{gather}a+b\\c+d\end{gather}`.toBuild(displayMode);
  2899 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.toBuild(displayMode);
  2900 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2910}","  2908 |     });
  2909 |
> 2910 |     it(""should build an empty environment"", () => {
       |    ^ Unknown Test
  2911 |         expect`\begin{gather}\end{gather}`.toBuild(displayMode);
  2912 |         expect`\begin{gather*}\end{gather*}`.toBuild(displayMode);
  2913 |         expect`\begin{align}\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2922}","  2920 |     });
  2921 |
> 2922 |     it(""{equation} should fail if argument contains two rows."", () => {
       |    ^ Unknown Test
  2923 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2924 |     });
  2925 |     it(""{equation} should fail if argument contains two columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2925}","  2923 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2924 |     });
> 2925 |     it(""{equation} should fail if argument contains two columns."", () => {
       |    ^ Unknown Test
  2926 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2927 |     });
  2928 |     it(""{split} should fail if argument contains three columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2928}","  2926 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2927 |     });
> 2928 |     it(""{split} should fail if argument contains three columns."", () => {
       |    ^ Unknown Test
  2929 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2930 |     });
  2931 |     it(""{array} should fail if body contains more columns than specification."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2931}","  2929 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2930 |     });
> 2931 |     it(""{array} should fail if body contains more columns than specification."", () => {
       |    ^ Unknown Test
  2932 |         expect`\begin{array}{2}a & b & c\\d & e  f\end{array}`.not.toBuild(displayMode);
  2933 |     });
  2934 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2960}","  2958 |
  2959 | describe(""operatorname support"", function() {
> 2960 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2961 |         expect`\operatorname{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2962 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2963 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}_y x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2971}","  2969 |
  2970 | describe(""href and url commands"", function() {
> 2971 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2972 |         expect`\href{http://example.com/}{\sin}`.toBuild(trustSettings);
  2973 |         expect`\url{http://example.com/}`.toBuild(trustSettings);
  2974 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2976}","  2974 |     });
  2975 |
> 2976 |     it(""should allow empty URLs"", function() {
       |    ^ Unknown Test
  2977 |         expect`\href{}{example here}`.toBuild(trustSettings);
  2978 |         expect`\url{}`.toBuild(trustSettings);
  2979 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2989}","  2987 |     });
  2988 |
> 2989 |     it(""should allow spaces single-character URLs"", () => {
       |    ^ Unknown Test
  2990 |         expect`\href %end`.toParseLike(""\\href{%}end"", trustSettings);
  2991 |         expect`\url %end`.toParseLike(""\\url{%}end"", trustSettings);
  2992 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3010}","  3008 |     });
  3009 |
> 3010 |     it(""should not allow unbalanced brace(s) in url"", function() {
       |    ^ Unknown Test
  3011 |         expect`\href{http://example.com/{a}{bar}`.not.toParse();
  3012 |         expect`\href{http://example.com/}a}{bar}`.not.toParse();
  3013 |         expect`\url{http://example.com/{a}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3101}","  3099 |
  3100 | describe(""A raw text parser"", function() {
> 3101 |     it(""should return null for a omitted optional string"", function() {
       |    ^ Unknown Test
  3102 |         expect`\includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}`.toParse();
  3103 |     });
  3104 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3116}","  3114 |     });
  3115 |
> 3116 |     it(""should still parse on unrecognized control sequences"", function() {
       |    ^ Unknown Test
  3117 |         expect`\error`.toParse(noThrowSettings);
  3118 |     });
  3119 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3121}","  3119 |
  3120 |     describe(""should allow unrecognized controls sequences anywhere, including"", function() {
> 3121 |         it(""in superscripts and subscripts"", function() {
       |        ^ Unknown Test
  3122 |             expect`2_\error`.toBuild(noThrowSettings);
  3123 |             expect`3^{\error}_\error`.toBuild(noThrowSettings);
  3124 |             expect`\int\nolimits^\error_\error`.toBuild(noThrowSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3127}","  3125 |         });
  3126 |
> 3127 |         it(""in fractions"", function() {
       |        ^ Unknown Test
  3128 |             expect`\frac{345}{\error}`.toBuild(noThrowSettings);
  3129 |             expect`\frac\error{\error}`.toBuild(noThrowSettings);
  3130 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3132}","  3130 |         });
  3131 |
> 3132 |         it(""in square roots"", function() {
       |        ^ Unknown Test
  3133 |             expect`\sqrt\error`.toBuild(noThrowSettings);
  3134 |             expect`\sqrt{234\error}`.toBuild(noThrowSettings);
  3135 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3137}","  3135 |         });
  3136 |
> 3137 |         it(""in text boxes"", function() {
       |        ^ Unknown Test
  3138 |             expect`\text{\error}`.toBuild(noThrowSettings);
  3139 |         });
  3140 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3207}","  3205 |
  3206 | describe(""The symbol table integrity"", function() {
> 3207 |     it(""should treat certain symbols as synonyms"", function() {
       |    ^ Unknown Test
  3208 |         expect`<`.toBuildLike`\lt`;
  3209 |         expect`>`.toBuildLike`\gt`;
  3210 |         expect`\left<\frac{1}{x}\right>`.toBuildLike`\left\lt\frac{1}{x}\right\gt`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3225}","  3223 |
  3224 | describe(""A macro expander"", function() {
> 3225 |     it(""should produce individual tokens"", function() {
       |    ^ Unknown Test
  3226 |         expect`e^\foo`.toParseLike(""e^1 23"",
  3227 |             new Settings({macros: {""\\foo"": ""123""}}));
  3228 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3230}","  3228 |     });
  3229 |
> 3230 |     it(""should preserve leading spaces inside macro definition"", function() {
       |    ^ Unknown Test
  3231 |         expect`\text{\foo}`.toParseLike(r`\text{ x}`,
  3232 |             new Settings({macros: {""\\foo"": "" x""}}));
  3233 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3235}","  3233 |     });
  3234 |
> 3235 |     it(""should preserve leading spaces inside macro argument"", function() {
       |    ^ Unknown Test
  3236 |         expect`\text{\foo{ x}}`.toParseLike(r`\text{ x}`,
  3237 |             new Settings({macros: {""\\foo"": ""#1""}}));
  3238 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3240}","  3238 |     });
  3239 |
> 3240 |     it(""should ignore expanded spaces in math mode"", function() {
       |    ^ Unknown Test
  3241 |         expect`\foo`.toParseLike(""x"", new Settings({macros: {""\\foo"": "" x""}}));
  3242 |     });
  3243 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3244}","  3242 |     });
  3243 |
> 3244 |     it(""should consume spaces after control-word macro"", function() {
       |    ^ Unknown Test
  3245 |         expect`\text{\foo }`.toParseLike(r`\text{x}`,
  3246 |             new Settings({macros: {""\\foo"": ""x""}}));
  3247 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3249}","  3247 |     });
  3248 |
> 3249 |     it(""should consume spaces after macro with \\relax"", function() {
       |    ^ Unknown Test
  3250 |         expect`\text{\foo }`.toParseLike(r`\text{}`,
  3251 |             new Settings({macros: {""\\foo"": ""\\relax""}}));
  3252 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3254}","  3252 |     });
  3253 |
> 3254 |     it(""should not consume spaces after control-word expansion"", function() {
       |    ^ Unknown Test
  3255 |         expect`\text{\\ }`.toParseLike(r`\text{ }`,
  3256 |             new Settings({macros: {""\\\\"": ""\\relax""}}));
  3257 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3259}","  3257 |     });
  3258 |
> 3259 |     it(""should consume spaces after \\relax"", function() {
       |    ^ Unknown Test
  3260 |         expect`\text{\relax }`.toParseLike`\text{}`;
  3261 |     });
  3262 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3263}","  3261 |     });
  3262 |
> 3263 |     it(""should consume spaces after control-word function"", function() {
       |    ^ Unknown Test
  3264 |         expect`\text{\KaTeX }`.toParseLike`\text{\KaTeX}`;
  3265 |     });
  3266 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3267}","  3265 |     });
  3266 |
> 3267 |     it(""should preserve spaces after control-symbol macro"", function() {
       |    ^ Unknown Test
  3268 |         expect`\text{\% y}`.toParseLike(r`\text{x y}`,
  3269 |             new Settings({macros: {""\\%"": ""x""}}));
  3270 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3272}","  3270 |     });
  3271 |
> 3272 |     it(""should preserve spaces after control-symbol function"", function() {
       |    ^ Unknown Test
  3273 |         expect`\text{\' }`.toParse();
  3274 |     });
  3275 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3276}","  3274 |     });
  3275 |
> 3276 |     it(""should consume spaces between arguments"", function() {
       |    ^ Unknown Test
  3277 |         expect`\text{\foo 1 2}`.toParseLike(r`\text{12end}`,
  3278 |             new Settings({macros: {""\\foo"": ""#1#2end""}}));
  3279 |         expect`\text{\foo {1} {2}}`.toParseLike(r`\text{12end}`,",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3283}","  3281 |     });
  3282 |
> 3283 |     it(""should allow for multiple expansion"", function() {
       |    ^ Unknown Test
  3284 |         expect`1\foo2`.toParseLike(""1aa2"", new Settings({macros: {
  3285 |             ""\\foo"": ""\\bar\\bar"",
  3286 |             ""\\bar"": ""a"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3290}","  3288 |     });
  3289 |
> 3290 |     it(""should allow for multiple expansion with argument"", function() {
       |    ^ Unknown Test
  3291 |         expect`1\foo2`.toParseLike(""12222"", new Settings({macros: {
  3292 |             ""\\foo"": ""\\bar{#1}\\bar{#1}"",
  3293 |             ""\\bar"": ""#1#1"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3297}","  3295 |     });
  3296 |
> 3297 |     it(""should allow for macro argument"", function() {
       |    ^ Unknown Test
  3298 |         expect`\foo\bar`.toParseLike(""(xyz)"", new Settings({macros: {
  3299 |             ""\\foo"": ""(#1)"",
  3300 |             ""\\bar"": ""xyz"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3304}","  3302 |     });
  3303 |
> 3304 |     it(""should allow properly nested group for macro argument"", function() {
       |    ^ Unknown Test
  3305 |         expect`\foo{e^{x_{12}+3}}`.toParseLike(""(e^{x_{12}+3})"",
  3306 |             new Settings({macros: {""\\foo"": ""(#1)""}}));
  3307 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3309}","  3307 |     });
  3308 |
> 3309 |     it(""should delay expansion if preceded by \\expandafter"", function() {
       |    ^ Unknown Test
  3310 |         expect`\expandafter\foo\bar`.toParseLike(""x+y"", new Settings({macros: {
  3311 |             ""\\foo"": ""#1+#2"",
  3312 |             ""\\bar"": ""xy"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3319}","  3317 |     });
  3318 |
> 3319 |     it(""should not expand if preceded by \\noexpand"", function() {
       |    ^ Unknown Test
  3320 |         // \foo is not expanded and interpreted as if its meaning were \relax
  3321 |         expect`\noexpand\foo y`.toParseLike(""y"",
  3322 |             new Settings({macros: {""\\foo"": ""x""}}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3332}","  3330 |     });
  3331 |
> 3332 |     it(""should allow for space macro argument (text version)"", function() {
       |    ^ Unknown Test
  3333 |         expect`\text{\foo\bar}`.toParseLike(r`\text{( )}`, new Settings({macros: {
  3334 |             ""\\foo"": ""(#1)"",
  3335 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3339}","  3337 |     });
  3338 |
> 3339 |     it(""should allow for space macro argument (math version)"", function() {
       |    ^ Unknown Test
  3340 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3341 |             ""\\foo"": ""(#1)"",
  3342 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3346}","  3344 |     });
  3345 |
> 3346 |     it(""should allow for space second argument (text version)"", function() {
       |    ^ Unknown Test
  3347 |         expect`\text{\foo\bar\bar}`.toParseLike(r`\text{( , )}`, new Settings({macros: {
  3348 |             ""\\foo"": ""(#1,#2)"",
  3349 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3353}","  3351 |     });
  3352 |
> 3353 |     it(""should treat \\relax as empty argument"", function() {
       |    ^ Unknown Test
  3354 |         expect`\text{\foo\relax x}`.toParseLike(r`\text{(,x)}`, new Settings({macros: {
  3355 |             ""\\foo"": ""(#1,#2)"",
  3356 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3359}","  3357 |     });
  3358 |
> 3359 |     it(""should allow for space second argument (math version)"", function() {
       |    ^ Unknown Test
  3360 |         expect`\foo\bar\bar`.toParseLike(""(,)"", new Settings({macros: {
  3361 |             ""\\foo"": ""(#1,#2)"",
  3362 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3366}","  3364 |     });
  3365 |
> 3366 |     it(""should allow for empty macro argument"", function() {
       |    ^ Unknown Test
  3367 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3368 |             ""\\foo"": ""(#1)"",
  3369 |             ""\\bar"": """",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3373}","  3371 |     });
  3372 |
> 3373 |     it(""should allow for space function arguments"", function() {
       |    ^ Unknown Test
  3374 |         expect`\frac\bar\bar`.toParseLike(r`\frac{}{}`, new Settings({macros: {
  3375 |             ""\\bar"": "" "",
  3376 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3379}","  3377 |     });
  3378 |
> 3379 |     it(""should build \\overset and \\underset"", function() {
       |    ^ Unknown Test
  3380 |         expect`\overset{f}{\rightarrow} Y`.toBuild();
  3381 |         expect`\underset{f}{\rightarrow} Y`.toBuild();
  3382 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3384}","  3382 |     });
  3383 |
> 3384 |     it(""should build \\iff, \\implies, \\impliedby"", function() {
       |    ^ Unknown Test
  3385 |         expect`X \iff Y`.toBuild();
  3386 |         expect`X \implies Y`.toBuild();
  3387 |         expect`X \impliedby Y`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3390}","  3388 |     });
  3389 |
> 3390 |     it(""should allow aliasing characters"", function() {
       |    ^ Unknown Test
  3391 |         expect`x’=c`.toParseLike(""x'=c"", new Settings({macros: {
  3392 |             ""’"": ""'"",
  3393 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3396}","  3394 |     });
  3395 |
> 3396 |     it(""\\@firstoftwo should consume both, and avoid errors"", function() {
       |    ^ Unknown Test
  3397 |         expect`\@firstoftwo{yes}{no}`.toParseLike`yes`;
  3398 |         expect`\@firstoftwo{yes}{1'_2^3}`.toParseLike`yes`;
  3399 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3401}","  3399 |     });
  3400 |
> 3401 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3402 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3403 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3404 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3406}","  3404 |     });
  3405 |
> 3406 |     it(""\\@ifnextchar should not consume nonspaces"", function() {
       |    ^ Unknown Test
  3407 |         expect`\@ifnextchar!{yes}{no}!!`.toParseLike`yes!!`;
  3408 |         expect`\@ifnextchar!{yes}{no}?!`.toParseLike`no?!`;
  3409 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3411}","  3409 |     });
  3410 |
> 3411 |     it(""\\@ifnextchar should consume spaces"", function() {
       |    ^ Unknown Test
  3412 |         expect`\def\x#1{\@ifnextchar x{yes}{no}}\x{}x\x{} x`
  3413 |             .toParseLike`yesxyesx`;
  3414 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3416}","  3414 |     });
  3415 |
> 3416 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3417 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3418 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3419 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3421}","  3419 |     });
  3420 |
> 3421 |     it(""\\TextOrMath should work immediately"", function() {
       |    ^ Unknown Test
  3422 |         expect`\TextOrMath{text}{math}`.toParseLike`math`;
  3423 |     });
  3424 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3425}","  3423 |     });
  3424 |
> 3425 |     it(""\\TextOrMath should work after other math"", function() {
       |    ^ Unknown Test
  3426 |         expect`x+\TextOrMath{text}{math}`.toParseLike`x+math`;
  3427 |     });
  3428 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3429}","  3427 |     });
  3428 |
> 3429 |     it(""\\TextOrMath should work immediately after \\text"", function() {
       |    ^ Unknown Test
  3430 |         expect`\text{\TextOrMath{text}{math}}`.toParseLike`\text{text}`;
  3431 |     });
  3432 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3433}","  3431 |     });
  3432 |
> 3433 |     it(""\\TextOrMath should work later after \\text"", function() {
       |    ^ Unknown Test
  3434 |         expect`\text{hello \TextOrMath{text}{math}}`.toParseLike`\text{hello text}`;
  3435 |     });
  3436 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3437}","  3435 |     });
  3436 |
> 3437 |     it(""\\TextOrMath should work immediately after \\text ends"", function() {
       |    ^ Unknown Test
  3438 |         expect`\text{\TextOrMath{text}{math}}\TextOrMath{text}{math}`
  3439 |             .toParseLike`\text{text}math`;
  3440 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3442}","  3440 |     });
  3441 |
> 3442 |     it(""\\TextOrMath should work immediately after $"", function() {
       |    ^ Unknown Test
  3443 |         expect`\text{$\TextOrMath{text}{math}$}`.toParseLike`\text{$math$}`;
  3444 |     });
  3445 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3446}","  3444 |     });
  3445 |
> 3446 |     it(""\\TextOrMath should work later after $"", function() {
       |    ^ Unknown Test
  3447 |         expect`\text{$x+\TextOrMath{text}{math}$}`.toParseLike`\text{$x+math$}`;
  3448 |     });
  3449 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3450}","  3448 |     });
  3449 |
> 3450 |     it(""\\TextOrMath should work immediately after $ ends"", function() {
       |    ^ Unknown Test
  3451 |         expect`\text{$\TextOrMath{text}{math}$\TextOrMath{text}{math}}`
  3452 |             .toParseLike`\text{$math$text}`;
  3453 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3455}","  3453 |     });
  3454 |
> 3455 |     it(""\\TextOrMath should work in a macro"", function() {
       |    ^ Unknown Test
  3456 |         expect`\mode\text{\mode$\mode$\mode}\mode`
  3457 |             .toParseLike(r`math\text{text$math$text}math`, new Settings({macros: {
  3458 |                 ""\\mode"": ""\\TextOrMath{text}{math}"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3462}","  3460 |     });
  3461 |
> 3462 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3463 |         expect`\text\mode`.toParseLike(r`\text t`, new Settings({macros:
  3464 |             {""\\mode"": ""\\TextOrMath{t}{m}""}}));
  3465 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3494}","  3492 |     });
  3493 |
> 3494 |     it(""should build Unicode private area characters"", function() {
       |    ^ Unknown Test
  3495 |         expect`\gvertneqq\lvertneqq\ngeqq\ngeqslant\nleqq`.toBuild();
  3496 |         expect`\nleqslant\nshortmid\nshortparallel\varsubsetneq`.toBuild();
  3497 |         expect`\varsubsetneqq\varsupsetneq\varsupsetneqq`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3500}","  3498 |     });
  3499 |
> 3500 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3501 |         expect`\text\mode`.toParseLike(r`\text{text}`, new Settings({macros:
  3502 |             {""\\mode"": ""\\TextOrMath{text}{math}""}}));
  3503 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3505}","  3503 |     });
  3504 |
> 3505 |     it(""\\gdef defines macros"", function() {
       |    ^ Unknown Test
  3506 |         expect`\gdef\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3507 |         expect`\gdef\foo{hi}\foo+\text\foo`.toParseLike`hi+\text{hi}`;
  3508 |         expect`\gdef\foo#1{hi #1}\text{\foo{Alice}, \foo{Bob}}`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3523}","  3521 |     });
  3522 |
> 3523 |     it(""\\gdef defines macros with delimited parameter"", function() {
       |    ^ Unknown Test
  3524 |         expect`\gdef\foo|#1||{#1}\text{\foo| x y ||}`.toParseLike`\text{ x y }`;
  3525 |         expect`\gdef\foo#1|#2{#1+#2}\foo 1 2 |34`.toParseLike`12+34`;
  3526 |         expect`\gdef\foo#1#{#1}\foo1^{23}`.toParseLike`1^{23}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3532}","  3530 |     });
  3531 |
> 3532 |     it(""\\xdef should expand definition"", function() {
       |    ^ Unknown Test
  3533 |         expect`\def\foo{a}\xdef\bar{\foo}\def\foo{}\bar`.toParseLike`a`;
  3534 |         // \def\noexpand\foo{} expands into \def\foo{}
  3535 |         expect`\def\foo{a}\xdef\bar{\def\noexpand\foo{}}\foo\bar\foo`.toParseLike`a`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3542}","  3540 |     });
  3541 |
> 3542 |     it(""\\def should be handled in Parser"", () => {
       |    ^ Unknown Test
  3543 |         expect`\gdef\foo{1}`.toParse(new Settings({maxExpand: 0}));
  3544 |         expect`2^\def\foo{1}2`.not.toParse();
  3545 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3547}","  3545 |     });
  3546 |
> 3547 |     it(""\\def works locally"", () => {
       |    ^ Unknown Test
  3548 |         expect`\def\x{1}\x{\def\x{2}\x{\def\x{3}\x}\x}\x`
  3549 |             .toParseLike`1{2{3}2}1`;
  3550 |         expect`\def\x{1}\x\def\x{2}\x{\def\x{3}\x\def\x{4}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3554}","  3552 |     });
  3553 |
> 3554 |     it(""\\gdef overrides at all levels"", () => {
       |    ^ Unknown Test
  3555 |         expect`\def\x{1}\x{\def\x{2}\x{\gdef\x{3}\x}\x}\x`
  3556 |             .toParseLike`1{2{3}3}3`;
  3557 |         expect`\def\x{1}\x{\def\x{2}\x{\global\def\x{3}\x}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3563}","  3561 |     });
  3562 |
> 3563 |     it(""\\global needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3564 |         expect`\global\def\foo{}\foo`.toParseLike``;
  3565 |         expect`\global\edef\foo{}\foo`.toParseLike``;
  3566 |         expect`\def\DEF{\def}\global\DEF\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3573}","  3571 |     });
  3572 |
> 3573 |     it(""\\long needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3574 |         expect`\long\def\foo{}\foo`.toParseLike``;
  3575 |         expect`\long\edef\foo{}\foo`.toParseLike``;
  3576 |         expect`\long\global\def\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3580}","  3578 |     });
  3579 |
> 3580 |     it(""Macro arguments do not generate groups"", () => {
       |    ^ Unknown Test
  3581 |         expect`\def\x{1}\x\def\foo#1{#1}\foo{\x\def\x{2}\x}\x`
  3582 |             .toParseLike`1122`;
  3583 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3585}","  3583 |     });
  3584 |
> 3585 |     it(""\\textbf arguments do generate groups"", () => {
       |    ^ Unknown Test
  3586 |         expect`\def\x{1}\x\textbf{\x\def\x{2}\x}\x`.toParseLike`1\textbf{12}1`;
  3587 |     });
  3588 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3589}","  3587 |     });
  3588 |
> 3589 |     it(""\\sqrt optional arguments generate groups"", () => {
       |    ^ Unknown Test
  3590 |         expect`\def\x{1}\def\y{1}\x\y\sqrt[\def\x{2}\x]{\def\y{2}\y}\x\y`
  3591 |             .toParseLike`11\sqrt[2]{2}11`;
  3592 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3594}","  3592 |     });
  3593 |
> 3594 |     it(""array cells generate groups"", () => {
       |    ^ Unknown Test
  3595 |         expect`\def\x{1}\begin{matrix}\x&\def\x{2}\x&\x\end{matrix}\x`
  3596 |             .toParseLike`\begin{matrix}1&2&1\end{matrix}1`;
  3597 |         expect`\def\x{1}\begin{matrix}\def\x{2}\x&\x\end{matrix}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3625}","  3623 |     });
  3624 |
> 3625 |     it(""\\let copies the definition"", () => {
       |    ^ Unknown Test
  3626 |         expect`\let\foo=\frac\def\frac{}\foo12`.toParseLike`\frac12`;
  3627 |         expect`\def\foo{1}\let\bar\foo\def\foo{2}\bar`.toParseLike`1`;
  3628 |         expect`\let\foo=\kern\edef\bar{\foo1em}\let\kern=\relax\bar`.toParseLike`\kern1em`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3645}","  3643 |     });
  3644 |
> 3645 |     it(""\\futurelet should parse correctly"", () => {
       |    ^ Unknown Test
  3646 |         expect`\futurelet\foo\frac1{2+\foo}`.toParseLike`\frac1{2+1}`;
  3647 |     });
  3648 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3649}","  3647 |     });
  3648 |
> 3649 |     it(""macros argument can simulate \\let"", () => {
       |    ^ Unknown Test
  3650 |         expect`\int`.toParseLike(""\\int\\limits"", {macros: {
  3651 |             ""\\Oldint"": {
  3652 |                 tokens: [{text: ""\\int"", noexpand: true}],",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3676}","  3674 |     });
  3675 |
> 3676 |     it(""\\newcommand defines new macros"", () => {
       |    ^ Unknown Test
  3677 |         expect`\newcommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3678 |         expect`\newcommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3679 |         // Function detection",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3691}","  3689 |     });
  3690 |
> 3691 |     it(""\\renewcommand redefines macros"", () => {
       |    ^ Unknown Test
  3692 |         expect`\renewcommand\foo{x^2}\foo+\foo`.not.toParse();
  3693 |         expect`\renewcommand{\foo}{x^2}\foo+\foo`.not.toParse();
  3694 |         expect`\renewcommand\bar{x^2}\bar+\bar`.toParseLike`x^2+x^2`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3699}","  3697 |     });
  3698 |
> 3699 |     it(""\\providecommand defines but does not redefine macros"", () => {
       |    ^ Unknown Test
  3700 |         expect`\providecommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3701 |         expect`\providecommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3702 |         expect`\newcommand{\foo}{1}\foo\providecommand{\foo}{2}\foo`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3710}","  3708 |     });
  3709 |
> 3710 |     it(""\\newcommand is local"", () => {
       |    ^ Unknown Test
  3711 |         expect`\newcommand\foo{1}\foo{\renewcommand\foo{2}\foo}\foo`
  3712 |             .toParseLike`1{2}1`;
  3713 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3715}","  3713 |     });
  3714 |
> 3715 |     it(""\\newcommand accepts number of arguments"", () => {
       |    ^ Unknown Test
  3716 |         expect`\newcommand\foo[1]{#1^2}\foo x+\foo{y}`.toParseLike`x^2+y^2`;
  3717 |         expect`\newcommand\foo[10]{#1^2}\foo 0123456789`.toParseLike`0^2`;
  3718 |         expect`\newcommand\foo[x]{}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3724}","  3722 |     // This may change in the future, if we support the extra features of
  3723 |     // \hspace.
> 3724 |     it(""should treat \\hspace, \\hskip like \\kern"", function() {
       |    ^ Unknown Test
  3725 |         expect`\hspace{1em}`.toParseLike`\kern1em`;
  3726 |         expect`\hskip{1em}`.toParseLike`\kern1em`;
  3727 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3729}","  3727 |     });
  3728 |
> 3729 |     it(""should expand \\limsup as expected"", () => {
       |    ^ Unknown Test
  3730 |         expect`\limsup`.toParseLike`\operatorname*{lim\,sup}`;
  3731 |     });
  3732 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3733}","  3731 |     });
  3732 |
> 3733 |     it(""should expand \\liminf as expected"", () => {
       |    ^ Unknown Test
  3734 |         expect`\liminf`.toParseLike`\operatorname*{lim\,inf}`;
  3735 |     });
  3736 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3737}","  3735 |     });
  3736 |
> 3737 |     it(""should expand AMS log-like symbols as expected"", () => {
       |    ^ Unknown Test
  3738 |         expect`\injlim`.toParseLike`\operatorname*{inj\,lim}`;
  3739 |         expect`\projlim`.toParseLike`\operatorname*{proj\,lim}`;
  3740 |         expect`\varlimsup`.toParseLike`\operatorname*{\overline{lim}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3747}","  3745 |     });
  3746 |
> 3747 |     it(""should expand \\plim as expected"", () => {
       |    ^ Unknown Test
  3748 |         expect`\plim`.toParseLike`\mathop{\operatorname{plim}}\limits`;
  3749 |     });
  3750 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3751}","  3749 |     });
  3750 |
> 3751 |     it(""should expand \\argmin as expected"", () => {
       |    ^ Unknown Test
  3752 |         expect`\argmin`.toParseLike`\operatorname*{arg\,min}`;
  3753 |     });
  3754 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3755}","  3753 |     });
  3754 |
> 3755 |     it(""should expand \\argmax as expected"", () => {
       |    ^ Unknown Test
  3756 |         expect`\argmax`.toParseLike`\operatorname*{arg\,max}`;
  3757 |     });
  3758 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3759}","  3757 |     });
  3758 |
> 3759 |     it(""should expand \\bra as expected"", () => {
       |    ^ Unknown Test
  3760 |         expect`\bra{\phi}`.toParseLike`\mathinner{\langle{\phi}|}`;
  3761 |     });
  3762 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3763}","  3761 |     });
  3762 |
> 3763 |     it(""should expand \\ket as expected"", () => {
       |    ^ Unknown Test
  3764 |         expect`\ket{\psi}`.toParseLike`\mathinner{|{\psi}\rangle}`;
  3765 |     });
  3766 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3767}","  3765 |     });
  3766 |
> 3767 |     it(""should expand \\braket as expected"", () => {
       |    ^ Unknown Test
  3768 |         expect`\braket{\phi|\psi}`.toParseLike`\mathinner{\langle{\phi|\psi}\rangle}`;
  3769 |     });
  3770 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3771}","  3769 |     });
  3770 |
> 3771 |     it(""should expand \\Bra as expected"", () => {
       |    ^ Unknown Test
  3772 |         expect`\Bra{\phi}`.toParseLike`\left\langle\phi\right|`;
  3773 |     });
  3774 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3775}","  3773 |     });
  3774 |
> 3775 |     it(""should expand \\Ket as expected"", () => {
       |    ^ Unknown Test
  3776 |         expect`\Ket{\psi}`.toParseLike`\left|\psi\right\rangle`;
  3777 |     });
  3778 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3779}","  3777 |     });
  3778 |
> 3779 |     it(""should expand \\Braket as expected"", () => {
       |    ^ Unknown Test
  3780 |         expect`\Braket{ ϕ | \frac{∂^2}{∂ t^2} | ψ }`.toParseLike`\left\langle ϕ\,\middle\vert\,\frac{∂^2}{∂ t^2}\,\middle\vert\, ψ\right\rangle`;
  3781 |     });
  3782 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3783}","  3781 |     });
  3782 |
> 3783 |     it(""should expand \\set as expected"", () => {
       |    ^ Unknown Test
  3784 |         expect`\set{x|x<5|S|}`.toParseLike`\{\,x\mid x<5|S|\,\}`;
  3785 |         // \set doesn't support special || or \| handling
  3786 |         expect`\set{x||x<5|S|}`.toParseLike`\{\,x\mid |x<5|S|\,\}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3790}","  3788 |     });
  3789 |
> 3790 |     it(""should expand \\Set as expected"", () => {
       |    ^ Unknown Test
  3791 |         expect`\Set{ x | x<\frac 1 2 |S| }`
  3792 |         .toParseLike`\left\{\: x\;\middle\vert\; x<\frac 1 2 |S| \:\right\}`;
  3793 |         expect`\Set{ x || x<\frac 1 2 |S| }`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3803}","  3801 |     const displayMode = new Settings({displayMode: true});
  3802 |
> 3803 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  3804 |         expect`\tag{hi}x+y`.not.toParse();
  3805 |     });
  3806 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3807}","  3805 |     });
  3806 |
> 3807 |     it(""should fail with multiple tags"", () => {
       |    ^ Unknown Test
  3808 |         expect`\tag{1}\tag{2}x+y`.not.toParse(displayMode);
  3809 |     });
  3810 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3811}","  3809 |     });
  3810 |
> 3811 |     it(""should fail with multiple tags in one row"", () => {
       |    ^ Unknown Test
  3812 |         expect`\begin{align}\tag{1}x+y\tag{2}\end{align}`.not.toParse(displayMode);
  3813 |     });
  3814 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3815}","  3813 |     });
  3814 |
> 3815 |     it(""should work with one tag per row"", () => {
       |    ^ Unknown Test
  3816 |         expect`\begin{align}\tag{1}x\\&+y\tag{2}\end{align}`.toParse(displayMode);
  3817 |     });
  3818 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3819}","  3817 |     });
  3818 |
> 3819 |     it(""should work with \\nonumber/\\notag"", () => {
       |    ^ Unknown Test
  3820 |         expect`\begin{align}\tag{1}\nonumber x\\&+y\notag\end{align}`
  3821 |         .toParseLike(r`\begin{align}\tag{1}x\\&+y\nonumber\end{align}`, displayMode);
  3822 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3824}","  3822 |     });
  3823 |
> 3824 |     it(""should build"", () => {
       |    ^ Unknown Test
  3825 |         expect`\tag{hi}x+y`.toBuild(displayMode);
  3826 |     });
  3827 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3828}","  3826 |     });
  3827 |
> 3828 |     it(""should ignore location of \\tag"", () => {
       |    ^ Unknown Test
  3829 |         expect`\tag{hi}x+y`.toParseLike(r`x+y\tag{hi}`, displayMode);
  3830 |     });
  3831 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3832}","  3830 |     });
  3831 |
> 3832 |     it(""should handle \\tag* like \\tag"", () => {
       |    ^ Unknown Test
  3833 |         expect`\tag{hi}x+y`.toParseLike(r`\tag*{({hi})}x+y`, displayMode);
  3834 |     });
  3835 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3861}","  3859 |
  3860 | describe(""\\@binrel automatic bin/rel/ord"", () => {
> 3861 |     it(""should generate proper class"", () => {
       |    ^ Unknown Test
  3862 |         expect`L\@binrel+xR`.toParseLike`L\mathbin xR`;
  3863 |         expect`L\@binrel=xR`.toParseLike`L\mathrel xR`;
  3864 |         expect`L\@binrel xxR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3870}","  3868 |     });
  3869 |
> 3870 |     it(""should base on just first character in group"", () => {
       |    ^ Unknown Test
  3871 |         expect`L\@binrel{+x}xR`.toParseLike`L\mathbin xR`;
  3872 |         expect`L\@binrel{=x}xR`.toParseLike`L\mathrel xR`;
  3873 |         expect`L\@binrel{xx}xR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3890}","  3888 |
  3889 | describe(""Unicode accents"", function() {
> 3890 |     it(""should parse Latin-1 letters in math mode"", function() {
       |    ^ Unknown Test
  3891 |         // TODO(edemaine): Unsupported Latin-1 letters in math: ÇÐÞçðþ
  3892 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ`
  3893 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3910}","  3908 |     });
  3909 |
> 3910 |     it(""should parse Latin-1 letters in text mode"", function() {
       |    ^ Unknown Test
  3911 |         // TODO(edemaine): Unsupported Latin-1 letters in text: ÇÐÞçðþ
  3912 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}`
  3913 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3930}","  3928 |     });
  3929 |
> 3930 |     it(""should support \\aa in text mode"", function() {
       |    ^ Unknown Test
  3931 |         expect`\text{\aa\AA}`.toParseLike(r`\text{\r a\r A}`, strictSettings);
  3932 |         expect`\aa`.not.toParse(strictSettings);
  3933 |         expect`\Aa`.not.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3941}","  3939 |     });
  3940 |
> 3941 |     it(""should parse multi-accented characters"", function() {
       |    ^ Unknown Test
  3942 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3943 |         // Doesn't parse quite the same as
  3944 |         // ""\\text{\\'{\\^a}\\'{\\=a}\\'{\\u a}}"" because of the ordgroups.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3947}","  3945 |     });
  3946 |
> 3947 |     it(""should parse accented i's and j's"", function() {
       |    ^ Unknown Test
  3948 |         expect`íȷ́`.toParseLike(r`\acute ı\acute ȷ`, nonstrictSettings);
  3949 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3950 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3954}","  3952 |
  3953 | describe(""Unicode"", function() {
> 3954 |     it(""should parse negated relations"", function() {
       |    ^ Unknown Test
  3955 |         expect`∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌`.toParse(strictSettings);
  3956 |     });
  3957 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3958}","  3956 |     });
  3957 |
> 3958 |     it(""should build relations"", function() {
       |    ^ Unknown Test
  3959 |         expect`∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌`.toBuild(strictSettings);
  3960 |     });
  3961 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3962}","  3960 |     });
  3961 |
> 3962 |     it(""should parse relations"", function() {
       |    ^ Unknown Test
  3963 |         // These characters are not in the KaTeX fonts. So they build with an error message.
  3964 |         expect`⊶⊷`.toParse();
  3965 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3967}","  3965 |     });
  3966 |
> 3967 |     it(""should build big operators"", function() {
       |    ^ Unknown Test
  3968 |         expect`∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆`.toBuild(strictSettings);
  3969 |     });
  3970 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3971}","  3969 |     });
  3970 |
> 3971 |     it(""should build more relations"", function() {
       |    ^ Unknown Test
  3972 |         expect`⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋`.toBuild(strictSettings);
  3973 |     });
  3974 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3985}","  3983 |     });
  3984 |
> 3985 |     it(""should build arrows"", function() {
       |    ^ Unknown Test
  3986 |         expect`←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉`.toBuild(strictSettings);
  3987 |     });
  3988 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3989}","  3987 |     });
  3988 |
> 3989 |     it(""should build more arrows"", function() {
       |    ^ Unknown Test
  3990 |         expect`⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼`.toBuild(strictSettings);
  3991 |     });
  3992 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4075}","  4073 |
  4074 | describe(""The maxExpand setting"", () => {
> 4075 |     it(""should prevent expansion"", () => {
       |    ^ Unknown Test
  4076 |         expect`\gdef\foo{1}\foo`.toParse();
  4077 |         expect`\gdef\foo{1}\foo`.toParse(new Settings({maxExpand: 1}));
  4078 |         expect`\gdef\foo{1}\foo`.not.toParse(new Settings({maxExpand: 0}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4081}","  4079 |     });
  4080 |
> 4081 |     it(""should prevent infinite loops"", () => {
       |    ^ Unknown Test
  4082 |         expect`\gdef\foo{\foo}\foo`.not.toParse(
  4083 |             new Settings({maxExpand: 10}));
  4084 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4086}","  4084 |     });
  4085 |
> 4086 |     it(""should prevent exponential blowup via \\edef"", () => {
       |    ^ Unknown Test
  4087 |         expect`\edef0{x}\edef0{00}\edef0{00}\edef0{00}\edef0{00}`.not.toParse(
  4088 |             new Settings({maxExpand: 10}));
  4089 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4137}","  4135 |
  4136 | describe(""Newlines via \\\\ and \\newline"", function() {
> 4137 |     it(""should build \\\\ without the optional argument and \\newline the same"", () => {
       |    ^ Unknown Test
  4138 |         expect`hello \\ world`.toBuildLike`hello \newline world`;
  4139 |     });
  4140 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4141}","  4139 |     });
  4140 |
> 4141 |     it(""should not allow \\newline to scan for an optional size argument"", () => {
       |    ^ Unknown Test
  4142 |         expect`hello \newline[w]orld`.toBuild();
  4143 |     });
  4144 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4145}","  4143 |     });
  4144 |
> 4145 |     it(""should not allow \\cr at top level"", () => {
       |    ^ Unknown Test
  4146 |         expect`hello \cr world`.not.toBuild();
  4147 |     });
  4148 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4160}","  4158 |
  4159 | describe(""Symbols"", function() {
> 4160 |     it(""should parse \\text{\\i\\j}"", () => {
       |    ^ Unknown Test
  4161 |         expect`\text{\i\j}`.toBuild(strictSettings);
  4162 |     });
  4163 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4164}","  4162 |     });
  4163 |
> 4164 |     it(""should parse spacing functions in math or text mode"", () => {
       |    ^ Unknown Test
  4165 |         expect`A\;B\,C\nobreakspace \text{A\;B\,C\nobreakspace}`.toBuild(strictSettings);
  4166 |     });
  4167 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4168}","  4166 |     });
  4167 |
> 4168 |     it(""should build \\minuso"", () => {
       |    ^ Unknown Test
  4169 |         expect`\\minuso`.toBuild(strictSettings);
  4170 |     });
  4171 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4172}","  4170 |     });
  4171 |
> 4172 |     it(""should render ligature commands like their unicode characters"", () => {
       |    ^ Unknown Test
  4173 |         expect`\text{\ae\AE\oe\OE\o\O\ss}`.toBuildLike(r`\text{æÆœŒøØß}`, strictSettings);
  4174 |     });
  4175 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4178}","  4176 |
  4177 | describe(""strict setting"", function() {
> 4178 |     it(""should allow unicode text when not strict"", () => {
       |    ^ Unknown Test
  4179 |         expect`é`.toParse(new Settings(nonstrictSettings));
  4180 |         expect`試`.toParse(new Settings(nonstrictSettings));
  4181 |         expect`é`.toParse(new Settings({strict: ""ignore""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4189}","  4187 |     });
  4188 |
> 4189 |     it(""should forbid unicode text when strict"", () => {
       |    ^ Unknown Test
  4190 |         expect`é`.not.toParse(new Settings({strict: true}));
  4191 |         expect`試`.not.toParse(new Settings({strict: true}));
  4192 |         expect`é`.not.toParse(new Settings({strict: ""error""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4200}","  4198 |     });
  4199 |
> 4200 |     it(""should warn about unicode text when default"", () => {
       |    ^ Unknown Test
  4201 |         expect`é`.toWarn(new Settings());
  4202 |         expect`試`.toWarn(new Settings());
  4203 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4205}","  4203 |     });
  4204 |
> 4205 |     it(""should always allow unicode text in text mode"", () => {
       |    ^ Unknown Test
  4206 |         expect`\text{é試}`.toParse(nonstrictSettings);
  4207 |         expect`\text{é試}`.toParse(strictSettings);
  4208 |         expect`\text{é試}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4211}","  4209 |     });
  4210 |
> 4211 |     it(""should warn about top-level \\newline in display mode"", () => {
       |    ^ Unknown Test
  4212 |         expect`x\\y`.toWarn(new Settings({displayMode: true}));
  4213 |         expect`x\\y`.toParse(new Settings({displayMode: false}));
  4214 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4260}","  4258 |         }).toThrow(errorMessage);
  4259 |     });
> 4260 |     it(""should add font metrics to metrics map and render successfully"", () => {
       |    ^ Unknown Test
  4261 |         const mockMetrics = {};
  4262 |         // mock font metrics for the symbols that we added previously
  4263 |         for (let number = 0; number <= 9; number++) {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4296}","  4294 |
  4295 | describe(""\\relax"", () => {
> 4296 |     it(""should stop the expansion"", () => {
       |    ^ Unknown Test
  4297 |         expect`\kern2\relax em`.not.toParse();
  4298 |     });
  4299 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4302}","  4300 |
  4301 | describe(""\\emph"", () => {
> 4302 |     it(""should toggle italics"", () => {
       |    ^ Unknown Test
  4303 |         expect`\emph{foo \emph{bar}}`.toBuildLike`\textit{foo \textup{bar}}`;
  4304 |     });
  4305 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4306}","  4304 |     });
  4305 |
> 4306 |     it(""should toggle italics within text"", () => {
       |    ^ Unknown Test
  4307 |         expect`\text{\emph{foo \emph{bar}}}`.toBuildLike`\text{\textit{foo \textup{bar}}}`;
  4308 |     });
  4309 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4310}","  4308 |     });
  4309 |
> 4310 |     it(""should toggle italics within textup"", () => {
       |    ^ Unknown Test
  4311 |         expect`\textup{\emph{foo \emph{bar}}}`.toBuildLike`\textup{\textit{foo \textup{bar}}}`;
  4312 |     });
  4313 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4314}","  4312 |     });
  4313 |
> 4314 |     it(""should toggle italics within textit"", () => {
       |    ^ Unknown Test
  4315 |         expect`\textit{\emph{foo \emph{bar}}}`.toBuildLike`\textit{\textup{foo \textit{bar}}}`;
  4316 |     });
  4317 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 132}","  130 |         });
  131 |         it(""complains about mismatched \\verb with end of line"", function() {
> 132 |             expect(""\\verb|hello\nworld|"").toFailWithParseError(
      |            ^ Redundant Assertion
  133 |                 ""\\verb ended by end of line instead of matching delimiter"");
  134 |         });
  135 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 291}","  289 |     describe(""#_innerLex"", function() {
  290 |         it(""rejects lone surrogate char"", function() {
> 291 |             expect(""\udcba "").toFailWithParseError(
      |            ^ Redundant Assertion
  292 |                    ""Unexpected character: '\udcba' at position 1:"" +
  293 |                     "" \udcba\u0332 "");
  294 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 296}","  294 |         });
  295 |         it(""rejects lone backslash at end of input"", function() {
> 296 |             expect(""\\"").toFailWithParseError(
      |            ^ Redundant Assertion
  297 |                    ""Unexpected character: '\\' at position 1: \\̲"");
  298 |         });
  299 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 8, 'line': 328}","  326 | describe(""Unicode accents"", function() {
  327 |     it(""should return error for invalid combining characters"", function() {
> 328 |         expect(""A\u0328"").toFailWithParseError(
      |        ^ Redundant Assertion
  329 |             ""Unknown accent ' ̨' at position 1: Ą̲̲"");
  330 |     });
  331 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 6}","  4 |
  5 |     describe(""#handleInfixNodes"", function() {
> 6 |         it(""rejects repeated infix operators"", function() {
    |        ^ Unknown Test
  7 |             expect`1\over 2\over 3`.toFailWithParseError(
  8 |                    ""only one infix operator per group at position 9: "" +
  9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 11}","   9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");
  10 |         });
> 11 |         it(""rejects conflicting infix operators"", function() {
     |        ^ Unknown Test
  12 |             expect`1\over 2\choose 3`.toFailWithParseError(
  13 |                    ""only one infix operator per group at position 9: "" +
  14 |                    ""1\\over 2\\̲c̲h̲o̲o̲s̲e̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 19}","  17 |
  18 |     describe(""#handleSupSubscript"", function() {
> 19 |         it(""rejects ^ at end of group"", function() {
     |        ^ Unknown Test
  20 |             expect`{1^}`.toFailWithParseError(
  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 23}","  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });
> 23 |         it(""rejects _ at end of input"", function() {
     |        ^ Unknown Test
  24 |             expect`1_`.toFailWithParseError(
  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 27}","  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });
> 27 |         it(""rejects \\sqrt as argument to ^"", function() {
     |        ^ Unknown Test
  28 |             expect`1^\sqrt{2}`.toFailWithParseError(
  29 |                    ""Got function '\\sqrt' with no arguments as superscript"" +
  30 |                    "" at position 3: 1^\\̲s̲q̲r̲t̲{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 35}","  33 |
  34 |     describe(""#parseAtom"", function() {
> 35 |         it(""rejects \\limits without operator"", function() {
     |        ^ Unknown Test
  36 |             expect`\alpha\limits\omega`.toFailWithParseError(
  37 |                    ""Limit controls must follow a math operator"" +
  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 40}","  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");
  39 |         });
> 40 |         it(""rejects \\limits at the beginning of the input"", function() {
     |        ^ Unknown Test
  41 |             expect`\limits\omega`.toFailWithParseError(
  42 |                    ""Limit controls must follow a math operator"" +
  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 45}","  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");
  44 |         });
> 45 |         it(""rejects double superscripts"", function() {
     |        ^ Unknown Test
  46 |             expect`1^2^3`.toFailWithParseError(
  47 |                    ""Double superscript at position 4: 1^2^̲3"");
  48 |             expect`1^{2+3}_4^5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 51}","  49 |                    ""Double superscript at position 10: 1^{2+3}_4^̲5"");
  50 |         });
> 51 |         it(""rejects double superscripts involving primes"", function() {
     |        ^ Unknown Test
  52 |             expect`1'_2^3`.toFailWithParseError(
  53 |                    ""Double superscript at position 5: 1'_2^̲3"");
  54 |             expect`1^2'`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 61}","  59 |                    ""Double superscript at position 5: 1'_2'̲"");
  60 |         });
> 61 |         it(""rejects double subscripts"", function() {
     |        ^ Unknown Test
  62 |             expect`1_2_3`.toFailWithParseError(
  63 |                    ""Double subscript at position 4: 1_2_̲3"");
  64 |             expect`1_{2+3}^4_5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 70}","  68 |
  69 |     describe(""#parseImplicitGroup"", function() {
> 70 |         it(""reports unknown environments"", function() {
     |        ^ Unknown Test
  71 |             expect`\begin{foo}bar\end{foo}`.toFailWithParseError(
  72 |                    ""No such environment: foo at position 7:"" +
  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 75}","  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");
  74 |         });
> 75 |         it(""reports mismatched environments"", function() {
     |        ^ Unknown Test
  76 |             expect`\begin{pmatrix}1&2\\3&4\end{bmatrix}+5`
  77 |                 .toFailWithParseError(
  78 |                    ""Mismatch: \\begin{pmatrix} matched by \\end{bmatrix}"" +",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 84}","  82 |
  83 |     describe(""#parseFunction"", function() {
> 84 |         it(""rejects math-mode functions in text mode"", function() {
     |        ^ Unknown Test
  85 |             expect`\text{\sqrt2 is irrational}`.toFailWithParseError(
  86 |                 ""Can't use function '\\sqrt' in text mode"" +
  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 89}","  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");
  88 |         });
> 89 |         it(""rejects text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  90 |             expect`$`.toFailWithParseError(
  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 93}","  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });
> 93 |         it(""rejects strict-mode text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  94 |             expect`\'echec`.toFailWithParseError(""LaTeX-incompatible input "" +
  95 |                 ""and strict mode is set to 'error': LaTeX's accent \\' works "" +
  96 |                 ""only in text mode [mathVsTextAccents]"", strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 101}","   99 |
  100 |     describe(""#parseArguments"", function() {
> 101 |         it(""complains about missing argument at end of input"", function() {
      |        ^ Unknown Test
  102 |             expect`2\sqrt`.toFailWithParseError(
  103 |                    ""Expected group as argument to '\\sqrt'"" +
  104 |                    "" at end of input: 2\\sqrt"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 106}","  104 |                    "" at end of input: 2\\sqrt"");
  105 |         });
> 106 |         it(""complains about missing argument at end of group"", function() {
      |        ^ Unknown Test
  107 |             expect`1^{2\sqrt}`.toFailWithParseError(
  108 |                    ""Expected group as argument to '\\sqrt'"" +
  109 |                    "" at position 10: 1^{2\\sqrt}̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 111}","  109 |                    "" at position 10: 1^{2\\sqrt}̲"");
  110 |         });
> 111 |         it(""complains about functions as arguments to others"", function() {
      |        ^ Unknown Test
  112 |             expect`\sqrt\over2`.toFailWithParseError(
  113 |                    ""Got function '\\over' with no arguments as argument to"" +
  114 |                    "" '\\sqrt' at position 6: \\sqrt\\̲o̲v̲e̲r̲2"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 119}","  117 |
  118 |     describe(""#parseGroup"", function() {
> 119 |         it(""complains about undefined control sequence"", function() {
      |        ^ Unknown Test
  120 |             expect`\xyz`.toFailWithParseError(
  121 |                    ""Undefined control sequence: \\xyz"" +
  122 |                    "" at position 1: \\̲x̲y̲z̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 127}","  125 |
  126 |     describe(""#verb"", function() {
> 127 |         it(""complains about mismatched \\verb with end of string"", function() {
      |        ^ Unknown Test
  128 |             expect`\verb|hello`.toFailWithParseError(
  129 |                 ""\\verb ended by end of line instead of matching delimiter"");
  130 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 142}","  140 |
  141 |     describe(""#parseInput expecting EOF"", function() {
> 142 |         it(""complains about extra }"", function() {
      |        ^ Unknown Test
  143 |             expect`{1+2}}`.toFailWithParseError(
  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 146}","  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });
> 146 |         it(""complains about extra \\end"", function() {
      |        ^ Unknown Test
  147 |             expect`x\end{matrix}`.toFailWithParseError(
  148 |                    ""Expected 'EOF', got '\\end' at position 2:"" +
  149 |                    "" x\\̲e̲n̲d̲{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 151}","  149 |                    "" x\\̲e̲n̲d̲{matrix}"");
  150 |         });
> 151 |         it(""complains about top-level &"", function() {
      |        ^ Unknown Test
  152 |             expect`1&2`.toFailWithParseError(
  153 |                    ""Expected 'EOF', got '&' at position 2: 1&̲2"");
  154 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 158}","  156 |
  157 |     describe(""#parseImplicitGroup expecting \\right"", function() {
> 158 |         it(""rejects missing \\right"", function() {
      |        ^ Unknown Test
  159 |             expect`\left(1+2)`.toFailWithParseError(
  160 |                    ""Expected '\\right', got 'EOF' at end of input:"" +
  161 |                    "" \\left(1+2)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 163}","  161 |                    "" \\left(1+2)"");
  162 |         });
> 163 |         it(""rejects incorrectly scoped \\right"", function() {
      |        ^ Unknown Test
  164 |             expect`{\left(1+2}\right)`.toFailWithParseError(
  165 |                    ""Expected '\\right', got '}' at position 11:"" +
  166 |                    "" {\\left(1+2}̲\\right)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 174}","  172 |
  173 |     describe(""#parseSpecialGroup expecting braces"", function() {
> 174 |         it(""complains about missing { for color"", function() {
      |        ^ Unknown Test
  175 |             expect`\textcolor#ffffff{text}`.toFailWithParseError(
  176 |                    ""Invalid color: '#' at position 11:"" +
  177 |                    "" \\textcolor#̲ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 179}","  177 |                    "" \\textcolor#̲ffffff{text}"");
  178 |         });
> 179 |         it(""complains about missing { for size"", function() {
      |        ^ Unknown Test
  180 |             expect`\rule{1em}[2em]`.toFailWithParseError(
  181 |                    ""Invalid size: '[' at position 11: \\rule{1em}[̲2em]"");
  182 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 184}","  182 |         });
  183 |         // Can't test for the [ of an optional group since it's optional
> 184 |         it(""complains about missing } for color"", function() {
      |        ^ Unknown Test
  185 |             expect`\textcolor{#ffffff{text}`.toFailWithParseError(
  186 |                    ""Unexpected end of input in a macro argument,"" +
  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 189}","  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");
  188 |         });
> 189 |         it(""complains about missing ] for size"", function() {
      |        ^ Unknown Test
  190 |             expect`\rule[1em{2em}{3em}`.toFailWithParseError(
  191 |                    ""Unexpected end of input in a macro argument,"" +
  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 194}","  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");
  193 |         });
> 194 |         it(""complains about missing ] for size at end of input"", function() {
      |        ^ Unknown Test
  195 |             expect`\rule[1em`.toFailWithParseError(
  196 |                    ""Unexpected end of input in a macro argument,"" +
  197 |                    "" expected ']' at end of input: \\rule[1em"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 199}","  197 |                    "" expected ']' at end of input: \\rule[1em"");
  198 |         });
> 199 |         it(""complains about missing } for color at end of input"", function() {
      |        ^ Unknown Test
  200 |             expect`\textcolor{#123456`.toFailWithParseError(
  201 |                    ""Unexpected end of input in a macro argument,"" +
  202 |                    "" expected '}' at end of input: …xtcolor{#123456"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 207}","  205 |
  206 |     describe(""#parseGroup expecting }"", function() {
> 207 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  208 |             expect`\sqrt{2`.toFailWithParseError(
  209 |                    ""Expected '}', got 'EOF' at end of input: \\sqrt{2"");
  210 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 214}","  212 |
  213 |     describe(""#parseOptionalGroup expecting ]"", function() {
> 214 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  215 |             expect`\sqrt[3`.toFailWithParseError(
  216 |                    ""Unexpected end of input in a macro argument,"" +
  217 |                    "" expected ']' at end of input: \\sqrt[3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 219}","  217 |                    "" expected ']' at end of input: \\sqrt[3"");
  218 |         });
> 219 |         it(""before group"", function() {
      |        ^ Unknown Test
  220 |             expect`\sqrt[3{2}`.toFailWithParseError(
  221 |                    ""Unexpected end of input in a macro argument,"" +
  222 |                    "" expected ']' at end of input: \\sqrt[3{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 231}","  229 |
  230 |     describe(""parseArray"", function() {
> 231 |         it(""rejects missing \\end"", function() {
      |        ^ Unknown Test
  232 |             expect`\begin{matrix}1`.toFailWithParseError(
  233 |                    ""Expected & or \\\\ or \\cr or \\end at end of input:"" +
  234 |                    "" \\begin{matrix}1"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 236}","  234 |                    "" \\begin{matrix}1"");
  235 |         });
> 236 |         it(""rejects incorrectly scoped \\end"", function() {
      |        ^ Unknown Test
  237 |             expect`{\begin{matrix}1}\end{matrix}`.toFailWithParseError(
  238 |                    ""Expected & or \\\\ or \\cr or \\end at position 17:"" +
  239 |                    "" …\\begin{matrix}1}̲\\end{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 244}","  242 |
  243 |     describe(""array environment"", function() {
> 244 |         it(""rejects unknown column types"", function() {
      |        ^ Unknown Test
  245 |             expect`\begin{array}{cba}\end{array}`.toFailWithParseError(
  246 |                    ""Unknown column alignment: b at position 16:"" +
  247 |                    "" \\begin{array}{cb̲a}\\end{array}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 256}","  254 |
  255 |     describe(""delimiter functions"", function() {
> 256 |         it(""reject invalid opening delimiters"", function() {
      |        ^ Unknown Test
  257 |             expect`\bigl 1 + 2 \bigr`.toFailWithParseError(
  258 |                    ""Invalid delimiter '1' after '\\bigl' at position 7:"" +
  259 |                    "" \\bigl 1̲ + 2 \\bigr"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 261}","  259 |                    "" \\bigl 1̲ + 2 \\bigr"");
  260 |         });
> 261 |         it(""reject invalid closing delimiters"", function() {
      |        ^ Unknown Test
  262 |             expect`\bigl(1+2\bigr=3`.toFailWithParseError(
  263 |                    ""Invalid delimiter '=' after '\\bigr' at position 15:"" +
  264 |                    "" \\bigl(1+2\\bigr=̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 266}","  264 |                    "" \\bigl(1+2\\bigr=̲3"");
  265 |         });
> 266 |         it(""reject group opening delimiters"", function() {
      |        ^ Unknown Test
  267 |             expect`\bigl{(}1+2\bigr)3`.toFailWithParseError(
  268 |                    ""Invalid delimiter type 'ordgroup' at position 6:"" +
  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 271}","  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");
  270 |         });
> 271 |         it(""reject group closing delimiters"", function() {
      |        ^ Unknown Test
  272 |             expect`\bigl(1+2\bigr{)}3`.toFailWithParseError(
  273 |                    ""Invalid delimiter type 'ordgroup' at position 15:"" +
  274 |                    "" \\bigl(1+2\\bigr{̲)̲}̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 279}","  277 |
  278 |     describe(""\\begin and \\end"", function() {
> 279 |         it(""reject invalid environment names"", function() {
      |        ^ Unknown Test
  280 |             expect`\begin x\end y`.toFailWithParseError(
  281 |                    ""No such environment: x at position 8: \\begin x̲\\end y"");
  282 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 302}","  300 |
  301 |     describe(""#_innerLexColor"", function() {
> 302 |         it(""reject 3-digit hex notation without #"", function() {
      |        ^ Unknown Test
  303 |             expect`\textcolor{1a2}{foo}`.toFailWithParseError(
  304 |                    ""Invalid color: '1a2'"" +
  305 |                    "" at position 11: \\textcolor{̲1̲a̲2̲}̲{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 310}","  308 |
  309 |     describe(""#_innerLexSize"", function() {
> 310 |         it(""reject size without unit"", function() {
      |        ^ Unknown Test
  311 |             expect`\rule{0}{2em}`.toFailWithParseError(
  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 314}","  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });
> 314 |         it(""reject size with bogus unit"", function() {
      |        ^ Unknown Test
  315 |             expect`\rule{1au}{2em}`.toFailWithParseError(
  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 318}","  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });
> 318 |         it(""reject size without number"", function() {
      |        ^ Unknown Test
  319 |             expect`\rule{em}{2em}`.toFailWithParseError(
  320 |                    ""Invalid size: 'em' at position 6: \\rule{̲e̲m̲}̲{2em}"");
  321 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 5, 'column': 4, 'index': 124}","  3 |
  4 | describe(""Symbols and macros"", () => {
> 5 |     for (const macro in macros) {
    |    ^ Conditional Test Logic
  6 |         if (!macros.hasOwnProperty(macro)) {
  7 |             continue;
  8 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 6, 'column': 8, 'index': 162}","  4 | describe(""Symbols and macros"", () => {
  5 |     for (const macro in macros) {
> 6 |         if (!macros.hasOwnProperty(macro)) {
    |        ^ Conditional Test Logic
  7 |             continue;
  8 |         }
  9 |         it(`macro ${macro} should not shadow a symbol`, () => {",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 10, 'column': 12, 'index': 307}","   8 |         }
   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
> 10 |             for (const kind in symbols) {
     |            ^ Conditional Test Logic
  11 |                 if (!symbols.hasOwnProperty(kind)) {
  12 |                     continue;
  13 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 11, 'column': 16, 'index': 353}","   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
  10 |             for (const kind in symbols) {
> 11 |                 if (!symbols.hasOwnProperty(kind)) {
     |                ^ Conditional Test Logic
  12 |                     continue;
  13 |                 }
  14 |                 expect(symbols[kind][macro]).toBeFalsy();",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 18, 'column': 12, 'index': 481}","  16 |                   splitAtDelimiters(actual, delimiters);
  17 |
> 18 |             if (split.length !== result.length) {
     |            ^ Conditional Test Logic
  19 |                 message.pass = false;
  20 |                 message.message = () => ""Different number of splits: "" +
  21 |                     split.length + "" vs. "" + result.length + "" ("" +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 27, 'column': 12, 'index': 861}","  25 |             }
  26 |
> 27 |             for (let i = 0; i < split.length; i++) {
     |            ^ Conditional Test Logic
  28 |                 const real = split[i];
  29 |                 const correct = result[i];
  30 |",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 34, 'column': 16, 'index': 1061}","  32 |                 let diff;
  33 |
> 34 |                 if (real.type !== correct.type) {
     |                ^ Conditional Test Logic
  35 |                     good = false;
  36 |                     diff = ""type"";
  37 |                 } else if (real.data !== correct.data) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 37, 'column': 23, 'index': 1187}","  35 |                     good = false;
  36 |                     diff = ""type"";
> 37 |                 } else if (real.data !== correct.data) {
     |                       ^ Conditional Test Logic
  38 |                     good = false;
  39 |                     diff = ""data"";
  40 |                 } else if (real.display !== correct.display) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 40, 'column': 23, 'index': 1313}","  38 |                     good = false;
  39 |                     diff = ""data"";
> 40 |                 } else if (real.display !== correct.display) {
     |                       ^ Conditional Test Logic
  41 |                     good = false;
  42 |                     diff = ""display"";
  43 |                 }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 45, 'column': 16, 'index': 1460}","  43 |                 }
  44 |
> 45 |                 if (!good) {
     |                ^ Conditional Test Logic
  46 |                     message.pass = false;
  47 |                     message.message = () => ""Difference at split "" +
  48 |                         (i + 1) + "": "" + JSON.stringify(real) +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 332, 'column': 8, 'index': 11671}","  330 |             '\\]'];
  331 |         const el = document.createElement('div');
> 332 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  333 |             const txt = document.createTextNode(textNodes[i]);
  334 |             el.appendChild(txt);
  335 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 350, 'column': 8, 'index': 12420}","  348 |             'consectetur adipiscing elit'];
  349 |         const el = document.createElement('div');
> 350 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  351 |             const txt = document.createTextNode(textNodes[i]);
  352 |             el.appendChild(txt);
  353 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 355, 'column': 8, 'index': 12630}","  353 |         }
  354 |         const el2 = document.createElement('div');
> 355 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  356 |             const txt = document.createTextNode(textNodes[i]);
  357 |             el2.appendChild(txt);
  358 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 62}","  60 | describe(""A delimiter splitter"", function() {
  61 |     it(""doesn't split when there are no delimiters"", function() {
> 62 |         expect(""hello"").toSplitInto(
     |        ^ Redundant Assertion
  63 |             [
  64 |                 {type: ""text"", data: ""hello""},
  65 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 72}","  70 |
  71 |     it(""doesn't create a math node with only one left delimiter"", function() {
> 72 |         expect(""hello ( world"").toSplitInto(
     |        ^ Redundant Assertion
  73 |             [
  74 |                 {type: ""text"", data: ""hello ""},
  75 |                 {type: ""text"", data: ""( world""},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 83}","  81 |
  82 |     it(""doesn't split when there's only a right delimiter"", function() {
> 83 |         expect(""hello ) world"").toSplitInto(
     |        ^ Redundant Assertion
  84 |             [
  85 |                 {type: ""text"", data: ""hello ) world""},
  86 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 93}","  91 |
  92 |     it(""splits when there are both delimiters"", function() {
> 93 |         expect(""hello ( world ) boo"").toSplitInto(
     |        ^ Redundant Assertion
  94 |             [
  95 |                 {type: ""text"", data: ""hello ""},
  96 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 106}","  104 |
  105 |     it(""splits on multi-character delimiters"", function() {
> 106 |         expect(""hello [[ world ]] boo"").toSplitInto(
      |        ^ Redundant Assertion
  107 |             [
  108 |                 {type: ""text"", data: ""hello ""},
  109 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 116}","  114 |                 {left: ""[["", right: ""]]"", display: false},
  115 |             ]);
> 116 |         expect(""hello \\begin{equation} world \\end{equation} boo"").toSplitInto(
      |        ^ Redundant Assertion
  117 |             [
  118 |                 {type: ""text"", data: ""hello ""},
  119 |                 {type: ""math"", data: ""\\begin{equation} world \\end{equation}"",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 131}","  129 |
  130 |     it(""splits multiple times"", function() {
> 131 |         expect(""hello ( world ) boo ( more ) stuff"").toSplitInto(
      |        ^ Redundant Assertion
  132 |             [
  133 |                 {type: ""text"", data: ""hello ""},
  134 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 147}","  145 |
  146 |     it(""leaves the ending when there's only a left delimiter"", function() {
> 147 |         expect(""hello ( world ) boo ( left"").toSplitInto(
      |        ^ Redundant Assertion
  148 |             [
  149 |                 {type: ""text"", data: ""hello ""},
  150 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 161}","  159 |
  160 |     it(""doesn't split when close delimiters are in {}s"", function() {
> 161 |         expect(""hello ( world { ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  162 |             [
  163 |                 {type: ""text"", data: ""hello ""},
  164 |                 {type: ""math"", data: "" world { ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 172}","  170 |             ]);
  171 |
> 172 |         expect(""hello ( world { { } ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  173 |             [
  174 |                 {type: ""text"", data: ""hello ""},
  175 |                 {type: ""math"", data: "" world { { } ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 185}","  183 |
  184 |     it(""correctly processes sequences of $..$"", function() {
> 185 |         expect(""$hello$$world$$boo$"").toSplitInto(
      |        ^ Redundant Assertion
  186 |             [
  187 |                 {type: ""math"", data: ""hello"",
  188 |                     rawData: ""$hello$"", display: false},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 200}","  198 |
  199 |     it(""doesn't split at escaped delimiters"", function() {
> 200 |         expect(""hello ( world \\) ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  201 |             [
  202 |                 {type: ""text"", data: ""hello ""},
  203 |                 {type: ""math"", data: "" world \\) "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 224}","  222 |
  223 |     it(""splits when the right and left delimiters are the same"", function() {
> 224 |         expect(""hello $ world $ boo"").toSplitInto(
      |        ^ Redundant Assertion
  225 |             [
  226 |                 {type: ""text"", data: ""hello ""},
  227 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 237}","  235 |
  236 |     it(""ignores \\$"", function() {
> 237 |         expect(""$x = \\$5$"").toSplitInto(
      |        ^ Redundant Assertion
  238 |             [
  239 |                 {type: ""math"", data: ""x = \\$5"",
  240 |                     rawData: ""$x = \\$5$"", display: false},",,
test/unicode-spec.js,ConditionalTestLogic,"[{""startLine"":157,""endLine"":160}]",,25.0,2.0
test/unicode-spec.js,SubOptimalAssert,"[{""startLine"":163,""endLine"":163}]",,25.0,2.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1318,""endLine"":1322}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1401,""endLine"":1403}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2822,""endLine"":2824}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2839,""endLine"":2841}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2856,""endLine"":2859}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3127,""endLine"":3130}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3824,""endLine"":3826}]",,556.0,117.0
test/katex-spec.js,OvercommentedTest,"[{""startLine"":4014,""endLine"":4049}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":62,""endLine"":64}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":81,""endLine"":84}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":110,""endLine"":113}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":125,""endLine"":127}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":143,""endLine"":145}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":161,""endLine"":163}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":177,""endLine"":179}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":299,""endLine"":304}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":343,""endLine"":345}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":360,""endLine"":362}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":387,""endLine"":390}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":492,""endLine"":494}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":566,""endLine"":571}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":573,""endLine"":603}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":669,""endLine"":678}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":682,""endLine"":688}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":694,""endLine"":696}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":718,""endLine"":720}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":830,""endLine"":840}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":854,""endLine"":856}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":992,""endLine"":994}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1040,""endLine"":1043}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1099,""endLine"":1109}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1111,""endLine"":1114}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1116,""endLine"":1119}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1137,""endLine"":1151}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1169,""endLine"":1172}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1174,""endLine"":1177}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1179,""endLine"":1182}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1198,""endLine"":1200}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1310,""endLine"":1312}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1545,""endLine"":1558}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1562,""endLine"":1567}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1693,""endLine"":1700}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2077,""endLine"":2094}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2115,""endLine"":2117}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2150,""endLine"":2152}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2261,""endLine"":2267}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2292,""endLine"":2297}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2299,""endLine"":2305}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2309,""endLine"":2315}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2317,""endLine"":2323}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2327,""endLine"":2332}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2334,""endLine"":2340}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2353,""endLine"":2358}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2366,""endLine"":2370}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2374,""endLine"":2379}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2381,""endLine"":2388}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2392,""endLine"":2398}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2406,""endLine"":2410}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2414,""endLine"":2420}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2433,""endLine"":2440}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2448,""endLine"":2452}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2456,""endLine"":2461}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2463,""endLine"":2470}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2474,""endLine"":2479}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2489,""endLine"":2494}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2496,""endLine"":2502}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2529,""endLine"":2532}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2536,""endLine"":2540}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2542,""endLine"":2544}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2548,""endLine"":2552}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2554,""endLine"":2557}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2559,""endLine"":2563}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2565,""endLine"":2568}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2572,""endLine"":2576}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2578,""endLine"":2580}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2584,""endLine"":2589}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2591,""endLine"":2595}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2597,""endLine"":2601}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2605,""endLine"":2614}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2616,""endLine"":2622}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2635,""endLine"":2640}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2644,""endLine"":2646}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2647,""endLine"":2649}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2653,""endLine"":2662}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2673,""endLine"":2684}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2702,""endLine"":2717}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2727,""endLine"":2737}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2751,""endLine"":2757}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2839,""endLine"":2841}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2856,""endLine"":2859}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2865,""endLine"":2867}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2960,""endLine"":2967}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2971,""endLine"":2974}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3416,""endLine"":3419}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3500,""endLine"":3503}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3803,""endLine"":3805}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3824,""endLine"":3826}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":90,""endLine"":95}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":99,""endLine"":104}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1763,""endLine"":1765}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1898,""endLine"":1899}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3171,""endLine"":3171}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3186,""endLine"":3186}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3981,""endLine"":3982}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":512,""endLine"":538}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":573,""endLine"":603}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":1609,""endLine"":1633}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3082,""endLine"":3097}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3505,""endLine"":3521}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":4014,""endLine"":4049}]",,556.0,117.0
test/errors-spec.js,AnonymousTest,"[{""startLine"":219,""endLine"":223}]",,50.0,26.0
test/errors-spec.js,IdenticalTestDescription,"[{""startLine"":214,""endLine"":218}]",,50.0,26.0
