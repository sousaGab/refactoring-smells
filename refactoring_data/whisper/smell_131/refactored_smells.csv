file,type,smells,frame,itCount,describeCount
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 20, 'column': 8, 'index': 1016}","  18 |     it(""should not parse Latin-1 outside \\text{} with strict"", function() {
  19 |         const chars = 'ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ';
> 20 |         for (const ch of chars) {
     |        ^ Conditional Test Logic
  21 |             expect(ch).not.toParse(strictSettings);
  22 |         }
  23 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 144, 'column': 8, 'index': 5144}","  142 |
  143 |     it(""supportedCodepoint() should return the correct values"", () => {
> 144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |        ^ Conditional Test Logic
  145 |             expect(supportedCodepoint(codepoint)).toBe(
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 152, 'column': 15, 'index': 5441}","  150 |
  151 |     it(""scriptFromCodepoint() should return correct values"", () => {
> 152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |               ^ Conditional Test Logic
  153 |             const character = String.fromCharCode(codepoint);
  154 |             const script = scriptFromCodepoint(codepoint);
  155 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 156, 'column': 12, 'index': 5635}","  154 |             const script = scriptFromCodepoint(codepoint);
  155 |
> 156 |             for (const scriptName of scriptNames) {
      |            ^ Conditional Test Logic
  157 |                 if (scriptRegExps[scriptName].test(character)) {
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 157, 'column': 16, 'index': 5691}","  155 |
  156 |             for (const scriptName of scriptNames) {
> 157 |                 if (scriptRegExps[scriptName].test(character)) {
      |                ^ Conditional Test Logic
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;
  160 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 158, 'column': 20, 'index': 5760}","  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {
> 158 |                     expect(script).toEqual(scriptName);
      |                    ^ Duplicate Assert
  159 |                     continue outer;
  160 |                 }
  161 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 163, 'column': 12, 'index': 5877}","  161 |             }
  162 |
> 163 |             expect(script).toBe(null);
      |            ^ Duplicate Assert
  164 |             expect(supportedCodepoint(codepoint)).toBe(false);
  165 |         }
  166 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 154, 'column': 27, 'index': 5590}","  152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
  153 |             const character = String.fromCharCode(codepoint);
> 154 |             const script = scriptFromCodepoint(codepoint);
      |                           ^ Eager Test
  155 |
  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Eager Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 145, 'column': 19, 'index': 5223}","  143 |     it(""supportedCodepoint() should return the correct values"", () => {
  144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
> 145 |             expect(supportedCodepoint(codepoint)).toBe(
      |                   ^ Lazy Test
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );
  148 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Lazy Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 7}","   5 |
   6 | describe(""unicode"", function() {
>  7 |     it(""should build Latin-1 inside \\text{}"", function() {
     |    ^ Unknown Test
   8 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}`
   9 |             .toBuild();
  10 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 12}","  10 |     });
  11 |
> 12 |     it(""should build Latin-1 inside \\text{} like accent commands"", function() {
     |    ^ Unknown Test
  13 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}`
  14 |             .toParseLike`\text{\`A\'A\^A\~A\""A\r A\`E\'E\^E\""E\`I\'I\^I\""I\~N\`O\'O\^O\~O\""O\`U\'U\^U\""U\'Y\`a\'a\^a\~a\""a\r a\`e\'e\^e\""e\`ı\'ı\^ı\""ı\~n\`o\'o\^o\~o\""o\`u\'u\^u\""u\'y\""y\c C\c c}`;
  15 |         // TODO(edemaine): A few characters don't have analogs yet.",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 25}","  23 |     });
  24 |
> 25 |     it(""should build Latin-1 outside \\text{}"", function() {
     |    ^ Unknown Test
  26 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ`
  27 |             .toBuild(nonstrictSettings);
  28 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 30}","  28 |     });
  29 |
> 30 |     it(""should build all lower case Greek letters"", function() {
     |    ^ Unknown Test
  31 |         expect`αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω`.toBuild();
  32 |     });
  33 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 34}","  32 |     });
  33 |
> 34 |     it(""should build math upper case Greek letters"", function() {
     |    ^ Unknown Test
  35 |         expect`ΓΔΘΛΞΠΣΥΦΨΩ`.toBuild();
  36 |     });
  37 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 38}","  36 |     });
  37 |
> 38 |     it(""should build Cyrillic inside \\text{}"", function() {
     |    ^ Unknown Test
  39 |         expect`\text{БГДЖЗЙЛФЦШЫЮЯ}`.toBuild();
  40 |     });
  41 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 42}","  40 |     });
  41 |
> 42 |     it(""should build Cyrillic outside \\text{}"", function() {
     |    ^ Unknown Test
  43 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.toBuild(nonstrictSettings);
  44 |     });
  45 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 46}","  44 |     });
  45 |
> 46 |     it(""should not parse Cyrillic outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  47 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.not.toParse(strictSettings);
  48 |     });
  49 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 50}","  48 |     });
  49 |
> 50 |     it(""should build CJK inside \\text{}"", function() {
     |    ^ Unknown Test
  51 |         expect`\text{私はバナナです}`.toBuild();
  52 |         expect`\text{여보세요}`.toBuild();
  53 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 55}","  53 |     });
  54 |
> 55 |     it(""should build CJK outside \\text{}"", function() {
     |    ^ Unknown Test
  56 |         expect`私はバナナです`.toBuild(nonstrictSettings);
  57 |         expect`여보세요`.toBuild(nonstrictSettings);
  58 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 60}","  58 |     });
  59 |
> 60 |     it(""should not parse CJK outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  61 |         expect`私はバナナです。`.not.toParse(strictSettings);
  62 |         expect`여보세요`.not.toParse(strictSettings);
  63 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 65}","  63 |     });
  64 |
> 65 |     it(""should build Devanagari inside \\text{}"", function() {
     |    ^ Unknown Test
  66 |         expect`\text{नमस्ते}`.toBuild();
  67 |     });
  68 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 69}","  67 |     });
  68 |
> 69 |     it(""should build Devanagari outside \\text{}"", function() {
     |    ^ Unknown Test
  70 |         expect`नमस्ते`.toBuild(nonstrictSettings);
  71 |     });
  72 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 73}","  71 |     });
  72 |
> 73 |     it(""should not parse Devanagari outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  74 |         expect`नमस्ते`.not.toParse(strictSettings);
  75 |     });
  76 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 77}","  75 |     });
  76 |
> 77 |     it(""should build Georgian inside \\text{}"", function() {
     |    ^ Unknown Test
  78 |         expect`\text{გამარჯობა}`.toBuild();
  79 |     });
  80 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 81}","  79 |     });
  80 |
> 81 |     it(""should build Georgian outside \\text{}"", function() {
     |    ^ Unknown Test
  82 |         expect`გამარჯობა`.toBuild(nonstrictSettings);
  83 |     });
  84 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 85}","  83 |     });
  84 |
> 85 |     it(""should not parse Georgian outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  86 |         expect`გამარჯობა`.not.toParse(strictSettings);
  87 |     });
  88 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 89}","  87 |     });
  88 |
> 89 |     it(""should build Armenian both inside and outside \\text{}"", function() {
     |    ^ Unknown Test
  90 |         expect`ԱԲԳաբգ`.toBuild(nonstrictSettings);
  91 |         expect`\text{ԱԲԳաբգ}`.toBuild(nonstrictSettings);
  92 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 94}","  92 |     });
  93 |
> 94 |     it(""should build extended Latin characters inside \\text{}"", function() {
     |    ^ Unknown Test
  95 |         expect`\text{ěščřžůřťďňőİı}`.toBuild();
  96 |     });
  97 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 98}","   96 |     });
   97 |
>  98 |     it(""should not parse extended Latin outside \\text{} with strict"", function() {
      |    ^ Unknown Test
   99 |         expect`ěščřžůřťďňőİı`.not.toParse(strictSettings);
  100 |     });
  101 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 102}","  100 |     });
  101 |
> 102 |     it(""should not allow emoji in strict mode"", function() {
      |    ^ Unknown Test
  103 |         expect`✌`.not.toParse(strictSettings);
  104 |         expect`\text{✌}`.not.toParse(strictSettings);
  105 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 113}","  111 |     });
  112 |
> 113 |     it(""should allow emoji outside strict mode"", function() {
      |    ^ Unknown Test
  114 |         expect`✌`.toWarn();
  115 |         expect`\text{✌}`.toWarn();
  116 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 4, 'column': 4, 'index': 98}","  2 |
  3 | describe(""Screenshotter item"", function() {
> 4 |     for (const key in data) {
    |    ^ Conditional Test Logic
  5 |         if (data.hasOwnProperty(key)) {
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 5, 'column': 8, 'index': 132}","  3 | describe(""Screenshotter item"", function() {
  4 |     for (const key in data) {
> 5 |         if (data.hasOwnProperty(key)) {
    |        ^ Conditional Test Logic
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {
  8 |                 expect(item.tex).toBuild({",,
/home/gabriel/Desktop/research/projects/katex/test/mathml-spec.js,Conditional Test Logic,"{'line': 9, 'column': 4, 'index': 300}","   7 | const getMathML = function(expr, settings = new Settings()) {
   8 |     let startStyle = Style.TEXT;
>  9 |     if (settings.displayMode) {
     |    ^ Conditional Test Logic
  10 |         startStyle = Style.DISPLAY;
  11 |     }
  12 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 46, 'column': 8, 'index': 1257}","  44 |         const parse = getParsed(expression);
  45 |
> 46 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  47 |             const group = parse[i];
  48 |             expect(group.type).toMatch(""ord"");
  49 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 69, 'column': 8, 'index': 1848}","  67 |         const parse = getParsed(expression);
  68 |
> 69 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  70 |             const group = parse[i];
  71 |             expect(group.type).toEqual(""atom"");
  72 |             expect(group.family).toEqual(""bin"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 89, 'column': 8, 'index': 2443}","  87 |         const parse = getParsed(expression);
  88 |
> 89 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  90 |             let group = parse[i];
  91 |             if (group.type === ""htmlmathml"") {
  92 |                 expect(group.html).toHaveLength(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 91, 'column': 12, 'index': 2530}","  89 |         for (let i = 0; i < parse.length; i++) {
  90 |             let group = parse[i];
> 91 |             if (group.type === ""htmlmathml"") {
     |            ^ Conditional Test Logic
  92 |                 expect(group.html).toHaveLength(1);
  93 |                 group = group.html[0];
  94 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 95, 'column': 12, 'index': 2682}","  93 |                 group = group.html[0];
  94 |             }
> 95 |             if (group.type === ""mclass"") {
     |            ^ Conditional Test Logic
  96 |                 expect(group.mclass).toEqual(""mrel"");
  97 |             } else {
  98 |                 expect(group.type).toEqual(""atom"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 128, 'column': 8, 'index': 3698}","  126 |         const parse = getParsed(expression);
  127 |
> 128 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  129 |             const group = parse[i];
  130 |             expect(group.type).toEqual(""atom"");
  131 |             expect(group.family).toEqual(""punct"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 146, 'column': 8, 'index': 4159}","  144 |         const parse = getParsed(expression);
  145 |
> 146 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  147 |             const group = parse[i];
  148 |             expect(group.type).toEqual(""atom"");
  149 |             expect(group.family).toEqual(""open"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 164, 'column': 8, 'index': 4622}","  162 |         const parse = getParsed(expression);
  163 |
> 164 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  165 |             const group = parse[i];
  166 |             expect(group.type).toEqual(""atom"");
  167 |             expect(group.family).toEqual(""close"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1265, 'column': 4, 'index': 40600}","  1263 |     ];
  1264 |
> 1265 |     for (const [actual, expected] of cases) {
       |    ^ Conditional Test Logic
  1266 |         it(`should build ""${actual}"" like ""${expected}""`, () => {
  1267 |             expect(actual).toBuildLike(expected);
  1268 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1414, 'column': 8, 'index': 45846}","  1412 |         ];
  1413 |
> 1414 |         for (let i = 0; i < missingGroups.length; i++) {
       |        ^ Conditional Test Logic
  1415 |             expect(missingGroups[i]).not.toParse();
  1416 |         }
  1417 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1441, 'column': 8, 'index': 46807}","  1439 |         ];
  1440 |
> 1441 |         for (let i = 0; i < badArguments.length; i++) {
       |        ^ Conditional Test Logic
  1442 |             expect(badArguments[i]).not.toParse();
  1443 |         }
  1444 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1459, 'column': 8, 'index': 47373}","  1457 |         ];
  1458 |
> 1459 |         for (let i = 0; i < goodArguments.length; i++) {
       |        ^ Conditional Test Logic
  1460 |             expect(goodArguments[i]).toParse();
  1461 |         }
  1462 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1472, 'column': 8, 'index': 47729}","  1470 |         ];
  1471 |
> 1472 |         for (let i = 0; i < badSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1473 |             expect(badSupSubscripts[i]).not.toParse();
  1474 |         }
  1475 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1485, 'column': 8, 'index': 48108}","  1483 |         ];
  1484 |
> 1485 |         for (let i = 0; i < goodSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1486 |             expect(goodSupSubscripts[i]).toParse();
  1487 |         }
  1488 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1523, 'column': 8, 'index': 49340}","  1521 |         ];
  1522 |
> 1523 |         for (let i = 0; i < badLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1524 |             expect(badLeftArguments[i]).not.toParse();
  1525 |         }
  1526 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1537, 'column': 8, 'index': 49817}","  1535 |         ];
  1536 |
> 1537 |         for (let i = 0; i < goodLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1538 |             expect(goodLeftArguments[i]).toParse();
  1539 |         }
  1540 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 2175, 'column': 8, 'index': 77767}","  2173 |
  2174 |     it(""should throw Error when HTML attribute name is invalid"", function() {
> 2175 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
       |        ^ Conditional Test Logic
  2176 |             try {
  2177 |                 katex.renderToString(
  2178 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 3838, 'column': 4, 'index': 141704}","  3836 | describe(""leqno and fleqn rendering options"", () => {
  3837 |     const expr = r`\tag{hi}x+y`;
> 3838 |     for (const opt of [""leqno"", ""fleqn""]) {
       |    ^ Conditional Test Logic
  3839 |         it(`should not add ${opt} class by default`, () => {
  3840 |             const settings = new Settings({displayMode: true});
  3841 |             const built = katex.__renderToDomTree(expr, settings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4243, 'column': 8, 'index': 158644}","  4241 |         // add eastern arabic numbers to symbols table
  4242 |         // these symbols are ۰۱۲۳۴۵۶۷۸۹ and ٠١٢٣٤٥٦٧٨٩
> 4243 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4244 |             const persianNum = String.fromCharCode(0x0660 + number);
  4245 |             katex.__defineSymbol(
  4246 |                 ""math"", fontName, ""textord"", persianNum, persianNum);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4262, 'column': 8, 'index': 159590}","  4260 |         const mockMetrics = {};
  4261 |         // mock font metrics for the symbols that we added previously
> 4262 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4263 |             mockMetrics[0x0660 + number] = [-0.00244140625, 0.6875, 0, 0];
  4264 |             mockMetrics[0x06F0 + number] = [-0.00244140625, 0.6875, 0, 0];
  4265 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 577, 'column': 8, 'index': 17266}","  575 |         parse = getParsed(simpleOver)[0];
  576 |
> 577 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  578 |         expect(parse.numer).toBeDefined();
  579 |         expect(parse.denom).toBeDefined();
  580 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 577, 'column': 8, 'index': 17266}","  575 |         parse = getParsed(simpleOver)[0];
  576 |
> 577 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  578 |         expect(parse.numer).toBeDefined();
  579 |         expect(parse.denom).toBeDefined();
  580 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 578, 'column': 8, 'index': 17313}","  576 |
  577 |         expect(parse.type).toEqual(""genfrac"");
> 578 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  579 |         expect(parse.denom).toBeDefined();
  580 |
  581 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 578, 'column': 8, 'index': 17313}","  576 |
  577 |         expect(parse.type).toEqual(""genfrac"");
> 578 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  579 |         expect(parse.denom).toBeDefined();
  580 |
  581 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 579, 'column': 8, 'index': 17356}","  577 |         expect(parse.type).toEqual(""genfrac"");
  578 |         expect(parse.numer).toBeDefined();
> 579 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  580 |
  581 |         parse = getParsed(complexOver)[0];
  582 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 579, 'column': 8, 'index': 17356}","  577 |         expect(parse.type).toEqual(""genfrac"");
  578 |         expect(parse.numer).toBeDefined();
> 579 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  580 |
  581 |         parse = getParsed(complexOver)[0];
  582 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 583, 'column': 8, 'index': 17444}","  581 |         parse = getParsed(complexOver)[0];
  582 |
> 583 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  584 |         expect(parse.numer).toBeDefined();
  585 |         expect(parse.denom).toBeDefined();
  586 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 583, 'column': 8, 'index': 17444}","  581 |         parse = getParsed(complexOver)[0];
  582 |
> 583 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  584 |         expect(parse.numer).toBeDefined();
  585 |         expect(parse.denom).toBeDefined();
  586 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 584, 'column': 8, 'index': 17491}","  582 |
  583 |         expect(parse.type).toEqual(""genfrac"");
> 584 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  585 |         expect(parse.denom).toBeDefined();
  586 |
  587 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 584, 'column': 8, 'index': 17491}","  582 |
  583 |         expect(parse.type).toEqual(""genfrac"");
> 584 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  585 |         expect(parse.denom).toBeDefined();
  586 |
  587 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 585, 'column': 8, 'index': 17534}","  583 |         expect(parse.type).toEqual(""genfrac"");
  584 |         expect(parse.numer).toBeDefined();
> 585 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  586 |
  587 |         const parseBraceFrac = getParsed(braceFrac)[0];
  588 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 585, 'column': 8, 'index': 17534}","  583 |         expect(parse.type).toEqual(""genfrac"");
  584 |         expect(parse.numer).toBeDefined();
> 585 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  586 |
  587 |         const parseBraceFrac = getParsed(braceFrac)[0];
  588 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1642, 'column': 8, 'index': 53586}","  1640 |         expect(bbBody).toHaveLength(3);
  1641 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1642 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1643 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1644 |         expect(bbBody[2].type).toEqual(""font"");
  1645 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1642, 'column': 8, 'index': 53586}","  1640 |         expect(bbBody).toHaveLength(3);
  1641 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1642 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1643 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1644 |         expect(bbBody[2].type).toEqual(""font"");
  1645 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1644, 'column': 8, 'index': 53684}","  1642 |         expect(bbBody[2].type).toEqual(""font"");
  1643 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1644 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1645 |     });
  1646 |
  1647 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1644, 'column': 8, 'index': 53684}","  1642 |         expect(bbBody[2].type).toEqual(""font"");
  1643 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1644 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1645 |     });
  1646 |
  1647 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1837, 'column': 8, 'index': 61239}","  1835 |     it(""should render \\text{R\\textit{S}T} with the correct fonts"", function() {
  1836 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
> 1837 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
       |        ^ Duplicate Assert
  1838 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
  1839 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1840 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1838, 'column': 8, 'index': 61306}","  1836 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
  1837 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
> 1838 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
       |        ^ Duplicate Assert
  1839 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1840 |     });
  1841 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1839, 'column': 8, 'index': 61380}","  1837 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
  1838 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
> 1839 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
       |        ^ Duplicate Assert
  1840 |     });
  1841 |
  1842 |     it(""should render \\textbf{R } with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1863, 'column': 8, 'index': 62571}","  1861 |     it(""should render \\textsf{\\textit{R}G\\textbf{B}} with the correct font"", function() {
  1862 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
> 1863 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
       |        ^ Duplicate Assert
  1864 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
  1865 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1866 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1864, 'column': 8, 'index': 62652}","  1862 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
  1863 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
> 1864 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
       |        ^ Duplicate Assert
  1865 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1866 |     });
  1867 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1865, 'column': 8, 'index': 62726}","  1863 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
  1864 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
> 1865 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
       |        ^ Duplicate Assert
  1866 |     });
  1867 |
  1868 |     it(""should render \\textsf{\\textbf{$\\mathrm{A}$}} with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1886, 'column': 8, 'index': 63801}","  1884 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1885 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1886 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1887 |
  1888 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1889 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1886, 'column': 8, 'index': 63801}","  1884 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1885 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1886 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1887 |
  1888 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1889 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1890, 'column': 8, 'index': 63991}","  1888 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1889 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1890 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1891 |     });
  1892 |
  1893 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1890, 'column': 8, 'index': 63991}","  1888 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1889 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1890 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1891 |     });
  1892 |
  1893 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2083, 'column': 8, 'index': 74264}","  2081 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2082 |             ""</mstyle>"";
> 2083 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2084 |
  2085 |         // reverse the order of the commands
  2086 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2083, 'column': 8, 'index': 74264}","  2081 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2082 |             ""</mstyle>"";
> 2083 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2084 |
  2085 |         // reverse the order of the commands
  2086 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2092, 'column': 8, 'index': 74625}","  2090 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2091 |             ""</mstyle>"";
> 2092 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2093 |     });
  2094 |
  2095 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2092, 'column': 8, 'index': 74625}","  2090 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2091 |             ""</mstyle>"";
> 2092 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2093 |     });
  2094 |
  2095 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2106, 'column': 8, 'index': 75186}","  2104 |         const tree = getParsed(tex);
  2105 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
> 2106 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
       |        ^ Duplicate Assert
  2107 |         expect(markup).toContain(
  2108 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2109 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2107, 'column': 8, 'index': 75257}","  2105 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2106 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
> 2107 |         expect(markup).toContain(
       |        ^ Duplicate Assert
  2108 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2109 |     });
  2110 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2204, 'column': 8, 'index': 78820}","  2202 |         const built = getBuilt`+ x`;
  2203 |
> 2204 |         expect(built[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2205 |         expect(built[0].classes).not.toContain(""mbin"");
  2206 |     });
  2207 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2205, 'column': 8, 'index': 78872}","  2203 |
  2204 |         expect(built[0].classes).toContain(""mord"");
> 2205 |         expect(built[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2206 |     });
  2207 |
  2208 |     it(""should create ords after some other objects"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2239, 'column': 8, 'index': 80388}","  2237 |         const markup = katex.renderToString(r`\sigma^2`);
  2238 |         expect(markup.indexOf(""<span"")).toBe(0);
> 2239 |         expect(markup).toContain(""\u03c3"");  // sigma
       |        ^ Duplicate Assert
  2240 |         expect(markup).toContain(""margin-right"");
  2241 |         expect(markup).not.toContain(""marginRight"");
  2242 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2240, 'column': 8, 'index': 80442}","  2238 |         expect(markup.indexOf(""<span"")).toBe(0);
  2239 |         expect(markup).toContain(""\u03c3"");  // sigma
> 2240 |         expect(markup).toContain(""margin-right"");
       |        ^ Duplicate Assert
  2241 |         expect(markup).not.toContain(""marginRight"");
  2242 |     });
  2243 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2241, 'column': 8, 'index': 80492}","  2239 |         expect(markup).toContain(""\u03c3"");  // sigma
  2240 |         expect(markup).toContain(""margin-right"");
> 2241 |         expect(markup).not.toContain(""marginRight"");
       |        ^ Duplicate Assert
  2242 |     });
  2243 |
  2244 |     it(""generates both MathML and HTML"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2247, 'column': 8, 'index': 80659}","  2245 |         const markup = katex.renderToString(""a"");
  2246 |
> 2247 |         expect(markup).toContain(""<span"");
       |        ^ Duplicate Assert
  2248 |         expect(markup).toContain(""<math"");
  2249 |     });
  2250 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2248, 'column': 8, 'index': 80702}","  2246 |
  2247 |         expect(markup).toContain(""<span"");
> 2248 |         expect(markup).toContain(""<math"");
       |        ^ Duplicate Assert
  2249 |     });
  2250 | });
  2251 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2300, 'column': 8, 'index': 82165}","  2298 |     it(""should produce mords"", function() {
  2299 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
> 2300 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2301 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2302 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2303 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2301, 'column': 8, 'index': 82228}","  2299 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
  2300 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
> 2301 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2302 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2303 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2304 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2302, 'column': 8, 'index': 82295}","  2300 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
  2301 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
> 2302 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2303 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2304 |     });
  2305 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2303, 'column': 8, 'index': 82360}","  2301 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2302 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
> 2303 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2304 |     });
  2305 | });
  2306 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2318, 'column': 8, 'index': 82877}","  2316 |     it(""should produce mords"", function() {
  2317 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
> 2318 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2319 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2320 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2321 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2319, 'column': 8, 'index': 82944}","  2317 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
  2318 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
> 2319 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2320 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2321 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2322 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2320, 'column': 8, 'index': 83015}","  2318 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
  2319 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
> 2320 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2321 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2322 |     });
  2323 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2321, 'column': 8, 'index': 83084}","  2319 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2320 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
> 2321 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2322 |     });
  2323 | });
  2324 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2335, 'column': 8, 'index': 83602}","  2333 |     it(""should produce mords"", function() {
  2334 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
> 2335 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2336 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2337 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2338 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2336, 'column': 8, 'index': 83676}","  2334 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
  2335 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
> 2336 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2337 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2338 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2339 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2337, 'column': 8, 'index': 83754}","  2335 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
  2336 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
> 2337 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2338 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2339 |     });
  2340 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2338, 'column': 8, 'index': 83830}","  2336 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2337 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
> 2338 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2339 |     });
  2340 | });
  2341 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2382, 'column': 8, 'index': 85319}","  2380 |     it(""should produce mords"", function() {
  2381 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
> 2382 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2383 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2384 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2385 |         expect(getBuilt`\underrightarrow )^2`[0].classes)",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2383, 'column': 8, 'index': 85394}","  2381 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
  2382 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
> 2383 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2384 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2385 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2386 |             .not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2384, 'column': 8, 'index': 85473}","  2382 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
  2383 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
> 2384 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2385 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2386 |             .not.toContain(""mclose"");
  2387 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2385, 'column': 8, 'index': 85550}","  2383 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2384 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
> 2385 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
       |        ^ Duplicate Assert
  2386 |             .not.toContain(""mclose"");
  2387 |     });
  2388 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2424, 'column': 8, 'index': 86853}","  2422 |         expect(getBuilt`\xrightarrow x`[0].classes).toContain(""mrel"");
  2423 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
> 2424 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2425 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2426 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2427 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2425, 'column': 8, 'index': 86924}","  2423 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
  2424 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
> 2425 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2426 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2427 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2428 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2426, 'column': 8, 'index': 86999}","  2424 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
  2425 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
> 2426 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2427 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2428 |     });
  2429 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2427, 'column': 8, 'index': 87072}","  2425 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2426 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
> 2427 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2428 |     });
  2429 | });
  2430 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2465, 'column': 8, 'index': 88317}","  2463 |         expect(getBuilt`\overbrace x`[0].classes).toContain(""mord"");
  2464 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
> 2465 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2466 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2467 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2468 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2466, 'column': 8, 'index': 88386}","  2464 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
  2465 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
> 2466 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2467 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2468 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2469 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2467, 'column': 8, 'index': 88459}","  2465 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
  2466 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
> 2467 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2468 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2469 |     });
  2470 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2468, 'column': 8, 'index': 88530}","  2466 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2467 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
> 2468 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2469 |     });
  2470 | });
  2471 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2497, 'column': 8, 'index': 89366}","  2495 |     it(""should produce mords"", function() {
  2496 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
> 2497 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2498 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2499 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2500 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2498, 'column': 8, 'index': 89431}","  2496 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
  2497 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
> 2498 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2499 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2500 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2501 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2499, 'column': 8, 'index': 89500}","  2497 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
  2498 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
> 2499 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2500 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2501 |     });
  2502 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2500, 'column': 8, 'index': 89567}","  2498 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2499 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
> 2500 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2501 |     });
  2502 | });
  2503 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2617, 'column': 8, 'index': 93356}","  2615 |     it(""should produce mords"", function() {
  2616 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
> 2617 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2618 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2619 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2620 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2618, 'column': 8, 'index': 93422}","  2616 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
  2617 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
> 2618 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2619 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2620 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2621 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2619, 'column': 8, 'index': 93492}","  2617 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
  2618 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
> 2619 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2620 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2621 |     });
  2622 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2620, 'column': 8, 'index': 93560}","  2618 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2619 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
> 2620 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2621 |     });
  2622 | });
  2623 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3468, 'column': 8, 'index': 126700}","  3466 |     it(""\\char produces literal characters"", () => {
  3467 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3468 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Duplicate Assert
  3469 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3470 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3471 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3469, 'column': 8, 'index': 126751}","  3467 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3468 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3469 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Duplicate Assert
  3470 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3471 |         expect`\char`.not.toParse();
  3472 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3470, 'column': 8, 'index': 126803}","  3468 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3469 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3470 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Duplicate Assert
  3471 |         expect`\char`.not.toParse();
  3472 |         expect(""\\char`"").not.toParse();
  3473 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4102, 'column': 8, 'index': 152925}","  4100 |         const example = exp32 + r`\a{1}`;
  4101 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
> 4102 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4103 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4104 |     });
  4105 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4103, 'column': 8, 'index': 152992}","  4101 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
  4102 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4103 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4104 |     });
  4105 |
  4106 |     it(""should count correctly with Unicode sub/superscripts"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4109, 'column': 8, 'index': 153261}","  4107 |         const example = exp32 + r`\def+{\a{1}}x⁺x⁺x⁺x⁺`;
  4108 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
> 4109 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4110 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4111 |     });
  4112 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4110, 'column': 8, 'index': 153328}","  4108 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
  4109 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4110 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4111 |     });
  4112 | });
  4113 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4152, 'column': 8, 'index': 154975}","  4150 |         // Ensure newlines appear outside base spans (because, in this regexp,
  4151 |         // base span occurs immediately after each newline span).
> 4152 |         expect(markup).toMatch(
       |        ^ Duplicate Assert
  4153 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
  4154 |         expect(markup).toMatchSnapshot();
  4155 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4154, 'column': 8, 'index': 155115}","  4152 |         expect(markup).toMatch(
  4153 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
> 4154 |         expect(markup).toMatchSnapshot();
       |        ^ Duplicate Assert
  4155 |     });
  4156 | });
  4157 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 512, 'column': 27, 'index': 15151}","  510 |
  511 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 512 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Eager Test
  513 |
  514 |         expect(dfracParse.type).toEqual(""genfrac"");
  515 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 518, 'column': 27, 'index': 15359}","  516 |         expect(dfracParse.denom).toBeDefined();
  517 |
> 518 |         const tfracParse = getParsed(tfracExpression)[0];
      |                           ^ Eager Test
  519 |
  520 |         expect(tfracParse.type).toEqual(""genfrac"");
  521 |         expect(tfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 524, 'column': 27, 'index': 15567}","  522 |         expect(tfracParse.denom).toBeDefined();
  523 |
> 524 |         const cfracParse = getParsed(cfracExpression)[0];
      |                           ^ Eager Test
  525 |
  526 |         expect(cfracParse.type).toEqual(""genfrac"");
  527 |         expect(cfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 530, 'column': 29, 'index': 15777}","  528 |         expect(cfracParse.denom).toBeDefined();
  529 |
> 530 |         const genfracParse = getParsed(genfrac1)[0];
      |                             ^ Eager Test
  531 |
  532 |         expect(genfracParse.type).toEqual(""genfrac"");
  533 |         expect(genfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 575, 'column': 16, 'index': 17231}","  573 |         let parse;
  574 |
> 575 |         parse = getParsed(simpleOver)[0];
      |                ^ Eager Test
  576 |
  577 |         expect(parse.type).toEqual(""genfrac"");
  578 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 581, 'column': 16, 'index': 17408}","  579 |         expect(parse.denom).toBeDefined();
  580 |
> 581 |         parse = getParsed(complexOver)[0];
      |                ^ Eager Test
  582 |
  583 |         expect(parse.type).toEqual(""genfrac"");
  584 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 587, 'column': 31, 'index': 17601}","  585 |         expect(parse.denom).toBeDefined();
  586 |
> 587 |         const parseBraceFrac = getParsed(braceFrac)[0];
      |                               ^ Eager Test
  588 |
  589 |         expect(parseBraceFrac.type).toEqual(""genfrac"");
  590 |         expect(parseBraceFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 595, 'column': 31, 'index': 17932}","  593 |         expect(parseBraceFrac.rightDelim).toBeDefined();
  594 |
> 595 |         const parseBrackFrac = getParsed(brackFrac)[0];
      |                               ^ Eager Test
  596 |
  597 |         expect(parseBrackFrac.type).toEqual(""genfrac"");
  598 |         expect(parseBrackFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 872, 'column': 23, 'index': 27893}","  870 |
  871 |     it(""should correctly extract the custom color"", function() {
> 872 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Eager Test
  873 |         const parse2 = getParsed(customColorExpression2)[0];
  874 |         const parse3 = getParsed(customColorExpression3)[0];
  875 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 873, 'column': 23, 'index': 27954}","  871 |     it(""should correctly extract the custom color"", function() {
  872 |         const parse1 = getParsed(customColorExpression1)[0];
> 873 |         const parse2 = getParsed(customColorExpression2)[0];
      |                       ^ Eager Test
  874 |         const parse3 = getParsed(customColorExpression3)[0];
  875 |
  876 |         expect(parse1.color).toEqual(""#fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 874, 'column': 23, 'index': 28015}","  872 |         const parse1 = getParsed(customColorExpression1)[0];
  873 |         const parse2 = getParsed(customColorExpression2)[0];
> 874 |         const parse3 = getParsed(customColorExpression3)[0];
      |                       ^ Eager Test
  875 |
  876 |         expect(parse1.color).toEqual(""#fA6"");
  877 |         expect(parse2.color).toEqual(""#fA6fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 972, 'column': 26, 'index': 30965}","  970 |
  971 |     it(""should produce the correct direction delimiter"", function() {
> 972 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Eager Test
  973 |         const rightParse = getParsed(bigDelim)[0];
  974 |
  975 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 973, 'column': 27, 'index': 31019}","  971 |     it(""should produce the correct direction delimiter"", function() {
  972 |         const leftParse = getParsed(normalDelim)[0];
> 973 |         const rightParse = getParsed(bigDelim)[0];
      |                           ^ Eager Test
  974 |
  975 |         expect(leftParse.mclass).toEqual(""mopen"");
  976 |         expect(rightParse.mclass).toEqual(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 980, 'column': 27, 'index': 31247}","  978 |
  979 |     it(""should parse the correct size delimiter"", function() {
> 980 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Eager Test
  981 |         const bigParse = getParsed(bigDelim)[0];
  982 |
  983 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 981, 'column': 25, 'index': 31299}","  979 |     it(""should parse the correct size delimiter"", function() {
  980 |         const smallParse = getParsed(normalDelim)[0];
> 981 |         const bigParse = getParsed(bigDelim)[0];
      |                         ^ Eager Test
  982 |
  983 |         expect(smallParse.size).toEqual(1);
  984 |         expect(bigParse.size).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1061, 'column': 24, 'index': 33665}","  1059 |
  1060 |     it(""should list the correct units"", function() {
> 1061 |         const emParse = getParsed(emRule)[0];
       |                        ^ Eager Test
  1062 |         const exParse = getParsed(exRule)[0];
  1063 |
  1064 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1062, 'column': 24, 'index': 33711}","  1060 |     it(""should list the correct units"", function() {
  1061 |         const emParse = getParsed(emRule)[0];
> 1062 |         const exParse = getParsed(exRule)[0];
       |                        ^ Eager Test
  1063 |
  1064 |         expect(emParse.width.unit).toEqual(""em"");
  1065 |         expect(emParse.height.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1099, 'column': 24, 'index': 34881}","  1097 |
  1098 |     it(""should list the correct units"", function() {
> 1099 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1100 |         const exParse = getParsed(exKern)[0];
  1101 |         const muParse = getParsed(muKern)[0];
  1102 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1100, 'column': 24, 'index': 34927}","  1098 |     it(""should list the correct units"", function() {
  1099 |         const emParse = getParsed(emKern)[0];
> 1100 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1101 |         const muParse = getParsed(muKern)[0];
  1102 |         const abParse = getParsed(abKern)[1];
  1103 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1101, 'column': 24, 'index': 34973}","  1099 |         const emParse = getParsed(emKern)[0];
  1100 |         const exParse = getParsed(exKern)[0];
> 1101 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1102 |         const abParse = getParsed(abKern)[1];
  1103 |
  1104 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1102, 'column': 24, 'index': 35019}","  1100 |         const exParse = getParsed(exKern)[0];
  1101 |         const muParse = getParsed(muKern)[0];
> 1102 |         const abParse = getParsed(abKern)[1];
       |                        ^ Eager Test
  1103 |
  1104 |         expect(emParse.dimension.unit).toEqual(""em"");
  1105 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1137, 'column': 24, 'index': 36164}","  1135 |
  1136 |     it(""should list the correct units"", function() {
> 1137 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1138 |         const exParse = getParsed(exKern)[0];
  1139 |         const muParse = getParsed(muKern)[0];
  1140 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1138, 'column': 24, 'index': 36210}","  1136 |     it(""should list the correct units"", function() {
  1137 |         const emParse = getParsed(emKern)[0];
> 1138 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1139 |         const muParse = getParsed(muKern)[0];
  1140 |         const abParse1 = getParsed(abKern1)[1];
  1141 |         const abParse2 = getParsed(abKern2)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1139, 'column': 24, 'index': 36256}","  1137 |         const emParse = getParsed(emKern)[0];
  1138 |         const exParse = getParsed(exKern)[0];
> 1139 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1140 |         const abParse1 = getParsed(abKern1)[1];
  1141 |         const abParse2 = getParsed(abKern2)[1];
  1142 |         const abParse3 = getParsed(abKern3)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1140, 'column': 25, 'index': 36303}","  1138 |         const exParse = getParsed(exKern)[0];
  1139 |         const muParse = getParsed(muKern)[0];
> 1140 |         const abParse1 = getParsed(abKern1)[1];
       |                         ^ Eager Test
  1141 |         const abParse2 = getParsed(abKern2)[1];
  1142 |         const abParse3 = getParsed(abKern3)[1];
  1143 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1141, 'column': 25, 'index': 36351}","  1139 |         const muParse = getParsed(muKern)[0];
  1140 |         const abParse1 = getParsed(abKern1)[1];
> 1141 |         const abParse2 = getParsed(abKern2)[1];
       |                         ^ Eager Test
  1142 |         const abParse3 = getParsed(abKern3)[1];
  1143 |
  1144 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1142, 'column': 25, 'index': 36399}","  1140 |         const abParse1 = getParsed(abKern1)[1];
  1141 |         const abParse2 = getParsed(abKern2)[1];
> 1142 |         const abParse3 = getParsed(abKern3)[1];
       |                         ^ Eager Test
  1143 |
  1144 |         expect(emParse.dimension.unit).toEqual(""em"");
  1145 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1153, 'column': 25, 'index': 36854}","  1151 |
  1152 |     it(""should parse elements on either side of a kern"", function() {
> 1153 |         const abParse1 = getParsed(abKern1);
       |                         ^ Eager Test
  1154 |         const abParse2 = getParsed(abKern2);
  1155 |         const abParse3 = getParsed(abKern3);
  1156 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1154, 'column': 25, 'index': 36899}","  1152 |     it(""should parse elements on either side of a kern"", function() {
  1153 |         const abParse1 = getParsed(abKern1);
> 1154 |         const abParse2 = getParsed(abKern2);
       |                         ^ Eager Test
  1155 |         const abParse3 = getParsed(abKern3);
  1156 |
  1157 |         expect(abParse1).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1155, 'column': 25, 'index': 36944}","  1153 |         const abParse1 = getParsed(abKern1);
  1154 |         const abParse2 = getParsed(abKern2);
> 1155 |         const abParse3 = getParsed(abKern3);
       |                         ^ Eager Test
  1156 |
  1157 |         expect(abParse1).toHaveLength(3);
  1158 |         expect(abParse1[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2078, 'column': 19, 'index': 74035}","  2076 |     it(""should render a combination of font and color changes"", function() {
  2077 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2078 |         let tree = getParsed(tex);
       |                   ^ Eager Test
  2079 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2080 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2081 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2087, 'column': 15, 'index': 74404}","  2085 |         // reverse the order of the commands
  2086 |         tex = r`\mathbb{\textcolor{blue}{R}}`;
> 2087 |         tree = getParsed(tex);
       |               ^ Eager Test
  2088 |         markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2089 |         node = ""<mstyle mathcolor=\""blue\"">"" +
  2090 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2995, 'column': 24, 'index': 108259}","  2993 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2994 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2995 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  2996 |         expect(parsed1.href).toBe(url);
  2997 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2998 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2997, 'column': 24, 'index': 108379}","  2995 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  2996 |         expect(parsed1.href).toBe(url);
> 2997 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  2998 |         expect(parsed2.href).toBe(url);
  2999 |     });
  3000 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3003, 'column': 24, 'index': 108609}","  3001 |     it(""should allow balanced braces in url"", function() {
  3002 |         const url = ""http://example.org/{{}t{oo}}"";
> 3003 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3004 |         expect(parsed1.href).toBe(url);
  3005 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3006 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3005, 'column': 24, 'index': 108729}","  3003 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  3004 |         expect(parsed1.href).toBe(url);
> 3005 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3006 |         expect(parsed2.href).toBe(url);
  3007 |     });
  3008 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3019, 'column': 24, 'index': 109383}","  3017 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3018 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3019 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3020 |         expect(parsed1.href).toBe(url);
  3021 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3022 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3021, 'column': 24, 'index': 109505}","  3019 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
  3020 |         expect(parsed1.href).toBe(url);
> 3021 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
       |                        ^ Eager Test
  3022 |         expect(parsed2.href).toBe(url);
  3023 |     });
  3024 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2176, 'column': 12, 'index': 77846}","  2174 |     it(""should throw Error when HTML attribute name is invalid"", function() {
  2175 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
> 2176 |             try {
       |            ^ Exception Handling
  2177 |                 katex.renderToString(
  2178 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);
  2179 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2741, 'column': 8, 'index': 97477}","  2739 | describe(""A parser error"", function() {
  2740 |     it(""should report the position of an error"", function() {
> 2741 |         try {
       |        ^ Exception Handling
  2742 |             parseTree(r`\sqrt}`, new Settings());
  2743 |         } catch (e) {
  2744 |             expect(e.position).toEqual(5);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3160, 'column': 8, 'index': 114942}","  3158 | describe(""ParseError properties"", function() {
  3159 |     it(""should contain affected position and length information"", function() {
> 3160 |         try {
       |        ^ Exception Handling
  3161 |             katex.renderToString(""1 + \\fraq{}{}"");
  3162 |
  3163 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3175, 'column': 8, 'index': 115605}","  3173 |
  3174 |     it(""should contain position and length information at end of input"", function() {
> 3175 |         try {
       |        ^ Exception Handling
  3176 |             katex.renderToString(""\\frac{}"");
  3177 |
  3178 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3190, 'column': 8, 'index': 116301}","  3188 |
  3189 |     it(""should contain no position and length information if unavailable"", function() {
> 3190 |         try {
       |        ^ Exception Handling
  3191 |             katex.renderToString(""\\verb|hello\nworld|"");
  3192 |
  3193 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 44, 'column': 22, 'index': 1225}","  42 |
  43 |     it(""should build a list of ords"", function() {
> 44 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  45 |
  46 |         for (let i = 0; i < parse.length; i++) {
  47 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 53, 'column': 22, 'index': 1483}","  51 |
  52 |     it(""should parse the right number of ords"", function() {
> 53 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  54 |
  55 |         expect(parse).toHaveLength(expression.length);
  56 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 67, 'column': 22, 'index': 1816}","  65 |
  66 |     it(""should build a list of bins"", function() {
> 67 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  68 |
  69 |         for (let i = 0; i < parse.length; i++) {
  70 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 87, 'column': 22, 'index': 2411}","  85 |
  86 |     it(""should build a list of rels"", function() {
> 87 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  88 |
  89 |         for (let i = 0; i < parse.length; i++) {
  90 |             let group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 113, 'column': 32, 'index': 3312}","  111 |     it(""should return one group, not a fragment"", function() {
  112 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
> 113 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
      |                                ^ Lazy Test
  114 |         expect(mml.children.length).toEqual(1);
  115 |     });
  116 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 126, 'column': 22, 'index': 3666}","  124 |
  125 |     it(""should build a list of puncts"", function() {
> 126 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  127 |
  128 |         for (let i = 0; i < parse.length; i++) {
  129 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 144, 'column': 22, 'index': 4127}","  142 |
  143 |     it(""should build a list of opens"", function() {
> 144 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  145 |
  146 |         for (let i = 0; i < parse.length; i++) {
  147 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 162, 'column': 22, 'index': 4590}","  160 |
  161 |     it(""should build a list of closes"", function() {
> 162 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  163 |
  164 |         for (let i = 0; i < parse.length; i++) {
  165 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 496, 'column': 22, 'index': 14593}","  494 |
  495 |     it(""should produce a frac"", function() {
> 496 |         const parse = getParsed(expression)[0];
      |                      ^ Lazy Test
  497 |
  498 |         expect(parse.type).toEqual(""genfrac"");
  499 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 512, 'column': 27, 'index': 15151}","  510 |
  511 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 512 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Lazy Test
  513 |
  514 |         expect(dfracParse.type).toEqual(""genfrac"");
  515 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 575, 'column': 16, 'index': 17231}","  573 |         let parse;
  574 |
> 575 |         parse = getParsed(simpleOver)[0];
      |                ^ Lazy Test
  576 |
  577 |         expect(parse.type).toEqual(""genfrac"");
  578 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 605, 'column': 22, 'index': 18340}","  603 |
  604 |     it(""should create a numerator from the atoms before \\over"", function() {
> 605 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  606 |
  607 |         const numer = parse.numer;
  608 |         expect(numer.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 612, 'column': 22, 'index': 18557}","  610 |
  611 |     it(""should create a denominator from the atoms after \\over"", function() {
> 612 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  613 |
  614 |         const denom = parse.denom;
  615 |         expect(denom.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 620, 'column': 22, 'index': 18792}","  618 |     it(""should handle empty numerators"", function() {
  619 |         const emptyNumerator = r`\over x`;
> 620 |         const parse = getParsed(emptyNumerator)[0];
      |                      ^ Lazy Test
  621 |         expect(parse.type).toEqual(""genfrac"");
  622 |         expect(parse.numer).toBeDefined();
  623 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 628, 'column': 22, 'index': 19087}","  626 |     it(""should handle empty denominators"", function() {
  627 |         const emptyDenominator = r`1 \over`;
> 628 |         const parse = getParsed(emptyDenominator)[0];
      |                      ^ Lazy Test
  629 |         expect(parse.type).toEqual(""genfrac"");
  630 |         expect(parse.numer).toBeDefined();
  631 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 636, 'column': 22, 'index': 19412}","  634 |     it(""should handle \\displaystyle correctly"", function() {
  635 |         const displaystyleExpression = r`\displaystyle 1 \over 2`;
> 636 |         const parse = getParsed(displaystyleExpression)[0];
      |                      ^ Lazy Test
  637 |         expect(parse.type).toEqual(""genfrac"");
  638 |         expect(parse.numer.body[0].type).toEqual(""styling"");
  639 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 649, 'column': 22, 'index': 19964}","  647 |     it(""should handle nested factions"", function() {
  648 |         const nestedOverExpression = r`{1 \over 2} \over 3`;
> 649 |         const parse = getParsed(nestedOverExpression)[0];
      |                      ^ Lazy Test
  650 |         expect(parse.type).toEqual(""genfrac"");
  651 |         expect(parse.numer.body[0].type).toEqual(""genfrac"");
  652 |         expect(parse.numer.body[0].numer.body[0].text).toEqual(""1"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 698, 'column': 22, 'index': 21674}","  696 |
  697 |     it(""should produce a sizing node"", function() {
> 698 |         const parse = getParsed(sizeExpression)[0];
      |                      ^ Lazy Test
  699 |
  700 |         expect(parse.type).toEqual(""sizing"");
  701 |         expect(parse.size).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 722, 'column': 22, 'index': 22483}","  720 |
  721 |     it(""should produce a text"", function() {
> 722 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  723 |
  724 |         expect(parse.type).toEqual(""text"");
  725 |         expect(parse.body).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 729, 'column': 22, 'index': 22698}","  727 |
  728 |     it(""should produce textords instead of mathords"", function() {
> 729 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  730 |         const group = parse.body;
  731 |
  732 |         expect(group[0].type).toEqual(""textord"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 752, 'column': 22, 'index': 23361}","  750 |
  751 |     it(""should contract spaces"", function() {
> 752 |         const parse = getParsed(spaceTextExpression)[0];
      |                      ^ Lazy Test
  753 |         const group = parse.body;
  754 |
  755 |         expect(group.length).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 771, 'column': 22, 'index': 24037}","  769 |
  770 |     it(""should ignore a space before the text group"", function() {
> 771 |         const parse = getParsed(leadingSpaceTextExpression)[0];
      |                      ^ Lazy Test
  772 |         // [m, o, o]
  773 |         expect(parse.body).toHaveLength(3);
  774 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 858, 'column': 22, 'index': 27424}","  856 |
  857 |     it(""should build a color node"", function() {
> 858 |         const parse = getParsed(colorExpression)[0];
      |                      ^ Lazy Test
  859 |
  860 |         expect(parse.type).toEqual(""color"");
  861 |         expect(parse.color).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 872, 'column': 23, 'index': 27893}","  870 |
  871 |     it(""should correctly extract the custom color"", function() {
> 872 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Lazy Test
  873 |         const parse2 = getParsed(customColorExpression2)[0];
  874 |         const parse3 = getParsed(customColorExpression3)[0];
  875 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 931, 'column': 22, 'index': 29819}","  929 |
  930 |     it(""should produce spacing in math mode"", function() {
> 931 |         const parse = getParsed(mathTie);
      |                      ^ Lazy Test
  932 |
  933 |         expect(parse[1].type).toEqual(""spacing"");
  934 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 937, 'column': 21, 'index': 29979}","  935 |
  936 |     it(""should produce spacing in text mode"", function() {
> 937 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  938 |         const parse = text.body;
  939 |
  940 |         expect(parse[1].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 944, 'column': 21, 'index': 30184}","  942 |
  943 |     it(""should not contract with spaces in text mode"", function() {
> 944 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  945 |         const parse = text.body;
  946 |
  947 |         expect(parse[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 966, 'column': 22, 'index': 30781}","  964 |
  965 |     it(""should produce a delimsizing"", function() {
> 966 |         const parse = getParsed(normalDelim)[0];
      |                      ^ Lazy Test
  967 |
  968 |         expect(parse.type).toEqual(""delimsizing"");
  969 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 972, 'column': 26, 'index': 30965}","  970 |
  971 |     it(""should produce the correct direction delimiter"", function() {
> 972 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Lazy Test
  973 |         const rightParse = getParsed(bigDelim)[0];
  974 |
  975 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 980, 'column': 27, 'index': 31247}","  978 |
  979 |     it(""should parse the correct size delimiter"", function() {
> 980 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Lazy Test
  981 |         const bigParse = getParsed(bigDelim)[0];
  982 |
  983 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 996, 'column': 22, 'index': 31662}","  994 |
  995 |     it(""should produce an overline"", function() {
> 996 |         const parse = getParsed(overline)[0];
      |                      ^ Lazy Test
  997 |
  998 |         expect(parse.type).toEqual(""overline"");
  999 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1055, 'column': 22, 'index': 33512}","  1053 |
  1054 |     it(""should produce a rule"", function() {
> 1055 |         const parse = getParsed(emRule)[0];
       |                      ^ Lazy Test
  1056 |
  1057 |         expect(parse.type).toEqual(""rule"");
  1058 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1061, 'column': 24, 'index': 33665}","  1059 |
  1060 |     it(""should list the correct units"", function() {
> 1061 |         const emParse = getParsed(emRule)[0];
       |                        ^ Lazy Test
  1062 |         const exParse = getParsed(exRule)[0];
  1063 |
  1064 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1072, 'column': 32, 'index': 34035}","  1070 |
  1071 |     it(""should parse the number correctly"", function() {
> 1072 |         const hardNumberParse = getParsed(hardNumberRule)[0];
       |                                ^ Lazy Test
  1073 |
  1074 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
  1075 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1099, 'column': 24, 'index': 34881}","  1097 |
  1098 |     it(""should list the correct units"", function() {
> 1099 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1100 |         const exParse = getParsed(exKern)[0];
  1101 |         const muParse = getParsed(muKern)[0];
  1102 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1137, 'column': 24, 'index': 36164}","  1135 |
  1136 |     it(""should list the correct units"", function() {
> 1137 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1138 |         const exParse = getParsed(exKern)[0];
  1139 |         const muParse = getParsed(muKern)[0];
  1140 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1153, 'column': 25, 'index': 36854}","  1151 |
  1152 |     it(""should parse elements on either side of a kern"", function() {
> 1153 |         const abParse1 = getParsed(abKern1);
       |                         ^ Lazy Test
  1154 |         const abParse2 = getParsed(abKern2);
  1155 |         const abParse3 = getParsed(abKern3);
  1156 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1184, 'column': 24, 'index': 37929}","  1182 |
  1183 |     it(""should handle whitespace"", function() {
> 1184 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
       |                        ^ Lazy Test
  1185 |
  1186 |         expect(abParse).toHaveLength(3);
  1187 |         expect(abParse[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1202, 'column': 22, 'index': 38496}","  1200 |
  1201 |     it(""should produce a leftright"", function() {
> 1202 |         const parse = getParsed(normalLeftRight)[0];
       |                      ^ Lazy Test
  1203 |
  1204 |         expect(parse.type).toEqual(""leftright"");
  1205 |         expect(parse.left).toEqual(""("");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1379, 'column': 22, 'index': 44861}","  1377 |
  1378 |     it(""should produce sqrts"", function() {
> 1379 |         const parse = getParsed(sqrt)[0];
       |                      ^ Lazy Test
  1380 |
  1381 |         expect(parse.type).toEqual(""sqrt"");
  1382 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1578, 'column': 22, 'index': 51281}","  1576 |     it(""should only change the style within its group"", function() {
  1577 |         const text = r`a b { c d \displaystyle e f } g h`;
> 1578 |         const parse = getParsed(text);
       |                      ^ Lazy Test
  1579 |
  1580 |         const displayNode = parse[2].body[2];
  1581 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2078, 'column': 19, 'index': 74035}","  2076 |     it(""should render a combination of font and color changes"", function() {
  2077 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2078 |         let tree = getParsed(tex);
       |                   ^ Lazy Test
  2079 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2080 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2081 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2097, 'column': 21, 'index': 74776}","  2095 |     it(""should render text as <mtext>"", function() {
  2096 |         const tex = r`\text{for }`;
> 2097 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2098 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2099 |         expect(markup).toContain(""<mtext>for\u00a0</mtext>"");
  2100 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2104, 'column': 21, 'index': 75088}","  2102 |     it(""should render math within text as side-by-side children"", function() {
  2103 |         const tex = r`\text{graph: $y = mx + b$}`;
> 2104 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2105 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2106 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
  2107 |         expect(markup).toContain(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2119, 'column': 15, 'index': 75748}","  2117 |
  2118 |     it(""should produce mords"", function() {
> 2119 |         expect(getBuilt(img, trustSettings)[0].classes).toContain(""mord"");
       |               ^ Lazy Test
  2120 |     });
  2121 |
  2122 |     it(""should not render without trust setting"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2123, 'column': 22, 'index': 75902}","  2121 |
  2122 |     it(""should not render without trust setting"", function() {
> 2123 |         const built = getBuilt(img);
       |                      ^ Lazy Test
  2124 |         expect(built).toMatchSnapshot();
  2125 |     });
  2126 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2128, 'column': 22, 'index': 76045}","  2126 |
  2127 |     it(""should render with trust setting"", function() {
> 2128 |         const built = getBuilt(img, trustSettings);
       |                      ^ Lazy Test
  2129 |         expect(built).toMatchSnapshot();
  2130 |     });
  2131 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2154, 'column': 22, 'index': 76991}","  2152 |
  2153 |     it(""should set HTML attributes"", function() {
> 2154 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2155 |         expect(built[0].attributes.id).toMatch(""bar"");
  2156 |         expect(built[1].classes).toContain(""foo"");
  2157 |         expect(built[2].attributes.style).toMatch(""color: red"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2165, 'column': 22, 'index': 77398}","  2163 |
  2164 |     it(""should not affect spacing"", function() {
> 2165 |         const built = getBuilt(""\\htmlId{a}{x+}y"", trustNonStrictSettings);
       |                      ^ Lazy Test
  2166 |         expect(built).toMatchSnapshot();
  2167 |     });
  2168 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2170, 'column': 22, 'index': 77591}","  2168 |
  2169 |     it(""should render with trust and strict setting"", function() {
> 2170 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2171 |         expect(built).toMatchSnapshot();
  2172 |     });
  2173 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2345, 'column': 21, 'index': 84093}","  2343 |     it(""should properly render stretchy accents"", function() {
  2344 |         const tex = `\\widetilde{ABCD}`;
> 2345 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2346 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2347 |         expect(markup).toContain('<mo stretchy=""true"">~</mo>');
  2348 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2995, 'column': 24, 'index': 108259}","  2993 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2994 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2995 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  2996 |         expect(parsed1.href).toBe(url);
  2997 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2998 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3003, 'column': 24, 'index': 108609}","  3001 |     it(""should allow balanced braces in url"", function() {
  3002 |         const url = ""http://example.org/{{}t{oo}}"";
> 3003 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3004 |         expect(parsed1.href).toBe(url);
  3005 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3006 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3019, 'column': 24, 'index': 109383}","  3017 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3018 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3019 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3020 |         expect(parsed1.href).toBe(url);
  3021 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3022 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3035, 'column': 22, 'index': 110048}","  3033 |
  3034 |     it(""should not affect spacing around"", function() {
> 3035 |         const built = getBuilt(""a\\href{http://example.com/}{+b}"", trustSettings);
       |                      ^ Lazy Test
  3036 |         expect(built).toMatchSnapshot();
  3037 |     });
  3038 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3045, 'column': 23, 'index': 110422}","  3043 |
  3044 |     it(""should allow explicitly allowed protocols"", () => {
> 3045 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3046 |             ""\\href{ftp://x}{foo}"",
  3047 |             new Settings({trust: (context) => context.protocol === ""ftp""}),
  3048 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3053, 'column': 23, 'index': 110701}","  3051 |
  3052 |     it(""should allow all protocols when trust option is true"", () => {
> 3053 |         const parsed = getParsed(""\\href{ftp://x}{foo}"", trustSettings);
       |                       ^ Lazy Test
  3054 |         expect(parsed).toMatchSnapshot();
  3055 |     });
  3056 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3058, 'column': 23, 'index': 110892}","  3056 |
  3057 |     it(""should not allow explicitly disallowed protocols"", () => {
> 3058 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3059 |             ""\\href{javascript:alert('x')}{foo}"",
  3060 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3061 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3066, 'column': 23, 'index': 111197}","  3064 |
  3065 |     it(""should not allow explicitly uppercased disallowed protocols"", () => {
> 3066 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3067 |             ""\\href{JavaScript:alert('x')}{foo}"",
  3068 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3069 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3142, 'column': 28, 'index': 114278}","  3140 |
  3141 |     it(""should produce color nodes with a color value given by errorColor"", function() {
> 3142 |         const parsedInput = getParsed(r`\error`, noThrowSettings);
       |                            ^ Lazy Test
  3143 |         expect(parsedInput[0].type).toBe(""color"");
  3144 |         expect(parsedInput[0].color).toBe(errorColor);
  3145 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3148, 'column': 22, 'index': 114537}","  3146 |
  3147 |     it(""should build katex-error span for other type of KaTeX error"", function() {
> 3148 |         const built = getBuilt(`2^2^2`, noThrowSettings);
       |                      ^ Lazy Test
  3149 |         expect(built).toMatchSnapshot();
  3150 |     });
  3151 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3483, 'column': 27, 'index': 127295}","  3481 |         const parsedBare = getParsed`~`;
  3482 |         expect(parsedBare[0].type).toEqual(""spacing"");
> 3483 |         const parsedChar = getParsed(""\\char`\\~"");
       |                           ^ Lazy Test
  3484 |         expect(parsedChar[0].type).toEqual(""textord"");
  3485 |     });
  3486 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4055, 'column': 22, 'index': 151256}","  4053 |
  4054 |     it(""should clamp size when set"", function() {
> 4055 |         const built = getBuilt(rule, new Settings({maxSize: 5}))[0];
       |                      ^ Lazy Test
  4056 |         expect(built.style.borderRightWidth).toEqual(""5em"");
  4057 |         expect(built.style.borderTopWidth).toEqual(""5em"");
  4058 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4061, 'column': 22, 'index': 151512}","  4059 |
  4060 |     it(""should not clamp size when not set"", function() {
> 4061 |         const built = getBuilt(rule)[0];
       |                      ^ Lazy Test
  4062 |         expect(built.style.borderRightWidth).toEqual(""999em"");
  4063 |         expect(built.style.borderTopWidth).toEqual(""999em"");
  4064 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4067, 'column': 22, 'index': 151770}","  4065 |
  4066 |     it(""should make zero-width rules if a negative maxSize is passed"", function() {
> 4067 |         const built = getBuilt(rule, new Settings({maxSize: -5}))[0];
       |                      ^ Lazy Test
  4068 |         expect(built.style.borderRightWidth).toEqual(""0em"");
  4069 |         expect(built.style.borderTopWidth).toEqual(""0em"");
  4070 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 92, 'column': 48, 'index': 2613}","  90 |             let group = parse[i];
  91 |             if (group.type === ""htmlmathml"") {
> 92 |                 expect(group.html).toHaveLength(1);
     |                                                ^ Magic Number
  93 |                 group = group.html[0];
  94 |             }
  95 |             if (group.type === ""mclass"") {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 114, 'column': 44, 'index': 3404}","  112 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
  113 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
> 114 |         expect(mml.children.length).toEqual(1);
      |                                            ^ Magic Number
  115 |     });
  116 | });
  117 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 371, 'column': 35, 'index': 10854}","  369 |         const parse = getParsed`\begingroup xy \endgroup`;
  370 |
> 371 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  372 |
  373 |         const ord = parse[0];
  374 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 394, 'column': 35, 'index': 11481}","  392 |         const parse = getParsed`\Large abc`;
  393 |
> 394 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  395 |
  396 |         const sizing = parse[0];
  397 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 406, 'column': 35, 'index': 11804}","  404 |         const parse = getParsed`a \Large abc`;
  405 |
> 406 |         expect(parse).toHaveLength(2);
      |                                   ^ Magic Number
  407 |
  408 |         const sizing = parse[1];
  409 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 411, 'column': 41, 'index': 11931}","  409 |
  410 |         expect(sizing.type).toEqual(""sizing"");
> 411 |         expect(sizing.body).toHaveLength(3);
      |                                         ^ Magic Number
  412 |     });
  413 |
  414 |     it(""should stop at the ends of groups"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 421, 'column': 41, 'index': 12214}","  419 |
  420 |         expect(sizing.type).toEqual(""sizing"");
> 421 |         expect(sizing.body).toHaveLength(1);
      |                                         ^ Magic Number
  422 |     });
  423 |
  424 |     describe(""within optional groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 608, 'column': 40, 'index': 18443}","  606 |
  607 |         const numer = parse.numer;
> 608 |         expect(numer.body).toHaveLength(4);
      |                                        ^ Magic Number
  609 |     });
  610 |
  611 |     it(""should create a denominator from the atoms after \\over"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 615, 'column': 40, 'index': 18660}","  613 |
  614 |         const denom = parse.denom;
> 615 |         expect(denom.body).toHaveLength(4);
      |                                        ^ Magic Number
  616 |     });
  617 |
  618 |     it(""should handle empty numerators"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 755, 'column': 37, 'index': 23468}","  753 |         const group = parse.body;
  754 |
> 755 |         expect(group.length).toEqual(4);
      |                                     ^ Magic Number
  756 |         expect(group[0].type).toEqual(""spacing"");
  757 |         expect(group[1].type).toEqual(""textord"");
  758 |         expect(group[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 773, 'column': 40, 'index': 24140}","  771 |         const parse = getParsed(leadingSpaceTextExpression)[0];
  772 |         // [m, o, o]
> 773 |         expect(parse.body).toHaveLength(3);
      |                                        ^ Magic Number
  774 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");
  775 |     });
  776 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 983, 'column': 40, 'index': 31364}","  981 |         const bigParse = getParsed(bigDelim)[0];
  982 |
> 983 |         expect(smallParse.size).toEqual(1);
      |                                        ^ Magic Number
  984 |         expect(bigParse.size).toEqual(4);
  985 |     });
  986 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 984, 'column': 38, 'index': 31406}","  982 |
  983 |         expect(smallParse.size).toEqual(1);
> 984 |         expect(bigParse.size).toEqual(4);
      |                                      ^ Magic Number
  985 |     });
  986 | });
  987 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1074, 'column': 57, 'index': 34123}","  1072 |         const hardNumberParse = getParsed(hardNumberRule)[0];
  1073 |
> 1074 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
       |                                                         ^ Magic Number
  1075 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
  1076 |     });
  1077 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1075, 'column': 58, 'index': 34188}","  1073 |
  1074 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
> 1075 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
       |                                                          ^ Magic Number
  1076 |     });
  1077 |
  1078 |     it(""should parse negative sizes"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1122, 'column': 51, 'index': 35733}","  1120 |     it(""should parse positive sizes"", function() {
  1121 |         const parse = getParsed`\kern{+1em}`[0];
> 1122 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1123 |     });
  1124 | });
  1125 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1157, 'column': 38, 'index': 37003}","  1155 |         const abParse3 = getParsed(abKern3);
  1156 |
> 1157 |         expect(abParse1).toHaveLength(3);
       |                                      ^ Magic Number
  1158 |         expect(abParse1[0].text).toEqual(""a"");
  1159 |         expect(abParse1[2].text).toEqual(""b"");
  1160 |         expect(abParse2).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1160, 'column': 38, 'index': 37139}","  1158 |         expect(abParse1[0].text).toEqual(""a"");
  1159 |         expect(abParse1[2].text).toEqual(""b"");
> 1160 |         expect(abParse2).toHaveLength(3);
       |                                      ^ Magic Number
  1161 |         expect(abParse2[0].text).toEqual(""a"");
  1162 |         expect(abParse2[2].text).toEqual(""b"");
  1163 |         expect(abParse3).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1163, 'column': 38, 'index': 37275}","  1161 |         expect(abParse2[0].text).toEqual(""a"");
  1162 |         expect(abParse2[2].text).toEqual(""b"");
> 1163 |         expect(abParse3).toHaveLength(3);
       |                                      ^ Magic Number
  1164 |         expect(abParse3[0].text).toEqual(""a"");
  1165 |         expect(abParse3[2].text).toEqual(""b"");
  1166 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1180, 'column': 51, 'index': 37844}","  1178 |     it(""should parse positive sizes"", function() {
  1179 |         const parse = getParsed`\kern+1em`[0];
> 1180 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1181 |     });
  1182 |
  1183 |     it(""should handle whitespace"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1186, 'column': 37, 'index': 38006}","  1184 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
  1185 |
> 1186 |         expect(abParse).toHaveLength(3);
       |                                     ^ Magic Number
  1187 |         expect(abParse[0].text).toEqual(""a"");
  1188 |         expect(abParse[1].dimension.unit).toEqual(""mu"");
  1189 |         expect(abParse[2].text).toEqual(""b"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1339, 'column': 37, 'index': 43302}","  1337 |     it(""should eat a final newline"", function() {
  1338 |         const m3 = getParsed`\begin{matrix}a&b\\ c&d \\ \end{matrix}`[0];
> 1339 |         expect(m3.body).toHaveLength(2);
       |                                     ^ Magic Number
  1340 |     });
  1341 |
  1342 |     it(""should grab \\arraystretch"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1586, 'column': 41, 'index': 51488}","  1584 |         const displayBody = displayNode.body;
  1585 |
> 1586 |         expect(displayBody).toHaveLength(2);
       |                                         ^ Magic Number
  1587 |         expect(displayBody[0].text).toEqual(""e"");
  1588 |     });
  1589 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1640, 'column': 36, 'index': 53523}","  1638 |
  1639 |         const bbBody = nestedParse.body.body;
> 1640 |         expect(bbBody).toHaveLength(3);
       |                                    ^ Magic Number
  1641 |         expect(bbBody[0].type).toEqual(""mathord"");
  1642 |         expect(bbBody[2].type).toEqual(""font"");
  1643 |         expect(bbBody[2].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1652, 'column': 34, 'index': 54051}","  1650 |         expect(colorMathbbParse.color).toEqual(""blue"");
  1651 |         const body = colorMathbbParse.body;
> 1652 |         expect(body).toHaveLength(1);
       |                                  ^ Magic Number
  1653 |         expect(body[0].type).toEqual(""font"");
  1654 |         expect(body[0].font).toEqual(""mathbb"");
  1655 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1665, 'column': 42, 'index': 54515}","  1663 |         expect(bf.type).toEqual(""font"");
  1664 |         expect(bf.font).toEqual(""mathbf"");
> 1665 |         expect(bf.body.body).toHaveLength(3);
       |                                          ^ Magic Number
  1666 |         expect(bf.body.body[0].text).toEqual(""a"");
  1667 |         expect(bf.body.body[1].type).toEqual(""font"");
  1668 |         expect(bf.body.body[1].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2238, 'column': 45, 'index': 80376}","  2236 |         // Just a few quick sanity checks here...
  2237 |         const markup = katex.renderToString(r`\sigma^2`);
> 2238 |         expect(markup.indexOf(""<span"")).toBe(0);
       |                                             ^ Magic Number
  2239 |         expect(markup).toContain(""\u03c3"");  // sigma
  2240 |         expect(markup).toContain(""margin-right"");
  2241 |         expect(markup).not.toContain(""marginRight"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2744, 'column': 39, 'index': 97594}","  2742 |             parseTree(r`\sqrt}`, new Settings());
  2743 |         } catch (e) {
> 2744 |             expect(e.position).toEqual(5);
       |                                       ^ Magic Number
  2745 |         }
  2746 |     });
  2747 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2878, 'column': 37, 'index': 101889}","  2876 |     it(""should not eat the last row when its first cell is empty"", function() {
  2877 |         const ae = getParsed`\begin{aligned}&E_1 & (1)\\&E_2 & (2)\\&E_3 & (3)\end{aligned}`[0];
> 2878 |         expect(ae.body).toHaveLength(3);
       |                                     ^ Magic Number
  2879 |     });
  2880 | });
  2881 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3169, 'column': 40, 'index': 115446}","  3167 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");
  3168 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
> 3169 |             expect(error.position).toBe(4);
       |                                        ^ Magic Number
  3170 |             expect(error.length).toBe(5);
  3171 |         }
  3172 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3170, 'column': 38, 'index': 115488}","  3168 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
  3169 |             expect(error.position).toBe(4);
> 3170 |             expect(error.length).toBe(5);
       |                                      ^ Magic Number
  3171 |         }
  3172 |     });
  3173 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3184, 'column': 40, 'index': 116140}","  3182 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");
  3183 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
> 3184 |             expect(error.position).toBe(7);
       |                                        ^ Magic Number
  3185 |             expect(error.length).toBe(0);
  3186 |         }
  3187 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3185, 'column': 38, 'index': 116182}","  3183 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
  3184 |             expect(error.position).toBe(7);
> 3185 |             expect(error.length).toBe(0);
       |                                      ^ Magic Number
  3186 |         }
  3187 |     });
  3188 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 763}","  761 |
  762 |     it(""should handle backslash followed by newline"", () => {
> 763 |         expect(""\\text{\\ \t\r \n \t\r  }"").toParseLike`\text{\ }`;
      |        ^ Redundant Assertion
  764 |     });
  765 |
  766 |     it(""should accept math mode tokens after its argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1734}","  1732 | describe(""A comment parser"", function() {
  1733 |     it(""should parse comments at the end of a line"", () => {
> 1734 |         expect(""a^2 + b^2 = c^2 % Pythagoras' Theorem\n"").toParse();
       |        ^ Redundant Assertion
  1735 |     });
  1736 |
  1737 |     it(""should parse comments at the start of a line"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1738}","  1736 |
  1737 |     it(""should parse comments at the start of a line"", () => {
> 1738 |         expect(""% comment\n"").toParse();
       |        ^ Redundant Assertion
  1739 |     });
  1740 |
  1741 |     it(""should parse multiple lines of comments in a row"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1742}","  1740 |
  1741 |     it(""should parse multiple lines of comments in a row"", () => {
> 1742 |         expect(""% comment 1\n% comment 2\n"").toParse();
       |        ^ Redundant Assertion
  1743 |     });
  1744 |
  1745 |     it(""should parse comments between subscript and superscript"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1746}","  1744 |
  1745 |     it(""should parse comments between subscript and superscript"", () => {
> 1746 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
       |        ^ Redundant Assertion
  1747 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
  1748 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1749 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1747}","  1745 |     it(""should parse comments between subscript and superscript"", () => {
  1746 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
> 1747 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
       |        ^ Redundant Assertion
  1748 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1749 |     });
  1750 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1748}","  1746 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
  1747 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
> 1748 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
       |        ^ Redundant Assertion
  1749 |     });
  1750 |
  1751 |     it(""should parse comments in size and color groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1752}","  1750 |
  1751 |     it(""should parse comments in size and color groups"", () => {
> 1752 |         expect(""\\kern{1 %kern\nem}"").toParse();
       |        ^ Redundant Assertion
  1753 |         expect(""\\kern1 %kern\nem"").toParse();
  1754 |         expect(""\\color{#f00%red\n}"").toParse();
  1755 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1753}","  1751 |     it(""should parse comments in size and color groups"", () => {
  1752 |         expect(""\\kern{1 %kern\nem}"").toParse();
> 1753 |         expect(""\\kern1 %kern\nem"").toParse();
       |        ^ Redundant Assertion
  1754 |         expect(""\\color{#f00%red\n}"").toParse();
  1755 |     });
  1756 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1754}","  1752 |         expect(""\\kern{1 %kern\nem}"").toParse();
  1753 |         expect(""\\kern1 %kern\nem"").toParse();
> 1754 |         expect(""\\color{#f00%red\n}"").toParse();
       |        ^ Redundant Assertion
  1755 |     });
  1756 |
  1757 |     it(""should parse comments before an expression"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1758}","  1756 |
  1757 |     it(""should parse comments before an expression"", () => {
> 1758 |         expect(""%comment\n{2}"").toParseLike`{2}`;
       |        ^ Redundant Assertion
  1759 |     });
  1760 |
  1761 |     it(""should parse comments before and between \\hline"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1768}","  1766 |
  1767 |     it(""should parse comments in the macro definition"", () => {
> 1768 |         expect(""\\def\\foo{1 %}\n2}\n\\foo"").toParseLike`12`;
       |        ^ Redundant Assertion
  1769 |     });
  1770 |
  1771 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1772}","  1770 |
  1771 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {
> 1772 |         expect(""\\def\\foo{1\n2}\nx %\\foo\n"").toParseLike`x`;
       |        ^ Redundant Assertion
  1773 |     });
  1774 |
  1775 |     it(""should not parse a comment without newline in strict mode"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1781}","  1779 |
  1780 |     it(""should not produce or consume space"", () => {
> 1781 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
       |        ^ Redundant Assertion
  1782 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
  1783 |     });
  1784 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1782}","  1780 |     it(""should not produce or consume space"", () => {
  1781 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
> 1782 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
       |        ^ Redundant Assertion
  1783 |     });
  1784 |
  1785 |     it(""should not include comments in the output"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1786}","  1784 |
  1785 |     it(""should not include comments in the output"", () => {
> 1786 |         expect(""5 % comment\n"").toParseLike`5`;
       |        ^ Redundant Assertion
  1787 |     });
  1788 | });
  1789 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 16, 'line': 2181}","  2179 |
  2180 |                 // Render is expected to throw, so this should not be called.
> 2181 |                 expect(true).toBe(false);
       |                ^ Redundant Assertion
  2182 |             } catch (error) {
  2183 |                 expect(error).toBeInstanceOf(ParseError);
  2184 |                 const message =",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 2983}","  2981 |         expect`\href%end`.toParseLike(""\\href{%}end"", trustSettings);
  2982 |         expect`\url%end`.toParseLike(""\\url{%}end"", trustSettings);
> 2983 |         expect(""\\url%%end\n"").toParseLike(""\\url{%}"", trustSettings);
       |        ^ Redundant Assertion
  2984 |         expect`\url end`.toParseLike(""\\url{e}nd"", trustSettings);
  2985 |         expect`\url%end`.toParseLike(""\\url {%}end"", trustSettings);
  2986 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3026}","  3024 |
  3025 |     it(""should allow comments after URLs"", function() {
> 3026 |         expect(""\\url{http://example.com/}%comment\n"").toBuild();
       |        ^ Redundant Assertion
  3027 |     });
  3028 |
  3029 |     it(""should be marked up correctly"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3164}","  3162 |
  3163 |             // Render is expected to throw, so this should not be called.
> 3164 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3165 |         } catch (error) {
  3166 |             expect(error).toBeInstanceOf(ParseError);
  3167 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3179}","  3177 |
  3178 |             // Render is expected to throw, so this should not be called.
> 3179 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3180 |         } catch (error) {
  3181 |             expect(error).toBeInstanceOf(ParseError);
  3182 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3194}","  3192 |
  3193 |             // Render is expected to throw, so this should not be called.
> 3194 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3195 |         } catch (error) {
  3196 |             expect(error).toBeInstanceOf(ParseError);
  3197 |             expect(error.message).toBe(""KaTeX parse error: \\verb ended by end of line instead of matching delimiter"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3467}","  3465 |
  3466 |     it(""\\char produces literal characters"", () => {
> 3467 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
       |        ^ Redundant Assertion
  3468 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3469 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3470 |         expect(""\\char`\\%"").toParseLike`\char""25`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3468}","  3466 |     it(""\\char produces literal characters"", () => {
  3467 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3468 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Redundant Assertion
  3469 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3470 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3471 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3469}","  3467 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3468 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3469 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Redundant Assertion
  3470 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3471 |         expect`\char`.not.toParse();
  3472 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3470}","  3468 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3469 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3470 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Redundant Assertion
  3471 |         expect`\char`.not.toParse();
  3472 |         expect(""\\char`"").not.toParse();
  3473 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3472}","  3470 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3471 |         expect`\char`.not.toParse();
> 3472 |         expect(""\\char`"").not.toParse();
       |        ^ Redundant Assertion
  3473 |         expect`\char'`.not.toParse();
  3474 |         expect`\char""`.not.toParse();
  3475 |         expect`\char'a`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3936}","  3934 |
  3935 |     it(""should parse combining characters"", function() {
> 3936 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
       |        ^ Redundant Assertion
  3937 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
  3938 |     });
  3939 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3937}","  3935 |     it(""should parse combining characters"", function() {
  3936 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
> 3937 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
       |        ^ Redundant Assertion
  3938 |     });
  3939 |
  3940 |     it(""should parse multi-accented characters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3975}","  3973 |
  3974 |     it(""should parse symbols"", function() {
> 3975 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3976 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
  3977 |     });
  3978 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3976}","  3974 |     it(""should parse symbols"", function() {
  3975 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
> 3976 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3977 |     });
  3978 |
  3979 |     it(""should build Greek capital letters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3993}","  3991 |
  3992 |     it(""should build binary operators"", function() {
> 3993 |         expect(""±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞\u22C5\u2218\u2216\u2219"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3994 |     });
  3995 |
  3996 |     it(""should build common ords"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3997}","  3995 |
  3996 |     it(""should build common ords"", function() {
> 3997 |         expect(""§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3998 |     });
  3999 |
  4000 |     it(""should build delimiters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4001}","  3999 |
  4000 |     it(""should build delimiters"", function() {
> 4001 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
       |        ^ Redundant Assertion
  4002 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4003 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4004 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4002}","  4000 |     it(""should build delimiters"", function() {
  4001 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
> 4002 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
       |        ^ Redundant Assertion
  4003 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4004 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4005 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4003}","  4001 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
  4002 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
> 4003 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
       |        ^ Redundant Assertion
  4004 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4005 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4006 |         expect`┌x┐ └x┘`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4004}","  4002 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4003 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
> 4004 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
       |        ^ Redundant Assertion
  4005 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4006 |         expect`┌x┐ └x┘`.toBuild();
  4007 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4005}","  4003 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4004 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
> 4005 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
       |        ^ Redundant Assertion
  4006 |         expect`┌x┐ └x┘`.toBuild();
  4007 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4008 |         expect(""\u27E6x\u27E7"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4007}","  4005 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4006 |         expect`┌x┐ └x┘`.toBuild();
> 4007 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
       |        ^ Redundant Assertion
  4008 |         expect(""\u27E6x\u27E7"").toBuild();
  4009 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4010 |         expect(""\\lBrace \\rBrace"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4008}","  4006 |         expect`┌x┐ └x┘`.toBuild();
  4007 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
> 4008 |         expect(""\u27E6x\u27E7"").toBuild();
       |        ^ Redundant Assertion
  4009 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4010 |         expect(""\\lBrace \\rBrace"").toBuild();
  4011 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4009}","  4007 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4008 |         expect(""\u27E6x\u27E7"").toBuild();
> 4009 |         expect(""\\llbracket \\rrbracket"").toBuild();
       |        ^ Redundant Assertion
  4010 |         expect(""\\lBrace \\rBrace"").toBuild();
  4011 |     });
  4012 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4010}","  4008 |         expect(""\u27E6x\u27E7"").toBuild();
  4009 |         expect(""\\llbracket \\rrbracket"").toBuild();
> 4010 |         expect(""\\lBrace \\rBrace"").toBuild();
       |        ^ Redundant Assertion
  4011 |     });
  4012 |
  4013 |     it(""should build some surrogate pairs"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4280, 'column': 19, 'index': 160378}","  4278 |             expect`\message{Hello, world}`.toParse();
  4279 |             // eslint-disable-next-line no-console
> 4280 |             expect(console.log).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4281 |         });
  4282 |     });
  4283 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4289, 'column': 19, 'index': 160743}","  4287 |             expect`\errmessage{Hello, world}`.toParse();
  4288 |             // eslint-disable-next-line no-console
> 4289 |             expect(console.error).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4290 |         });
  4291 |     });
  4292 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 23}","  21 |
  22 | describe(""A parser"", function() {
> 23 |     it(""should not fail on an empty string"", function() {
     |    ^ Unknown Test
  24 |         expect``.toParse(strictSettings);
  25 |     });
  26 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 27}","  25 |     });
  26 |
> 27 |     it(""should ignore whitespace"", function() {
     |    ^ Unknown Test
  28 |         expect`    x    y    `.toParseLike(""xy"", strictSettings);
  29 |     });
  30 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 31}","  29 |     });
  30 |
> 31 |     it(""should ignore whitespace in atom"", function() {
     |    ^ Unknown Test
  32 |         expect`    x   ^ y    `.toParseLike(""x^y"", strictSettings);
  33 |     });
  34 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 106}","  104 |
  105 | describe(""A mathinner parser"", function() {
> 106 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  107 |         expect`\mathinner{\langle{\psi}\rangle}`.toParse();
  108 |         expect`\frac 1 {\mathinner{\langle{\psi}\rangle}}`.toParse();
  109 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 173}","  171 |
  172 | describe(""A \\KaTeX parser"", function() {
> 173 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  174 |         expect`\KaTeX`.toParse();
  175 |     });
  176 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 179}","  177 |
  178 | describe(""A subscript and superscript parser"", function() {
> 179 |     it(""should not fail on superscripts"", function() {
      |    ^ Unknown Test
  180 |         expect`x^2`.toParse();
  181 |     });
  182 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 183}","  181 |     });
  182 |
> 183 |     it(""should not fail on subscripts"", function() {
      |    ^ Unknown Test
  184 |         expect`x_3`.toParse();
  185 |     });
  186 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 187}","  185 |     });
  186 |
> 187 |     it(""should not fail on both subscripts and superscripts"", function() {
      |    ^ Unknown Test
  188 |         expect`x^2_3`.toParse();
  189 |
  190 |         expect`x_2^3`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 193}","  191 |     });
  192 |
> 193 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  194 |         expect`^3`.toParse();
  195 |         expect`^3+`.toParse();
  196 |         expect`_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 237}","  235 |     });
  236 |
> 237 |     it(""should produce the same thing regardless of order"", function() {
      |    ^ Unknown Test
  238 |         expect`x^2_3`.toParseLike`x_3^2`;
  239 |     });
  240 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 241}","  239 |     });
  240 |
> 241 |     it(""should not parse double subscripts or superscripts"", function() {
      |    ^ Unknown Test
  242 |         expect`x^x^x`.not.toParse();
  243 |
  244 |         expect`x_x_x`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 255}","  253 |     });
  254 |
> 255 |     it(""should work correctly with {}s"", function() {
      |    ^ Unknown Test
  256 |         expect`x^{2+3}`.toParse();
  257 |
  258 |         expect`x_{3-2}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 273}","  271 |     });
  272 |
> 273 |     it(""should work with nested super/subscripts"", function() {
      |    ^ Unknown Test
  274 |         expect`x^{x^x}`.toParse();
  275 |         expect`x^{x_x}`.toParse();
  276 |         expect`x_{x^x}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 280}","  278 |     });
  279 |
> 280 |     it(""should work with Unicode (sub|super)script characters"", function() {
      |    ^ Unknown Test
  281 |         expect`A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃`.toParseLike`A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}`;
  282 |     });
  283 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 284}","  282 |     });
  283 |
> 284 |     it(""should not fail if \\relax is in an atom"", function() {
      |    ^ Unknown Test
  285 |         expect`\hskip1em\relax^2`.toParse(strictSettings);
  286 |     });
  287 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 288}","  286 |     });
  287 |
> 288 |     it(""should skip \\relax in super/subscripts"", function() {
      |    ^ Unknown Test
  289 |         expect`x^\relax 2`.toParseLike`x^2`;
  290 |         expect`x_\relax 2`.toParseLike`x_2`;
  291 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 295}","  293 |
  294 | describe(""A subscript and superscript tree-builder"", function() {
> 295 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  296 |         expect`^3`.toBuild();
  297 |         expect`_2`.toBuild();
  298 |         expect`^3_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 304}","  302 |
  303 | describe(""A parser with limit controls"", function() {
> 304 |     it(""should fail when the limit control is not preceded by an op node"", function() {
      |    ^ Unknown Test
  305 |         expect`3\nolimits_2^2`.not.toParse();
  306 |         expect`\sqrt\limits_2^2`.not.toParse();
  307 |         expect`45 +\nolimits 45`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 310}","  308 |     });
  309 |
> 310 |     it(""should parse when the limit control directly follows an op node"", function() {
      |    ^ Unknown Test
  311 |         expect`\int\limits_2^2 3`.toParse();
  312 |         expect`\sum\nolimits_3^4 4`.toParse();
  313 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 315}","  313 |     });
  314 |
> 315 |     it(""should parse when the limit control is in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  316 |         expect`\int_2^2\limits`.toParse();
  317 |         expect`\int^2\nolimits_2`.toParse();
  318 |         expect`\int_2\limits^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 321}","  319 |     });
  320 |
> 321 |     it(""should allow multiple limit controls in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  322 |         expect`\int_2\nolimits^2\limits 3`.toParse();
  323 |         expect`\int\nolimits\limits_2^2`.toParse();
  324 |         expect`\int\limits\limits\limits_2^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 339}","  337 |
  338 | describe(""A group parser"", function() {
> 339 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  340 |         expect`{xy}`.toParse();
  341 |     });
  342 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 359}","  357 |
  358 | describe(""A \\begingroup...\\endgroup parser"", function() {
> 359 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  360 |         expect`\begingroup xy \endgroup`.toParse();
  361 |     });
  362 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 363}","  361 |     });
  362 |
> 363 |     it(""should fail when it is mismatched"", function() {
      |    ^ Unknown Test
  364 |         expect`\begingroup xy`.not.toParse();
  365 |         expect`\begingroup xy }`.not.toParse();
  366 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 380}","  378 |     });
  379 |
> 380 |     it(""should not affect spacing in math mode"", function() {
      |    ^ Unknown Test
  381 |         expect`\begingroup x+ \endgroup y`.toBuildLike`x+y`;
  382 |     });
  383 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 386}","  384 |
  385 | describe(""An implicit group parser"", function() {
> 386 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  387 |         expect`\Large x`.toParse();
  388 |         expect`abc {abc \Large xyz} abc`.toParse();
  389 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 448}","  446 |
  447 | describe(""A function parser"", function() {
> 448 |     it(""should parse no argument functions"", function() {
      |    ^ Unknown Test
  449 |         expect`\div`.toParse();
  450 |     });
  451 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 452}","  450 |     });
  451 |
> 452 |     it(""should parse 1 argument functions"", function() {
      |    ^ Unknown Test
  453 |         expect`\blue x`.toParse();
  454 |     });
  455 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 456}","  454 |     });
  455 |
> 456 |     it(""should parse 2 argument functions"", function() {
      |    ^ Unknown Test
  457 |         expect`\frac 1 2`.toParse();
  458 |     });
  459 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 460}","  458 |     });
  459 |
> 460 |     it(""should not parse 1 argument functions with no arguments"", function() {
      |    ^ Unknown Test
  461 |         expect`\blue`.not.toParse();
  462 |     });
  463 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 464}","  462 |     });
  463 |
> 464 |     it(""should not parse 2 argument functions with 0 or 1 arguments"", function() {
      |    ^ Unknown Test
  465 |         expect`\frac`.not.toParse();
  466 |
  467 |         expect`\frac 1`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 470}","  468 |     });
  469 |
> 470 |     it(""should not parse a function with text right after it"", function() {
      |    ^ Unknown Test
  471 |         expect`\redx`.not.toParse();
  472 |     });
  473 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 474}","  472 |     });
  473 |
> 474 |     it(""should parse a function with a number right after it"", function() {
      |    ^ Unknown Test
  475 |         expect`\frac12`.toParse();
  476 |     });
  477 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 478}","  476 |     });
  477 |
> 478 |     it(""should parse some functions with text right after it"", function() {
      |    ^ Unknown Test
  479 |         expect`\;x`.toParse();
  480 |     });
  481 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 642}","  640 |     });
  641 |
> 642 |     it(""should handle \\textstyle correctly"", function() {
      |    ^ Unknown Test
  643 |         expect`\textstyle 1 \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  644 |         expect`{\textstyle 1} \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  645 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 668}","  666 |
  667 | describe(""A genfrac builder"", function() {
> 668 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  669 |         expect`\frac{x}{y}`.toBuild();
  670 |         expect`\dfrac{x}{y}`.toBuild();
  671 |         expect`\tfrac{x}{y}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 681}","  679 |
  680 | describe(""A infix builder"", function() {
> 681 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  682 |         expect`a \over b`.toBuild();
  683 |         expect`a \atop b`.toBuild();
  684 |         expect`a \choose b`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 777}","  775 |     });
  776 |
> 777 |     it(""should parse math within text group"", function() {
      |    ^ Unknown Test
  778 |         expect`\text{graph: $y = mx + b$}`.toParse(strictSettings);
  779 |         expect`\text{graph: \(y = mx + b\)}`.toParse(strictSettings);
  780 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 782}","  780 |     });
  781 |
> 782 |     it(""should parse math within text within math within text"", function() {
      |    ^ Unknown Test
  783 |         expect`\text{hello $x + \text{world $y$} + z$}`.toParse(strictSettings);
  784 |         expect`\text{hello \(x + \text{world $y$} + z\)}`.toParse(strictSettings);
  785 |         expect`\text{hello $x + \text{world \(y\)} + z$}`.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 789}","  787 |     });
  788 |
> 789 |     it(""should forbid \\( within math mode"", function() {
      |    ^ Unknown Test
  790 |         expect`\(`.not.toParse();
  791 |         expect`\text{$\(x\)$}`.not.toParse();
  792 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 794}","  792 |     });
  793 |
> 794 |     it(""should forbid $ within math mode"", function() {
      |    ^ Unknown Test
  795 |         expect`$x$`.not.toParse();
  796 |         expect`\text{\($x$\)}`.not.toParse();
  797 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 799}","  797 |     });
  798 |
> 799 |     it(""should detect unbalanced \\)"", function() {
      |    ^ Unknown Test
  800 |         expect`\)`.not.toParse();
  801 |         expect`\text{\)}`.not.toParse();
  802 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 804}","  802 |     });
  803 |
> 804 |     it(""should detect unbalanced $"", function() {
      |    ^ Unknown Test
  805 |         expect`$`.not.toParse();
  806 |         expect`\text{$}`.not.toParse();
  807 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 809}","  807 |     });
  808 |
> 809 |     it(""should not mix $ and \\(..\\)"", function() {
      |    ^ Unknown Test
  810 |         expect`\text{$x\)}`.not.toParse();
  811 |         expect`\text{\(x$}`.not.toParse();
  812 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 814}","  812 |     });
  813 |
> 814 |     it(""should parse spacing functions"", function() {
      |    ^ Unknown Test
  815 |         expect`a b\, \; \! \: \> ~ \thinspace \medspace \quad \ `.toBuild();
  816 |         expect`\enspace \thickspace \qquad \space \nobreakspace`.toBuild();
  817 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 819}","  817 |     });
  818 |
> 819 |     it(""should omit spaces after commands"", function() {
      |    ^ Unknown Test
  820 |         expect`\text{\textellipsis !}`.toParseLike`\text{\textellipsis!}`;
  821 |     });
  822 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 823}","  821 |     });
  822 |
> 823 |     it(""should handle ⋮ and \\vdots"", function() {
      |    ^ Unknown Test
  824 |         expect`\text{a \vdots b ⋮ d}`.toParse();
  825 |     });
  826 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 829}","  827 |
  828 | describe(""A texvc builder"", function() {
> 829 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  830 |         expect`\lang\N\darr\R\dArr\Z\Darr\alef\rang`.toBuild();
  831 |         expect`\alefsym\uarr\Alpha\uArr\Beta\Uarr\Chi`.toBuild();
  832 |         expect`\clubs\diamonds\hearts\spades\cnums\Complex`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1003}","  1001 |
  1002 | describe(""An lap parser"", function() {
> 1003 |     it(""should not fail on a text argument"", function() {
       |    ^ Unknown Test
  1004 |         expect`\rlap{\,/}{=}`.toParse();
  1005 |         expect`\mathrlap{\,/}{=}`.toParse();
  1006 |         expect`{=}\llap{/\,}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1012}","  1010 |     });
  1011 |
> 1012 |     it(""should not fail if math version is used"", function() {
       |    ^ Unknown Test
  1013 |         expect`\mathrlap{\frac{a}{b}}{=}`.toParse();
  1014 |         expect`{=}\mathllap{\frac{a}{b}}`.toParse();
  1015 |         expect`\sum_{\mathclap{\frac{a}{b}}}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1018}","  1016 |     });
  1017 |
> 1018 |     it(""should fail on math if AMS version is used"", function() {
       |    ^ Unknown Test
  1019 |         expect`\rlap{\frac{a}{b}}{=}`.not.toParse();
  1020 |         expect`{=}\llap{\frac{a}{b}}`.not.toParse();
  1021 |         expect`\sum_{\clap{\frac{a}{b}}}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1274}","  1272 | describe(""A begin/end parser"", function() {
  1273 |
> 1274 |     it(""should parse a simple environment"", function() {
       |    ^ Unknown Test
  1275 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1276 |     });
  1277 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1278}","  1276 |     });
  1277 |
> 1278 |     it(""should parse an environment with argument"", function() {
       |    ^ Unknown Test
  1279 |         expect`\begin{array}{cc}a&b\\c&d\end{array}`.toParse();
  1280 |     });
  1281 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1282}","  1280 |     });
  1281 |
> 1282 |     it(""should parse and build an empty environment"", function() {
       |    ^ Unknown Test
  1283 |         expect`\begin{aligned}\end{aligned}`.toBuild();
  1284 |         expect`\begin{matrix}\end{matrix}`.toBuild();
  1285 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1287}","  1285 |     });
  1286 |
> 1287 |     it(""should parse an environment with hlines"", function() {
       |    ^ Unknown Test
  1288 |         expect`\begin{matrix}\hline a&b\\ \hline c&d\end{matrix}`.toParse();
  1289 |         expect`\begin{matrix}\hline a&b\cr \hline c&d\end{matrix}`.toParse();
  1290 |         expect`\begin{matrix}\hdashline a&b\\ \hdashline c&d\end{matrix}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1293}","  1291 |     });
  1292 |
> 1293 |     it(""should forbid hlines outside array environment"", () => {
       |    ^ Unknown Test
  1294 |         expect`\hline`.not.toParse();
  1295 |     });
  1296 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1297}","  1295 |     });
  1296 |
> 1297 |     it(""should error when name is mismatched"", function() {
       |    ^ Unknown Test
  1298 |         expect`\begin{matrix}a&b\\c&d\end{pmatrix}`.not.toParse();
  1299 |     });
  1300 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1301}","  1299 |     });
  1300 |
> 1301 |     it(""should error when commands are mismatched"", function() {
       |    ^ Unknown Test
  1302 |         expect`\begin{matrix}a&b\\c&d\right{pmatrix}`.not.toParse();
  1303 |     });
  1304 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1305}","  1303 |     });
  1304 |
> 1305 |     it(""should error when end is missing"", function() {
       |    ^ Unknown Test
  1306 |         expect`\begin{matrix}a&b\\c&d`.not.toParse();
  1307 |     });
  1308 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1309}","  1307 |     });
  1308 |
> 1309 |     it(""should error when braces are mismatched"", function() {
       |    ^ Unknown Test
  1310 |         expect`{\begin{matrix}a&b\\c&d}\end{matrix}`.not.toParse();
  1311 |     });
  1312 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1313}","  1311 |     });
  1312 |
> 1313 |     it(""should cooperate with infix notation"", function() {
       |    ^ Unknown Test
  1314 |         expect`\begin{matrix}0&1\over2&3\\4&5&6\end{matrix}`.toParse();
  1315 |     });
  1316 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1323}","  1321 |     });
  1322 |
> 1323 |     it(""should allow \\cr and \\\\ as a line terminator"", function() {
       |    ^ Unknown Test
  1324 |         expect`\begin{matrix}a&b\cr c&d\end{matrix}`.toParse();
  1325 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1326 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1328}","  1326 |     });
  1327 |
> 1328 |     it(""should not allow \\cr to scan for an optional size argument"", function() {
       |    ^ Unknown Test
  1329 |         expect`\begin{matrix}a&b\cr[c]&d\end{matrix}`.toParse();
  1330 |     });
  1331 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1332}","  1330 |     });
  1331 |
> 1332 |     it(""should not treat [ after space as optional argument to \\\\"", function() {
       |    ^ Unknown Test
  1333 |         expect`\begin{matrix}a&b\\ [c]&d\end{matrix}`.toParse();
  1334 |         expect`a\\ [b]`.toParse();
  1335 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1347}","  1345 |     });
  1346 |
> 1347 |     it(""should allow an optional argument in {matrix*} and company."", function() {
       |    ^ Unknown Test
  1348 |         expect`\begin{matrix*}[r] a & -1 \\ -1 & d \end{matrix*}`.toBuild();
  1349 |         expect`\begin{pmatrix*}[r] a & -1 \\ -1 & d \end{pmatrix*}`.toBuild();
  1350 |         expect`\begin{bmatrix*}[r] a & -1 \\ -1 & d \end{bmatrix*}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1384}","  1382 |     });
  1383 |
> 1384 |     it(""should build sized square roots"", function() {
       |    ^ Unknown Test
  1385 |         expect`\Large\sqrt[3]{x}`.toBuild();
  1386 |     });
  1387 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1388}","  1386 |     });
  1387 |
> 1388 |     it(""should expand argument if optional argument doesn't exist"", function() {
       |    ^ Unknown Test
  1389 |         expect`\sqrt\foo`.toParseLike(""\\sqrt123"",
  1390 |             new Settings({macros: {""\\foo"": ""123""}}));
  1391 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1393}","  1391 |     });
  1392 |
> 1393 |     it(""should not expand argument if optional argument exists"", function() {
       |    ^ Unknown Test
  1394 |         expect`\sqrt[2]\foo`.toParseLike(""\\sqrt[2]{123}"",
  1395 |             new Settings({macros: {""\\foo"": ""123""}}));
  1396 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1400}","  1398 |
  1399 | describe(""A TeX-compliant parser"", function() {
> 1400 |     it(""should work"", function() {
       |    ^ Unknown Test
  1401 |         expect`\frac 2 3`.toParse();
  1402 |     });
  1403 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1419}","  1417 |     });
  1418 |
> 1419 |     it(""should fail when there are missing sup/subscripts"", function() {
       |    ^ Unknown Test
  1420 |         expect`x^`.not.toParse();
  1421 |         expect`x_`.not.toParse();
  1422 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1490}","  1488 |     });
  1489 |
> 1490 |     it(""should parse multiple primes correctly"", function() {
       |    ^ Unknown Test
  1491 |         expect`x''''`.toParse();
  1492 |         expect`x_2''`.toParse();
  1493 |         expect`x''_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1496}","  1494 |     });
  1495 |
> 1496 |     it(""should fail when sup/subscripts are interspersed with arguments"", function() {
       |    ^ Unknown Test
  1497 |         expect`\sqrt^23`.not.toParse();
  1498 |         expect`\frac^234`.not.toParse();
  1499 |         expect`\frac2^34`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1502}","  1500 |     });
  1501 |
> 1502 |     it(""should succeed when sup/subscripts come after whole functions"", function() {
       |    ^ Unknown Test
  1503 |         expect`\sqrt2^3`.toParse();
  1504 |         expect`\frac23^4`.toParse();
  1505 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1507}","  1505 |     });
  1506 |
> 1507 |     it(""should succeed with a sqrt around a text/frac"", function() {
       |    ^ Unknown Test
  1508 |         expect`\sqrt \frac x y`.toParse();
  1509 |         expect`\sqrt \text x`.toParse();
  1510 |         expect`x^\frac x y`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1544}","  1542 |
  1543 | describe(""An op symbol builder"", function() {
> 1544 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1545 |         expect`\int_i^n`.toBuild();
  1546 |         expect`\iint_i^n`.toBuild();
  1547 |         expect`\iiint_i^n`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1561}","  1559 |
  1560 | describe(""A style change parser"", function() {
> 1561 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1562 |         expect`\displaystyle x`.toParse();
  1563 |         expect`\textstyle x`.toParse();
  1564 |         expect`\scriptstyle x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1592}","  1590 |
  1591 | describe(""A font parser"", function() {
> 1592 |     it(""should parse \\mathrm, \\mathbb, \\mathit, and \\mathnormal"", function() {
       |    ^ Unknown Test
  1593 |         expect`\mathrm x`.toParse();
  1594 |         expect`\mathbb x`.toParse();
  1595 |         expect`\mathit x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1603}","  1601 |     });
  1602 |
> 1603 |     it(""should parse \\mathcal and \\mathfrak"", function() {
       |    ^ Unknown Test
  1604 |         expect`\mathcal{ABC123}`.toParse();
  1605 |         expect`\mathfrak{abcABC123}`.toParse();
  1606 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1657}","  1655 |     });
  1656 |
> 1657 |     it(""should not parse a series of font commands"", function() {
       |    ^ Unknown Test
  1658 |         expect`\mathbb \mathrm R`.not.toParse();
  1659 |     });
  1660 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1672}","  1670 |     });
  1671 |
> 1672 |     it(""should be allowed in the argument"", function() {
       |    ^ Unknown Test
  1673 |         expect`e^\mathbf{x}`.toParse();
  1674 |     });
  1675 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1681}","  1679 |     });
  1680 |
> 1681 |     it(""old-style fonts work like new-style fonts"", () => {
       |    ^ Unknown Test
  1682 |         expect`\rm xyz`.toParseLike`\mathrm{xyz}`;
  1683 |         expect`\sf xyz`.toParseLike`\mathsf{xyz}`;
  1684 |         expect`\tt xyz`.toParseLike`\mathtt{xyz}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1692}","  1690 |
  1691 | describe(""A \\pmb builder"", function() {
> 1692 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1693 |         expect`\pmb{\mu}`.toBuild();
  1694 |         expect`\pmb{=}`.toBuild();
  1695 |         expect`\pmb{+}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1703}","  1701 |
  1702 | describe(""A raise parser"", function() {
> 1703 |     it(""should parse and build text in \\raisebox"", function() {
       |    ^ Unknown Test
  1704 |         expect`\raisebox{5pt}{text}`.toBuild(strictSettings);
  1705 |         expect`\raisebox{-5pt}{text}`.toBuild(strictSettings);
  1706 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1708}","  1706 |     });
  1707 |
> 1708 |     it(""should parse and build math in non-strict \\vcenter"", function() {
       |    ^ Unknown Test
  1709 |         expect`\vcenter{\frac a b}`.toBuild(nonstrictSettings);
  1710 |     });
  1711 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1712}","  1710 |     });
  1711 |
> 1712 |     it(""should fail to parse math in \\raisebox"", function() {
       |    ^ Unknown Test
  1713 |         expect`\raisebox{5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1714 |         expect`\raisebox{-5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1715 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1717}","  1715 |     });
  1716 |
> 1717 |     it(""should fail to parse math in an \\hbox"", function() {
       |    ^ Unknown Test
  1718 |         expect`\hbox{\frac a b}`.not.toParse(nonstrictSettings);
  1719 |     });
  1720 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1721}","  1719 |     });
  1720 |
> 1721 |     it(""should fail to build, given an unbraced length"", function() {
       |    ^ Unknown Test
  1722 |         expect`\raisebox5pt{text}`.not.toBuild(strictSettings);
  1723 |         expect`\raisebox-5pt{text}`.not.toBuild(strictSettings);
  1724 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1726}","  1724 |     });
  1725 |
> 1726 |     it(""should build math in an hbox when math mode is set"", function() {
       |    ^ Unknown Test
  1727 |         expect`a + \vcenter{\hbox{$\frac{\frac a b}c$}}`
  1728 |             .toBuild(strictSettings);
  1729 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1775}","  1773 |     });
  1774 |
> 1775 |     it(""should not parse a comment without newline in strict mode"", () => {
       |    ^ Unknown Test
  1776 |         expect`x%y`.not.toParse(strictSettings);
  1777 |         expect`x%y`.toParse(nonstrictSettings);
  1778 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2260}","  2258 |
  2259 | describe(""An accent parser"", function() {
> 2260 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2261 |         expect`\vec{x}`.toParse();
  2262 |         expect`\vec{x^2}`.toParse();
  2263 |         expect`\vec{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2280}","  2278 |     });
  2279 |
> 2280 |     it(""should parse stretchy, shifty accents"", function() {
       |    ^ Unknown Test
  2281 |         expect`\widehat{x}`.toParse();
  2282 |         expect`\widecheck{x}`.toParse();
  2283 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2285}","  2283 |     });
  2284 |
> 2285 |     it(""should parse stretchy, non-shifty accents"", function() {
       |    ^ Unknown Test
  2286 |         expect`\overrightarrow{x}`.toParse();
  2287 |     });
  2288 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2291}","  2289 |
  2290 | describe(""An accent builder"", function() {
> 2291 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2292 |         expect`\vec{x}`.toBuild();
  2293 |         expect`\vec{x}^2`.toBuild();
  2294 |         expect`\vec{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2308}","  2306 |
  2307 | describe(""A stretchy and shifty accent builder"", function() {
> 2308 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2309 |         expect`\widehat{AB}`.toBuild();
  2310 |         expect`\widecheck{AB}`.toBuild();
  2311 |         expect`\widehat{AB}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2326}","  2324 |
  2325 | describe(""A stretchy and non-shifty accent builder"", function() {
> 2326 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2327 |         expect`\overrightarrow{AB}`.toBuild();
  2328 |         expect`\overrightarrow{AB}^2`.toBuild();
  2329 |         expect`\overrightarrow{AB}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2352}","  2350 |
  2351 | describe(""An under-accent parser"", function() {
> 2352 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2353 |         expect`\underrightarrow{x}`.toParse();
  2354 |         expect`\underrightarrow{x^2}`.toParse();
  2355 |         expect`\underrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2373}","  2371 |
  2372 | describe(""An under-accent builder"", function() {
> 2373 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2374 |         expect`\underrightarrow{x}`.toBuild();
  2375 |         expect`\underrightarrow{x}^2`.toBuild();
  2376 |         expect`\underrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2391}","  2389 |
  2390 | describe(""An extensible arrow parser"", function() {
> 2391 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2392 |         expect`\xrightarrow{x}`.toParse();
  2393 |         expect`\xrightarrow{x^2}`.toParse();
  2394 |         expect`\xrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2413}","  2411 |
  2412 | describe(""An extensible arrow builder"", function() {
> 2413 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2414 |         expect`\xrightarrow{x}`.toBuild();
  2415 |         expect`\xrightarrow{x}^2`.toBuild();
  2416 |         expect`\xrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2432}","  2430 |
  2431 | describe(""A horizontal brace parser"", function() {
> 2432 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2433 |         expect`\overbrace{x}`.toParse();
  2434 |         expect`\overbrace{x^2}`.toParse();
  2435 |         expect`\overbrace{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2455}","  2453 |
  2454 | describe(""A horizontal brace builder"", function() {
> 2455 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2456 |         expect`\overbrace{x}`.toBuild();
  2457 |         expect`\overbrace{x}^2`.toBuild();
  2458 |         expect`\underbrace{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2473}","  2471 |
  2472 | describe(""A boxed parser"", function() {
> 2473 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2474 |         expect`\boxed{x}`.toParse();
  2475 |         expect`\boxed{x^2}`.toParse();
  2476 |         expect`\boxed{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2488}","  2486 |
  2487 | describe(""A boxed builder"", function() {
> 2488 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2489 |         expect`\boxed{x}`.toBuild();
  2490 |         expect`\boxed{x}^2`.toBuild();
  2491 |         expect`\boxed{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2505}","  2503 |
  2504 | describe(""An fbox parser, unlike a boxed parser,"", function() {
> 2505 |     it(""should fail when given math"", function() {
       |    ^ Unknown Test
  2506 |         expect`\fbox{\frac a b}`.not.toParse();
  2507 |     });
  2508 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2511}","  2509 |
  2510 | describe(""A colorbox parser"", function() {
> 2511 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2512 |         expect`\colorbox{red}{a b}`.toParse();
  2513 |         expect`\colorbox{red}{x}^2`.toParse();
  2514 |         expect`\colorbox{red} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2517}","  2515 |     });
  2516 |
> 2517 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2518 |         expect`\colorbox{red}{\alpha}`.not.toParse();
  2519 |         expect`\colorbox{red}{\frac{a}{b}}`.not.toParse();
  2520 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2522}","  2520 |     });
  2521 |
> 2522 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2523 |         expect`\colorbox{red}{a b}`.toParse();
  2524 |         expect`\colorbox{#197}{a b}`.toParse();
  2525 |         expect`\colorbox{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2535}","  2533 |
  2534 | describe(""A colorbox builder"", function() {
> 2535 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2536 |         expect`\colorbox{red}{a b}`.toBuild();
  2537 |         expect`\colorbox{red}{a b}^2`.toBuild();
  2538 |         expect`\colorbox{red} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2547}","  2545 |
  2546 | describe(""An fcolorbox parser"", function() {
> 2547 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2548 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2549 |         expect`\fcolorbox{blue}{yellow}{x}^2`.toParse();
  2550 |         expect`\fcolorbox{blue}{yellow} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2553}","  2551 |     });
  2552 |
> 2553 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2554 |         expect`\fcolorbox{blue}{yellow}{\alpha}`.not.toParse();
  2555 |         expect`\fcolorbox{blue}{yellow}{\frac{a}{b}}`.not.toParse();
  2556 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2558}","  2556 |     });
  2557 |
> 2558 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2559 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2560 |         expect`\fcolorbox{blue}{#197}{a b}`.toParse();
  2561 |         expect`\fcolorbox{blue}{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2571}","  2569 |
  2570 | describe(""A fcolorbox builder"", function() {
> 2571 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2572 |         expect`\fcolorbox{blue}{yellow}{a b}`.toBuild();
  2573 |         expect`\fcolorbox{blue}{yellow}{a b}^2`.toBuild();
  2574 |         expect`\fcolorbox{blue}{yellow} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2583}","  2581 |
  2582 | describe(""A strike-through parser"", function() {
> 2583 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2584 |         expect`\cancel{x}`.toParse();
  2585 |         expect`\cancel{x^2}`.toParse();
  2586 |         expect`\cancel{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2604}","  2602 |
  2603 | describe(""A strike-through builder"", function() {
> 2604 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2605 |         expect`\cancel{x}`.toBuild();
  2606 |         expect`\cancel{x}^2`.toBuild();
  2607 |         expect`\cancel{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2625}","  2623 |
  2624 | describe(""A actuarial angle parser"", function() {
> 2625 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2626 |         expect`a_{\angl{n}}`.toParse();
  2627 |     });
  2628 |     it(""should fail in text mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2628}","  2626 |         expect`a_{\angl{n}}`.toParse();
  2627 |     });
> 2628 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2629 |         expect`\text{a_{\angl{n}}}`.not.toParse();
  2630 |     });
  2631 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2634}","  2632 |
  2633 | describe(""A actuarial angle builder"", function() {
> 2634 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2635 |         expect`a_{\angl{n}}`.toBuild();
  2636 |         expect`a_{\angl{n}i}`.toBuild();
  2637 |         expect`a_{\angl n}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2643}","  2641 |
  2642 | describe(""\\phase"", function() {
> 2643 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2644 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2645 |     });
  2646 |     it(""should not fail in math mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2646}","  2644 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2645 |     });
> 2646 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2647 |         expect`\phase{-78.2^\circ}`.toBuild();
  2648 |     });
  2649 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2652}","  2650 |
  2651 | describe(""A phantom parser"", function() {
> 2652 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2653 |         expect`\phantom{x}`.toParse();
  2654 |         expect`\phantom{x^2}`.toParse();
  2655 |         expect`\phantom{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2672}","  2670 |
  2671 | describe(""A phantom builder"", function() {
> 2672 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2673 |         expect`\phantom{x}`.toBuild();
  2674 |         expect`\phantom{x^2}`.toBuild();
  2675 |         expect`\phantom{x}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2701}","  2699 |
  2700 | describe(""A smash parser"", function() {
> 2701 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2702 |         expect`\smash{x}`.toParse();
  2703 |         expect`\smash{x^2}`.toParse();
  2704 |         expect`\smash{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2726}","  2724 |
  2725 | describe(""A smash builder"", function() {
> 2726 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2727 |         expect`\smash{x}`.toBuild(nonstrictSettings);
  2728 |         expect`\smash{x^2}`.toBuild(nonstrictSettings);
  2729 |         expect`\smash{x}^2`.toBuild(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2750}","  2748 |
  2749 | describe(""An optional argument parser"", function() {
> 2750 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2751 |         // Note this doesn't actually make an optional argument, but still
  2752 |         // should work
  2753 |         expect`\frac[1]{2}{3}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2758}","  2756 |     });
  2757 |
> 2758 |     it(""should work with sqrts with optional arguments"", function() {
       |    ^ Unknown Test
  2759 |         expect`\sqrt[3]{2}`.toParse();
  2760 |     });
  2761 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2762}","  2760 |     });
  2761 |
> 2762 |     it(""should work when the optional argument is missing"", function() {
       |    ^ Unknown Test
  2763 |         expect`\sqrt{2}`.toParse();
  2764 |         expect`\rule{1em}{2em}`.toParse();
  2765 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2767}","  2765 |     });
  2766 |
> 2767 |     it(""should fail when the optional argument is malformed"", function() {
       |    ^ Unknown Test
  2768 |         expect`\rule[1]{2em}{3em}`.not.toParse();
  2769 |     });
  2770 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2771}","  2769 |     });
  2770 |
> 2771 |     it(""should not work if the optional argument isn't closed"", function() {
       |    ^ Unknown Test
  2772 |         expect`\sqrt[`.not.toParse();
  2773 |     });
  2774 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2821}","  2819 | describe(""A substack function"", function() {
  2820 |
> 2821 |     it(""should build"", function() {
       |    ^ Unknown Test
  2822 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2823 |     });
  2824 |     it(""should accommodate spaces in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2824}","  2822 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2823 |     });
> 2824 |     it(""should accommodate spaces in the argument"", function() {
       |    ^ Unknown Test
  2825 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2826 |     });
  2827 |     it(""should accommodate macros in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2827}","  2825 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2826 |     });
> 2827 |     it(""should accommodate macros in the argument"", function() {
       |    ^ Unknown Test
  2828 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2829 |     });
  2830 |     it(""should accommodate an empty argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2830}","  2828 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2829 |     });
> 2830 |     it(""should accommodate an empty argument"", function() {
       |    ^ Unknown Test
  2831 |         expect`\sum_{\substack{}}  P(i,j)`.toBuild();
  2832 |     });
  2833 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2838}","  2836 | describe(""A smallmatrix environment"", function() {
  2837 |
> 2838 |     it(""should build"", function() {
       |    ^ Unknown Test
  2839 |         expect`\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}`.toBuild();
  2840 |     });
  2841 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2846}","  2844 | describe(""A cases environment"", function() {
  2845 |
> 2846 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2847 |         expect`f(a,b)=\begin{cases}a+1&\text{if }b\text{ is odd}\\a&\text{if }b=0\\a-1&\text{otherwise}\end{cases}`
  2848 |             .toParse();
  2849 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2855}","  2853 | describe(""An rcases environment"", function() {
  2854 |
> 2855 |     it(""should build"", function() {
       |    ^ Unknown Test
  2856 |         expect`\begin{rcases} a &\text{if } b \\ c &\text{if } d \end{rcases}⇒…`
  2857 |             .toBuild();
  2858 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2864}","  2862 | describe(""An aligned environment"", function() {
  2863 |
> 2864 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2865 |         expect`\begin{aligned}a&=b&c&=d\\e&=f\end{aligned}`.toParse();
  2866 |     });
  2867 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2868}","  2866 |     });
  2867 |
> 2868 |     it(""should allow cells in brackets"", function() {
       |    ^ Unknown Test
  2869 |         expect`\begin{aligned}[a]&[b]\\ [c]&[d]\end{aligned}`.toParse();
  2870 |     });
  2871 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2872}","  2870 |     });
  2871 |
> 2872 |     it(""should forbid cells in brackets without space"", function() {
       |    ^ Unknown Test
  2873 |         expect`\begin{aligned}[a]&[b]\\[c]&[d]\end{aligned}`.not.toParse();
  2874 |     });
  2875 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2883}","  2881 |
  2882 | describe(""AMS environments"", function() {
> 2883 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  2884 |         expect`\begin{gather}a+b\\c+d\end{gather}`.not.toParse(nonstrictSettings);
  2885 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.not.toParse(nonstrictSettings);
  2886 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.not.toParse(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2896}","  2894 |
  2895 |     const displayMode = new Settings({displayMode: true});
> 2896 |     it(""should build if in display mode"", () => {
       |    ^ Unknown Test
  2897 |         expect`\begin{gather}a+b\\c+d\end{gather}`.toBuild(displayMode);
  2898 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.toBuild(displayMode);
  2899 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2909}","  2907 |     });
  2908 |
> 2909 |     it(""should build an empty environment"", () => {
       |    ^ Unknown Test
  2910 |         expect`\begin{gather}\end{gather}`.toBuild(displayMode);
  2911 |         expect`\begin{gather*}\end{gather*}`.toBuild(displayMode);
  2912 |         expect`\begin{align}\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2921}","  2919 |     });
  2920 |
> 2921 |     it(""{equation} should fail if argument contains two rows."", () => {
       |    ^ Unknown Test
  2922 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2923 |     });
  2924 |     it(""{equation} should fail if argument contains two columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2924}","  2922 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2923 |     });
> 2924 |     it(""{equation} should fail if argument contains two columns."", () => {
       |    ^ Unknown Test
  2925 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2926 |     });
  2927 |     it(""{split} should fail if argument contains three columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2927}","  2925 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2926 |     });
> 2927 |     it(""{split} should fail if argument contains three columns."", () => {
       |    ^ Unknown Test
  2928 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2929 |     });
  2930 |     it(""{array} should fail if body contains more columns than specification."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2930}","  2928 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2929 |     });
> 2930 |     it(""{array} should fail if body contains more columns than specification."", () => {
       |    ^ Unknown Test
  2931 |         expect`\begin{array}{2}a & b & c\\d & e  f\end{array}`.not.toBuild(displayMode);
  2932 |     });
  2933 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2959}","  2957 |
  2958 | describe(""operatorname support"", function() {
> 2959 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2960 |         expect`\operatorname{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2961 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2962 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}_y x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2970}","  2968 |
  2969 | describe(""href and url commands"", function() {
> 2970 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2971 |         expect`\href{http://example.com/}{\sin}`.toBuild(trustSettings);
  2972 |         expect`\url{http://example.com/}`.toBuild(trustSettings);
  2973 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2975}","  2973 |     });
  2974 |
> 2975 |     it(""should allow empty URLs"", function() {
       |    ^ Unknown Test
  2976 |         expect`\href{}{example here}`.toBuild(trustSettings);
  2977 |         expect`\url{}`.toBuild(trustSettings);
  2978 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2988}","  2986 |     });
  2987 |
> 2988 |     it(""should allow spaces single-character URLs"", () => {
       |    ^ Unknown Test
  2989 |         expect`\href %end`.toParseLike(""\\href{%}end"", trustSettings);
  2990 |         expect`\url %end`.toParseLike(""\\url{%}end"", trustSettings);
  2991 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3009}","  3007 |     });
  3008 |
> 3009 |     it(""should not allow unbalanced brace(s) in url"", function() {
       |    ^ Unknown Test
  3010 |         expect`\href{http://example.com/{a}{bar}`.not.toParse();
  3011 |         expect`\href{http://example.com/}a}{bar}`.not.toParse();
  3012 |         expect`\url{http://example.com/{a}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3100}","  3098 |
  3099 | describe(""A raw text parser"", function() {
> 3100 |     it(""should return null for a omitted optional string"", function() {
       |    ^ Unknown Test
  3101 |         expect`\includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}`.toParse();
  3102 |     });
  3103 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3115}","  3113 |     });
  3114 |
> 3115 |     it(""should still parse on unrecognized control sequences"", function() {
       |    ^ Unknown Test
  3116 |         expect`\error`.toParse(noThrowSettings);
  3117 |     });
  3118 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3120}","  3118 |
  3119 |     describe(""should allow unrecognized controls sequences anywhere, including"", function() {
> 3120 |         it(""in superscripts and subscripts"", function() {
       |        ^ Unknown Test
  3121 |             expect`2_\error`.toBuild(noThrowSettings);
  3122 |             expect`3^{\error}_\error`.toBuild(noThrowSettings);
  3123 |             expect`\int\nolimits^\error_\error`.toBuild(noThrowSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3126}","  3124 |         });
  3125 |
> 3126 |         it(""in fractions"", function() {
       |        ^ Unknown Test
  3127 |             expect`\frac{345}{\error}`.toBuild(noThrowSettings);
  3128 |             expect`\frac\error{\error}`.toBuild(noThrowSettings);
  3129 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3131}","  3129 |         });
  3130 |
> 3131 |         it(""in square roots"", function() {
       |        ^ Unknown Test
  3132 |             expect`\sqrt\error`.toBuild(noThrowSettings);
  3133 |             expect`\sqrt{234\error}`.toBuild(noThrowSettings);
  3134 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3136}","  3134 |         });
  3135 |
> 3136 |         it(""in text boxes"", function() {
       |        ^ Unknown Test
  3137 |             expect`\text{\error}`.toBuild(noThrowSettings);
  3138 |         });
  3139 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3206}","  3204 |
  3205 | describe(""The symbol table integrity"", function() {
> 3206 |     it(""should treat certain symbols as synonyms"", function() {
       |    ^ Unknown Test
  3207 |         expect`<`.toBuildLike`\lt`;
  3208 |         expect`>`.toBuildLike`\gt`;
  3209 |         expect`\left<\frac{1}{x}\right>`.toBuildLike`\left\lt\frac{1}{x}\right\gt`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3224}","  3222 |
  3223 | describe(""A macro expander"", function() {
> 3224 |     it(""should produce individual tokens"", function() {
       |    ^ Unknown Test
  3225 |         expect`e^\foo`.toParseLike(""e^1 23"",
  3226 |             new Settings({macros: {""\\foo"": ""123""}}));
  3227 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3229}","  3227 |     });
  3228 |
> 3229 |     it(""should preserve leading spaces inside macro definition"", function() {
       |    ^ Unknown Test
  3230 |         expect`\text{\foo}`.toParseLike(r`\text{ x}`,
  3231 |             new Settings({macros: {""\\foo"": "" x""}}));
  3232 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3234}","  3232 |     });
  3233 |
> 3234 |     it(""should preserve leading spaces inside macro argument"", function() {
       |    ^ Unknown Test
  3235 |         expect`\text{\foo{ x}}`.toParseLike(r`\text{ x}`,
  3236 |             new Settings({macros: {""\\foo"": ""#1""}}));
  3237 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3239}","  3237 |     });
  3238 |
> 3239 |     it(""should ignore expanded spaces in math mode"", function() {
       |    ^ Unknown Test
  3240 |         expect`\foo`.toParseLike(""x"", new Settings({macros: {""\\foo"": "" x""}}));
  3241 |     });
  3242 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3243}","  3241 |     });
  3242 |
> 3243 |     it(""should consume spaces after control-word macro"", function() {
       |    ^ Unknown Test
  3244 |         expect`\text{\foo }`.toParseLike(r`\text{x}`,
  3245 |             new Settings({macros: {""\\foo"": ""x""}}));
  3246 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3248}","  3246 |     });
  3247 |
> 3248 |     it(""should consume spaces after macro with \\relax"", function() {
       |    ^ Unknown Test
  3249 |         expect`\text{\foo }`.toParseLike(r`\text{}`,
  3250 |             new Settings({macros: {""\\foo"": ""\\relax""}}));
  3251 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3253}","  3251 |     });
  3252 |
> 3253 |     it(""should not consume spaces after control-word expansion"", function() {
       |    ^ Unknown Test
  3254 |         expect`\text{\\ }`.toParseLike(r`\text{ }`,
  3255 |             new Settings({macros: {""\\\\"": ""\\relax""}}));
  3256 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3258}","  3256 |     });
  3257 |
> 3258 |     it(""should consume spaces after \\relax"", function() {
       |    ^ Unknown Test
  3259 |         expect`\text{\relax }`.toParseLike`\text{}`;
  3260 |     });
  3261 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3262}","  3260 |     });
  3261 |
> 3262 |     it(""should consume spaces after control-word function"", function() {
       |    ^ Unknown Test
  3263 |         expect`\text{\KaTeX }`.toParseLike`\text{\KaTeX}`;
  3264 |     });
  3265 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3266}","  3264 |     });
  3265 |
> 3266 |     it(""should preserve spaces after control-symbol macro"", function() {
       |    ^ Unknown Test
  3267 |         expect`\text{\% y}`.toParseLike(r`\text{x y}`,
  3268 |             new Settings({macros: {""\\%"": ""x""}}));
  3269 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3271}","  3269 |     });
  3270 |
> 3271 |     it(""should preserve spaces after control-symbol function"", function() {
       |    ^ Unknown Test
  3272 |         expect`\text{\' }`.toParse();
  3273 |     });
  3274 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3275}","  3273 |     });
  3274 |
> 3275 |     it(""should consume spaces between arguments"", function() {
       |    ^ Unknown Test
  3276 |         expect`\text{\foo 1 2}`.toParseLike(r`\text{12end}`,
  3277 |             new Settings({macros: {""\\foo"": ""#1#2end""}}));
  3278 |         expect`\text{\foo {1} {2}}`.toParseLike(r`\text{12end}`,",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3282}","  3280 |     });
  3281 |
> 3282 |     it(""should allow for multiple expansion"", function() {
       |    ^ Unknown Test
  3283 |         expect`1\foo2`.toParseLike(""1aa2"", new Settings({macros: {
  3284 |             ""\\foo"": ""\\bar\\bar"",
  3285 |             ""\\bar"": ""a"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3289}","  3287 |     });
  3288 |
> 3289 |     it(""should allow for multiple expansion with argument"", function() {
       |    ^ Unknown Test
  3290 |         expect`1\foo2`.toParseLike(""12222"", new Settings({macros: {
  3291 |             ""\\foo"": ""\\bar{#1}\\bar{#1}"",
  3292 |             ""\\bar"": ""#1#1"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3296}","  3294 |     });
  3295 |
> 3296 |     it(""should allow for macro argument"", function() {
       |    ^ Unknown Test
  3297 |         expect`\foo\bar`.toParseLike(""(xyz)"", new Settings({macros: {
  3298 |             ""\\foo"": ""(#1)"",
  3299 |             ""\\bar"": ""xyz"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3303}","  3301 |     });
  3302 |
> 3303 |     it(""should allow properly nested group for macro argument"", function() {
       |    ^ Unknown Test
  3304 |         expect`\foo{e^{x_{12}+3}}`.toParseLike(""(e^{x_{12}+3})"",
  3305 |             new Settings({macros: {""\\foo"": ""(#1)""}}));
  3306 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3308}","  3306 |     });
  3307 |
> 3308 |     it(""should delay expansion if preceded by \\expandafter"", function() {
       |    ^ Unknown Test
  3309 |         expect`\expandafter\foo\bar`.toParseLike(""x+y"", new Settings({macros: {
  3310 |             ""\\foo"": ""#1+#2"",
  3311 |             ""\\bar"": ""xy"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3318}","  3316 |     });
  3317 |
> 3318 |     it(""should not expand if preceded by \\noexpand"", function() {
       |    ^ Unknown Test
  3319 |         // \foo is not expanded and interpreted as if its meaning were \relax
  3320 |         expect`\noexpand\foo y`.toParseLike(""y"",
  3321 |             new Settings({macros: {""\\foo"": ""x""}}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3331}","  3329 |     });
  3330 |
> 3331 |     it(""should allow for space macro argument (text version)"", function() {
       |    ^ Unknown Test
  3332 |         expect`\text{\foo\bar}`.toParseLike(r`\text{( )}`, new Settings({macros: {
  3333 |             ""\\foo"": ""(#1)"",
  3334 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3338}","  3336 |     });
  3337 |
> 3338 |     it(""should allow for space macro argument (math version)"", function() {
       |    ^ Unknown Test
  3339 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3340 |             ""\\foo"": ""(#1)"",
  3341 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3345}","  3343 |     });
  3344 |
> 3345 |     it(""should allow for space second argument (text version)"", function() {
       |    ^ Unknown Test
  3346 |         expect`\text{\foo\bar\bar}`.toParseLike(r`\text{( , )}`, new Settings({macros: {
  3347 |             ""\\foo"": ""(#1,#2)"",
  3348 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3352}","  3350 |     });
  3351 |
> 3352 |     it(""should treat \\relax as empty argument"", function() {
       |    ^ Unknown Test
  3353 |         expect`\text{\foo\relax x}`.toParseLike(r`\text{(,x)}`, new Settings({macros: {
  3354 |             ""\\foo"": ""(#1,#2)"",
  3355 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3358}","  3356 |     });
  3357 |
> 3358 |     it(""should allow for space second argument (math version)"", function() {
       |    ^ Unknown Test
  3359 |         expect`\foo\bar\bar`.toParseLike(""(,)"", new Settings({macros: {
  3360 |             ""\\foo"": ""(#1,#2)"",
  3361 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3365}","  3363 |     });
  3364 |
> 3365 |     it(""should allow for empty macro argument"", function() {
       |    ^ Unknown Test
  3366 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3367 |             ""\\foo"": ""(#1)"",
  3368 |             ""\\bar"": """",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3372}","  3370 |     });
  3371 |
> 3372 |     it(""should allow for space function arguments"", function() {
       |    ^ Unknown Test
  3373 |         expect`\frac\bar\bar`.toParseLike(r`\frac{}{}`, new Settings({macros: {
  3374 |             ""\\bar"": "" "",
  3375 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3378}","  3376 |     });
  3377 |
> 3378 |     it(""should build \\overset and \\underset"", function() {
       |    ^ Unknown Test
  3379 |         expect`\overset{f}{\rightarrow} Y`.toBuild();
  3380 |         expect`\underset{f}{\rightarrow} Y`.toBuild();
  3381 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3383}","  3381 |     });
  3382 |
> 3383 |     it(""should build \\iff, \\implies, \\impliedby"", function() {
       |    ^ Unknown Test
  3384 |         expect`X \iff Y`.toBuild();
  3385 |         expect`X \implies Y`.toBuild();
  3386 |         expect`X \impliedby Y`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3389}","  3387 |     });
  3388 |
> 3389 |     it(""should allow aliasing characters"", function() {
       |    ^ Unknown Test
  3390 |         expect`x’=c`.toParseLike(""x'=c"", new Settings({macros: {
  3391 |             ""’"": ""'"",
  3392 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3395}","  3393 |     });
  3394 |
> 3395 |     it(""\\@firstoftwo should consume both, and avoid errors"", function() {
       |    ^ Unknown Test
  3396 |         expect`\@firstoftwo{yes}{no}`.toParseLike`yes`;
  3397 |         expect`\@firstoftwo{yes}{1'_2^3}`.toParseLike`yes`;
  3398 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3400}","  3398 |     });
  3399 |
> 3400 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3401 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3402 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3403 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3405}","  3403 |     });
  3404 |
> 3405 |     it(""\\@ifnextchar should not consume nonspaces"", function() {
       |    ^ Unknown Test
  3406 |         expect`\@ifnextchar!{yes}{no}!!`.toParseLike`yes!!`;
  3407 |         expect`\@ifnextchar!{yes}{no}?!`.toParseLike`no?!`;
  3408 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3410}","  3408 |     });
  3409 |
> 3410 |     it(""\\@ifnextchar should consume spaces"", function() {
       |    ^ Unknown Test
  3411 |         expect`\def\x#1{\@ifnextchar x{yes}{no}}\x{}x\x{} x`
  3412 |             .toParseLike`yesxyesx`;
  3413 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3415}","  3413 |     });
  3414 |
> 3415 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3416 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3417 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3418 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3420}","  3418 |     });
  3419 |
> 3420 |     it(""\\TextOrMath should work immediately"", function() {
       |    ^ Unknown Test
  3421 |         expect`\TextOrMath{text}{math}`.toParseLike`math`;
  3422 |     });
  3423 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3424}","  3422 |     });
  3423 |
> 3424 |     it(""\\TextOrMath should work after other math"", function() {
       |    ^ Unknown Test
  3425 |         expect`x+\TextOrMath{text}{math}`.toParseLike`x+math`;
  3426 |     });
  3427 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3428}","  3426 |     });
  3427 |
> 3428 |     it(""\\TextOrMath should work immediately after \\text"", function() {
       |    ^ Unknown Test
  3429 |         expect`\text{\TextOrMath{text}{math}}`.toParseLike`\text{text}`;
  3430 |     });
  3431 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3432}","  3430 |     });
  3431 |
> 3432 |     it(""\\TextOrMath should work later after \\text"", function() {
       |    ^ Unknown Test
  3433 |         expect`\text{hello \TextOrMath{text}{math}}`.toParseLike`\text{hello text}`;
  3434 |     });
  3435 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3436}","  3434 |     });
  3435 |
> 3436 |     it(""\\TextOrMath should work immediately after \\text ends"", function() {
       |    ^ Unknown Test
  3437 |         expect`\text{\TextOrMath{text}{math}}\TextOrMath{text}{math}`
  3438 |             .toParseLike`\text{text}math`;
  3439 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3441}","  3439 |     });
  3440 |
> 3441 |     it(""\\TextOrMath should work immediately after $"", function() {
       |    ^ Unknown Test
  3442 |         expect`\text{$\TextOrMath{text}{math}$}`.toParseLike`\text{$math$}`;
  3443 |     });
  3444 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3445}","  3443 |     });
  3444 |
> 3445 |     it(""\\TextOrMath should work later after $"", function() {
       |    ^ Unknown Test
  3446 |         expect`\text{$x+\TextOrMath{text}{math}$}`.toParseLike`\text{$x+math$}`;
  3447 |     });
  3448 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3449}","  3447 |     });
  3448 |
> 3449 |     it(""\\TextOrMath should work immediately after $ ends"", function() {
       |    ^ Unknown Test
  3450 |         expect`\text{$\TextOrMath{text}{math}$\TextOrMath{text}{math}}`
  3451 |             .toParseLike`\text{$math$text}`;
  3452 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3454}","  3452 |     });
  3453 |
> 3454 |     it(""\\TextOrMath should work in a macro"", function() {
       |    ^ Unknown Test
  3455 |         expect`\mode\text{\mode$\mode$\mode}\mode`
  3456 |             .toParseLike(r`math\text{text$math$text}math`, new Settings({macros: {
  3457 |                 ""\\mode"": ""\\TextOrMath{text}{math}"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3461}","  3459 |     });
  3460 |
> 3461 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3462 |         expect`\text\mode`.toParseLike(r`\text t`, new Settings({macros:
  3463 |             {""\\mode"": ""\\TextOrMath{t}{m}""}}));
  3464 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3493}","  3491 |     });
  3492 |
> 3493 |     it(""should build Unicode private area characters"", function() {
       |    ^ Unknown Test
  3494 |         expect`\gvertneqq\lvertneqq\ngeqq\ngeqslant\nleqq`.toBuild();
  3495 |         expect`\nleqslant\nshortmid\nshortparallel\varsubsetneq`.toBuild();
  3496 |         expect`\varsubsetneqq\varsupsetneq\varsupsetneqq`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3499}","  3497 |     });
  3498 |
> 3499 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3500 |         expect`\text\mode`.toParseLike(r`\text{text}`, new Settings({macros:
  3501 |             {""\\mode"": ""\\TextOrMath{text}{math}""}}));
  3502 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3504}","  3502 |     });
  3503 |
> 3504 |     it(""\\gdef defines macros"", function() {
       |    ^ Unknown Test
  3505 |         expect`\gdef\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3506 |         expect`\gdef\foo{hi}\foo+\text\foo`.toParseLike`hi+\text{hi}`;
  3507 |         expect`\gdef\foo#1{hi #1}\text{\foo{Alice}, \foo{Bob}}`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3522}","  3520 |     });
  3521 |
> 3522 |     it(""\\gdef defines macros with delimited parameter"", function() {
       |    ^ Unknown Test
  3523 |         expect`\gdef\foo|#1||{#1}\text{\foo| x y ||}`.toParseLike`\text{ x y }`;
  3524 |         expect`\gdef\foo#1|#2{#1+#2}\foo 1 2 |34`.toParseLike`12+34`;
  3525 |         expect`\gdef\foo#1#{#1}\foo1^{23}`.toParseLike`1^{23}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3531}","  3529 |     });
  3530 |
> 3531 |     it(""\\xdef should expand definition"", function() {
       |    ^ Unknown Test
  3532 |         expect`\def\foo{a}\xdef\bar{\foo}\def\foo{}\bar`.toParseLike`a`;
  3533 |         // \def\noexpand\foo{} expands into \def\foo{}
  3534 |         expect`\def\foo{a}\xdef\bar{\def\noexpand\foo{}}\foo\bar\foo`.toParseLike`a`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3541}","  3539 |     });
  3540 |
> 3541 |     it(""\\def should be handled in Parser"", () => {
       |    ^ Unknown Test
  3542 |         expect`\gdef\foo{1}`.toParse(new Settings({maxExpand: 0}));
  3543 |         expect`2^\def\foo{1}2`.not.toParse();
  3544 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3546}","  3544 |     });
  3545 |
> 3546 |     it(""\\def works locally"", () => {
       |    ^ Unknown Test
  3547 |         expect`\def\x{1}\x{\def\x{2}\x{\def\x{3}\x}\x}\x`
  3548 |             .toParseLike`1{2{3}2}1`;
  3549 |         expect`\def\x{1}\x\def\x{2}\x{\def\x{3}\x\def\x{4}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3553}","  3551 |     });
  3552 |
> 3553 |     it(""\\gdef overrides at all levels"", () => {
       |    ^ Unknown Test
  3554 |         expect`\def\x{1}\x{\def\x{2}\x{\gdef\x{3}\x}\x}\x`
  3555 |             .toParseLike`1{2{3}3}3`;
  3556 |         expect`\def\x{1}\x{\def\x{2}\x{\global\def\x{3}\x}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3562}","  3560 |     });
  3561 |
> 3562 |     it(""\\global needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3563 |         expect`\global\def\foo{}\foo`.toParseLike``;
  3564 |         expect`\global\edef\foo{}\foo`.toParseLike``;
  3565 |         expect`\def\DEF{\def}\global\DEF\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3572}","  3570 |     });
  3571 |
> 3572 |     it(""\\long needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3573 |         expect`\long\def\foo{}\foo`.toParseLike``;
  3574 |         expect`\long\edef\foo{}\foo`.toParseLike``;
  3575 |         expect`\long\global\def\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3579}","  3577 |     });
  3578 |
> 3579 |     it(""Macro arguments do not generate groups"", () => {
       |    ^ Unknown Test
  3580 |         expect`\def\x{1}\x\def\foo#1{#1}\foo{\x\def\x{2}\x}\x`
  3581 |             .toParseLike`1122`;
  3582 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3584}","  3582 |     });
  3583 |
> 3584 |     it(""\\textbf arguments do generate groups"", () => {
       |    ^ Unknown Test
  3585 |         expect`\def\x{1}\x\textbf{\x\def\x{2}\x}\x`.toParseLike`1\textbf{12}1`;
  3586 |     });
  3587 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3588}","  3586 |     });
  3587 |
> 3588 |     it(""\\sqrt optional arguments generate groups"", () => {
       |    ^ Unknown Test
  3589 |         expect`\def\x{1}\def\y{1}\x\y\sqrt[\def\x{2}\x]{\def\y{2}\y}\x\y`
  3590 |             .toParseLike`11\sqrt[2]{2}11`;
  3591 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3593}","  3591 |     });
  3592 |
> 3593 |     it(""array cells generate groups"", () => {
       |    ^ Unknown Test
  3594 |         expect`\def\x{1}\begin{matrix}\x&\def\x{2}\x&\x\end{matrix}\x`
  3595 |             .toParseLike`\begin{matrix}1&2&1\end{matrix}1`;
  3596 |         expect`\def\x{1}\begin{matrix}\def\x{2}\x&\x\end{matrix}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3624}","  3622 |     });
  3623 |
> 3624 |     it(""\\let copies the definition"", () => {
       |    ^ Unknown Test
  3625 |         expect`\let\foo=\frac\def\frac{}\foo12`.toParseLike`\frac12`;
  3626 |         expect`\def\foo{1}\let\bar\foo\def\foo{2}\bar`.toParseLike`1`;
  3627 |         expect`\let\foo=\kern\edef\bar{\foo1em}\let\kern=\relax\bar`.toParseLike`\kern1em`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3644}","  3642 |     });
  3643 |
> 3644 |     it(""\\futurelet should parse correctly"", () => {
       |    ^ Unknown Test
  3645 |         expect`\futurelet\foo\frac1{2+\foo}`.toParseLike`\frac1{2+1}`;
  3646 |     });
  3647 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3648}","  3646 |     });
  3647 |
> 3648 |     it(""macros argument can simulate \\let"", () => {
       |    ^ Unknown Test
  3649 |         expect`\int`.toParseLike(""\\int\\limits"", {macros: {
  3650 |             ""\\Oldint"": {
  3651 |                 tokens: [{text: ""\\int"", noexpand: true}],",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3675}","  3673 |     });
  3674 |
> 3675 |     it(""\\newcommand defines new macros"", () => {
       |    ^ Unknown Test
  3676 |         expect`\newcommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3677 |         expect`\newcommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3678 |         // Function detection",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3690}","  3688 |     });
  3689 |
> 3690 |     it(""\\renewcommand redefines macros"", () => {
       |    ^ Unknown Test
  3691 |         expect`\renewcommand\foo{x^2}\foo+\foo`.not.toParse();
  3692 |         expect`\renewcommand{\foo}{x^2}\foo+\foo`.not.toParse();
  3693 |         expect`\renewcommand\bar{x^2}\bar+\bar`.toParseLike`x^2+x^2`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3698}","  3696 |     });
  3697 |
> 3698 |     it(""\\providecommand defines but does not redefine macros"", () => {
       |    ^ Unknown Test
  3699 |         expect`\providecommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3700 |         expect`\providecommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3701 |         expect`\newcommand{\foo}{1}\foo\providecommand{\foo}{2}\foo`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3709}","  3707 |     });
  3708 |
> 3709 |     it(""\\newcommand is local"", () => {
       |    ^ Unknown Test
  3710 |         expect`\newcommand\foo{1}\foo{\renewcommand\foo{2}\foo}\foo`
  3711 |             .toParseLike`1{2}1`;
  3712 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3714}","  3712 |     });
  3713 |
> 3714 |     it(""\\newcommand accepts number of arguments"", () => {
       |    ^ Unknown Test
  3715 |         expect`\newcommand\foo[1]{#1^2}\foo x+\foo{y}`.toParseLike`x^2+y^2`;
  3716 |         expect`\newcommand\foo[10]{#1^2}\foo 0123456789`.toParseLike`0^2`;
  3717 |         expect`\newcommand\foo[x]{}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3723}","  3721 |     // This may change in the future, if we support the extra features of
  3722 |     // \hspace.
> 3723 |     it(""should treat \\hspace, \\hskip like \\kern"", function() {
       |    ^ Unknown Test
  3724 |         expect`\hspace{1em}`.toParseLike`\kern1em`;
  3725 |         expect`\hskip{1em}`.toParseLike`\kern1em`;
  3726 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3728}","  3726 |     });
  3727 |
> 3728 |     it(""should expand \\limsup as expected"", () => {
       |    ^ Unknown Test
  3729 |         expect`\limsup`.toParseLike`\operatorname*{lim\,sup}`;
  3730 |     });
  3731 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3732}","  3730 |     });
  3731 |
> 3732 |     it(""should expand \\liminf as expected"", () => {
       |    ^ Unknown Test
  3733 |         expect`\liminf`.toParseLike`\operatorname*{lim\,inf}`;
  3734 |     });
  3735 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3736}","  3734 |     });
  3735 |
> 3736 |     it(""should expand AMS log-like symbols as expected"", () => {
       |    ^ Unknown Test
  3737 |         expect`\injlim`.toParseLike`\operatorname*{inj\,lim}`;
  3738 |         expect`\projlim`.toParseLike`\operatorname*{proj\,lim}`;
  3739 |         expect`\varlimsup`.toParseLike`\operatorname*{\overline{lim}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3746}","  3744 |     });
  3745 |
> 3746 |     it(""should expand \\plim as expected"", () => {
       |    ^ Unknown Test
  3747 |         expect`\plim`.toParseLike`\mathop{\operatorname{plim}}\limits`;
  3748 |     });
  3749 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3750}","  3748 |     });
  3749 |
> 3750 |     it(""should expand \\argmin as expected"", () => {
       |    ^ Unknown Test
  3751 |         expect`\argmin`.toParseLike`\operatorname*{arg\,min}`;
  3752 |     });
  3753 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3754}","  3752 |     });
  3753 |
> 3754 |     it(""should expand \\argmax as expected"", () => {
       |    ^ Unknown Test
  3755 |         expect`\argmax`.toParseLike`\operatorname*{arg\,max}`;
  3756 |     });
  3757 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3758}","  3756 |     });
  3757 |
> 3758 |     it(""should expand \\bra as expected"", () => {
       |    ^ Unknown Test
  3759 |         expect`\bra{\phi}`.toParseLike`\mathinner{\langle{\phi}|}`;
  3760 |     });
  3761 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3762}","  3760 |     });
  3761 |
> 3762 |     it(""should expand \\ket as expected"", () => {
       |    ^ Unknown Test
  3763 |         expect`\ket{\psi}`.toParseLike`\mathinner{|{\psi}\rangle}`;
  3764 |     });
  3765 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3766}","  3764 |     });
  3765 |
> 3766 |     it(""should expand \\braket as expected"", () => {
       |    ^ Unknown Test
  3767 |         expect`\braket{\phi|\psi}`.toParseLike`\mathinner{\langle{\phi|\psi}\rangle}`;
  3768 |     });
  3769 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3770}","  3768 |     });
  3769 |
> 3770 |     it(""should expand \\Bra as expected"", () => {
       |    ^ Unknown Test
  3771 |         expect`\Bra{\phi}`.toParseLike`\left\langle\phi\right|`;
  3772 |     });
  3773 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3774}","  3772 |     });
  3773 |
> 3774 |     it(""should expand \\Ket as expected"", () => {
       |    ^ Unknown Test
  3775 |         expect`\Ket{\psi}`.toParseLike`\left|\psi\right\rangle`;
  3776 |     });
  3777 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3778}","  3776 |     });
  3777 |
> 3778 |     it(""should expand \\Braket as expected"", () => {
       |    ^ Unknown Test
  3779 |         expect`\Braket{ ϕ | \frac{∂^2}{∂ t^2} | ψ }`.toParseLike`\left\langle ϕ\,\middle\vert\,\frac{∂^2}{∂ t^2}\,\middle\vert\, ψ\right\rangle`;
  3780 |     });
  3781 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3782}","  3780 |     });
  3781 |
> 3782 |     it(""should expand \\set as expected"", () => {
       |    ^ Unknown Test
  3783 |         expect`\set{x|x<5|S|}`.toParseLike`\{\,x\mid x<5|S|\,\}`;
  3784 |         // \set doesn't support special || or \| handling
  3785 |         expect`\set{x||x<5|S|}`.toParseLike`\{\,x\mid |x<5|S|\,\}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3789}","  3787 |     });
  3788 |
> 3789 |     it(""should expand \\Set as expected"", () => {
       |    ^ Unknown Test
  3790 |         expect`\Set{ x | x<\frac 1 2 |S| }`
  3791 |         .toParseLike`\left\{\: x\;\middle\vert\; x<\frac 1 2 |S| \:\right\}`;
  3792 |         expect`\Set{ x || x<\frac 1 2 |S| }`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3802}","  3800 |     const displayMode = new Settings({displayMode: true});
  3801 |
> 3802 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  3803 |         expect`\tag{hi}x+y`.not.toParse();
  3804 |     });
  3805 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3806}","  3804 |     });
  3805 |
> 3806 |     it(""should fail with multiple tags"", () => {
       |    ^ Unknown Test
  3807 |         expect`\tag{1}\tag{2}x+y`.not.toParse(displayMode);
  3808 |     });
  3809 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3810}","  3808 |     });
  3809 |
> 3810 |     it(""should fail with multiple tags in one row"", () => {
       |    ^ Unknown Test
  3811 |         expect`\begin{align}\tag{1}x+y\tag{2}\end{align}`.not.toParse(displayMode);
  3812 |     });
  3813 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3814}","  3812 |     });
  3813 |
> 3814 |     it(""should work with one tag per row"", () => {
       |    ^ Unknown Test
  3815 |         expect`\begin{align}\tag{1}x\\&+y\tag{2}\end{align}`.toParse(displayMode);
  3816 |     });
  3817 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3818}","  3816 |     });
  3817 |
> 3818 |     it(""should work with \\nonumber/\\notag"", () => {
       |    ^ Unknown Test
  3819 |         expect`\begin{align}\tag{1}\nonumber x\\&+y\notag\end{align}`
  3820 |         .toParseLike(r`\begin{align}\tag{1}x\\&+y\nonumber\end{align}`, displayMode);
  3821 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3823}","  3821 |     });
  3822 |
> 3823 |     it(""should build"", () => {
       |    ^ Unknown Test
  3824 |         expect`\tag{hi}x+y`.toBuild(displayMode);
  3825 |     });
  3826 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3827}","  3825 |     });
  3826 |
> 3827 |     it(""should ignore location of \\tag"", () => {
       |    ^ Unknown Test
  3828 |         expect`\tag{hi}x+y`.toParseLike(r`x+y\tag{hi}`, displayMode);
  3829 |     });
  3830 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3831}","  3829 |     });
  3830 |
> 3831 |     it(""should handle \\tag* like \\tag"", () => {
       |    ^ Unknown Test
  3832 |         expect`\tag{hi}x+y`.toParseLike(r`\tag*{({hi})}x+y`, displayMode);
  3833 |     });
  3834 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3860}","  3858 |
  3859 | describe(""\\@binrel automatic bin/rel/ord"", () => {
> 3860 |     it(""should generate proper class"", () => {
       |    ^ Unknown Test
  3861 |         expect`L\@binrel+xR`.toParseLike`L\mathbin xR`;
  3862 |         expect`L\@binrel=xR`.toParseLike`L\mathrel xR`;
  3863 |         expect`L\@binrel xxR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3869}","  3867 |     });
  3868 |
> 3869 |     it(""should base on just first character in group"", () => {
       |    ^ Unknown Test
  3870 |         expect`L\@binrel{+x}xR`.toParseLike`L\mathbin xR`;
  3871 |         expect`L\@binrel{=x}xR`.toParseLike`L\mathrel xR`;
  3872 |         expect`L\@binrel{xx}xR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3889}","  3887 |
  3888 | describe(""Unicode accents"", function() {
> 3889 |     it(""should parse Latin-1 letters in math mode"", function() {
       |    ^ Unknown Test
  3890 |         // TODO(edemaine): Unsupported Latin-1 letters in math: ÇÐÞçðþ
  3891 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ`
  3892 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3909}","  3907 |     });
  3908 |
> 3909 |     it(""should parse Latin-1 letters in text mode"", function() {
       |    ^ Unknown Test
  3910 |         // TODO(edemaine): Unsupported Latin-1 letters in text: ÇÐÞçðþ
  3911 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}`
  3912 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3929}","  3927 |     });
  3928 |
> 3929 |     it(""should support \\aa in text mode"", function() {
       |    ^ Unknown Test
  3930 |         expect`\text{\aa\AA}`.toParseLike(r`\text{\r a\r A}`, strictSettings);
  3931 |         expect`\aa`.not.toParse(strictSettings);
  3932 |         expect`\Aa`.not.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3940}","  3938 |     });
  3939 |
> 3940 |     it(""should parse multi-accented characters"", function() {
       |    ^ Unknown Test
  3941 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3942 |         // Doesn't parse quite the same as
  3943 |         // ""\\text{\\'{\\^a}\\'{\\=a}\\'{\\u a}}"" because of the ordgroups.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3946}","  3944 |     });
  3945 |
> 3946 |     it(""should parse accented i's and j's"", function() {
       |    ^ Unknown Test
  3947 |         expect`íȷ́`.toParseLike(r`\acute ı\acute ȷ`, nonstrictSettings);
  3948 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3949 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3953}","  3951 |
  3952 | describe(""Unicode"", function() {
> 3953 |     it(""should parse negated relations"", function() {
       |    ^ Unknown Test
  3954 |         expect`∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌`.toParse(strictSettings);
  3955 |     });
  3956 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3957}","  3955 |     });
  3956 |
> 3957 |     it(""should build relations"", function() {
       |    ^ Unknown Test
  3958 |         expect`∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌`.toBuild(strictSettings);
  3959 |     });
  3960 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3961}","  3959 |     });
  3960 |
> 3961 |     it(""should parse relations"", function() {
       |    ^ Unknown Test
  3962 |         // These characters are not in the KaTeX fonts. So they build with an error message.
  3963 |         expect`⊶⊷`.toParse();
  3964 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3966}","  3964 |     });
  3965 |
> 3966 |     it(""should build big operators"", function() {
       |    ^ Unknown Test
  3967 |         expect`∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆`.toBuild(strictSettings);
  3968 |     });
  3969 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3970}","  3968 |     });
  3969 |
> 3970 |     it(""should build more relations"", function() {
       |    ^ Unknown Test
  3971 |         expect`⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋`.toBuild(strictSettings);
  3972 |     });
  3973 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3984}","  3982 |     });
  3983 |
> 3984 |     it(""should build arrows"", function() {
       |    ^ Unknown Test
  3985 |         expect`←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉`.toBuild(strictSettings);
  3986 |     });
  3987 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3988}","  3986 |     });
  3987 |
> 3988 |     it(""should build more arrows"", function() {
       |    ^ Unknown Test
  3989 |         expect`⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼`.toBuild(strictSettings);
  3990 |     });
  3991 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4074}","  4072 |
  4073 | describe(""The maxExpand setting"", () => {
> 4074 |     it(""should prevent expansion"", () => {
       |    ^ Unknown Test
  4075 |         expect`\gdef\foo{1}\foo`.toParse();
  4076 |         expect`\gdef\foo{1}\foo`.toParse(new Settings({maxExpand: 1}));
  4077 |         expect`\gdef\foo{1}\foo`.not.toParse(new Settings({maxExpand: 0}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4080}","  4078 |     });
  4079 |
> 4080 |     it(""should prevent infinite loops"", () => {
       |    ^ Unknown Test
  4081 |         expect`\gdef\foo{\foo}\foo`.not.toParse(
  4082 |             new Settings({maxExpand: 10}));
  4083 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4085}","  4083 |     });
  4084 |
> 4085 |     it(""should prevent exponential blowup via \\edef"", () => {
       |    ^ Unknown Test
  4086 |         expect`\edef0{x}\edef0{00}\edef0{00}\edef0{00}\edef0{00}`.not.toParse(
  4087 |             new Settings({maxExpand: 10}));
  4088 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4136}","  4134 |
  4135 | describe(""Newlines via \\\\ and \\newline"", function() {
> 4136 |     it(""should build \\\\ without the optional argument and \\newline the same"", () => {
       |    ^ Unknown Test
  4137 |         expect`hello \\ world`.toBuildLike`hello \newline world`;
  4138 |     });
  4139 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4140}","  4138 |     });
  4139 |
> 4140 |     it(""should not allow \\newline to scan for an optional size argument"", () => {
       |    ^ Unknown Test
  4141 |         expect`hello \newline[w]orld`.toBuild();
  4142 |     });
  4143 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4144}","  4142 |     });
  4143 |
> 4144 |     it(""should not allow \\cr at top level"", () => {
       |    ^ Unknown Test
  4145 |         expect`hello \cr world`.not.toBuild();
  4146 |     });
  4147 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4159}","  4157 |
  4158 | describe(""Symbols"", function() {
> 4159 |     it(""should parse \\text{\\i\\j}"", () => {
       |    ^ Unknown Test
  4160 |         expect`\text{\i\j}`.toBuild(strictSettings);
  4161 |     });
  4162 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4163}","  4161 |     });
  4162 |
> 4163 |     it(""should parse spacing functions in math or text mode"", () => {
       |    ^ Unknown Test
  4164 |         expect`A\;B\,C\nobreakspace \text{A\;B\,C\nobreakspace}`.toBuild(strictSettings);
  4165 |     });
  4166 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4167}","  4165 |     });
  4166 |
> 4167 |     it(""should build \\minuso"", () => {
       |    ^ Unknown Test
  4168 |         expect`\\minuso`.toBuild(strictSettings);
  4169 |     });
  4170 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4171}","  4169 |     });
  4170 |
> 4171 |     it(""should render ligature commands like their unicode characters"", () => {
       |    ^ Unknown Test
  4172 |         expect`\text{\ae\AE\oe\OE\o\O\ss}`.toBuildLike(r`\text{æÆœŒøØß}`, strictSettings);
  4173 |     });
  4174 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4177}","  4175 |
  4176 | describe(""strict setting"", function() {
> 4177 |     it(""should allow unicode text when not strict"", () => {
       |    ^ Unknown Test
  4178 |         expect`é`.toParse(new Settings(nonstrictSettings));
  4179 |         expect`試`.toParse(new Settings(nonstrictSettings));
  4180 |         expect`é`.toParse(new Settings({strict: ""ignore""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4188}","  4186 |     });
  4187 |
> 4188 |     it(""should forbid unicode text when strict"", () => {
       |    ^ Unknown Test
  4189 |         expect`é`.not.toParse(new Settings({strict: true}));
  4190 |         expect`試`.not.toParse(new Settings({strict: true}));
  4191 |         expect`é`.not.toParse(new Settings({strict: ""error""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4199}","  4197 |     });
  4198 |
> 4199 |     it(""should warn about unicode text when default"", () => {
       |    ^ Unknown Test
  4200 |         expect`é`.toWarn(new Settings());
  4201 |         expect`試`.toWarn(new Settings());
  4202 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4204}","  4202 |     });
  4203 |
> 4204 |     it(""should always allow unicode text in text mode"", () => {
       |    ^ Unknown Test
  4205 |         expect`\text{é試}`.toParse(nonstrictSettings);
  4206 |         expect`\text{é試}`.toParse(strictSettings);
  4207 |         expect`\text{é試}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4210}","  4208 |     });
  4209 |
> 4210 |     it(""should warn about top-level \\newline in display mode"", () => {
       |    ^ Unknown Test
  4211 |         expect`x\\y`.toWarn(new Settings({displayMode: true}));
  4212 |         expect`x\\y`.toParse(new Settings({displayMode: false}));
  4213 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4259}","  4257 |         }).toThrow(errorMessage);
  4258 |     });
> 4259 |     it(""should add font metrics to metrics map and render successfully"", () => {
       |    ^ Unknown Test
  4260 |         const mockMetrics = {};
  4261 |         // mock font metrics for the symbols that we added previously
  4262 |         for (let number = 0; number <= 9; number++) {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4295}","  4293 |
  4294 | describe(""\\relax"", () => {
> 4295 |     it(""should stop the expansion"", () => {
       |    ^ Unknown Test
  4296 |         expect`\kern2\relax em`.not.toParse();
  4297 |     });
  4298 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4301}","  4299 |
  4300 | describe(""\\emph"", () => {
> 4301 |     it(""should toggle italics"", () => {
       |    ^ Unknown Test
  4302 |         expect`\emph{foo \emph{bar}}`.toBuildLike`\textit{foo \textup{bar}}`;
  4303 |     });
  4304 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4305}","  4303 |     });
  4304 |
> 4305 |     it(""should toggle italics within text"", () => {
       |    ^ Unknown Test
  4306 |         expect`\text{\emph{foo \emph{bar}}}`.toBuildLike`\text{\textit{foo \textup{bar}}}`;
  4307 |     });
  4308 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4309}","  4307 |     });
  4308 |
> 4309 |     it(""should toggle italics within textup"", () => {
       |    ^ Unknown Test
  4310 |         expect`\textup{\emph{foo \emph{bar}}}`.toBuildLike`\textup{\textit{foo \textup{bar}}}`;
  4311 |     });
  4312 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4313}","  4311 |     });
  4312 |
> 4313 |     it(""should toggle italics within textit"", () => {
       |    ^ Unknown Test
  4314 |         expect`\textit{\emph{foo \emph{bar}}}`.toBuildLike`\textit{\textup{foo \textit{bar}}}`;
  4315 |     });
  4316 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 132}","  130 |         });
  131 |         it(""complains about mismatched \\verb with end of line"", function() {
> 132 |             expect(""\\verb|hello\nworld|"").toFailWithParseError(
      |            ^ Redundant Assertion
  133 |                 ""\\verb ended by end of line instead of matching delimiter"");
  134 |         });
  135 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 291}","  289 |     describe(""#_innerLex"", function() {
  290 |         it(""rejects lone surrogate char"", function() {
> 291 |             expect(""\udcba "").toFailWithParseError(
      |            ^ Redundant Assertion
  292 |                    ""Unexpected character: '\udcba' at position 1:"" +
  293 |                     "" \udcba\u0332 "");
  294 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 296}","  294 |         });
  295 |         it(""rejects lone backslash at end of input"", function() {
> 296 |             expect(""\\"").toFailWithParseError(
      |            ^ Redundant Assertion
  297 |                    ""Unexpected character: '\\' at position 1: \\̲"");
  298 |         });
  299 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 8, 'line': 328}","  326 | describe(""Unicode accents"", function() {
  327 |     it(""should return error for invalid combining characters"", function() {
> 328 |         expect(""A\u0328"").toFailWithParseError(
      |        ^ Redundant Assertion
  329 |             ""Unknown accent ' ̨' at position 1: Ą̲̲"");
  330 |     });
  331 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 6}","  4 |
  5 |     describe(""#handleInfixNodes"", function() {
> 6 |         it(""rejects repeated infix operators"", function() {
    |        ^ Unknown Test
  7 |             expect`1\over 2\over 3`.toFailWithParseError(
  8 |                    ""only one infix operator per group at position 9: "" +
  9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 11}","   9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");
  10 |         });
> 11 |         it(""rejects conflicting infix operators"", function() {
     |        ^ Unknown Test
  12 |             expect`1\over 2\choose 3`.toFailWithParseError(
  13 |                    ""only one infix operator per group at position 9: "" +
  14 |                    ""1\\over 2\\̲c̲h̲o̲o̲s̲e̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 19}","  17 |
  18 |     describe(""#handleSupSubscript"", function() {
> 19 |         it(""rejects ^ at end of group"", function() {
     |        ^ Unknown Test
  20 |             expect`{1^}`.toFailWithParseError(
  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 23}","  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });
> 23 |         it(""rejects _ at end of input"", function() {
     |        ^ Unknown Test
  24 |             expect`1_`.toFailWithParseError(
  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 27}","  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });
> 27 |         it(""rejects \\sqrt as argument to ^"", function() {
     |        ^ Unknown Test
  28 |             expect`1^\sqrt{2}`.toFailWithParseError(
  29 |                    ""Got function '\\sqrt' with no arguments as superscript"" +
  30 |                    "" at position 3: 1^\\̲s̲q̲r̲t̲{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 35}","  33 |
  34 |     describe(""#parseAtom"", function() {
> 35 |         it(""rejects \\limits without operator"", function() {
     |        ^ Unknown Test
  36 |             expect`\alpha\limits\omega`.toFailWithParseError(
  37 |                    ""Limit controls must follow a math operator"" +
  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 40}","  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");
  39 |         });
> 40 |         it(""rejects \\limits at the beginning of the input"", function() {
     |        ^ Unknown Test
  41 |             expect`\limits\omega`.toFailWithParseError(
  42 |                    ""Limit controls must follow a math operator"" +
  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 45}","  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");
  44 |         });
> 45 |         it(""rejects double superscripts"", function() {
     |        ^ Unknown Test
  46 |             expect`1^2^3`.toFailWithParseError(
  47 |                    ""Double superscript at position 4: 1^2^̲3"");
  48 |             expect`1^{2+3}_4^5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 51}","  49 |                    ""Double superscript at position 10: 1^{2+3}_4^̲5"");
  50 |         });
> 51 |         it(""rejects double superscripts involving primes"", function() {
     |        ^ Unknown Test
  52 |             expect`1'_2^3`.toFailWithParseError(
  53 |                    ""Double superscript at position 5: 1'_2^̲3"");
  54 |             expect`1^2'`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 61}","  59 |                    ""Double superscript at position 5: 1'_2'̲"");
  60 |         });
> 61 |         it(""rejects double subscripts"", function() {
     |        ^ Unknown Test
  62 |             expect`1_2_3`.toFailWithParseError(
  63 |                    ""Double subscript at position 4: 1_2_̲3"");
  64 |             expect`1_{2+3}^4_5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 70}","  68 |
  69 |     describe(""#parseImplicitGroup"", function() {
> 70 |         it(""reports unknown environments"", function() {
     |        ^ Unknown Test
  71 |             expect`\begin{foo}bar\end{foo}`.toFailWithParseError(
  72 |                    ""No such environment: foo at position 7:"" +
  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 75}","  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");
  74 |         });
> 75 |         it(""reports mismatched environments"", function() {
     |        ^ Unknown Test
  76 |             expect`\begin{pmatrix}1&2\\3&4\end{bmatrix}+5`
  77 |                 .toFailWithParseError(
  78 |                    ""Mismatch: \\begin{pmatrix} matched by \\end{bmatrix}"" +",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 84}","  82 |
  83 |     describe(""#parseFunction"", function() {
> 84 |         it(""rejects math-mode functions in text mode"", function() {
     |        ^ Unknown Test
  85 |             expect`\text{\sqrt2 is irrational}`.toFailWithParseError(
  86 |                 ""Can't use function '\\sqrt' in text mode"" +
  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 89}","  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");
  88 |         });
> 89 |         it(""rejects text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  90 |             expect`$`.toFailWithParseError(
  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 93}","  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });
> 93 |         it(""rejects strict-mode text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  94 |             expect`\'echec`.toFailWithParseError(""LaTeX-incompatible input "" +
  95 |                 ""and strict mode is set to 'error': LaTeX's accent \\' works "" +
  96 |                 ""only in text mode [mathVsTextAccents]"", strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 101}","   99 |
  100 |     describe(""#parseArguments"", function() {
> 101 |         it(""complains about missing argument at end of input"", function() {
      |        ^ Unknown Test
  102 |             expect`2\sqrt`.toFailWithParseError(
  103 |                    ""Expected group as argument to '\\sqrt'"" +
  104 |                    "" at end of input: 2\\sqrt"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 106}","  104 |                    "" at end of input: 2\\sqrt"");
  105 |         });
> 106 |         it(""complains about missing argument at end of group"", function() {
      |        ^ Unknown Test
  107 |             expect`1^{2\sqrt}`.toFailWithParseError(
  108 |                    ""Expected group as argument to '\\sqrt'"" +
  109 |                    "" at position 10: 1^{2\\sqrt}̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 111}","  109 |                    "" at position 10: 1^{2\\sqrt}̲"");
  110 |         });
> 111 |         it(""complains about functions as arguments to others"", function() {
      |        ^ Unknown Test
  112 |             expect`\sqrt\over2`.toFailWithParseError(
  113 |                    ""Got function '\\over' with no arguments as argument to"" +
  114 |                    "" '\\sqrt' at position 6: \\sqrt\\̲o̲v̲e̲r̲2"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 119}","  117 |
  118 |     describe(""#parseGroup"", function() {
> 119 |         it(""complains about undefined control sequence"", function() {
      |        ^ Unknown Test
  120 |             expect`\xyz`.toFailWithParseError(
  121 |                    ""Undefined control sequence: \\xyz"" +
  122 |                    "" at position 1: \\̲x̲y̲z̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 127}","  125 |
  126 |     describe(""#verb"", function() {
> 127 |         it(""complains about mismatched \\verb with end of string"", function() {
      |        ^ Unknown Test
  128 |             expect`\verb|hello`.toFailWithParseError(
  129 |                 ""\\verb ended by end of line instead of matching delimiter"");
  130 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 142}","  140 |
  141 |     describe(""#parseInput expecting EOF"", function() {
> 142 |         it(""complains about extra }"", function() {
      |        ^ Unknown Test
  143 |             expect`{1+2}}`.toFailWithParseError(
  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 146}","  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });
> 146 |         it(""complains about extra \\end"", function() {
      |        ^ Unknown Test
  147 |             expect`x\end{matrix}`.toFailWithParseError(
  148 |                    ""Expected 'EOF', got '\\end' at position 2:"" +
  149 |                    "" x\\̲e̲n̲d̲{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 151}","  149 |                    "" x\\̲e̲n̲d̲{matrix}"");
  150 |         });
> 151 |         it(""complains about top-level &"", function() {
      |        ^ Unknown Test
  152 |             expect`1&2`.toFailWithParseError(
  153 |                    ""Expected 'EOF', got '&' at position 2: 1&̲2"");
  154 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 158}","  156 |
  157 |     describe(""#parseImplicitGroup expecting \\right"", function() {
> 158 |         it(""rejects missing \\right"", function() {
      |        ^ Unknown Test
  159 |             expect`\left(1+2)`.toFailWithParseError(
  160 |                    ""Expected '\\right', got 'EOF' at end of input:"" +
  161 |                    "" \\left(1+2)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 163}","  161 |                    "" \\left(1+2)"");
  162 |         });
> 163 |         it(""rejects incorrectly scoped \\right"", function() {
      |        ^ Unknown Test
  164 |             expect`{\left(1+2}\right)`.toFailWithParseError(
  165 |                    ""Expected '\\right', got '}' at position 11:"" +
  166 |                    "" {\\left(1+2}̲\\right)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 174}","  172 |
  173 |     describe(""#parseSpecialGroup expecting braces"", function() {
> 174 |         it(""complains about missing { for color"", function() {
      |        ^ Unknown Test
  175 |             expect`\textcolor#ffffff{text}`.toFailWithParseError(
  176 |                    ""Invalid color: '#' at position 11:"" +
  177 |                    "" \\textcolor#̲ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 179}","  177 |                    "" \\textcolor#̲ffffff{text}"");
  178 |         });
> 179 |         it(""complains about missing { for size"", function() {
      |        ^ Unknown Test
  180 |             expect`\rule{1em}[2em]`.toFailWithParseError(
  181 |                    ""Invalid size: '[' at position 11: \\rule{1em}[̲2em]"");
  182 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 184}","  182 |         });
  183 |         // Can't test for the [ of an optional group since it's optional
> 184 |         it(""complains about missing } for color"", function() {
      |        ^ Unknown Test
  185 |             expect`\textcolor{#ffffff{text}`.toFailWithParseError(
  186 |                    ""Unexpected end of input in a macro argument,"" +
  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 189}","  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");
  188 |         });
> 189 |         it(""complains about missing ] for size"", function() {
      |        ^ Unknown Test
  190 |             expect`\rule[1em{2em}{3em}`.toFailWithParseError(
  191 |                    ""Unexpected end of input in a macro argument,"" +
  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 194}","  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");
  193 |         });
> 194 |         it(""complains about missing ] for size at end of input"", function() {
      |        ^ Unknown Test
  195 |             expect`\rule[1em`.toFailWithParseError(
  196 |                    ""Unexpected end of input in a macro argument,"" +
  197 |                    "" expected ']' at end of input: \\rule[1em"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 199}","  197 |                    "" expected ']' at end of input: \\rule[1em"");
  198 |         });
> 199 |         it(""complains about missing } for color at end of input"", function() {
      |        ^ Unknown Test
  200 |             expect`\textcolor{#123456`.toFailWithParseError(
  201 |                    ""Unexpected end of input in a macro argument,"" +
  202 |                    "" expected '}' at end of input: …xtcolor{#123456"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 207}","  205 |
  206 |     describe(""#parseGroup expecting }"", function() {
> 207 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  208 |             expect`\sqrt{2`.toFailWithParseError(
  209 |                    ""Expected '}', got 'EOF' at end of input: \\sqrt{2"");
  210 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 214}","  212 |
  213 |     describe(""#parseOptionalGroup expecting ]"", function() {
> 214 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  215 |             expect`\sqrt[3`.toFailWithParseError(
  216 |                    ""Unexpected end of input in a macro argument,"" +
  217 |                    "" expected ']' at end of input: \\sqrt[3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 219}","  217 |                    "" expected ']' at end of input: \\sqrt[3"");
  218 |         });
> 219 |         it(""before group"", function() {
      |        ^ Unknown Test
  220 |             expect`\sqrt[3{2}`.toFailWithParseError(
  221 |                    ""Unexpected end of input in a macro argument,"" +
  222 |                    "" expected ']' at end of input: \\sqrt[3{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 231}","  229 |
  230 |     describe(""parseArray"", function() {
> 231 |         it(""rejects missing \\end"", function() {
      |        ^ Unknown Test
  232 |             expect`\begin{matrix}1`.toFailWithParseError(
  233 |                    ""Expected & or \\\\ or \\cr or \\end at end of input:"" +
  234 |                    "" \\begin{matrix}1"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 236}","  234 |                    "" \\begin{matrix}1"");
  235 |         });
> 236 |         it(""rejects incorrectly scoped \\end"", function() {
      |        ^ Unknown Test
  237 |             expect`{\begin{matrix}1}\end{matrix}`.toFailWithParseError(
  238 |                    ""Expected & or \\\\ or \\cr or \\end at position 17:"" +
  239 |                    "" …\\begin{matrix}1}̲\\end{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 244}","  242 |
  243 |     describe(""array environment"", function() {
> 244 |         it(""rejects unknown column types"", function() {
      |        ^ Unknown Test
  245 |             expect`\begin{array}{cba}\end{array}`.toFailWithParseError(
  246 |                    ""Unknown column alignment: b at position 16:"" +
  247 |                    "" \\begin{array}{cb̲a}\\end{array}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 256}","  254 |
  255 |     describe(""delimiter functions"", function() {
> 256 |         it(""reject invalid opening delimiters"", function() {
      |        ^ Unknown Test
  257 |             expect`\bigl 1 + 2 \bigr`.toFailWithParseError(
  258 |                    ""Invalid delimiter '1' after '\\bigl' at position 7:"" +
  259 |                    "" \\bigl 1̲ + 2 \\bigr"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 261}","  259 |                    "" \\bigl 1̲ + 2 \\bigr"");
  260 |         });
> 261 |         it(""reject invalid closing delimiters"", function() {
      |        ^ Unknown Test
  262 |             expect`\bigl(1+2\bigr=3`.toFailWithParseError(
  263 |                    ""Invalid delimiter '=' after '\\bigr' at position 15:"" +
  264 |                    "" \\bigl(1+2\\bigr=̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 266}","  264 |                    "" \\bigl(1+2\\bigr=̲3"");
  265 |         });
> 266 |         it(""reject group opening delimiters"", function() {
      |        ^ Unknown Test
  267 |             expect`\bigl{(}1+2\bigr)3`.toFailWithParseError(
  268 |                    ""Invalid delimiter type 'ordgroup' at position 6:"" +
  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 271}","  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");
  270 |         });
> 271 |         it(""reject group closing delimiters"", function() {
      |        ^ Unknown Test
  272 |             expect`\bigl(1+2\bigr{)}3`.toFailWithParseError(
  273 |                    ""Invalid delimiter type 'ordgroup' at position 15:"" +
  274 |                    "" \\bigl(1+2\\bigr{̲)̲}̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 279}","  277 |
  278 |     describe(""\\begin and \\end"", function() {
> 279 |         it(""reject invalid environment names"", function() {
      |        ^ Unknown Test
  280 |             expect`\begin x\end y`.toFailWithParseError(
  281 |                    ""No such environment: x at position 8: \\begin x̲\\end y"");
  282 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 302}","  300 |
  301 |     describe(""#_innerLexColor"", function() {
> 302 |         it(""reject 3-digit hex notation without #"", function() {
      |        ^ Unknown Test
  303 |             expect`\textcolor{1a2}{foo}`.toFailWithParseError(
  304 |                    ""Invalid color: '1a2'"" +
  305 |                    "" at position 11: \\textcolor{̲1̲a̲2̲}̲{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 310}","  308 |
  309 |     describe(""#_innerLexSize"", function() {
> 310 |         it(""reject size without unit"", function() {
      |        ^ Unknown Test
  311 |             expect`\rule{0}{2em}`.toFailWithParseError(
  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 314}","  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });
> 314 |         it(""reject size with bogus unit"", function() {
      |        ^ Unknown Test
  315 |             expect`\rule{1au}{2em}`.toFailWithParseError(
  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 318}","  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });
> 318 |         it(""reject size without number"", function() {
      |        ^ Unknown Test
  319 |             expect`\rule{em}{2em}`.toFailWithParseError(
  320 |                    ""Invalid size: 'em' at position 6: \\rule{̲e̲m̲}̲{2em}"");
  321 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 5, 'column': 4, 'index': 124}","  3 |
  4 | describe(""Symbols and macros"", () => {
> 5 |     for (const macro in macros) {
    |    ^ Conditional Test Logic
  6 |         if (!macros.hasOwnProperty(macro)) {
  7 |             continue;
  8 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 6, 'column': 8, 'index': 162}","  4 | describe(""Symbols and macros"", () => {
  5 |     for (const macro in macros) {
> 6 |         if (!macros.hasOwnProperty(macro)) {
    |        ^ Conditional Test Logic
  7 |             continue;
  8 |         }
  9 |         it(`macro ${macro} should not shadow a symbol`, () => {",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 10, 'column': 12, 'index': 307}","   8 |         }
   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
> 10 |             for (const kind in symbols) {
     |            ^ Conditional Test Logic
  11 |                 if (!symbols.hasOwnProperty(kind)) {
  12 |                     continue;
  13 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 11, 'column': 16, 'index': 353}","   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
  10 |             for (const kind in symbols) {
> 11 |                 if (!symbols.hasOwnProperty(kind)) {
     |                ^ Conditional Test Logic
  12 |                     continue;
  13 |                 }
  14 |                 expect(symbols[kind][macro]).toBeFalsy();",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 18, 'column': 12, 'index': 481}","  16 |                   splitAtDelimiters(actual, delimiters);
  17 |
> 18 |             if (split.length !== result.length) {
     |            ^ Conditional Test Logic
  19 |                 message.pass = false;
  20 |                 message.message = () => ""Different number of splits: "" +
  21 |                     split.length + "" vs. "" + result.length + "" ("" +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 27, 'column': 12, 'index': 861}","  25 |             }
  26 |
> 27 |             for (let i = 0; i < split.length; i++) {
     |            ^ Conditional Test Logic
  28 |                 const real = split[i];
  29 |                 const correct = result[i];
  30 |",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 34, 'column': 16, 'index': 1061}","  32 |                 let diff;
  33 |
> 34 |                 if (real.type !== correct.type) {
     |                ^ Conditional Test Logic
  35 |                     good = false;
  36 |                     diff = ""type"";
  37 |                 } else if (real.data !== correct.data) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 37, 'column': 23, 'index': 1187}","  35 |                     good = false;
  36 |                     diff = ""type"";
> 37 |                 } else if (real.data !== correct.data) {
     |                       ^ Conditional Test Logic
  38 |                     good = false;
  39 |                     diff = ""data"";
  40 |                 } else if (real.display !== correct.display) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 40, 'column': 23, 'index': 1313}","  38 |                     good = false;
  39 |                     diff = ""data"";
> 40 |                 } else if (real.display !== correct.display) {
     |                       ^ Conditional Test Logic
  41 |                     good = false;
  42 |                     diff = ""display"";
  43 |                 }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 45, 'column': 16, 'index': 1460}","  43 |                 }
  44 |
> 45 |                 if (!good) {
     |                ^ Conditional Test Logic
  46 |                     message.pass = false;
  47 |                     message.message = () => ""Difference at split "" +
  48 |                         (i + 1) + "": "" + JSON.stringify(real) +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 332, 'column': 8, 'index': 11671}","  330 |             '\\]'];
  331 |         const el = document.createElement('div');
> 332 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  333 |             const txt = document.createTextNode(textNodes[i]);
  334 |             el.appendChild(txt);
  335 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 350, 'column': 8, 'index': 12420}","  348 |             'consectetur adipiscing elit'];
  349 |         const el = document.createElement('div');
> 350 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  351 |             const txt = document.createTextNode(textNodes[i]);
  352 |             el.appendChild(txt);
  353 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 355, 'column': 8, 'index': 12630}","  353 |         }
  354 |         const el2 = document.createElement('div');
> 355 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  356 |             const txt = document.createTextNode(textNodes[i]);
  357 |             el2.appendChild(txt);
  358 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 62}","  60 | describe(""A delimiter splitter"", function() {
  61 |     it(""doesn't split when there are no delimiters"", function() {
> 62 |         expect(""hello"").toSplitInto(
     |        ^ Redundant Assertion
  63 |             [
  64 |                 {type: ""text"", data: ""hello""},
  65 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 72}","  70 |
  71 |     it(""doesn't create a math node with only one left delimiter"", function() {
> 72 |         expect(""hello ( world"").toSplitInto(
     |        ^ Redundant Assertion
  73 |             [
  74 |                 {type: ""text"", data: ""hello ""},
  75 |                 {type: ""text"", data: ""( world""},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 83}","  81 |
  82 |     it(""doesn't split when there's only a right delimiter"", function() {
> 83 |         expect(""hello ) world"").toSplitInto(
     |        ^ Redundant Assertion
  84 |             [
  85 |                 {type: ""text"", data: ""hello ) world""},
  86 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 93}","  91 |
  92 |     it(""splits when there are both delimiters"", function() {
> 93 |         expect(""hello ( world ) boo"").toSplitInto(
     |        ^ Redundant Assertion
  94 |             [
  95 |                 {type: ""text"", data: ""hello ""},
  96 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 106}","  104 |
  105 |     it(""splits on multi-character delimiters"", function() {
> 106 |         expect(""hello [[ world ]] boo"").toSplitInto(
      |        ^ Redundant Assertion
  107 |             [
  108 |                 {type: ""text"", data: ""hello ""},
  109 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 116}","  114 |                 {left: ""[["", right: ""]]"", display: false},
  115 |             ]);
> 116 |         expect(""hello \\begin{equation} world \\end{equation} boo"").toSplitInto(
      |        ^ Redundant Assertion
  117 |             [
  118 |                 {type: ""text"", data: ""hello ""},
  119 |                 {type: ""math"", data: ""\\begin{equation} world \\end{equation}"",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 131}","  129 |
  130 |     it(""splits multiple times"", function() {
> 131 |         expect(""hello ( world ) boo ( more ) stuff"").toSplitInto(
      |        ^ Redundant Assertion
  132 |             [
  133 |                 {type: ""text"", data: ""hello ""},
  134 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 147}","  145 |
  146 |     it(""leaves the ending when there's only a left delimiter"", function() {
> 147 |         expect(""hello ( world ) boo ( left"").toSplitInto(
      |        ^ Redundant Assertion
  148 |             [
  149 |                 {type: ""text"", data: ""hello ""},
  150 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 161}","  159 |
  160 |     it(""doesn't split when close delimiters are in {}s"", function() {
> 161 |         expect(""hello ( world { ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  162 |             [
  163 |                 {type: ""text"", data: ""hello ""},
  164 |                 {type: ""math"", data: "" world { ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 172}","  170 |             ]);
  171 |
> 172 |         expect(""hello ( world { { } ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  173 |             [
  174 |                 {type: ""text"", data: ""hello ""},
  175 |                 {type: ""math"", data: "" world { { } ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 185}","  183 |
  184 |     it(""correctly processes sequences of $..$"", function() {
> 185 |         expect(""$hello$$world$$boo$"").toSplitInto(
      |        ^ Redundant Assertion
  186 |             [
  187 |                 {type: ""math"", data: ""hello"",
  188 |                     rawData: ""$hello$"", display: false},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 200}","  198 |
  199 |     it(""doesn't split at escaped delimiters"", function() {
> 200 |         expect(""hello ( world \\) ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  201 |             [
  202 |                 {type: ""text"", data: ""hello ""},
  203 |                 {type: ""math"", data: "" world \\) "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 224}","  222 |
  223 |     it(""splits when the right and left delimiters are the same"", function() {
> 224 |         expect(""hello $ world $ boo"").toSplitInto(
      |        ^ Redundant Assertion
  225 |             [
  226 |                 {type: ""text"", data: ""hello ""},
  227 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 237}","  235 |
  236 |     it(""ignores \\$"", function() {
> 237 |         expect(""$x = \\$5$"").toSplitInto(
      |        ^ Redundant Assertion
  238 |             [
  239 |                 {type: ""math"", data: ""x = \\$5"",
  240 |                     rawData: ""$x = \\$5$"", display: false},",,
test/unicode-spec.js,ConditionalTestLogic,"[{""startLine"":157,""endLine"":160}]",,25.0,2.0
test/unicode-spec.js,SubOptimalAssert,"[{""startLine"":163,""endLine"":163}]",,25.0,2.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1317,""endLine"":1321}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1400,""endLine"":1402}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2821,""endLine"":2823}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2838,""endLine"":2840}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2855,""endLine"":2858}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3126,""endLine"":3129}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3823,""endLine"":3825}]",,556.0,117.0
test/katex-spec.js,OvercommentedTest,"[{""startLine"":4013,""endLine"":4048}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":62,""endLine"":64}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":81,""endLine"":84}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":106,""endLine"":109}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":121,""endLine"":123}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":139,""endLine"":141}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":157,""endLine"":159}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":173,""endLine"":175}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":295,""endLine"":300}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":339,""endLine"":341}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":359,""endLine"":361}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":386,""endLine"":389}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":491,""endLine"":493}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":565,""endLine"":570}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":572,""endLine"":602}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":668,""endLine"":677}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":681,""endLine"":687}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":693,""endLine"":695}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":717,""endLine"":719}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":829,""endLine"":839}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":853,""endLine"":855}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":991,""endLine"":993}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1039,""endLine"":1042}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1098,""endLine"":1108}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1110,""endLine"":1113}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1115,""endLine"":1118}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1136,""endLine"":1150}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1168,""endLine"":1171}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1173,""endLine"":1176}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1178,""endLine"":1181}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1197,""endLine"":1199}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1309,""endLine"":1311}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1544,""endLine"":1557}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1561,""endLine"":1566}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1692,""endLine"":1699}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2076,""endLine"":2093}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2114,""endLine"":2116}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2149,""endLine"":2151}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2260,""endLine"":2266}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2291,""endLine"":2296}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2298,""endLine"":2304}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2308,""endLine"":2314}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2316,""endLine"":2322}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2326,""endLine"":2331}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2333,""endLine"":2339}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2352,""endLine"":2357}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2365,""endLine"":2369}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2373,""endLine"":2378}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2380,""endLine"":2387}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2391,""endLine"":2397}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2405,""endLine"":2409}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2413,""endLine"":2419}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2432,""endLine"":2439}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2447,""endLine"":2451}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2455,""endLine"":2460}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2462,""endLine"":2469}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2473,""endLine"":2478}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2488,""endLine"":2493}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2495,""endLine"":2501}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2528,""endLine"":2531}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2535,""endLine"":2539}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2541,""endLine"":2543}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2547,""endLine"":2551}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2553,""endLine"":2556}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2558,""endLine"":2562}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2564,""endLine"":2567}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2571,""endLine"":2575}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2577,""endLine"":2579}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2583,""endLine"":2588}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2590,""endLine"":2594}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2596,""endLine"":2600}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2604,""endLine"":2613}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2615,""endLine"":2621}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2634,""endLine"":2639}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2643,""endLine"":2645}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2646,""endLine"":2648}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2652,""endLine"":2661}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2672,""endLine"":2683}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2701,""endLine"":2716}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2726,""endLine"":2736}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2750,""endLine"":2756}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2838,""endLine"":2840}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2855,""endLine"":2858}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2864,""endLine"":2866}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2959,""endLine"":2966}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2970,""endLine"":2973}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3415,""endLine"":3418}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3499,""endLine"":3502}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3802,""endLine"":3804}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3823,""endLine"":3825}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":91,""endLine"":94}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":95,""endLine"":100}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1762,""endLine"":1764}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1897,""endLine"":1898}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3170,""endLine"":3170}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3185,""endLine"":3185}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3980,""endLine"":3981}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":511,""endLine"":537}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":572,""endLine"":602}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":1608,""endLine"":1632}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3081,""endLine"":3096}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3504,""endLine"":3520}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":4013,""endLine"":4048}]",,556.0,117.0
test/errors-spec.js,AnonymousTest,"[{""startLine"":219,""endLine"":223}]",,50.0,26.0
test/errors-spec.js,IdenticalTestDescription,"[{""startLine"":214,""endLine"":218}]",,50.0,26.0
