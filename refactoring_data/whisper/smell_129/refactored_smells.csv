file,type,smells,frame,itCount,describeCount
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 20, 'column': 8, 'index': 1016}","  18 |     it(""should not parse Latin-1 outside \\text{} with strict"", function() {
  19 |         const chars = 'ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ';
> 20 |         for (const ch of chars) {
     |        ^ Conditional Test Logic
  21 |             expect(ch).not.toParse(strictSettings);
  22 |         }
  23 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 144, 'column': 8, 'index': 5144}","  142 |
  143 |     it(""supportedCodepoint() should return the correct values"", () => {
> 144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |        ^ Conditional Test Logic
  145 |             expect(supportedCodepoint(codepoint)).toBe(
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 152, 'column': 15, 'index': 5441}","  150 |
  151 |     it(""scriptFromCodepoint() should return correct values"", () => {
> 152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |               ^ Conditional Test Logic
  153 |             const character = String.fromCharCode(codepoint);
  154 |             const script = scriptFromCodepoint(codepoint);
  155 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 156, 'column': 12, 'index': 5635}","  154 |             const script = scriptFromCodepoint(codepoint);
  155 |
> 156 |             for (const scriptName of scriptNames) {
      |            ^ Conditional Test Logic
  157 |                 if (scriptRegExps[scriptName].test(character)) {
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 157, 'column': 16, 'index': 5691}","  155 |
  156 |             for (const scriptName of scriptNames) {
> 157 |                 if (scriptRegExps[scriptName].test(character)) {
      |                ^ Conditional Test Logic
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;
  160 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 158, 'column': 20, 'index': 5760}","  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {
> 158 |                     expect(script).toEqual(scriptName);
      |                    ^ Duplicate Assert
  159 |                     continue outer;
  160 |                 }
  161 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 163, 'column': 12, 'index': 5877}","  161 |             }
  162 |
> 163 |             expect(script).toBe(null);
      |            ^ Duplicate Assert
  164 |             expect(supportedCodepoint(codepoint)).toBe(false);
  165 |         }
  166 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 154, 'column': 27, 'index': 5590}","  152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
  153 |             const character = String.fromCharCode(codepoint);
> 154 |             const script = scriptFromCodepoint(codepoint);
      |                           ^ Eager Test
  155 |
  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Eager Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 145, 'column': 19, 'index': 5223}","  143 |     it(""supportedCodepoint() should return the correct values"", () => {
  144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
> 145 |             expect(supportedCodepoint(codepoint)).toBe(
      |                   ^ Lazy Test
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );
  148 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Lazy Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 7}","   5 |
   6 | describe(""unicode"", function() {
>  7 |     it(""should build Latin-1 inside \\text{}"", function() {
     |    ^ Unknown Test
   8 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}`
   9 |             .toBuild();
  10 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 12}","  10 |     });
  11 |
> 12 |     it(""should build Latin-1 inside \\text{} like accent commands"", function() {
     |    ^ Unknown Test
  13 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}`
  14 |             .toParseLike`\text{\`A\'A\^A\~A\""A\r A\`E\'E\^E\""E\`I\'I\^I\""I\~N\`O\'O\^O\~O\""O\`U\'U\^U\""U\'Y\`a\'a\^a\~a\""a\r a\`e\'e\^e\""e\`ı\'ı\^ı\""ı\~n\`o\'o\^o\~o\""o\`u\'u\^u\""u\'y\""y\c C\c c}`;
  15 |         // TODO(edemaine): A few characters don't have analogs yet.",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 25}","  23 |     });
  24 |
> 25 |     it(""should build Latin-1 outside \\text{}"", function() {
     |    ^ Unknown Test
  26 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ`
  27 |             .toBuild(nonstrictSettings);
  28 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 30}","  28 |     });
  29 |
> 30 |     it(""should build all lower case Greek letters"", function() {
     |    ^ Unknown Test
  31 |         expect`αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω`.toBuild();
  32 |     });
  33 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 34}","  32 |     });
  33 |
> 34 |     it(""should build math upper case Greek letters"", function() {
     |    ^ Unknown Test
  35 |         expect`ΓΔΘΛΞΠΣΥΦΨΩ`.toBuild();
  36 |     });
  37 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 38}","  36 |     });
  37 |
> 38 |     it(""should build Cyrillic inside \\text{}"", function() {
     |    ^ Unknown Test
  39 |         expect`\text{БГДЖЗЙЛФЦШЫЮЯ}`.toBuild();
  40 |     });
  41 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 42}","  40 |     });
  41 |
> 42 |     it(""should build Cyrillic outside \\text{}"", function() {
     |    ^ Unknown Test
  43 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.toBuild(nonstrictSettings);
  44 |     });
  45 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 46}","  44 |     });
  45 |
> 46 |     it(""should not parse Cyrillic outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  47 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.not.toParse(strictSettings);
  48 |     });
  49 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 50}","  48 |     });
  49 |
> 50 |     it(""should build CJK inside \\text{}"", function() {
     |    ^ Unknown Test
  51 |         expect`\text{私はバナナです}`.toBuild();
  52 |         expect`\text{여보세요}`.toBuild();
  53 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 55}","  53 |     });
  54 |
> 55 |     it(""should build CJK outside \\text{}"", function() {
     |    ^ Unknown Test
  56 |         expect`私はバナナです`.toBuild(nonstrictSettings);
  57 |         expect`여보세요`.toBuild(nonstrictSettings);
  58 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 60}","  58 |     });
  59 |
> 60 |     it(""should not parse CJK outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  61 |         expect`私はバナナです。`.not.toParse(strictSettings);
  62 |         expect`여보세요`.not.toParse(strictSettings);
  63 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 65}","  63 |     });
  64 |
> 65 |     it(""should build Devanagari inside \\text{}"", function() {
     |    ^ Unknown Test
  66 |         expect`\text{नमस्ते}`.toBuild();
  67 |     });
  68 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 69}","  67 |     });
  68 |
> 69 |     it(""should build Devanagari outside \\text{}"", function() {
     |    ^ Unknown Test
  70 |         expect`नमस्ते`.toBuild(nonstrictSettings);
  71 |     });
  72 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 73}","  71 |     });
  72 |
> 73 |     it(""should not parse Devanagari outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  74 |         expect`नमस्ते`.not.toParse(strictSettings);
  75 |     });
  76 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 77}","  75 |     });
  76 |
> 77 |     it(""should build Georgian inside \\text{}"", function() {
     |    ^ Unknown Test
  78 |         expect`\text{გამარჯობა}`.toBuild();
  79 |     });
  80 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 81}","  79 |     });
  80 |
> 81 |     it(""should build Georgian outside \\text{}"", function() {
     |    ^ Unknown Test
  82 |         expect`გამარჯობა`.toBuild(nonstrictSettings);
  83 |     });
  84 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 85}","  83 |     });
  84 |
> 85 |     it(""should not parse Georgian outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  86 |         expect`გამარჯობა`.not.toParse(strictSettings);
  87 |     });
  88 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 89}","  87 |     });
  88 |
> 89 |     it(""should build Armenian both inside and outside \\text{}"", function() {
     |    ^ Unknown Test
  90 |         expect`ԱԲԳաբգ`.toBuild(nonstrictSettings);
  91 |         expect`\text{ԱԲԳաբգ}`.toBuild(nonstrictSettings);
  92 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 94}","  92 |     });
  93 |
> 94 |     it(""should build extended Latin characters inside \\text{}"", function() {
     |    ^ Unknown Test
  95 |         expect`\text{ěščřžůřťďňőİı}`.toBuild();
  96 |     });
  97 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 98}","   96 |     });
   97 |
>  98 |     it(""should not parse extended Latin outside \\text{} with strict"", function() {
      |    ^ Unknown Test
   99 |         expect`ěščřžůřťďňőİı`.not.toParse(strictSettings);
  100 |     });
  101 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 102}","  100 |     });
  101 |
> 102 |     it(""should not allow emoji in strict mode"", function() {
      |    ^ Unknown Test
  103 |         expect`✌`.not.toParse(strictSettings);
  104 |         expect`\text{✌}`.not.toParse(strictSettings);
  105 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 113}","  111 |     });
  112 |
> 113 |     it(""should allow emoji outside strict mode"", function() {
      |    ^ Unknown Test
  114 |         expect`✌`.toWarn();
  115 |         expect`\text{✌}`.toWarn();
  116 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 4, 'column': 4, 'index': 98}","  2 |
  3 | describe(""Screenshotter item"", function() {
> 4 |     for (const key in data) {
    |    ^ Conditional Test Logic
  5 |         if (data.hasOwnProperty(key)) {
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 5, 'column': 8, 'index': 132}","  3 | describe(""Screenshotter item"", function() {
  4 |     for (const key in data) {
> 5 |         if (data.hasOwnProperty(key)) {
    |        ^ Conditional Test Logic
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {
  8 |                 expect(item.tex).toBuild({",,
/home/gabriel/Desktop/research/projects/katex/test/mathml-spec.js,Conditional Test Logic,"{'line': 9, 'column': 4, 'index': 300}","   7 | const getMathML = function(expr, settings = new Settings()) {
   8 |     let startStyle = Style.TEXT;
>  9 |     if (settings.displayMode) {
     |    ^ Conditional Test Logic
  10 |         startStyle = Style.DISPLAY;
  11 |     }
  12 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 46, 'column': 8, 'index': 1257}","  44 |         const parse = getParsed(expression);
  45 |
> 46 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  47 |             const group = parse[i];
  48 |             expect(group.type).toMatch(""ord"");
  49 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 69, 'column': 8, 'index': 1848}","  67 |         const parse = getParsed(expression);
  68 |
> 69 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  70 |             const group = parse[i];
  71 |             expect(group.type).toEqual(""atom"");
  72 |             expect(group.family).toEqual(""bin"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 90, 'column': 8, 'index': 2501}","  88 |
  89 |         // Check each parsed group is a relation operator
> 90 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  91 |             let group = parse[i];
  92 |             if (group.type === ""htmlmathml"") {
  93 |                 const expectedHtmlLength = 1; // Each htmlmathml group should have exactly one HTML element",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 92, 'column': 12, 'index': 2588}","  90 |         for (let i = 0; i < parse.length; i++) {
  91 |             let group = parse[i];
> 92 |             if (group.type === ""htmlmathml"") {
     |            ^ Conditional Test Logic
  93 |                 const expectedHtmlLength = 1; // Each htmlmathml group should have exactly one HTML element
  94 |                 expect(group.html).toHaveLength(expectedHtmlLength);
  95 |                 group = group.html[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 97, 'column': 12, 'index': 2865}","   95 |                 group = group.html[0];
   96 |             }
>  97 |             if (group.type === ""mclass"") {
      |            ^ Conditional Test Logic
   98 |                 expect(group.mclass).toEqual(""mrel"");
   99 |             } else {
  100 |                 expect(group.type).toEqual(""atom"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 130, 'column': 8, 'index': 3881}","  128 |         const parse = getParsed(expression);
  129 |
> 130 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  131 |             const group = parse[i];
  132 |             expect(group.type).toEqual(""atom"");
  133 |             expect(group.family).toEqual(""punct"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 148, 'column': 8, 'index': 4342}","  146 |         const parse = getParsed(expression);
  147 |
> 148 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  149 |             const group = parse[i];
  150 |             expect(group.type).toEqual(""atom"");
  151 |             expect(group.family).toEqual(""open"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 166, 'column': 8, 'index': 4805}","  164 |         const parse = getParsed(expression);
  165 |
> 166 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  167 |             const group = parse[i];
  168 |             expect(group.type).toEqual(""atom"");
  169 |             expect(group.family).toEqual(""close"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1264, 'column': 4, 'index': 40605}","  1262 |     ];
  1263 |
> 1264 |     for (const [actual, expected] of cases) {
       |    ^ Conditional Test Logic
  1265 |         it(`should build ""${actual}"" like ""${expected}""`, () => {
  1266 |             expect(actual).toBuildLike(expected);
  1267 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1413, 'column': 8, 'index': 45851}","  1411 |         ];
  1412 |
> 1413 |         for (let i = 0; i < missingGroups.length; i++) {
       |        ^ Conditional Test Logic
  1414 |             expect(missingGroups[i]).not.toParse();
  1415 |         }
  1416 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1440, 'column': 8, 'index': 46812}","  1438 |         ];
  1439 |
> 1440 |         for (let i = 0; i < badArguments.length; i++) {
       |        ^ Conditional Test Logic
  1441 |             expect(badArguments[i]).not.toParse();
  1442 |         }
  1443 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1458, 'column': 8, 'index': 47378}","  1456 |         ];
  1457 |
> 1458 |         for (let i = 0; i < goodArguments.length; i++) {
       |        ^ Conditional Test Logic
  1459 |             expect(goodArguments[i]).toParse();
  1460 |         }
  1461 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1471, 'column': 8, 'index': 47734}","  1469 |         ];
  1470 |
> 1471 |         for (let i = 0; i < badSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1472 |             expect(badSupSubscripts[i]).not.toParse();
  1473 |         }
  1474 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1484, 'column': 8, 'index': 48113}","  1482 |         ];
  1483 |
> 1484 |         for (let i = 0; i < goodSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1485 |             expect(goodSupSubscripts[i]).toParse();
  1486 |         }
  1487 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1522, 'column': 8, 'index': 49345}","  1520 |         ];
  1521 |
> 1522 |         for (let i = 0; i < badLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1523 |             expect(badLeftArguments[i]).not.toParse();
  1524 |         }
  1525 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1536, 'column': 8, 'index': 49822}","  1534 |         ];
  1535 |
> 1536 |         for (let i = 0; i < goodLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1537 |             expect(goodLeftArguments[i]).toParse();
  1538 |         }
  1539 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 2174, 'column': 8, 'index': 77772}","  2172 |
  2173 |     it(""should throw Error when HTML attribute name is invalid"", function() {
> 2174 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
       |        ^ Conditional Test Logic
  2175 |             try {
  2176 |                 katex.renderToString(
  2177 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 3837, 'column': 4, 'index': 141709}","  3835 | describe(""leqno and fleqn rendering options"", () => {
  3836 |     const expr = r`\tag{hi}x+y`;
> 3837 |     for (const opt of [""leqno"", ""fleqn""]) {
       |    ^ Conditional Test Logic
  3838 |         it(`should not add ${opt} class by default`, () => {
  3839 |             const settings = new Settings({displayMode: true});
  3840 |             const built = katex.__renderToDomTree(expr, settings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4242, 'column': 8, 'index': 158649}","  4240 |         // add eastern arabic numbers to symbols table
  4241 |         // these symbols are ۰۱۲۳۴۵۶۷۸۹ and ٠١٢٣٤٥٦٧٨٩
> 4242 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4243 |             const persianNum = String.fromCharCode(0x0660 + number);
  4244 |             katex.__defineSymbol(
  4245 |                 ""math"", fontName, ""textord"", persianNum, persianNum);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4261, 'column': 8, 'index': 159595}","  4259 |         const mockMetrics = {};
  4260 |         // mock font metrics for the symbols that we added previously
> 4261 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4262 |             mockMetrics[0x0660 + number] = [-0.00244140625, 0.6875, 0, 0];
  4263 |             mockMetrics[0x06F0 + number] = [-0.00244140625, 0.6875, 0, 0];
  4264 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 576, 'column': 8, 'index': 17271}","  574 |         parse = getParsed(simpleOver)[0];
  575 |
> 576 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  577 |         expect(parse.numer).toBeDefined();
  578 |         expect(parse.denom).toBeDefined();
  579 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 576, 'column': 8, 'index': 17271}","  574 |         parse = getParsed(simpleOver)[0];
  575 |
> 576 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  577 |         expect(parse.numer).toBeDefined();
  578 |         expect(parse.denom).toBeDefined();
  579 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 577, 'column': 8, 'index': 17318}","  575 |
  576 |         expect(parse.type).toEqual(""genfrac"");
> 577 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  578 |         expect(parse.denom).toBeDefined();
  579 |
  580 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 577, 'column': 8, 'index': 17318}","  575 |
  576 |         expect(parse.type).toEqual(""genfrac"");
> 577 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  578 |         expect(parse.denom).toBeDefined();
  579 |
  580 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 578, 'column': 8, 'index': 17361}","  576 |         expect(parse.type).toEqual(""genfrac"");
  577 |         expect(parse.numer).toBeDefined();
> 578 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  579 |
  580 |         parse = getParsed(complexOver)[0];
  581 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 578, 'column': 8, 'index': 17361}","  576 |         expect(parse.type).toEqual(""genfrac"");
  577 |         expect(parse.numer).toBeDefined();
> 578 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  579 |
  580 |         parse = getParsed(complexOver)[0];
  581 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 582, 'column': 8, 'index': 17449}","  580 |         parse = getParsed(complexOver)[0];
  581 |
> 582 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  583 |         expect(parse.numer).toBeDefined();
  584 |         expect(parse.denom).toBeDefined();
  585 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 582, 'column': 8, 'index': 17449}","  580 |         parse = getParsed(complexOver)[0];
  581 |
> 582 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  583 |         expect(parse.numer).toBeDefined();
  584 |         expect(parse.denom).toBeDefined();
  585 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 583, 'column': 8, 'index': 17496}","  581 |
  582 |         expect(parse.type).toEqual(""genfrac"");
> 583 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  584 |         expect(parse.denom).toBeDefined();
  585 |
  586 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 583, 'column': 8, 'index': 17496}","  581 |
  582 |         expect(parse.type).toEqual(""genfrac"");
> 583 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  584 |         expect(parse.denom).toBeDefined();
  585 |
  586 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 584, 'column': 8, 'index': 17539}","  582 |         expect(parse.type).toEqual(""genfrac"");
  583 |         expect(parse.numer).toBeDefined();
> 584 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  585 |
  586 |         const parseBraceFrac = getParsed(braceFrac)[0];
  587 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 584, 'column': 8, 'index': 17539}","  582 |         expect(parse.type).toEqual(""genfrac"");
  583 |         expect(parse.numer).toBeDefined();
> 584 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  585 |
  586 |         const parseBraceFrac = getParsed(braceFrac)[0];
  587 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1641, 'column': 8, 'index': 53591}","  1639 |         expect(bbBody).toHaveLength(3);
  1640 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1641 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1642 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1643 |         expect(bbBody[2].type).toEqual(""font"");
  1644 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1641, 'column': 8, 'index': 53591}","  1639 |         expect(bbBody).toHaveLength(3);
  1640 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1641 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1642 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1643 |         expect(bbBody[2].type).toEqual(""font"");
  1644 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1643, 'column': 8, 'index': 53689}","  1641 |         expect(bbBody[2].type).toEqual(""font"");
  1642 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1643 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1644 |     });
  1645 |
  1646 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1643, 'column': 8, 'index': 53689}","  1641 |         expect(bbBody[2].type).toEqual(""font"");
  1642 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1643 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1644 |     });
  1645 |
  1646 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1836, 'column': 8, 'index': 61244}","  1834 |     it(""should render \\text{R\\textit{S}T} with the correct fonts"", function() {
  1835 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
> 1836 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
       |        ^ Duplicate Assert
  1837 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
  1838 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1839 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1837, 'column': 8, 'index': 61311}","  1835 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
  1836 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
> 1837 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
       |        ^ Duplicate Assert
  1838 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1839 |     });
  1840 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1838, 'column': 8, 'index': 61385}","  1836 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
  1837 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
> 1838 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
       |        ^ Duplicate Assert
  1839 |     });
  1840 |
  1841 |     it(""should render \\textbf{R } with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1862, 'column': 8, 'index': 62576}","  1860 |     it(""should render \\textsf{\\textit{R}G\\textbf{B}} with the correct font"", function() {
  1861 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
> 1862 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
       |        ^ Duplicate Assert
  1863 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
  1864 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1865 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1863, 'column': 8, 'index': 62657}","  1861 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
  1862 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
> 1863 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
       |        ^ Duplicate Assert
  1864 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1865 |     });
  1866 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1864, 'column': 8, 'index': 62731}","  1862 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
  1863 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
> 1864 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
       |        ^ Duplicate Assert
  1865 |     });
  1866 |
  1867 |     it(""should render \\textsf{\\textbf{$\\mathrm{A}$}} with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1885, 'column': 8, 'index': 63806}","  1883 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1884 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1885 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1886 |
  1887 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1888 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1885, 'column': 8, 'index': 63806}","  1883 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1884 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1885 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1886 |
  1887 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1888 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1889, 'column': 8, 'index': 63996}","  1887 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1888 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1889 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1890 |     });
  1891 |
  1892 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1889, 'column': 8, 'index': 63996}","  1887 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1888 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1889 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1890 |     });
  1891 |
  1892 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2082, 'column': 8, 'index': 74269}","  2080 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2081 |             ""</mstyle>"";
> 2082 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2083 |
  2084 |         // reverse the order of the commands
  2085 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2082, 'column': 8, 'index': 74269}","  2080 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2081 |             ""</mstyle>"";
> 2082 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2083 |
  2084 |         // reverse the order of the commands
  2085 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2091, 'column': 8, 'index': 74630}","  2089 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2090 |             ""</mstyle>"";
> 2091 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2092 |     });
  2093 |
  2094 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2091, 'column': 8, 'index': 74630}","  2089 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2090 |             ""</mstyle>"";
> 2091 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2092 |     });
  2093 |
  2094 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2105, 'column': 8, 'index': 75191}","  2103 |         const tree = getParsed(tex);
  2104 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
> 2105 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
       |        ^ Duplicate Assert
  2106 |         expect(markup).toContain(
  2107 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2108 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2106, 'column': 8, 'index': 75262}","  2104 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2105 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
> 2106 |         expect(markup).toContain(
       |        ^ Duplicate Assert
  2107 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2108 |     });
  2109 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2203, 'column': 8, 'index': 78825}","  2201 |         const built = getBuilt`+ x`;
  2202 |
> 2203 |         expect(built[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2204 |         expect(built[0].classes).not.toContain(""mbin"");
  2205 |     });
  2206 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2204, 'column': 8, 'index': 78877}","  2202 |
  2203 |         expect(built[0].classes).toContain(""mord"");
> 2204 |         expect(built[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2205 |     });
  2206 |
  2207 |     it(""should create ords after some other objects"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2238, 'column': 8, 'index': 80393}","  2236 |         const markup = katex.renderToString(r`\sigma^2`);
  2237 |         expect(markup.indexOf(""<span"")).toBe(0);
> 2238 |         expect(markup).toContain(""\u03c3"");  // sigma
       |        ^ Duplicate Assert
  2239 |         expect(markup).toContain(""margin-right"");
  2240 |         expect(markup).not.toContain(""marginRight"");
  2241 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2239, 'column': 8, 'index': 80447}","  2237 |         expect(markup.indexOf(""<span"")).toBe(0);
  2238 |         expect(markup).toContain(""\u03c3"");  // sigma
> 2239 |         expect(markup).toContain(""margin-right"");
       |        ^ Duplicate Assert
  2240 |         expect(markup).not.toContain(""marginRight"");
  2241 |     });
  2242 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2240, 'column': 8, 'index': 80497}","  2238 |         expect(markup).toContain(""\u03c3"");  // sigma
  2239 |         expect(markup).toContain(""margin-right"");
> 2240 |         expect(markup).not.toContain(""marginRight"");
       |        ^ Duplicate Assert
  2241 |     });
  2242 |
  2243 |     it(""generates both MathML and HTML"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2246, 'column': 8, 'index': 80664}","  2244 |         const markup = katex.renderToString(""a"");
  2245 |
> 2246 |         expect(markup).toContain(""<span"");
       |        ^ Duplicate Assert
  2247 |         expect(markup).toContain(""<math"");
  2248 |     });
  2249 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2247, 'column': 8, 'index': 80707}","  2245 |
  2246 |         expect(markup).toContain(""<span"");
> 2247 |         expect(markup).toContain(""<math"");
       |        ^ Duplicate Assert
  2248 |     });
  2249 | });
  2250 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2299, 'column': 8, 'index': 82170}","  2297 |     it(""should produce mords"", function() {
  2298 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
> 2299 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2300 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2301 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2302 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2300, 'column': 8, 'index': 82233}","  2298 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
  2299 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
> 2300 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2301 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2302 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2303 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2301, 'column': 8, 'index': 82300}","  2299 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
  2300 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
> 2301 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2302 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2303 |     });
  2304 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2302, 'column': 8, 'index': 82365}","  2300 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2301 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
> 2302 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2303 |     });
  2304 | });
  2305 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2317, 'column': 8, 'index': 82882}","  2315 |     it(""should produce mords"", function() {
  2316 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
> 2317 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2318 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2319 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2320 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2318, 'column': 8, 'index': 82949}","  2316 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
  2317 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
> 2318 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2319 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2320 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2321 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2319, 'column': 8, 'index': 83020}","  2317 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
  2318 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
> 2319 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2320 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2321 |     });
  2322 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2320, 'column': 8, 'index': 83089}","  2318 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2319 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
> 2320 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2321 |     });
  2322 | });
  2323 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2334, 'column': 8, 'index': 83607}","  2332 |     it(""should produce mords"", function() {
  2333 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
> 2334 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2335 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2336 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2337 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2335, 'column': 8, 'index': 83681}","  2333 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
  2334 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
> 2335 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2336 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2337 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2338 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2336, 'column': 8, 'index': 83759}","  2334 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
  2335 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
> 2336 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2337 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2338 |     });
  2339 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2337, 'column': 8, 'index': 83835}","  2335 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2336 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
> 2337 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2338 |     });
  2339 | });
  2340 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2381, 'column': 8, 'index': 85324}","  2379 |     it(""should produce mords"", function() {
  2380 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
> 2381 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2382 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2383 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2384 |         expect(getBuilt`\underrightarrow )^2`[0].classes)",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2382, 'column': 8, 'index': 85399}","  2380 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
  2381 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
> 2382 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2383 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2384 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2385 |             .not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2383, 'column': 8, 'index': 85478}","  2381 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
  2382 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
> 2383 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2384 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2385 |             .not.toContain(""mclose"");
  2386 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2384, 'column': 8, 'index': 85555}","  2382 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2383 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
> 2384 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
       |        ^ Duplicate Assert
  2385 |             .not.toContain(""mclose"");
  2386 |     });
  2387 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2423, 'column': 8, 'index': 86858}","  2421 |         expect(getBuilt`\xrightarrow x`[0].classes).toContain(""mrel"");
  2422 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
> 2423 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2424 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2425 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2426 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2424, 'column': 8, 'index': 86929}","  2422 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
  2423 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
> 2424 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2425 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2426 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2427 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2425, 'column': 8, 'index': 87004}","  2423 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
  2424 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
> 2425 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2426 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2427 |     });
  2428 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2426, 'column': 8, 'index': 87077}","  2424 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2425 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
> 2426 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2427 |     });
  2428 | });
  2429 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2464, 'column': 8, 'index': 88322}","  2462 |         expect(getBuilt`\overbrace x`[0].classes).toContain(""mord"");
  2463 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
> 2464 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2465 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2466 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2467 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2465, 'column': 8, 'index': 88391}","  2463 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
  2464 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
> 2465 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2466 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2467 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2468 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2466, 'column': 8, 'index': 88464}","  2464 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
  2465 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
> 2466 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2467 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2468 |     });
  2469 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2467, 'column': 8, 'index': 88535}","  2465 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2466 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
> 2467 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2468 |     });
  2469 | });
  2470 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2496, 'column': 8, 'index': 89371}","  2494 |     it(""should produce mords"", function() {
  2495 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
> 2496 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2497 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2498 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2499 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2497, 'column': 8, 'index': 89436}","  2495 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
  2496 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
> 2497 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2498 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2499 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2500 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2498, 'column': 8, 'index': 89505}","  2496 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
  2497 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
> 2498 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2499 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2500 |     });
  2501 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2499, 'column': 8, 'index': 89572}","  2497 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2498 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
> 2499 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2500 |     });
  2501 | });
  2502 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2616, 'column': 8, 'index': 93361}","  2614 |     it(""should produce mords"", function() {
  2615 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
> 2616 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2617 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2618 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2619 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2617, 'column': 8, 'index': 93427}","  2615 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
  2616 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
> 2617 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2618 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2619 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2620 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2618, 'column': 8, 'index': 93497}","  2616 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
  2617 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
> 2618 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2619 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2620 |     });
  2621 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2619, 'column': 8, 'index': 93565}","  2617 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2618 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
> 2619 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2620 |     });
  2621 | });
  2622 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3467, 'column': 8, 'index': 126705}","  3465 |     it(""\\char produces literal characters"", () => {
  3466 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3467 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Duplicate Assert
  3468 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3469 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3470 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3468, 'column': 8, 'index': 126756}","  3466 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3467 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3468 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Duplicate Assert
  3469 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3470 |         expect`\char`.not.toParse();
  3471 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3469, 'column': 8, 'index': 126808}","  3467 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3468 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3469 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Duplicate Assert
  3470 |         expect`\char`.not.toParse();
  3471 |         expect(""\\char`"").not.toParse();
  3472 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4101, 'column': 8, 'index': 152930}","  4099 |         const example = exp32 + r`\a{1}`;
  4100 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
> 4101 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4102 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4103 |     });
  4104 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4102, 'column': 8, 'index': 152997}","  4100 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
  4101 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4102 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4103 |     });
  4104 |
  4105 |     it(""should count correctly with Unicode sub/superscripts"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4108, 'column': 8, 'index': 153266}","  4106 |         const example = exp32 + r`\def+{\a{1}}x⁺x⁺x⁺x⁺`;
  4107 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
> 4108 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4109 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4110 |     });
  4111 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4109, 'column': 8, 'index': 153333}","  4107 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
  4108 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4109 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4110 |     });
  4111 | });
  4112 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4151, 'column': 8, 'index': 154980}","  4149 |         // Ensure newlines appear outside base spans (because, in this regexp,
  4150 |         // base span occurs immediately after each newline span).
> 4151 |         expect(markup).toMatch(
       |        ^ Duplicate Assert
  4152 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
  4153 |         expect(markup).toMatchSnapshot();
  4154 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4153, 'column': 8, 'index': 155120}","  4151 |         expect(markup).toMatch(
  4152 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
> 4153 |         expect(markup).toMatchSnapshot();
       |        ^ Duplicate Assert
  4154 |     });
  4155 | });
  4156 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 511, 'column': 27, 'index': 15156}","  509 |
  510 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 511 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Eager Test
  512 |
  513 |         expect(dfracParse.type).toEqual(""genfrac"");
  514 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 517, 'column': 27, 'index': 15364}","  515 |         expect(dfracParse.denom).toBeDefined();
  516 |
> 517 |         const tfracParse = getParsed(tfracExpression)[0];
      |                           ^ Eager Test
  518 |
  519 |         expect(tfracParse.type).toEqual(""genfrac"");
  520 |         expect(tfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 523, 'column': 27, 'index': 15572}","  521 |         expect(tfracParse.denom).toBeDefined();
  522 |
> 523 |         const cfracParse = getParsed(cfracExpression)[0];
      |                           ^ Eager Test
  524 |
  525 |         expect(cfracParse.type).toEqual(""genfrac"");
  526 |         expect(cfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 529, 'column': 29, 'index': 15782}","  527 |         expect(cfracParse.denom).toBeDefined();
  528 |
> 529 |         const genfracParse = getParsed(genfrac1)[0];
      |                             ^ Eager Test
  530 |
  531 |         expect(genfracParse.type).toEqual(""genfrac"");
  532 |         expect(genfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 574, 'column': 16, 'index': 17236}","  572 |         let parse;
  573 |
> 574 |         parse = getParsed(simpleOver)[0];
      |                ^ Eager Test
  575 |
  576 |         expect(parse.type).toEqual(""genfrac"");
  577 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 580, 'column': 16, 'index': 17413}","  578 |         expect(parse.denom).toBeDefined();
  579 |
> 580 |         parse = getParsed(complexOver)[0];
      |                ^ Eager Test
  581 |
  582 |         expect(parse.type).toEqual(""genfrac"");
  583 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 586, 'column': 31, 'index': 17606}","  584 |         expect(parse.denom).toBeDefined();
  585 |
> 586 |         const parseBraceFrac = getParsed(braceFrac)[0];
      |                               ^ Eager Test
  587 |
  588 |         expect(parseBraceFrac.type).toEqual(""genfrac"");
  589 |         expect(parseBraceFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 594, 'column': 31, 'index': 17937}","  592 |         expect(parseBraceFrac.rightDelim).toBeDefined();
  593 |
> 594 |         const parseBrackFrac = getParsed(brackFrac)[0];
      |                               ^ Eager Test
  595 |
  596 |         expect(parseBrackFrac.type).toEqual(""genfrac"");
  597 |         expect(parseBrackFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 871, 'column': 23, 'index': 27898}","  869 |
  870 |     it(""should correctly extract the custom color"", function() {
> 871 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Eager Test
  872 |         const parse2 = getParsed(customColorExpression2)[0];
  873 |         const parse3 = getParsed(customColorExpression3)[0];
  874 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 872, 'column': 23, 'index': 27959}","  870 |     it(""should correctly extract the custom color"", function() {
  871 |         const parse1 = getParsed(customColorExpression1)[0];
> 872 |         const parse2 = getParsed(customColorExpression2)[0];
      |                       ^ Eager Test
  873 |         const parse3 = getParsed(customColorExpression3)[0];
  874 |
  875 |         expect(parse1.color).toEqual(""#fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 873, 'column': 23, 'index': 28020}","  871 |         const parse1 = getParsed(customColorExpression1)[0];
  872 |         const parse2 = getParsed(customColorExpression2)[0];
> 873 |         const parse3 = getParsed(customColorExpression3)[0];
      |                       ^ Eager Test
  874 |
  875 |         expect(parse1.color).toEqual(""#fA6"");
  876 |         expect(parse2.color).toEqual(""#fA6fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 971, 'column': 26, 'index': 30970}","  969 |
  970 |     it(""should produce the correct direction delimiter"", function() {
> 971 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Eager Test
  972 |         const rightParse = getParsed(bigDelim)[0];
  973 |
  974 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 972, 'column': 27, 'index': 31024}","  970 |     it(""should produce the correct direction delimiter"", function() {
  971 |         const leftParse = getParsed(normalDelim)[0];
> 972 |         const rightParse = getParsed(bigDelim)[0];
      |                           ^ Eager Test
  973 |
  974 |         expect(leftParse.mclass).toEqual(""mopen"");
  975 |         expect(rightParse.mclass).toEqual(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 979, 'column': 27, 'index': 31252}","  977 |
  978 |     it(""should parse the correct size delimiter"", function() {
> 979 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Eager Test
  980 |         const bigParse = getParsed(bigDelim)[0];
  981 |
  982 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 980, 'column': 25, 'index': 31304}","  978 |     it(""should parse the correct size delimiter"", function() {
  979 |         const smallParse = getParsed(normalDelim)[0];
> 980 |         const bigParse = getParsed(bigDelim)[0];
      |                         ^ Eager Test
  981 |
  982 |         expect(smallParse.size).toEqual(1);
  983 |         expect(bigParse.size).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1060, 'column': 24, 'index': 33670}","  1058 |
  1059 |     it(""should list the correct units"", function() {
> 1060 |         const emParse = getParsed(emRule)[0];
       |                        ^ Eager Test
  1061 |         const exParse = getParsed(exRule)[0];
  1062 |
  1063 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1061, 'column': 24, 'index': 33716}","  1059 |     it(""should list the correct units"", function() {
  1060 |         const emParse = getParsed(emRule)[0];
> 1061 |         const exParse = getParsed(exRule)[0];
       |                        ^ Eager Test
  1062 |
  1063 |         expect(emParse.width.unit).toEqual(""em"");
  1064 |         expect(emParse.height.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1098, 'column': 24, 'index': 34886}","  1096 |
  1097 |     it(""should list the correct units"", function() {
> 1098 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1099 |         const exParse = getParsed(exKern)[0];
  1100 |         const muParse = getParsed(muKern)[0];
  1101 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1099, 'column': 24, 'index': 34932}","  1097 |     it(""should list the correct units"", function() {
  1098 |         const emParse = getParsed(emKern)[0];
> 1099 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1100 |         const muParse = getParsed(muKern)[0];
  1101 |         const abParse = getParsed(abKern)[1];
  1102 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1100, 'column': 24, 'index': 34978}","  1098 |         const emParse = getParsed(emKern)[0];
  1099 |         const exParse = getParsed(exKern)[0];
> 1100 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1101 |         const abParse = getParsed(abKern)[1];
  1102 |
  1103 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1101, 'column': 24, 'index': 35024}","  1099 |         const exParse = getParsed(exKern)[0];
  1100 |         const muParse = getParsed(muKern)[0];
> 1101 |         const abParse = getParsed(abKern)[1];
       |                        ^ Eager Test
  1102 |
  1103 |         expect(emParse.dimension.unit).toEqual(""em"");
  1104 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1136, 'column': 24, 'index': 36169}","  1134 |
  1135 |     it(""should list the correct units"", function() {
> 1136 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1137 |         const exParse = getParsed(exKern)[0];
  1138 |         const muParse = getParsed(muKern)[0];
  1139 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1137, 'column': 24, 'index': 36215}","  1135 |     it(""should list the correct units"", function() {
  1136 |         const emParse = getParsed(emKern)[0];
> 1137 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1138 |         const muParse = getParsed(muKern)[0];
  1139 |         const abParse1 = getParsed(abKern1)[1];
  1140 |         const abParse2 = getParsed(abKern2)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1138, 'column': 24, 'index': 36261}","  1136 |         const emParse = getParsed(emKern)[0];
  1137 |         const exParse = getParsed(exKern)[0];
> 1138 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1139 |         const abParse1 = getParsed(abKern1)[1];
  1140 |         const abParse2 = getParsed(abKern2)[1];
  1141 |         const abParse3 = getParsed(abKern3)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1139, 'column': 25, 'index': 36308}","  1137 |         const exParse = getParsed(exKern)[0];
  1138 |         const muParse = getParsed(muKern)[0];
> 1139 |         const abParse1 = getParsed(abKern1)[1];
       |                         ^ Eager Test
  1140 |         const abParse2 = getParsed(abKern2)[1];
  1141 |         const abParse3 = getParsed(abKern3)[1];
  1142 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1140, 'column': 25, 'index': 36356}","  1138 |         const muParse = getParsed(muKern)[0];
  1139 |         const abParse1 = getParsed(abKern1)[1];
> 1140 |         const abParse2 = getParsed(abKern2)[1];
       |                         ^ Eager Test
  1141 |         const abParse3 = getParsed(abKern3)[1];
  1142 |
  1143 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1141, 'column': 25, 'index': 36404}","  1139 |         const abParse1 = getParsed(abKern1)[1];
  1140 |         const abParse2 = getParsed(abKern2)[1];
> 1141 |         const abParse3 = getParsed(abKern3)[1];
       |                         ^ Eager Test
  1142 |
  1143 |         expect(emParse.dimension.unit).toEqual(""em"");
  1144 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1152, 'column': 25, 'index': 36859}","  1150 |
  1151 |     it(""should parse elements on either side of a kern"", function() {
> 1152 |         const abParse1 = getParsed(abKern1);
       |                         ^ Eager Test
  1153 |         const abParse2 = getParsed(abKern2);
  1154 |         const abParse3 = getParsed(abKern3);
  1155 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1153, 'column': 25, 'index': 36904}","  1151 |     it(""should parse elements on either side of a kern"", function() {
  1152 |         const abParse1 = getParsed(abKern1);
> 1153 |         const abParse2 = getParsed(abKern2);
       |                         ^ Eager Test
  1154 |         const abParse3 = getParsed(abKern3);
  1155 |
  1156 |         expect(abParse1).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1154, 'column': 25, 'index': 36949}","  1152 |         const abParse1 = getParsed(abKern1);
  1153 |         const abParse2 = getParsed(abKern2);
> 1154 |         const abParse3 = getParsed(abKern3);
       |                         ^ Eager Test
  1155 |
  1156 |         expect(abParse1).toHaveLength(3);
  1157 |         expect(abParse1[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2077, 'column': 19, 'index': 74040}","  2075 |     it(""should render a combination of font and color changes"", function() {
  2076 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2077 |         let tree = getParsed(tex);
       |                   ^ Eager Test
  2078 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2079 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2080 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2086, 'column': 15, 'index': 74409}","  2084 |         // reverse the order of the commands
  2085 |         tex = r`\mathbb{\textcolor{blue}{R}}`;
> 2086 |         tree = getParsed(tex);
       |               ^ Eager Test
  2087 |         markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2088 |         node = ""<mstyle mathcolor=\""blue\"">"" +
  2089 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2994, 'column': 24, 'index': 108264}","  2992 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2993 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2994 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  2995 |         expect(parsed1.href).toBe(url);
  2996 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2997 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2996, 'column': 24, 'index': 108384}","  2994 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  2995 |         expect(parsed1.href).toBe(url);
> 2996 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  2997 |         expect(parsed2.href).toBe(url);
  2998 |     });
  2999 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3002, 'column': 24, 'index': 108614}","  3000 |     it(""should allow balanced braces in url"", function() {
  3001 |         const url = ""http://example.org/{{}t{oo}}"";
> 3002 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3003 |         expect(parsed1.href).toBe(url);
  3004 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3005 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3004, 'column': 24, 'index': 108734}","  3002 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  3003 |         expect(parsed1.href).toBe(url);
> 3004 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3005 |         expect(parsed2.href).toBe(url);
  3006 |     });
  3007 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3018, 'column': 24, 'index': 109388}","  3016 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3017 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3018 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3019 |         expect(parsed1.href).toBe(url);
  3020 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3021 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3020, 'column': 24, 'index': 109510}","  3018 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
  3019 |         expect(parsed1.href).toBe(url);
> 3020 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
       |                        ^ Eager Test
  3021 |         expect(parsed2.href).toBe(url);
  3022 |     });
  3023 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2175, 'column': 12, 'index': 77851}","  2173 |     it(""should throw Error when HTML attribute name is invalid"", function() {
  2174 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
> 2175 |             try {
       |            ^ Exception Handling
  2176 |                 katex.renderToString(
  2177 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);
  2178 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2740, 'column': 8, 'index': 97482}","  2738 | describe(""A parser error"", function() {
  2739 |     it(""should report the position of an error"", function() {
> 2740 |         try {
       |        ^ Exception Handling
  2741 |             parseTree(r`\sqrt}`, new Settings());
  2742 |         } catch (e) {
  2743 |             expect(e.position).toEqual(5);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3159, 'column': 8, 'index': 114947}","  3157 | describe(""ParseError properties"", function() {
  3158 |     it(""should contain affected position and length information"", function() {
> 3159 |         try {
       |        ^ Exception Handling
  3160 |             katex.renderToString(""1 + \\fraq{}{}"");
  3161 |
  3162 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3174, 'column': 8, 'index': 115610}","  3172 |
  3173 |     it(""should contain position and length information at end of input"", function() {
> 3174 |         try {
       |        ^ Exception Handling
  3175 |             katex.renderToString(""\\frac{}"");
  3176 |
  3177 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3189, 'column': 8, 'index': 116306}","  3187 |
  3188 |     it(""should contain no position and length information if unavailable"", function() {
> 3189 |         try {
       |        ^ Exception Handling
  3190 |             katex.renderToString(""\\verb|hello\nworld|"");
  3191 |
  3192 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 44, 'column': 22, 'index': 1225}","  42 |
  43 |     it(""should build a list of ords"", function() {
> 44 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  45 |
  46 |         for (let i = 0; i < parse.length; i++) {
  47 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 53, 'column': 22, 'index': 1483}","  51 |
  52 |     it(""should parse the right number of ords"", function() {
> 53 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  54 |
  55 |         expect(parse).toHaveLength(expression.length);
  56 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 67, 'column': 22, 'index': 1816}","  65 |
  66 |     it(""should build a list of bins"", function() {
> 67 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  68 |
  69 |         for (let i = 0; i < parse.length; i++) {
  70 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 87, 'column': 22, 'index': 2411}","  85 |
  86 |     it(""should build a list of rels"", function() {
> 87 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  88 |
  89 |         // Check each parsed group is a relation operator
  90 |         for (let i = 0; i < parse.length; i++) {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 115, 'column': 32, 'index': 3495}","  113 |     it(""should return one group, not a fragment"", function() {
  114 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
> 115 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
      |                                ^ Lazy Test
  116 |         expect(mml.children.length).toEqual(1);
  117 |     });
  118 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 128, 'column': 22, 'index': 3849}","  126 |
  127 |     it(""should build a list of puncts"", function() {
> 128 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  129 |
  130 |         for (let i = 0; i < parse.length; i++) {
  131 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 146, 'column': 22, 'index': 4310}","  144 |
  145 |     it(""should build a list of opens"", function() {
> 146 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  147 |
  148 |         for (let i = 0; i < parse.length; i++) {
  149 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 164, 'column': 22, 'index': 4773}","  162 |
  163 |     it(""should build a list of closes"", function() {
> 164 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  165 |
  166 |         for (let i = 0; i < parse.length; i++) {
  167 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 495, 'column': 22, 'index': 14598}","  493 |
  494 |     it(""should produce a frac"", function() {
> 495 |         const parse = getParsed(expression)[0];
      |                      ^ Lazy Test
  496 |
  497 |         expect(parse.type).toEqual(""genfrac"");
  498 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 511, 'column': 27, 'index': 15156}","  509 |
  510 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 511 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Lazy Test
  512 |
  513 |         expect(dfracParse.type).toEqual(""genfrac"");
  514 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 574, 'column': 16, 'index': 17236}","  572 |         let parse;
  573 |
> 574 |         parse = getParsed(simpleOver)[0];
      |                ^ Lazy Test
  575 |
  576 |         expect(parse.type).toEqual(""genfrac"");
  577 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 604, 'column': 22, 'index': 18345}","  602 |
  603 |     it(""should create a numerator from the atoms before \\over"", function() {
> 604 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  605 |
  606 |         const numer = parse.numer;
  607 |         expect(numer.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 611, 'column': 22, 'index': 18562}","  609 |
  610 |     it(""should create a denominator from the atoms after \\over"", function() {
> 611 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  612 |
  613 |         const denom = parse.denom;
  614 |         expect(denom.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 619, 'column': 22, 'index': 18797}","  617 |     it(""should handle empty numerators"", function() {
  618 |         const emptyNumerator = r`\over x`;
> 619 |         const parse = getParsed(emptyNumerator)[0];
      |                      ^ Lazy Test
  620 |         expect(parse.type).toEqual(""genfrac"");
  621 |         expect(parse.numer).toBeDefined();
  622 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 627, 'column': 22, 'index': 19092}","  625 |     it(""should handle empty denominators"", function() {
  626 |         const emptyDenominator = r`1 \over`;
> 627 |         const parse = getParsed(emptyDenominator)[0];
      |                      ^ Lazy Test
  628 |         expect(parse.type).toEqual(""genfrac"");
  629 |         expect(parse.numer).toBeDefined();
  630 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 635, 'column': 22, 'index': 19417}","  633 |     it(""should handle \\displaystyle correctly"", function() {
  634 |         const displaystyleExpression = r`\displaystyle 1 \over 2`;
> 635 |         const parse = getParsed(displaystyleExpression)[0];
      |                      ^ Lazy Test
  636 |         expect(parse.type).toEqual(""genfrac"");
  637 |         expect(parse.numer.body[0].type).toEqual(""styling"");
  638 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 648, 'column': 22, 'index': 19969}","  646 |     it(""should handle nested factions"", function() {
  647 |         const nestedOverExpression = r`{1 \over 2} \over 3`;
> 648 |         const parse = getParsed(nestedOverExpression)[0];
      |                      ^ Lazy Test
  649 |         expect(parse.type).toEqual(""genfrac"");
  650 |         expect(parse.numer.body[0].type).toEqual(""genfrac"");
  651 |         expect(parse.numer.body[0].numer.body[0].text).toEqual(""1"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 697, 'column': 22, 'index': 21679}","  695 |
  696 |     it(""should produce a sizing node"", function() {
> 697 |         const parse = getParsed(sizeExpression)[0];
      |                      ^ Lazy Test
  698 |
  699 |         expect(parse.type).toEqual(""sizing"");
  700 |         expect(parse.size).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 721, 'column': 22, 'index': 22488}","  719 |
  720 |     it(""should produce a text"", function() {
> 721 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  722 |
  723 |         expect(parse.type).toEqual(""text"");
  724 |         expect(parse.body).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 728, 'column': 22, 'index': 22703}","  726 |
  727 |     it(""should produce textords instead of mathords"", function() {
> 728 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  729 |         const group = parse.body;
  730 |
  731 |         expect(group[0].type).toEqual(""textord"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 751, 'column': 22, 'index': 23366}","  749 |
  750 |     it(""should contract spaces"", function() {
> 751 |         const parse = getParsed(spaceTextExpression)[0];
      |                      ^ Lazy Test
  752 |         const group = parse.body;
  753 |
  754 |         expect(group.length).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 770, 'column': 22, 'index': 24042}","  768 |
  769 |     it(""should ignore a space before the text group"", function() {
> 770 |         const parse = getParsed(leadingSpaceTextExpression)[0];
      |                      ^ Lazy Test
  771 |         // [m, o, o]
  772 |         expect(parse.body).toHaveLength(3);
  773 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 857, 'column': 22, 'index': 27429}","  855 |
  856 |     it(""should build a color node"", function() {
> 857 |         const parse = getParsed(colorExpression)[0];
      |                      ^ Lazy Test
  858 |
  859 |         expect(parse.type).toEqual(""color"");
  860 |         expect(parse.color).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 871, 'column': 23, 'index': 27898}","  869 |
  870 |     it(""should correctly extract the custom color"", function() {
> 871 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Lazy Test
  872 |         const parse2 = getParsed(customColorExpression2)[0];
  873 |         const parse3 = getParsed(customColorExpression3)[0];
  874 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 930, 'column': 22, 'index': 29824}","  928 |
  929 |     it(""should produce spacing in math mode"", function() {
> 930 |         const parse = getParsed(mathTie);
      |                      ^ Lazy Test
  931 |
  932 |         expect(parse[1].type).toEqual(""spacing"");
  933 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 936, 'column': 21, 'index': 29984}","  934 |
  935 |     it(""should produce spacing in text mode"", function() {
> 936 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  937 |         const parse = text.body;
  938 |
  939 |         expect(parse[1].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 943, 'column': 21, 'index': 30189}","  941 |
  942 |     it(""should not contract with spaces in text mode"", function() {
> 943 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  944 |         const parse = text.body;
  945 |
  946 |         expect(parse[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 965, 'column': 22, 'index': 30786}","  963 |
  964 |     it(""should produce a delimsizing"", function() {
> 965 |         const parse = getParsed(normalDelim)[0];
      |                      ^ Lazy Test
  966 |
  967 |         expect(parse.type).toEqual(""delimsizing"");
  968 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 971, 'column': 26, 'index': 30970}","  969 |
  970 |     it(""should produce the correct direction delimiter"", function() {
> 971 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Lazy Test
  972 |         const rightParse = getParsed(bigDelim)[0];
  973 |
  974 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 979, 'column': 27, 'index': 31252}","  977 |
  978 |     it(""should parse the correct size delimiter"", function() {
> 979 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Lazy Test
  980 |         const bigParse = getParsed(bigDelim)[0];
  981 |
  982 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 995, 'column': 22, 'index': 31667}","  993 |
  994 |     it(""should produce an overline"", function() {
> 995 |         const parse = getParsed(overline)[0];
      |                      ^ Lazy Test
  996 |
  997 |         expect(parse.type).toEqual(""overline"");
  998 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1054, 'column': 22, 'index': 33517}","  1052 |
  1053 |     it(""should produce a rule"", function() {
> 1054 |         const parse = getParsed(emRule)[0];
       |                      ^ Lazy Test
  1055 |
  1056 |         expect(parse.type).toEqual(""rule"");
  1057 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1060, 'column': 24, 'index': 33670}","  1058 |
  1059 |     it(""should list the correct units"", function() {
> 1060 |         const emParse = getParsed(emRule)[0];
       |                        ^ Lazy Test
  1061 |         const exParse = getParsed(exRule)[0];
  1062 |
  1063 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1071, 'column': 32, 'index': 34040}","  1069 |
  1070 |     it(""should parse the number correctly"", function() {
> 1071 |         const hardNumberParse = getParsed(hardNumberRule)[0];
       |                                ^ Lazy Test
  1072 |
  1073 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
  1074 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1098, 'column': 24, 'index': 34886}","  1096 |
  1097 |     it(""should list the correct units"", function() {
> 1098 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1099 |         const exParse = getParsed(exKern)[0];
  1100 |         const muParse = getParsed(muKern)[0];
  1101 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1136, 'column': 24, 'index': 36169}","  1134 |
  1135 |     it(""should list the correct units"", function() {
> 1136 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1137 |         const exParse = getParsed(exKern)[0];
  1138 |         const muParse = getParsed(muKern)[0];
  1139 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1152, 'column': 25, 'index': 36859}","  1150 |
  1151 |     it(""should parse elements on either side of a kern"", function() {
> 1152 |         const abParse1 = getParsed(abKern1);
       |                         ^ Lazy Test
  1153 |         const abParse2 = getParsed(abKern2);
  1154 |         const abParse3 = getParsed(abKern3);
  1155 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1183, 'column': 24, 'index': 37934}","  1181 |
  1182 |     it(""should handle whitespace"", function() {
> 1183 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
       |                        ^ Lazy Test
  1184 |
  1185 |         expect(abParse).toHaveLength(3);
  1186 |         expect(abParse[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1201, 'column': 22, 'index': 38501}","  1199 |
  1200 |     it(""should produce a leftright"", function() {
> 1201 |         const parse = getParsed(normalLeftRight)[0];
       |                      ^ Lazy Test
  1202 |
  1203 |         expect(parse.type).toEqual(""leftright"");
  1204 |         expect(parse.left).toEqual(""("");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1378, 'column': 22, 'index': 44866}","  1376 |
  1377 |     it(""should produce sqrts"", function() {
> 1378 |         const parse = getParsed(sqrt)[0];
       |                      ^ Lazy Test
  1379 |
  1380 |         expect(parse.type).toEqual(""sqrt"");
  1381 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1577, 'column': 22, 'index': 51286}","  1575 |     it(""should only change the style within its group"", function() {
  1576 |         const text = r`a b { c d \displaystyle e f } g h`;
> 1577 |         const parse = getParsed(text);
       |                      ^ Lazy Test
  1578 |
  1579 |         const displayNode = parse[2].body[2];
  1580 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2077, 'column': 19, 'index': 74040}","  2075 |     it(""should render a combination of font and color changes"", function() {
  2076 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2077 |         let tree = getParsed(tex);
       |                   ^ Lazy Test
  2078 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2079 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2080 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2096, 'column': 21, 'index': 74781}","  2094 |     it(""should render text as <mtext>"", function() {
  2095 |         const tex = r`\text{for }`;
> 2096 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2097 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2098 |         expect(markup).toContain(""<mtext>for\u00a0</mtext>"");
  2099 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2103, 'column': 21, 'index': 75093}","  2101 |     it(""should render math within text as side-by-side children"", function() {
  2102 |         const tex = r`\text{graph: $y = mx + b$}`;
> 2103 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2104 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2105 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
  2106 |         expect(markup).toContain(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2118, 'column': 15, 'index': 75753}","  2116 |
  2117 |     it(""should produce mords"", function() {
> 2118 |         expect(getBuilt(img, trustSettings)[0].classes).toContain(""mord"");
       |               ^ Lazy Test
  2119 |     });
  2120 |
  2121 |     it(""should not render without trust setting"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2122, 'column': 22, 'index': 75907}","  2120 |
  2121 |     it(""should not render without trust setting"", function() {
> 2122 |         const built = getBuilt(img);
       |                      ^ Lazy Test
  2123 |         expect(built).toMatchSnapshot();
  2124 |     });
  2125 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2127, 'column': 22, 'index': 76050}","  2125 |
  2126 |     it(""should render with trust setting"", function() {
> 2127 |         const built = getBuilt(img, trustSettings);
       |                      ^ Lazy Test
  2128 |         expect(built).toMatchSnapshot();
  2129 |     });
  2130 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2153, 'column': 22, 'index': 76996}","  2151 |
  2152 |     it(""should set HTML attributes"", function() {
> 2153 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2154 |         expect(built[0].attributes.id).toMatch(""bar"");
  2155 |         expect(built[1].classes).toContain(""foo"");
  2156 |         expect(built[2].attributes.style).toMatch(""color: red"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2164, 'column': 22, 'index': 77403}","  2162 |
  2163 |     it(""should not affect spacing"", function() {
> 2164 |         const built = getBuilt(""\\htmlId{a}{x+}y"", trustNonStrictSettings);
       |                      ^ Lazy Test
  2165 |         expect(built).toMatchSnapshot();
  2166 |     });
  2167 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2169, 'column': 22, 'index': 77596}","  2167 |
  2168 |     it(""should render with trust and strict setting"", function() {
> 2169 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2170 |         expect(built).toMatchSnapshot();
  2171 |     });
  2172 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2344, 'column': 21, 'index': 84098}","  2342 |     it(""should properly render stretchy accents"", function() {
  2343 |         const tex = `\\widetilde{ABCD}`;
> 2344 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2345 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2346 |         expect(markup).toContain('<mo stretchy=""true"">~</mo>');
  2347 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2994, 'column': 24, 'index': 108264}","  2992 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2993 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2994 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  2995 |         expect(parsed1.href).toBe(url);
  2996 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2997 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3002, 'column': 24, 'index': 108614}","  3000 |     it(""should allow balanced braces in url"", function() {
  3001 |         const url = ""http://example.org/{{}t{oo}}"";
> 3002 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3003 |         expect(parsed1.href).toBe(url);
  3004 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3005 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3018, 'column': 24, 'index': 109388}","  3016 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3017 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3018 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3019 |         expect(parsed1.href).toBe(url);
  3020 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3021 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3034, 'column': 22, 'index': 110053}","  3032 |
  3033 |     it(""should not affect spacing around"", function() {
> 3034 |         const built = getBuilt(""a\\href{http://example.com/}{+b}"", trustSettings);
       |                      ^ Lazy Test
  3035 |         expect(built).toMatchSnapshot();
  3036 |     });
  3037 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3044, 'column': 23, 'index': 110427}","  3042 |
  3043 |     it(""should allow explicitly allowed protocols"", () => {
> 3044 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3045 |             ""\\href{ftp://x}{foo}"",
  3046 |             new Settings({trust: (context) => context.protocol === ""ftp""}),
  3047 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3052, 'column': 23, 'index': 110706}","  3050 |
  3051 |     it(""should allow all protocols when trust option is true"", () => {
> 3052 |         const parsed = getParsed(""\\href{ftp://x}{foo}"", trustSettings);
       |                       ^ Lazy Test
  3053 |         expect(parsed).toMatchSnapshot();
  3054 |     });
  3055 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3057, 'column': 23, 'index': 110897}","  3055 |
  3056 |     it(""should not allow explicitly disallowed protocols"", () => {
> 3057 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3058 |             ""\\href{javascript:alert('x')}{foo}"",
  3059 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3060 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3065, 'column': 23, 'index': 111202}","  3063 |
  3064 |     it(""should not allow explicitly uppercased disallowed protocols"", () => {
> 3065 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3066 |             ""\\href{JavaScript:alert('x')}{foo}"",
  3067 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3068 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3141, 'column': 28, 'index': 114283}","  3139 |
  3140 |     it(""should produce color nodes with a color value given by errorColor"", function() {
> 3141 |         const parsedInput = getParsed(r`\error`, noThrowSettings);
       |                            ^ Lazy Test
  3142 |         expect(parsedInput[0].type).toBe(""color"");
  3143 |         expect(parsedInput[0].color).toBe(errorColor);
  3144 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3147, 'column': 22, 'index': 114542}","  3145 |
  3146 |     it(""should build katex-error span for other type of KaTeX error"", function() {
> 3147 |         const built = getBuilt(`2^2^2`, noThrowSettings);
       |                      ^ Lazy Test
  3148 |         expect(built).toMatchSnapshot();
  3149 |     });
  3150 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3482, 'column': 27, 'index': 127300}","  3480 |         const parsedBare = getParsed`~`;
  3481 |         expect(parsedBare[0].type).toEqual(""spacing"");
> 3482 |         const parsedChar = getParsed(""\\char`\\~"");
       |                           ^ Lazy Test
  3483 |         expect(parsedChar[0].type).toEqual(""textord"");
  3484 |     });
  3485 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4054, 'column': 22, 'index': 151261}","  4052 |
  4053 |     it(""should clamp size when set"", function() {
> 4054 |         const built = getBuilt(rule, new Settings({maxSize: 5}))[0];
       |                      ^ Lazy Test
  4055 |         expect(built.style.borderRightWidth).toEqual(""5em"");
  4056 |         expect(built.style.borderTopWidth).toEqual(""5em"");
  4057 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4060, 'column': 22, 'index': 151517}","  4058 |
  4059 |     it(""should not clamp size when not set"", function() {
> 4060 |         const built = getBuilt(rule)[0];
       |                      ^ Lazy Test
  4061 |         expect(built.style.borderRightWidth).toEqual(""999em"");
  4062 |         expect(built.style.borderTopWidth).toEqual(""999em"");
  4063 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4066, 'column': 22, 'index': 151775}","  4064 |
  4065 |     it(""should make zero-width rules if a negative maxSize is passed"", function() {
> 4066 |         const built = getBuilt(rule, new Settings({maxSize: -5}))[0];
       |                      ^ Lazy Test
  4067 |         expect(built.style.borderRightWidth).toEqual(""0em"");
  4068 |         expect(built.style.borderTopWidth).toEqual(""0em"");
  4069 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 116, 'column': 44, 'index': 3587}","  114 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
  115 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
> 116 |         expect(mml.children.length).toEqual(1);
      |                                            ^ Magic Number
  117 |     });
  118 | });
  119 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 348, 'column': 35, 'index': 10257}","  346 |         const parse = getParsed`{xy}`;
  347 |
> 348 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  349 |
  350 |         const ord = parse[0];
  351 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 370, 'column': 35, 'index': 10859}","  368 |         const parse = getParsed`\begingroup xy \endgroup`;
  369 |
> 370 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  371 |
  372 |         const ord = parse[0];
  373 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 393, 'column': 35, 'index': 11486}","  391 |         const parse = getParsed`\Large abc`;
  392 |
> 393 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  394 |
  395 |         const sizing = parse[0];
  396 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 405, 'column': 35, 'index': 11809}","  403 |         const parse = getParsed`a \Large abc`;
  404 |
> 405 |         expect(parse).toHaveLength(2);
      |                                   ^ Magic Number
  406 |
  407 |         const sizing = parse[1];
  408 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 410, 'column': 41, 'index': 11936}","  408 |
  409 |         expect(sizing.type).toEqual(""sizing"");
> 410 |         expect(sizing.body).toHaveLength(3);
      |                                         ^ Magic Number
  411 |     });
  412 |
  413 |     it(""should stop at the ends of groups"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 420, 'column': 41, 'index': 12219}","  418 |
  419 |         expect(sizing.type).toEqual(""sizing"");
> 420 |         expect(sizing.body).toHaveLength(1);
      |                                         ^ Magic Number
  421 |     });
  422 |
  423 |     describe(""within optional groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 607, 'column': 40, 'index': 18448}","  605 |
  606 |         const numer = parse.numer;
> 607 |         expect(numer.body).toHaveLength(4);
      |                                        ^ Magic Number
  608 |     });
  609 |
  610 |     it(""should create a denominator from the atoms after \\over"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 614, 'column': 40, 'index': 18665}","  612 |
  613 |         const denom = parse.denom;
> 614 |         expect(denom.body).toHaveLength(4);
      |                                        ^ Magic Number
  615 |     });
  616 |
  617 |     it(""should handle empty numerators"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 754, 'column': 37, 'index': 23473}","  752 |         const group = parse.body;
  753 |
> 754 |         expect(group.length).toEqual(4);
      |                                     ^ Magic Number
  755 |         expect(group[0].type).toEqual(""spacing"");
  756 |         expect(group[1].type).toEqual(""textord"");
  757 |         expect(group[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 772, 'column': 40, 'index': 24145}","  770 |         const parse = getParsed(leadingSpaceTextExpression)[0];
  771 |         // [m, o, o]
> 772 |         expect(parse.body).toHaveLength(3);
      |                                        ^ Magic Number
  773 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");
  774 |     });
  775 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 982, 'column': 40, 'index': 31369}","  980 |         const bigParse = getParsed(bigDelim)[0];
  981 |
> 982 |         expect(smallParse.size).toEqual(1);
      |                                        ^ Magic Number
  983 |         expect(bigParse.size).toEqual(4);
  984 |     });
  985 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 983, 'column': 38, 'index': 31411}","  981 |
  982 |         expect(smallParse.size).toEqual(1);
> 983 |         expect(bigParse.size).toEqual(4);
      |                                      ^ Magic Number
  984 |     });
  985 | });
  986 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1073, 'column': 57, 'index': 34128}","  1071 |         const hardNumberParse = getParsed(hardNumberRule)[0];
  1072 |
> 1073 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
       |                                                         ^ Magic Number
  1074 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
  1075 |     });
  1076 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1074, 'column': 58, 'index': 34193}","  1072 |
  1073 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
> 1074 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
       |                                                          ^ Magic Number
  1075 |     });
  1076 |
  1077 |     it(""should parse negative sizes"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1121, 'column': 51, 'index': 35738}","  1119 |     it(""should parse positive sizes"", function() {
  1120 |         const parse = getParsed`\kern{+1em}`[0];
> 1121 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1122 |     });
  1123 | });
  1124 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1156, 'column': 38, 'index': 37008}","  1154 |         const abParse3 = getParsed(abKern3);
  1155 |
> 1156 |         expect(abParse1).toHaveLength(3);
       |                                      ^ Magic Number
  1157 |         expect(abParse1[0].text).toEqual(""a"");
  1158 |         expect(abParse1[2].text).toEqual(""b"");
  1159 |         expect(abParse2).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1159, 'column': 38, 'index': 37144}","  1157 |         expect(abParse1[0].text).toEqual(""a"");
  1158 |         expect(abParse1[2].text).toEqual(""b"");
> 1159 |         expect(abParse2).toHaveLength(3);
       |                                      ^ Magic Number
  1160 |         expect(abParse2[0].text).toEqual(""a"");
  1161 |         expect(abParse2[2].text).toEqual(""b"");
  1162 |         expect(abParse3).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1162, 'column': 38, 'index': 37280}","  1160 |         expect(abParse2[0].text).toEqual(""a"");
  1161 |         expect(abParse2[2].text).toEqual(""b"");
> 1162 |         expect(abParse3).toHaveLength(3);
       |                                      ^ Magic Number
  1163 |         expect(abParse3[0].text).toEqual(""a"");
  1164 |         expect(abParse3[2].text).toEqual(""b"");
  1165 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1179, 'column': 51, 'index': 37849}","  1177 |     it(""should parse positive sizes"", function() {
  1178 |         const parse = getParsed`\kern+1em`[0];
> 1179 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1180 |     });
  1181 |
  1182 |     it(""should handle whitespace"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1185, 'column': 37, 'index': 38011}","  1183 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
  1184 |
> 1185 |         expect(abParse).toHaveLength(3);
       |                                     ^ Magic Number
  1186 |         expect(abParse[0].text).toEqual(""a"");
  1187 |         expect(abParse[1].dimension.unit).toEqual(""mu"");
  1188 |         expect(abParse[2].text).toEqual(""b"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1338, 'column': 37, 'index': 43307}","  1336 |     it(""should eat a final newline"", function() {
  1337 |         const m3 = getParsed`\begin{matrix}a&b\\ c&d \\ \end{matrix}`[0];
> 1338 |         expect(m3.body).toHaveLength(2);
       |                                     ^ Magic Number
  1339 |     });
  1340 |
  1341 |     it(""should grab \\arraystretch"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1585, 'column': 41, 'index': 51493}","  1583 |         const displayBody = displayNode.body;
  1584 |
> 1585 |         expect(displayBody).toHaveLength(2);
       |                                         ^ Magic Number
  1586 |         expect(displayBody[0].text).toEqual(""e"");
  1587 |     });
  1588 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1639, 'column': 36, 'index': 53528}","  1637 |
  1638 |         const bbBody = nestedParse.body.body;
> 1639 |         expect(bbBody).toHaveLength(3);
       |                                    ^ Magic Number
  1640 |         expect(bbBody[0].type).toEqual(""mathord"");
  1641 |         expect(bbBody[2].type).toEqual(""font"");
  1642 |         expect(bbBody[2].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1651, 'column': 34, 'index': 54056}","  1649 |         expect(colorMathbbParse.color).toEqual(""blue"");
  1650 |         const body = colorMathbbParse.body;
> 1651 |         expect(body).toHaveLength(1);
       |                                  ^ Magic Number
  1652 |         expect(body[0].type).toEqual(""font"");
  1653 |         expect(body[0].font).toEqual(""mathbb"");
  1654 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1664, 'column': 42, 'index': 54520}","  1662 |         expect(bf.type).toEqual(""font"");
  1663 |         expect(bf.font).toEqual(""mathbf"");
> 1664 |         expect(bf.body.body).toHaveLength(3);
       |                                          ^ Magic Number
  1665 |         expect(bf.body.body[0].text).toEqual(""a"");
  1666 |         expect(bf.body.body[1].type).toEqual(""font"");
  1667 |         expect(bf.body.body[1].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2237, 'column': 45, 'index': 80381}","  2235 |         // Just a few quick sanity checks here...
  2236 |         const markup = katex.renderToString(r`\sigma^2`);
> 2237 |         expect(markup.indexOf(""<span"")).toBe(0);
       |                                             ^ Magic Number
  2238 |         expect(markup).toContain(""\u03c3"");  // sigma
  2239 |         expect(markup).toContain(""margin-right"");
  2240 |         expect(markup).not.toContain(""marginRight"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2743, 'column': 39, 'index': 97599}","  2741 |             parseTree(r`\sqrt}`, new Settings());
  2742 |         } catch (e) {
> 2743 |             expect(e.position).toEqual(5);
       |                                       ^ Magic Number
  2744 |         }
  2745 |     });
  2746 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2877, 'column': 37, 'index': 101894}","  2875 |     it(""should not eat the last row when its first cell is empty"", function() {
  2876 |         const ae = getParsed`\begin{aligned}&E_1 & (1)\\&E_2 & (2)\\&E_3 & (3)\end{aligned}`[0];
> 2877 |         expect(ae.body).toHaveLength(3);
       |                                     ^ Magic Number
  2878 |     });
  2879 | });
  2880 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3168, 'column': 40, 'index': 115451}","  3166 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");
  3167 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
> 3168 |             expect(error.position).toBe(4);
       |                                        ^ Magic Number
  3169 |             expect(error.length).toBe(5);
  3170 |         }
  3171 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3169, 'column': 38, 'index': 115493}","  3167 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
  3168 |             expect(error.position).toBe(4);
> 3169 |             expect(error.length).toBe(5);
       |                                      ^ Magic Number
  3170 |         }
  3171 |     });
  3172 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3183, 'column': 40, 'index': 116145}","  3181 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");
  3182 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
> 3183 |             expect(error.position).toBe(7);
       |                                        ^ Magic Number
  3184 |             expect(error.length).toBe(0);
  3185 |         }
  3186 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3184, 'column': 38, 'index': 116187}","  3182 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
  3183 |             expect(error.position).toBe(7);
> 3184 |             expect(error.length).toBe(0);
       |                                      ^ Magic Number
  3185 |         }
  3186 |     });
  3187 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 762}","  760 |
  761 |     it(""should handle backslash followed by newline"", () => {
> 762 |         expect(""\\text{\\ \t\r \n \t\r  }"").toParseLike`\text{\ }`;
      |        ^ Redundant Assertion
  763 |     });
  764 |
  765 |     it(""should accept math mode tokens after its argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1733}","  1731 | describe(""A comment parser"", function() {
  1732 |     it(""should parse comments at the end of a line"", () => {
> 1733 |         expect(""a^2 + b^2 = c^2 % Pythagoras' Theorem\n"").toParse();
       |        ^ Redundant Assertion
  1734 |     });
  1735 |
  1736 |     it(""should parse comments at the start of a line"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1737}","  1735 |
  1736 |     it(""should parse comments at the start of a line"", () => {
> 1737 |         expect(""% comment\n"").toParse();
       |        ^ Redundant Assertion
  1738 |     });
  1739 |
  1740 |     it(""should parse multiple lines of comments in a row"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1741}","  1739 |
  1740 |     it(""should parse multiple lines of comments in a row"", () => {
> 1741 |         expect(""% comment 1\n% comment 2\n"").toParse();
       |        ^ Redundant Assertion
  1742 |     });
  1743 |
  1744 |     it(""should parse comments between subscript and superscript"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1745}","  1743 |
  1744 |     it(""should parse comments between subscript and superscript"", () => {
> 1745 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
       |        ^ Redundant Assertion
  1746 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
  1747 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1748 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1746}","  1744 |     it(""should parse comments between subscript and superscript"", () => {
  1745 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
> 1746 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
       |        ^ Redundant Assertion
  1747 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1748 |     });
  1749 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1747}","  1745 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
  1746 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
> 1747 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
       |        ^ Redundant Assertion
  1748 |     });
  1749 |
  1750 |     it(""should parse comments in size and color groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1751}","  1749 |
  1750 |     it(""should parse comments in size and color groups"", () => {
> 1751 |         expect(""\\kern{1 %kern\nem}"").toParse();
       |        ^ Redundant Assertion
  1752 |         expect(""\\kern1 %kern\nem"").toParse();
  1753 |         expect(""\\color{#f00%red\n}"").toParse();
  1754 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1752}","  1750 |     it(""should parse comments in size and color groups"", () => {
  1751 |         expect(""\\kern{1 %kern\nem}"").toParse();
> 1752 |         expect(""\\kern1 %kern\nem"").toParse();
       |        ^ Redundant Assertion
  1753 |         expect(""\\color{#f00%red\n}"").toParse();
  1754 |     });
  1755 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1753}","  1751 |         expect(""\\kern{1 %kern\nem}"").toParse();
  1752 |         expect(""\\kern1 %kern\nem"").toParse();
> 1753 |         expect(""\\color{#f00%red\n}"").toParse();
       |        ^ Redundant Assertion
  1754 |     });
  1755 |
  1756 |     it(""should parse comments before an expression"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1757}","  1755 |
  1756 |     it(""should parse comments before an expression"", () => {
> 1757 |         expect(""%comment\n{2}"").toParseLike`{2}`;
       |        ^ Redundant Assertion
  1758 |     });
  1759 |
  1760 |     it(""should parse comments before and between \\hline"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1767}","  1765 |
  1766 |     it(""should parse comments in the macro definition"", () => {
> 1767 |         expect(""\\def\\foo{1 %}\n2}\n\\foo"").toParseLike`12`;
       |        ^ Redundant Assertion
  1768 |     });
  1769 |
  1770 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1771}","  1769 |
  1770 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {
> 1771 |         expect(""\\def\\foo{1\n2}\nx %\\foo\n"").toParseLike`x`;
       |        ^ Redundant Assertion
  1772 |     });
  1773 |
  1774 |     it(""should not parse a comment without newline in strict mode"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1780}","  1778 |
  1779 |     it(""should not produce or consume space"", () => {
> 1780 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
       |        ^ Redundant Assertion
  1781 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
  1782 |     });
  1783 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1781}","  1779 |     it(""should not produce or consume space"", () => {
  1780 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
> 1781 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
       |        ^ Redundant Assertion
  1782 |     });
  1783 |
  1784 |     it(""should not include comments in the output"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1785}","  1783 |
  1784 |     it(""should not include comments in the output"", () => {
> 1785 |         expect(""5 % comment\n"").toParseLike`5`;
       |        ^ Redundant Assertion
  1786 |     });
  1787 | });
  1788 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 16, 'line': 2180}","  2178 |
  2179 |                 // Render is expected to throw, so this should not be called.
> 2180 |                 expect(true).toBe(false);
       |                ^ Redundant Assertion
  2181 |             } catch (error) {
  2182 |                 expect(error).toBeInstanceOf(ParseError);
  2183 |                 const message =",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 2982}","  2980 |         expect`\href%end`.toParseLike(""\\href{%}end"", trustSettings);
  2981 |         expect`\url%end`.toParseLike(""\\url{%}end"", trustSettings);
> 2982 |         expect(""\\url%%end\n"").toParseLike(""\\url{%}"", trustSettings);
       |        ^ Redundant Assertion
  2983 |         expect`\url end`.toParseLike(""\\url{e}nd"", trustSettings);
  2984 |         expect`\url%end`.toParseLike(""\\url {%}end"", trustSettings);
  2985 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3025}","  3023 |
  3024 |     it(""should allow comments after URLs"", function() {
> 3025 |         expect(""\\url{http://example.com/}%comment\n"").toBuild();
       |        ^ Redundant Assertion
  3026 |     });
  3027 |
  3028 |     it(""should be marked up correctly"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3163}","  3161 |
  3162 |             // Render is expected to throw, so this should not be called.
> 3163 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3164 |         } catch (error) {
  3165 |             expect(error).toBeInstanceOf(ParseError);
  3166 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3178}","  3176 |
  3177 |             // Render is expected to throw, so this should not be called.
> 3178 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3179 |         } catch (error) {
  3180 |             expect(error).toBeInstanceOf(ParseError);
  3181 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3193}","  3191 |
  3192 |             // Render is expected to throw, so this should not be called.
> 3193 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3194 |         } catch (error) {
  3195 |             expect(error).toBeInstanceOf(ParseError);
  3196 |             expect(error.message).toBe(""KaTeX parse error: \\verb ended by end of line instead of matching delimiter"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3466}","  3464 |
  3465 |     it(""\\char produces literal characters"", () => {
> 3466 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
       |        ^ Redundant Assertion
  3467 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3468 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3469 |         expect(""\\char`\\%"").toParseLike`\char""25`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3467}","  3465 |     it(""\\char produces literal characters"", () => {
  3466 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3467 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Redundant Assertion
  3468 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3469 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3470 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3468}","  3466 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3467 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3468 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Redundant Assertion
  3469 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3470 |         expect`\char`.not.toParse();
  3471 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3469}","  3467 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3468 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3469 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Redundant Assertion
  3470 |         expect`\char`.not.toParse();
  3471 |         expect(""\\char`"").not.toParse();
  3472 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3471}","  3469 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3470 |         expect`\char`.not.toParse();
> 3471 |         expect(""\\char`"").not.toParse();
       |        ^ Redundant Assertion
  3472 |         expect`\char'`.not.toParse();
  3473 |         expect`\char""`.not.toParse();
  3474 |         expect`\char'a`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3935}","  3933 |
  3934 |     it(""should parse combining characters"", function() {
> 3935 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
       |        ^ Redundant Assertion
  3936 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
  3937 |     });
  3938 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3936}","  3934 |     it(""should parse combining characters"", function() {
  3935 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
> 3936 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
       |        ^ Redundant Assertion
  3937 |     });
  3938 |
  3939 |     it(""should parse multi-accented characters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3974}","  3972 |
  3973 |     it(""should parse symbols"", function() {
> 3974 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3975 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
  3976 |     });
  3977 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3975}","  3973 |     it(""should parse symbols"", function() {
  3974 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
> 3975 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3976 |     });
  3977 |
  3978 |     it(""should build Greek capital letters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3992}","  3990 |
  3991 |     it(""should build binary operators"", function() {
> 3992 |         expect(""±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞\u22C5\u2218\u2216\u2219"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3993 |     });
  3994 |
  3995 |     it(""should build common ords"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3996}","  3994 |
  3995 |     it(""should build common ords"", function() {
> 3996 |         expect(""§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3997 |     });
  3998 |
  3999 |     it(""should build delimiters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4000}","  3998 |
  3999 |     it(""should build delimiters"", function() {
> 4000 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
       |        ^ Redundant Assertion
  4001 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4002 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4003 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4001}","  3999 |     it(""should build delimiters"", function() {
  4000 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
> 4001 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
       |        ^ Redundant Assertion
  4002 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4003 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4004 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4002}","  4000 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
  4001 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
> 4002 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
       |        ^ Redundant Assertion
  4003 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4004 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4005 |         expect`┌x┐ └x┘`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4003}","  4001 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4002 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
> 4003 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
       |        ^ Redundant Assertion
  4004 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4005 |         expect`┌x┐ └x┘`.toBuild();
  4006 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4004}","  4002 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4003 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
> 4004 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
       |        ^ Redundant Assertion
  4005 |         expect`┌x┐ └x┘`.toBuild();
  4006 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4007 |         expect(""\u27E6x\u27E7"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4006}","  4004 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4005 |         expect`┌x┐ └x┘`.toBuild();
> 4006 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
       |        ^ Redundant Assertion
  4007 |         expect(""\u27E6x\u27E7"").toBuild();
  4008 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4009 |         expect(""\\lBrace \\rBrace"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4007}","  4005 |         expect`┌x┐ └x┘`.toBuild();
  4006 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
> 4007 |         expect(""\u27E6x\u27E7"").toBuild();
       |        ^ Redundant Assertion
  4008 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4009 |         expect(""\\lBrace \\rBrace"").toBuild();
  4010 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4008}","  4006 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4007 |         expect(""\u27E6x\u27E7"").toBuild();
> 4008 |         expect(""\\llbracket \\rrbracket"").toBuild();
       |        ^ Redundant Assertion
  4009 |         expect(""\\lBrace \\rBrace"").toBuild();
  4010 |     });
  4011 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4009}","  4007 |         expect(""\u27E6x\u27E7"").toBuild();
  4008 |         expect(""\\llbracket \\rrbracket"").toBuild();
> 4009 |         expect(""\\lBrace \\rBrace"").toBuild();
       |        ^ Redundant Assertion
  4010 |     });
  4011 |
  4012 |     it(""should build some surrogate pairs"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4279, 'column': 19, 'index': 160383}","  4277 |             expect`\message{Hello, world}`.toParse();
  4278 |             // eslint-disable-next-line no-console
> 4279 |             expect(console.log).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4280 |         });
  4281 |     });
  4282 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4288, 'column': 19, 'index': 160748}","  4286 |             expect`\errmessage{Hello, world}`.toParse();
  4287 |             // eslint-disable-next-line no-console
> 4288 |             expect(console.error).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4289 |         });
  4290 |     });
  4291 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 23}","  21 |
  22 | describe(""A parser"", function() {
> 23 |     it(""should not fail on an empty string"", function() {
     |    ^ Unknown Test
  24 |         expect``.toParse(strictSettings);
  25 |     });
  26 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 27}","  25 |     });
  26 |
> 27 |     it(""should ignore whitespace"", function() {
     |    ^ Unknown Test
  28 |         expect`    x    y    `.toParseLike(""xy"", strictSettings);
  29 |     });
  30 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 31}","  29 |     });
  30 |
> 31 |     it(""should ignore whitespace in atom"", function() {
     |    ^ Unknown Test
  32 |         expect`    x   ^ y    `.toParseLike(""x^y"", strictSettings);
  33 |     });
  34 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 108}","  106 |
  107 | describe(""A mathinner parser"", function() {
> 108 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  109 |         expect`\mathinner{\langle{\psi}\rangle}`.toParse();
  110 |         expect`\frac 1 {\mathinner{\langle{\psi}\rangle}}`.toParse();
  111 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 175}","  173 |
  174 | describe(""A \\KaTeX parser"", function() {
> 175 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  176 |         expect`\KaTeX`.toParse();
  177 |     });
  178 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 181}","  179 |
  180 | describe(""A subscript and superscript parser"", function() {
> 181 |     it(""should not fail on superscripts"", function() {
      |    ^ Unknown Test
  182 |         expect`x^2`.toParse();
  183 |     });
  184 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 185}","  183 |     });
  184 |
> 185 |     it(""should not fail on subscripts"", function() {
      |    ^ Unknown Test
  186 |         expect`x_3`.toParse();
  187 |     });
  188 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 189}","  187 |     });
  188 |
> 189 |     it(""should not fail on both subscripts and superscripts"", function() {
      |    ^ Unknown Test
  190 |         expect`x^2_3`.toParse();
  191 |
  192 |         expect`x_2^3`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 195}","  193 |     });
  194 |
> 195 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  196 |         expect`^3`.toParse();
  197 |         expect`^3+`.toParse();
  198 |         expect`_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 239}","  237 |     });
  238 |
> 239 |     it(""should produce the same thing regardless of order"", function() {
      |    ^ Unknown Test
  240 |         expect`x^2_3`.toParseLike`x_3^2`;
  241 |     });
  242 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 243}","  241 |     });
  242 |
> 243 |     it(""should not parse double subscripts or superscripts"", function() {
      |    ^ Unknown Test
  244 |         expect`x^x^x`.not.toParse();
  245 |
  246 |         expect`x_x_x`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 257}","  255 |     });
  256 |
> 257 |     it(""should work correctly with {}s"", function() {
      |    ^ Unknown Test
  258 |         expect`x^{2+3}`.toParse();
  259 |
  260 |         expect`x_{3-2}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 275}","  273 |     });
  274 |
> 275 |     it(""should work with nested super/subscripts"", function() {
      |    ^ Unknown Test
  276 |         expect`x^{x^x}`.toParse();
  277 |         expect`x^{x_x}`.toParse();
  278 |         expect`x_{x^x}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 282}","  280 |     });
  281 |
> 282 |     it(""should work with Unicode (sub|super)script characters"", function() {
      |    ^ Unknown Test
  283 |         expect`A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃`.toParseLike`A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}`;
  284 |     });
  285 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 286}","  284 |     });
  285 |
> 286 |     it(""should not fail if \\relax is in an atom"", function() {
      |    ^ Unknown Test
  287 |         expect`\hskip1em\relax^2`.toParse(strictSettings);
  288 |     });
  289 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 290}","  288 |     });
  289 |
> 290 |     it(""should skip \\relax in super/subscripts"", function() {
      |    ^ Unknown Test
  291 |         expect`x^\relax 2`.toParseLike`x^2`;
  292 |         expect`x_\relax 2`.toParseLike`x_2`;
  293 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 297}","  295 |
  296 | describe(""A subscript and superscript tree-builder"", function() {
> 297 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  298 |         expect`^3`.toBuild();
  299 |         expect`_2`.toBuild();
  300 |         expect`^3_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 306}","  304 |
  305 | describe(""A parser with limit controls"", function() {
> 306 |     it(""should fail when the limit control is not preceded by an op node"", function() {
      |    ^ Unknown Test
  307 |         expect`3\nolimits_2^2`.not.toParse();
  308 |         expect`\sqrt\limits_2^2`.not.toParse();
  309 |         expect`45 +\nolimits 45`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 312}","  310 |     });
  311 |
> 312 |     it(""should parse when the limit control directly follows an op node"", function() {
      |    ^ Unknown Test
  313 |         expect`\int\limits_2^2 3`.toParse();
  314 |         expect`\sum\nolimits_3^4 4`.toParse();
  315 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 317}","  315 |     });
  316 |
> 317 |     it(""should parse when the limit control is in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  318 |         expect`\int_2^2\limits`.toParse();
  319 |         expect`\int^2\nolimits_2`.toParse();
  320 |         expect`\int_2\limits^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 323}","  321 |     });
  322 |
> 323 |     it(""should allow multiple limit controls in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  324 |         expect`\int_2\nolimits^2\limits 3`.toParse();
  325 |         expect`\int\nolimits\limits_2^2`.toParse();
  326 |         expect`\int\limits\limits\limits_2^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 341}","  339 |
  340 | describe(""A group parser"", function() {
> 341 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  342 |         expect`{xy}`.toParse();
  343 |     });
  344 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 358}","  356 |
  357 | describe(""A \\begingroup...\\endgroup parser"", function() {
> 358 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  359 |         expect`\begingroup xy \endgroup`.toParse();
  360 |     });
  361 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 362}","  360 |     });
  361 |
> 362 |     it(""should fail when it is mismatched"", function() {
      |    ^ Unknown Test
  363 |         expect`\begingroup xy`.not.toParse();
  364 |         expect`\begingroup xy }`.not.toParse();
  365 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 379}","  377 |     });
  378 |
> 379 |     it(""should not affect spacing in math mode"", function() {
      |    ^ Unknown Test
  380 |         expect`\begingroup x+ \endgroup y`.toBuildLike`x+y`;
  381 |     });
  382 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 385}","  383 |
  384 | describe(""An implicit group parser"", function() {
> 385 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  386 |         expect`\Large x`.toParse();
  387 |         expect`abc {abc \Large xyz} abc`.toParse();
  388 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 447}","  445 |
  446 | describe(""A function parser"", function() {
> 447 |     it(""should parse no argument functions"", function() {
      |    ^ Unknown Test
  448 |         expect`\div`.toParse();
  449 |     });
  450 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 451}","  449 |     });
  450 |
> 451 |     it(""should parse 1 argument functions"", function() {
      |    ^ Unknown Test
  452 |         expect`\blue x`.toParse();
  453 |     });
  454 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 455}","  453 |     });
  454 |
> 455 |     it(""should parse 2 argument functions"", function() {
      |    ^ Unknown Test
  456 |         expect`\frac 1 2`.toParse();
  457 |     });
  458 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 459}","  457 |     });
  458 |
> 459 |     it(""should not parse 1 argument functions with no arguments"", function() {
      |    ^ Unknown Test
  460 |         expect`\blue`.not.toParse();
  461 |     });
  462 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 463}","  461 |     });
  462 |
> 463 |     it(""should not parse 2 argument functions with 0 or 1 arguments"", function() {
      |    ^ Unknown Test
  464 |         expect`\frac`.not.toParse();
  465 |
  466 |         expect`\frac 1`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 469}","  467 |     });
  468 |
> 469 |     it(""should not parse a function with text right after it"", function() {
      |    ^ Unknown Test
  470 |         expect`\redx`.not.toParse();
  471 |     });
  472 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 473}","  471 |     });
  472 |
> 473 |     it(""should parse a function with a number right after it"", function() {
      |    ^ Unknown Test
  474 |         expect`\frac12`.toParse();
  475 |     });
  476 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 477}","  475 |     });
  476 |
> 477 |     it(""should parse some functions with text right after it"", function() {
      |    ^ Unknown Test
  478 |         expect`\;x`.toParse();
  479 |     });
  480 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 641}","  639 |     });
  640 |
> 641 |     it(""should handle \\textstyle correctly"", function() {
      |    ^ Unknown Test
  642 |         expect`\textstyle 1 \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  643 |         expect`{\textstyle 1} \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  644 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 667}","  665 |
  666 | describe(""A genfrac builder"", function() {
> 667 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  668 |         expect`\frac{x}{y}`.toBuild();
  669 |         expect`\dfrac{x}{y}`.toBuild();
  670 |         expect`\tfrac{x}{y}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 680}","  678 |
  679 | describe(""A infix builder"", function() {
> 680 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  681 |         expect`a \over b`.toBuild();
  682 |         expect`a \atop b`.toBuild();
  683 |         expect`a \choose b`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 776}","  774 |     });
  775 |
> 776 |     it(""should parse math within text group"", function() {
      |    ^ Unknown Test
  777 |         expect`\text{graph: $y = mx + b$}`.toParse(strictSettings);
  778 |         expect`\text{graph: \(y = mx + b\)}`.toParse(strictSettings);
  779 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 781}","  779 |     });
  780 |
> 781 |     it(""should parse math within text within math within text"", function() {
      |    ^ Unknown Test
  782 |         expect`\text{hello $x + \text{world $y$} + z$}`.toParse(strictSettings);
  783 |         expect`\text{hello \(x + \text{world $y$} + z\)}`.toParse(strictSettings);
  784 |         expect`\text{hello $x + \text{world \(y\)} + z$}`.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 788}","  786 |     });
  787 |
> 788 |     it(""should forbid \\( within math mode"", function() {
      |    ^ Unknown Test
  789 |         expect`\(`.not.toParse();
  790 |         expect`\text{$\(x\)$}`.not.toParse();
  791 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 793}","  791 |     });
  792 |
> 793 |     it(""should forbid $ within math mode"", function() {
      |    ^ Unknown Test
  794 |         expect`$x$`.not.toParse();
  795 |         expect`\text{\($x$\)}`.not.toParse();
  796 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 798}","  796 |     });
  797 |
> 798 |     it(""should detect unbalanced \\)"", function() {
      |    ^ Unknown Test
  799 |         expect`\)`.not.toParse();
  800 |         expect`\text{\)}`.not.toParse();
  801 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 803}","  801 |     });
  802 |
> 803 |     it(""should detect unbalanced $"", function() {
      |    ^ Unknown Test
  804 |         expect`$`.not.toParse();
  805 |         expect`\text{$}`.not.toParse();
  806 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 808}","  806 |     });
  807 |
> 808 |     it(""should not mix $ and \\(..\\)"", function() {
      |    ^ Unknown Test
  809 |         expect`\text{$x\)}`.not.toParse();
  810 |         expect`\text{\(x$}`.not.toParse();
  811 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 813}","  811 |     });
  812 |
> 813 |     it(""should parse spacing functions"", function() {
      |    ^ Unknown Test
  814 |         expect`a b\, \; \! \: \> ~ \thinspace \medspace \quad \ `.toBuild();
  815 |         expect`\enspace \thickspace \qquad \space \nobreakspace`.toBuild();
  816 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 818}","  816 |     });
  817 |
> 818 |     it(""should omit spaces after commands"", function() {
      |    ^ Unknown Test
  819 |         expect`\text{\textellipsis !}`.toParseLike`\text{\textellipsis!}`;
  820 |     });
  821 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 822}","  820 |     });
  821 |
> 822 |     it(""should handle ⋮ and \\vdots"", function() {
      |    ^ Unknown Test
  823 |         expect`\text{a \vdots b ⋮ d}`.toParse();
  824 |     });
  825 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 828}","  826 |
  827 | describe(""A texvc builder"", function() {
> 828 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  829 |         expect`\lang\N\darr\R\dArr\Z\Darr\alef\rang`.toBuild();
  830 |         expect`\alefsym\uarr\Alpha\uArr\Beta\Uarr\Chi`.toBuild();
  831 |         expect`\clubs\diamonds\hearts\spades\cnums\Complex`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1002}","  1000 |
  1001 | describe(""An lap parser"", function() {
> 1002 |     it(""should not fail on a text argument"", function() {
       |    ^ Unknown Test
  1003 |         expect`\rlap{\,/}{=}`.toParse();
  1004 |         expect`\mathrlap{\,/}{=}`.toParse();
  1005 |         expect`{=}\llap{/\,}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1011}","  1009 |     });
  1010 |
> 1011 |     it(""should not fail if math version is used"", function() {
       |    ^ Unknown Test
  1012 |         expect`\mathrlap{\frac{a}{b}}{=}`.toParse();
  1013 |         expect`{=}\mathllap{\frac{a}{b}}`.toParse();
  1014 |         expect`\sum_{\mathclap{\frac{a}{b}}}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1017}","  1015 |     });
  1016 |
> 1017 |     it(""should fail on math if AMS version is used"", function() {
       |    ^ Unknown Test
  1018 |         expect`\rlap{\frac{a}{b}}{=}`.not.toParse();
  1019 |         expect`{=}\llap{\frac{a}{b}}`.not.toParse();
  1020 |         expect`\sum_{\clap{\frac{a}{b}}}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1273}","  1271 | describe(""A begin/end parser"", function() {
  1272 |
> 1273 |     it(""should parse a simple environment"", function() {
       |    ^ Unknown Test
  1274 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1275 |     });
  1276 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1277}","  1275 |     });
  1276 |
> 1277 |     it(""should parse an environment with argument"", function() {
       |    ^ Unknown Test
  1278 |         expect`\begin{array}{cc}a&b\\c&d\end{array}`.toParse();
  1279 |     });
  1280 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1281}","  1279 |     });
  1280 |
> 1281 |     it(""should parse and build an empty environment"", function() {
       |    ^ Unknown Test
  1282 |         expect`\begin{aligned}\end{aligned}`.toBuild();
  1283 |         expect`\begin{matrix}\end{matrix}`.toBuild();
  1284 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1286}","  1284 |     });
  1285 |
> 1286 |     it(""should parse an environment with hlines"", function() {
       |    ^ Unknown Test
  1287 |         expect`\begin{matrix}\hline a&b\\ \hline c&d\end{matrix}`.toParse();
  1288 |         expect`\begin{matrix}\hline a&b\cr \hline c&d\end{matrix}`.toParse();
  1289 |         expect`\begin{matrix}\hdashline a&b\\ \hdashline c&d\end{matrix}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1292}","  1290 |     });
  1291 |
> 1292 |     it(""should forbid hlines outside array environment"", () => {
       |    ^ Unknown Test
  1293 |         expect`\hline`.not.toParse();
  1294 |     });
  1295 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1296}","  1294 |     });
  1295 |
> 1296 |     it(""should error when name is mismatched"", function() {
       |    ^ Unknown Test
  1297 |         expect`\begin{matrix}a&b\\c&d\end{pmatrix}`.not.toParse();
  1298 |     });
  1299 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1300}","  1298 |     });
  1299 |
> 1300 |     it(""should error when commands are mismatched"", function() {
       |    ^ Unknown Test
  1301 |         expect`\begin{matrix}a&b\\c&d\right{pmatrix}`.not.toParse();
  1302 |     });
  1303 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1304}","  1302 |     });
  1303 |
> 1304 |     it(""should error when end is missing"", function() {
       |    ^ Unknown Test
  1305 |         expect`\begin{matrix}a&b\\c&d`.not.toParse();
  1306 |     });
  1307 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1308}","  1306 |     });
  1307 |
> 1308 |     it(""should error when braces are mismatched"", function() {
       |    ^ Unknown Test
  1309 |         expect`{\begin{matrix}a&b\\c&d}\end{matrix}`.not.toParse();
  1310 |     });
  1311 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1312}","  1310 |     });
  1311 |
> 1312 |     it(""should cooperate with infix notation"", function() {
       |    ^ Unknown Test
  1313 |         expect`\begin{matrix}0&1\over2&3\\4&5&6\end{matrix}`.toParse();
  1314 |     });
  1315 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1322}","  1320 |     });
  1321 |
> 1322 |     it(""should allow \\cr and \\\\ as a line terminator"", function() {
       |    ^ Unknown Test
  1323 |         expect`\begin{matrix}a&b\cr c&d\end{matrix}`.toParse();
  1324 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1325 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1327}","  1325 |     });
  1326 |
> 1327 |     it(""should not allow \\cr to scan for an optional size argument"", function() {
       |    ^ Unknown Test
  1328 |         expect`\begin{matrix}a&b\cr[c]&d\end{matrix}`.toParse();
  1329 |     });
  1330 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1331}","  1329 |     });
  1330 |
> 1331 |     it(""should not treat [ after space as optional argument to \\\\"", function() {
       |    ^ Unknown Test
  1332 |         expect`\begin{matrix}a&b\\ [c]&d\end{matrix}`.toParse();
  1333 |         expect`a\\ [b]`.toParse();
  1334 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1346}","  1344 |     });
  1345 |
> 1346 |     it(""should allow an optional argument in {matrix*} and company."", function() {
       |    ^ Unknown Test
  1347 |         expect`\begin{matrix*}[r] a & -1 \\ -1 & d \end{matrix*}`.toBuild();
  1348 |         expect`\begin{pmatrix*}[r] a & -1 \\ -1 & d \end{pmatrix*}`.toBuild();
  1349 |         expect`\begin{bmatrix*}[r] a & -1 \\ -1 & d \end{bmatrix*}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1383}","  1381 |     });
  1382 |
> 1383 |     it(""should build sized square roots"", function() {
       |    ^ Unknown Test
  1384 |         expect`\Large\sqrt[3]{x}`.toBuild();
  1385 |     });
  1386 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1387}","  1385 |     });
  1386 |
> 1387 |     it(""should expand argument if optional argument doesn't exist"", function() {
       |    ^ Unknown Test
  1388 |         expect`\sqrt\foo`.toParseLike(""\\sqrt123"",
  1389 |             new Settings({macros: {""\\foo"": ""123""}}));
  1390 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1392}","  1390 |     });
  1391 |
> 1392 |     it(""should not expand argument if optional argument exists"", function() {
       |    ^ Unknown Test
  1393 |         expect`\sqrt[2]\foo`.toParseLike(""\\sqrt[2]{123}"",
  1394 |             new Settings({macros: {""\\foo"": ""123""}}));
  1395 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1399}","  1397 |
  1398 | describe(""A TeX-compliant parser"", function() {
> 1399 |     it(""should work"", function() {
       |    ^ Unknown Test
  1400 |         expect`\frac 2 3`.toParse();
  1401 |     });
  1402 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1418}","  1416 |     });
  1417 |
> 1418 |     it(""should fail when there are missing sup/subscripts"", function() {
       |    ^ Unknown Test
  1419 |         expect`x^`.not.toParse();
  1420 |         expect`x_`.not.toParse();
  1421 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1489}","  1487 |     });
  1488 |
> 1489 |     it(""should parse multiple primes correctly"", function() {
       |    ^ Unknown Test
  1490 |         expect`x''''`.toParse();
  1491 |         expect`x_2''`.toParse();
  1492 |         expect`x''_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1495}","  1493 |     });
  1494 |
> 1495 |     it(""should fail when sup/subscripts are interspersed with arguments"", function() {
       |    ^ Unknown Test
  1496 |         expect`\sqrt^23`.not.toParse();
  1497 |         expect`\frac^234`.not.toParse();
  1498 |         expect`\frac2^34`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1501}","  1499 |     });
  1500 |
> 1501 |     it(""should succeed when sup/subscripts come after whole functions"", function() {
       |    ^ Unknown Test
  1502 |         expect`\sqrt2^3`.toParse();
  1503 |         expect`\frac23^4`.toParse();
  1504 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1506}","  1504 |     });
  1505 |
> 1506 |     it(""should succeed with a sqrt around a text/frac"", function() {
       |    ^ Unknown Test
  1507 |         expect`\sqrt \frac x y`.toParse();
  1508 |         expect`\sqrt \text x`.toParse();
  1509 |         expect`x^\frac x y`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1543}","  1541 |
  1542 | describe(""An op symbol builder"", function() {
> 1543 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1544 |         expect`\int_i^n`.toBuild();
  1545 |         expect`\iint_i^n`.toBuild();
  1546 |         expect`\iiint_i^n`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1560}","  1558 |
  1559 | describe(""A style change parser"", function() {
> 1560 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1561 |         expect`\displaystyle x`.toParse();
  1562 |         expect`\textstyle x`.toParse();
  1563 |         expect`\scriptstyle x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1591}","  1589 |
  1590 | describe(""A font parser"", function() {
> 1591 |     it(""should parse \\mathrm, \\mathbb, \\mathit, and \\mathnormal"", function() {
       |    ^ Unknown Test
  1592 |         expect`\mathrm x`.toParse();
  1593 |         expect`\mathbb x`.toParse();
  1594 |         expect`\mathit x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1602}","  1600 |     });
  1601 |
> 1602 |     it(""should parse \\mathcal and \\mathfrak"", function() {
       |    ^ Unknown Test
  1603 |         expect`\mathcal{ABC123}`.toParse();
  1604 |         expect`\mathfrak{abcABC123}`.toParse();
  1605 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1656}","  1654 |     });
  1655 |
> 1656 |     it(""should not parse a series of font commands"", function() {
       |    ^ Unknown Test
  1657 |         expect`\mathbb \mathrm R`.not.toParse();
  1658 |     });
  1659 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1671}","  1669 |     });
  1670 |
> 1671 |     it(""should be allowed in the argument"", function() {
       |    ^ Unknown Test
  1672 |         expect`e^\mathbf{x}`.toParse();
  1673 |     });
  1674 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1680}","  1678 |     });
  1679 |
> 1680 |     it(""old-style fonts work like new-style fonts"", () => {
       |    ^ Unknown Test
  1681 |         expect`\rm xyz`.toParseLike`\mathrm{xyz}`;
  1682 |         expect`\sf xyz`.toParseLike`\mathsf{xyz}`;
  1683 |         expect`\tt xyz`.toParseLike`\mathtt{xyz}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1691}","  1689 |
  1690 | describe(""A \\pmb builder"", function() {
> 1691 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1692 |         expect`\pmb{\mu}`.toBuild();
  1693 |         expect`\pmb{=}`.toBuild();
  1694 |         expect`\pmb{+}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1702}","  1700 |
  1701 | describe(""A raise parser"", function() {
> 1702 |     it(""should parse and build text in \\raisebox"", function() {
       |    ^ Unknown Test
  1703 |         expect`\raisebox{5pt}{text}`.toBuild(strictSettings);
  1704 |         expect`\raisebox{-5pt}{text}`.toBuild(strictSettings);
  1705 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1707}","  1705 |     });
  1706 |
> 1707 |     it(""should parse and build math in non-strict \\vcenter"", function() {
       |    ^ Unknown Test
  1708 |         expect`\vcenter{\frac a b}`.toBuild(nonstrictSettings);
  1709 |     });
  1710 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1711}","  1709 |     });
  1710 |
> 1711 |     it(""should fail to parse math in \\raisebox"", function() {
       |    ^ Unknown Test
  1712 |         expect`\raisebox{5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1713 |         expect`\raisebox{-5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1714 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1716}","  1714 |     });
  1715 |
> 1716 |     it(""should fail to parse math in an \\hbox"", function() {
       |    ^ Unknown Test
  1717 |         expect`\hbox{\frac a b}`.not.toParse(nonstrictSettings);
  1718 |     });
  1719 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1720}","  1718 |     });
  1719 |
> 1720 |     it(""should fail to build, given an unbraced length"", function() {
       |    ^ Unknown Test
  1721 |         expect`\raisebox5pt{text}`.not.toBuild(strictSettings);
  1722 |         expect`\raisebox-5pt{text}`.not.toBuild(strictSettings);
  1723 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1725}","  1723 |     });
  1724 |
> 1725 |     it(""should build math in an hbox when math mode is set"", function() {
       |    ^ Unknown Test
  1726 |         expect`a + \vcenter{\hbox{$\frac{\frac a b}c$}}`
  1727 |             .toBuild(strictSettings);
  1728 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1774}","  1772 |     });
  1773 |
> 1774 |     it(""should not parse a comment without newline in strict mode"", () => {
       |    ^ Unknown Test
  1775 |         expect`x%y`.not.toParse(strictSettings);
  1776 |         expect`x%y`.toParse(nonstrictSettings);
  1777 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2259}","  2257 |
  2258 | describe(""An accent parser"", function() {
> 2259 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2260 |         expect`\vec{x}`.toParse();
  2261 |         expect`\vec{x^2}`.toParse();
  2262 |         expect`\vec{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2279}","  2277 |     });
  2278 |
> 2279 |     it(""should parse stretchy, shifty accents"", function() {
       |    ^ Unknown Test
  2280 |         expect`\widehat{x}`.toParse();
  2281 |         expect`\widecheck{x}`.toParse();
  2282 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2284}","  2282 |     });
  2283 |
> 2284 |     it(""should parse stretchy, non-shifty accents"", function() {
       |    ^ Unknown Test
  2285 |         expect`\overrightarrow{x}`.toParse();
  2286 |     });
  2287 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2290}","  2288 |
  2289 | describe(""An accent builder"", function() {
> 2290 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2291 |         expect`\vec{x}`.toBuild();
  2292 |         expect`\vec{x}^2`.toBuild();
  2293 |         expect`\vec{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2307}","  2305 |
  2306 | describe(""A stretchy and shifty accent builder"", function() {
> 2307 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2308 |         expect`\widehat{AB}`.toBuild();
  2309 |         expect`\widecheck{AB}`.toBuild();
  2310 |         expect`\widehat{AB}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2325}","  2323 |
  2324 | describe(""A stretchy and non-shifty accent builder"", function() {
> 2325 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2326 |         expect`\overrightarrow{AB}`.toBuild();
  2327 |         expect`\overrightarrow{AB}^2`.toBuild();
  2328 |         expect`\overrightarrow{AB}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2351}","  2349 |
  2350 | describe(""An under-accent parser"", function() {
> 2351 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2352 |         expect`\underrightarrow{x}`.toParse();
  2353 |         expect`\underrightarrow{x^2}`.toParse();
  2354 |         expect`\underrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2372}","  2370 |
  2371 | describe(""An under-accent builder"", function() {
> 2372 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2373 |         expect`\underrightarrow{x}`.toBuild();
  2374 |         expect`\underrightarrow{x}^2`.toBuild();
  2375 |         expect`\underrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2390}","  2388 |
  2389 | describe(""An extensible arrow parser"", function() {
> 2390 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2391 |         expect`\xrightarrow{x}`.toParse();
  2392 |         expect`\xrightarrow{x^2}`.toParse();
  2393 |         expect`\xrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2412}","  2410 |
  2411 | describe(""An extensible arrow builder"", function() {
> 2412 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2413 |         expect`\xrightarrow{x}`.toBuild();
  2414 |         expect`\xrightarrow{x}^2`.toBuild();
  2415 |         expect`\xrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2431}","  2429 |
  2430 | describe(""A horizontal brace parser"", function() {
> 2431 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2432 |         expect`\overbrace{x}`.toParse();
  2433 |         expect`\overbrace{x^2}`.toParse();
  2434 |         expect`\overbrace{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2454}","  2452 |
  2453 | describe(""A horizontal brace builder"", function() {
> 2454 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2455 |         expect`\overbrace{x}`.toBuild();
  2456 |         expect`\overbrace{x}^2`.toBuild();
  2457 |         expect`\underbrace{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2472}","  2470 |
  2471 | describe(""A boxed parser"", function() {
> 2472 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2473 |         expect`\boxed{x}`.toParse();
  2474 |         expect`\boxed{x^2}`.toParse();
  2475 |         expect`\boxed{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2487}","  2485 |
  2486 | describe(""A boxed builder"", function() {
> 2487 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2488 |         expect`\boxed{x}`.toBuild();
  2489 |         expect`\boxed{x}^2`.toBuild();
  2490 |         expect`\boxed{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2504}","  2502 |
  2503 | describe(""An fbox parser, unlike a boxed parser,"", function() {
> 2504 |     it(""should fail when given math"", function() {
       |    ^ Unknown Test
  2505 |         expect`\fbox{\frac a b}`.not.toParse();
  2506 |     });
  2507 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2510}","  2508 |
  2509 | describe(""A colorbox parser"", function() {
> 2510 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2511 |         expect`\colorbox{red}{a b}`.toParse();
  2512 |         expect`\colorbox{red}{x}^2`.toParse();
  2513 |         expect`\colorbox{red} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2516}","  2514 |     });
  2515 |
> 2516 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2517 |         expect`\colorbox{red}{\alpha}`.not.toParse();
  2518 |         expect`\colorbox{red}{\frac{a}{b}}`.not.toParse();
  2519 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2521}","  2519 |     });
  2520 |
> 2521 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2522 |         expect`\colorbox{red}{a b}`.toParse();
  2523 |         expect`\colorbox{#197}{a b}`.toParse();
  2524 |         expect`\colorbox{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2534}","  2532 |
  2533 | describe(""A colorbox builder"", function() {
> 2534 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2535 |         expect`\colorbox{red}{a b}`.toBuild();
  2536 |         expect`\colorbox{red}{a b}^2`.toBuild();
  2537 |         expect`\colorbox{red} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2546}","  2544 |
  2545 | describe(""An fcolorbox parser"", function() {
> 2546 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2547 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2548 |         expect`\fcolorbox{blue}{yellow}{x}^2`.toParse();
  2549 |         expect`\fcolorbox{blue}{yellow} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2552}","  2550 |     });
  2551 |
> 2552 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2553 |         expect`\fcolorbox{blue}{yellow}{\alpha}`.not.toParse();
  2554 |         expect`\fcolorbox{blue}{yellow}{\frac{a}{b}}`.not.toParse();
  2555 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2557}","  2555 |     });
  2556 |
> 2557 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2558 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2559 |         expect`\fcolorbox{blue}{#197}{a b}`.toParse();
  2560 |         expect`\fcolorbox{blue}{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2570}","  2568 |
  2569 | describe(""A fcolorbox builder"", function() {
> 2570 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2571 |         expect`\fcolorbox{blue}{yellow}{a b}`.toBuild();
  2572 |         expect`\fcolorbox{blue}{yellow}{a b}^2`.toBuild();
  2573 |         expect`\fcolorbox{blue}{yellow} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2582}","  2580 |
  2581 | describe(""A strike-through parser"", function() {
> 2582 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2583 |         expect`\cancel{x}`.toParse();
  2584 |         expect`\cancel{x^2}`.toParse();
  2585 |         expect`\cancel{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2603}","  2601 |
  2602 | describe(""A strike-through builder"", function() {
> 2603 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2604 |         expect`\cancel{x}`.toBuild();
  2605 |         expect`\cancel{x}^2`.toBuild();
  2606 |         expect`\cancel{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2624}","  2622 |
  2623 | describe(""A actuarial angle parser"", function() {
> 2624 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2625 |         expect`a_{\angl{n}}`.toParse();
  2626 |     });
  2627 |     it(""should fail in text mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2627}","  2625 |         expect`a_{\angl{n}}`.toParse();
  2626 |     });
> 2627 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2628 |         expect`\text{a_{\angl{n}}}`.not.toParse();
  2629 |     });
  2630 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2633}","  2631 |
  2632 | describe(""A actuarial angle builder"", function() {
> 2633 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2634 |         expect`a_{\angl{n}}`.toBuild();
  2635 |         expect`a_{\angl{n}i}`.toBuild();
  2636 |         expect`a_{\angl n}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2642}","  2640 |
  2641 | describe(""\\phase"", function() {
> 2642 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2643 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2644 |     });
  2645 |     it(""should not fail in math mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2645}","  2643 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2644 |     });
> 2645 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2646 |         expect`\phase{-78.2^\circ}`.toBuild();
  2647 |     });
  2648 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2651}","  2649 |
  2650 | describe(""A phantom parser"", function() {
> 2651 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2652 |         expect`\phantom{x}`.toParse();
  2653 |         expect`\phantom{x^2}`.toParse();
  2654 |         expect`\phantom{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2671}","  2669 |
  2670 | describe(""A phantom builder"", function() {
> 2671 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2672 |         expect`\phantom{x}`.toBuild();
  2673 |         expect`\phantom{x^2}`.toBuild();
  2674 |         expect`\phantom{x}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2700}","  2698 |
  2699 | describe(""A smash parser"", function() {
> 2700 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2701 |         expect`\smash{x}`.toParse();
  2702 |         expect`\smash{x^2}`.toParse();
  2703 |         expect`\smash{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2725}","  2723 |
  2724 | describe(""A smash builder"", function() {
> 2725 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2726 |         expect`\smash{x}`.toBuild(nonstrictSettings);
  2727 |         expect`\smash{x^2}`.toBuild(nonstrictSettings);
  2728 |         expect`\smash{x}^2`.toBuild(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2749}","  2747 |
  2748 | describe(""An optional argument parser"", function() {
> 2749 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2750 |         // Note this doesn't actually make an optional argument, but still
  2751 |         // should work
  2752 |         expect`\frac[1]{2}{3}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2757}","  2755 |     });
  2756 |
> 2757 |     it(""should work with sqrts with optional arguments"", function() {
       |    ^ Unknown Test
  2758 |         expect`\sqrt[3]{2}`.toParse();
  2759 |     });
  2760 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2761}","  2759 |     });
  2760 |
> 2761 |     it(""should work when the optional argument is missing"", function() {
       |    ^ Unknown Test
  2762 |         expect`\sqrt{2}`.toParse();
  2763 |         expect`\rule{1em}{2em}`.toParse();
  2764 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2766}","  2764 |     });
  2765 |
> 2766 |     it(""should fail when the optional argument is malformed"", function() {
       |    ^ Unknown Test
  2767 |         expect`\rule[1]{2em}{3em}`.not.toParse();
  2768 |     });
  2769 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2770}","  2768 |     });
  2769 |
> 2770 |     it(""should not work if the optional argument isn't closed"", function() {
       |    ^ Unknown Test
  2771 |         expect`\sqrt[`.not.toParse();
  2772 |     });
  2773 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2820}","  2818 | describe(""A substack function"", function() {
  2819 |
> 2820 |     it(""should build"", function() {
       |    ^ Unknown Test
  2821 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2822 |     });
  2823 |     it(""should accommodate spaces in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2823}","  2821 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2822 |     });
> 2823 |     it(""should accommodate spaces in the argument"", function() {
       |    ^ Unknown Test
  2824 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2825 |     });
  2826 |     it(""should accommodate macros in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2826}","  2824 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2825 |     });
> 2826 |     it(""should accommodate macros in the argument"", function() {
       |    ^ Unknown Test
  2827 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2828 |     });
  2829 |     it(""should accommodate an empty argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2829}","  2827 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2828 |     });
> 2829 |     it(""should accommodate an empty argument"", function() {
       |    ^ Unknown Test
  2830 |         expect`\sum_{\substack{}}  P(i,j)`.toBuild();
  2831 |     });
  2832 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2837}","  2835 | describe(""A smallmatrix environment"", function() {
  2836 |
> 2837 |     it(""should build"", function() {
       |    ^ Unknown Test
  2838 |         expect`\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}`.toBuild();
  2839 |     });
  2840 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2845}","  2843 | describe(""A cases environment"", function() {
  2844 |
> 2845 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2846 |         expect`f(a,b)=\begin{cases}a+1&\text{if }b\text{ is odd}\\a&\text{if }b=0\\a-1&\text{otherwise}\end{cases}`
  2847 |             .toParse();
  2848 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2854}","  2852 | describe(""An rcases environment"", function() {
  2853 |
> 2854 |     it(""should build"", function() {
       |    ^ Unknown Test
  2855 |         expect`\begin{rcases} a &\text{if } b \\ c &\text{if } d \end{rcases}⇒…`
  2856 |             .toBuild();
  2857 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2863}","  2861 | describe(""An aligned environment"", function() {
  2862 |
> 2863 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2864 |         expect`\begin{aligned}a&=b&c&=d\\e&=f\end{aligned}`.toParse();
  2865 |     });
  2866 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2867}","  2865 |     });
  2866 |
> 2867 |     it(""should allow cells in brackets"", function() {
       |    ^ Unknown Test
  2868 |         expect`\begin{aligned}[a]&[b]\\ [c]&[d]\end{aligned}`.toParse();
  2869 |     });
  2870 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2871}","  2869 |     });
  2870 |
> 2871 |     it(""should forbid cells in brackets without space"", function() {
       |    ^ Unknown Test
  2872 |         expect`\begin{aligned}[a]&[b]\\[c]&[d]\end{aligned}`.not.toParse();
  2873 |     });
  2874 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2882}","  2880 |
  2881 | describe(""AMS environments"", function() {
> 2882 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  2883 |         expect`\begin{gather}a+b\\c+d\end{gather}`.not.toParse(nonstrictSettings);
  2884 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.not.toParse(nonstrictSettings);
  2885 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.not.toParse(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2895}","  2893 |
  2894 |     const displayMode = new Settings({displayMode: true});
> 2895 |     it(""should build if in display mode"", () => {
       |    ^ Unknown Test
  2896 |         expect`\begin{gather}a+b\\c+d\end{gather}`.toBuild(displayMode);
  2897 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.toBuild(displayMode);
  2898 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2908}","  2906 |     });
  2907 |
> 2908 |     it(""should build an empty environment"", () => {
       |    ^ Unknown Test
  2909 |         expect`\begin{gather}\end{gather}`.toBuild(displayMode);
  2910 |         expect`\begin{gather*}\end{gather*}`.toBuild(displayMode);
  2911 |         expect`\begin{align}\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2920}","  2918 |     });
  2919 |
> 2920 |     it(""{equation} should fail if argument contains two rows."", () => {
       |    ^ Unknown Test
  2921 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2922 |     });
  2923 |     it(""{equation} should fail if argument contains two columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2923}","  2921 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2922 |     });
> 2923 |     it(""{equation} should fail if argument contains two columns."", () => {
       |    ^ Unknown Test
  2924 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2925 |     });
  2926 |     it(""{split} should fail if argument contains three columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2926}","  2924 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2925 |     });
> 2926 |     it(""{split} should fail if argument contains three columns."", () => {
       |    ^ Unknown Test
  2927 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2928 |     });
  2929 |     it(""{array} should fail if body contains more columns than specification."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2929}","  2927 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2928 |     });
> 2929 |     it(""{array} should fail if body contains more columns than specification."", () => {
       |    ^ Unknown Test
  2930 |         expect`\begin{array}{2}a & b & c\\d & e  f\end{array}`.not.toBuild(displayMode);
  2931 |     });
  2932 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2958}","  2956 |
  2957 | describe(""operatorname support"", function() {
> 2958 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2959 |         expect`\operatorname{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2960 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2961 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}_y x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2969}","  2967 |
  2968 | describe(""href and url commands"", function() {
> 2969 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2970 |         expect`\href{http://example.com/}{\sin}`.toBuild(trustSettings);
  2971 |         expect`\url{http://example.com/}`.toBuild(trustSettings);
  2972 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2974}","  2972 |     });
  2973 |
> 2974 |     it(""should allow empty URLs"", function() {
       |    ^ Unknown Test
  2975 |         expect`\href{}{example here}`.toBuild(trustSettings);
  2976 |         expect`\url{}`.toBuild(trustSettings);
  2977 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2987}","  2985 |     });
  2986 |
> 2987 |     it(""should allow spaces single-character URLs"", () => {
       |    ^ Unknown Test
  2988 |         expect`\href %end`.toParseLike(""\\href{%}end"", trustSettings);
  2989 |         expect`\url %end`.toParseLike(""\\url{%}end"", trustSettings);
  2990 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3008}","  3006 |     });
  3007 |
> 3008 |     it(""should not allow unbalanced brace(s) in url"", function() {
       |    ^ Unknown Test
  3009 |         expect`\href{http://example.com/{a}{bar}`.not.toParse();
  3010 |         expect`\href{http://example.com/}a}{bar}`.not.toParse();
  3011 |         expect`\url{http://example.com/{a}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3099}","  3097 |
  3098 | describe(""A raw text parser"", function() {
> 3099 |     it(""should return null for a omitted optional string"", function() {
       |    ^ Unknown Test
  3100 |         expect`\includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}`.toParse();
  3101 |     });
  3102 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3114}","  3112 |     });
  3113 |
> 3114 |     it(""should still parse on unrecognized control sequences"", function() {
       |    ^ Unknown Test
  3115 |         expect`\error`.toParse(noThrowSettings);
  3116 |     });
  3117 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3119}","  3117 |
  3118 |     describe(""should allow unrecognized controls sequences anywhere, including"", function() {
> 3119 |         it(""in superscripts and subscripts"", function() {
       |        ^ Unknown Test
  3120 |             expect`2_\error`.toBuild(noThrowSettings);
  3121 |             expect`3^{\error}_\error`.toBuild(noThrowSettings);
  3122 |             expect`\int\nolimits^\error_\error`.toBuild(noThrowSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3125}","  3123 |         });
  3124 |
> 3125 |         it(""in fractions"", function() {
       |        ^ Unknown Test
  3126 |             expect`\frac{345}{\error}`.toBuild(noThrowSettings);
  3127 |             expect`\frac\error{\error}`.toBuild(noThrowSettings);
  3128 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3130}","  3128 |         });
  3129 |
> 3130 |         it(""in square roots"", function() {
       |        ^ Unknown Test
  3131 |             expect`\sqrt\error`.toBuild(noThrowSettings);
  3132 |             expect`\sqrt{234\error}`.toBuild(noThrowSettings);
  3133 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3135}","  3133 |         });
  3134 |
> 3135 |         it(""in text boxes"", function() {
       |        ^ Unknown Test
  3136 |             expect`\text{\error}`.toBuild(noThrowSettings);
  3137 |         });
  3138 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3205}","  3203 |
  3204 | describe(""The symbol table integrity"", function() {
> 3205 |     it(""should treat certain symbols as synonyms"", function() {
       |    ^ Unknown Test
  3206 |         expect`<`.toBuildLike`\lt`;
  3207 |         expect`>`.toBuildLike`\gt`;
  3208 |         expect`\left<\frac{1}{x}\right>`.toBuildLike`\left\lt\frac{1}{x}\right\gt`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3223}","  3221 |
  3222 | describe(""A macro expander"", function() {
> 3223 |     it(""should produce individual tokens"", function() {
       |    ^ Unknown Test
  3224 |         expect`e^\foo`.toParseLike(""e^1 23"",
  3225 |             new Settings({macros: {""\\foo"": ""123""}}));
  3226 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3228}","  3226 |     });
  3227 |
> 3228 |     it(""should preserve leading spaces inside macro definition"", function() {
       |    ^ Unknown Test
  3229 |         expect`\text{\foo}`.toParseLike(r`\text{ x}`,
  3230 |             new Settings({macros: {""\\foo"": "" x""}}));
  3231 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3233}","  3231 |     });
  3232 |
> 3233 |     it(""should preserve leading spaces inside macro argument"", function() {
       |    ^ Unknown Test
  3234 |         expect`\text{\foo{ x}}`.toParseLike(r`\text{ x}`,
  3235 |             new Settings({macros: {""\\foo"": ""#1""}}));
  3236 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3238}","  3236 |     });
  3237 |
> 3238 |     it(""should ignore expanded spaces in math mode"", function() {
       |    ^ Unknown Test
  3239 |         expect`\foo`.toParseLike(""x"", new Settings({macros: {""\\foo"": "" x""}}));
  3240 |     });
  3241 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3242}","  3240 |     });
  3241 |
> 3242 |     it(""should consume spaces after control-word macro"", function() {
       |    ^ Unknown Test
  3243 |         expect`\text{\foo }`.toParseLike(r`\text{x}`,
  3244 |             new Settings({macros: {""\\foo"": ""x""}}));
  3245 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3247}","  3245 |     });
  3246 |
> 3247 |     it(""should consume spaces after macro with \\relax"", function() {
       |    ^ Unknown Test
  3248 |         expect`\text{\foo }`.toParseLike(r`\text{}`,
  3249 |             new Settings({macros: {""\\foo"": ""\\relax""}}));
  3250 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3252}","  3250 |     });
  3251 |
> 3252 |     it(""should not consume spaces after control-word expansion"", function() {
       |    ^ Unknown Test
  3253 |         expect`\text{\\ }`.toParseLike(r`\text{ }`,
  3254 |             new Settings({macros: {""\\\\"": ""\\relax""}}));
  3255 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3257}","  3255 |     });
  3256 |
> 3257 |     it(""should consume spaces after \\relax"", function() {
       |    ^ Unknown Test
  3258 |         expect`\text{\relax }`.toParseLike`\text{}`;
  3259 |     });
  3260 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3261}","  3259 |     });
  3260 |
> 3261 |     it(""should consume spaces after control-word function"", function() {
       |    ^ Unknown Test
  3262 |         expect`\text{\KaTeX }`.toParseLike`\text{\KaTeX}`;
  3263 |     });
  3264 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3265}","  3263 |     });
  3264 |
> 3265 |     it(""should preserve spaces after control-symbol macro"", function() {
       |    ^ Unknown Test
  3266 |         expect`\text{\% y}`.toParseLike(r`\text{x y}`,
  3267 |             new Settings({macros: {""\\%"": ""x""}}));
  3268 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3270}","  3268 |     });
  3269 |
> 3270 |     it(""should preserve spaces after control-symbol function"", function() {
       |    ^ Unknown Test
  3271 |         expect`\text{\' }`.toParse();
  3272 |     });
  3273 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3274}","  3272 |     });
  3273 |
> 3274 |     it(""should consume spaces between arguments"", function() {
       |    ^ Unknown Test
  3275 |         expect`\text{\foo 1 2}`.toParseLike(r`\text{12end}`,
  3276 |             new Settings({macros: {""\\foo"": ""#1#2end""}}));
  3277 |         expect`\text{\foo {1} {2}}`.toParseLike(r`\text{12end}`,",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3281}","  3279 |     });
  3280 |
> 3281 |     it(""should allow for multiple expansion"", function() {
       |    ^ Unknown Test
  3282 |         expect`1\foo2`.toParseLike(""1aa2"", new Settings({macros: {
  3283 |             ""\\foo"": ""\\bar\\bar"",
  3284 |             ""\\bar"": ""a"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3288}","  3286 |     });
  3287 |
> 3288 |     it(""should allow for multiple expansion with argument"", function() {
       |    ^ Unknown Test
  3289 |         expect`1\foo2`.toParseLike(""12222"", new Settings({macros: {
  3290 |             ""\\foo"": ""\\bar{#1}\\bar{#1}"",
  3291 |             ""\\bar"": ""#1#1"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3295}","  3293 |     });
  3294 |
> 3295 |     it(""should allow for macro argument"", function() {
       |    ^ Unknown Test
  3296 |         expect`\foo\bar`.toParseLike(""(xyz)"", new Settings({macros: {
  3297 |             ""\\foo"": ""(#1)"",
  3298 |             ""\\bar"": ""xyz"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3302}","  3300 |     });
  3301 |
> 3302 |     it(""should allow properly nested group for macro argument"", function() {
       |    ^ Unknown Test
  3303 |         expect`\foo{e^{x_{12}+3}}`.toParseLike(""(e^{x_{12}+3})"",
  3304 |             new Settings({macros: {""\\foo"": ""(#1)""}}));
  3305 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3307}","  3305 |     });
  3306 |
> 3307 |     it(""should delay expansion if preceded by \\expandafter"", function() {
       |    ^ Unknown Test
  3308 |         expect`\expandafter\foo\bar`.toParseLike(""x+y"", new Settings({macros: {
  3309 |             ""\\foo"": ""#1+#2"",
  3310 |             ""\\bar"": ""xy"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3317}","  3315 |     });
  3316 |
> 3317 |     it(""should not expand if preceded by \\noexpand"", function() {
       |    ^ Unknown Test
  3318 |         // \foo is not expanded and interpreted as if its meaning were \relax
  3319 |         expect`\noexpand\foo y`.toParseLike(""y"",
  3320 |             new Settings({macros: {""\\foo"": ""x""}}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3330}","  3328 |     });
  3329 |
> 3330 |     it(""should allow for space macro argument (text version)"", function() {
       |    ^ Unknown Test
  3331 |         expect`\text{\foo\bar}`.toParseLike(r`\text{( )}`, new Settings({macros: {
  3332 |             ""\\foo"": ""(#1)"",
  3333 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3337}","  3335 |     });
  3336 |
> 3337 |     it(""should allow for space macro argument (math version)"", function() {
       |    ^ Unknown Test
  3338 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3339 |             ""\\foo"": ""(#1)"",
  3340 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3344}","  3342 |     });
  3343 |
> 3344 |     it(""should allow for space second argument (text version)"", function() {
       |    ^ Unknown Test
  3345 |         expect`\text{\foo\bar\bar}`.toParseLike(r`\text{( , )}`, new Settings({macros: {
  3346 |             ""\\foo"": ""(#1,#2)"",
  3347 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3351}","  3349 |     });
  3350 |
> 3351 |     it(""should treat \\relax as empty argument"", function() {
       |    ^ Unknown Test
  3352 |         expect`\text{\foo\relax x}`.toParseLike(r`\text{(,x)}`, new Settings({macros: {
  3353 |             ""\\foo"": ""(#1,#2)"",
  3354 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3357}","  3355 |     });
  3356 |
> 3357 |     it(""should allow for space second argument (math version)"", function() {
       |    ^ Unknown Test
  3358 |         expect`\foo\bar\bar`.toParseLike(""(,)"", new Settings({macros: {
  3359 |             ""\\foo"": ""(#1,#2)"",
  3360 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3364}","  3362 |     });
  3363 |
> 3364 |     it(""should allow for empty macro argument"", function() {
       |    ^ Unknown Test
  3365 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3366 |             ""\\foo"": ""(#1)"",
  3367 |             ""\\bar"": """",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3371}","  3369 |     });
  3370 |
> 3371 |     it(""should allow for space function arguments"", function() {
       |    ^ Unknown Test
  3372 |         expect`\frac\bar\bar`.toParseLike(r`\frac{}{}`, new Settings({macros: {
  3373 |             ""\\bar"": "" "",
  3374 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3377}","  3375 |     });
  3376 |
> 3377 |     it(""should build \\overset and \\underset"", function() {
       |    ^ Unknown Test
  3378 |         expect`\overset{f}{\rightarrow} Y`.toBuild();
  3379 |         expect`\underset{f}{\rightarrow} Y`.toBuild();
  3380 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3382}","  3380 |     });
  3381 |
> 3382 |     it(""should build \\iff, \\implies, \\impliedby"", function() {
       |    ^ Unknown Test
  3383 |         expect`X \iff Y`.toBuild();
  3384 |         expect`X \implies Y`.toBuild();
  3385 |         expect`X \impliedby Y`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3388}","  3386 |     });
  3387 |
> 3388 |     it(""should allow aliasing characters"", function() {
       |    ^ Unknown Test
  3389 |         expect`x’=c`.toParseLike(""x'=c"", new Settings({macros: {
  3390 |             ""’"": ""'"",
  3391 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3394}","  3392 |     });
  3393 |
> 3394 |     it(""\\@firstoftwo should consume both, and avoid errors"", function() {
       |    ^ Unknown Test
  3395 |         expect`\@firstoftwo{yes}{no}`.toParseLike`yes`;
  3396 |         expect`\@firstoftwo{yes}{1'_2^3}`.toParseLike`yes`;
  3397 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3399}","  3397 |     });
  3398 |
> 3399 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3400 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3401 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3402 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3404}","  3402 |     });
  3403 |
> 3404 |     it(""\\@ifnextchar should not consume nonspaces"", function() {
       |    ^ Unknown Test
  3405 |         expect`\@ifnextchar!{yes}{no}!!`.toParseLike`yes!!`;
  3406 |         expect`\@ifnextchar!{yes}{no}?!`.toParseLike`no?!`;
  3407 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3409}","  3407 |     });
  3408 |
> 3409 |     it(""\\@ifnextchar should consume spaces"", function() {
       |    ^ Unknown Test
  3410 |         expect`\def\x#1{\@ifnextchar x{yes}{no}}\x{}x\x{} x`
  3411 |             .toParseLike`yesxyesx`;
  3412 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3414}","  3412 |     });
  3413 |
> 3414 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3415 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3416 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3417 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3419}","  3417 |     });
  3418 |
> 3419 |     it(""\\TextOrMath should work immediately"", function() {
       |    ^ Unknown Test
  3420 |         expect`\TextOrMath{text}{math}`.toParseLike`math`;
  3421 |     });
  3422 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3423}","  3421 |     });
  3422 |
> 3423 |     it(""\\TextOrMath should work after other math"", function() {
       |    ^ Unknown Test
  3424 |         expect`x+\TextOrMath{text}{math}`.toParseLike`x+math`;
  3425 |     });
  3426 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3427}","  3425 |     });
  3426 |
> 3427 |     it(""\\TextOrMath should work immediately after \\text"", function() {
       |    ^ Unknown Test
  3428 |         expect`\text{\TextOrMath{text}{math}}`.toParseLike`\text{text}`;
  3429 |     });
  3430 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3431}","  3429 |     });
  3430 |
> 3431 |     it(""\\TextOrMath should work later after \\text"", function() {
       |    ^ Unknown Test
  3432 |         expect`\text{hello \TextOrMath{text}{math}}`.toParseLike`\text{hello text}`;
  3433 |     });
  3434 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3435}","  3433 |     });
  3434 |
> 3435 |     it(""\\TextOrMath should work immediately after \\text ends"", function() {
       |    ^ Unknown Test
  3436 |         expect`\text{\TextOrMath{text}{math}}\TextOrMath{text}{math}`
  3437 |             .toParseLike`\text{text}math`;
  3438 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3440}","  3438 |     });
  3439 |
> 3440 |     it(""\\TextOrMath should work immediately after $"", function() {
       |    ^ Unknown Test
  3441 |         expect`\text{$\TextOrMath{text}{math}$}`.toParseLike`\text{$math$}`;
  3442 |     });
  3443 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3444}","  3442 |     });
  3443 |
> 3444 |     it(""\\TextOrMath should work later after $"", function() {
       |    ^ Unknown Test
  3445 |         expect`\text{$x+\TextOrMath{text}{math}$}`.toParseLike`\text{$x+math$}`;
  3446 |     });
  3447 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3448}","  3446 |     });
  3447 |
> 3448 |     it(""\\TextOrMath should work immediately after $ ends"", function() {
       |    ^ Unknown Test
  3449 |         expect`\text{$\TextOrMath{text}{math}$\TextOrMath{text}{math}}`
  3450 |             .toParseLike`\text{$math$text}`;
  3451 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3453}","  3451 |     });
  3452 |
> 3453 |     it(""\\TextOrMath should work in a macro"", function() {
       |    ^ Unknown Test
  3454 |         expect`\mode\text{\mode$\mode$\mode}\mode`
  3455 |             .toParseLike(r`math\text{text$math$text}math`, new Settings({macros: {
  3456 |                 ""\\mode"": ""\\TextOrMath{text}{math}"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3460}","  3458 |     });
  3459 |
> 3460 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3461 |         expect`\text\mode`.toParseLike(r`\text t`, new Settings({macros:
  3462 |             {""\\mode"": ""\\TextOrMath{t}{m}""}}));
  3463 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3492}","  3490 |     });
  3491 |
> 3492 |     it(""should build Unicode private area characters"", function() {
       |    ^ Unknown Test
  3493 |         expect`\gvertneqq\lvertneqq\ngeqq\ngeqslant\nleqq`.toBuild();
  3494 |         expect`\nleqslant\nshortmid\nshortparallel\varsubsetneq`.toBuild();
  3495 |         expect`\varsubsetneqq\varsupsetneq\varsupsetneqq`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3498}","  3496 |     });
  3497 |
> 3498 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3499 |         expect`\text\mode`.toParseLike(r`\text{text}`, new Settings({macros:
  3500 |             {""\\mode"": ""\\TextOrMath{text}{math}""}}));
  3501 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3503}","  3501 |     });
  3502 |
> 3503 |     it(""\\gdef defines macros"", function() {
       |    ^ Unknown Test
  3504 |         expect`\gdef\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3505 |         expect`\gdef\foo{hi}\foo+\text\foo`.toParseLike`hi+\text{hi}`;
  3506 |         expect`\gdef\foo#1{hi #1}\text{\foo{Alice}, \foo{Bob}}`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3521}","  3519 |     });
  3520 |
> 3521 |     it(""\\gdef defines macros with delimited parameter"", function() {
       |    ^ Unknown Test
  3522 |         expect`\gdef\foo|#1||{#1}\text{\foo| x y ||}`.toParseLike`\text{ x y }`;
  3523 |         expect`\gdef\foo#1|#2{#1+#2}\foo 1 2 |34`.toParseLike`12+34`;
  3524 |         expect`\gdef\foo#1#{#1}\foo1^{23}`.toParseLike`1^{23}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3530}","  3528 |     });
  3529 |
> 3530 |     it(""\\xdef should expand definition"", function() {
       |    ^ Unknown Test
  3531 |         expect`\def\foo{a}\xdef\bar{\foo}\def\foo{}\bar`.toParseLike`a`;
  3532 |         // \def\noexpand\foo{} expands into \def\foo{}
  3533 |         expect`\def\foo{a}\xdef\bar{\def\noexpand\foo{}}\foo\bar\foo`.toParseLike`a`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3540}","  3538 |     });
  3539 |
> 3540 |     it(""\\def should be handled in Parser"", () => {
       |    ^ Unknown Test
  3541 |         expect`\gdef\foo{1}`.toParse(new Settings({maxExpand: 0}));
  3542 |         expect`2^\def\foo{1}2`.not.toParse();
  3543 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3545}","  3543 |     });
  3544 |
> 3545 |     it(""\\def works locally"", () => {
       |    ^ Unknown Test
  3546 |         expect`\def\x{1}\x{\def\x{2}\x{\def\x{3}\x}\x}\x`
  3547 |             .toParseLike`1{2{3}2}1`;
  3548 |         expect`\def\x{1}\x\def\x{2}\x{\def\x{3}\x\def\x{4}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3552}","  3550 |     });
  3551 |
> 3552 |     it(""\\gdef overrides at all levels"", () => {
       |    ^ Unknown Test
  3553 |         expect`\def\x{1}\x{\def\x{2}\x{\gdef\x{3}\x}\x}\x`
  3554 |             .toParseLike`1{2{3}3}3`;
  3555 |         expect`\def\x{1}\x{\def\x{2}\x{\global\def\x{3}\x}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3561}","  3559 |     });
  3560 |
> 3561 |     it(""\\global needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3562 |         expect`\global\def\foo{}\foo`.toParseLike``;
  3563 |         expect`\global\edef\foo{}\foo`.toParseLike``;
  3564 |         expect`\def\DEF{\def}\global\DEF\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3571}","  3569 |     });
  3570 |
> 3571 |     it(""\\long needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3572 |         expect`\long\def\foo{}\foo`.toParseLike``;
  3573 |         expect`\long\edef\foo{}\foo`.toParseLike``;
  3574 |         expect`\long\global\def\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3578}","  3576 |     });
  3577 |
> 3578 |     it(""Macro arguments do not generate groups"", () => {
       |    ^ Unknown Test
  3579 |         expect`\def\x{1}\x\def\foo#1{#1}\foo{\x\def\x{2}\x}\x`
  3580 |             .toParseLike`1122`;
  3581 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3583}","  3581 |     });
  3582 |
> 3583 |     it(""\\textbf arguments do generate groups"", () => {
       |    ^ Unknown Test
  3584 |         expect`\def\x{1}\x\textbf{\x\def\x{2}\x}\x`.toParseLike`1\textbf{12}1`;
  3585 |     });
  3586 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3587}","  3585 |     });
  3586 |
> 3587 |     it(""\\sqrt optional arguments generate groups"", () => {
       |    ^ Unknown Test
  3588 |         expect`\def\x{1}\def\y{1}\x\y\sqrt[\def\x{2}\x]{\def\y{2}\y}\x\y`
  3589 |             .toParseLike`11\sqrt[2]{2}11`;
  3590 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3592}","  3590 |     });
  3591 |
> 3592 |     it(""array cells generate groups"", () => {
       |    ^ Unknown Test
  3593 |         expect`\def\x{1}\begin{matrix}\x&\def\x{2}\x&\x\end{matrix}\x`
  3594 |             .toParseLike`\begin{matrix}1&2&1\end{matrix}1`;
  3595 |         expect`\def\x{1}\begin{matrix}\def\x{2}\x&\x\end{matrix}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3623}","  3621 |     });
  3622 |
> 3623 |     it(""\\let copies the definition"", () => {
       |    ^ Unknown Test
  3624 |         expect`\let\foo=\frac\def\frac{}\foo12`.toParseLike`\frac12`;
  3625 |         expect`\def\foo{1}\let\bar\foo\def\foo{2}\bar`.toParseLike`1`;
  3626 |         expect`\let\foo=\kern\edef\bar{\foo1em}\let\kern=\relax\bar`.toParseLike`\kern1em`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3643}","  3641 |     });
  3642 |
> 3643 |     it(""\\futurelet should parse correctly"", () => {
       |    ^ Unknown Test
  3644 |         expect`\futurelet\foo\frac1{2+\foo}`.toParseLike`\frac1{2+1}`;
  3645 |     });
  3646 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3647}","  3645 |     });
  3646 |
> 3647 |     it(""macros argument can simulate \\let"", () => {
       |    ^ Unknown Test
  3648 |         expect`\int`.toParseLike(""\\int\\limits"", {macros: {
  3649 |             ""\\Oldint"": {
  3650 |                 tokens: [{text: ""\\int"", noexpand: true}],",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3674}","  3672 |     });
  3673 |
> 3674 |     it(""\\newcommand defines new macros"", () => {
       |    ^ Unknown Test
  3675 |         expect`\newcommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3676 |         expect`\newcommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3677 |         // Function detection",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3689}","  3687 |     });
  3688 |
> 3689 |     it(""\\renewcommand redefines macros"", () => {
       |    ^ Unknown Test
  3690 |         expect`\renewcommand\foo{x^2}\foo+\foo`.not.toParse();
  3691 |         expect`\renewcommand{\foo}{x^2}\foo+\foo`.not.toParse();
  3692 |         expect`\renewcommand\bar{x^2}\bar+\bar`.toParseLike`x^2+x^2`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3697}","  3695 |     });
  3696 |
> 3697 |     it(""\\providecommand defines but does not redefine macros"", () => {
       |    ^ Unknown Test
  3698 |         expect`\providecommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3699 |         expect`\providecommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3700 |         expect`\newcommand{\foo}{1}\foo\providecommand{\foo}{2}\foo`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3708}","  3706 |     });
  3707 |
> 3708 |     it(""\\newcommand is local"", () => {
       |    ^ Unknown Test
  3709 |         expect`\newcommand\foo{1}\foo{\renewcommand\foo{2}\foo}\foo`
  3710 |             .toParseLike`1{2}1`;
  3711 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3713}","  3711 |     });
  3712 |
> 3713 |     it(""\\newcommand accepts number of arguments"", () => {
       |    ^ Unknown Test
  3714 |         expect`\newcommand\foo[1]{#1^2}\foo x+\foo{y}`.toParseLike`x^2+y^2`;
  3715 |         expect`\newcommand\foo[10]{#1^2}\foo 0123456789`.toParseLike`0^2`;
  3716 |         expect`\newcommand\foo[x]{}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3722}","  3720 |     // This may change in the future, if we support the extra features of
  3721 |     // \hspace.
> 3722 |     it(""should treat \\hspace, \\hskip like \\kern"", function() {
       |    ^ Unknown Test
  3723 |         expect`\hspace{1em}`.toParseLike`\kern1em`;
  3724 |         expect`\hskip{1em}`.toParseLike`\kern1em`;
  3725 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3727}","  3725 |     });
  3726 |
> 3727 |     it(""should expand \\limsup as expected"", () => {
       |    ^ Unknown Test
  3728 |         expect`\limsup`.toParseLike`\operatorname*{lim\,sup}`;
  3729 |     });
  3730 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3731}","  3729 |     });
  3730 |
> 3731 |     it(""should expand \\liminf as expected"", () => {
       |    ^ Unknown Test
  3732 |         expect`\liminf`.toParseLike`\operatorname*{lim\,inf}`;
  3733 |     });
  3734 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3735}","  3733 |     });
  3734 |
> 3735 |     it(""should expand AMS log-like symbols as expected"", () => {
       |    ^ Unknown Test
  3736 |         expect`\injlim`.toParseLike`\operatorname*{inj\,lim}`;
  3737 |         expect`\projlim`.toParseLike`\operatorname*{proj\,lim}`;
  3738 |         expect`\varlimsup`.toParseLike`\operatorname*{\overline{lim}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3745}","  3743 |     });
  3744 |
> 3745 |     it(""should expand \\plim as expected"", () => {
       |    ^ Unknown Test
  3746 |         expect`\plim`.toParseLike`\mathop{\operatorname{plim}}\limits`;
  3747 |     });
  3748 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3749}","  3747 |     });
  3748 |
> 3749 |     it(""should expand \\argmin as expected"", () => {
       |    ^ Unknown Test
  3750 |         expect`\argmin`.toParseLike`\operatorname*{arg\,min}`;
  3751 |     });
  3752 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3753}","  3751 |     });
  3752 |
> 3753 |     it(""should expand \\argmax as expected"", () => {
       |    ^ Unknown Test
  3754 |         expect`\argmax`.toParseLike`\operatorname*{arg\,max}`;
  3755 |     });
  3756 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3757}","  3755 |     });
  3756 |
> 3757 |     it(""should expand \\bra as expected"", () => {
       |    ^ Unknown Test
  3758 |         expect`\bra{\phi}`.toParseLike`\mathinner{\langle{\phi}|}`;
  3759 |     });
  3760 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3761}","  3759 |     });
  3760 |
> 3761 |     it(""should expand \\ket as expected"", () => {
       |    ^ Unknown Test
  3762 |         expect`\ket{\psi}`.toParseLike`\mathinner{|{\psi}\rangle}`;
  3763 |     });
  3764 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3765}","  3763 |     });
  3764 |
> 3765 |     it(""should expand \\braket as expected"", () => {
       |    ^ Unknown Test
  3766 |         expect`\braket{\phi|\psi}`.toParseLike`\mathinner{\langle{\phi|\psi}\rangle}`;
  3767 |     });
  3768 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3769}","  3767 |     });
  3768 |
> 3769 |     it(""should expand \\Bra as expected"", () => {
       |    ^ Unknown Test
  3770 |         expect`\Bra{\phi}`.toParseLike`\left\langle\phi\right|`;
  3771 |     });
  3772 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3773}","  3771 |     });
  3772 |
> 3773 |     it(""should expand \\Ket as expected"", () => {
       |    ^ Unknown Test
  3774 |         expect`\Ket{\psi}`.toParseLike`\left|\psi\right\rangle`;
  3775 |     });
  3776 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3777}","  3775 |     });
  3776 |
> 3777 |     it(""should expand \\Braket as expected"", () => {
       |    ^ Unknown Test
  3778 |         expect`\Braket{ ϕ | \frac{∂^2}{∂ t^2} | ψ }`.toParseLike`\left\langle ϕ\,\middle\vert\,\frac{∂^2}{∂ t^2}\,\middle\vert\, ψ\right\rangle`;
  3779 |     });
  3780 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3781}","  3779 |     });
  3780 |
> 3781 |     it(""should expand \\set as expected"", () => {
       |    ^ Unknown Test
  3782 |         expect`\set{x|x<5|S|}`.toParseLike`\{\,x\mid x<5|S|\,\}`;
  3783 |         // \set doesn't support special || or \| handling
  3784 |         expect`\set{x||x<5|S|}`.toParseLike`\{\,x\mid |x<5|S|\,\}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3788}","  3786 |     });
  3787 |
> 3788 |     it(""should expand \\Set as expected"", () => {
       |    ^ Unknown Test
  3789 |         expect`\Set{ x | x<\frac 1 2 |S| }`
  3790 |         .toParseLike`\left\{\: x\;\middle\vert\; x<\frac 1 2 |S| \:\right\}`;
  3791 |         expect`\Set{ x || x<\frac 1 2 |S| }`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3801}","  3799 |     const displayMode = new Settings({displayMode: true});
  3800 |
> 3801 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  3802 |         expect`\tag{hi}x+y`.not.toParse();
  3803 |     });
  3804 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3805}","  3803 |     });
  3804 |
> 3805 |     it(""should fail with multiple tags"", () => {
       |    ^ Unknown Test
  3806 |         expect`\tag{1}\tag{2}x+y`.not.toParse(displayMode);
  3807 |     });
  3808 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3809}","  3807 |     });
  3808 |
> 3809 |     it(""should fail with multiple tags in one row"", () => {
       |    ^ Unknown Test
  3810 |         expect`\begin{align}\tag{1}x+y\tag{2}\end{align}`.not.toParse(displayMode);
  3811 |     });
  3812 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3813}","  3811 |     });
  3812 |
> 3813 |     it(""should work with one tag per row"", () => {
       |    ^ Unknown Test
  3814 |         expect`\begin{align}\tag{1}x\\&+y\tag{2}\end{align}`.toParse(displayMode);
  3815 |     });
  3816 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3817}","  3815 |     });
  3816 |
> 3817 |     it(""should work with \\nonumber/\\notag"", () => {
       |    ^ Unknown Test
  3818 |         expect`\begin{align}\tag{1}\nonumber x\\&+y\notag\end{align}`
  3819 |         .toParseLike(r`\begin{align}\tag{1}x\\&+y\nonumber\end{align}`, displayMode);
  3820 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3822}","  3820 |     });
  3821 |
> 3822 |     it(""should build"", () => {
       |    ^ Unknown Test
  3823 |         expect`\tag{hi}x+y`.toBuild(displayMode);
  3824 |     });
  3825 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3826}","  3824 |     });
  3825 |
> 3826 |     it(""should ignore location of \\tag"", () => {
       |    ^ Unknown Test
  3827 |         expect`\tag{hi}x+y`.toParseLike(r`x+y\tag{hi}`, displayMode);
  3828 |     });
  3829 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3830}","  3828 |     });
  3829 |
> 3830 |     it(""should handle \\tag* like \\tag"", () => {
       |    ^ Unknown Test
  3831 |         expect`\tag{hi}x+y`.toParseLike(r`\tag*{({hi})}x+y`, displayMode);
  3832 |     });
  3833 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3859}","  3857 |
  3858 | describe(""\\@binrel automatic bin/rel/ord"", () => {
> 3859 |     it(""should generate proper class"", () => {
       |    ^ Unknown Test
  3860 |         expect`L\@binrel+xR`.toParseLike`L\mathbin xR`;
  3861 |         expect`L\@binrel=xR`.toParseLike`L\mathrel xR`;
  3862 |         expect`L\@binrel xxR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3868}","  3866 |     });
  3867 |
> 3868 |     it(""should base on just first character in group"", () => {
       |    ^ Unknown Test
  3869 |         expect`L\@binrel{+x}xR`.toParseLike`L\mathbin xR`;
  3870 |         expect`L\@binrel{=x}xR`.toParseLike`L\mathrel xR`;
  3871 |         expect`L\@binrel{xx}xR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3888}","  3886 |
  3887 | describe(""Unicode accents"", function() {
> 3888 |     it(""should parse Latin-1 letters in math mode"", function() {
       |    ^ Unknown Test
  3889 |         // TODO(edemaine): Unsupported Latin-1 letters in math: ÇÐÞçðþ
  3890 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ`
  3891 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3908}","  3906 |     });
  3907 |
> 3908 |     it(""should parse Latin-1 letters in text mode"", function() {
       |    ^ Unknown Test
  3909 |         // TODO(edemaine): Unsupported Latin-1 letters in text: ÇÐÞçðþ
  3910 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}`
  3911 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3928}","  3926 |     });
  3927 |
> 3928 |     it(""should support \\aa in text mode"", function() {
       |    ^ Unknown Test
  3929 |         expect`\text{\aa\AA}`.toParseLike(r`\text{\r a\r A}`, strictSettings);
  3930 |         expect`\aa`.not.toParse(strictSettings);
  3931 |         expect`\Aa`.not.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3939}","  3937 |     });
  3938 |
> 3939 |     it(""should parse multi-accented characters"", function() {
       |    ^ Unknown Test
  3940 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3941 |         // Doesn't parse quite the same as
  3942 |         // ""\\text{\\'{\\^a}\\'{\\=a}\\'{\\u a}}"" because of the ordgroups.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3945}","  3943 |     });
  3944 |
> 3945 |     it(""should parse accented i's and j's"", function() {
       |    ^ Unknown Test
  3946 |         expect`íȷ́`.toParseLike(r`\acute ı\acute ȷ`, nonstrictSettings);
  3947 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3948 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3952}","  3950 |
  3951 | describe(""Unicode"", function() {
> 3952 |     it(""should parse negated relations"", function() {
       |    ^ Unknown Test
  3953 |         expect`∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌`.toParse(strictSettings);
  3954 |     });
  3955 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3956}","  3954 |     });
  3955 |
> 3956 |     it(""should build relations"", function() {
       |    ^ Unknown Test
  3957 |         expect`∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌`.toBuild(strictSettings);
  3958 |     });
  3959 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3960}","  3958 |     });
  3959 |
> 3960 |     it(""should parse relations"", function() {
       |    ^ Unknown Test
  3961 |         // These characters are not in the KaTeX fonts. So they build with an error message.
  3962 |         expect`⊶⊷`.toParse();
  3963 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3965}","  3963 |     });
  3964 |
> 3965 |     it(""should build big operators"", function() {
       |    ^ Unknown Test
  3966 |         expect`∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆`.toBuild(strictSettings);
  3967 |     });
  3968 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3969}","  3967 |     });
  3968 |
> 3969 |     it(""should build more relations"", function() {
       |    ^ Unknown Test
  3970 |         expect`⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋`.toBuild(strictSettings);
  3971 |     });
  3972 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3983}","  3981 |     });
  3982 |
> 3983 |     it(""should build arrows"", function() {
       |    ^ Unknown Test
  3984 |         expect`←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉`.toBuild(strictSettings);
  3985 |     });
  3986 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3987}","  3985 |     });
  3986 |
> 3987 |     it(""should build more arrows"", function() {
       |    ^ Unknown Test
  3988 |         expect`⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼`.toBuild(strictSettings);
  3989 |     });
  3990 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4073}","  4071 |
  4072 | describe(""The maxExpand setting"", () => {
> 4073 |     it(""should prevent expansion"", () => {
       |    ^ Unknown Test
  4074 |         expect`\gdef\foo{1}\foo`.toParse();
  4075 |         expect`\gdef\foo{1}\foo`.toParse(new Settings({maxExpand: 1}));
  4076 |         expect`\gdef\foo{1}\foo`.not.toParse(new Settings({maxExpand: 0}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4079}","  4077 |     });
  4078 |
> 4079 |     it(""should prevent infinite loops"", () => {
       |    ^ Unknown Test
  4080 |         expect`\gdef\foo{\foo}\foo`.not.toParse(
  4081 |             new Settings({maxExpand: 10}));
  4082 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4084}","  4082 |     });
  4083 |
> 4084 |     it(""should prevent exponential blowup via \\edef"", () => {
       |    ^ Unknown Test
  4085 |         expect`\edef0{x}\edef0{00}\edef0{00}\edef0{00}\edef0{00}`.not.toParse(
  4086 |             new Settings({maxExpand: 10}));
  4087 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4135}","  4133 |
  4134 | describe(""Newlines via \\\\ and \\newline"", function() {
> 4135 |     it(""should build \\\\ without the optional argument and \\newline the same"", () => {
       |    ^ Unknown Test
  4136 |         expect`hello \\ world`.toBuildLike`hello \newline world`;
  4137 |     });
  4138 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4139}","  4137 |     });
  4138 |
> 4139 |     it(""should not allow \\newline to scan for an optional size argument"", () => {
       |    ^ Unknown Test
  4140 |         expect`hello \newline[w]orld`.toBuild();
  4141 |     });
  4142 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4143}","  4141 |     });
  4142 |
> 4143 |     it(""should not allow \\cr at top level"", () => {
       |    ^ Unknown Test
  4144 |         expect`hello \cr world`.not.toBuild();
  4145 |     });
  4146 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4158}","  4156 |
  4157 | describe(""Symbols"", function() {
> 4158 |     it(""should parse \\text{\\i\\j}"", () => {
       |    ^ Unknown Test
  4159 |         expect`\text{\i\j}`.toBuild(strictSettings);
  4160 |     });
  4161 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4162}","  4160 |     });
  4161 |
> 4162 |     it(""should parse spacing functions in math or text mode"", () => {
       |    ^ Unknown Test
  4163 |         expect`A\;B\,C\nobreakspace \text{A\;B\,C\nobreakspace}`.toBuild(strictSettings);
  4164 |     });
  4165 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4166}","  4164 |     });
  4165 |
> 4166 |     it(""should build \\minuso"", () => {
       |    ^ Unknown Test
  4167 |         expect`\\minuso`.toBuild(strictSettings);
  4168 |     });
  4169 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4170}","  4168 |     });
  4169 |
> 4170 |     it(""should render ligature commands like their unicode characters"", () => {
       |    ^ Unknown Test
  4171 |         expect`\text{\ae\AE\oe\OE\o\O\ss}`.toBuildLike(r`\text{æÆœŒøØß}`, strictSettings);
  4172 |     });
  4173 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4176}","  4174 |
  4175 | describe(""strict setting"", function() {
> 4176 |     it(""should allow unicode text when not strict"", () => {
       |    ^ Unknown Test
  4177 |         expect`é`.toParse(new Settings(nonstrictSettings));
  4178 |         expect`試`.toParse(new Settings(nonstrictSettings));
  4179 |         expect`é`.toParse(new Settings({strict: ""ignore""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4187}","  4185 |     });
  4186 |
> 4187 |     it(""should forbid unicode text when strict"", () => {
       |    ^ Unknown Test
  4188 |         expect`é`.not.toParse(new Settings({strict: true}));
  4189 |         expect`試`.not.toParse(new Settings({strict: true}));
  4190 |         expect`é`.not.toParse(new Settings({strict: ""error""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4198}","  4196 |     });
  4197 |
> 4198 |     it(""should warn about unicode text when default"", () => {
       |    ^ Unknown Test
  4199 |         expect`é`.toWarn(new Settings());
  4200 |         expect`試`.toWarn(new Settings());
  4201 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4203}","  4201 |     });
  4202 |
> 4203 |     it(""should always allow unicode text in text mode"", () => {
       |    ^ Unknown Test
  4204 |         expect`\text{é試}`.toParse(nonstrictSettings);
  4205 |         expect`\text{é試}`.toParse(strictSettings);
  4206 |         expect`\text{é試}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4209}","  4207 |     });
  4208 |
> 4209 |     it(""should warn about top-level \\newline in display mode"", () => {
       |    ^ Unknown Test
  4210 |         expect`x\\y`.toWarn(new Settings({displayMode: true}));
  4211 |         expect`x\\y`.toParse(new Settings({displayMode: false}));
  4212 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4258}","  4256 |         }).toThrow(errorMessage);
  4257 |     });
> 4258 |     it(""should add font metrics to metrics map and render successfully"", () => {
       |    ^ Unknown Test
  4259 |         const mockMetrics = {};
  4260 |         // mock font metrics for the symbols that we added previously
  4261 |         for (let number = 0; number <= 9; number++) {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4294}","  4292 |
  4293 | describe(""\\relax"", () => {
> 4294 |     it(""should stop the expansion"", () => {
       |    ^ Unknown Test
  4295 |         expect`\kern2\relax em`.not.toParse();
  4296 |     });
  4297 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4300}","  4298 |
  4299 | describe(""\\emph"", () => {
> 4300 |     it(""should toggle italics"", () => {
       |    ^ Unknown Test
  4301 |         expect`\emph{foo \emph{bar}}`.toBuildLike`\textit{foo \textup{bar}}`;
  4302 |     });
  4303 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4304}","  4302 |     });
  4303 |
> 4304 |     it(""should toggle italics within text"", () => {
       |    ^ Unknown Test
  4305 |         expect`\text{\emph{foo \emph{bar}}}`.toBuildLike`\text{\textit{foo \textup{bar}}}`;
  4306 |     });
  4307 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4308}","  4306 |     });
  4307 |
> 4308 |     it(""should toggle italics within textup"", () => {
       |    ^ Unknown Test
  4309 |         expect`\textup{\emph{foo \emph{bar}}}`.toBuildLike`\textup{\textit{foo \textup{bar}}}`;
  4310 |     });
  4311 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4312}","  4310 |     });
  4311 |
> 4312 |     it(""should toggle italics within textit"", () => {
       |    ^ Unknown Test
  4313 |         expect`\textit{\emph{foo \emph{bar}}}`.toBuildLike`\textit{\textup{foo \textit{bar}}}`;
  4314 |     });
  4315 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 132}","  130 |         });
  131 |         it(""complains about mismatched \\verb with end of line"", function() {
> 132 |             expect(""\\verb|hello\nworld|"").toFailWithParseError(
      |            ^ Redundant Assertion
  133 |                 ""\\verb ended by end of line instead of matching delimiter"");
  134 |         });
  135 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 291}","  289 |     describe(""#_innerLex"", function() {
  290 |         it(""rejects lone surrogate char"", function() {
> 291 |             expect(""\udcba "").toFailWithParseError(
      |            ^ Redundant Assertion
  292 |                    ""Unexpected character: '\udcba' at position 1:"" +
  293 |                     "" \udcba\u0332 "");
  294 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 296}","  294 |         });
  295 |         it(""rejects lone backslash at end of input"", function() {
> 296 |             expect(""\\"").toFailWithParseError(
      |            ^ Redundant Assertion
  297 |                    ""Unexpected character: '\\' at position 1: \\̲"");
  298 |         });
  299 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 8, 'line': 328}","  326 | describe(""Unicode accents"", function() {
  327 |     it(""should return error for invalid combining characters"", function() {
> 328 |         expect(""A\u0328"").toFailWithParseError(
      |        ^ Redundant Assertion
  329 |             ""Unknown accent ' ̨' at position 1: Ą̲̲"");
  330 |     });
  331 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 6}","  4 |
  5 |     describe(""#handleInfixNodes"", function() {
> 6 |         it(""rejects repeated infix operators"", function() {
    |        ^ Unknown Test
  7 |             expect`1\over 2\over 3`.toFailWithParseError(
  8 |                    ""only one infix operator per group at position 9: "" +
  9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 11}","   9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");
  10 |         });
> 11 |         it(""rejects conflicting infix operators"", function() {
     |        ^ Unknown Test
  12 |             expect`1\over 2\choose 3`.toFailWithParseError(
  13 |                    ""only one infix operator per group at position 9: "" +
  14 |                    ""1\\over 2\\̲c̲h̲o̲o̲s̲e̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 19}","  17 |
  18 |     describe(""#handleSupSubscript"", function() {
> 19 |         it(""rejects ^ at end of group"", function() {
     |        ^ Unknown Test
  20 |             expect`{1^}`.toFailWithParseError(
  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 23}","  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });
> 23 |         it(""rejects _ at end of input"", function() {
     |        ^ Unknown Test
  24 |             expect`1_`.toFailWithParseError(
  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 27}","  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });
> 27 |         it(""rejects \\sqrt as argument to ^"", function() {
     |        ^ Unknown Test
  28 |             expect`1^\sqrt{2}`.toFailWithParseError(
  29 |                    ""Got function '\\sqrt' with no arguments as superscript"" +
  30 |                    "" at position 3: 1^\\̲s̲q̲r̲t̲{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 35}","  33 |
  34 |     describe(""#parseAtom"", function() {
> 35 |         it(""rejects \\limits without operator"", function() {
     |        ^ Unknown Test
  36 |             expect`\alpha\limits\omega`.toFailWithParseError(
  37 |                    ""Limit controls must follow a math operator"" +
  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 40}","  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");
  39 |         });
> 40 |         it(""rejects \\limits at the beginning of the input"", function() {
     |        ^ Unknown Test
  41 |             expect`\limits\omega`.toFailWithParseError(
  42 |                    ""Limit controls must follow a math operator"" +
  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 45}","  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");
  44 |         });
> 45 |         it(""rejects double superscripts"", function() {
     |        ^ Unknown Test
  46 |             expect`1^2^3`.toFailWithParseError(
  47 |                    ""Double superscript at position 4: 1^2^̲3"");
  48 |             expect`1^{2+3}_4^5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 51}","  49 |                    ""Double superscript at position 10: 1^{2+3}_4^̲5"");
  50 |         });
> 51 |         it(""rejects double superscripts involving primes"", function() {
     |        ^ Unknown Test
  52 |             expect`1'_2^3`.toFailWithParseError(
  53 |                    ""Double superscript at position 5: 1'_2^̲3"");
  54 |             expect`1^2'`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 61}","  59 |                    ""Double superscript at position 5: 1'_2'̲"");
  60 |         });
> 61 |         it(""rejects double subscripts"", function() {
     |        ^ Unknown Test
  62 |             expect`1_2_3`.toFailWithParseError(
  63 |                    ""Double subscript at position 4: 1_2_̲3"");
  64 |             expect`1_{2+3}^4_5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 70}","  68 |
  69 |     describe(""#parseImplicitGroup"", function() {
> 70 |         it(""reports unknown environments"", function() {
     |        ^ Unknown Test
  71 |             expect`\begin{foo}bar\end{foo}`.toFailWithParseError(
  72 |                    ""No such environment: foo at position 7:"" +
  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 75}","  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");
  74 |         });
> 75 |         it(""reports mismatched environments"", function() {
     |        ^ Unknown Test
  76 |             expect`\begin{pmatrix}1&2\\3&4\end{bmatrix}+5`
  77 |                 .toFailWithParseError(
  78 |                    ""Mismatch: \\begin{pmatrix} matched by \\end{bmatrix}"" +",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 84}","  82 |
  83 |     describe(""#parseFunction"", function() {
> 84 |         it(""rejects math-mode functions in text mode"", function() {
     |        ^ Unknown Test
  85 |             expect`\text{\sqrt2 is irrational}`.toFailWithParseError(
  86 |                 ""Can't use function '\\sqrt' in text mode"" +
  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 89}","  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");
  88 |         });
> 89 |         it(""rejects text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  90 |             expect`$`.toFailWithParseError(
  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 93}","  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });
> 93 |         it(""rejects strict-mode text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  94 |             expect`\'echec`.toFailWithParseError(""LaTeX-incompatible input "" +
  95 |                 ""and strict mode is set to 'error': LaTeX's accent \\' works "" +
  96 |                 ""only in text mode [mathVsTextAccents]"", strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 101}","   99 |
  100 |     describe(""#parseArguments"", function() {
> 101 |         it(""complains about missing argument at end of input"", function() {
      |        ^ Unknown Test
  102 |             expect`2\sqrt`.toFailWithParseError(
  103 |                    ""Expected group as argument to '\\sqrt'"" +
  104 |                    "" at end of input: 2\\sqrt"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 106}","  104 |                    "" at end of input: 2\\sqrt"");
  105 |         });
> 106 |         it(""complains about missing argument at end of group"", function() {
      |        ^ Unknown Test
  107 |             expect`1^{2\sqrt}`.toFailWithParseError(
  108 |                    ""Expected group as argument to '\\sqrt'"" +
  109 |                    "" at position 10: 1^{2\\sqrt}̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 111}","  109 |                    "" at position 10: 1^{2\\sqrt}̲"");
  110 |         });
> 111 |         it(""complains about functions as arguments to others"", function() {
      |        ^ Unknown Test
  112 |             expect`\sqrt\over2`.toFailWithParseError(
  113 |                    ""Got function '\\over' with no arguments as argument to"" +
  114 |                    "" '\\sqrt' at position 6: \\sqrt\\̲o̲v̲e̲r̲2"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 119}","  117 |
  118 |     describe(""#parseGroup"", function() {
> 119 |         it(""complains about undefined control sequence"", function() {
      |        ^ Unknown Test
  120 |             expect`\xyz`.toFailWithParseError(
  121 |                    ""Undefined control sequence: \\xyz"" +
  122 |                    "" at position 1: \\̲x̲y̲z̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 127}","  125 |
  126 |     describe(""#verb"", function() {
> 127 |         it(""complains about mismatched \\verb with end of string"", function() {
      |        ^ Unknown Test
  128 |             expect`\verb|hello`.toFailWithParseError(
  129 |                 ""\\verb ended by end of line instead of matching delimiter"");
  130 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 142}","  140 |
  141 |     describe(""#parseInput expecting EOF"", function() {
> 142 |         it(""complains about extra }"", function() {
      |        ^ Unknown Test
  143 |             expect`{1+2}}`.toFailWithParseError(
  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 146}","  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });
> 146 |         it(""complains about extra \\end"", function() {
      |        ^ Unknown Test
  147 |             expect`x\end{matrix}`.toFailWithParseError(
  148 |                    ""Expected 'EOF', got '\\end' at position 2:"" +
  149 |                    "" x\\̲e̲n̲d̲{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 151}","  149 |                    "" x\\̲e̲n̲d̲{matrix}"");
  150 |         });
> 151 |         it(""complains about top-level &"", function() {
      |        ^ Unknown Test
  152 |             expect`1&2`.toFailWithParseError(
  153 |                    ""Expected 'EOF', got '&' at position 2: 1&̲2"");
  154 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 158}","  156 |
  157 |     describe(""#parseImplicitGroup expecting \\right"", function() {
> 158 |         it(""rejects missing \\right"", function() {
      |        ^ Unknown Test
  159 |             expect`\left(1+2)`.toFailWithParseError(
  160 |                    ""Expected '\\right', got 'EOF' at end of input:"" +
  161 |                    "" \\left(1+2)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 163}","  161 |                    "" \\left(1+2)"");
  162 |         });
> 163 |         it(""rejects incorrectly scoped \\right"", function() {
      |        ^ Unknown Test
  164 |             expect`{\left(1+2}\right)`.toFailWithParseError(
  165 |                    ""Expected '\\right', got '}' at position 11:"" +
  166 |                    "" {\\left(1+2}̲\\right)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 174}","  172 |
  173 |     describe(""#parseSpecialGroup expecting braces"", function() {
> 174 |         it(""complains about missing { for color"", function() {
      |        ^ Unknown Test
  175 |             expect`\textcolor#ffffff{text}`.toFailWithParseError(
  176 |                    ""Invalid color: '#' at position 11:"" +
  177 |                    "" \\textcolor#̲ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 179}","  177 |                    "" \\textcolor#̲ffffff{text}"");
  178 |         });
> 179 |         it(""complains about missing { for size"", function() {
      |        ^ Unknown Test
  180 |             expect`\rule{1em}[2em]`.toFailWithParseError(
  181 |                    ""Invalid size: '[' at position 11: \\rule{1em}[̲2em]"");
  182 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 184}","  182 |         });
  183 |         // Can't test for the [ of an optional group since it's optional
> 184 |         it(""complains about missing } for color"", function() {
      |        ^ Unknown Test
  185 |             expect`\textcolor{#ffffff{text}`.toFailWithParseError(
  186 |                    ""Unexpected end of input in a macro argument,"" +
  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 189}","  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");
  188 |         });
> 189 |         it(""complains about missing ] for size"", function() {
      |        ^ Unknown Test
  190 |             expect`\rule[1em{2em}{3em}`.toFailWithParseError(
  191 |                    ""Unexpected end of input in a macro argument,"" +
  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 194}","  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");
  193 |         });
> 194 |         it(""complains about missing ] for size at end of input"", function() {
      |        ^ Unknown Test
  195 |             expect`\rule[1em`.toFailWithParseError(
  196 |                    ""Unexpected end of input in a macro argument,"" +
  197 |                    "" expected ']' at end of input: \\rule[1em"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 199}","  197 |                    "" expected ']' at end of input: \\rule[1em"");
  198 |         });
> 199 |         it(""complains about missing } for color at end of input"", function() {
      |        ^ Unknown Test
  200 |             expect`\textcolor{#123456`.toFailWithParseError(
  201 |                    ""Unexpected end of input in a macro argument,"" +
  202 |                    "" expected '}' at end of input: …xtcolor{#123456"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 207}","  205 |
  206 |     describe(""#parseGroup expecting }"", function() {
> 207 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  208 |             expect`\sqrt{2`.toFailWithParseError(
  209 |                    ""Expected '}', got 'EOF' at end of input: \\sqrt{2"");
  210 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 214}","  212 |
  213 |     describe(""#parseOptionalGroup expecting ]"", function() {
> 214 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  215 |             expect`\sqrt[3`.toFailWithParseError(
  216 |                    ""Unexpected end of input in a macro argument,"" +
  217 |                    "" expected ']' at end of input: \\sqrt[3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 219}","  217 |                    "" expected ']' at end of input: \\sqrt[3"");
  218 |         });
> 219 |         it(""before group"", function() {
      |        ^ Unknown Test
  220 |             expect`\sqrt[3{2}`.toFailWithParseError(
  221 |                    ""Unexpected end of input in a macro argument,"" +
  222 |                    "" expected ']' at end of input: \\sqrt[3{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 231}","  229 |
  230 |     describe(""parseArray"", function() {
> 231 |         it(""rejects missing \\end"", function() {
      |        ^ Unknown Test
  232 |             expect`\begin{matrix}1`.toFailWithParseError(
  233 |                    ""Expected & or \\\\ or \\cr or \\end at end of input:"" +
  234 |                    "" \\begin{matrix}1"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 236}","  234 |                    "" \\begin{matrix}1"");
  235 |         });
> 236 |         it(""rejects incorrectly scoped \\end"", function() {
      |        ^ Unknown Test
  237 |             expect`{\begin{matrix}1}\end{matrix}`.toFailWithParseError(
  238 |                    ""Expected & or \\\\ or \\cr or \\end at position 17:"" +
  239 |                    "" …\\begin{matrix}1}̲\\end{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 244}","  242 |
  243 |     describe(""array environment"", function() {
> 244 |         it(""rejects unknown column types"", function() {
      |        ^ Unknown Test
  245 |             expect`\begin{array}{cba}\end{array}`.toFailWithParseError(
  246 |                    ""Unknown column alignment: b at position 16:"" +
  247 |                    "" \\begin{array}{cb̲a}\\end{array}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 256}","  254 |
  255 |     describe(""delimiter functions"", function() {
> 256 |         it(""reject invalid opening delimiters"", function() {
      |        ^ Unknown Test
  257 |             expect`\bigl 1 + 2 \bigr`.toFailWithParseError(
  258 |                    ""Invalid delimiter '1' after '\\bigl' at position 7:"" +
  259 |                    "" \\bigl 1̲ + 2 \\bigr"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 261}","  259 |                    "" \\bigl 1̲ + 2 \\bigr"");
  260 |         });
> 261 |         it(""reject invalid closing delimiters"", function() {
      |        ^ Unknown Test
  262 |             expect`\bigl(1+2\bigr=3`.toFailWithParseError(
  263 |                    ""Invalid delimiter '=' after '\\bigr' at position 15:"" +
  264 |                    "" \\bigl(1+2\\bigr=̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 266}","  264 |                    "" \\bigl(1+2\\bigr=̲3"");
  265 |         });
> 266 |         it(""reject group opening delimiters"", function() {
      |        ^ Unknown Test
  267 |             expect`\bigl{(}1+2\bigr)3`.toFailWithParseError(
  268 |                    ""Invalid delimiter type 'ordgroup' at position 6:"" +
  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 271}","  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");
  270 |         });
> 271 |         it(""reject group closing delimiters"", function() {
      |        ^ Unknown Test
  272 |             expect`\bigl(1+2\bigr{)}3`.toFailWithParseError(
  273 |                    ""Invalid delimiter type 'ordgroup' at position 15:"" +
  274 |                    "" \\bigl(1+2\\bigr{̲)̲}̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 279}","  277 |
  278 |     describe(""\\begin and \\end"", function() {
> 279 |         it(""reject invalid environment names"", function() {
      |        ^ Unknown Test
  280 |             expect`\begin x\end y`.toFailWithParseError(
  281 |                    ""No such environment: x at position 8: \\begin x̲\\end y"");
  282 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 302}","  300 |
  301 |     describe(""#_innerLexColor"", function() {
> 302 |         it(""reject 3-digit hex notation without #"", function() {
      |        ^ Unknown Test
  303 |             expect`\textcolor{1a2}{foo}`.toFailWithParseError(
  304 |                    ""Invalid color: '1a2'"" +
  305 |                    "" at position 11: \\textcolor{̲1̲a̲2̲}̲{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 310}","  308 |
  309 |     describe(""#_innerLexSize"", function() {
> 310 |         it(""reject size without unit"", function() {
      |        ^ Unknown Test
  311 |             expect`\rule{0}{2em}`.toFailWithParseError(
  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 314}","  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });
> 314 |         it(""reject size with bogus unit"", function() {
      |        ^ Unknown Test
  315 |             expect`\rule{1au}{2em}`.toFailWithParseError(
  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 318}","  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });
> 318 |         it(""reject size without number"", function() {
      |        ^ Unknown Test
  319 |             expect`\rule{em}{2em}`.toFailWithParseError(
  320 |                    ""Invalid size: 'em' at position 6: \\rule{̲e̲m̲}̲{2em}"");
  321 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 5, 'column': 4, 'index': 124}","  3 |
  4 | describe(""Symbols and macros"", () => {
> 5 |     for (const macro in macros) {
    |    ^ Conditional Test Logic
  6 |         if (!macros.hasOwnProperty(macro)) {
  7 |             continue;
  8 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 6, 'column': 8, 'index': 162}","  4 | describe(""Symbols and macros"", () => {
  5 |     for (const macro in macros) {
> 6 |         if (!macros.hasOwnProperty(macro)) {
    |        ^ Conditional Test Logic
  7 |             continue;
  8 |         }
  9 |         it(`macro ${macro} should not shadow a symbol`, () => {",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 10, 'column': 12, 'index': 307}","   8 |         }
   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
> 10 |             for (const kind in symbols) {
     |            ^ Conditional Test Logic
  11 |                 if (!symbols.hasOwnProperty(kind)) {
  12 |                     continue;
  13 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 11, 'column': 16, 'index': 353}","   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
  10 |             for (const kind in symbols) {
> 11 |                 if (!symbols.hasOwnProperty(kind)) {
     |                ^ Conditional Test Logic
  12 |                     continue;
  13 |                 }
  14 |                 expect(symbols[kind][macro]).toBeFalsy();",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 18, 'column': 12, 'index': 481}","  16 |                   splitAtDelimiters(actual, delimiters);
  17 |
> 18 |             if (split.length !== result.length) {
     |            ^ Conditional Test Logic
  19 |                 message.pass = false;
  20 |                 message.message = () => ""Different number of splits: "" +
  21 |                     split.length + "" vs. "" + result.length + "" ("" +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 27, 'column': 12, 'index': 861}","  25 |             }
  26 |
> 27 |             for (let i = 0; i < split.length; i++) {
     |            ^ Conditional Test Logic
  28 |                 const real = split[i];
  29 |                 const correct = result[i];
  30 |",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 34, 'column': 16, 'index': 1061}","  32 |                 let diff;
  33 |
> 34 |                 if (real.type !== correct.type) {
     |                ^ Conditional Test Logic
  35 |                     good = false;
  36 |                     diff = ""type"";
  37 |                 } else if (real.data !== correct.data) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 37, 'column': 23, 'index': 1187}","  35 |                     good = false;
  36 |                     diff = ""type"";
> 37 |                 } else if (real.data !== correct.data) {
     |                       ^ Conditional Test Logic
  38 |                     good = false;
  39 |                     diff = ""data"";
  40 |                 } else if (real.display !== correct.display) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 40, 'column': 23, 'index': 1313}","  38 |                     good = false;
  39 |                     diff = ""data"";
> 40 |                 } else if (real.display !== correct.display) {
     |                       ^ Conditional Test Logic
  41 |                     good = false;
  42 |                     diff = ""display"";
  43 |                 }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 45, 'column': 16, 'index': 1460}","  43 |                 }
  44 |
> 45 |                 if (!good) {
     |                ^ Conditional Test Logic
  46 |                     message.pass = false;
  47 |                     message.message = () => ""Difference at split "" +
  48 |                         (i + 1) + "": "" + JSON.stringify(real) +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 332, 'column': 8, 'index': 11671}","  330 |             '\\]'];
  331 |         const el = document.createElement('div');
> 332 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  333 |             const txt = document.createTextNode(textNodes[i]);
  334 |             el.appendChild(txt);
  335 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 350, 'column': 8, 'index': 12420}","  348 |             'consectetur adipiscing elit'];
  349 |         const el = document.createElement('div');
> 350 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  351 |             const txt = document.createTextNode(textNodes[i]);
  352 |             el.appendChild(txt);
  353 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 355, 'column': 8, 'index': 12630}","  353 |         }
  354 |         const el2 = document.createElement('div');
> 355 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  356 |             const txt = document.createTextNode(textNodes[i]);
  357 |             el2.appendChild(txt);
  358 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 62}","  60 | describe(""A delimiter splitter"", function() {
  61 |     it(""doesn't split when there are no delimiters"", function() {
> 62 |         expect(""hello"").toSplitInto(
     |        ^ Redundant Assertion
  63 |             [
  64 |                 {type: ""text"", data: ""hello""},
  65 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 72}","  70 |
  71 |     it(""doesn't create a math node with only one left delimiter"", function() {
> 72 |         expect(""hello ( world"").toSplitInto(
     |        ^ Redundant Assertion
  73 |             [
  74 |                 {type: ""text"", data: ""hello ""},
  75 |                 {type: ""text"", data: ""( world""},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 83}","  81 |
  82 |     it(""doesn't split when there's only a right delimiter"", function() {
> 83 |         expect(""hello ) world"").toSplitInto(
     |        ^ Redundant Assertion
  84 |             [
  85 |                 {type: ""text"", data: ""hello ) world""},
  86 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 93}","  91 |
  92 |     it(""splits when there are both delimiters"", function() {
> 93 |         expect(""hello ( world ) boo"").toSplitInto(
     |        ^ Redundant Assertion
  94 |             [
  95 |                 {type: ""text"", data: ""hello ""},
  96 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 106}","  104 |
  105 |     it(""splits on multi-character delimiters"", function() {
> 106 |         expect(""hello [[ world ]] boo"").toSplitInto(
      |        ^ Redundant Assertion
  107 |             [
  108 |                 {type: ""text"", data: ""hello ""},
  109 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 116}","  114 |                 {left: ""[["", right: ""]]"", display: false},
  115 |             ]);
> 116 |         expect(""hello \\begin{equation} world \\end{equation} boo"").toSplitInto(
      |        ^ Redundant Assertion
  117 |             [
  118 |                 {type: ""text"", data: ""hello ""},
  119 |                 {type: ""math"", data: ""\\begin{equation} world \\end{equation}"",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 131}","  129 |
  130 |     it(""splits multiple times"", function() {
> 131 |         expect(""hello ( world ) boo ( more ) stuff"").toSplitInto(
      |        ^ Redundant Assertion
  132 |             [
  133 |                 {type: ""text"", data: ""hello ""},
  134 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 147}","  145 |
  146 |     it(""leaves the ending when there's only a left delimiter"", function() {
> 147 |         expect(""hello ( world ) boo ( left"").toSplitInto(
      |        ^ Redundant Assertion
  148 |             [
  149 |                 {type: ""text"", data: ""hello ""},
  150 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 161}","  159 |
  160 |     it(""doesn't split when close delimiters are in {}s"", function() {
> 161 |         expect(""hello ( world { ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  162 |             [
  163 |                 {type: ""text"", data: ""hello ""},
  164 |                 {type: ""math"", data: "" world { ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 172}","  170 |             ]);
  171 |
> 172 |         expect(""hello ( world { { } ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  173 |             [
  174 |                 {type: ""text"", data: ""hello ""},
  175 |                 {type: ""math"", data: "" world { { } ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 185}","  183 |
  184 |     it(""correctly processes sequences of $..$"", function() {
> 185 |         expect(""$hello$$world$$boo$"").toSplitInto(
      |        ^ Redundant Assertion
  186 |             [
  187 |                 {type: ""math"", data: ""hello"",
  188 |                     rawData: ""$hello$"", display: false},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 200}","  198 |
  199 |     it(""doesn't split at escaped delimiters"", function() {
> 200 |         expect(""hello ( world \\) ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  201 |             [
  202 |                 {type: ""text"", data: ""hello ""},
  203 |                 {type: ""math"", data: "" world \\) "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 224}","  222 |
  223 |     it(""splits when the right and left delimiters are the same"", function() {
> 224 |         expect(""hello $ world $ boo"").toSplitInto(
      |        ^ Redundant Assertion
  225 |             [
  226 |                 {type: ""text"", data: ""hello ""},
  227 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 237}","  235 |
  236 |     it(""ignores \\$"", function() {
> 237 |         expect(""$x = \\$5$"").toSplitInto(
      |        ^ Redundant Assertion
  238 |             [
  239 |                 {type: ""math"", data: ""x = \\$5"",
  240 |                     rawData: ""$x = \\$5$"", display: false},",,
test/unicode-spec.js,ConditionalTestLogic,"[{""startLine"":157,""endLine"":160}]",,25.0,2.0
test/unicode-spec.js,SubOptimalAssert,"[{""startLine"":163,""endLine"":163}]",,25.0,2.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1316,""endLine"":1320}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1399,""endLine"":1401}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2820,""endLine"":2822}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2837,""endLine"":2839}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2854,""endLine"":2857}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3125,""endLine"":3128}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3822,""endLine"":3824}]",,556.0,117.0
test/katex-spec.js,OvercommentedTest,"[{""startLine"":4012,""endLine"":4047}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":62,""endLine"":64}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":81,""endLine"":84}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":108,""endLine"":111}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":123,""endLine"":125}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":141,""endLine"":143}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":159,""endLine"":161}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":175,""endLine"":177}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":297,""endLine"":302}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":341,""endLine"":343}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":358,""endLine"":360}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":385,""endLine"":388}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":490,""endLine"":492}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":564,""endLine"":569}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":571,""endLine"":601}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":667,""endLine"":676}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":680,""endLine"":686}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":692,""endLine"":694}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":716,""endLine"":718}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":828,""endLine"":838}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":852,""endLine"":854}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":990,""endLine"":992}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1038,""endLine"":1041}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1097,""endLine"":1107}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1109,""endLine"":1112}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1114,""endLine"":1117}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1135,""endLine"":1149}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1167,""endLine"":1170}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1172,""endLine"":1175}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1177,""endLine"":1180}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1196,""endLine"":1198}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1308,""endLine"":1310}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1543,""endLine"":1556}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1560,""endLine"":1565}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1691,""endLine"":1698}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2075,""endLine"":2092}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2113,""endLine"":2115}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2148,""endLine"":2150}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2259,""endLine"":2265}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2290,""endLine"":2295}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2297,""endLine"":2303}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2307,""endLine"":2313}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2315,""endLine"":2321}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2325,""endLine"":2330}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2332,""endLine"":2338}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2351,""endLine"":2356}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2364,""endLine"":2368}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2372,""endLine"":2377}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2379,""endLine"":2386}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2390,""endLine"":2396}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2404,""endLine"":2408}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2412,""endLine"":2418}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2431,""endLine"":2438}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2446,""endLine"":2450}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2454,""endLine"":2459}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2461,""endLine"":2468}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2472,""endLine"":2477}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2487,""endLine"":2492}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2494,""endLine"":2500}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2527,""endLine"":2530}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2534,""endLine"":2538}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2540,""endLine"":2542}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2546,""endLine"":2550}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2552,""endLine"":2555}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2557,""endLine"":2561}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2563,""endLine"":2566}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2570,""endLine"":2574}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2576,""endLine"":2578}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2582,""endLine"":2587}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2589,""endLine"":2593}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2595,""endLine"":2599}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2603,""endLine"":2612}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2614,""endLine"":2620}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2633,""endLine"":2638}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2642,""endLine"":2644}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2645,""endLine"":2647}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2651,""endLine"":2660}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2671,""endLine"":2682}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2700,""endLine"":2715}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2725,""endLine"":2735}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2749,""endLine"":2755}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2837,""endLine"":2839}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2854,""endLine"":2857}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2863,""endLine"":2865}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2958,""endLine"":2965}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2969,""endLine"":2972}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3414,""endLine"":3417}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3498,""endLine"":3501}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3801,""endLine"":3803}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3822,""endLine"":3824}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":92,""endLine"":96}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":97,""endLine"":102}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1761,""endLine"":1763}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1896,""endLine"":1897}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3169,""endLine"":3169}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3184,""endLine"":3184}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3979,""endLine"":3980}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":510,""endLine"":536}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":571,""endLine"":601}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":1607,""endLine"":1631}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3080,""endLine"":3095}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3503,""endLine"":3519}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":4012,""endLine"":4047}]",,556.0,117.0
test/errors-spec.js,AnonymousTest,"[{""startLine"":219,""endLine"":223}]",,50.0,26.0
test/errors-spec.js,IdenticalTestDescription,"[{""startLine"":214,""endLine"":218}]",,50.0,26.0
