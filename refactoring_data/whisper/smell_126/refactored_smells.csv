file,type,smells,frame,itCount,describeCount
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 20, 'column': 8, 'index': 1016}","  18 |     it(""should not parse Latin-1 outside \\text{} with strict"", function() {
  19 |         const chars = 'ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ';
> 20 |         for (const ch of chars) {
     |        ^ Conditional Test Logic
  21 |             expect(ch).not.toParse(strictSettings);
  22 |         }
  23 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 144, 'column': 8, 'index': 5144}","  142 |
  143 |     it(""supportedCodepoint() should return the correct values"", () => {
> 144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |        ^ Conditional Test Logic
  145 |             expect(supportedCodepoint(codepoint)).toBe(
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 152, 'column': 15, 'index': 5441}","  150 |
  151 |     it(""scriptFromCodepoint() should return correct values"", () => {
> 152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |               ^ Conditional Test Logic
  153 |             const character = String.fromCharCode(codepoint);
  154 |             const script = scriptFromCodepoint(codepoint);
  155 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 156, 'column': 12, 'index': 5635}","  154 |             const script = scriptFromCodepoint(codepoint);
  155 |
> 156 |             for (const scriptName of scriptNames) {
      |            ^ Conditional Test Logic
  157 |                 if (scriptRegExps[scriptName].test(character)) {
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 157, 'column': 16, 'index': 5691}","  155 |
  156 |             for (const scriptName of scriptNames) {
> 157 |                 if (scriptRegExps[scriptName].test(character)) {
      |                ^ Conditional Test Logic
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;
  160 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 158, 'column': 20, 'index': 5760}","  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {
> 158 |                     expect(script).toEqual(scriptName);
      |                    ^ Duplicate Assert
  159 |                     continue outer;
  160 |                 }
  161 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 163, 'column': 12, 'index': 5877}","  161 |             }
  162 |
> 163 |             expect(script).toBe(null);
      |            ^ Duplicate Assert
  164 |             expect(supportedCodepoint(codepoint)).toBe(false);
  165 |         }
  166 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 154, 'column': 27, 'index': 5590}","  152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
  153 |             const character = String.fromCharCode(codepoint);
> 154 |             const script = scriptFromCodepoint(codepoint);
      |                           ^ Eager Test
  155 |
  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Eager Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 145, 'column': 19, 'index': 5223}","  143 |     it(""supportedCodepoint() should return the correct values"", () => {
  144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
> 145 |             expect(supportedCodepoint(codepoint)).toBe(
      |                   ^ Lazy Test
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );
  148 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Lazy Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 7}","   5 |
   6 | describe(""unicode"", function() {
>  7 |     it(""should build Latin-1 inside \\text{}"", function() {
     |    ^ Unknown Test
   8 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}`
   9 |             .toBuild();
  10 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 12}","  10 |     });
  11 |
> 12 |     it(""should build Latin-1 inside \\text{} like accent commands"", function() {
     |    ^ Unknown Test
  13 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}`
  14 |             .toParseLike`\text{\`A\'A\^A\~A\""A\r A\`E\'E\^E\""E\`I\'I\^I\""I\~N\`O\'O\^O\~O\""O\`U\'U\^U\""U\'Y\`a\'a\^a\~a\""a\r a\`e\'e\^e\""e\`ı\'ı\^ı\""ı\~n\`o\'o\^o\~o\""o\`u\'u\^u\""u\'y\""y\c C\c c}`;
  15 |         // TODO(edemaine): A few characters don't have analogs yet.",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 25}","  23 |     });
  24 |
> 25 |     it(""should build Latin-1 outside \\text{}"", function() {
     |    ^ Unknown Test
  26 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ`
  27 |             .toBuild(nonstrictSettings);
  28 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 30}","  28 |     });
  29 |
> 30 |     it(""should build all lower case Greek letters"", function() {
     |    ^ Unknown Test
  31 |         expect`αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω`.toBuild();
  32 |     });
  33 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 34}","  32 |     });
  33 |
> 34 |     it(""should build math upper case Greek letters"", function() {
     |    ^ Unknown Test
  35 |         expect`ΓΔΘΛΞΠΣΥΦΨΩ`.toBuild();
  36 |     });
  37 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 38}","  36 |     });
  37 |
> 38 |     it(""should build Cyrillic inside \\text{}"", function() {
     |    ^ Unknown Test
  39 |         expect`\text{БГДЖЗЙЛФЦШЫЮЯ}`.toBuild();
  40 |     });
  41 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 42}","  40 |     });
  41 |
> 42 |     it(""should build Cyrillic outside \\text{}"", function() {
     |    ^ Unknown Test
  43 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.toBuild(nonstrictSettings);
  44 |     });
  45 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 46}","  44 |     });
  45 |
> 46 |     it(""should not parse Cyrillic outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  47 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.not.toParse(strictSettings);
  48 |     });
  49 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 50}","  48 |     });
  49 |
> 50 |     it(""should build CJK inside \\text{}"", function() {
     |    ^ Unknown Test
  51 |         expect`\text{私はバナナです}`.toBuild();
  52 |         expect`\text{여보세요}`.toBuild();
  53 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 55}","  53 |     });
  54 |
> 55 |     it(""should build CJK outside \\text{}"", function() {
     |    ^ Unknown Test
  56 |         expect`私はバナナです`.toBuild(nonstrictSettings);
  57 |         expect`여보세요`.toBuild(nonstrictSettings);
  58 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 60}","  58 |     });
  59 |
> 60 |     it(""should not parse CJK outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  61 |         expect`私はバナナです。`.not.toParse(strictSettings);
  62 |         expect`여보세요`.not.toParse(strictSettings);
  63 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 65}","  63 |     });
  64 |
> 65 |     it(""should build Devanagari inside \\text{}"", function() {
     |    ^ Unknown Test
  66 |         expect`\text{नमस्ते}`.toBuild();
  67 |     });
  68 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 69}","  67 |     });
  68 |
> 69 |     it(""should build Devanagari outside \\text{}"", function() {
     |    ^ Unknown Test
  70 |         expect`नमस्ते`.toBuild(nonstrictSettings);
  71 |     });
  72 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 73}","  71 |     });
  72 |
> 73 |     it(""should not parse Devanagari outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  74 |         expect`नमस्ते`.not.toParse(strictSettings);
  75 |     });
  76 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 77}","  75 |     });
  76 |
> 77 |     it(""should build Georgian inside \\text{}"", function() {
     |    ^ Unknown Test
  78 |         expect`\text{გამარჯობა}`.toBuild();
  79 |     });
  80 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 81}","  79 |     });
  80 |
> 81 |     it(""should build Georgian outside \\text{}"", function() {
     |    ^ Unknown Test
  82 |         expect`გამარჯობა`.toBuild(nonstrictSettings);
  83 |     });
  84 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 85}","  83 |     });
  84 |
> 85 |     it(""should not parse Georgian outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  86 |         expect`გამარჯობა`.not.toParse(strictSettings);
  87 |     });
  88 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 89}","  87 |     });
  88 |
> 89 |     it(""should build Armenian both inside and outside \\text{}"", function() {
     |    ^ Unknown Test
  90 |         expect`ԱԲԳաբգ`.toBuild(nonstrictSettings);
  91 |         expect`\text{ԱԲԳաբգ}`.toBuild(nonstrictSettings);
  92 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 94}","  92 |     });
  93 |
> 94 |     it(""should build extended Latin characters inside \\text{}"", function() {
     |    ^ Unknown Test
  95 |         expect`\text{ěščřžůřťďňőİı}`.toBuild();
  96 |     });
  97 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 98}","   96 |     });
   97 |
>  98 |     it(""should not parse extended Latin outside \\text{} with strict"", function() {
      |    ^ Unknown Test
   99 |         expect`ěščřžůřťďňőİı`.not.toParse(strictSettings);
  100 |     });
  101 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 102}","  100 |     });
  101 |
> 102 |     it(""should not allow emoji in strict mode"", function() {
      |    ^ Unknown Test
  103 |         expect`✌`.not.toParse(strictSettings);
  104 |         expect`\text{✌}`.not.toParse(strictSettings);
  105 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 113}","  111 |     });
  112 |
> 113 |     it(""should allow emoji outside strict mode"", function() {
      |    ^ Unknown Test
  114 |         expect`✌`.toWarn();
  115 |         expect`\text{✌}`.toWarn();
  116 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 4, 'column': 4, 'index': 98}","  2 |
  3 | describe(""Screenshotter item"", function() {
> 4 |     for (const key in data) {
    |    ^ Conditional Test Logic
  5 |         if (data.hasOwnProperty(key)) {
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 5, 'column': 8, 'index': 132}","  3 | describe(""Screenshotter item"", function() {
  4 |     for (const key in data) {
> 5 |         if (data.hasOwnProperty(key)) {
    |        ^ Conditional Test Logic
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {
  8 |                 expect(item.tex).toBuild({",,
/home/gabriel/Desktop/research/projects/katex/test/mathml-spec.js,Conditional Test Logic,"{'line': 9, 'column': 4, 'index': 300}","   7 | const getMathML = function(expr, settings = new Settings()) {
   8 |     let startStyle = Style.TEXT;
>  9 |     if (settings.displayMode) {
     |    ^ Conditional Test Logic
  10 |         startStyle = Style.DISPLAY;
  11 |     }
  12 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 75, 'column': 8, 'index': 2075}","  73 |         const parse = getParsed(expression);
  74 |
> 75 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  76 |             const group = parse[i];
  77 |             expect(group.type).toEqual(""atom"");
  78 |             expect(group.family).toEqual(""bin"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 95, 'column': 8, 'index': 2670}","  93 |         const parse = getParsed(expression);
  94 |
> 95 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  96 |             let group = parse[i];
  97 |             if (group.type === ""htmlmathml"") {
  98 |                 expect(group.html).toHaveLength(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 97, 'column': 12, 'index': 2757}","   95 |         for (let i = 0; i < parse.length; i++) {
   96 |             let group = parse[i];
>  97 |             if (group.type === ""htmlmathml"") {
      |            ^ Conditional Test Logic
   98 |                 expect(group.html).toHaveLength(1);
   99 |                 group = group.html[0];
  100 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 101, 'column': 12, 'index': 2909}","   99 |                 group = group.html[0];
  100 |             }
> 101 |             if (group.type === ""mclass"") {
      |            ^ Conditional Test Logic
  102 |                 expect(group.mclass).toEqual(""mrel"");
  103 |             } else {
  104 |                 expect(group.type).toEqual(""atom"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 134, 'column': 8, 'index': 3925}","  132 |         const parse = getParsed(expression);
  133 |
> 134 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  135 |             const group = parse[i];
  136 |             expect(group.type).toEqual(""atom"");
  137 |             expect(group.family).toEqual(""punct"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 152, 'column': 8, 'index': 4386}","  150 |         const parse = getParsed(expression);
  151 |
> 152 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  153 |             const group = parse[i];
  154 |             expect(group.type).toEqual(""atom"");
  155 |             expect(group.family).toEqual(""open"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 170, 'column': 8, 'index': 4849}","  168 |         const parse = getParsed(expression);
  169 |
> 170 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  171 |             const group = parse[i];
  172 |             expect(group.type).toEqual(""atom"");
  173 |             expect(group.family).toEqual(""close"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1268, 'column': 4, 'index': 40649}","  1266 |     ];
  1267 |
> 1268 |     for (const [actual, expected] of cases) {
       |    ^ Conditional Test Logic
  1269 |         it(`should build ""${actual}"" like ""${expected}""`, () => {
  1270 |             expect(actual).toBuildLike(expected);
  1271 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1417, 'column': 8, 'index': 45895}","  1415 |         ];
  1416 |
> 1417 |         for (let i = 0; i < missingGroups.length; i++) {
       |        ^ Conditional Test Logic
  1418 |             expect(missingGroups[i]).not.toParse();
  1419 |         }
  1420 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1444, 'column': 8, 'index': 46856}","  1442 |         ];
  1443 |
> 1444 |         for (let i = 0; i < badArguments.length; i++) {
       |        ^ Conditional Test Logic
  1445 |             expect(badArguments[i]).not.toParse();
  1446 |         }
  1447 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1462, 'column': 8, 'index': 47422}","  1460 |         ];
  1461 |
> 1462 |         for (let i = 0; i < goodArguments.length; i++) {
       |        ^ Conditional Test Logic
  1463 |             expect(goodArguments[i]).toParse();
  1464 |         }
  1465 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1475, 'column': 8, 'index': 47778}","  1473 |         ];
  1474 |
> 1475 |         for (let i = 0; i < badSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1476 |             expect(badSupSubscripts[i]).not.toParse();
  1477 |         }
  1478 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1488, 'column': 8, 'index': 48157}","  1486 |         ];
  1487 |
> 1488 |         for (let i = 0; i < goodSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1489 |             expect(goodSupSubscripts[i]).toParse();
  1490 |         }
  1491 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1526, 'column': 8, 'index': 49389}","  1524 |         ];
  1525 |
> 1526 |         for (let i = 0; i < badLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1527 |             expect(badLeftArguments[i]).not.toParse();
  1528 |         }
  1529 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1540, 'column': 8, 'index': 49866}","  1538 |         ];
  1539 |
> 1540 |         for (let i = 0; i < goodLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1541 |             expect(goodLeftArguments[i]).toParse();
  1542 |         }
  1543 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 2178, 'column': 8, 'index': 77816}","  2176 |
  2177 |     it(""should throw Error when HTML attribute name is invalid"", function() {
> 2178 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
       |        ^ Conditional Test Logic
  2179 |             try {
  2180 |                 katex.renderToString(
  2181 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 3841, 'column': 4, 'index': 141753}","  3839 | describe(""leqno and fleqn rendering options"", () => {
  3840 |     const expr = r`\tag{hi}x+y`;
> 3841 |     for (const opt of [""leqno"", ""fleqn""]) {
       |    ^ Conditional Test Logic
  3842 |         it(`should not add ${opt} class by default`, () => {
  3843 |             const settings = new Settings({displayMode: true});
  3844 |             const built = katex.__renderToDomTree(expr, settings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4246, 'column': 8, 'index': 158693}","  4244 |         // add eastern arabic numbers to symbols table
  4245 |         // these symbols are ۰۱۲۳۴۵۶۷۸۹ and ٠١٢٣٤٥٦٧٨٩
> 4246 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4247 |             const persianNum = String.fromCharCode(0x0660 + number);
  4248 |             katex.__defineSymbol(
  4249 |                 ""math"", fontName, ""textord"", persianNum, persianNum);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4265, 'column': 8, 'index': 159639}","  4263 |         const mockMetrics = {};
  4264 |         // mock font metrics for the symbols that we added previously
> 4265 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4266 |             mockMetrics[0x0660 + number] = [-0.00244140625, 0.6875, 0, 0];
  4267 |             mockMetrics[0x06F0 + number] = [-0.00244140625, 0.6875, 0, 0];
  4268 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 580, 'column': 8, 'index': 17315}","  578 |         parse = getParsed(simpleOver)[0];
  579 |
> 580 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  581 |         expect(parse.numer).toBeDefined();
  582 |         expect(parse.denom).toBeDefined();
  583 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 580, 'column': 8, 'index': 17315}","  578 |         parse = getParsed(simpleOver)[0];
  579 |
> 580 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  581 |         expect(parse.numer).toBeDefined();
  582 |         expect(parse.denom).toBeDefined();
  583 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 581, 'column': 8, 'index': 17362}","  579 |
  580 |         expect(parse.type).toEqual(""genfrac"");
> 581 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  582 |         expect(parse.denom).toBeDefined();
  583 |
  584 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 581, 'column': 8, 'index': 17362}","  579 |
  580 |         expect(parse.type).toEqual(""genfrac"");
> 581 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  582 |         expect(parse.denom).toBeDefined();
  583 |
  584 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 582, 'column': 8, 'index': 17405}","  580 |         expect(parse.type).toEqual(""genfrac"");
  581 |         expect(parse.numer).toBeDefined();
> 582 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  583 |
  584 |         parse = getParsed(complexOver)[0];
  585 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 582, 'column': 8, 'index': 17405}","  580 |         expect(parse.type).toEqual(""genfrac"");
  581 |         expect(parse.numer).toBeDefined();
> 582 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  583 |
  584 |         parse = getParsed(complexOver)[0];
  585 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 586, 'column': 8, 'index': 17493}","  584 |         parse = getParsed(complexOver)[0];
  585 |
> 586 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  587 |         expect(parse.numer).toBeDefined();
  588 |         expect(parse.denom).toBeDefined();
  589 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 586, 'column': 8, 'index': 17493}","  584 |         parse = getParsed(complexOver)[0];
  585 |
> 586 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  587 |         expect(parse.numer).toBeDefined();
  588 |         expect(parse.denom).toBeDefined();
  589 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 587, 'column': 8, 'index': 17540}","  585 |
  586 |         expect(parse.type).toEqual(""genfrac"");
> 587 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  588 |         expect(parse.denom).toBeDefined();
  589 |
  590 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 587, 'column': 8, 'index': 17540}","  585 |
  586 |         expect(parse.type).toEqual(""genfrac"");
> 587 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  588 |         expect(parse.denom).toBeDefined();
  589 |
  590 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 588, 'column': 8, 'index': 17583}","  586 |         expect(parse.type).toEqual(""genfrac"");
  587 |         expect(parse.numer).toBeDefined();
> 588 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  589 |
  590 |         const parseBraceFrac = getParsed(braceFrac)[0];
  591 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 588, 'column': 8, 'index': 17583}","  586 |         expect(parse.type).toEqual(""genfrac"");
  587 |         expect(parse.numer).toBeDefined();
> 588 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  589 |
  590 |         const parseBraceFrac = getParsed(braceFrac)[0];
  591 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1645, 'column': 8, 'index': 53635}","  1643 |         expect(bbBody).toHaveLength(3);
  1644 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1645 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1646 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1647 |         expect(bbBody[2].type).toEqual(""font"");
  1648 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1645, 'column': 8, 'index': 53635}","  1643 |         expect(bbBody).toHaveLength(3);
  1644 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1645 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1646 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1647 |         expect(bbBody[2].type).toEqual(""font"");
  1648 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1647, 'column': 8, 'index': 53733}","  1645 |         expect(bbBody[2].type).toEqual(""font"");
  1646 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1647 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1648 |     });
  1649 |
  1650 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1647, 'column': 8, 'index': 53733}","  1645 |         expect(bbBody[2].type).toEqual(""font"");
  1646 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1647 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1648 |     });
  1649 |
  1650 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1840, 'column': 8, 'index': 61288}","  1838 |     it(""should render \\text{R\\textit{S}T} with the correct fonts"", function() {
  1839 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
> 1840 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
       |        ^ Duplicate Assert
  1841 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
  1842 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1843 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1841, 'column': 8, 'index': 61355}","  1839 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
  1840 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
> 1841 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
       |        ^ Duplicate Assert
  1842 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1843 |     });
  1844 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1842, 'column': 8, 'index': 61429}","  1840 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
  1841 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
> 1842 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
       |        ^ Duplicate Assert
  1843 |     });
  1844 |
  1845 |     it(""should render \\textbf{R } with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1866, 'column': 8, 'index': 62620}","  1864 |     it(""should render \\textsf{\\textit{R}G\\textbf{B}} with the correct font"", function() {
  1865 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
> 1866 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
       |        ^ Duplicate Assert
  1867 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
  1868 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1869 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1867, 'column': 8, 'index': 62701}","  1865 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
  1866 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
> 1867 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
       |        ^ Duplicate Assert
  1868 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1869 |     });
  1870 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1868, 'column': 8, 'index': 62775}","  1866 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
  1867 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
> 1868 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
       |        ^ Duplicate Assert
  1869 |     });
  1870 |
  1871 |     it(""should render \\textsf{\\textbf{$\\mathrm{A}$}} with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1889, 'column': 8, 'index': 63850}","  1887 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1888 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1889 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1890 |
  1891 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1892 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1889, 'column': 8, 'index': 63850}","  1887 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1888 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1889 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1890 |
  1891 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1892 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1893, 'column': 8, 'index': 64040}","  1891 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1892 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1893 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1894 |     });
  1895 |
  1896 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1893, 'column': 8, 'index': 64040}","  1891 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1892 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1893 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1894 |     });
  1895 |
  1896 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2086, 'column': 8, 'index': 74313}","  2084 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2085 |             ""</mstyle>"";
> 2086 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2087 |
  2088 |         // reverse the order of the commands
  2089 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2086, 'column': 8, 'index': 74313}","  2084 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2085 |             ""</mstyle>"";
> 2086 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2087 |
  2088 |         // reverse the order of the commands
  2089 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2095, 'column': 8, 'index': 74674}","  2093 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2094 |             ""</mstyle>"";
> 2095 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2096 |     });
  2097 |
  2098 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2095, 'column': 8, 'index': 74674}","  2093 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2094 |             ""</mstyle>"";
> 2095 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2096 |     });
  2097 |
  2098 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2109, 'column': 8, 'index': 75235}","  2107 |         const tree = getParsed(tex);
  2108 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
> 2109 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
       |        ^ Duplicate Assert
  2110 |         expect(markup).toContain(
  2111 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2112 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2110, 'column': 8, 'index': 75306}","  2108 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2109 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
> 2110 |         expect(markup).toContain(
       |        ^ Duplicate Assert
  2111 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2112 |     });
  2113 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2207, 'column': 8, 'index': 78869}","  2205 |         const built = getBuilt`+ x`;
  2206 |
> 2207 |         expect(built[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2208 |         expect(built[0].classes).not.toContain(""mbin"");
  2209 |     });
  2210 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2208, 'column': 8, 'index': 78921}","  2206 |
  2207 |         expect(built[0].classes).toContain(""mord"");
> 2208 |         expect(built[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2209 |     });
  2210 |
  2211 |     it(""should create ords after some other objects"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2242, 'column': 8, 'index': 80437}","  2240 |         const markup = katex.renderToString(r`\sigma^2`);
  2241 |         expect(markup.indexOf(""<span"")).toBe(0);
> 2242 |         expect(markup).toContain(""\u03c3"");  // sigma
       |        ^ Duplicate Assert
  2243 |         expect(markup).toContain(""margin-right"");
  2244 |         expect(markup).not.toContain(""marginRight"");
  2245 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2243, 'column': 8, 'index': 80491}","  2241 |         expect(markup.indexOf(""<span"")).toBe(0);
  2242 |         expect(markup).toContain(""\u03c3"");  // sigma
> 2243 |         expect(markup).toContain(""margin-right"");
       |        ^ Duplicate Assert
  2244 |         expect(markup).not.toContain(""marginRight"");
  2245 |     });
  2246 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2244, 'column': 8, 'index': 80541}","  2242 |         expect(markup).toContain(""\u03c3"");  // sigma
  2243 |         expect(markup).toContain(""margin-right"");
> 2244 |         expect(markup).not.toContain(""marginRight"");
       |        ^ Duplicate Assert
  2245 |     });
  2246 |
  2247 |     it(""generates both MathML and HTML"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2250, 'column': 8, 'index': 80708}","  2248 |         const markup = katex.renderToString(""a"");
  2249 |
> 2250 |         expect(markup).toContain(""<span"");
       |        ^ Duplicate Assert
  2251 |         expect(markup).toContain(""<math"");
  2252 |     });
  2253 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2251, 'column': 8, 'index': 80751}","  2249 |
  2250 |         expect(markup).toContain(""<span"");
> 2251 |         expect(markup).toContain(""<math"");
       |        ^ Duplicate Assert
  2252 |     });
  2253 | });
  2254 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2303, 'column': 8, 'index': 82214}","  2301 |     it(""should produce mords"", function() {
  2302 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
> 2303 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2304 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2305 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2306 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2304, 'column': 8, 'index': 82277}","  2302 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
  2303 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
> 2304 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2305 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2306 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2307 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2305, 'column': 8, 'index': 82344}","  2303 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
  2304 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
> 2305 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2306 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2307 |     });
  2308 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2306, 'column': 8, 'index': 82409}","  2304 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2305 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
> 2306 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2307 |     });
  2308 | });
  2309 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2321, 'column': 8, 'index': 82926}","  2319 |     it(""should produce mords"", function() {
  2320 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
> 2321 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2322 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2323 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2324 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2322, 'column': 8, 'index': 82993}","  2320 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
  2321 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
> 2322 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2323 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2324 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2325 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2323, 'column': 8, 'index': 83064}","  2321 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
  2322 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
> 2323 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2324 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2325 |     });
  2326 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2324, 'column': 8, 'index': 83133}","  2322 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2323 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
> 2324 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2325 |     });
  2326 | });
  2327 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2338, 'column': 8, 'index': 83651}","  2336 |     it(""should produce mords"", function() {
  2337 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
> 2338 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2339 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2340 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2341 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2339, 'column': 8, 'index': 83725}","  2337 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
  2338 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
> 2339 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2340 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2341 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2342 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2340, 'column': 8, 'index': 83803}","  2338 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
  2339 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
> 2340 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2341 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2342 |     });
  2343 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2341, 'column': 8, 'index': 83879}","  2339 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2340 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
> 2341 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2342 |     });
  2343 | });
  2344 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2385, 'column': 8, 'index': 85368}","  2383 |     it(""should produce mords"", function() {
  2384 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
> 2385 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2386 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2387 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2388 |         expect(getBuilt`\underrightarrow )^2`[0].classes)",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2386, 'column': 8, 'index': 85443}","  2384 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
  2385 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
> 2386 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2387 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2388 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2389 |             .not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2387, 'column': 8, 'index': 85522}","  2385 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
  2386 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
> 2387 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2388 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2389 |             .not.toContain(""mclose"");
  2390 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2388, 'column': 8, 'index': 85599}","  2386 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2387 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
> 2388 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
       |        ^ Duplicate Assert
  2389 |             .not.toContain(""mclose"");
  2390 |     });
  2391 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2427, 'column': 8, 'index': 86902}","  2425 |         expect(getBuilt`\xrightarrow x`[0].classes).toContain(""mrel"");
  2426 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
> 2427 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2428 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2429 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2430 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2428, 'column': 8, 'index': 86973}","  2426 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
  2427 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
> 2428 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2429 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2430 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2431 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2429, 'column': 8, 'index': 87048}","  2427 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
  2428 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
> 2429 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2430 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2431 |     });
  2432 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2430, 'column': 8, 'index': 87121}","  2428 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2429 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
> 2430 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2431 |     });
  2432 | });
  2433 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2468, 'column': 8, 'index': 88366}","  2466 |         expect(getBuilt`\overbrace x`[0].classes).toContain(""mord"");
  2467 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
> 2468 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2469 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2470 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2471 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2469, 'column': 8, 'index': 88435}","  2467 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
  2468 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
> 2469 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2470 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2471 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2472 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2470, 'column': 8, 'index': 88508}","  2468 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
  2469 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
> 2470 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2471 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2472 |     });
  2473 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2471, 'column': 8, 'index': 88579}","  2469 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2470 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
> 2471 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2472 |     });
  2473 | });
  2474 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2500, 'column': 8, 'index': 89415}","  2498 |     it(""should produce mords"", function() {
  2499 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
> 2500 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2501 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2502 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2503 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2501, 'column': 8, 'index': 89480}","  2499 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
  2500 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
> 2501 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2502 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2503 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2504 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2502, 'column': 8, 'index': 89549}","  2500 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
  2501 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
> 2502 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2503 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2504 |     });
  2505 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2503, 'column': 8, 'index': 89616}","  2501 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2502 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
> 2503 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2504 |     });
  2505 | });
  2506 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2620, 'column': 8, 'index': 93405}","  2618 |     it(""should produce mords"", function() {
  2619 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
> 2620 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2621 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2622 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2623 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2621, 'column': 8, 'index': 93471}","  2619 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
  2620 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
> 2621 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2622 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2623 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2624 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2622, 'column': 8, 'index': 93541}","  2620 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
  2621 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
> 2622 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2623 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2624 |     });
  2625 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2623, 'column': 8, 'index': 93609}","  2621 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2622 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
> 2623 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2624 |     });
  2625 | });
  2626 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3471, 'column': 8, 'index': 126749}","  3469 |     it(""\\char produces literal characters"", () => {
  3470 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3471 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Duplicate Assert
  3472 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3473 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3474 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3472, 'column': 8, 'index': 126800}","  3470 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3471 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3472 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Duplicate Assert
  3473 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3474 |         expect`\char`.not.toParse();
  3475 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3473, 'column': 8, 'index': 126852}","  3471 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3472 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3473 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Duplicate Assert
  3474 |         expect`\char`.not.toParse();
  3475 |         expect(""\\char`"").not.toParse();
  3476 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4105, 'column': 8, 'index': 152974}","  4103 |         const example = exp32 + r`\a{1}`;
  4104 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
> 4105 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4106 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4107 |     });
  4108 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4106, 'column': 8, 'index': 153041}","  4104 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
  4105 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4106 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4107 |     });
  4108 |
  4109 |     it(""should count correctly with Unicode sub/superscripts"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4112, 'column': 8, 'index': 153310}","  4110 |         const example = exp32 + r`\def+{\a{1}}x⁺x⁺x⁺x⁺`;
  4111 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
> 4112 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4113 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4114 |     });
  4115 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4113, 'column': 8, 'index': 153377}","  4111 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
  4112 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4113 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4114 |     });
  4115 | });
  4116 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4155, 'column': 8, 'index': 155024}","  4153 |         // Ensure newlines appear outside base spans (because, in this regexp,
  4154 |         // base span occurs immediately after each newline span).
> 4155 |         expect(markup).toMatch(
       |        ^ Duplicate Assert
  4156 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
  4157 |         expect(markup).toMatchSnapshot();
  4158 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4157, 'column': 8, 'index': 155164}","  4155 |         expect(markup).toMatch(
  4156 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
> 4157 |         expect(markup).toMatchSnapshot();
       |        ^ Duplicate Assert
  4158 |     });
  4159 | });
  4160 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 515, 'column': 27, 'index': 15200}","  513 |
  514 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 515 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Eager Test
  516 |
  517 |         expect(dfracParse.type).toEqual(""genfrac"");
  518 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 521, 'column': 27, 'index': 15408}","  519 |         expect(dfracParse.denom).toBeDefined();
  520 |
> 521 |         const tfracParse = getParsed(tfracExpression)[0];
      |                           ^ Eager Test
  522 |
  523 |         expect(tfracParse.type).toEqual(""genfrac"");
  524 |         expect(tfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 527, 'column': 27, 'index': 15616}","  525 |         expect(tfracParse.denom).toBeDefined();
  526 |
> 527 |         const cfracParse = getParsed(cfracExpression)[0];
      |                           ^ Eager Test
  528 |
  529 |         expect(cfracParse.type).toEqual(""genfrac"");
  530 |         expect(cfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 533, 'column': 29, 'index': 15826}","  531 |         expect(cfracParse.denom).toBeDefined();
  532 |
> 533 |         const genfracParse = getParsed(genfrac1)[0];
      |                             ^ Eager Test
  534 |
  535 |         expect(genfracParse.type).toEqual(""genfrac"");
  536 |         expect(genfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 578, 'column': 16, 'index': 17280}","  576 |         let parse;
  577 |
> 578 |         parse = getParsed(simpleOver)[0];
      |                ^ Eager Test
  579 |
  580 |         expect(parse.type).toEqual(""genfrac"");
  581 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 584, 'column': 16, 'index': 17457}","  582 |         expect(parse.denom).toBeDefined();
  583 |
> 584 |         parse = getParsed(complexOver)[0];
      |                ^ Eager Test
  585 |
  586 |         expect(parse.type).toEqual(""genfrac"");
  587 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 590, 'column': 31, 'index': 17650}","  588 |         expect(parse.denom).toBeDefined();
  589 |
> 590 |         const parseBraceFrac = getParsed(braceFrac)[0];
      |                               ^ Eager Test
  591 |
  592 |         expect(parseBraceFrac.type).toEqual(""genfrac"");
  593 |         expect(parseBraceFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 598, 'column': 31, 'index': 17981}","  596 |         expect(parseBraceFrac.rightDelim).toBeDefined();
  597 |
> 598 |         const parseBrackFrac = getParsed(brackFrac)[0];
      |                               ^ Eager Test
  599 |
  600 |         expect(parseBrackFrac.type).toEqual(""genfrac"");
  601 |         expect(parseBrackFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 875, 'column': 23, 'index': 27942}","  873 |
  874 |     it(""should correctly extract the custom color"", function() {
> 875 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Eager Test
  876 |         const parse2 = getParsed(customColorExpression2)[0];
  877 |         const parse3 = getParsed(customColorExpression3)[0];
  878 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 876, 'column': 23, 'index': 28003}","  874 |     it(""should correctly extract the custom color"", function() {
  875 |         const parse1 = getParsed(customColorExpression1)[0];
> 876 |         const parse2 = getParsed(customColorExpression2)[0];
      |                       ^ Eager Test
  877 |         const parse3 = getParsed(customColorExpression3)[0];
  878 |
  879 |         expect(parse1.color).toEqual(""#fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 877, 'column': 23, 'index': 28064}","  875 |         const parse1 = getParsed(customColorExpression1)[0];
  876 |         const parse2 = getParsed(customColorExpression2)[0];
> 877 |         const parse3 = getParsed(customColorExpression3)[0];
      |                       ^ Eager Test
  878 |
  879 |         expect(parse1.color).toEqual(""#fA6"");
  880 |         expect(parse2.color).toEqual(""#fA6fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 975, 'column': 26, 'index': 31014}","  973 |
  974 |     it(""should produce the correct direction delimiter"", function() {
> 975 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Eager Test
  976 |         const rightParse = getParsed(bigDelim)[0];
  977 |
  978 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 976, 'column': 27, 'index': 31068}","  974 |     it(""should produce the correct direction delimiter"", function() {
  975 |         const leftParse = getParsed(normalDelim)[0];
> 976 |         const rightParse = getParsed(bigDelim)[0];
      |                           ^ Eager Test
  977 |
  978 |         expect(leftParse.mclass).toEqual(""mopen"");
  979 |         expect(rightParse.mclass).toEqual(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 983, 'column': 27, 'index': 31296}","  981 |
  982 |     it(""should parse the correct size delimiter"", function() {
> 983 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Eager Test
  984 |         const bigParse = getParsed(bigDelim)[0];
  985 |
  986 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 984, 'column': 25, 'index': 31348}","  982 |     it(""should parse the correct size delimiter"", function() {
  983 |         const smallParse = getParsed(normalDelim)[0];
> 984 |         const bigParse = getParsed(bigDelim)[0];
      |                         ^ Eager Test
  985 |
  986 |         expect(smallParse.size).toEqual(1);
  987 |         expect(bigParse.size).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1064, 'column': 24, 'index': 33714}","  1062 |
  1063 |     it(""should list the correct units"", function() {
> 1064 |         const emParse = getParsed(emRule)[0];
       |                        ^ Eager Test
  1065 |         const exParse = getParsed(exRule)[0];
  1066 |
  1067 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1065, 'column': 24, 'index': 33760}","  1063 |     it(""should list the correct units"", function() {
  1064 |         const emParse = getParsed(emRule)[0];
> 1065 |         const exParse = getParsed(exRule)[0];
       |                        ^ Eager Test
  1066 |
  1067 |         expect(emParse.width.unit).toEqual(""em"");
  1068 |         expect(emParse.height.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1102, 'column': 24, 'index': 34930}","  1100 |
  1101 |     it(""should list the correct units"", function() {
> 1102 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1103 |         const exParse = getParsed(exKern)[0];
  1104 |         const muParse = getParsed(muKern)[0];
  1105 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1103, 'column': 24, 'index': 34976}","  1101 |     it(""should list the correct units"", function() {
  1102 |         const emParse = getParsed(emKern)[0];
> 1103 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1104 |         const muParse = getParsed(muKern)[0];
  1105 |         const abParse = getParsed(abKern)[1];
  1106 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1104, 'column': 24, 'index': 35022}","  1102 |         const emParse = getParsed(emKern)[0];
  1103 |         const exParse = getParsed(exKern)[0];
> 1104 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1105 |         const abParse = getParsed(abKern)[1];
  1106 |
  1107 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1105, 'column': 24, 'index': 35068}","  1103 |         const exParse = getParsed(exKern)[0];
  1104 |         const muParse = getParsed(muKern)[0];
> 1105 |         const abParse = getParsed(abKern)[1];
       |                        ^ Eager Test
  1106 |
  1107 |         expect(emParse.dimension.unit).toEqual(""em"");
  1108 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1140, 'column': 24, 'index': 36213}","  1138 |
  1139 |     it(""should list the correct units"", function() {
> 1140 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1141 |         const exParse = getParsed(exKern)[0];
  1142 |         const muParse = getParsed(muKern)[0];
  1143 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1141, 'column': 24, 'index': 36259}","  1139 |     it(""should list the correct units"", function() {
  1140 |         const emParse = getParsed(emKern)[0];
> 1141 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1142 |         const muParse = getParsed(muKern)[0];
  1143 |         const abParse1 = getParsed(abKern1)[1];
  1144 |         const abParse2 = getParsed(abKern2)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1142, 'column': 24, 'index': 36305}","  1140 |         const emParse = getParsed(emKern)[0];
  1141 |         const exParse = getParsed(exKern)[0];
> 1142 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1143 |         const abParse1 = getParsed(abKern1)[1];
  1144 |         const abParse2 = getParsed(abKern2)[1];
  1145 |         const abParse3 = getParsed(abKern3)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1143, 'column': 25, 'index': 36352}","  1141 |         const exParse = getParsed(exKern)[0];
  1142 |         const muParse = getParsed(muKern)[0];
> 1143 |         const abParse1 = getParsed(abKern1)[1];
       |                         ^ Eager Test
  1144 |         const abParse2 = getParsed(abKern2)[1];
  1145 |         const abParse3 = getParsed(abKern3)[1];
  1146 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1144, 'column': 25, 'index': 36400}","  1142 |         const muParse = getParsed(muKern)[0];
  1143 |         const abParse1 = getParsed(abKern1)[1];
> 1144 |         const abParse2 = getParsed(abKern2)[1];
       |                         ^ Eager Test
  1145 |         const abParse3 = getParsed(abKern3)[1];
  1146 |
  1147 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1145, 'column': 25, 'index': 36448}","  1143 |         const abParse1 = getParsed(abKern1)[1];
  1144 |         const abParse2 = getParsed(abKern2)[1];
> 1145 |         const abParse3 = getParsed(abKern3)[1];
       |                         ^ Eager Test
  1146 |
  1147 |         expect(emParse.dimension.unit).toEqual(""em"");
  1148 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1156, 'column': 25, 'index': 36903}","  1154 |
  1155 |     it(""should parse elements on either side of a kern"", function() {
> 1156 |         const abParse1 = getParsed(abKern1);
       |                         ^ Eager Test
  1157 |         const abParse2 = getParsed(abKern2);
  1158 |         const abParse3 = getParsed(abKern3);
  1159 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1157, 'column': 25, 'index': 36948}","  1155 |     it(""should parse elements on either side of a kern"", function() {
  1156 |         const abParse1 = getParsed(abKern1);
> 1157 |         const abParse2 = getParsed(abKern2);
       |                         ^ Eager Test
  1158 |         const abParse3 = getParsed(abKern3);
  1159 |
  1160 |         expect(abParse1).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1158, 'column': 25, 'index': 36993}","  1156 |         const abParse1 = getParsed(abKern1);
  1157 |         const abParse2 = getParsed(abKern2);
> 1158 |         const abParse3 = getParsed(abKern3);
       |                         ^ Eager Test
  1159 |
  1160 |         expect(abParse1).toHaveLength(3);
  1161 |         expect(abParse1[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2081, 'column': 19, 'index': 74084}","  2079 |     it(""should render a combination of font and color changes"", function() {
  2080 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2081 |         let tree = getParsed(tex);
       |                   ^ Eager Test
  2082 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2083 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2084 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2090, 'column': 15, 'index': 74453}","  2088 |         // reverse the order of the commands
  2089 |         tex = r`\mathbb{\textcolor{blue}{R}}`;
> 2090 |         tree = getParsed(tex);
       |               ^ Eager Test
  2091 |         markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2092 |         node = ""<mstyle mathcolor=\""blue\"">"" +
  2093 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2998, 'column': 24, 'index': 108308}","  2996 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2997 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2998 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  2999 |         expect(parsed1.href).toBe(url);
  3000 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3001 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3000, 'column': 24, 'index': 108428}","  2998 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  2999 |         expect(parsed1.href).toBe(url);
> 3000 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3001 |         expect(parsed2.href).toBe(url);
  3002 |     });
  3003 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3006, 'column': 24, 'index': 108658}","  3004 |     it(""should allow balanced braces in url"", function() {
  3005 |         const url = ""http://example.org/{{}t{oo}}"";
> 3006 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3007 |         expect(parsed1.href).toBe(url);
  3008 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3009 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3008, 'column': 24, 'index': 108778}","  3006 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  3007 |         expect(parsed1.href).toBe(url);
> 3008 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3009 |         expect(parsed2.href).toBe(url);
  3010 |     });
  3011 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3022, 'column': 24, 'index': 109432}","  3020 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3021 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3022 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3023 |         expect(parsed1.href).toBe(url);
  3024 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3025 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3024, 'column': 24, 'index': 109554}","  3022 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
  3023 |         expect(parsed1.href).toBe(url);
> 3024 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
       |                        ^ Eager Test
  3025 |         expect(parsed2.href).toBe(url);
  3026 |     });
  3027 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2179, 'column': 12, 'index': 77895}","  2177 |     it(""should throw Error when HTML attribute name is invalid"", function() {
  2178 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
> 2179 |             try {
       |            ^ Exception Handling
  2180 |                 katex.renderToString(
  2181 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);
  2182 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2744, 'column': 8, 'index': 97526}","  2742 | describe(""A parser error"", function() {
  2743 |     it(""should report the position of an error"", function() {
> 2744 |         try {
       |        ^ Exception Handling
  2745 |             parseTree(r`\sqrt}`, new Settings());
  2746 |         } catch (e) {
  2747 |             expect(e.position).toEqual(5);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3163, 'column': 8, 'index': 114991}","  3161 | describe(""ParseError properties"", function() {
  3162 |     it(""should contain affected position and length information"", function() {
> 3163 |         try {
       |        ^ Exception Handling
  3164 |             katex.renderToString(""1 + \\fraq{}{}"");
  3165 |
  3166 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3178, 'column': 8, 'index': 115654}","  3176 |
  3177 |     it(""should contain position and length information at end of input"", function() {
> 3178 |         try {
       |        ^ Exception Handling
  3179 |             katex.renderToString(""\\frac{}"");
  3180 |
  3181 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3193, 'column': 8, 'index': 116350}","  3191 |
  3192 |     it(""should contain no position and length information if unavailable"", function() {
> 3193 |         try {
       |        ^ Exception Handling
  3194 |             katex.renderToString(""\\verb|hello\nworld|"");
  3195 |
  3196 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 44, 'column': 22, 'index': 1233}","  42 |
  43 |     it(""should build ords with correct type"", function() {
> 44 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  45 |         parse.forEach(group => {
  46 |             expect(group.type).toBe(""ord"");
  47 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 51, 'column': 22, 'index': 1438}","  49 |
  50 |     it(""should build ords with correct content"", function() {
> 51 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  52 |         const expectedChars = expression.split('');
  53 |         parse.forEach((group, i) => {
  54 |             expect(group.text).toBe(expectedChars[i]);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 59, 'column': 22, 'index': 1710}","  57 |
  58 |     it(""should parse the right number of ords"", function() {
> 59 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  60 |
  61 |         expect(parse).toHaveLength(expression.length);
  62 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 73, 'column': 22, 'index': 2043}","  71 |
  72 |     it(""should build a list of bins"", function() {
> 73 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  74 |
  75 |         for (let i = 0; i < parse.length; i++) {
  76 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 93, 'column': 22, 'index': 2638}","  91 |
  92 |     it(""should build a list of rels"", function() {
> 93 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  94 |
  95 |         for (let i = 0; i < parse.length; i++) {
  96 |             let group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 119, 'column': 32, 'index': 3539}","  117 |     it(""should return one group, not a fragment"", function() {
  118 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
> 119 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
      |                                ^ Lazy Test
  120 |         expect(mml.children.length).toEqual(1);
  121 |     });
  122 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 132, 'column': 22, 'index': 3893}","  130 |
  131 |     it(""should build a list of puncts"", function() {
> 132 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  133 |
  134 |         for (let i = 0; i < parse.length; i++) {
  135 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 150, 'column': 22, 'index': 4354}","  148 |
  149 |     it(""should build a list of opens"", function() {
> 150 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  151 |
  152 |         for (let i = 0; i < parse.length; i++) {
  153 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 168, 'column': 22, 'index': 4817}","  166 |
  167 |     it(""should build a list of closes"", function() {
> 168 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  169 |
  170 |         for (let i = 0; i < parse.length; i++) {
  171 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 499, 'column': 22, 'index': 14642}","  497 |
  498 |     it(""should produce a frac"", function() {
> 499 |         const parse = getParsed(expression)[0];
      |                      ^ Lazy Test
  500 |
  501 |         expect(parse.type).toEqual(""genfrac"");
  502 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 515, 'column': 27, 'index': 15200}","  513 |
  514 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 515 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Lazy Test
  516 |
  517 |         expect(dfracParse.type).toEqual(""genfrac"");
  518 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 578, 'column': 16, 'index': 17280}","  576 |         let parse;
  577 |
> 578 |         parse = getParsed(simpleOver)[0];
      |                ^ Lazy Test
  579 |
  580 |         expect(parse.type).toEqual(""genfrac"");
  581 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 608, 'column': 22, 'index': 18389}","  606 |
  607 |     it(""should create a numerator from the atoms before \\over"", function() {
> 608 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  609 |
  610 |         const numer = parse.numer;
  611 |         expect(numer.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 615, 'column': 22, 'index': 18606}","  613 |
  614 |     it(""should create a denominator from the atoms after \\over"", function() {
> 615 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  616 |
  617 |         const denom = parse.denom;
  618 |         expect(denom.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 623, 'column': 22, 'index': 18841}","  621 |     it(""should handle empty numerators"", function() {
  622 |         const emptyNumerator = r`\over x`;
> 623 |         const parse = getParsed(emptyNumerator)[0];
      |                      ^ Lazy Test
  624 |         expect(parse.type).toEqual(""genfrac"");
  625 |         expect(parse.numer).toBeDefined();
  626 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 631, 'column': 22, 'index': 19136}","  629 |     it(""should handle empty denominators"", function() {
  630 |         const emptyDenominator = r`1 \over`;
> 631 |         const parse = getParsed(emptyDenominator)[0];
      |                      ^ Lazy Test
  632 |         expect(parse.type).toEqual(""genfrac"");
  633 |         expect(parse.numer).toBeDefined();
  634 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 639, 'column': 22, 'index': 19461}","  637 |     it(""should handle \\displaystyle correctly"", function() {
  638 |         const displaystyleExpression = r`\displaystyle 1 \over 2`;
> 639 |         const parse = getParsed(displaystyleExpression)[0];
      |                      ^ Lazy Test
  640 |         expect(parse.type).toEqual(""genfrac"");
  641 |         expect(parse.numer.body[0].type).toEqual(""styling"");
  642 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 652, 'column': 22, 'index': 20013}","  650 |     it(""should handle nested factions"", function() {
  651 |         const nestedOverExpression = r`{1 \over 2} \over 3`;
> 652 |         const parse = getParsed(nestedOverExpression)[0];
      |                      ^ Lazy Test
  653 |         expect(parse.type).toEqual(""genfrac"");
  654 |         expect(parse.numer.body[0].type).toEqual(""genfrac"");
  655 |         expect(parse.numer.body[0].numer.body[0].text).toEqual(""1"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 701, 'column': 22, 'index': 21723}","  699 |
  700 |     it(""should produce a sizing node"", function() {
> 701 |         const parse = getParsed(sizeExpression)[0];
      |                      ^ Lazy Test
  702 |
  703 |         expect(parse.type).toEqual(""sizing"");
  704 |         expect(parse.size).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 725, 'column': 22, 'index': 22532}","  723 |
  724 |     it(""should produce a text"", function() {
> 725 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  726 |
  727 |         expect(parse.type).toEqual(""text"");
  728 |         expect(parse.body).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 732, 'column': 22, 'index': 22747}","  730 |
  731 |     it(""should produce textords instead of mathords"", function() {
> 732 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  733 |         const group = parse.body;
  734 |
  735 |         expect(group[0].type).toEqual(""textord"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 755, 'column': 22, 'index': 23410}","  753 |
  754 |     it(""should contract spaces"", function() {
> 755 |         const parse = getParsed(spaceTextExpression)[0];
      |                      ^ Lazy Test
  756 |         const group = parse.body;
  757 |
  758 |         expect(group.length).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 774, 'column': 22, 'index': 24086}","  772 |
  773 |     it(""should ignore a space before the text group"", function() {
> 774 |         const parse = getParsed(leadingSpaceTextExpression)[0];
      |                      ^ Lazy Test
  775 |         // [m, o, o]
  776 |         expect(parse.body).toHaveLength(3);
  777 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 861, 'column': 22, 'index': 27473}","  859 |
  860 |     it(""should build a color node"", function() {
> 861 |         const parse = getParsed(colorExpression)[0];
      |                      ^ Lazy Test
  862 |
  863 |         expect(parse.type).toEqual(""color"");
  864 |         expect(parse.color).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 875, 'column': 23, 'index': 27942}","  873 |
  874 |     it(""should correctly extract the custom color"", function() {
> 875 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Lazy Test
  876 |         const parse2 = getParsed(customColorExpression2)[0];
  877 |         const parse3 = getParsed(customColorExpression3)[0];
  878 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 934, 'column': 22, 'index': 29868}","  932 |
  933 |     it(""should produce spacing in math mode"", function() {
> 934 |         const parse = getParsed(mathTie);
      |                      ^ Lazy Test
  935 |
  936 |         expect(parse[1].type).toEqual(""spacing"");
  937 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 940, 'column': 21, 'index': 30028}","  938 |
  939 |     it(""should produce spacing in text mode"", function() {
> 940 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  941 |         const parse = text.body;
  942 |
  943 |         expect(parse[1].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 947, 'column': 21, 'index': 30233}","  945 |
  946 |     it(""should not contract with spaces in text mode"", function() {
> 947 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  948 |         const parse = text.body;
  949 |
  950 |         expect(parse[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 969, 'column': 22, 'index': 30830}","  967 |
  968 |     it(""should produce a delimsizing"", function() {
> 969 |         const parse = getParsed(normalDelim)[0];
      |                      ^ Lazy Test
  970 |
  971 |         expect(parse.type).toEqual(""delimsizing"");
  972 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 975, 'column': 26, 'index': 31014}","  973 |
  974 |     it(""should produce the correct direction delimiter"", function() {
> 975 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Lazy Test
  976 |         const rightParse = getParsed(bigDelim)[0];
  977 |
  978 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 983, 'column': 27, 'index': 31296}","  981 |
  982 |     it(""should parse the correct size delimiter"", function() {
> 983 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Lazy Test
  984 |         const bigParse = getParsed(bigDelim)[0];
  985 |
  986 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 999, 'column': 22, 'index': 31711}","   997 |
   998 |     it(""should produce an overline"", function() {
>  999 |         const parse = getParsed(overline)[0];
       |                      ^ Lazy Test
  1000 |
  1001 |         expect(parse.type).toEqual(""overline"");
  1002 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1058, 'column': 22, 'index': 33561}","  1056 |
  1057 |     it(""should produce a rule"", function() {
> 1058 |         const parse = getParsed(emRule)[0];
       |                      ^ Lazy Test
  1059 |
  1060 |         expect(parse.type).toEqual(""rule"");
  1061 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1064, 'column': 24, 'index': 33714}","  1062 |
  1063 |     it(""should list the correct units"", function() {
> 1064 |         const emParse = getParsed(emRule)[0];
       |                        ^ Lazy Test
  1065 |         const exParse = getParsed(exRule)[0];
  1066 |
  1067 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1075, 'column': 32, 'index': 34084}","  1073 |
  1074 |     it(""should parse the number correctly"", function() {
> 1075 |         const hardNumberParse = getParsed(hardNumberRule)[0];
       |                                ^ Lazy Test
  1076 |
  1077 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
  1078 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1102, 'column': 24, 'index': 34930}","  1100 |
  1101 |     it(""should list the correct units"", function() {
> 1102 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1103 |         const exParse = getParsed(exKern)[0];
  1104 |         const muParse = getParsed(muKern)[0];
  1105 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1140, 'column': 24, 'index': 36213}","  1138 |
  1139 |     it(""should list the correct units"", function() {
> 1140 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1141 |         const exParse = getParsed(exKern)[0];
  1142 |         const muParse = getParsed(muKern)[0];
  1143 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1156, 'column': 25, 'index': 36903}","  1154 |
  1155 |     it(""should parse elements on either side of a kern"", function() {
> 1156 |         const abParse1 = getParsed(abKern1);
       |                         ^ Lazy Test
  1157 |         const abParse2 = getParsed(abKern2);
  1158 |         const abParse3 = getParsed(abKern3);
  1159 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1187, 'column': 24, 'index': 37978}","  1185 |
  1186 |     it(""should handle whitespace"", function() {
> 1187 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
       |                        ^ Lazy Test
  1188 |
  1189 |         expect(abParse).toHaveLength(3);
  1190 |         expect(abParse[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1205, 'column': 22, 'index': 38545}","  1203 |
  1204 |     it(""should produce a leftright"", function() {
> 1205 |         const parse = getParsed(normalLeftRight)[0];
       |                      ^ Lazy Test
  1206 |
  1207 |         expect(parse.type).toEqual(""leftright"");
  1208 |         expect(parse.left).toEqual(""("");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1382, 'column': 22, 'index': 44910}","  1380 |
  1381 |     it(""should produce sqrts"", function() {
> 1382 |         const parse = getParsed(sqrt)[0];
       |                      ^ Lazy Test
  1383 |
  1384 |         expect(parse.type).toEqual(""sqrt"");
  1385 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1581, 'column': 22, 'index': 51330}","  1579 |     it(""should only change the style within its group"", function() {
  1580 |         const text = r`a b { c d \displaystyle e f } g h`;
> 1581 |         const parse = getParsed(text);
       |                      ^ Lazy Test
  1582 |
  1583 |         const displayNode = parse[2].body[2];
  1584 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2081, 'column': 19, 'index': 74084}","  2079 |     it(""should render a combination of font and color changes"", function() {
  2080 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2081 |         let tree = getParsed(tex);
       |                   ^ Lazy Test
  2082 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2083 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2084 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2100, 'column': 21, 'index': 74825}","  2098 |     it(""should render text as <mtext>"", function() {
  2099 |         const tex = r`\text{for }`;
> 2100 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2101 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2102 |         expect(markup).toContain(""<mtext>for\u00a0</mtext>"");
  2103 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2107, 'column': 21, 'index': 75137}","  2105 |     it(""should render math within text as side-by-side children"", function() {
  2106 |         const tex = r`\text{graph: $y = mx + b$}`;
> 2107 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2108 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2109 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
  2110 |         expect(markup).toContain(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2122, 'column': 15, 'index': 75797}","  2120 |
  2121 |     it(""should produce mords"", function() {
> 2122 |         expect(getBuilt(img, trustSettings)[0].classes).toContain(""mord"");
       |               ^ Lazy Test
  2123 |     });
  2124 |
  2125 |     it(""should not render without trust setting"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2126, 'column': 22, 'index': 75951}","  2124 |
  2125 |     it(""should not render without trust setting"", function() {
> 2126 |         const built = getBuilt(img);
       |                      ^ Lazy Test
  2127 |         expect(built).toMatchSnapshot();
  2128 |     });
  2129 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2131, 'column': 22, 'index': 76094}","  2129 |
  2130 |     it(""should render with trust setting"", function() {
> 2131 |         const built = getBuilt(img, trustSettings);
       |                      ^ Lazy Test
  2132 |         expect(built).toMatchSnapshot();
  2133 |     });
  2134 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2157, 'column': 22, 'index': 77040}","  2155 |
  2156 |     it(""should set HTML attributes"", function() {
> 2157 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2158 |         expect(built[0].attributes.id).toMatch(""bar"");
  2159 |         expect(built[1].classes).toContain(""foo"");
  2160 |         expect(built[2].attributes.style).toMatch(""color: red"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2168, 'column': 22, 'index': 77447}","  2166 |
  2167 |     it(""should not affect spacing"", function() {
> 2168 |         const built = getBuilt(""\\htmlId{a}{x+}y"", trustNonStrictSettings);
       |                      ^ Lazy Test
  2169 |         expect(built).toMatchSnapshot();
  2170 |     });
  2171 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2173, 'column': 22, 'index': 77640}","  2171 |
  2172 |     it(""should render with trust and strict setting"", function() {
> 2173 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2174 |         expect(built).toMatchSnapshot();
  2175 |     });
  2176 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2348, 'column': 21, 'index': 84142}","  2346 |     it(""should properly render stretchy accents"", function() {
  2347 |         const tex = `\\widetilde{ABCD}`;
> 2348 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2349 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2350 |         expect(markup).toContain('<mo stretchy=""true"">~</mo>');
  2351 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2998, 'column': 24, 'index': 108308}","  2996 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2997 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2998 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  2999 |         expect(parsed1.href).toBe(url);
  3000 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3001 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3006, 'column': 24, 'index': 108658}","  3004 |     it(""should allow balanced braces in url"", function() {
  3005 |         const url = ""http://example.org/{{}t{oo}}"";
> 3006 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3007 |         expect(parsed1.href).toBe(url);
  3008 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3009 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3022, 'column': 24, 'index': 109432}","  3020 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3021 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3022 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3023 |         expect(parsed1.href).toBe(url);
  3024 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3025 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3038, 'column': 22, 'index': 110097}","  3036 |
  3037 |     it(""should not affect spacing around"", function() {
> 3038 |         const built = getBuilt(""a\\href{http://example.com/}{+b}"", trustSettings);
       |                      ^ Lazy Test
  3039 |         expect(built).toMatchSnapshot();
  3040 |     });
  3041 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3048, 'column': 23, 'index': 110471}","  3046 |
  3047 |     it(""should allow explicitly allowed protocols"", () => {
> 3048 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3049 |             ""\\href{ftp://x}{foo}"",
  3050 |             new Settings({trust: (context) => context.protocol === ""ftp""}),
  3051 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3056, 'column': 23, 'index': 110750}","  3054 |
  3055 |     it(""should allow all protocols when trust option is true"", () => {
> 3056 |         const parsed = getParsed(""\\href{ftp://x}{foo}"", trustSettings);
       |                       ^ Lazy Test
  3057 |         expect(parsed).toMatchSnapshot();
  3058 |     });
  3059 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3061, 'column': 23, 'index': 110941}","  3059 |
  3060 |     it(""should not allow explicitly disallowed protocols"", () => {
> 3061 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3062 |             ""\\href{javascript:alert('x')}{foo}"",
  3063 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3064 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3069, 'column': 23, 'index': 111246}","  3067 |
  3068 |     it(""should not allow explicitly uppercased disallowed protocols"", () => {
> 3069 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3070 |             ""\\href{JavaScript:alert('x')}{foo}"",
  3071 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3072 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3145, 'column': 28, 'index': 114327}","  3143 |
  3144 |     it(""should produce color nodes with a color value given by errorColor"", function() {
> 3145 |         const parsedInput = getParsed(r`\error`, noThrowSettings);
       |                            ^ Lazy Test
  3146 |         expect(parsedInput[0].type).toBe(""color"");
  3147 |         expect(parsedInput[0].color).toBe(errorColor);
  3148 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3151, 'column': 22, 'index': 114586}","  3149 |
  3150 |     it(""should build katex-error span for other type of KaTeX error"", function() {
> 3151 |         const built = getBuilt(`2^2^2`, noThrowSettings);
       |                      ^ Lazy Test
  3152 |         expect(built).toMatchSnapshot();
  3153 |     });
  3154 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3486, 'column': 27, 'index': 127344}","  3484 |         const parsedBare = getParsed`~`;
  3485 |         expect(parsedBare[0].type).toEqual(""spacing"");
> 3486 |         const parsedChar = getParsed(""\\char`\\~"");
       |                           ^ Lazy Test
  3487 |         expect(parsedChar[0].type).toEqual(""textord"");
  3488 |     });
  3489 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4058, 'column': 22, 'index': 151305}","  4056 |
  4057 |     it(""should clamp size when set"", function() {
> 4058 |         const built = getBuilt(rule, new Settings({maxSize: 5}))[0];
       |                      ^ Lazy Test
  4059 |         expect(built.style.borderRightWidth).toEqual(""5em"");
  4060 |         expect(built.style.borderTopWidth).toEqual(""5em"");
  4061 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4064, 'column': 22, 'index': 151561}","  4062 |
  4063 |     it(""should not clamp size when not set"", function() {
> 4064 |         const built = getBuilt(rule)[0];
       |                      ^ Lazy Test
  4065 |         expect(built.style.borderRightWidth).toEqual(""999em"");
  4066 |         expect(built.style.borderTopWidth).toEqual(""999em"");
  4067 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4070, 'column': 22, 'index': 151819}","  4068 |
  4069 |     it(""should make zero-width rules if a negative maxSize is passed"", function() {
> 4070 |         const built = getBuilt(rule, new Settings({maxSize: -5}))[0];
       |                      ^ Lazy Test
  4071 |         expect(built.style.borderRightWidth).toEqual(""0em"");
  4072 |         expect(built.style.borderTopWidth).toEqual(""0em"");
  4073 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 98, 'column': 48, 'index': 2840}","   96 |             let group = parse[i];
   97 |             if (group.type === ""htmlmathml"") {
>  98 |                 expect(group.html).toHaveLength(1);
      |                                                ^ Magic Number
   99 |                 group = group.html[0];
  100 |             }
  101 |             if (group.type === ""mclass"") {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 120, 'column': 44, 'index': 3631}","  118 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
  119 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
> 120 |         expect(mml.children.length).toEqual(1);
      |                                            ^ Magic Number
  121 |     });
  122 | });
  123 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 352, 'column': 35, 'index': 10301}","  350 |         const parse = getParsed`{xy}`;
  351 |
> 352 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  353 |
  354 |         const ord = parse[0];
  355 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 374, 'column': 35, 'index': 10903}","  372 |         const parse = getParsed`\begingroup xy \endgroup`;
  373 |
> 374 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  375 |
  376 |         const ord = parse[0];
  377 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 397, 'column': 35, 'index': 11530}","  395 |         const parse = getParsed`\Large abc`;
  396 |
> 397 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  398 |
  399 |         const sizing = parse[0];
  400 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 409, 'column': 35, 'index': 11853}","  407 |         const parse = getParsed`a \Large abc`;
  408 |
> 409 |         expect(parse).toHaveLength(2);
      |                                   ^ Magic Number
  410 |
  411 |         const sizing = parse[1];
  412 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 414, 'column': 41, 'index': 11980}","  412 |
  413 |         expect(sizing.type).toEqual(""sizing"");
> 414 |         expect(sizing.body).toHaveLength(3);
      |                                         ^ Magic Number
  415 |     });
  416 |
  417 |     it(""should stop at the ends of groups"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 424, 'column': 41, 'index': 12263}","  422 |
  423 |         expect(sizing.type).toEqual(""sizing"");
> 424 |         expect(sizing.body).toHaveLength(1);
      |                                         ^ Magic Number
  425 |     });
  426 |
  427 |     describe(""within optional groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 611, 'column': 40, 'index': 18492}","  609 |
  610 |         const numer = parse.numer;
> 611 |         expect(numer.body).toHaveLength(4);
      |                                        ^ Magic Number
  612 |     });
  613 |
  614 |     it(""should create a denominator from the atoms after \\over"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 618, 'column': 40, 'index': 18709}","  616 |
  617 |         const denom = parse.denom;
> 618 |         expect(denom.body).toHaveLength(4);
      |                                        ^ Magic Number
  619 |     });
  620 |
  621 |     it(""should handle empty numerators"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 758, 'column': 37, 'index': 23517}","  756 |         const group = parse.body;
  757 |
> 758 |         expect(group.length).toEqual(4);
      |                                     ^ Magic Number
  759 |         expect(group[0].type).toEqual(""spacing"");
  760 |         expect(group[1].type).toEqual(""textord"");
  761 |         expect(group[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 776, 'column': 40, 'index': 24189}","  774 |         const parse = getParsed(leadingSpaceTextExpression)[0];
  775 |         // [m, o, o]
> 776 |         expect(parse.body).toHaveLength(3);
      |                                        ^ Magic Number
  777 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");
  778 |     });
  779 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 986, 'column': 40, 'index': 31413}","  984 |         const bigParse = getParsed(bigDelim)[0];
  985 |
> 986 |         expect(smallParse.size).toEqual(1);
      |                                        ^ Magic Number
  987 |         expect(bigParse.size).toEqual(4);
  988 |     });
  989 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 987, 'column': 38, 'index': 31455}","  985 |
  986 |         expect(smallParse.size).toEqual(1);
> 987 |         expect(bigParse.size).toEqual(4);
      |                                      ^ Magic Number
  988 |     });
  989 | });
  990 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1077, 'column': 57, 'index': 34172}","  1075 |         const hardNumberParse = getParsed(hardNumberRule)[0];
  1076 |
> 1077 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
       |                                                         ^ Magic Number
  1078 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
  1079 |     });
  1080 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1078, 'column': 58, 'index': 34237}","  1076 |
  1077 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
> 1078 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
       |                                                          ^ Magic Number
  1079 |     });
  1080 |
  1081 |     it(""should parse negative sizes"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1125, 'column': 51, 'index': 35782}","  1123 |     it(""should parse positive sizes"", function() {
  1124 |         const parse = getParsed`\kern{+1em}`[0];
> 1125 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1126 |     });
  1127 | });
  1128 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1160, 'column': 38, 'index': 37052}","  1158 |         const abParse3 = getParsed(abKern3);
  1159 |
> 1160 |         expect(abParse1).toHaveLength(3);
       |                                      ^ Magic Number
  1161 |         expect(abParse1[0].text).toEqual(""a"");
  1162 |         expect(abParse1[2].text).toEqual(""b"");
  1163 |         expect(abParse2).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1163, 'column': 38, 'index': 37188}","  1161 |         expect(abParse1[0].text).toEqual(""a"");
  1162 |         expect(abParse1[2].text).toEqual(""b"");
> 1163 |         expect(abParse2).toHaveLength(3);
       |                                      ^ Magic Number
  1164 |         expect(abParse2[0].text).toEqual(""a"");
  1165 |         expect(abParse2[2].text).toEqual(""b"");
  1166 |         expect(abParse3).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1166, 'column': 38, 'index': 37324}","  1164 |         expect(abParse2[0].text).toEqual(""a"");
  1165 |         expect(abParse2[2].text).toEqual(""b"");
> 1166 |         expect(abParse3).toHaveLength(3);
       |                                      ^ Magic Number
  1167 |         expect(abParse3[0].text).toEqual(""a"");
  1168 |         expect(abParse3[2].text).toEqual(""b"");
  1169 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1183, 'column': 51, 'index': 37893}","  1181 |     it(""should parse positive sizes"", function() {
  1182 |         const parse = getParsed`\kern+1em`[0];
> 1183 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1184 |     });
  1185 |
  1186 |     it(""should handle whitespace"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1189, 'column': 37, 'index': 38055}","  1187 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
  1188 |
> 1189 |         expect(abParse).toHaveLength(3);
       |                                     ^ Magic Number
  1190 |         expect(abParse[0].text).toEqual(""a"");
  1191 |         expect(abParse[1].dimension.unit).toEqual(""mu"");
  1192 |         expect(abParse[2].text).toEqual(""b"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1342, 'column': 37, 'index': 43351}","  1340 |     it(""should eat a final newline"", function() {
  1341 |         const m3 = getParsed`\begin{matrix}a&b\\ c&d \\ \end{matrix}`[0];
> 1342 |         expect(m3.body).toHaveLength(2);
       |                                     ^ Magic Number
  1343 |     });
  1344 |
  1345 |     it(""should grab \\arraystretch"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1589, 'column': 41, 'index': 51537}","  1587 |         const displayBody = displayNode.body;
  1588 |
> 1589 |         expect(displayBody).toHaveLength(2);
       |                                         ^ Magic Number
  1590 |         expect(displayBody[0].text).toEqual(""e"");
  1591 |     });
  1592 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1643, 'column': 36, 'index': 53572}","  1641 |
  1642 |         const bbBody = nestedParse.body.body;
> 1643 |         expect(bbBody).toHaveLength(3);
       |                                    ^ Magic Number
  1644 |         expect(bbBody[0].type).toEqual(""mathord"");
  1645 |         expect(bbBody[2].type).toEqual(""font"");
  1646 |         expect(bbBody[2].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1655, 'column': 34, 'index': 54100}","  1653 |         expect(colorMathbbParse.color).toEqual(""blue"");
  1654 |         const body = colorMathbbParse.body;
> 1655 |         expect(body).toHaveLength(1);
       |                                  ^ Magic Number
  1656 |         expect(body[0].type).toEqual(""font"");
  1657 |         expect(body[0].font).toEqual(""mathbb"");
  1658 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1668, 'column': 42, 'index': 54564}","  1666 |         expect(bf.type).toEqual(""font"");
  1667 |         expect(bf.font).toEqual(""mathbf"");
> 1668 |         expect(bf.body.body).toHaveLength(3);
       |                                          ^ Magic Number
  1669 |         expect(bf.body.body[0].text).toEqual(""a"");
  1670 |         expect(bf.body.body[1].type).toEqual(""font"");
  1671 |         expect(bf.body.body[1].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2241, 'column': 45, 'index': 80425}","  2239 |         // Just a few quick sanity checks here...
  2240 |         const markup = katex.renderToString(r`\sigma^2`);
> 2241 |         expect(markup.indexOf(""<span"")).toBe(0);
       |                                             ^ Magic Number
  2242 |         expect(markup).toContain(""\u03c3"");  // sigma
  2243 |         expect(markup).toContain(""margin-right"");
  2244 |         expect(markup).not.toContain(""marginRight"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2747, 'column': 39, 'index': 97643}","  2745 |             parseTree(r`\sqrt}`, new Settings());
  2746 |         } catch (e) {
> 2747 |             expect(e.position).toEqual(5);
       |                                       ^ Magic Number
  2748 |         }
  2749 |     });
  2750 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2881, 'column': 37, 'index': 101938}","  2879 |     it(""should not eat the last row when its first cell is empty"", function() {
  2880 |         const ae = getParsed`\begin{aligned}&E_1 & (1)\\&E_2 & (2)\\&E_3 & (3)\end{aligned}`[0];
> 2881 |         expect(ae.body).toHaveLength(3);
       |                                     ^ Magic Number
  2882 |     });
  2883 | });
  2884 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3172, 'column': 40, 'index': 115495}","  3170 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");
  3171 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
> 3172 |             expect(error.position).toBe(4);
       |                                        ^ Magic Number
  3173 |             expect(error.length).toBe(5);
  3174 |         }
  3175 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3173, 'column': 38, 'index': 115537}","  3171 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
  3172 |             expect(error.position).toBe(4);
> 3173 |             expect(error.length).toBe(5);
       |                                      ^ Magic Number
  3174 |         }
  3175 |     });
  3176 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3187, 'column': 40, 'index': 116189}","  3185 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");
  3186 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
> 3187 |             expect(error.position).toBe(7);
       |                                        ^ Magic Number
  3188 |             expect(error.length).toBe(0);
  3189 |         }
  3190 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3188, 'column': 38, 'index': 116231}","  3186 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
  3187 |             expect(error.position).toBe(7);
> 3188 |             expect(error.length).toBe(0);
       |                                      ^ Magic Number
  3189 |         }
  3190 |     });
  3191 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 766}","  764 |
  765 |     it(""should handle backslash followed by newline"", () => {
> 766 |         expect(""\\text{\\ \t\r \n \t\r  }"").toParseLike`\text{\ }`;
      |        ^ Redundant Assertion
  767 |     });
  768 |
  769 |     it(""should accept math mode tokens after its argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1737}","  1735 | describe(""A comment parser"", function() {
  1736 |     it(""should parse comments at the end of a line"", () => {
> 1737 |         expect(""a^2 + b^2 = c^2 % Pythagoras' Theorem\n"").toParse();
       |        ^ Redundant Assertion
  1738 |     });
  1739 |
  1740 |     it(""should parse comments at the start of a line"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1741}","  1739 |
  1740 |     it(""should parse comments at the start of a line"", () => {
> 1741 |         expect(""% comment\n"").toParse();
       |        ^ Redundant Assertion
  1742 |     });
  1743 |
  1744 |     it(""should parse multiple lines of comments in a row"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1745}","  1743 |
  1744 |     it(""should parse multiple lines of comments in a row"", () => {
> 1745 |         expect(""% comment 1\n% comment 2\n"").toParse();
       |        ^ Redundant Assertion
  1746 |     });
  1747 |
  1748 |     it(""should parse comments between subscript and superscript"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1749}","  1747 |
  1748 |     it(""should parse comments between subscript and superscript"", () => {
> 1749 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
       |        ^ Redundant Assertion
  1750 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
  1751 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1752 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1750}","  1748 |     it(""should parse comments between subscript and superscript"", () => {
  1749 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
> 1750 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
       |        ^ Redundant Assertion
  1751 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1752 |     });
  1753 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1751}","  1749 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
  1750 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
> 1751 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
       |        ^ Redundant Assertion
  1752 |     });
  1753 |
  1754 |     it(""should parse comments in size and color groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1755}","  1753 |
  1754 |     it(""should parse comments in size and color groups"", () => {
> 1755 |         expect(""\\kern{1 %kern\nem}"").toParse();
       |        ^ Redundant Assertion
  1756 |         expect(""\\kern1 %kern\nem"").toParse();
  1757 |         expect(""\\color{#f00%red\n}"").toParse();
  1758 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1756}","  1754 |     it(""should parse comments in size and color groups"", () => {
  1755 |         expect(""\\kern{1 %kern\nem}"").toParse();
> 1756 |         expect(""\\kern1 %kern\nem"").toParse();
       |        ^ Redundant Assertion
  1757 |         expect(""\\color{#f00%red\n}"").toParse();
  1758 |     });
  1759 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1757}","  1755 |         expect(""\\kern{1 %kern\nem}"").toParse();
  1756 |         expect(""\\kern1 %kern\nem"").toParse();
> 1757 |         expect(""\\color{#f00%red\n}"").toParse();
       |        ^ Redundant Assertion
  1758 |     });
  1759 |
  1760 |     it(""should parse comments before an expression"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1761}","  1759 |
  1760 |     it(""should parse comments before an expression"", () => {
> 1761 |         expect(""%comment\n{2}"").toParseLike`{2}`;
       |        ^ Redundant Assertion
  1762 |     });
  1763 |
  1764 |     it(""should parse comments before and between \\hline"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1771}","  1769 |
  1770 |     it(""should parse comments in the macro definition"", () => {
> 1771 |         expect(""\\def\\foo{1 %}\n2}\n\\foo"").toParseLike`12`;
       |        ^ Redundant Assertion
  1772 |     });
  1773 |
  1774 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1775}","  1773 |
  1774 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {
> 1775 |         expect(""\\def\\foo{1\n2}\nx %\\foo\n"").toParseLike`x`;
       |        ^ Redundant Assertion
  1776 |     });
  1777 |
  1778 |     it(""should not parse a comment without newline in strict mode"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1784}","  1782 |
  1783 |     it(""should not produce or consume space"", () => {
> 1784 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
       |        ^ Redundant Assertion
  1785 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
  1786 |     });
  1787 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1785}","  1783 |     it(""should not produce or consume space"", () => {
  1784 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
> 1785 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
       |        ^ Redundant Assertion
  1786 |     });
  1787 |
  1788 |     it(""should not include comments in the output"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1789}","  1787 |
  1788 |     it(""should not include comments in the output"", () => {
> 1789 |         expect(""5 % comment\n"").toParseLike`5`;
       |        ^ Redundant Assertion
  1790 |     });
  1791 | });
  1792 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 16, 'line': 2184}","  2182 |
  2183 |                 // Render is expected to throw, so this should not be called.
> 2184 |                 expect(true).toBe(false);
       |                ^ Redundant Assertion
  2185 |             } catch (error) {
  2186 |                 expect(error).toBeInstanceOf(ParseError);
  2187 |                 const message =",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 2986}","  2984 |         expect`\href%end`.toParseLike(""\\href{%}end"", trustSettings);
  2985 |         expect`\url%end`.toParseLike(""\\url{%}end"", trustSettings);
> 2986 |         expect(""\\url%%end\n"").toParseLike(""\\url{%}"", trustSettings);
       |        ^ Redundant Assertion
  2987 |         expect`\url end`.toParseLike(""\\url{e}nd"", trustSettings);
  2988 |         expect`\url%end`.toParseLike(""\\url {%}end"", trustSettings);
  2989 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3029}","  3027 |
  3028 |     it(""should allow comments after URLs"", function() {
> 3029 |         expect(""\\url{http://example.com/}%comment\n"").toBuild();
       |        ^ Redundant Assertion
  3030 |     });
  3031 |
  3032 |     it(""should be marked up correctly"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3167}","  3165 |
  3166 |             // Render is expected to throw, so this should not be called.
> 3167 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3168 |         } catch (error) {
  3169 |             expect(error).toBeInstanceOf(ParseError);
  3170 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3182}","  3180 |
  3181 |             // Render is expected to throw, so this should not be called.
> 3182 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3183 |         } catch (error) {
  3184 |             expect(error).toBeInstanceOf(ParseError);
  3185 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3197}","  3195 |
  3196 |             // Render is expected to throw, so this should not be called.
> 3197 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3198 |         } catch (error) {
  3199 |             expect(error).toBeInstanceOf(ParseError);
  3200 |             expect(error.message).toBe(""KaTeX parse error: \\verb ended by end of line instead of matching delimiter"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3470}","  3468 |
  3469 |     it(""\\char produces literal characters"", () => {
> 3470 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
       |        ^ Redundant Assertion
  3471 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3472 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3473 |         expect(""\\char`\\%"").toParseLike`\char""25`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3471}","  3469 |     it(""\\char produces literal characters"", () => {
  3470 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3471 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Redundant Assertion
  3472 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3473 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3474 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3472}","  3470 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3471 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3472 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Redundant Assertion
  3473 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3474 |         expect`\char`.not.toParse();
  3475 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3473}","  3471 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3472 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3473 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Redundant Assertion
  3474 |         expect`\char`.not.toParse();
  3475 |         expect(""\\char`"").not.toParse();
  3476 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3475}","  3473 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3474 |         expect`\char`.not.toParse();
> 3475 |         expect(""\\char`"").not.toParse();
       |        ^ Redundant Assertion
  3476 |         expect`\char'`.not.toParse();
  3477 |         expect`\char""`.not.toParse();
  3478 |         expect`\char'a`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3939}","  3937 |
  3938 |     it(""should parse combining characters"", function() {
> 3939 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
       |        ^ Redundant Assertion
  3940 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
  3941 |     });
  3942 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3940}","  3938 |     it(""should parse combining characters"", function() {
  3939 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
> 3940 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
       |        ^ Redundant Assertion
  3941 |     });
  3942 |
  3943 |     it(""should parse multi-accented characters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3978}","  3976 |
  3977 |     it(""should parse symbols"", function() {
> 3978 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3979 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
  3980 |     });
  3981 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3979}","  3977 |     it(""should parse symbols"", function() {
  3978 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
> 3979 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3980 |     });
  3981 |
  3982 |     it(""should build Greek capital letters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3996}","  3994 |
  3995 |     it(""should build binary operators"", function() {
> 3996 |         expect(""±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞\u22C5\u2218\u2216\u2219"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3997 |     });
  3998 |
  3999 |     it(""should build common ords"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4000}","  3998 |
  3999 |     it(""should build common ords"", function() {
> 4000 |         expect(""§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  4001 |     });
  4002 |
  4003 |     it(""should build delimiters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4004}","  4002 |
  4003 |     it(""should build delimiters"", function() {
> 4004 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
       |        ^ Redundant Assertion
  4005 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4006 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4007 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4005}","  4003 |     it(""should build delimiters"", function() {
  4004 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
> 4005 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
       |        ^ Redundant Assertion
  4006 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4007 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4008 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4006}","  4004 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
  4005 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
> 4006 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
       |        ^ Redundant Assertion
  4007 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4008 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4009 |         expect`┌x┐ └x┘`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4007}","  4005 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4006 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
> 4007 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
       |        ^ Redundant Assertion
  4008 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4009 |         expect`┌x┐ └x┘`.toBuild();
  4010 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4008}","  4006 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4007 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
> 4008 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
       |        ^ Redundant Assertion
  4009 |         expect`┌x┐ └x┘`.toBuild();
  4010 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4011 |         expect(""\u27E6x\u27E7"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4010}","  4008 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4009 |         expect`┌x┐ └x┘`.toBuild();
> 4010 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
       |        ^ Redundant Assertion
  4011 |         expect(""\u27E6x\u27E7"").toBuild();
  4012 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4013 |         expect(""\\lBrace \\rBrace"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4011}","  4009 |         expect`┌x┐ └x┘`.toBuild();
  4010 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
> 4011 |         expect(""\u27E6x\u27E7"").toBuild();
       |        ^ Redundant Assertion
  4012 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4013 |         expect(""\\lBrace \\rBrace"").toBuild();
  4014 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4012}","  4010 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4011 |         expect(""\u27E6x\u27E7"").toBuild();
> 4012 |         expect(""\\llbracket \\rrbracket"").toBuild();
       |        ^ Redundant Assertion
  4013 |         expect(""\\lBrace \\rBrace"").toBuild();
  4014 |     });
  4015 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4013}","  4011 |         expect(""\u27E6x\u27E7"").toBuild();
  4012 |         expect(""\\llbracket \\rrbracket"").toBuild();
> 4013 |         expect(""\\lBrace \\rBrace"").toBuild();
       |        ^ Redundant Assertion
  4014 |     });
  4015 |
  4016 |     it(""should build some surrogate pairs"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4283, 'column': 19, 'index': 160427}","  4281 |             expect`\message{Hello, world}`.toParse();
  4282 |             // eslint-disable-next-line no-console
> 4283 |             expect(console.log).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4284 |         });
  4285 |     });
  4286 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4292, 'column': 19, 'index': 160792}","  4290 |             expect`\errmessage{Hello, world}`.toParse();
  4291 |             // eslint-disable-next-line no-console
> 4292 |             expect(console.error).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4293 |         });
  4294 |     });
  4295 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 23}","  21 |
  22 | describe(""A parser"", function() {
> 23 |     it(""should not fail on an empty string"", function() {
     |    ^ Unknown Test
  24 |         expect``.toParse(strictSettings);
  25 |     });
  26 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 27}","  25 |     });
  26 |
> 27 |     it(""should ignore whitespace"", function() {
     |    ^ Unknown Test
  28 |         expect`    x    y    `.toParseLike(""xy"", strictSettings);
  29 |     });
  30 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 31}","  29 |     });
  30 |
> 31 |     it(""should ignore whitespace in atom"", function() {
     |    ^ Unknown Test
  32 |         expect`    x   ^ y    `.toParseLike(""x^y"", strictSettings);
  33 |     });
  34 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 112}","  110 |
  111 | describe(""A mathinner parser"", function() {
> 112 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  113 |         expect`\mathinner{\langle{\psi}\rangle}`.toParse();
  114 |         expect`\frac 1 {\mathinner{\langle{\psi}\rangle}}`.toParse();
  115 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 179}","  177 |
  178 | describe(""A \\KaTeX parser"", function() {
> 179 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  180 |         expect`\KaTeX`.toParse();
  181 |     });
  182 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 185}","  183 |
  184 | describe(""A subscript and superscript parser"", function() {
> 185 |     it(""should not fail on superscripts"", function() {
      |    ^ Unknown Test
  186 |         expect`x^2`.toParse();
  187 |     });
  188 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 189}","  187 |     });
  188 |
> 189 |     it(""should not fail on subscripts"", function() {
      |    ^ Unknown Test
  190 |         expect`x_3`.toParse();
  191 |     });
  192 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 193}","  191 |     });
  192 |
> 193 |     it(""should not fail on both subscripts and superscripts"", function() {
      |    ^ Unknown Test
  194 |         expect`x^2_3`.toParse();
  195 |
  196 |         expect`x_2^3`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 199}","  197 |     });
  198 |
> 199 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  200 |         expect`^3`.toParse();
  201 |         expect`^3+`.toParse();
  202 |         expect`_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 243}","  241 |     });
  242 |
> 243 |     it(""should produce the same thing regardless of order"", function() {
      |    ^ Unknown Test
  244 |         expect`x^2_3`.toParseLike`x_3^2`;
  245 |     });
  246 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 247}","  245 |     });
  246 |
> 247 |     it(""should not parse double subscripts or superscripts"", function() {
      |    ^ Unknown Test
  248 |         expect`x^x^x`.not.toParse();
  249 |
  250 |         expect`x_x_x`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 261}","  259 |     });
  260 |
> 261 |     it(""should work correctly with {}s"", function() {
      |    ^ Unknown Test
  262 |         expect`x^{2+3}`.toParse();
  263 |
  264 |         expect`x_{3-2}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 279}","  277 |     });
  278 |
> 279 |     it(""should work with nested super/subscripts"", function() {
      |    ^ Unknown Test
  280 |         expect`x^{x^x}`.toParse();
  281 |         expect`x^{x_x}`.toParse();
  282 |         expect`x_{x^x}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 286}","  284 |     });
  285 |
> 286 |     it(""should work with Unicode (sub|super)script characters"", function() {
      |    ^ Unknown Test
  287 |         expect`A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃`.toParseLike`A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}`;
  288 |     });
  289 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 290}","  288 |     });
  289 |
> 290 |     it(""should not fail if \\relax is in an atom"", function() {
      |    ^ Unknown Test
  291 |         expect`\hskip1em\relax^2`.toParse(strictSettings);
  292 |     });
  293 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 294}","  292 |     });
  293 |
> 294 |     it(""should skip \\relax in super/subscripts"", function() {
      |    ^ Unknown Test
  295 |         expect`x^\relax 2`.toParseLike`x^2`;
  296 |         expect`x_\relax 2`.toParseLike`x_2`;
  297 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 301}","  299 |
  300 | describe(""A subscript and superscript tree-builder"", function() {
> 301 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  302 |         expect`^3`.toBuild();
  303 |         expect`_2`.toBuild();
  304 |         expect`^3_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 310}","  308 |
  309 | describe(""A parser with limit controls"", function() {
> 310 |     it(""should fail when the limit control is not preceded by an op node"", function() {
      |    ^ Unknown Test
  311 |         expect`3\nolimits_2^2`.not.toParse();
  312 |         expect`\sqrt\limits_2^2`.not.toParse();
  313 |         expect`45 +\nolimits 45`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 316}","  314 |     });
  315 |
> 316 |     it(""should parse when the limit control directly follows an op node"", function() {
      |    ^ Unknown Test
  317 |         expect`\int\limits_2^2 3`.toParse();
  318 |         expect`\sum\nolimits_3^4 4`.toParse();
  319 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 321}","  319 |     });
  320 |
> 321 |     it(""should parse when the limit control is in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  322 |         expect`\int_2^2\limits`.toParse();
  323 |         expect`\int^2\nolimits_2`.toParse();
  324 |         expect`\int_2\limits^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 327}","  325 |     });
  326 |
> 327 |     it(""should allow multiple limit controls in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  328 |         expect`\int_2\nolimits^2\limits 3`.toParse();
  329 |         expect`\int\nolimits\limits_2^2`.toParse();
  330 |         expect`\int\limits\limits\limits_2^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 345}","  343 |
  344 | describe(""A group parser"", function() {
> 345 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  346 |         expect`{xy}`.toParse();
  347 |     });
  348 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 362}","  360 |
  361 | describe(""A \\begingroup...\\endgroup parser"", function() {
> 362 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  363 |         expect`\begingroup xy \endgroup`.toParse();
  364 |     });
  365 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 366}","  364 |     });
  365 |
> 366 |     it(""should fail when it is mismatched"", function() {
      |    ^ Unknown Test
  367 |         expect`\begingroup xy`.not.toParse();
  368 |         expect`\begingroup xy }`.not.toParse();
  369 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 383}","  381 |     });
  382 |
> 383 |     it(""should not affect spacing in math mode"", function() {
      |    ^ Unknown Test
  384 |         expect`\begingroup x+ \endgroup y`.toBuildLike`x+y`;
  385 |     });
  386 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 389}","  387 |
  388 | describe(""An implicit group parser"", function() {
> 389 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  390 |         expect`\Large x`.toParse();
  391 |         expect`abc {abc \Large xyz} abc`.toParse();
  392 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 451}","  449 |
  450 | describe(""A function parser"", function() {
> 451 |     it(""should parse no argument functions"", function() {
      |    ^ Unknown Test
  452 |         expect`\div`.toParse();
  453 |     });
  454 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 455}","  453 |     });
  454 |
> 455 |     it(""should parse 1 argument functions"", function() {
      |    ^ Unknown Test
  456 |         expect`\blue x`.toParse();
  457 |     });
  458 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 459}","  457 |     });
  458 |
> 459 |     it(""should parse 2 argument functions"", function() {
      |    ^ Unknown Test
  460 |         expect`\frac 1 2`.toParse();
  461 |     });
  462 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 463}","  461 |     });
  462 |
> 463 |     it(""should not parse 1 argument functions with no arguments"", function() {
      |    ^ Unknown Test
  464 |         expect`\blue`.not.toParse();
  465 |     });
  466 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 467}","  465 |     });
  466 |
> 467 |     it(""should not parse 2 argument functions with 0 or 1 arguments"", function() {
      |    ^ Unknown Test
  468 |         expect`\frac`.not.toParse();
  469 |
  470 |         expect`\frac 1`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 473}","  471 |     });
  472 |
> 473 |     it(""should not parse a function with text right after it"", function() {
      |    ^ Unknown Test
  474 |         expect`\redx`.not.toParse();
  475 |     });
  476 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 477}","  475 |     });
  476 |
> 477 |     it(""should parse a function with a number right after it"", function() {
      |    ^ Unknown Test
  478 |         expect`\frac12`.toParse();
  479 |     });
  480 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 481}","  479 |     });
  480 |
> 481 |     it(""should parse some functions with text right after it"", function() {
      |    ^ Unknown Test
  482 |         expect`\;x`.toParse();
  483 |     });
  484 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 645}","  643 |     });
  644 |
> 645 |     it(""should handle \\textstyle correctly"", function() {
      |    ^ Unknown Test
  646 |         expect`\textstyle 1 \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  647 |         expect`{\textstyle 1} \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  648 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 671}","  669 |
  670 | describe(""A genfrac builder"", function() {
> 671 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  672 |         expect`\frac{x}{y}`.toBuild();
  673 |         expect`\dfrac{x}{y}`.toBuild();
  674 |         expect`\tfrac{x}{y}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 684}","  682 |
  683 | describe(""A infix builder"", function() {
> 684 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  685 |         expect`a \over b`.toBuild();
  686 |         expect`a \atop b`.toBuild();
  687 |         expect`a \choose b`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 780}","  778 |     });
  779 |
> 780 |     it(""should parse math within text group"", function() {
      |    ^ Unknown Test
  781 |         expect`\text{graph: $y = mx + b$}`.toParse(strictSettings);
  782 |         expect`\text{graph: \(y = mx + b\)}`.toParse(strictSettings);
  783 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 785}","  783 |     });
  784 |
> 785 |     it(""should parse math within text within math within text"", function() {
      |    ^ Unknown Test
  786 |         expect`\text{hello $x + \text{world $y$} + z$}`.toParse(strictSettings);
  787 |         expect`\text{hello \(x + \text{world $y$} + z\)}`.toParse(strictSettings);
  788 |         expect`\text{hello $x + \text{world \(y\)} + z$}`.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 792}","  790 |     });
  791 |
> 792 |     it(""should forbid \\( within math mode"", function() {
      |    ^ Unknown Test
  793 |         expect`\(`.not.toParse();
  794 |         expect`\text{$\(x\)$}`.not.toParse();
  795 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 797}","  795 |     });
  796 |
> 797 |     it(""should forbid $ within math mode"", function() {
      |    ^ Unknown Test
  798 |         expect`$x$`.not.toParse();
  799 |         expect`\text{\($x$\)}`.not.toParse();
  800 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 802}","  800 |     });
  801 |
> 802 |     it(""should detect unbalanced \\)"", function() {
      |    ^ Unknown Test
  803 |         expect`\)`.not.toParse();
  804 |         expect`\text{\)}`.not.toParse();
  805 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 807}","  805 |     });
  806 |
> 807 |     it(""should detect unbalanced $"", function() {
      |    ^ Unknown Test
  808 |         expect`$`.not.toParse();
  809 |         expect`\text{$}`.not.toParse();
  810 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 812}","  810 |     });
  811 |
> 812 |     it(""should not mix $ and \\(..\\)"", function() {
      |    ^ Unknown Test
  813 |         expect`\text{$x\)}`.not.toParse();
  814 |         expect`\text{\(x$}`.not.toParse();
  815 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 817}","  815 |     });
  816 |
> 817 |     it(""should parse spacing functions"", function() {
      |    ^ Unknown Test
  818 |         expect`a b\, \; \! \: \> ~ \thinspace \medspace \quad \ `.toBuild();
  819 |         expect`\enspace \thickspace \qquad \space \nobreakspace`.toBuild();
  820 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 822}","  820 |     });
  821 |
> 822 |     it(""should omit spaces after commands"", function() {
      |    ^ Unknown Test
  823 |         expect`\text{\textellipsis !}`.toParseLike`\text{\textellipsis!}`;
  824 |     });
  825 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 826}","  824 |     });
  825 |
> 826 |     it(""should handle ⋮ and \\vdots"", function() {
      |    ^ Unknown Test
  827 |         expect`\text{a \vdots b ⋮ d}`.toParse();
  828 |     });
  829 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 832}","  830 |
  831 | describe(""A texvc builder"", function() {
> 832 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  833 |         expect`\lang\N\darr\R\dArr\Z\Darr\alef\rang`.toBuild();
  834 |         expect`\alefsym\uarr\Alpha\uArr\Beta\Uarr\Chi`.toBuild();
  835 |         expect`\clubs\diamonds\hearts\spades\cnums\Complex`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1006}","  1004 |
  1005 | describe(""An lap parser"", function() {
> 1006 |     it(""should not fail on a text argument"", function() {
       |    ^ Unknown Test
  1007 |         expect`\rlap{\,/}{=}`.toParse();
  1008 |         expect`\mathrlap{\,/}{=}`.toParse();
  1009 |         expect`{=}\llap{/\,}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1015}","  1013 |     });
  1014 |
> 1015 |     it(""should not fail if math version is used"", function() {
       |    ^ Unknown Test
  1016 |         expect`\mathrlap{\frac{a}{b}}{=}`.toParse();
  1017 |         expect`{=}\mathllap{\frac{a}{b}}`.toParse();
  1018 |         expect`\sum_{\mathclap{\frac{a}{b}}}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1021}","  1019 |     });
  1020 |
> 1021 |     it(""should fail on math if AMS version is used"", function() {
       |    ^ Unknown Test
  1022 |         expect`\rlap{\frac{a}{b}}{=}`.not.toParse();
  1023 |         expect`{=}\llap{\frac{a}{b}}`.not.toParse();
  1024 |         expect`\sum_{\clap{\frac{a}{b}}}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1277}","  1275 | describe(""A begin/end parser"", function() {
  1276 |
> 1277 |     it(""should parse a simple environment"", function() {
       |    ^ Unknown Test
  1278 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1279 |     });
  1280 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1281}","  1279 |     });
  1280 |
> 1281 |     it(""should parse an environment with argument"", function() {
       |    ^ Unknown Test
  1282 |         expect`\begin{array}{cc}a&b\\c&d\end{array}`.toParse();
  1283 |     });
  1284 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1285}","  1283 |     });
  1284 |
> 1285 |     it(""should parse and build an empty environment"", function() {
       |    ^ Unknown Test
  1286 |         expect`\begin{aligned}\end{aligned}`.toBuild();
  1287 |         expect`\begin{matrix}\end{matrix}`.toBuild();
  1288 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1290}","  1288 |     });
  1289 |
> 1290 |     it(""should parse an environment with hlines"", function() {
       |    ^ Unknown Test
  1291 |         expect`\begin{matrix}\hline a&b\\ \hline c&d\end{matrix}`.toParse();
  1292 |         expect`\begin{matrix}\hline a&b\cr \hline c&d\end{matrix}`.toParse();
  1293 |         expect`\begin{matrix}\hdashline a&b\\ \hdashline c&d\end{matrix}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1296}","  1294 |     });
  1295 |
> 1296 |     it(""should forbid hlines outside array environment"", () => {
       |    ^ Unknown Test
  1297 |         expect`\hline`.not.toParse();
  1298 |     });
  1299 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1300}","  1298 |     });
  1299 |
> 1300 |     it(""should error when name is mismatched"", function() {
       |    ^ Unknown Test
  1301 |         expect`\begin{matrix}a&b\\c&d\end{pmatrix}`.not.toParse();
  1302 |     });
  1303 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1304}","  1302 |     });
  1303 |
> 1304 |     it(""should error when commands are mismatched"", function() {
       |    ^ Unknown Test
  1305 |         expect`\begin{matrix}a&b\\c&d\right{pmatrix}`.not.toParse();
  1306 |     });
  1307 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1308}","  1306 |     });
  1307 |
> 1308 |     it(""should error when end is missing"", function() {
       |    ^ Unknown Test
  1309 |         expect`\begin{matrix}a&b\\c&d`.not.toParse();
  1310 |     });
  1311 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1312}","  1310 |     });
  1311 |
> 1312 |     it(""should error when braces are mismatched"", function() {
       |    ^ Unknown Test
  1313 |         expect`{\begin{matrix}a&b\\c&d}\end{matrix}`.not.toParse();
  1314 |     });
  1315 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1316}","  1314 |     });
  1315 |
> 1316 |     it(""should cooperate with infix notation"", function() {
       |    ^ Unknown Test
  1317 |         expect`\begin{matrix}0&1\over2&3\\4&5&6\end{matrix}`.toParse();
  1318 |     });
  1319 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1326}","  1324 |     });
  1325 |
> 1326 |     it(""should allow \\cr and \\\\ as a line terminator"", function() {
       |    ^ Unknown Test
  1327 |         expect`\begin{matrix}a&b\cr c&d\end{matrix}`.toParse();
  1328 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1329 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1331}","  1329 |     });
  1330 |
> 1331 |     it(""should not allow \\cr to scan for an optional size argument"", function() {
       |    ^ Unknown Test
  1332 |         expect`\begin{matrix}a&b\cr[c]&d\end{matrix}`.toParse();
  1333 |     });
  1334 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1335}","  1333 |     });
  1334 |
> 1335 |     it(""should not treat [ after space as optional argument to \\\\"", function() {
       |    ^ Unknown Test
  1336 |         expect`\begin{matrix}a&b\\ [c]&d\end{matrix}`.toParse();
  1337 |         expect`a\\ [b]`.toParse();
  1338 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1350}","  1348 |     });
  1349 |
> 1350 |     it(""should allow an optional argument in {matrix*} and company."", function() {
       |    ^ Unknown Test
  1351 |         expect`\begin{matrix*}[r] a & -1 \\ -1 & d \end{matrix*}`.toBuild();
  1352 |         expect`\begin{pmatrix*}[r] a & -1 \\ -1 & d \end{pmatrix*}`.toBuild();
  1353 |         expect`\begin{bmatrix*}[r] a & -1 \\ -1 & d \end{bmatrix*}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1387}","  1385 |     });
  1386 |
> 1387 |     it(""should build sized square roots"", function() {
       |    ^ Unknown Test
  1388 |         expect`\Large\sqrt[3]{x}`.toBuild();
  1389 |     });
  1390 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1391}","  1389 |     });
  1390 |
> 1391 |     it(""should expand argument if optional argument doesn't exist"", function() {
       |    ^ Unknown Test
  1392 |         expect`\sqrt\foo`.toParseLike(""\\sqrt123"",
  1393 |             new Settings({macros: {""\\foo"": ""123""}}));
  1394 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1396}","  1394 |     });
  1395 |
> 1396 |     it(""should not expand argument if optional argument exists"", function() {
       |    ^ Unknown Test
  1397 |         expect`\sqrt[2]\foo`.toParseLike(""\\sqrt[2]{123}"",
  1398 |             new Settings({macros: {""\\foo"": ""123""}}));
  1399 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1403}","  1401 |
  1402 | describe(""A TeX-compliant parser"", function() {
> 1403 |     it(""should work"", function() {
       |    ^ Unknown Test
  1404 |         expect`\frac 2 3`.toParse();
  1405 |     });
  1406 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1422}","  1420 |     });
  1421 |
> 1422 |     it(""should fail when there are missing sup/subscripts"", function() {
       |    ^ Unknown Test
  1423 |         expect`x^`.not.toParse();
  1424 |         expect`x_`.not.toParse();
  1425 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1493}","  1491 |     });
  1492 |
> 1493 |     it(""should parse multiple primes correctly"", function() {
       |    ^ Unknown Test
  1494 |         expect`x''''`.toParse();
  1495 |         expect`x_2''`.toParse();
  1496 |         expect`x''_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1499}","  1497 |     });
  1498 |
> 1499 |     it(""should fail when sup/subscripts are interspersed with arguments"", function() {
       |    ^ Unknown Test
  1500 |         expect`\sqrt^23`.not.toParse();
  1501 |         expect`\frac^234`.not.toParse();
  1502 |         expect`\frac2^34`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1505}","  1503 |     });
  1504 |
> 1505 |     it(""should succeed when sup/subscripts come after whole functions"", function() {
       |    ^ Unknown Test
  1506 |         expect`\sqrt2^3`.toParse();
  1507 |         expect`\frac23^4`.toParse();
  1508 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1510}","  1508 |     });
  1509 |
> 1510 |     it(""should succeed with a sqrt around a text/frac"", function() {
       |    ^ Unknown Test
  1511 |         expect`\sqrt \frac x y`.toParse();
  1512 |         expect`\sqrt \text x`.toParse();
  1513 |         expect`x^\frac x y`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1547}","  1545 |
  1546 | describe(""An op symbol builder"", function() {
> 1547 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1548 |         expect`\int_i^n`.toBuild();
  1549 |         expect`\iint_i^n`.toBuild();
  1550 |         expect`\iiint_i^n`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1564}","  1562 |
  1563 | describe(""A style change parser"", function() {
> 1564 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1565 |         expect`\displaystyle x`.toParse();
  1566 |         expect`\textstyle x`.toParse();
  1567 |         expect`\scriptstyle x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1595}","  1593 |
  1594 | describe(""A font parser"", function() {
> 1595 |     it(""should parse \\mathrm, \\mathbb, \\mathit, and \\mathnormal"", function() {
       |    ^ Unknown Test
  1596 |         expect`\mathrm x`.toParse();
  1597 |         expect`\mathbb x`.toParse();
  1598 |         expect`\mathit x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1606}","  1604 |     });
  1605 |
> 1606 |     it(""should parse \\mathcal and \\mathfrak"", function() {
       |    ^ Unknown Test
  1607 |         expect`\mathcal{ABC123}`.toParse();
  1608 |         expect`\mathfrak{abcABC123}`.toParse();
  1609 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1660}","  1658 |     });
  1659 |
> 1660 |     it(""should not parse a series of font commands"", function() {
       |    ^ Unknown Test
  1661 |         expect`\mathbb \mathrm R`.not.toParse();
  1662 |     });
  1663 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1675}","  1673 |     });
  1674 |
> 1675 |     it(""should be allowed in the argument"", function() {
       |    ^ Unknown Test
  1676 |         expect`e^\mathbf{x}`.toParse();
  1677 |     });
  1678 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1684}","  1682 |     });
  1683 |
> 1684 |     it(""old-style fonts work like new-style fonts"", () => {
       |    ^ Unknown Test
  1685 |         expect`\rm xyz`.toParseLike`\mathrm{xyz}`;
  1686 |         expect`\sf xyz`.toParseLike`\mathsf{xyz}`;
  1687 |         expect`\tt xyz`.toParseLike`\mathtt{xyz}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1695}","  1693 |
  1694 | describe(""A \\pmb builder"", function() {
> 1695 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1696 |         expect`\pmb{\mu}`.toBuild();
  1697 |         expect`\pmb{=}`.toBuild();
  1698 |         expect`\pmb{+}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1706}","  1704 |
  1705 | describe(""A raise parser"", function() {
> 1706 |     it(""should parse and build text in \\raisebox"", function() {
       |    ^ Unknown Test
  1707 |         expect`\raisebox{5pt}{text}`.toBuild(strictSettings);
  1708 |         expect`\raisebox{-5pt}{text}`.toBuild(strictSettings);
  1709 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1711}","  1709 |     });
  1710 |
> 1711 |     it(""should parse and build math in non-strict \\vcenter"", function() {
       |    ^ Unknown Test
  1712 |         expect`\vcenter{\frac a b}`.toBuild(nonstrictSettings);
  1713 |     });
  1714 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1715}","  1713 |     });
  1714 |
> 1715 |     it(""should fail to parse math in \\raisebox"", function() {
       |    ^ Unknown Test
  1716 |         expect`\raisebox{5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1717 |         expect`\raisebox{-5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1718 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1720}","  1718 |     });
  1719 |
> 1720 |     it(""should fail to parse math in an \\hbox"", function() {
       |    ^ Unknown Test
  1721 |         expect`\hbox{\frac a b}`.not.toParse(nonstrictSettings);
  1722 |     });
  1723 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1724}","  1722 |     });
  1723 |
> 1724 |     it(""should fail to build, given an unbraced length"", function() {
       |    ^ Unknown Test
  1725 |         expect`\raisebox5pt{text}`.not.toBuild(strictSettings);
  1726 |         expect`\raisebox-5pt{text}`.not.toBuild(strictSettings);
  1727 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1729}","  1727 |     });
  1728 |
> 1729 |     it(""should build math in an hbox when math mode is set"", function() {
       |    ^ Unknown Test
  1730 |         expect`a + \vcenter{\hbox{$\frac{\frac a b}c$}}`
  1731 |             .toBuild(strictSettings);
  1732 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1778}","  1776 |     });
  1777 |
> 1778 |     it(""should not parse a comment without newline in strict mode"", () => {
       |    ^ Unknown Test
  1779 |         expect`x%y`.not.toParse(strictSettings);
  1780 |         expect`x%y`.toParse(nonstrictSettings);
  1781 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2263}","  2261 |
  2262 | describe(""An accent parser"", function() {
> 2263 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2264 |         expect`\vec{x}`.toParse();
  2265 |         expect`\vec{x^2}`.toParse();
  2266 |         expect`\vec{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2283}","  2281 |     });
  2282 |
> 2283 |     it(""should parse stretchy, shifty accents"", function() {
       |    ^ Unknown Test
  2284 |         expect`\widehat{x}`.toParse();
  2285 |         expect`\widecheck{x}`.toParse();
  2286 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2288}","  2286 |     });
  2287 |
> 2288 |     it(""should parse stretchy, non-shifty accents"", function() {
       |    ^ Unknown Test
  2289 |         expect`\overrightarrow{x}`.toParse();
  2290 |     });
  2291 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2294}","  2292 |
  2293 | describe(""An accent builder"", function() {
> 2294 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2295 |         expect`\vec{x}`.toBuild();
  2296 |         expect`\vec{x}^2`.toBuild();
  2297 |         expect`\vec{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2311}","  2309 |
  2310 | describe(""A stretchy and shifty accent builder"", function() {
> 2311 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2312 |         expect`\widehat{AB}`.toBuild();
  2313 |         expect`\widecheck{AB}`.toBuild();
  2314 |         expect`\widehat{AB}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2329}","  2327 |
  2328 | describe(""A stretchy and non-shifty accent builder"", function() {
> 2329 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2330 |         expect`\overrightarrow{AB}`.toBuild();
  2331 |         expect`\overrightarrow{AB}^2`.toBuild();
  2332 |         expect`\overrightarrow{AB}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2355}","  2353 |
  2354 | describe(""An under-accent parser"", function() {
> 2355 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2356 |         expect`\underrightarrow{x}`.toParse();
  2357 |         expect`\underrightarrow{x^2}`.toParse();
  2358 |         expect`\underrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2376}","  2374 |
  2375 | describe(""An under-accent builder"", function() {
> 2376 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2377 |         expect`\underrightarrow{x}`.toBuild();
  2378 |         expect`\underrightarrow{x}^2`.toBuild();
  2379 |         expect`\underrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2394}","  2392 |
  2393 | describe(""An extensible arrow parser"", function() {
> 2394 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2395 |         expect`\xrightarrow{x}`.toParse();
  2396 |         expect`\xrightarrow{x^2}`.toParse();
  2397 |         expect`\xrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2416}","  2414 |
  2415 | describe(""An extensible arrow builder"", function() {
> 2416 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2417 |         expect`\xrightarrow{x}`.toBuild();
  2418 |         expect`\xrightarrow{x}^2`.toBuild();
  2419 |         expect`\xrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2435}","  2433 |
  2434 | describe(""A horizontal brace parser"", function() {
> 2435 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2436 |         expect`\overbrace{x}`.toParse();
  2437 |         expect`\overbrace{x^2}`.toParse();
  2438 |         expect`\overbrace{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2458}","  2456 |
  2457 | describe(""A horizontal brace builder"", function() {
> 2458 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2459 |         expect`\overbrace{x}`.toBuild();
  2460 |         expect`\overbrace{x}^2`.toBuild();
  2461 |         expect`\underbrace{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2476}","  2474 |
  2475 | describe(""A boxed parser"", function() {
> 2476 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2477 |         expect`\boxed{x}`.toParse();
  2478 |         expect`\boxed{x^2}`.toParse();
  2479 |         expect`\boxed{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2491}","  2489 |
  2490 | describe(""A boxed builder"", function() {
> 2491 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2492 |         expect`\boxed{x}`.toBuild();
  2493 |         expect`\boxed{x}^2`.toBuild();
  2494 |         expect`\boxed{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2508}","  2506 |
  2507 | describe(""An fbox parser, unlike a boxed parser,"", function() {
> 2508 |     it(""should fail when given math"", function() {
       |    ^ Unknown Test
  2509 |         expect`\fbox{\frac a b}`.not.toParse();
  2510 |     });
  2511 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2514}","  2512 |
  2513 | describe(""A colorbox parser"", function() {
> 2514 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2515 |         expect`\colorbox{red}{a b}`.toParse();
  2516 |         expect`\colorbox{red}{x}^2`.toParse();
  2517 |         expect`\colorbox{red} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2520}","  2518 |     });
  2519 |
> 2520 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2521 |         expect`\colorbox{red}{\alpha}`.not.toParse();
  2522 |         expect`\colorbox{red}{\frac{a}{b}}`.not.toParse();
  2523 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2525}","  2523 |     });
  2524 |
> 2525 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2526 |         expect`\colorbox{red}{a b}`.toParse();
  2527 |         expect`\colorbox{#197}{a b}`.toParse();
  2528 |         expect`\colorbox{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2538}","  2536 |
  2537 | describe(""A colorbox builder"", function() {
> 2538 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2539 |         expect`\colorbox{red}{a b}`.toBuild();
  2540 |         expect`\colorbox{red}{a b}^2`.toBuild();
  2541 |         expect`\colorbox{red} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2550}","  2548 |
  2549 | describe(""An fcolorbox parser"", function() {
> 2550 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2551 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2552 |         expect`\fcolorbox{blue}{yellow}{x}^2`.toParse();
  2553 |         expect`\fcolorbox{blue}{yellow} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2556}","  2554 |     });
  2555 |
> 2556 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2557 |         expect`\fcolorbox{blue}{yellow}{\alpha}`.not.toParse();
  2558 |         expect`\fcolorbox{blue}{yellow}{\frac{a}{b}}`.not.toParse();
  2559 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2561}","  2559 |     });
  2560 |
> 2561 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2562 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2563 |         expect`\fcolorbox{blue}{#197}{a b}`.toParse();
  2564 |         expect`\fcolorbox{blue}{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2574}","  2572 |
  2573 | describe(""A fcolorbox builder"", function() {
> 2574 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2575 |         expect`\fcolorbox{blue}{yellow}{a b}`.toBuild();
  2576 |         expect`\fcolorbox{blue}{yellow}{a b}^2`.toBuild();
  2577 |         expect`\fcolorbox{blue}{yellow} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2586}","  2584 |
  2585 | describe(""A strike-through parser"", function() {
> 2586 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2587 |         expect`\cancel{x}`.toParse();
  2588 |         expect`\cancel{x^2}`.toParse();
  2589 |         expect`\cancel{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2607}","  2605 |
  2606 | describe(""A strike-through builder"", function() {
> 2607 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2608 |         expect`\cancel{x}`.toBuild();
  2609 |         expect`\cancel{x}^2`.toBuild();
  2610 |         expect`\cancel{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2628}","  2626 |
  2627 | describe(""A actuarial angle parser"", function() {
> 2628 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2629 |         expect`a_{\angl{n}}`.toParse();
  2630 |     });
  2631 |     it(""should fail in text mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2631}","  2629 |         expect`a_{\angl{n}}`.toParse();
  2630 |     });
> 2631 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2632 |         expect`\text{a_{\angl{n}}}`.not.toParse();
  2633 |     });
  2634 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2637}","  2635 |
  2636 | describe(""A actuarial angle builder"", function() {
> 2637 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2638 |         expect`a_{\angl{n}}`.toBuild();
  2639 |         expect`a_{\angl{n}i}`.toBuild();
  2640 |         expect`a_{\angl n}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2646}","  2644 |
  2645 | describe(""\\phase"", function() {
> 2646 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2647 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2648 |     });
  2649 |     it(""should not fail in math mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2649}","  2647 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2648 |     });
> 2649 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2650 |         expect`\phase{-78.2^\circ}`.toBuild();
  2651 |     });
  2652 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2655}","  2653 |
  2654 | describe(""A phantom parser"", function() {
> 2655 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2656 |         expect`\phantom{x}`.toParse();
  2657 |         expect`\phantom{x^2}`.toParse();
  2658 |         expect`\phantom{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2675}","  2673 |
  2674 | describe(""A phantom builder"", function() {
> 2675 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2676 |         expect`\phantom{x}`.toBuild();
  2677 |         expect`\phantom{x^2}`.toBuild();
  2678 |         expect`\phantom{x}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2704}","  2702 |
  2703 | describe(""A smash parser"", function() {
> 2704 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2705 |         expect`\smash{x}`.toParse();
  2706 |         expect`\smash{x^2}`.toParse();
  2707 |         expect`\smash{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2729}","  2727 |
  2728 | describe(""A smash builder"", function() {
> 2729 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2730 |         expect`\smash{x}`.toBuild(nonstrictSettings);
  2731 |         expect`\smash{x^2}`.toBuild(nonstrictSettings);
  2732 |         expect`\smash{x}^2`.toBuild(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2753}","  2751 |
  2752 | describe(""An optional argument parser"", function() {
> 2753 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2754 |         // Note this doesn't actually make an optional argument, but still
  2755 |         // should work
  2756 |         expect`\frac[1]{2}{3}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2761}","  2759 |     });
  2760 |
> 2761 |     it(""should work with sqrts with optional arguments"", function() {
       |    ^ Unknown Test
  2762 |         expect`\sqrt[3]{2}`.toParse();
  2763 |     });
  2764 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2765}","  2763 |     });
  2764 |
> 2765 |     it(""should work when the optional argument is missing"", function() {
       |    ^ Unknown Test
  2766 |         expect`\sqrt{2}`.toParse();
  2767 |         expect`\rule{1em}{2em}`.toParse();
  2768 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2770}","  2768 |     });
  2769 |
> 2770 |     it(""should fail when the optional argument is malformed"", function() {
       |    ^ Unknown Test
  2771 |         expect`\rule[1]{2em}{3em}`.not.toParse();
  2772 |     });
  2773 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2774}","  2772 |     });
  2773 |
> 2774 |     it(""should not work if the optional argument isn't closed"", function() {
       |    ^ Unknown Test
  2775 |         expect`\sqrt[`.not.toParse();
  2776 |     });
  2777 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2824}","  2822 | describe(""A substack function"", function() {
  2823 |
> 2824 |     it(""should build"", function() {
       |    ^ Unknown Test
  2825 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2826 |     });
  2827 |     it(""should accommodate spaces in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2827}","  2825 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2826 |     });
> 2827 |     it(""should accommodate spaces in the argument"", function() {
       |    ^ Unknown Test
  2828 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2829 |     });
  2830 |     it(""should accommodate macros in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2830}","  2828 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2829 |     });
> 2830 |     it(""should accommodate macros in the argument"", function() {
       |    ^ Unknown Test
  2831 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2832 |     });
  2833 |     it(""should accommodate an empty argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2833}","  2831 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2832 |     });
> 2833 |     it(""should accommodate an empty argument"", function() {
       |    ^ Unknown Test
  2834 |         expect`\sum_{\substack{}}  P(i,j)`.toBuild();
  2835 |     });
  2836 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2841}","  2839 | describe(""A smallmatrix environment"", function() {
  2840 |
> 2841 |     it(""should build"", function() {
       |    ^ Unknown Test
  2842 |         expect`\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}`.toBuild();
  2843 |     });
  2844 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2849}","  2847 | describe(""A cases environment"", function() {
  2848 |
> 2849 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2850 |         expect`f(a,b)=\begin{cases}a+1&\text{if }b\text{ is odd}\\a&\text{if }b=0\\a-1&\text{otherwise}\end{cases}`
  2851 |             .toParse();
  2852 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2858}","  2856 | describe(""An rcases environment"", function() {
  2857 |
> 2858 |     it(""should build"", function() {
       |    ^ Unknown Test
  2859 |         expect`\begin{rcases} a &\text{if } b \\ c &\text{if } d \end{rcases}⇒…`
  2860 |             .toBuild();
  2861 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2867}","  2865 | describe(""An aligned environment"", function() {
  2866 |
> 2867 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2868 |         expect`\begin{aligned}a&=b&c&=d\\e&=f\end{aligned}`.toParse();
  2869 |     });
  2870 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2871}","  2869 |     });
  2870 |
> 2871 |     it(""should allow cells in brackets"", function() {
       |    ^ Unknown Test
  2872 |         expect`\begin{aligned}[a]&[b]\\ [c]&[d]\end{aligned}`.toParse();
  2873 |     });
  2874 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2875}","  2873 |     });
  2874 |
> 2875 |     it(""should forbid cells in brackets without space"", function() {
       |    ^ Unknown Test
  2876 |         expect`\begin{aligned}[a]&[b]\\[c]&[d]\end{aligned}`.not.toParse();
  2877 |     });
  2878 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2886}","  2884 |
  2885 | describe(""AMS environments"", function() {
> 2886 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  2887 |         expect`\begin{gather}a+b\\c+d\end{gather}`.not.toParse(nonstrictSettings);
  2888 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.not.toParse(nonstrictSettings);
  2889 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.not.toParse(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2899}","  2897 |
  2898 |     const displayMode = new Settings({displayMode: true});
> 2899 |     it(""should build if in display mode"", () => {
       |    ^ Unknown Test
  2900 |         expect`\begin{gather}a+b\\c+d\end{gather}`.toBuild(displayMode);
  2901 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.toBuild(displayMode);
  2902 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2912}","  2910 |     });
  2911 |
> 2912 |     it(""should build an empty environment"", () => {
       |    ^ Unknown Test
  2913 |         expect`\begin{gather}\end{gather}`.toBuild(displayMode);
  2914 |         expect`\begin{gather*}\end{gather*}`.toBuild(displayMode);
  2915 |         expect`\begin{align}\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2924}","  2922 |     });
  2923 |
> 2924 |     it(""{equation} should fail if argument contains two rows."", () => {
       |    ^ Unknown Test
  2925 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2926 |     });
  2927 |     it(""{equation} should fail if argument contains two columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2927}","  2925 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2926 |     });
> 2927 |     it(""{equation} should fail if argument contains two columns."", () => {
       |    ^ Unknown Test
  2928 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2929 |     });
  2930 |     it(""{split} should fail if argument contains three columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2930}","  2928 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2929 |     });
> 2930 |     it(""{split} should fail if argument contains three columns."", () => {
       |    ^ Unknown Test
  2931 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2932 |     });
  2933 |     it(""{array} should fail if body contains more columns than specification."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2933}","  2931 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2932 |     });
> 2933 |     it(""{array} should fail if body contains more columns than specification."", () => {
       |    ^ Unknown Test
  2934 |         expect`\begin{array}{2}a & b & c\\d & e  f\end{array}`.not.toBuild(displayMode);
  2935 |     });
  2936 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2962}","  2960 |
  2961 | describe(""operatorname support"", function() {
> 2962 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2963 |         expect`\operatorname{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2964 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2965 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}_y x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2973}","  2971 |
  2972 | describe(""href and url commands"", function() {
> 2973 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2974 |         expect`\href{http://example.com/}{\sin}`.toBuild(trustSettings);
  2975 |         expect`\url{http://example.com/}`.toBuild(trustSettings);
  2976 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2978}","  2976 |     });
  2977 |
> 2978 |     it(""should allow empty URLs"", function() {
       |    ^ Unknown Test
  2979 |         expect`\href{}{example here}`.toBuild(trustSettings);
  2980 |         expect`\url{}`.toBuild(trustSettings);
  2981 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2991}","  2989 |     });
  2990 |
> 2991 |     it(""should allow spaces single-character URLs"", () => {
       |    ^ Unknown Test
  2992 |         expect`\href %end`.toParseLike(""\\href{%}end"", trustSettings);
  2993 |         expect`\url %end`.toParseLike(""\\url{%}end"", trustSettings);
  2994 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3012}","  3010 |     });
  3011 |
> 3012 |     it(""should not allow unbalanced brace(s) in url"", function() {
       |    ^ Unknown Test
  3013 |         expect`\href{http://example.com/{a}{bar}`.not.toParse();
  3014 |         expect`\href{http://example.com/}a}{bar}`.not.toParse();
  3015 |         expect`\url{http://example.com/{a}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3103}","  3101 |
  3102 | describe(""A raw text parser"", function() {
> 3103 |     it(""should return null for a omitted optional string"", function() {
       |    ^ Unknown Test
  3104 |         expect`\includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}`.toParse();
  3105 |     });
  3106 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3118}","  3116 |     });
  3117 |
> 3118 |     it(""should still parse on unrecognized control sequences"", function() {
       |    ^ Unknown Test
  3119 |         expect`\error`.toParse(noThrowSettings);
  3120 |     });
  3121 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3123}","  3121 |
  3122 |     describe(""should allow unrecognized controls sequences anywhere, including"", function() {
> 3123 |         it(""in superscripts and subscripts"", function() {
       |        ^ Unknown Test
  3124 |             expect`2_\error`.toBuild(noThrowSettings);
  3125 |             expect`3^{\error}_\error`.toBuild(noThrowSettings);
  3126 |             expect`\int\nolimits^\error_\error`.toBuild(noThrowSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3129}","  3127 |         });
  3128 |
> 3129 |         it(""in fractions"", function() {
       |        ^ Unknown Test
  3130 |             expect`\frac{345}{\error}`.toBuild(noThrowSettings);
  3131 |             expect`\frac\error{\error}`.toBuild(noThrowSettings);
  3132 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3134}","  3132 |         });
  3133 |
> 3134 |         it(""in square roots"", function() {
       |        ^ Unknown Test
  3135 |             expect`\sqrt\error`.toBuild(noThrowSettings);
  3136 |             expect`\sqrt{234\error}`.toBuild(noThrowSettings);
  3137 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3139}","  3137 |         });
  3138 |
> 3139 |         it(""in text boxes"", function() {
       |        ^ Unknown Test
  3140 |             expect`\text{\error}`.toBuild(noThrowSettings);
  3141 |         });
  3142 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3209}","  3207 |
  3208 | describe(""The symbol table integrity"", function() {
> 3209 |     it(""should treat certain symbols as synonyms"", function() {
       |    ^ Unknown Test
  3210 |         expect`<`.toBuildLike`\lt`;
  3211 |         expect`>`.toBuildLike`\gt`;
  3212 |         expect`\left<\frac{1}{x}\right>`.toBuildLike`\left\lt\frac{1}{x}\right\gt`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3227}","  3225 |
  3226 | describe(""A macro expander"", function() {
> 3227 |     it(""should produce individual tokens"", function() {
       |    ^ Unknown Test
  3228 |         expect`e^\foo`.toParseLike(""e^1 23"",
  3229 |             new Settings({macros: {""\\foo"": ""123""}}));
  3230 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3232}","  3230 |     });
  3231 |
> 3232 |     it(""should preserve leading spaces inside macro definition"", function() {
       |    ^ Unknown Test
  3233 |         expect`\text{\foo}`.toParseLike(r`\text{ x}`,
  3234 |             new Settings({macros: {""\\foo"": "" x""}}));
  3235 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3237}","  3235 |     });
  3236 |
> 3237 |     it(""should preserve leading spaces inside macro argument"", function() {
       |    ^ Unknown Test
  3238 |         expect`\text{\foo{ x}}`.toParseLike(r`\text{ x}`,
  3239 |             new Settings({macros: {""\\foo"": ""#1""}}));
  3240 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3242}","  3240 |     });
  3241 |
> 3242 |     it(""should ignore expanded spaces in math mode"", function() {
       |    ^ Unknown Test
  3243 |         expect`\foo`.toParseLike(""x"", new Settings({macros: {""\\foo"": "" x""}}));
  3244 |     });
  3245 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3246}","  3244 |     });
  3245 |
> 3246 |     it(""should consume spaces after control-word macro"", function() {
       |    ^ Unknown Test
  3247 |         expect`\text{\foo }`.toParseLike(r`\text{x}`,
  3248 |             new Settings({macros: {""\\foo"": ""x""}}));
  3249 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3251}","  3249 |     });
  3250 |
> 3251 |     it(""should consume spaces after macro with \\relax"", function() {
       |    ^ Unknown Test
  3252 |         expect`\text{\foo }`.toParseLike(r`\text{}`,
  3253 |             new Settings({macros: {""\\foo"": ""\\relax""}}));
  3254 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3256}","  3254 |     });
  3255 |
> 3256 |     it(""should not consume spaces after control-word expansion"", function() {
       |    ^ Unknown Test
  3257 |         expect`\text{\\ }`.toParseLike(r`\text{ }`,
  3258 |             new Settings({macros: {""\\\\"": ""\\relax""}}));
  3259 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3261}","  3259 |     });
  3260 |
> 3261 |     it(""should consume spaces after \\relax"", function() {
       |    ^ Unknown Test
  3262 |         expect`\text{\relax }`.toParseLike`\text{}`;
  3263 |     });
  3264 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3265}","  3263 |     });
  3264 |
> 3265 |     it(""should consume spaces after control-word function"", function() {
       |    ^ Unknown Test
  3266 |         expect`\text{\KaTeX }`.toParseLike`\text{\KaTeX}`;
  3267 |     });
  3268 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3269}","  3267 |     });
  3268 |
> 3269 |     it(""should preserve spaces after control-symbol macro"", function() {
       |    ^ Unknown Test
  3270 |         expect`\text{\% y}`.toParseLike(r`\text{x y}`,
  3271 |             new Settings({macros: {""\\%"": ""x""}}));
  3272 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3274}","  3272 |     });
  3273 |
> 3274 |     it(""should preserve spaces after control-symbol function"", function() {
       |    ^ Unknown Test
  3275 |         expect`\text{\' }`.toParse();
  3276 |     });
  3277 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3278}","  3276 |     });
  3277 |
> 3278 |     it(""should consume spaces between arguments"", function() {
       |    ^ Unknown Test
  3279 |         expect`\text{\foo 1 2}`.toParseLike(r`\text{12end}`,
  3280 |             new Settings({macros: {""\\foo"": ""#1#2end""}}));
  3281 |         expect`\text{\foo {1} {2}}`.toParseLike(r`\text{12end}`,",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3285}","  3283 |     });
  3284 |
> 3285 |     it(""should allow for multiple expansion"", function() {
       |    ^ Unknown Test
  3286 |         expect`1\foo2`.toParseLike(""1aa2"", new Settings({macros: {
  3287 |             ""\\foo"": ""\\bar\\bar"",
  3288 |             ""\\bar"": ""a"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3292}","  3290 |     });
  3291 |
> 3292 |     it(""should allow for multiple expansion with argument"", function() {
       |    ^ Unknown Test
  3293 |         expect`1\foo2`.toParseLike(""12222"", new Settings({macros: {
  3294 |             ""\\foo"": ""\\bar{#1}\\bar{#1}"",
  3295 |             ""\\bar"": ""#1#1"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3299}","  3297 |     });
  3298 |
> 3299 |     it(""should allow for macro argument"", function() {
       |    ^ Unknown Test
  3300 |         expect`\foo\bar`.toParseLike(""(xyz)"", new Settings({macros: {
  3301 |             ""\\foo"": ""(#1)"",
  3302 |             ""\\bar"": ""xyz"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3306}","  3304 |     });
  3305 |
> 3306 |     it(""should allow properly nested group for macro argument"", function() {
       |    ^ Unknown Test
  3307 |         expect`\foo{e^{x_{12}+3}}`.toParseLike(""(e^{x_{12}+3})"",
  3308 |             new Settings({macros: {""\\foo"": ""(#1)""}}));
  3309 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3311}","  3309 |     });
  3310 |
> 3311 |     it(""should delay expansion if preceded by \\expandafter"", function() {
       |    ^ Unknown Test
  3312 |         expect`\expandafter\foo\bar`.toParseLike(""x+y"", new Settings({macros: {
  3313 |             ""\\foo"": ""#1+#2"",
  3314 |             ""\\bar"": ""xy"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3321}","  3319 |     });
  3320 |
> 3321 |     it(""should not expand if preceded by \\noexpand"", function() {
       |    ^ Unknown Test
  3322 |         // \foo is not expanded and interpreted as if its meaning were \relax
  3323 |         expect`\noexpand\foo y`.toParseLike(""y"",
  3324 |             new Settings({macros: {""\\foo"": ""x""}}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3334}","  3332 |     });
  3333 |
> 3334 |     it(""should allow for space macro argument (text version)"", function() {
       |    ^ Unknown Test
  3335 |         expect`\text{\foo\bar}`.toParseLike(r`\text{( )}`, new Settings({macros: {
  3336 |             ""\\foo"": ""(#1)"",
  3337 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3341}","  3339 |     });
  3340 |
> 3341 |     it(""should allow for space macro argument (math version)"", function() {
       |    ^ Unknown Test
  3342 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3343 |             ""\\foo"": ""(#1)"",
  3344 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3348}","  3346 |     });
  3347 |
> 3348 |     it(""should allow for space second argument (text version)"", function() {
       |    ^ Unknown Test
  3349 |         expect`\text{\foo\bar\bar}`.toParseLike(r`\text{( , )}`, new Settings({macros: {
  3350 |             ""\\foo"": ""(#1,#2)"",
  3351 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3355}","  3353 |     });
  3354 |
> 3355 |     it(""should treat \\relax as empty argument"", function() {
       |    ^ Unknown Test
  3356 |         expect`\text{\foo\relax x}`.toParseLike(r`\text{(,x)}`, new Settings({macros: {
  3357 |             ""\\foo"": ""(#1,#2)"",
  3358 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3361}","  3359 |     });
  3360 |
> 3361 |     it(""should allow for space second argument (math version)"", function() {
       |    ^ Unknown Test
  3362 |         expect`\foo\bar\bar`.toParseLike(""(,)"", new Settings({macros: {
  3363 |             ""\\foo"": ""(#1,#2)"",
  3364 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3368}","  3366 |     });
  3367 |
> 3368 |     it(""should allow for empty macro argument"", function() {
       |    ^ Unknown Test
  3369 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3370 |             ""\\foo"": ""(#1)"",
  3371 |             ""\\bar"": """",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3375}","  3373 |     });
  3374 |
> 3375 |     it(""should allow for space function arguments"", function() {
       |    ^ Unknown Test
  3376 |         expect`\frac\bar\bar`.toParseLike(r`\frac{}{}`, new Settings({macros: {
  3377 |             ""\\bar"": "" "",
  3378 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3381}","  3379 |     });
  3380 |
> 3381 |     it(""should build \\overset and \\underset"", function() {
       |    ^ Unknown Test
  3382 |         expect`\overset{f}{\rightarrow} Y`.toBuild();
  3383 |         expect`\underset{f}{\rightarrow} Y`.toBuild();
  3384 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3386}","  3384 |     });
  3385 |
> 3386 |     it(""should build \\iff, \\implies, \\impliedby"", function() {
       |    ^ Unknown Test
  3387 |         expect`X \iff Y`.toBuild();
  3388 |         expect`X \implies Y`.toBuild();
  3389 |         expect`X \impliedby Y`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3392}","  3390 |     });
  3391 |
> 3392 |     it(""should allow aliasing characters"", function() {
       |    ^ Unknown Test
  3393 |         expect`x’=c`.toParseLike(""x'=c"", new Settings({macros: {
  3394 |             ""’"": ""'"",
  3395 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3398}","  3396 |     });
  3397 |
> 3398 |     it(""\\@firstoftwo should consume both, and avoid errors"", function() {
       |    ^ Unknown Test
  3399 |         expect`\@firstoftwo{yes}{no}`.toParseLike`yes`;
  3400 |         expect`\@firstoftwo{yes}{1'_2^3}`.toParseLike`yes`;
  3401 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3403}","  3401 |     });
  3402 |
> 3403 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3404 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3405 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3406 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3408}","  3406 |     });
  3407 |
> 3408 |     it(""\\@ifnextchar should not consume nonspaces"", function() {
       |    ^ Unknown Test
  3409 |         expect`\@ifnextchar!{yes}{no}!!`.toParseLike`yes!!`;
  3410 |         expect`\@ifnextchar!{yes}{no}?!`.toParseLike`no?!`;
  3411 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3413}","  3411 |     });
  3412 |
> 3413 |     it(""\\@ifnextchar should consume spaces"", function() {
       |    ^ Unknown Test
  3414 |         expect`\def\x#1{\@ifnextchar x{yes}{no}}\x{}x\x{} x`
  3415 |             .toParseLike`yesxyesx`;
  3416 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3418}","  3416 |     });
  3417 |
> 3418 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3419 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3420 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3421 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3423}","  3421 |     });
  3422 |
> 3423 |     it(""\\TextOrMath should work immediately"", function() {
       |    ^ Unknown Test
  3424 |         expect`\TextOrMath{text}{math}`.toParseLike`math`;
  3425 |     });
  3426 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3427}","  3425 |     });
  3426 |
> 3427 |     it(""\\TextOrMath should work after other math"", function() {
       |    ^ Unknown Test
  3428 |         expect`x+\TextOrMath{text}{math}`.toParseLike`x+math`;
  3429 |     });
  3430 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3431}","  3429 |     });
  3430 |
> 3431 |     it(""\\TextOrMath should work immediately after \\text"", function() {
       |    ^ Unknown Test
  3432 |         expect`\text{\TextOrMath{text}{math}}`.toParseLike`\text{text}`;
  3433 |     });
  3434 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3435}","  3433 |     });
  3434 |
> 3435 |     it(""\\TextOrMath should work later after \\text"", function() {
       |    ^ Unknown Test
  3436 |         expect`\text{hello \TextOrMath{text}{math}}`.toParseLike`\text{hello text}`;
  3437 |     });
  3438 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3439}","  3437 |     });
  3438 |
> 3439 |     it(""\\TextOrMath should work immediately after \\text ends"", function() {
       |    ^ Unknown Test
  3440 |         expect`\text{\TextOrMath{text}{math}}\TextOrMath{text}{math}`
  3441 |             .toParseLike`\text{text}math`;
  3442 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3444}","  3442 |     });
  3443 |
> 3444 |     it(""\\TextOrMath should work immediately after $"", function() {
       |    ^ Unknown Test
  3445 |         expect`\text{$\TextOrMath{text}{math}$}`.toParseLike`\text{$math$}`;
  3446 |     });
  3447 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3448}","  3446 |     });
  3447 |
> 3448 |     it(""\\TextOrMath should work later after $"", function() {
       |    ^ Unknown Test
  3449 |         expect`\text{$x+\TextOrMath{text}{math}$}`.toParseLike`\text{$x+math$}`;
  3450 |     });
  3451 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3452}","  3450 |     });
  3451 |
> 3452 |     it(""\\TextOrMath should work immediately after $ ends"", function() {
       |    ^ Unknown Test
  3453 |         expect`\text{$\TextOrMath{text}{math}$\TextOrMath{text}{math}}`
  3454 |             .toParseLike`\text{$math$text}`;
  3455 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3457}","  3455 |     });
  3456 |
> 3457 |     it(""\\TextOrMath should work in a macro"", function() {
       |    ^ Unknown Test
  3458 |         expect`\mode\text{\mode$\mode$\mode}\mode`
  3459 |             .toParseLike(r`math\text{text$math$text}math`, new Settings({macros: {
  3460 |                 ""\\mode"": ""\\TextOrMath{text}{math}"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3464}","  3462 |     });
  3463 |
> 3464 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3465 |         expect`\text\mode`.toParseLike(r`\text t`, new Settings({macros:
  3466 |             {""\\mode"": ""\\TextOrMath{t}{m}""}}));
  3467 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3496}","  3494 |     });
  3495 |
> 3496 |     it(""should build Unicode private area characters"", function() {
       |    ^ Unknown Test
  3497 |         expect`\gvertneqq\lvertneqq\ngeqq\ngeqslant\nleqq`.toBuild();
  3498 |         expect`\nleqslant\nshortmid\nshortparallel\varsubsetneq`.toBuild();
  3499 |         expect`\varsubsetneqq\varsupsetneq\varsupsetneqq`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3502}","  3500 |     });
  3501 |
> 3502 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3503 |         expect`\text\mode`.toParseLike(r`\text{text}`, new Settings({macros:
  3504 |             {""\\mode"": ""\\TextOrMath{text}{math}""}}));
  3505 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3507}","  3505 |     });
  3506 |
> 3507 |     it(""\\gdef defines macros"", function() {
       |    ^ Unknown Test
  3508 |         expect`\gdef\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3509 |         expect`\gdef\foo{hi}\foo+\text\foo`.toParseLike`hi+\text{hi}`;
  3510 |         expect`\gdef\foo#1{hi #1}\text{\foo{Alice}, \foo{Bob}}`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3525}","  3523 |     });
  3524 |
> 3525 |     it(""\\gdef defines macros with delimited parameter"", function() {
       |    ^ Unknown Test
  3526 |         expect`\gdef\foo|#1||{#1}\text{\foo| x y ||}`.toParseLike`\text{ x y }`;
  3527 |         expect`\gdef\foo#1|#2{#1+#2}\foo 1 2 |34`.toParseLike`12+34`;
  3528 |         expect`\gdef\foo#1#{#1}\foo1^{23}`.toParseLike`1^{23}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3534}","  3532 |     });
  3533 |
> 3534 |     it(""\\xdef should expand definition"", function() {
       |    ^ Unknown Test
  3535 |         expect`\def\foo{a}\xdef\bar{\foo}\def\foo{}\bar`.toParseLike`a`;
  3536 |         // \def\noexpand\foo{} expands into \def\foo{}
  3537 |         expect`\def\foo{a}\xdef\bar{\def\noexpand\foo{}}\foo\bar\foo`.toParseLike`a`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3544}","  3542 |     });
  3543 |
> 3544 |     it(""\\def should be handled in Parser"", () => {
       |    ^ Unknown Test
  3545 |         expect`\gdef\foo{1}`.toParse(new Settings({maxExpand: 0}));
  3546 |         expect`2^\def\foo{1}2`.not.toParse();
  3547 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3549}","  3547 |     });
  3548 |
> 3549 |     it(""\\def works locally"", () => {
       |    ^ Unknown Test
  3550 |         expect`\def\x{1}\x{\def\x{2}\x{\def\x{3}\x}\x}\x`
  3551 |             .toParseLike`1{2{3}2}1`;
  3552 |         expect`\def\x{1}\x\def\x{2}\x{\def\x{3}\x\def\x{4}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3556}","  3554 |     });
  3555 |
> 3556 |     it(""\\gdef overrides at all levels"", () => {
       |    ^ Unknown Test
  3557 |         expect`\def\x{1}\x{\def\x{2}\x{\gdef\x{3}\x}\x}\x`
  3558 |             .toParseLike`1{2{3}3}3`;
  3559 |         expect`\def\x{1}\x{\def\x{2}\x{\global\def\x{3}\x}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3565}","  3563 |     });
  3564 |
> 3565 |     it(""\\global needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3566 |         expect`\global\def\foo{}\foo`.toParseLike``;
  3567 |         expect`\global\edef\foo{}\foo`.toParseLike``;
  3568 |         expect`\def\DEF{\def}\global\DEF\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3575}","  3573 |     });
  3574 |
> 3575 |     it(""\\long needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3576 |         expect`\long\def\foo{}\foo`.toParseLike``;
  3577 |         expect`\long\edef\foo{}\foo`.toParseLike``;
  3578 |         expect`\long\global\def\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3582}","  3580 |     });
  3581 |
> 3582 |     it(""Macro arguments do not generate groups"", () => {
       |    ^ Unknown Test
  3583 |         expect`\def\x{1}\x\def\foo#1{#1}\foo{\x\def\x{2}\x}\x`
  3584 |             .toParseLike`1122`;
  3585 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3587}","  3585 |     });
  3586 |
> 3587 |     it(""\\textbf arguments do generate groups"", () => {
       |    ^ Unknown Test
  3588 |         expect`\def\x{1}\x\textbf{\x\def\x{2}\x}\x`.toParseLike`1\textbf{12}1`;
  3589 |     });
  3590 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3591}","  3589 |     });
  3590 |
> 3591 |     it(""\\sqrt optional arguments generate groups"", () => {
       |    ^ Unknown Test
  3592 |         expect`\def\x{1}\def\y{1}\x\y\sqrt[\def\x{2}\x]{\def\y{2}\y}\x\y`
  3593 |             .toParseLike`11\sqrt[2]{2}11`;
  3594 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3596}","  3594 |     });
  3595 |
> 3596 |     it(""array cells generate groups"", () => {
       |    ^ Unknown Test
  3597 |         expect`\def\x{1}\begin{matrix}\x&\def\x{2}\x&\x\end{matrix}\x`
  3598 |             .toParseLike`\begin{matrix}1&2&1\end{matrix}1`;
  3599 |         expect`\def\x{1}\begin{matrix}\def\x{2}\x&\x\end{matrix}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3627}","  3625 |     });
  3626 |
> 3627 |     it(""\\let copies the definition"", () => {
       |    ^ Unknown Test
  3628 |         expect`\let\foo=\frac\def\frac{}\foo12`.toParseLike`\frac12`;
  3629 |         expect`\def\foo{1}\let\bar\foo\def\foo{2}\bar`.toParseLike`1`;
  3630 |         expect`\let\foo=\kern\edef\bar{\foo1em}\let\kern=\relax\bar`.toParseLike`\kern1em`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3647}","  3645 |     });
  3646 |
> 3647 |     it(""\\futurelet should parse correctly"", () => {
       |    ^ Unknown Test
  3648 |         expect`\futurelet\foo\frac1{2+\foo}`.toParseLike`\frac1{2+1}`;
  3649 |     });
  3650 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3651}","  3649 |     });
  3650 |
> 3651 |     it(""macros argument can simulate \\let"", () => {
       |    ^ Unknown Test
  3652 |         expect`\int`.toParseLike(""\\int\\limits"", {macros: {
  3653 |             ""\\Oldint"": {
  3654 |                 tokens: [{text: ""\\int"", noexpand: true}],",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3678}","  3676 |     });
  3677 |
> 3678 |     it(""\\newcommand defines new macros"", () => {
       |    ^ Unknown Test
  3679 |         expect`\newcommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3680 |         expect`\newcommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3681 |         // Function detection",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3693}","  3691 |     });
  3692 |
> 3693 |     it(""\\renewcommand redefines macros"", () => {
       |    ^ Unknown Test
  3694 |         expect`\renewcommand\foo{x^2}\foo+\foo`.not.toParse();
  3695 |         expect`\renewcommand{\foo}{x^2}\foo+\foo`.not.toParse();
  3696 |         expect`\renewcommand\bar{x^2}\bar+\bar`.toParseLike`x^2+x^2`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3701}","  3699 |     });
  3700 |
> 3701 |     it(""\\providecommand defines but does not redefine macros"", () => {
       |    ^ Unknown Test
  3702 |         expect`\providecommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3703 |         expect`\providecommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3704 |         expect`\newcommand{\foo}{1}\foo\providecommand{\foo}{2}\foo`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3712}","  3710 |     });
  3711 |
> 3712 |     it(""\\newcommand is local"", () => {
       |    ^ Unknown Test
  3713 |         expect`\newcommand\foo{1}\foo{\renewcommand\foo{2}\foo}\foo`
  3714 |             .toParseLike`1{2}1`;
  3715 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3717}","  3715 |     });
  3716 |
> 3717 |     it(""\\newcommand accepts number of arguments"", () => {
       |    ^ Unknown Test
  3718 |         expect`\newcommand\foo[1]{#1^2}\foo x+\foo{y}`.toParseLike`x^2+y^2`;
  3719 |         expect`\newcommand\foo[10]{#1^2}\foo 0123456789`.toParseLike`0^2`;
  3720 |         expect`\newcommand\foo[x]{}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3726}","  3724 |     // This may change in the future, if we support the extra features of
  3725 |     // \hspace.
> 3726 |     it(""should treat \\hspace, \\hskip like \\kern"", function() {
       |    ^ Unknown Test
  3727 |         expect`\hspace{1em}`.toParseLike`\kern1em`;
  3728 |         expect`\hskip{1em}`.toParseLike`\kern1em`;
  3729 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3731}","  3729 |     });
  3730 |
> 3731 |     it(""should expand \\limsup as expected"", () => {
       |    ^ Unknown Test
  3732 |         expect`\limsup`.toParseLike`\operatorname*{lim\,sup}`;
  3733 |     });
  3734 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3735}","  3733 |     });
  3734 |
> 3735 |     it(""should expand \\liminf as expected"", () => {
       |    ^ Unknown Test
  3736 |         expect`\liminf`.toParseLike`\operatorname*{lim\,inf}`;
  3737 |     });
  3738 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3739}","  3737 |     });
  3738 |
> 3739 |     it(""should expand AMS log-like symbols as expected"", () => {
       |    ^ Unknown Test
  3740 |         expect`\injlim`.toParseLike`\operatorname*{inj\,lim}`;
  3741 |         expect`\projlim`.toParseLike`\operatorname*{proj\,lim}`;
  3742 |         expect`\varlimsup`.toParseLike`\operatorname*{\overline{lim}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3749}","  3747 |     });
  3748 |
> 3749 |     it(""should expand \\plim as expected"", () => {
       |    ^ Unknown Test
  3750 |         expect`\plim`.toParseLike`\mathop{\operatorname{plim}}\limits`;
  3751 |     });
  3752 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3753}","  3751 |     });
  3752 |
> 3753 |     it(""should expand \\argmin as expected"", () => {
       |    ^ Unknown Test
  3754 |         expect`\argmin`.toParseLike`\operatorname*{arg\,min}`;
  3755 |     });
  3756 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3757}","  3755 |     });
  3756 |
> 3757 |     it(""should expand \\argmax as expected"", () => {
       |    ^ Unknown Test
  3758 |         expect`\argmax`.toParseLike`\operatorname*{arg\,max}`;
  3759 |     });
  3760 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3761}","  3759 |     });
  3760 |
> 3761 |     it(""should expand \\bra as expected"", () => {
       |    ^ Unknown Test
  3762 |         expect`\bra{\phi}`.toParseLike`\mathinner{\langle{\phi}|}`;
  3763 |     });
  3764 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3765}","  3763 |     });
  3764 |
> 3765 |     it(""should expand \\ket as expected"", () => {
       |    ^ Unknown Test
  3766 |         expect`\ket{\psi}`.toParseLike`\mathinner{|{\psi}\rangle}`;
  3767 |     });
  3768 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3769}","  3767 |     });
  3768 |
> 3769 |     it(""should expand \\braket as expected"", () => {
       |    ^ Unknown Test
  3770 |         expect`\braket{\phi|\psi}`.toParseLike`\mathinner{\langle{\phi|\psi}\rangle}`;
  3771 |     });
  3772 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3773}","  3771 |     });
  3772 |
> 3773 |     it(""should expand \\Bra as expected"", () => {
       |    ^ Unknown Test
  3774 |         expect`\Bra{\phi}`.toParseLike`\left\langle\phi\right|`;
  3775 |     });
  3776 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3777}","  3775 |     });
  3776 |
> 3777 |     it(""should expand \\Ket as expected"", () => {
       |    ^ Unknown Test
  3778 |         expect`\Ket{\psi}`.toParseLike`\left|\psi\right\rangle`;
  3779 |     });
  3780 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3781}","  3779 |     });
  3780 |
> 3781 |     it(""should expand \\Braket as expected"", () => {
       |    ^ Unknown Test
  3782 |         expect`\Braket{ ϕ | \frac{∂^2}{∂ t^2} | ψ }`.toParseLike`\left\langle ϕ\,\middle\vert\,\frac{∂^2}{∂ t^2}\,\middle\vert\, ψ\right\rangle`;
  3783 |     });
  3784 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3785}","  3783 |     });
  3784 |
> 3785 |     it(""should expand \\set as expected"", () => {
       |    ^ Unknown Test
  3786 |         expect`\set{x|x<5|S|}`.toParseLike`\{\,x\mid x<5|S|\,\}`;
  3787 |         // \set doesn't support special || or \| handling
  3788 |         expect`\set{x||x<5|S|}`.toParseLike`\{\,x\mid |x<5|S|\,\}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3792}","  3790 |     });
  3791 |
> 3792 |     it(""should expand \\Set as expected"", () => {
       |    ^ Unknown Test
  3793 |         expect`\Set{ x | x<\frac 1 2 |S| }`
  3794 |         .toParseLike`\left\{\: x\;\middle\vert\; x<\frac 1 2 |S| \:\right\}`;
  3795 |         expect`\Set{ x || x<\frac 1 2 |S| }`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3805}","  3803 |     const displayMode = new Settings({displayMode: true});
  3804 |
> 3805 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  3806 |         expect`\tag{hi}x+y`.not.toParse();
  3807 |     });
  3808 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3809}","  3807 |     });
  3808 |
> 3809 |     it(""should fail with multiple tags"", () => {
       |    ^ Unknown Test
  3810 |         expect`\tag{1}\tag{2}x+y`.not.toParse(displayMode);
  3811 |     });
  3812 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3813}","  3811 |     });
  3812 |
> 3813 |     it(""should fail with multiple tags in one row"", () => {
       |    ^ Unknown Test
  3814 |         expect`\begin{align}\tag{1}x+y\tag{2}\end{align}`.not.toParse(displayMode);
  3815 |     });
  3816 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3817}","  3815 |     });
  3816 |
> 3817 |     it(""should work with one tag per row"", () => {
       |    ^ Unknown Test
  3818 |         expect`\begin{align}\tag{1}x\\&+y\tag{2}\end{align}`.toParse(displayMode);
  3819 |     });
  3820 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3821}","  3819 |     });
  3820 |
> 3821 |     it(""should work with \\nonumber/\\notag"", () => {
       |    ^ Unknown Test
  3822 |         expect`\begin{align}\tag{1}\nonumber x\\&+y\notag\end{align}`
  3823 |         .toParseLike(r`\begin{align}\tag{1}x\\&+y\nonumber\end{align}`, displayMode);
  3824 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3826}","  3824 |     });
  3825 |
> 3826 |     it(""should build"", () => {
       |    ^ Unknown Test
  3827 |         expect`\tag{hi}x+y`.toBuild(displayMode);
  3828 |     });
  3829 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3830}","  3828 |     });
  3829 |
> 3830 |     it(""should ignore location of \\tag"", () => {
       |    ^ Unknown Test
  3831 |         expect`\tag{hi}x+y`.toParseLike(r`x+y\tag{hi}`, displayMode);
  3832 |     });
  3833 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3834}","  3832 |     });
  3833 |
> 3834 |     it(""should handle \\tag* like \\tag"", () => {
       |    ^ Unknown Test
  3835 |         expect`\tag{hi}x+y`.toParseLike(r`\tag*{({hi})}x+y`, displayMode);
  3836 |     });
  3837 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3863}","  3861 |
  3862 | describe(""\\@binrel automatic bin/rel/ord"", () => {
> 3863 |     it(""should generate proper class"", () => {
       |    ^ Unknown Test
  3864 |         expect`L\@binrel+xR`.toParseLike`L\mathbin xR`;
  3865 |         expect`L\@binrel=xR`.toParseLike`L\mathrel xR`;
  3866 |         expect`L\@binrel xxR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3872}","  3870 |     });
  3871 |
> 3872 |     it(""should base on just first character in group"", () => {
       |    ^ Unknown Test
  3873 |         expect`L\@binrel{+x}xR`.toParseLike`L\mathbin xR`;
  3874 |         expect`L\@binrel{=x}xR`.toParseLike`L\mathrel xR`;
  3875 |         expect`L\@binrel{xx}xR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3892}","  3890 |
  3891 | describe(""Unicode accents"", function() {
> 3892 |     it(""should parse Latin-1 letters in math mode"", function() {
       |    ^ Unknown Test
  3893 |         // TODO(edemaine): Unsupported Latin-1 letters in math: ÇÐÞçðþ
  3894 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ`
  3895 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3912}","  3910 |     });
  3911 |
> 3912 |     it(""should parse Latin-1 letters in text mode"", function() {
       |    ^ Unknown Test
  3913 |         // TODO(edemaine): Unsupported Latin-1 letters in text: ÇÐÞçðþ
  3914 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}`
  3915 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3932}","  3930 |     });
  3931 |
> 3932 |     it(""should support \\aa in text mode"", function() {
       |    ^ Unknown Test
  3933 |         expect`\text{\aa\AA}`.toParseLike(r`\text{\r a\r A}`, strictSettings);
  3934 |         expect`\aa`.not.toParse(strictSettings);
  3935 |         expect`\Aa`.not.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3943}","  3941 |     });
  3942 |
> 3943 |     it(""should parse multi-accented characters"", function() {
       |    ^ Unknown Test
  3944 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3945 |         // Doesn't parse quite the same as
  3946 |         // ""\\text{\\'{\\^a}\\'{\\=a}\\'{\\u a}}"" because of the ordgroups.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3949}","  3947 |     });
  3948 |
> 3949 |     it(""should parse accented i's and j's"", function() {
       |    ^ Unknown Test
  3950 |         expect`íȷ́`.toParseLike(r`\acute ı\acute ȷ`, nonstrictSettings);
  3951 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3952 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3956}","  3954 |
  3955 | describe(""Unicode"", function() {
> 3956 |     it(""should parse negated relations"", function() {
       |    ^ Unknown Test
  3957 |         expect`∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌`.toParse(strictSettings);
  3958 |     });
  3959 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3960}","  3958 |     });
  3959 |
> 3960 |     it(""should build relations"", function() {
       |    ^ Unknown Test
  3961 |         expect`∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌`.toBuild(strictSettings);
  3962 |     });
  3963 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3964}","  3962 |     });
  3963 |
> 3964 |     it(""should parse relations"", function() {
       |    ^ Unknown Test
  3965 |         // These characters are not in the KaTeX fonts. So they build with an error message.
  3966 |         expect`⊶⊷`.toParse();
  3967 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3969}","  3967 |     });
  3968 |
> 3969 |     it(""should build big operators"", function() {
       |    ^ Unknown Test
  3970 |         expect`∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆`.toBuild(strictSettings);
  3971 |     });
  3972 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3973}","  3971 |     });
  3972 |
> 3973 |     it(""should build more relations"", function() {
       |    ^ Unknown Test
  3974 |         expect`⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋`.toBuild(strictSettings);
  3975 |     });
  3976 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3987}","  3985 |     });
  3986 |
> 3987 |     it(""should build arrows"", function() {
       |    ^ Unknown Test
  3988 |         expect`←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉`.toBuild(strictSettings);
  3989 |     });
  3990 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3991}","  3989 |     });
  3990 |
> 3991 |     it(""should build more arrows"", function() {
       |    ^ Unknown Test
  3992 |         expect`⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼`.toBuild(strictSettings);
  3993 |     });
  3994 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4077}","  4075 |
  4076 | describe(""The maxExpand setting"", () => {
> 4077 |     it(""should prevent expansion"", () => {
       |    ^ Unknown Test
  4078 |         expect`\gdef\foo{1}\foo`.toParse();
  4079 |         expect`\gdef\foo{1}\foo`.toParse(new Settings({maxExpand: 1}));
  4080 |         expect`\gdef\foo{1}\foo`.not.toParse(new Settings({maxExpand: 0}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4083}","  4081 |     });
  4082 |
> 4083 |     it(""should prevent infinite loops"", () => {
       |    ^ Unknown Test
  4084 |         expect`\gdef\foo{\foo}\foo`.not.toParse(
  4085 |             new Settings({maxExpand: 10}));
  4086 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4088}","  4086 |     });
  4087 |
> 4088 |     it(""should prevent exponential blowup via \\edef"", () => {
       |    ^ Unknown Test
  4089 |         expect`\edef0{x}\edef0{00}\edef0{00}\edef0{00}\edef0{00}`.not.toParse(
  4090 |             new Settings({maxExpand: 10}));
  4091 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4139}","  4137 |
  4138 | describe(""Newlines via \\\\ and \\newline"", function() {
> 4139 |     it(""should build \\\\ without the optional argument and \\newline the same"", () => {
       |    ^ Unknown Test
  4140 |         expect`hello \\ world`.toBuildLike`hello \newline world`;
  4141 |     });
  4142 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4143}","  4141 |     });
  4142 |
> 4143 |     it(""should not allow \\newline to scan for an optional size argument"", () => {
       |    ^ Unknown Test
  4144 |         expect`hello \newline[w]orld`.toBuild();
  4145 |     });
  4146 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4147}","  4145 |     });
  4146 |
> 4147 |     it(""should not allow \\cr at top level"", () => {
       |    ^ Unknown Test
  4148 |         expect`hello \cr world`.not.toBuild();
  4149 |     });
  4150 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4162}","  4160 |
  4161 | describe(""Symbols"", function() {
> 4162 |     it(""should parse \\text{\\i\\j}"", () => {
       |    ^ Unknown Test
  4163 |         expect`\text{\i\j}`.toBuild(strictSettings);
  4164 |     });
  4165 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4166}","  4164 |     });
  4165 |
> 4166 |     it(""should parse spacing functions in math or text mode"", () => {
       |    ^ Unknown Test
  4167 |         expect`A\;B\,C\nobreakspace \text{A\;B\,C\nobreakspace}`.toBuild(strictSettings);
  4168 |     });
  4169 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4170}","  4168 |     });
  4169 |
> 4170 |     it(""should build \\minuso"", () => {
       |    ^ Unknown Test
  4171 |         expect`\\minuso`.toBuild(strictSettings);
  4172 |     });
  4173 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4174}","  4172 |     });
  4173 |
> 4174 |     it(""should render ligature commands like their unicode characters"", () => {
       |    ^ Unknown Test
  4175 |         expect`\text{\ae\AE\oe\OE\o\O\ss}`.toBuildLike(r`\text{æÆœŒøØß}`, strictSettings);
  4176 |     });
  4177 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4180}","  4178 |
  4179 | describe(""strict setting"", function() {
> 4180 |     it(""should allow unicode text when not strict"", () => {
       |    ^ Unknown Test
  4181 |         expect`é`.toParse(new Settings(nonstrictSettings));
  4182 |         expect`試`.toParse(new Settings(nonstrictSettings));
  4183 |         expect`é`.toParse(new Settings({strict: ""ignore""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4191}","  4189 |     });
  4190 |
> 4191 |     it(""should forbid unicode text when strict"", () => {
       |    ^ Unknown Test
  4192 |         expect`é`.not.toParse(new Settings({strict: true}));
  4193 |         expect`試`.not.toParse(new Settings({strict: true}));
  4194 |         expect`é`.not.toParse(new Settings({strict: ""error""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4202}","  4200 |     });
  4201 |
> 4202 |     it(""should warn about unicode text when default"", () => {
       |    ^ Unknown Test
  4203 |         expect`é`.toWarn(new Settings());
  4204 |         expect`試`.toWarn(new Settings());
  4205 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4207}","  4205 |     });
  4206 |
> 4207 |     it(""should always allow unicode text in text mode"", () => {
       |    ^ Unknown Test
  4208 |         expect`\text{é試}`.toParse(nonstrictSettings);
  4209 |         expect`\text{é試}`.toParse(strictSettings);
  4210 |         expect`\text{é試}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4213}","  4211 |     });
  4212 |
> 4213 |     it(""should warn about top-level \\newline in display mode"", () => {
       |    ^ Unknown Test
  4214 |         expect`x\\y`.toWarn(new Settings({displayMode: true}));
  4215 |         expect`x\\y`.toParse(new Settings({displayMode: false}));
  4216 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4262}","  4260 |         }).toThrow(errorMessage);
  4261 |     });
> 4262 |     it(""should add font metrics to metrics map and render successfully"", () => {
       |    ^ Unknown Test
  4263 |         const mockMetrics = {};
  4264 |         // mock font metrics for the symbols that we added previously
  4265 |         for (let number = 0; number <= 9; number++) {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4298}","  4296 |
  4297 | describe(""\\relax"", () => {
> 4298 |     it(""should stop the expansion"", () => {
       |    ^ Unknown Test
  4299 |         expect`\kern2\relax em`.not.toParse();
  4300 |     });
  4301 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4304}","  4302 |
  4303 | describe(""\\emph"", () => {
> 4304 |     it(""should toggle italics"", () => {
       |    ^ Unknown Test
  4305 |         expect`\emph{foo \emph{bar}}`.toBuildLike`\textit{foo \textup{bar}}`;
  4306 |     });
  4307 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4308}","  4306 |     });
  4307 |
> 4308 |     it(""should toggle italics within text"", () => {
       |    ^ Unknown Test
  4309 |         expect`\text{\emph{foo \emph{bar}}}`.toBuildLike`\text{\textit{foo \textup{bar}}}`;
  4310 |     });
  4311 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4312}","  4310 |     });
  4311 |
> 4312 |     it(""should toggle italics within textup"", () => {
       |    ^ Unknown Test
  4313 |         expect`\textup{\emph{foo \emph{bar}}}`.toBuildLike`\textup{\textit{foo \textup{bar}}}`;
  4314 |     });
  4315 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4316}","  4314 |     });
  4315 |
> 4316 |     it(""should toggle italics within textit"", () => {
       |    ^ Unknown Test
  4317 |         expect`\textit{\emph{foo \emph{bar}}}`.toBuildLike`\textit{\textup{foo \textit{bar}}}`;
  4318 |     });
  4319 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 132}","  130 |         });
  131 |         it(""complains about mismatched \\verb with end of line"", function() {
> 132 |             expect(""\\verb|hello\nworld|"").toFailWithParseError(
      |            ^ Redundant Assertion
  133 |                 ""\\verb ended by end of line instead of matching delimiter"");
  134 |         });
  135 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 291}","  289 |     describe(""#_innerLex"", function() {
  290 |         it(""rejects lone surrogate char"", function() {
> 291 |             expect(""\udcba "").toFailWithParseError(
      |            ^ Redundant Assertion
  292 |                    ""Unexpected character: '\udcba' at position 1:"" +
  293 |                     "" \udcba\u0332 "");
  294 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 296}","  294 |         });
  295 |         it(""rejects lone backslash at end of input"", function() {
> 296 |             expect(""\\"").toFailWithParseError(
      |            ^ Redundant Assertion
  297 |                    ""Unexpected character: '\\' at position 1: \\̲"");
  298 |         });
  299 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 8, 'line': 328}","  326 | describe(""Unicode accents"", function() {
  327 |     it(""should return error for invalid combining characters"", function() {
> 328 |         expect(""A\u0328"").toFailWithParseError(
      |        ^ Redundant Assertion
  329 |             ""Unknown accent ' ̨' at position 1: Ą̲̲"");
  330 |     });
  331 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 6}","  4 |
  5 |     describe(""#handleInfixNodes"", function() {
> 6 |         it(""rejects repeated infix operators"", function() {
    |        ^ Unknown Test
  7 |             expect`1\over 2\over 3`.toFailWithParseError(
  8 |                    ""only one infix operator per group at position 9: "" +
  9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 11}","   9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");
  10 |         });
> 11 |         it(""rejects conflicting infix operators"", function() {
     |        ^ Unknown Test
  12 |             expect`1\over 2\choose 3`.toFailWithParseError(
  13 |                    ""only one infix operator per group at position 9: "" +
  14 |                    ""1\\over 2\\̲c̲h̲o̲o̲s̲e̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 19}","  17 |
  18 |     describe(""#handleSupSubscript"", function() {
> 19 |         it(""rejects ^ at end of group"", function() {
     |        ^ Unknown Test
  20 |             expect`{1^}`.toFailWithParseError(
  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 23}","  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });
> 23 |         it(""rejects _ at end of input"", function() {
     |        ^ Unknown Test
  24 |             expect`1_`.toFailWithParseError(
  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 27}","  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });
> 27 |         it(""rejects \\sqrt as argument to ^"", function() {
     |        ^ Unknown Test
  28 |             expect`1^\sqrt{2}`.toFailWithParseError(
  29 |                    ""Got function '\\sqrt' with no arguments as superscript"" +
  30 |                    "" at position 3: 1^\\̲s̲q̲r̲t̲{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 35}","  33 |
  34 |     describe(""#parseAtom"", function() {
> 35 |         it(""rejects \\limits without operator"", function() {
     |        ^ Unknown Test
  36 |             expect`\alpha\limits\omega`.toFailWithParseError(
  37 |                    ""Limit controls must follow a math operator"" +
  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 40}","  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");
  39 |         });
> 40 |         it(""rejects \\limits at the beginning of the input"", function() {
     |        ^ Unknown Test
  41 |             expect`\limits\omega`.toFailWithParseError(
  42 |                    ""Limit controls must follow a math operator"" +
  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 45}","  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");
  44 |         });
> 45 |         it(""rejects double superscripts"", function() {
     |        ^ Unknown Test
  46 |             expect`1^2^3`.toFailWithParseError(
  47 |                    ""Double superscript at position 4: 1^2^̲3"");
  48 |             expect`1^{2+3}_4^5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 51}","  49 |                    ""Double superscript at position 10: 1^{2+3}_4^̲5"");
  50 |         });
> 51 |         it(""rejects double superscripts involving primes"", function() {
     |        ^ Unknown Test
  52 |             expect`1'_2^3`.toFailWithParseError(
  53 |                    ""Double superscript at position 5: 1'_2^̲3"");
  54 |             expect`1^2'`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 61}","  59 |                    ""Double superscript at position 5: 1'_2'̲"");
  60 |         });
> 61 |         it(""rejects double subscripts"", function() {
     |        ^ Unknown Test
  62 |             expect`1_2_3`.toFailWithParseError(
  63 |                    ""Double subscript at position 4: 1_2_̲3"");
  64 |             expect`1_{2+3}^4_5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 70}","  68 |
  69 |     describe(""#parseImplicitGroup"", function() {
> 70 |         it(""reports unknown environments"", function() {
     |        ^ Unknown Test
  71 |             expect`\begin{foo}bar\end{foo}`.toFailWithParseError(
  72 |                    ""No such environment: foo at position 7:"" +
  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 75}","  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");
  74 |         });
> 75 |         it(""reports mismatched environments"", function() {
     |        ^ Unknown Test
  76 |             expect`\begin{pmatrix}1&2\\3&4\end{bmatrix}+5`
  77 |                 .toFailWithParseError(
  78 |                    ""Mismatch: \\begin{pmatrix} matched by \\end{bmatrix}"" +",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 84}","  82 |
  83 |     describe(""#parseFunction"", function() {
> 84 |         it(""rejects math-mode functions in text mode"", function() {
     |        ^ Unknown Test
  85 |             expect`\text{\sqrt2 is irrational}`.toFailWithParseError(
  86 |                 ""Can't use function '\\sqrt' in text mode"" +
  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 89}","  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");
  88 |         });
> 89 |         it(""rejects text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  90 |             expect`$`.toFailWithParseError(
  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 93}","  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });
> 93 |         it(""rejects strict-mode text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  94 |             expect`\'echec`.toFailWithParseError(""LaTeX-incompatible input "" +
  95 |                 ""and strict mode is set to 'error': LaTeX's accent \\' works "" +
  96 |                 ""only in text mode [mathVsTextAccents]"", strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 101}","   99 |
  100 |     describe(""#parseArguments"", function() {
> 101 |         it(""complains about missing argument at end of input"", function() {
      |        ^ Unknown Test
  102 |             expect`2\sqrt`.toFailWithParseError(
  103 |                    ""Expected group as argument to '\\sqrt'"" +
  104 |                    "" at end of input: 2\\sqrt"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 106}","  104 |                    "" at end of input: 2\\sqrt"");
  105 |         });
> 106 |         it(""complains about missing argument at end of group"", function() {
      |        ^ Unknown Test
  107 |             expect`1^{2\sqrt}`.toFailWithParseError(
  108 |                    ""Expected group as argument to '\\sqrt'"" +
  109 |                    "" at position 10: 1^{2\\sqrt}̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 111}","  109 |                    "" at position 10: 1^{2\\sqrt}̲"");
  110 |         });
> 111 |         it(""complains about functions as arguments to others"", function() {
      |        ^ Unknown Test
  112 |             expect`\sqrt\over2`.toFailWithParseError(
  113 |                    ""Got function '\\over' with no arguments as argument to"" +
  114 |                    "" '\\sqrt' at position 6: \\sqrt\\̲o̲v̲e̲r̲2"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 119}","  117 |
  118 |     describe(""#parseGroup"", function() {
> 119 |         it(""complains about undefined control sequence"", function() {
      |        ^ Unknown Test
  120 |             expect`\xyz`.toFailWithParseError(
  121 |                    ""Undefined control sequence: \\xyz"" +
  122 |                    "" at position 1: \\̲x̲y̲z̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 127}","  125 |
  126 |     describe(""#verb"", function() {
> 127 |         it(""complains about mismatched \\verb with end of string"", function() {
      |        ^ Unknown Test
  128 |             expect`\verb|hello`.toFailWithParseError(
  129 |                 ""\\verb ended by end of line instead of matching delimiter"");
  130 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 142}","  140 |
  141 |     describe(""#parseInput expecting EOF"", function() {
> 142 |         it(""complains about extra }"", function() {
      |        ^ Unknown Test
  143 |             expect`{1+2}}`.toFailWithParseError(
  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 146}","  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });
> 146 |         it(""complains about extra \\end"", function() {
      |        ^ Unknown Test
  147 |             expect`x\end{matrix}`.toFailWithParseError(
  148 |                    ""Expected 'EOF', got '\\end' at position 2:"" +
  149 |                    "" x\\̲e̲n̲d̲{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 151}","  149 |                    "" x\\̲e̲n̲d̲{matrix}"");
  150 |         });
> 151 |         it(""complains about top-level &"", function() {
      |        ^ Unknown Test
  152 |             expect`1&2`.toFailWithParseError(
  153 |                    ""Expected 'EOF', got '&' at position 2: 1&̲2"");
  154 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 158}","  156 |
  157 |     describe(""#parseImplicitGroup expecting \\right"", function() {
> 158 |         it(""rejects missing \\right"", function() {
      |        ^ Unknown Test
  159 |             expect`\left(1+2)`.toFailWithParseError(
  160 |                    ""Expected '\\right', got 'EOF' at end of input:"" +
  161 |                    "" \\left(1+2)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 163}","  161 |                    "" \\left(1+2)"");
  162 |         });
> 163 |         it(""rejects incorrectly scoped \\right"", function() {
      |        ^ Unknown Test
  164 |             expect`{\left(1+2}\right)`.toFailWithParseError(
  165 |                    ""Expected '\\right', got '}' at position 11:"" +
  166 |                    "" {\\left(1+2}̲\\right)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 174}","  172 |
  173 |     describe(""#parseSpecialGroup expecting braces"", function() {
> 174 |         it(""complains about missing { for color"", function() {
      |        ^ Unknown Test
  175 |             expect`\textcolor#ffffff{text}`.toFailWithParseError(
  176 |                    ""Invalid color: '#' at position 11:"" +
  177 |                    "" \\textcolor#̲ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 179}","  177 |                    "" \\textcolor#̲ffffff{text}"");
  178 |         });
> 179 |         it(""complains about missing { for size"", function() {
      |        ^ Unknown Test
  180 |             expect`\rule{1em}[2em]`.toFailWithParseError(
  181 |                    ""Invalid size: '[' at position 11: \\rule{1em}[̲2em]"");
  182 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 184}","  182 |         });
  183 |         // Can't test for the [ of an optional group since it's optional
> 184 |         it(""complains about missing } for color"", function() {
      |        ^ Unknown Test
  185 |             expect`\textcolor{#ffffff{text}`.toFailWithParseError(
  186 |                    ""Unexpected end of input in a macro argument,"" +
  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 189}","  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");
  188 |         });
> 189 |         it(""complains about missing ] for size"", function() {
      |        ^ Unknown Test
  190 |             expect`\rule[1em{2em}{3em}`.toFailWithParseError(
  191 |                    ""Unexpected end of input in a macro argument,"" +
  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 194}","  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");
  193 |         });
> 194 |         it(""complains about missing ] for size at end of input"", function() {
      |        ^ Unknown Test
  195 |             expect`\rule[1em`.toFailWithParseError(
  196 |                    ""Unexpected end of input in a macro argument,"" +
  197 |                    "" expected ']' at end of input: \\rule[1em"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 199}","  197 |                    "" expected ']' at end of input: \\rule[1em"");
  198 |         });
> 199 |         it(""complains about missing } for color at end of input"", function() {
      |        ^ Unknown Test
  200 |             expect`\textcolor{#123456`.toFailWithParseError(
  201 |                    ""Unexpected end of input in a macro argument,"" +
  202 |                    "" expected '}' at end of input: …xtcolor{#123456"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 207}","  205 |
  206 |     describe(""#parseGroup expecting }"", function() {
> 207 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  208 |             expect`\sqrt{2`.toFailWithParseError(
  209 |                    ""Expected '}', got 'EOF' at end of input: \\sqrt{2"");
  210 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 214}","  212 |
  213 |     describe(""#parseOptionalGroup expecting ]"", function() {
> 214 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  215 |             expect`\sqrt[3`.toFailWithParseError(
  216 |                    ""Unexpected end of input in a macro argument,"" +
  217 |                    "" expected ']' at end of input: \\sqrt[3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 219}","  217 |                    "" expected ']' at end of input: \\sqrt[3"");
  218 |         });
> 219 |         it(""before group"", function() {
      |        ^ Unknown Test
  220 |             expect`\sqrt[3{2}`.toFailWithParseError(
  221 |                    ""Unexpected end of input in a macro argument,"" +
  222 |                    "" expected ']' at end of input: \\sqrt[3{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 231}","  229 |
  230 |     describe(""parseArray"", function() {
> 231 |         it(""rejects missing \\end"", function() {
      |        ^ Unknown Test
  232 |             expect`\begin{matrix}1`.toFailWithParseError(
  233 |                    ""Expected & or \\\\ or \\cr or \\end at end of input:"" +
  234 |                    "" \\begin{matrix}1"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 236}","  234 |                    "" \\begin{matrix}1"");
  235 |         });
> 236 |         it(""rejects incorrectly scoped \\end"", function() {
      |        ^ Unknown Test
  237 |             expect`{\begin{matrix}1}\end{matrix}`.toFailWithParseError(
  238 |                    ""Expected & or \\\\ or \\cr or \\end at position 17:"" +
  239 |                    "" …\\begin{matrix}1}̲\\end{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 244}","  242 |
  243 |     describe(""array environment"", function() {
> 244 |         it(""rejects unknown column types"", function() {
      |        ^ Unknown Test
  245 |             expect`\begin{array}{cba}\end{array}`.toFailWithParseError(
  246 |                    ""Unknown column alignment: b at position 16:"" +
  247 |                    "" \\begin{array}{cb̲a}\\end{array}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 256}","  254 |
  255 |     describe(""delimiter functions"", function() {
> 256 |         it(""reject invalid opening delimiters"", function() {
      |        ^ Unknown Test
  257 |             expect`\bigl 1 + 2 \bigr`.toFailWithParseError(
  258 |                    ""Invalid delimiter '1' after '\\bigl' at position 7:"" +
  259 |                    "" \\bigl 1̲ + 2 \\bigr"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 261}","  259 |                    "" \\bigl 1̲ + 2 \\bigr"");
  260 |         });
> 261 |         it(""reject invalid closing delimiters"", function() {
      |        ^ Unknown Test
  262 |             expect`\bigl(1+2\bigr=3`.toFailWithParseError(
  263 |                    ""Invalid delimiter '=' after '\\bigr' at position 15:"" +
  264 |                    "" \\bigl(1+2\\bigr=̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 266}","  264 |                    "" \\bigl(1+2\\bigr=̲3"");
  265 |         });
> 266 |         it(""reject group opening delimiters"", function() {
      |        ^ Unknown Test
  267 |             expect`\bigl{(}1+2\bigr)3`.toFailWithParseError(
  268 |                    ""Invalid delimiter type 'ordgroup' at position 6:"" +
  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 271}","  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");
  270 |         });
> 271 |         it(""reject group closing delimiters"", function() {
      |        ^ Unknown Test
  272 |             expect`\bigl(1+2\bigr{)}3`.toFailWithParseError(
  273 |                    ""Invalid delimiter type 'ordgroup' at position 15:"" +
  274 |                    "" \\bigl(1+2\\bigr{̲)̲}̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 279}","  277 |
  278 |     describe(""\\begin and \\end"", function() {
> 279 |         it(""reject invalid environment names"", function() {
      |        ^ Unknown Test
  280 |             expect`\begin x\end y`.toFailWithParseError(
  281 |                    ""No such environment: x at position 8: \\begin x̲\\end y"");
  282 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 302}","  300 |
  301 |     describe(""#_innerLexColor"", function() {
> 302 |         it(""reject 3-digit hex notation without #"", function() {
      |        ^ Unknown Test
  303 |             expect`\textcolor{1a2}{foo}`.toFailWithParseError(
  304 |                    ""Invalid color: '1a2'"" +
  305 |                    "" at position 11: \\textcolor{̲1̲a̲2̲}̲{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 310}","  308 |
  309 |     describe(""#_innerLexSize"", function() {
> 310 |         it(""reject size without unit"", function() {
      |        ^ Unknown Test
  311 |             expect`\rule{0}{2em}`.toFailWithParseError(
  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 314}","  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });
> 314 |         it(""reject size with bogus unit"", function() {
      |        ^ Unknown Test
  315 |             expect`\rule{1au}{2em}`.toFailWithParseError(
  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 318}","  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });
> 318 |         it(""reject size without number"", function() {
      |        ^ Unknown Test
  319 |             expect`\rule{em}{2em}`.toFailWithParseError(
  320 |                    ""Invalid size: 'em' at position 6: \\rule{̲e̲m̲}̲{2em}"");
  321 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 5, 'column': 4, 'index': 124}","  3 |
  4 | describe(""Symbols and macros"", () => {
> 5 |     for (const macro in macros) {
    |    ^ Conditional Test Logic
  6 |         if (!macros.hasOwnProperty(macro)) {
  7 |             continue;
  8 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 6, 'column': 8, 'index': 162}","  4 | describe(""Symbols and macros"", () => {
  5 |     for (const macro in macros) {
> 6 |         if (!macros.hasOwnProperty(macro)) {
    |        ^ Conditional Test Logic
  7 |             continue;
  8 |         }
  9 |         it(`macro ${macro} should not shadow a symbol`, () => {",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 10, 'column': 12, 'index': 307}","   8 |         }
   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
> 10 |             for (const kind in symbols) {
     |            ^ Conditional Test Logic
  11 |                 if (!symbols.hasOwnProperty(kind)) {
  12 |                     continue;
  13 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 11, 'column': 16, 'index': 353}","   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
  10 |             for (const kind in symbols) {
> 11 |                 if (!symbols.hasOwnProperty(kind)) {
     |                ^ Conditional Test Logic
  12 |                     continue;
  13 |                 }
  14 |                 expect(symbols[kind][macro]).toBeFalsy();",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 18, 'column': 12, 'index': 481}","  16 |                   splitAtDelimiters(actual, delimiters);
  17 |
> 18 |             if (split.length !== result.length) {
     |            ^ Conditional Test Logic
  19 |                 message.pass = false;
  20 |                 message.message = () => ""Different number of splits: "" +
  21 |                     split.length + "" vs. "" + result.length + "" ("" +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 27, 'column': 12, 'index': 861}","  25 |             }
  26 |
> 27 |             for (let i = 0; i < split.length; i++) {
     |            ^ Conditional Test Logic
  28 |                 const real = split[i];
  29 |                 const correct = result[i];
  30 |",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 34, 'column': 16, 'index': 1061}","  32 |                 let diff;
  33 |
> 34 |                 if (real.type !== correct.type) {
     |                ^ Conditional Test Logic
  35 |                     good = false;
  36 |                     diff = ""type"";
  37 |                 } else if (real.data !== correct.data) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 37, 'column': 23, 'index': 1187}","  35 |                     good = false;
  36 |                     diff = ""type"";
> 37 |                 } else if (real.data !== correct.data) {
     |                       ^ Conditional Test Logic
  38 |                     good = false;
  39 |                     diff = ""data"";
  40 |                 } else if (real.display !== correct.display) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 40, 'column': 23, 'index': 1313}","  38 |                     good = false;
  39 |                     diff = ""data"";
> 40 |                 } else if (real.display !== correct.display) {
     |                       ^ Conditional Test Logic
  41 |                     good = false;
  42 |                     diff = ""display"";
  43 |                 }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 45, 'column': 16, 'index': 1460}","  43 |                 }
  44 |
> 45 |                 if (!good) {
     |                ^ Conditional Test Logic
  46 |                     message.pass = false;
  47 |                     message.message = () => ""Difference at split "" +
  48 |                         (i + 1) + "": "" + JSON.stringify(real) +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 332, 'column': 8, 'index': 11671}","  330 |             '\\]'];
  331 |         const el = document.createElement('div');
> 332 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  333 |             const txt = document.createTextNode(textNodes[i]);
  334 |             el.appendChild(txt);
  335 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 350, 'column': 8, 'index': 12420}","  348 |             'consectetur adipiscing elit'];
  349 |         const el = document.createElement('div');
> 350 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  351 |             const txt = document.createTextNode(textNodes[i]);
  352 |             el.appendChild(txt);
  353 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 355, 'column': 8, 'index': 12630}","  353 |         }
  354 |         const el2 = document.createElement('div');
> 355 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  356 |             const txt = document.createTextNode(textNodes[i]);
  357 |             el2.appendChild(txt);
  358 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 62}","  60 | describe(""A delimiter splitter"", function() {
  61 |     it(""doesn't split when there are no delimiters"", function() {
> 62 |         expect(""hello"").toSplitInto(
     |        ^ Redundant Assertion
  63 |             [
  64 |                 {type: ""text"", data: ""hello""},
  65 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 72}","  70 |
  71 |     it(""doesn't create a math node with only one left delimiter"", function() {
> 72 |         expect(""hello ( world"").toSplitInto(
     |        ^ Redundant Assertion
  73 |             [
  74 |                 {type: ""text"", data: ""hello ""},
  75 |                 {type: ""text"", data: ""( world""},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 83}","  81 |
  82 |     it(""doesn't split when there's only a right delimiter"", function() {
> 83 |         expect(""hello ) world"").toSplitInto(
     |        ^ Redundant Assertion
  84 |             [
  85 |                 {type: ""text"", data: ""hello ) world""},
  86 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 93}","  91 |
  92 |     it(""splits when there are both delimiters"", function() {
> 93 |         expect(""hello ( world ) boo"").toSplitInto(
     |        ^ Redundant Assertion
  94 |             [
  95 |                 {type: ""text"", data: ""hello ""},
  96 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 106}","  104 |
  105 |     it(""splits on multi-character delimiters"", function() {
> 106 |         expect(""hello [[ world ]] boo"").toSplitInto(
      |        ^ Redundant Assertion
  107 |             [
  108 |                 {type: ""text"", data: ""hello ""},
  109 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 116}","  114 |                 {left: ""[["", right: ""]]"", display: false},
  115 |             ]);
> 116 |         expect(""hello \\begin{equation} world \\end{equation} boo"").toSplitInto(
      |        ^ Redundant Assertion
  117 |             [
  118 |                 {type: ""text"", data: ""hello ""},
  119 |                 {type: ""math"", data: ""\\begin{equation} world \\end{equation}"",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 131}","  129 |
  130 |     it(""splits multiple times"", function() {
> 131 |         expect(""hello ( world ) boo ( more ) stuff"").toSplitInto(
      |        ^ Redundant Assertion
  132 |             [
  133 |                 {type: ""text"", data: ""hello ""},
  134 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 147}","  145 |
  146 |     it(""leaves the ending when there's only a left delimiter"", function() {
> 147 |         expect(""hello ( world ) boo ( left"").toSplitInto(
      |        ^ Redundant Assertion
  148 |             [
  149 |                 {type: ""text"", data: ""hello ""},
  150 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 161}","  159 |
  160 |     it(""doesn't split when close delimiters are in {}s"", function() {
> 161 |         expect(""hello ( world { ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  162 |             [
  163 |                 {type: ""text"", data: ""hello ""},
  164 |                 {type: ""math"", data: "" world { ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 172}","  170 |             ]);
  171 |
> 172 |         expect(""hello ( world { { } ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  173 |             [
  174 |                 {type: ""text"", data: ""hello ""},
  175 |                 {type: ""math"", data: "" world { { } ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 185}","  183 |
  184 |     it(""correctly processes sequences of $..$"", function() {
> 185 |         expect(""$hello$$world$$boo$"").toSplitInto(
      |        ^ Redundant Assertion
  186 |             [
  187 |                 {type: ""math"", data: ""hello"",
  188 |                     rawData: ""$hello$"", display: false},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 200}","  198 |
  199 |     it(""doesn't split at escaped delimiters"", function() {
> 200 |         expect(""hello ( world \\) ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  201 |             [
  202 |                 {type: ""text"", data: ""hello ""},
  203 |                 {type: ""math"", data: "" world \\) "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 224}","  222 |
  223 |     it(""splits when the right and left delimiters are the same"", function() {
> 224 |         expect(""hello $ world $ boo"").toSplitInto(
      |        ^ Redundant Assertion
  225 |             [
  226 |                 {type: ""text"", data: ""hello ""},
  227 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 237}","  235 |
  236 |     it(""ignores \\$"", function() {
> 237 |         expect(""$x = \\$5$"").toSplitInto(
      |        ^ Redundant Assertion
  238 |             [
  239 |                 {type: ""math"", data: ""x = \\$5"",
  240 |                     rawData: ""$x = \\$5$"", display: false},",,
test/unicode-spec.js,ConditionalTestLogic,"[{""startLine"":157,""endLine"":160}]",,25.0,2.0
test/unicode-spec.js,SubOptimalAssert,"[{""startLine"":163,""endLine"":163}]",,25.0,2.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1320,""endLine"":1324}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1403,""endLine"":1405}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2824,""endLine"":2826}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2841,""endLine"":2843}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2858,""endLine"":2861}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3129,""endLine"":3132}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3826,""endLine"":3828}]",,557.0,117.0
test/katex-spec.js,OvercommentedTest,"[{""startLine"":4016,""endLine"":4051}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":68,""endLine"":70}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":87,""endLine"":90}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":112,""endLine"":115}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":127,""endLine"":129}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":145,""endLine"":147}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":163,""endLine"":165}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":179,""endLine"":181}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":301,""endLine"":306}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":345,""endLine"":347}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":362,""endLine"":364}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":389,""endLine"":392}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":494,""endLine"":496}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":568,""endLine"":573}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":575,""endLine"":605}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":671,""endLine"":680}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":684,""endLine"":690}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":696,""endLine"":698}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":720,""endLine"":722}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":832,""endLine"":842}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":856,""endLine"":858}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":994,""endLine"":996}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1042,""endLine"":1045}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1101,""endLine"":1111}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1113,""endLine"":1116}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1118,""endLine"":1121}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1139,""endLine"":1153}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1171,""endLine"":1174}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1176,""endLine"":1179}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1181,""endLine"":1184}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1200,""endLine"":1202}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1312,""endLine"":1314}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1547,""endLine"":1560}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1564,""endLine"":1569}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1695,""endLine"":1702}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2079,""endLine"":2096}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2117,""endLine"":2119}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2152,""endLine"":2154}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2263,""endLine"":2269}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2294,""endLine"":2299}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2301,""endLine"":2307}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2311,""endLine"":2317}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2319,""endLine"":2325}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2329,""endLine"":2334}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2336,""endLine"":2342}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2355,""endLine"":2360}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2368,""endLine"":2372}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2376,""endLine"":2381}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2383,""endLine"":2390}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2394,""endLine"":2400}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2408,""endLine"":2412}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2416,""endLine"":2422}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2435,""endLine"":2442}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2450,""endLine"":2454}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2458,""endLine"":2463}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2465,""endLine"":2472}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2476,""endLine"":2481}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2491,""endLine"":2496}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2498,""endLine"":2504}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2531,""endLine"":2534}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2538,""endLine"":2542}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2544,""endLine"":2546}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2550,""endLine"":2554}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2556,""endLine"":2559}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2561,""endLine"":2565}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2567,""endLine"":2570}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2574,""endLine"":2578}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2580,""endLine"":2582}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2586,""endLine"":2591}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2593,""endLine"":2597}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2599,""endLine"":2603}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2607,""endLine"":2616}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2618,""endLine"":2624}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2637,""endLine"":2642}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2646,""endLine"":2648}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2649,""endLine"":2651}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2655,""endLine"":2664}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2675,""endLine"":2686}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2704,""endLine"":2719}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2729,""endLine"":2739}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2753,""endLine"":2759}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2841,""endLine"":2843}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2858,""endLine"":2861}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2867,""endLine"":2869}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2962,""endLine"":2969}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2973,""endLine"":2976}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3418,""endLine"":3421}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3502,""endLine"":3505}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3805,""endLine"":3807}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3826,""endLine"":3828}]",,557.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":97,""endLine"":100}]",,557.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":101,""endLine"":106}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1765,""endLine"":1767}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1900,""endLine"":1901}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3173,""endLine"":3173}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3188,""endLine"":3188}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3983,""endLine"":3984}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":514,""endLine"":540}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":575,""endLine"":605}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":1611,""endLine"":1635}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3084,""endLine"":3099}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3507,""endLine"":3523}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":4016,""endLine"":4051}]",,557.0,117.0
test/errors-spec.js,AnonymousTest,"[{""startLine"":219,""endLine"":223}]",,50.0,26.0
test/errors-spec.js,IdenticalTestDescription,"[{""startLine"":214,""endLine"":218}]",,50.0,26.0
