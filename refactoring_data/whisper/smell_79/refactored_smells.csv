file,type,smells,frame,itCount,describeCount
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Duplicate Assert,"{'line': 623, 'column': 4, 'index': 14657}","  621 |       awesomeCategoryId: ""1"",
  622 |     });
> 623 |     expect(server.db.authors).toHaveLength(1);
      |    ^ Duplicate Assert
  624 |     expect(server.db.categories).toHaveLength(1);
  625 |
  626 |     let anotherArticle = server.create(""article"", ""withCategory"");",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Duplicate Assert,"{'line': 624, 'column': 4, 'index': 14704}","  622 |     });
  623 |     expect(server.db.authors).toHaveLength(1);
> 624 |     expect(server.db.categories).toHaveLength(1);
      |    ^ Duplicate Assert
  625 |
  626 |     let anotherArticle = server.create(""article"", ""withCategory"");
  627 |     expect(anotherArticle.attrs).toEqual({",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Duplicate Assert,"{'line': 633, 'column': 4, 'index': 14967}","  631 |       awesomeCategoryId: ""2"",
  632 |     });
> 633 |     expect(server.db.authors).toHaveLength(2);
      |    ^ Duplicate Assert
  634 |     expect(server.db.categories).toHaveLength(2);
  635 |
  636 |     server.shutdown();",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Duplicate Assert,"{'line': 634, 'column': 4, 'index': 15014}","  632 |     });
  633 |     expect(server.db.authors).toHaveLength(2);
> 634 |     expect(server.db.categories).toHaveLength(2);
      |    ^ Duplicate Assert
  635 |
  636 |     server.shutdown();
  637 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 26, 'column': 39, 'index': 502}","  24 |     let handler = server.post(""foo"");
  25 |
> 26 |     expect(handler.numberOfCalls).toBe(0);
     |                                       ^ Magic Number
  27 |
  28 |     server.shutdown();
  29 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 59, 'column': 39, 'index': 1191}","  57 |     let handler = server.post(""foo"");
  58 |
> 59 |     expect(handler.numberOfCalls).toBe(0);
     |                                       ^ Magic Number
  60 |
  61 |     server.shutdown();
  62 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 80, 'column': 31, 'index': 1650}","  78 |     let server = createServer({ environment: ""test"" });
  79 |
> 80 |     expect(server.timing).toBe(0);
     |                               ^ Magic Number
  81 |
  82 |     server.shutdown();
  83 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 103, 'column': 31, 'index': 2211}","  101 |     });
  102 |
> 103 |     expect(server.timing).toBe(0);
      |                               ^ Magic Number
  104 |
  105 |     server.shutdown();
  106 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 115, 'column': 31, 'index': 2477}","  113 |     });
  114 |
> 115 |     expect(server.timing).toBe(50);
      |                               ^ Magic Number
  116 |
  117 |     server.shutdown();
  118 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 178, 'column': 44, 'index': 4126}","  176 |     server.create(""contact"");
  177 |
> 178 |     expect(server.db.contacts).toHaveLength(1);
      |                                            ^ Magic Number
  179 |
  180 |     server.shutdown();
  181 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 196, 'column': 38, 'index': 4485}","  194 |     let contactsInDb = server.db.contacts;
  195 |
> 196 |     expect(contactsInDb).toHaveLength(1);
      |                                      ^ Magic Number
  197 |     expect(contactsInDb[0]).toEqual({ id: ""1"", name: ""Sam"" });
  198 |
  199 |     server.shutdown();",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 474, 'column': 44, 'index': 11231}","  472 |
  473 |     expect(articleWithComments).toEqual({ id: ""1"", title: ""Lorem ipsum"" });
> 474 |     expect(server.db.comments).toHaveLength(3);
      |                                            ^ Magic Number
  475 |
  476 |     server.shutdown();
  477 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 504, 'column': 44, 'index': 12000}","  502 |
  503 |     expect(articleWithComments).toEqual({ id: ""1"", title: ""Lorem ipsum"" });
> 504 |     expect(server.db.comments).toHaveLength(0);
      |                                            ^ Magic Number
  505 |
  506 |     server.shutdown();
  507 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 623, 'column': 43, 'index': 14696}","  621 |       awesomeCategoryId: ""1"",
  622 |     });
> 623 |     expect(server.db.authors).toHaveLength(1);
      |                                           ^ Magic Number
  624 |     expect(server.db.categories).toHaveLength(1);
  625 |
  626 |     let anotherArticle = server.create(""article"", ""withCategory"");",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 624, 'column': 46, 'index': 14746}","  622 |     });
  623 |     expect(server.db.authors).toHaveLength(1);
> 624 |     expect(server.db.categories).toHaveLength(1);
      |                                              ^ Magic Number
  625 |
  626 |     let anotherArticle = server.create(""article"", ""withCategory"");
  627 |     expect(anotherArticle.attrs).toEqual({",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 633, 'column': 43, 'index': 15006}","  631 |       awesomeCategoryId: ""2"",
  632 |     });
> 633 |     expect(server.db.authors).toHaveLength(2);
      |                                           ^ Magic Number
  634 |     expect(server.db.categories).toHaveLength(2);
  635 |
  636 |     server.shutdown();",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 634, 'column': 46, 'index': 15056}","  632 |     });
  633 |     expect(server.db.authors).toHaveLength(2);
> 634 |     expect(server.db.categories).toHaveLength(2);
      |                                              ^ Magic Number
  635 |
  636 |     server.shutdown();
  637 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 679, 'column': 46, 'index': 16141}","  677 |       categoryId: ""1"",
  678 |     });
> 679 |     expect(server.db.categories).toHaveLength(1);
      |                                              ^ Magic Number
  680 |     expect(server.db.categories[0]).toEqual({
  681 |       name: ""splendid software"",
  682 |       id: ""1"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 718, 'column': 43, 'index': 17166}","  716 |     server.create(""child"", { name: ""Dan"", mother });
  717 |
> 718 |     expect(server.db.mothers).toHaveLength(1);
      |                                           ^ Magic Number
  719 |
  720 |     server.shutdown();
  721 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 742, 'column': 38, 'index': 17694}","  740 |     let contactsInDb = server.db.contacts;
  741 |
> 742 |     expect(contactsInDb).toHaveLength(3);
      |                                      ^ Magic Number
  743 |     expect(contactsInDb[0]).toEqual({ id: ""1"", name: ""Sam"" });
  744 |     expect(contactsInDb[1]).toEqual({ id: ""2"", name: ""Sam"" });
  745 |     expect(contactsInDb[2]).toEqual({ id: ""3"", name: ""Sam"" });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 756, 'column': 34, 'index': 18153}","  754 |     let contacts = server.createList(""contact"", 3);
  755 |
> 756 |     expect(contacts).toHaveLength(3);
      |                                  ^ Magic Number
  757 |     expect(contacts[0]).toEqual({ id: ""2"", name: ""Sam"" });
  758 |     expect(contacts[1]).toEqual({ id: ""3"", name: ""Sam"" });
  759 |     expect(contacts[2]).toEqual({ id: ""4"", name: ""Sam"" });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 934, 'column': 38, 'index': 22553}","  932 |     let contactsInDb = server.db.contacts;
  933 |
> 934 |     expect(contactsInDb).toHaveLength(0);
      |                                      ^ Magic Number
  935 |   });
  936 |
  937 |   test(""build returns the new attrs with no id"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 1186, 'column': 43, 'index': 28904}","  1184 |       awesomeCategoryId: ""1"",
  1185 |     });
> 1186 |     expect(server.db.authors).toHaveLength(1);
       |                                           ^ Magic Number
  1187 |     expect(server.db.categories).toHaveLength(1);
  1188 |   });
  1189 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 1187, 'column': 46, 'index': 28954}","  1185 |     });
  1186 |     expect(server.db.authors).toHaveLength(1);
> 1187 |     expect(server.db.categories).toHaveLength(1);
       |                                              ^ Magic Number
  1188 |   });
  1189 |
  1190 |   test(""build allows to build objects with associations with traits and overrides for associations"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 1225, 'column': 46, 'index': 29927}","  1223 |
  1224 |     expect(article).toEqual({ title: ""Lorem ipsum"", categoryId: ""1"" });
> 1225 |     expect(server.db.categories).toHaveLength(1);
       |                                              ^ Magic Number
  1226 |     expect(server.db.categories[0]).toEqual({
  1227 |       name: ""splendid software"",
  1228 |       id: ""1"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 1340, 'column': 38, 'index': 32928}","  1338 |     let contactsInDb = server.db.contacts;
  1339 |
> 1340 |     expect(contactsInDb).toHaveLength(0);
       |                                      ^ Magic Number
  1341 |   });
  1342 |
  1343 |   test(""buildList returns the built elements without ids"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Magic Number,"{'line': 1351, 'column': 34, 'index': 33206}","  1349 |     let contacts = server.buildList(""contact"", 3);
  1350 |
> 1351 |     expect(contacts).toHaveLength(3);
       |                                  ^ Magic Number
  1352 |     expect(contacts[0]).toEqual({ name: ""Sam"" });
  1353 |     expect(contacts[1]).toEqual({ name: ""Sam"" });
  1354 |     expect(contacts[2]).toEqual({ name: ""Sam"" });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Redundant Assertion,"{'column': 8, 'line': 37}","  35 |       environment: ""development"",
  36 |       seeds() {
> 37 |         expect(true).toBeTruthy();
     |        ^ Redundant Assertion
  38 |       },
  39 |     });
  40 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/server-test.js,Redundant Assertion,"{'column': 8, 'line': 70}","  68 |       environment: ""development"",
  69 |       seeds() {
> 70 |         expect(true).toBeTruthy();
     |        ^ Redundant Assertion
  71 |       },
  72 |     });
  73 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/schema-test.js,Duplicate Assert,"{'line': 42, 'column': 4, 'index': 1188}","  40 |     schema.registerModel(""author"", authorModel);
  41 |
> 42 |     expect(schema.first(""author"")).toBeNull();
     |    ^ Duplicate Assert
  43 |
  44 |     let record = schema.create(""author"", { id: 1, name: ""Mary Roach"" });
  45 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/schema-test.js,Duplicate Assert,"{'line': 46, 'column': 4, 'index': 1310}","  44 |     let record = schema.create(""author"", { id: 1, name: ""Mary Roach"" });
  45 |
> 46 |     expect(schema.first(""author"")).toEqual(record);
     |    ^ Duplicate Assert
  47 |   });
  48 |
  49 |   test(""`findBy()` returns null when nothing is found"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/schema-test.js,Duplicate Assert,"{'line': 58, 'column': 4, 'index': 1607}","  56 |     schema.registerModel(""author"", authorModel);
  57 |
> 58 |     expect(schema.findBy(""author"", { name: ""Mary Roach"" })).toBeNull();
     |    ^ Duplicate Assert
  59 |
  60 |     let record = schema.create(""author"", { id: 1, name: ""Mary Roach"" });
  61 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/schema-test.js,Duplicate Assert,"{'line': 62, 'column': 4, 'index': 1754}","  60 |     let record = schema.create(""author"", { id: 1, name: ""Mary Roach"" });
  61 |
> 62 |     expect(schema.findBy(""author"", { name: ""Mary Roach"" })).toEqual(record);
     |    ^ Duplicate Assert
  63 |     expect(schema.findBy(""author"", { name: ""Charles Dickens"" })).toBeNull();
  64 |   });
  65 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/factory-test.js,Magic Number,"{'line': 275, 'column': 35, 'index': 5911}","  273 |
  274 |     let callbacks = PostFactory.extractAfterCreateCallbacks();
> 275 |     expect(callbacks).toHaveLength(3);
      |                                   ^ Magic Number
  276 |     expect(callbacks.map((cb) => cb())).toEqual([
  277 |       ""from base"",
  278 |       ""from published"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/factory-test.js,Magic Number,"{'line': 306, 'column': 19, 'index': 6619}","  304 |     expect(
  305 |       PostFactory.extractAfterCreateCallbacks({ traits: [] })
> 306 |     ).toHaveLength(1);
      |                   ^ Magic Number
  307 |     expect(
  308 |       PostFactory.extractAfterCreateCallbacks({ traits: [] }).map((cb) => cb())
  309 |     ).toEqual([""from base""]);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/factory-test.js,Magic Number,"{'line': 313, 'column': 19, 'index': 6853}","  311 |     expect(
  312 |       PostFactory.extractAfterCreateCallbacks({ traits: [""withComments""] })
> 313 |     ).toHaveLength(2);
      |                   ^ Magic Number
  314 |     expect(
  315 |       PostFactory.extractAfterCreateCallbacks({
  316 |         traits: [""withComments""],",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/factory-test.js,Magic Number,"{'line': 324, 'column': 19, 'index': 7165}","  322 |         traits: [""withComments"", ""published""],
  323 |       })
> 324 |     ).toHaveLength(3);
      |                   ^ Magic Number
  325 |     expect(
  326 |       PostFactory.extractAfterCreateCallbacks({
  327 |         traits: [""withComments"", ""published""],",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/factory-test.js,Magic Number,"{'line': 335, 'column': 19, 'index': 7509}","  333 |         traits: [""withComments"", ""otherTrait""],
  334 |       })
> 335 |     ).toHaveLength(2);
      |                   ^ Magic Number
  336 |     expect(
  337 |       PostFactory.extractAfterCreateCallbacks({
  338 |         traits: [""withComments"", ""otherTrait""],",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Conditional Test Logic,"{'line': 455, 'column': 6, 'index': 11556}","  453 |       { id: ""3"", name: ""Sam"", evil: false },
  454 |       { id: ""123-abc"", name: ""Sam"", evil: false },
> 455 |     ].forEach((contact) => {
      |      ^ Conditional Test Logic
  456 |       expect(db.contacts).toContainEqual(contact);
  457 |     });
  458 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Conditional Test Logic,"{'line': 492, 'column': 6, 'index': 12722}","  490 |       { id: ""3"", name: ""Ganon"", evil: true },
  491 |       { id: ""123-abc"", name: ""Sam"", evil: false },
> 492 |     ].forEach((contact) => {
      |      ^ Conditional Test Logic
  493 |       expect(db.contacts).toContainEqual(contact);
  494 |     });
  495 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 207, 'column': 4, 'index': 4828}","  205 |     ]);
  206 |
> 207 |     expect(db.contacts).toHaveLength(2);
      |    ^ Duplicate Assert
  208 |     expect(db.contacts).toContainEqual({ id: ""2"", name: ""Link"" });
  209 |     expect(db.contacts).toContainEqual({ id: ""1"", name: ""Ganon"" });
  210 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 208, 'column': 4, 'index': 4869}","  206 |
  207 |     expect(db.contacts).toHaveLength(2);
> 208 |     expect(db.contacts).toContainEqual({ id: ""2"", name: ""Link"" });
      |    ^ Duplicate Assert
  209 |     expect(db.contacts).toContainEqual({ id: ""1"", name: ""Ganon"" });
  210 |   });
  211 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 209, 'column': 4, 'index': 4936}","  207 |     expect(db.contacts).toHaveLength(2);
  208 |     expect(db.contacts).toContainEqual({ id: ""2"", name: ""Link"" });
> 209 |     expect(db.contacts).toContainEqual({ id: ""1"", name: ""Ganon"" });
      |    ^ Duplicate Assert
  210 |   });
  211 |
  212 |   test(""it can insert a record with an id of 0"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 215, 'column': 4, 'index': 5118}","  213 |     db.contacts.insert({ id: 0, name: ""Link"" });
  214 |
> 215 |     expect(db.contacts).toHaveLength(1);
      |    ^ Duplicate Assert
  216 |     expect(db.contacts).toContainEqual({ id: ""0"", name: ""Link"" });
  217 |   });
  218 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 216, 'column': 4, 'index': 5159}","  214 |
  215 |     expect(db.contacts).toHaveLength(1);
> 216 |     expect(db.contacts).toContainEqual({ id: ""0"", name: ""Link"" });
      |    ^ Duplicate Assert
  217 |   });
  218 |
  219 |   test(""IDs increment correctly, even after a record is removed"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 448, 'column': 4, 'index': 11320}","  446 |     db.contacts.update({ name: ""Sam"", evil: false });
  447 |
> 448 |     expect(db.contacts).toHaveLength(4);
      |    ^ Duplicate Assert
  449 |
  450 |     [
  451 |       { id: ""1"", name: ""Sam"", evil: false },",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 456, 'column': 6, 'index': 11585}","  454 |       { id: ""123-abc"", name: ""Sam"", evil: false },
  455 |     ].forEach((contact) => {
> 456 |       expect(db.contacts).toContainEqual(contact);
      |      ^ Duplicate Assert
  457 |     });
  458 |   });
  459 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 486, 'column': 4, 'index': 12486}","  484 |     db.contacts.update({ evil: false }, { name: ""Sam"" });
  485 |
> 486 |     expect(db.contacts).toHaveLength(4);
      |    ^ Duplicate Assert
  487 |     [
  488 |       { id: ""1"", name: ""Sam"", evil: false },
  489 |       { id: ""2"", name: ""Sam"", evil: false },",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 493, 'column': 6, 'index': 12751}","  491 |       { id: ""123-abc"", name: ""Sam"", evil: false },
  492 |     ].forEach((contact) => {
> 493 |       expect(db.contacts).toContainEqual(contact);
      |      ^ Duplicate Assert
  494 |     });
  495 |   });
  496 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 554, 'column': 4, 'index': 14445}","  552 |     db.contacts.remove(1);
  553 |
> 554 |     expect(db.contacts).toContainEqual({ id: ""2"", name: ""Zelda"", evil: false });
      |    ^ Duplicate Assert
  555 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });
  556 |     expect(db.contacts).toContainEqual({
  557 |       id: ""123-abc"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 555, 'column': 4, 'index': 14526}","  553 |
  554 |     expect(db.contacts).toContainEqual({ id: ""2"", name: ""Zelda"", evil: false });
> 555 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });
      |    ^ Duplicate Assert
  556 |     expect(db.contacts).toContainEqual({
  557 |       id: ""123-abc"",
  558 |       name: ""Epona"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 556, 'column': 4, 'index': 14606}","  554 |     expect(db.contacts).toContainEqual({ id: ""2"", name: ""Zelda"", evil: false });
  555 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });
> 556 |     expect(db.contacts).toContainEqual({
      |    ^ Duplicate Assert
  557 |       id: ""123-abc"",
  558 |       name: ""Epona"",
  559 |       evil: false,",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 566, 'column': 4, 'index': 14831}","  564 |     db.contacts.remove(""123-abc"");
  565 |
> 566 |     expect(db.contacts).toHaveLength(3);
      |    ^ Duplicate Assert
  567 |     expect(db.contacts).toContainEqual({ id: ""1"", name: ""Link"", evil: false });
  568 |     expect(db.contacts).toContainEqual({ id: ""2"", name: ""Zelda"", evil: false });
  569 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 567, 'column': 4, 'index': 14872}","  565 |
  566 |     expect(db.contacts).toHaveLength(3);
> 567 |     expect(db.contacts).toContainEqual({ id: ""1"", name: ""Link"", evil: false });
      |    ^ Duplicate Assert
  568 |     expect(db.contacts).toContainEqual({ id: ""2"", name: ""Zelda"", evil: false });
  569 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });
  570 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 568, 'column': 4, 'index': 14952}","  566 |     expect(db.contacts).toHaveLength(3);
  567 |     expect(db.contacts).toContainEqual({ id: ""1"", name: ""Link"", evil: false });
> 568 |     expect(db.contacts).toContainEqual({ id: ""2"", name: ""Zelda"", evil: false });
      |    ^ Duplicate Assert
  569 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });
  570 |   });
  571 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 569, 'column': 4, 'index': 15033}","  567 |     expect(db.contacts).toContainEqual({ id: ""1"", name: ""Link"", evil: false });
  568 |     expect(db.contacts).toContainEqual({ id: ""2"", name: ""Zelda"", evil: false });
> 569 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });
      |    ^ Duplicate Assert
  570 |   });
  571 |
  572 |   test(""it can remove multiple records by ids"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 575, 'column': 4, 'index': 15209}","  573 |     db.contacts.remove([1, 2]);
  574 |
> 575 |     expect(db.contacts).toHaveLength(2);
      |    ^ Duplicate Assert
  576 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });
  577 |     expect(db.contacts).toContainEqual({
  578 |       id: ""123-abc"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 576, 'column': 4, 'index': 15250}","  574 |
  575 |     expect(db.contacts).toHaveLength(2);
> 576 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });
      |    ^ Duplicate Assert
  577 |     expect(db.contacts).toContainEqual({
  578 |       id: ""123-abc"",
  579 |       name: ""Epona"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 577, 'column': 4, 'index': 15330}","  575 |     expect(db.contacts).toHaveLength(2);
  576 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });
> 577 |     expect(db.contacts).toContainEqual({
      |    ^ Duplicate Assert
  578 |       id: ""123-abc"",
  579 |       name: ""Epona"",
  580 |       evil: false,",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 587, 'column': 4, 'index': 15547}","  585 |     db.contacts.remove({ evil: false });
  586 |
> 587 |     expect(db.contacts).toHaveLength(1);
      |    ^ Duplicate Assert
  588 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });
  589 |   });
  590 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 588, 'column': 4, 'index': 15588}","  586 |
  587 |     expect(db.contacts).toHaveLength(1);
> 588 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });
      |    ^ Duplicate Assert
  589 |   });
  590 |
  591 |   test(""it can add a record after removing all records"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 595, 'column': 4, 'index': 15808}","  593 |     db.contacts.insert({ name: ""Foo"" });
  594 |
> 595 |     expect(db.contacts).toHaveLength(1);
      |    ^ Duplicate Assert
  596 |     expect(db.contacts).toContainEqual({ id: ""1"", name: ""Foo"" });
  597 |   });
  598 | });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Duplicate Assert,"{'line': 596, 'column': 4, 'index': 15849}","  594 |
  595 |     expect(db.contacts).toHaveLength(1);
> 596 |     expect(db.contacts).toContainEqual({ id: ""1"", name: ""Foo"" });
      |    ^ Duplicate Assert
  597 |   });
  598 | });
  599 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 22, 'column': 34, 'index': 517}","  20 |     });
  21 |
> 22 |     expect(db.users).toHaveLength(1);
     |                                  ^ Magic Number
  23 |     expect(db.addresses).toHaveLength(2);
  24 |   });
  25 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 23, 'column': 38, 'index': 559}","  21 |
  22 |     expect(db.users).toHaveLength(1);
> 23 |     expect(db.addresses).toHaveLength(2);
     |                                      ^ Magic Number
  24 |   });
  25 |
  26 |   test(""it can empty its data"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 37, 'column': 34, 'index': 843}","  35 |     db.emptyData();
  36 |
> 37 |     expect(db.users).toHaveLength(0);
     |                                  ^ Magic Number
  38 |     expect(db.addresses).toHaveLength(0);
  39 |   });
  40 | });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 38, 'column': 38, 'index': 885}","  36 |
  37 |     expect(db.users).toHaveLength(0);
> 38 |     expect(db.addresses).toHaveLength(0);
     |                                      ^ Magic Number
  39 |   });
  40 | });
  41 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 94, 'column': 49, 'index': 2177}","  92 |     contactRecord.someArray.push(""baz"");
  93 |
> 94 |     expect(contactRecord.someArray).toHaveLength(3);
     |                                                 ^ Magic Number
  95 |     expect(data.contacts[0].someArray).toHaveLength(2);
  96 |   });
  97 | });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 95, 'column': 52, 'index': 2233}","  93 |
  94 |     expect(contactRecord.someArray).toHaveLength(3);
> 95 |     expect(data.contacts[0].someArray).toHaveLength(2);
     |                                                    ^ Magic Number
  96 |   });
  97 | });
  98 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 207, 'column': 37, 'index': 4861}","  205 |     ]);
  206 |
> 207 |     expect(db.contacts).toHaveLength(2);
      |                                     ^ Magic Number
  208 |     expect(db.contacts).toContainEqual({ id: ""2"", name: ""Link"" });
  209 |     expect(db.contacts).toContainEqual({ id: ""1"", name: ""Ganon"" });
  210 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 215, 'column': 37, 'index': 5151}","  213 |     db.contacts.insert({ id: 0, name: ""Link"" });
  214 |
> 215 |     expect(db.contacts).toHaveLength(1);
      |                                     ^ Magic Number
  216 |     expect(db.contacts).toContainEqual({ id: ""0"", name: ""Link"" });
  217 |   });
  218 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 249, 'column': 37, 'index': 6164}","  247 |     db.contacts.insert({ id: 2, name: ""Krilli"" });
  248 |
> 249 |     expect(db.contacts).toHaveLength(2);
      |                                     ^ Magic Number
  250 |   });
  251 | });
  252 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 448, 'column': 37, 'index': 11353}","  446 |     db.contacts.update({ name: ""Sam"", evil: false });
  447 |
> 448 |     expect(db.contacts).toHaveLength(4);
      |                                     ^ Magic Number
  449 |
  450 |     [
  451 |       { id: ""1"", name: ""Sam"", evil: false },",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 486, 'column': 37, 'index': 12519}","  484 |     db.contacts.update({ evil: false }, { name: ""Sam"" });
  485 |
> 486 |     expect(db.contacts).toHaveLength(4);
      |                                     ^ Magic Number
  487 |     [
  488 |       { id: ""1"", name: ""Sam"", evil: false },
  489 |       { id: ""2"", name: ""Sam"", evil: false },",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 548, 'column': 37, 'index': 14348}","  546 |     db.contacts.remove();
  547 |
> 548 |     expect(db.contacts).toHaveLength(0);
      |                                     ^ Magic Number
  549 |   });
  550 |
  551 |   test(""it can remove a single record by id"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 566, 'column': 37, 'index': 14864}","  564 |     db.contacts.remove(""123-abc"");
  565 |
> 566 |     expect(db.contacts).toHaveLength(3);
      |                                     ^ Magic Number
  567 |     expect(db.contacts).toContainEqual({ id: ""1"", name: ""Link"", evil: false });
  568 |     expect(db.contacts).toContainEqual({ id: ""2"", name: ""Zelda"", evil: false });
  569 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 575, 'column': 37, 'index': 15242}","  573 |     db.contacts.remove([1, 2]);
  574 |
> 575 |     expect(db.contacts).toHaveLength(2);
      |                                     ^ Magic Number
  576 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });
  577 |     expect(db.contacts).toContainEqual({
  578 |       id: ""123-abc"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 587, 'column': 37, 'index': 15580}","  585 |     db.contacts.remove({ evil: false });
  586 |
> 587 |     expect(db.contacts).toHaveLength(1);
      |                                     ^ Magic Number
  588 |     expect(db.contacts).toContainEqual({ id: ""3"", name: ""Ganon"", evil: true });
  589 |   });
  590 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db-test.js,Magic Number,"{'line': 595, 'column': 37, 'index': 15841}","  593 |     db.contacts.insert({ name: ""Foo"" });
  594 |
> 595 |     expect(db.contacts).toHaveLength(1);
      |                                     ^ Magic Number
  596 |     expect(db.contacts).toContainEqual({ id: ""1"", name: ""Foo"" });
  597 |   });
  598 | });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/collection-test.js,Duplicate Assert,"{'line': 40, 'column': 4, 'index': 1115}","  38 |     let collection = new Collection(""post"", models);
  39 |
> 40 |     expect(collection).toHaveLength(2);
     |    ^ Duplicate Assert
  41 |
  42 |     collection.models = [{ id: 1 }];
  43 |     expect(collection).toHaveLength(1);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/collection-test.js,Duplicate Assert,"{'line': 43, 'column': 4, 'index': 1193}","  41 |
  42 |     collection.models = [{ id: 1 }];
> 43 |     expect(collection).toHaveLength(1);
     |    ^ Duplicate Assert
  44 |   });
  45 | });
  46 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/collection-test.js,Magic Number,"{'line': 40, 'column': 36, 'index': 1147}","  38 |     let collection = new Collection(""post"", models);
  39 |
> 40 |     expect(collection).toHaveLength(2);
     |                                    ^ Magic Number
  41 |
  42 |     collection.models = [{ id: 1 }];
  43 |     expect(collection).toHaveLength(1);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/collection-test.js,Magic Number,"{'line': 43, 'column': 36, 'index': 1225}","  41 |
  42 |     collection.models = [{ id: 1 }];
> 43 |     expect(collection).toHaveLength(1);
     |                                    ^ Magic Number
  44 |   });
  45 | });
  46 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/route-handlers/shorthands/base-test.js,Duplicate Assert,"{'line': 36, 'column': 4, 'index': 1201}","  34 |     let urlWithTrailingSlash = ""/api/fancy-users/"";
  35 |
> 36 |     expect(handler.getModelClassFromPath(urlWithSlash)).toBe(""fancy-user"");
     |    ^ Duplicate Assert
  37 |     expect(handler.getModelClassFromPath(urlWithIdAndSlash, true)).toBe(
  38 |       ""fancy-user""
  39 |     );",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/route-handlers/shorthands/base-test.js,Duplicate Assert,"{'line': 37, 'column': 4, 'index': 1277}","  35 |
  36 |     expect(handler.getModelClassFromPath(urlWithSlash)).toBe(""fancy-user"");
> 37 |     expect(handler.getModelClassFromPath(urlWithIdAndSlash, true)).toBe(
     |    ^ Duplicate Assert
  38 |       ""fancy-user""
  39 |     );
  40 |     expect(handler.getModelClassFromPath(urlWithTrailingSlash)).toBe(",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/route-handlers/shorthands/base-test.js,Duplicate Assert,"{'line': 47, 'column': 4, 'index': 1575}","  45 |     urlWithIdAndSlash = ""/api/exquisite-users/:objectId"";
  46 |
> 47 |     expect(handler.getModelClassFromPath(urlWithSlash)).toBe(""exquisite-user"");
     |    ^ Duplicate Assert
  48 |     expect(handler.getModelClassFromPath(urlWithIdAndSlash, true)).toBe(
  49 |       ""exquisite-user""
  50 |     );",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/route-handlers/shorthands/base-test.js,Duplicate Assert,"{'line': 48, 'column': 4, 'index': 1655}","  46 |
  47 |     expect(handler.getModelClassFromPath(urlWithSlash)).toBe(""exquisite-user"");
> 48 |     expect(handler.getModelClassFromPath(urlWithIdAndSlash, true)).toBe(
     |    ^ Duplicate Assert
  49 |       ""exquisite-user""
  50 |     );
  51 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/route-handlers/shorthands/base-test.js,Duplicate Assert,"{'line': 55, 'column': 4, 'index': 1868}","  53 |     urlWithIdAndSlash = ""/api/elegant-users/:firstName/:lastName"";
  54 |
> 55 |     expect(handler.getModelClassFromPath(urlWithSlash)).toBe(""elegant-user"");
     |    ^ Duplicate Assert
  56 |     expect(handler.getModelClassFromPath(urlWithIdAndSlash, true)).toBe(
  57 |       ""elegant-user""
  58 |     );",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/route-handlers/shorthands/base-test.js,Duplicate Assert,"{'line': 56, 'column': 4, 'index': 1946}","  54 |
  55 |     expect(handler.getModelClassFromPath(urlWithSlash)).toBe(""elegant-user"");
> 56 |     expect(handler.getModelClassFromPath(urlWithIdAndSlash, true)).toBe(
     |    ^ Duplicate Assert
  57 |       ""elegant-user""
  58 |     );
  59 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/route-handlers/shorthands/base-test.js,Magic Number,"{'line': 13, 'column': 51, 'index': 468}","  11 |   test(""it returns a number if it's a number"", () => {
  12 |     request.params.id = 2;
> 13 |     expect(handler._getIdForRequest(request)).toBe(2);
     |                                                   ^ Magic Number
  14 |   });
  15 |
  16 |   test(""it returns a number if it's a string represented number"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/unit/db/identity-manager-test.js,Redundant Assertion,"{'column': 4, 'line': 83}","  81 |     manager.set(""abc"");
  82 |
> 83 |     expect(true).toBeTruthy();
     |    ^ Redundant Assertion
  84 |   });
  85 | });
  86 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/server-config-test.js,Duplicate Assert,"{'line': 236, 'column': 4, 'index': 5525}","  234 |     });
  235 |
> 236 |     expect(server.timing).toBe(1000);
      |    ^ Duplicate Assert
  237 |
  238 |     server.config({
  239 |       timing: 500,",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/server-config-test.js,Duplicate Assert,"{'line': 242, 'column': 4, 'index': 5612}","  240 |     });
  241 |
> 242 |     expect(server.timing).toBe(500);
      |    ^ Duplicate Assert
  243 |   });
  244 |
  245 |   test(""changing the environment of the server throws an error"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/server-config-test.js,Magic Number,"{'line': 216, 'column': 31, 'index': 4958}","  214 |     server.get(""contacts"");
  215 |
> 216 |     expect(server.timing).toBe(1000);
      |                               ^ Magic Number
  217 |
  218 |     let res = await fetch(""http://localhost:3000/api/contacts"");
  219 |     let data = await res.json();",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/server-config-test.js,Magic Number,"{'line': 224, 'column': 52, 'index': 5226}","  222 |     let serializerMap = server.serializerOrRegistry._serializerMap;
  223 |
> 224 |     expect(Object.keys(serializerMap)).toHaveLength(2);
      |                                                    ^ Magic Number
  225 |     expect(serializerMap.contact).toEqual(ActiveModelSerializer);
  226 |     expect(serializerMap.post).toEqual(RestSerializer);
  227 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/server-config-test.js,Magic Number,"{'line': 236, 'column': 31, 'index': 5552}","  234 |     });
  235 |
> 236 |     expect(server.timing).toBe(1000);
      |                               ^ Magic Number
  237 |
  238 |     server.config({
  239 |       timing: 500,",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/server-config-test.js,Magic Number,"{'line': 242, 'column': 31, 'index': 5639}","  240 |     });
  241 |
> 242 |     expect(server.timing).toBe(500);
      |                               ^ Magic Number
  243 |   });
  244 |
  245 |   test(""changing the environment of the server throws an error"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 44, 'column': 28, 'index': 964}","  42 |     let data = await res.json();
  43 |
> 44 |     expect(res.status).toBe(200);
     |                            ^ Magic Number
  45 |     expect(data).toEqual({
  46 |       contacts: [
  47 |         { id: ""1"", name: ""Link"" },",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 73, 'column': 28, 'index': 1631}","  71 |     let data = await res.json();
  72 |
> 73 |     expect(res.status).toBe(200);
     |                            ^ Magic Number
  74 |     expect(data).toEqual({ contact: { id: ""2"", name: ""Zelda"" } });
  75 |   });
  76 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 91, 'column': 28, 'index': 2024}","  89 |     });
  90 |
> 91 |     expect(res.status).toBe(201);
     |                            ^ Magic Number
  92 |     expect(server.db.contacts).toHaveLength(1);
  93 |   });
  94 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 92, 'column': 44, 'index': 2074}","  90 |
  91 |     expect(res.status).toBe(201);
> 92 |     expect(server.db.contacts).toHaveLength(1);
     |                                            ^ Magic Number
  93 |   });
  94 |
  95 |   test(""resource generates put shorthand"", async () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 114, 'column': 28, 'index': 2522}","  112 |     });
  113 |
> 114 |     expect(res.status).toBe(200);
      |                            ^ Magic Number
  115 |     expect(server.db.contacts[0].name).toBe(""Zelda"");
  116 |   });
  117 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 137, 'column': 28, 'index': 3030}","  135 |     });
  136 |
> 137 |     expect(res.status).toBe(200);
      |                            ^ Magic Number
  138 |     expect(server.db.contacts[0].name).toBe(""Zelda"");
  139 |   });
  140 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 153, 'column': 28, 'index': 3441}","  151 |     let res = await fetch(""/contacts/1"", { method: ""DELETE"" });
  152 |
> 153 |     expect(res.status).toBe(204);
      |                            ^ Magic Number
  154 |     expect(server.db.contacts).toHaveLength(0);
  155 |   });
  156 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 154, 'column': 44, 'index': 3491}","  152 |
  153 |     expect(res.status).toBe(204);
> 154 |     expect(server.db.contacts).toHaveLength(0);
      |                                            ^ Magic Number
  155 |   });
  156 |
  157 |   test(""resource accepts a custom path for a resource"", async () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 170, 'column': 38, 'index': 3874}","  168 |
  169 |     let indexResponse = await fetch(""/posts"");
> 170 |     expect(indexResponse.status).toBe(200);
      |                                      ^ Magic Number
  171 |
  172 |     let showResponse = await fetch(""/posts/2"");
  173 |     expect(showResponse.status).toBe(200);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 173, 'column': 37, 'index': 3966}","  171 |
  172 |     let showResponse = await fetch(""/posts/2"");
> 173 |     expect(showResponse.status).toBe(200);
      |                                     ^ Magic Number
  174 |
  175 |     let createResponse = await fetch(""/posts"", {
  176 |       method: ""POST"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 183, 'column': 39, 'index': 4188}","  181 |       }),
  182 |     });
> 183 |     expect(createResponse.status).toBe(201);
      |                                       ^ Magic Number
  184 |
  185 |     let updatePutResponse = await fetch(""/posts/1"", {
  186 |       method: ""PUT"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 193, 'column': 42, 'index': 4417}","  191 |       }),
  192 |     });
> 193 |     expect(updatePutResponse.status).toBe(200);
      |                                          ^ Magic Number
  194 |
  195 |     let updatePatchResponse = await fetch(""/posts/1"", {
  196 |       method: ""PATCH"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 203, 'column': 44, 'index': 4652}","  201 |       }),
  202 |     });
> 203 |     expect(updatePatchResponse.status).toBe(200);
      |                                            ^ Magic Number
  204 |
  205 |     let deleteResponse = await fetch(""/posts/1"", { method: ""DELETE"" });
  206 |     expect(deleteResponse.status).toBe(204);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 206, 'column': 39, 'index': 4770}","  204 |
  205 |     let deleteResponse = await fetch(""/posts/1"", { method: ""DELETE"" });
> 206 |     expect(deleteResponse.status).toBe(204);
      |                                       ^ Magic Number
  207 |   });
  208 |
  209 |   test(""resource accepts singular name"", async () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 229, 'column': 41, 'index': 5337}","  227 |     let contactsResponseData = await contactsResponse.json();
  228 |
> 229 |     expect(contactsResponse.status).toBe(200);
      |                                         ^ Magic Number
  230 |     expect(contactsResponseData).toEqual({
  231 |       contacts: [
  232 |         { id: ""1"", name: ""Link"" },",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 240, 'column': 38, 'index': 5635}","  238 |     let postsResponseData = await postsResponse.json();
  239 |
> 240 |     expect(postsResponse.status).toBe(200);
      |                                      ^ Magic Number
  241 |     expect(postsResponseData).toEqual({
  242 |       blog_posts: [
  243 |         { id: ""1"", title: ""Post 1"" },",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 269, 'column': 28, 'index': 6408}","  267 |     let res = await fetch(""/contacts"");
  268 |
> 269 |     expect(res.status).toBe(200);
      |                            ^ Magic Number
  270 |   });
  271 |
  272 |   test(""resource does not generate shorthands which are not whitelisted with :only option"", async () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 308, 'column': 38, 'index': 7720}","  306 |
  307 |     let indexResponse = await fetch(""/contacts"");
> 308 |     expect(indexResponse.status).toBe(200);
      |                                      ^ Magic Number
  309 |
  310 |     let showResponse = await fetch(""/contacts/1"");
  311 |     expect(showResponse.status).toBe(200);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/resource-shorthand-test.js,Magic Number,"{'line': 311, 'column': 37, 'index': 7815}","  309 |
  310 |     let showResponse = await fetch(""/contacts/1"");
> 311 |     expect(showResponse.status).toBe(200);
      |                                     ^ Magic Number
  312 |   });
  313 |
  314 |   test(""resource does not generate shorthands which are blacklisted by :except option"", async () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/falsy-responses-test.js,Magic Number,"{'line': 27, 'column': 28, 'index': 590}","  25 |
  26 |     expect(data).toEqual({});
> 27 |     expect(res.status).toBe(200);
     |                            ^ Magic Number
  28 |     expect([...res.headers.entries()]).toEqual([
  29 |       [""content-type"", ""application/json""],
  30 |     ]);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/falsy-responses-test.js,Magic Number,"{'line': 42, 'column': 28, 'index': 961}","  40 |
  41 |     expect(data).toBeNull();
> 42 |     expect(res.status).toBe(200);
     |                            ^ Magic Number
  43 |     expect([...res.headers.entries()]).toEqual([
  44 |       [""content-type"", ""application/json""],
  45 |     ]);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/falsy-responses-test.js,Magic Number,"{'line': 57, 'column': 28, 'index': 1343}","  55 |
  56 |     expect(data).toEqual({});
> 57 |     expect(res.status).toBe(200);
     |                            ^ Magic Number
  58 |     expect([...res.headers.entries()]).toEqual([
  59 |       [""content-type"", ""application/json""],
  60 |     ]);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/falsy-responses-test.js,Magic Number,"{'line': 72, 'column': 28, 'index': 1748}","  70 |
  71 |     expect(data).toEqual({});
> 72 |     expect(res.status).toBe(200);
     |                            ^ Magic Number
  73 |     expect([...res.headers.entries()]).toEqual([
  74 |       [""content-type"", ""application/json""],
  75 |     ]);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/customized-normalize-method-test.js,Magic Number,"{'line': 62, 'column': 28, 'index': 1421}","  60 |     });
  61 |
> 62 |     expect(res.status).toBe(201);
     |                            ^ Magic Number
  63 |     expect(server.db.contacts).toHaveLength(1);
  64 |     expect(server.db.contacts[0].firstName).toBe(""Zelda"");
  65 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/customized-normalize-method-test.js,Magic Number,"{'line': 63, 'column': 44, 'index': 1471}","  61 |
  62 |     expect(res.status).toBe(201);
> 63 |     expect(server.db.contacts).toHaveLength(1);
     |                                            ^ Magic Number
  64 |     expect(server.db.contacts[0].firstName).toBe(""Zelda"");
  65 |   });
  66 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/custom-responses-test.js,Magic Number,"{'line': 27, 'column': 28, 'index': 629}","  25 |
  26 |     expect(data).toEqual({});
> 27 |     expect(res.status).toBe(200);
     |                            ^ Magic Number
  28 |     expect([...res.headers.entries()]).toEqual([
  29 |       [""content-type"", ""application/json""],
  30 |     ]);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/custom-responses-test.js,Magic Number,"{'line': 42, 'column': 28, 'index': 1037}","  40 |
  41 |     expect(data).toEqual({});
> 42 |     expect(res.status).toBe(200);
     |                            ^ Magic Number
  43 |     expect([...res.headers.entries()]).toEqual([
  44 |       [""content-type"", ""application/json""],
  45 |     ]);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/custom-responses-test.js,Magic Number,"{'line': 57, 'column': 28, 'index': 1449}","  55 |
  56 |     expect(text).toBe("""");
> 57 |     expect(res.status).toBe(204);
     |                            ^ Magic Number
  58 |     expect([...res.headers.entries()]).toEqual([
  59 |       [""content-type"", ""text/plain;charset=UTF-8""],
  60 |     ]);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/rest-serializer-sanity-test.js,Magic Number,"{'line': 43, 'column': 28, 'index': 963}","  41 |     let data = await res.json();
  42 |
> 43 |     expect(res.status).toBe(200);
     |                            ^ Magic Number
  44 |     expect(data).toEqual({
  45 |       contacts: [{ id: ""1"", name: ""Link"", addresses: [] }],
  46 |     });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/rest-serializer-sanity-test.js,Magic Number,"{'line': 68, 'column': 28, 'index': 1475}","  66 |     });
  67 |
> 68 |     expect(res.status).toBe(201);
     |                            ^ Magic Number
  69 |     expect(server.db.addresses).toHaveLength(1);
  70 |     expect(server.db.addresses[0].contactId).toBe(1);
  71 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/rest-serializer-sanity-test.js,Magic Number,"{'line': 69, 'column': 45, 'index': 1526}","  67 |
  68 |     expect(res.status).toBe(201);
> 69 |     expect(server.db.addresses).toHaveLength(1);
     |                                             ^ Magic Number
  70 |     expect(server.db.addresses[0].contactId).toBe(1);
  71 |   });
  72 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/rest-serializer-sanity-test.js,Magic Number,"{'line': 70, 'column': 50, 'index': 1580}","  68 |     expect(res.status).toBe(201);
  69 |     expect(server.db.addresses).toHaveLength(1);
> 70 |     expect(server.db.addresses[0].contactId).toBe(1);
     |                                                  ^ Magic Number
  71 |   });
  72 |
  73 |   test(""a put shorthand works"", async () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/rest-serializer-sanity-test.js,Magic Number,"{'line': 91, 'column': 28, 'index': 1970}","  89 |     });
  90 |
> 91 |     expect(res.status).toBe(200);
     |                            ^ Magic Number
  92 |     expect(server.db.contacts[0].name).toBe(""Zelda"");
  93 |   });
  94 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/rest-serializer-sanity-test.js,Magic Number,"{'line': 113, 'column': 28, 'index': 2422}","  111 |     });
  112 |
> 113 |     expect(res.status).toBe(200);
      |                            ^ Magic Number
  114 |     expect(server.db.contacts[0].name).toBe(""Zelda"");
  115 |   });
  116 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/rest-serializer-sanity-test.js,Magic Number,"{'line': 130, 'column': 28, 'index': 2780}","  128 |     });
  129 |
> 130 |     expect(res.status).toBe(204);
      |                            ^ Magic Number
  131 |     expect(server.db.contacts).toHaveLength(0);
  132 |   });
  133 | });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/rest-serializer-sanity-test.js,Magic Number,"{'line': 131, 'column': 44, 'index': 2830}","  129 |
  130 |     expect(res.status).toBe(204);
> 131 |     expect(server.db.contacts).toHaveLength(0);
      |                                            ^ Magic Number
  132 |   });
  133 | });
  134 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/post-shorthand-with-relationships-test.js,Magic Number,"{'line': 37, 'column': 41, 'index': 892}","  35 |     server.post(""/posts"");
  36 |
> 37 |     expect(server.db.posts).toHaveLength(0);
     |                                         ^ Magic Number
  38 |
  39 |     let author = server.create(""author"");
  40 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/post-shorthand-with-relationships-test.js,Magic Number,"{'line': 78, 'column': 44, 'index': 1854}","  76 |     server.post(""/comments"");
  77 |
> 78 |     expect(server.db.comments).toHaveLength(0);
     |                                            ^ Magic Number
  79 |
  80 |     let video = server.create(""video"");
  81 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/post-shorthand-with-relationships-test.js,Magic Number,"{'line': 121, 'column': 41, 'index': 2869}","  119 |     server.post(""/users"");
  120 |
> 121 |     expect(server.db.users).toHaveLength(0);
      |                                         ^ Magic Number
  122 |
  123 |     let car = server.create(""car"");
  124 |     let watch = server.create(""watch"");",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/patch-shorthand-with-relationships-test.js,Magic Number,"{'line': 127, 'column': 43, 'index': 2953}","  125 |
  126 |     user.reload();
> 127 |     expect(user.collectibles).toHaveLength(0);
      |                                           ^ Magic Number
  128 |   });
  129 |
  130 |   test(""it camelizes relationship names"", async () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/active-model-serializer-sanity-test.js,Magic Number,"{'line': 36, 'column': 28, 'index': 787}","  34 |     let data = await res.json();
  35 |
> 36 |     expect(res.status).toBe(200);
     |                            ^ Magic Number
  37 |     expect(data).toEqual({ contacts: [{ id: ""1"", name: ""Link"" }] });
  38 |   });
  39 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/active-model-serializer-sanity-test.js,Magic Number,"{'line': 54, 'column': 28, 'index': 1168}","  52 |     });
  53 |
> 54 |     expect(res.status).toBe(201);
     |                            ^ Magic Number
  55 |     expect(server.db.contacts).toHaveLength(1);
  56 |   });
  57 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/active-model-serializer-sanity-test.js,Magic Number,"{'line': 55, 'column': 44, 'index': 1218}","  53 |
  54 |     expect(res.status).toBe(201);
> 55 |     expect(server.db.contacts).toHaveLength(1);
     |                                            ^ Magic Number
  56 |   });
  57 |
  58 |   test(""a put shorthand works"", async () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/active-model-serializer-sanity-test.js,Magic Number,"{'line': 76, 'column': 28, 'index': 1608}","  74 |     });
  75 |
> 76 |     expect(res.status).toBe(200);
     |                            ^ Magic Number
  77 |     expect(server.db.contacts[0].name).toBe(""Zelda"");
  78 |   });
  79 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/active-model-serializer-sanity-test.js,Magic Number,"{'line': 98, 'column': 28, 'index': 2060}","   96 |     });
   97 |
>  98 |     expect(res.status).toBe(200);
      |                            ^ Magic Number
   99 |     expect(server.db.contacts[0].name).toBe(""Zelda"");
  100 |   });
  101 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/active-model-serializer-sanity-test.js,Magic Number,"{'line': 117, 'column': 28, 'index': 2478}","  115 |
  116 |     expect(text).toBe("""");
> 117 |     expect(res.status).toBe(204);
      |                            ^ Magic Number
  118 |     expect(server.db.contacts).toHaveLength(0);
  119 |   });
  120 | });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/shorthands/active-model-serializer-sanity-test.js,Magic Number,"{'line': 118, 'column': 44, 'index': 2528}","  116 |     expect(text).toBe("""");
  117 |     expect(res.status).toBe(204);
> 118 |     expect(server.db.contacts).toHaveLength(0);
      |                                            ^ Magic Number
  119 |   });
  120 | });
  121 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/put-shorthand-test.js,Magic Number,"{'line': 55, 'column': 43, 'index': 1248}","  53 |     let model = handler.handle(request);
  54 |
> 55 |     expect(schema.db.authors).toHaveLength(1);
     |                                           ^ Magic Number
  56 |     expect(model instanceof Model).toBeTruthy();
  57 |     expect(model.modelName).toBe(""author"");
  58 |     expect(model.firstName).toBe(""Ganondorf"");",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/put-shorthand-test.js,Magic Number,"{'line': 72, 'column': 43, 'index': 1769}","  70 |     let model = handler.handle(request);
  71 |
> 72 |     expect(schema.db.authors).toHaveLength(1);
     |                                           ^ Magic Number
  73 |     expect(model instanceof Model).toBeTruthy();
  74 |     expect(model.modelName).toBe(""author"");
  75 |     expect(model.firstName).toBe(""Ganondorf"");",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/put-shorthand-test.js,Magic Number,"{'line': 93, 'column': 43, 'index': 2349}","  91 |     let model = handler.handle(request);
  92 |
> 93 |     expect(schema.db.authors).toHaveLength(1);
     |                                           ^ Magic Number
  94 |     expect(model instanceof Model).toBeTruthy();
  95 |     expect(model.modelName).toBe(""author"");
  96 |     expect(model.firstName).toBe(""Ganondorf"");",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/put-shorthand-test.js,Redundant Assertion,"{'column': 4, 'line': 115}","  113 |       handler.handle(request);
  114 |     }).toThrow();
> 115 |     expect(true).toBeTruthy();
      |    ^ Redundant Assertion
  116 |   });
  117 | });
  118 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/post-shorthand-test.js,Magic Number,"{'line': 41, 'column': 43, 'index': 1077}","  39 |     let model = handler.handle(request);
  40 |
> 41 |     expect(schema.db.authors).toHaveLength(1);
     |                                           ^ Magic Number
  42 |     expect(model instanceof Model).toBeTruthy();
  43 |     expect(model.modelName).toBe(""author"");
  44 |     expect(model.firstName).toBe(""Ganon"");",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/post-shorthand-test.js,Magic Number,"{'line': 57, 'column': 43, 'index': 1566}","  55 |     let model = handler.handle(request);
  56 |
> 57 |     expect(schema.db.authors).toHaveLength(1);
     |                                           ^ Magic Number
  58 |     expect(model instanceof Model).toBeTruthy();
  59 |     expect(model.modelName).toBe(""author"");
  60 |     expect(model.firstName).toBe(""Ganon"");",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/post-shorthand-test.js,Magic Number,"{'line': 74, 'column': 43, 'index': 2071}","  72 |     let model = handler.handle(request);
  73 |
> 74 |     expect(schema.db.authors).toHaveLength(1);
     |                                           ^ Magic Number
  75 |     expect(model instanceof Model).toBeTruthy();
  76 |     expect(model.modelName).toBe(""author"");
  77 |     expect(model.firstName).toBe(""Ganon"");",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/post-shorthand-test.js,Redundant Assertion,"{'column': 4, 'line': 87}","  85 |       handler.handle(request);
  86 |     }).toThrow();
> 87 |     expect(true).toBeTruthy();
     |    ^ Redundant Assertion
  88 |   });
  89 | });
  90 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,Magic Number,"{'line': 52, 'column': 31, 'index': 1349}","  50 |
  51 |     expect(response instanceof Response).toBeTruthy();
> 52 |     expect(response.code).toBe(404);
     |                               ^ Magic Number
  53 |   });
  54 |
  55 |   test(""undefined shorthand with an ID that is in the DB will return a 204 Response"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,Magic Number,"{'line': 67, 'column': 31, 'index': 1768}","  65 |
  66 |     expect(response instanceof Response).toBeTruthy();
> 67 |     expect(response.code).toBe(204);
     |                               ^ Magic Number
  68 |   });
  69 |
  70 |   test(""undefined shorthand with coalesce true will return a 204 response if one of the IDs are found"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,Magic Number,"{'line': 87, 'column': 31, 'index': 2302}","  85 |
  86 |     expect(response instanceof Response).toBeTruthy();
> 87 |     expect(response.code).toBe(204);
     |                               ^ Magic Number
  88 |   });
  89 |
  90 |   test(""undefined shorthand string (no id) shorthand returns a 204 (regardless of the length of the collection)"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,Magic Number,"{'line': 102, 'column': 31, 'index': 2730}","  100 |
  101 |     expect(response instanceof Response).toBeTruthy();
> 102 |     expect(response.code).toBe(204);
      |                               ^ Magic Number
  103 |   });
  104 |
  105 |   test(""string shorthand with an ID that is not in the DB will return a 404 Response"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,Magic Number,"{'line': 112, 'column': 31, 'index': 3109}","  110 |
  111 |     expect(response instanceof Response).toBeTruthy();
> 112 |     expect(response.code).toBe(404);
      |                               ^ Magic Number
  113 |   });
  114 |
  115 |   test(""string shorthand with an ID that is in the DB will return a 204 Response"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,Magic Number,"{'line': 122, 'column': 31, 'index': 3482}","  120 |
  121 |     expect(response instanceof Response).toBeTruthy();
> 122 |     expect(response.code).toBe(204);
      |                               ^ Magic Number
  123 |   });
  124 |
  125 |   test(""string shorthand with coalesce true will return a 204 response if one of the IDs are found"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,Magic Number,"{'line': 142, 'column': 31, 'index': 4011}","  140 |
  141 |     expect(response instanceof Response).toBeTruthy();
> 142 |     expect(response.code).toBe(204);
      |                               ^ Magic Number
  143 |   });
  144 |
  145 |   test(""string shorthand string (no id) shorthand returns a 204 (regardless of the length of the collection)"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,Magic Number,"{'line': 152, 'column': 31, 'index': 4393}","  150 |
  151 |     expect(response instanceof Response).toBeTruthy();
> 152 |     expect(response.code).toBe(204);
      |                               ^ Magic Number
  153 |   });
  154 | });
  155 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,Magic Number,"{'line': 77, 'column': 40, 'index': 1845}","  75 |     let authors = handler.handle(request);
  76 |
> 77 |     expect(authors.models).toHaveLength(3);
     |                                        ^ Magic Number
  78 |     expect(authors.models[0] instanceof Model).toBeTruthy();
  79 |     expect(authors.models[0].modelName).toBe(""author"");
  80 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,Magic Number,"{'line': 93, 'column': 40, 'index': 2285}","  91 |     let authors = handler.handle(request);
  92 |
> 93 |     expect(authors.models).toHaveLength(3);
     |                                        ^ Magic Number
  94 |     expect(authors.models[0] instanceof Model).toBeTruthy();
  95 |     expect(authors.models[0].modelName).toBe(""author"");
  96 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,Magic Number,"{'line': 126, 'column': 29, 'index': 3250}","  124 |
  125 |     expect(author instanceof Response).toBeTruthy();
> 126 |     expect(author.code).toBe(404);
      |                             ^ Magic Number
  127 |   });
  128 |
  129 |   test(""undefined shorthand ignores query params for a singular resource"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,Magic Number,"{'line': 161, 'column': 40, 'index': 4190}","  159 |     let authors = handler.handle(request);
  160 |
> 161 |     expect(authors.models).toHaveLength(2);
      |                                        ^ Magic Number
  162 |     expect(authors.models.map((author) => author.name)).toEqual([
  163 |       ""Link"",
  164 |       ""Epona"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,Magic Number,"{'line': 184, 'column': 40, 'index': 4770}","  182 |     let authors = handler.handle(request);
  183 |
> 184 |     expect(authors.models).toHaveLength(2);
      |                                        ^ Magic Number
  185 |     expect(authors.models.map((author) => author.name)).toEqual([
  186 |       ""Link"",
  187 |       ""Epona"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,Magic Number,"{'line': 197, 'column': 40, 'index': 5161}","  195 |     let authors = handler.handle(request);
  196 |
> 197 |     expect(authors.models).toHaveLength(3);
      |                                        ^ Magic Number
  198 |     expect(authors.models[0] instanceof Model).toBeTruthy();
  199 |     expect(authors.models[0].modelName).toBe(""author"");
  200 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,Magic Number,"{'line': 220, 'column': 29, 'index': 6025}","  218 |
  219 |     expect(author instanceof Response).toBeTruthy();
> 220 |     expect(author.code).toBe(404);
      |                             ^ Magic Number
  221 |   });
  222 |
  223 |   test(""string shorthand with coalesce returns the correct models [JSONAPI]"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,Magic Number,"{'line': 239, 'column': 40, 'index': 6490}","  237 |     let authors = handler.handle(request);
  238 |
> 239 |     expect(authors.models).toHaveLength(2);
      |                                        ^ Magic Number
  240 |     expect(authors.models.map((author) => author.name)).toEqual([
  241 |       ""Link"",
  242 |       ""Epona"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,Magic Number,"{'line': 262, 'column': 40, 'index': 7055}","  260 |     let authors = handler.handle(request);
  261 |
> 262 |     expect(authors.models).toHaveLength(2);
      |                                        ^ Magic Number
  263 |     expect(authors.models.map((author) => author.name)).toEqual([
  264 |       ""Link"",
  265 |       ""Epona"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,Magic Number,"{'line': 316, 'column': 39, 'index': 8460}","  314 |     let models = handler.handle(request);
  315 |
> 316 |     expect(models.models).toHaveLength(1);
      |                                       ^ Magic Number
  317 |     expect(models.models[0] instanceof Model).toBeTruthy();
  318 |     expect(models.models[0].modelName).toBe(""project-owner"");
  319 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/delete-shorthand-test.js,Magic Number,"{'line': 47, 'column': 46, 'index': 1318}","  45 |     let response = handler.handle(request);
  46 |
> 47 |     expect(schema.db.wordSmiths).toHaveLength(0);
     |                                              ^ Magic Number
  48 |     expect(response).toBeNil();
  49 |   });
  50 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/delete-shorthand-test.js,Magic Number,"{'line': 66, 'column': 46, 'index': 1754}","  64 |     let response = handler.handle(request);
  65 |
> 66 |     expect(schema.db.wordSmiths).toHaveLength(0);
     |                                              ^ Magic Number
  67 |     expect(response).toBeNil();
  68 |   });
  69 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/delete-shorthand-test.js,Magic Number,"{'line': 85, 'column': 46, 'index': 2223}","  83 |     let response = handler.handle(request);
  84 |
> 85 |     expect(schema.db.wordSmiths).toHaveLength(0);
     |                                              ^ Magic Number
  86 |     expect(response).toBeNil();
  87 |   });
  88 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/delete-shorthand-test.js,Magic Number,"{'line': 98, 'column': 46, 'index': 2621}","   96 |     let response = handler.handle(request);
   97 |
>  98 |     expect(schema.db.wordSmiths).toHaveLength(0);
      |                                              ^ Magic Number
   99 |     expect(schema.db.blogPosts).toHaveLength(1);
  100 |     expect(response).toBeNil();
  101 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/delete-shorthand-test.js,Magic Number,"{'line': 99, 'column': 45, 'index': 2670}","   97 |
   98 |     expect(schema.db.wordSmiths).toHaveLength(0);
>  99 |     expect(schema.db.blogPosts).toHaveLength(1);
      |                                             ^ Magic Number
  100 |     expect(response).toBeNil();
  101 |   });
  102 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/delete-shorthand-test.js,Redundant Assertion,"{'column': 4, 'line': 115}","  113 |       handler.handle(request);
  114 |     }).toThrow();
> 115 |     expect(true).toBeTruthy();
      |    ^ Redundant Assertion
  116 |   });
  117 | });
  118 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/function-handler/serialize-test.js,Magic Number,"{'line': 105, 'column': 28, 'index': 2494}","  103 |     let data = await res.json();
  104 |
> 105 |     expect(res.status).toBe(500);
      |                            ^ Magic Number
  106 |     expect(data.message).toMatch(`that serializer doesn't exist`);
  107 |   });
  108 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/function-handler/basic-test.js,Exception Handling,"{'line': 29, 'column': 6, 'index': 731}","  27 |   test(""a meaningful error is thrown if a custom route handler throws an error"", async () => {
  28 |     server.get(""/users"", function () {
> 29 |       throw ""I goofed"";
     |      ^ Exception Handling
  30 |     });
  31 |
  32 |     let res = await fetch(""/users"");",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/route-handlers/function-handler/basic-test.js,Magic Number,"{'line': 109, 'column': 28, 'index': 2741}","  107 |
  108 |     expect(text).toBe("""");
> 109 |     expect(res.status).toBe(200);
      |                            ^ Magic Number
  110 |     expect([...res.headers.entries()]).toEqual([[""content-type"", ""text/csv""]]);
  111 |   });
  112 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/regressions/many-to-many-bug-test.js,Duplicate Assert,"{'line': 40, 'column': 4, 'index': 923}","  38 |     });
  39 |
> 40 |     expect(serverTagA.postIds).toHaveLength(1);
     |    ^ Duplicate Assert
  41 |     expect(serverTagB.postIds).toHaveLength(1);
  42 |     expect(serverPost.tagIds).toEqual([""1"", ""2""]);
  43 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/regressions/many-to-many-bug-test.js,Duplicate Assert,"{'line': 41, 'column': 4, 'index': 971}","  39 |
  40 |     expect(serverTagA.postIds).toHaveLength(1);
> 41 |     expect(serverTagB.postIds).toHaveLength(1);
     |    ^ Duplicate Assert
  42 |     expect(serverPost.tagIds).toEqual([""1"", ""2""]);
  43 |
  44 |     await fetch(""/posts/1"", {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/regressions/many-to-many-bug-test.js,Duplicate Assert,"{'line': 42, 'column': 4, 'index': 1019}","  40 |     expect(serverTagA.postIds).toHaveLength(1);
  41 |     expect(serverTagB.postIds).toHaveLength(1);
> 42 |     expect(serverPost.tagIds).toEqual([""1"", ""2""]);
     |    ^ Duplicate Assert
  43 |
  44 |     await fetch(""/posts/1"", {
  45 |       method: ""PATCH"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/regressions/many-to-many-bug-test.js,Duplicate Assert,"{'line': 71, 'column': 4, 'index': 1595}","  69 |     serverPost.reload();
  70 |
> 71 |     expect(serverTagA.postIds).toEqual([]);
     |    ^ Duplicate Assert
  72 |     expect(serverTagB.postIds).toEqual([""1""]);
  73 |     expect(serverPost.tagIds).toEqual([""2""]);
  74 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/regressions/many-to-many-bug-test.js,Duplicate Assert,"{'line': 72, 'column': 4, 'index': 1639}","  70 |
  71 |     expect(serverTagA.postIds).toEqual([]);
> 72 |     expect(serverTagB.postIds).toEqual([""1""]);
     |    ^ Duplicate Assert
  73 |     expect(serverPost.tagIds).toEqual([""2""]);
  74 |   });
  75 | });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/regressions/many-to-many-bug-test.js,Duplicate Assert,"{'line': 73, 'column': 4, 'index': 1686}","  71 |     expect(serverTagA.postIds).toEqual([]);
  72 |     expect(serverTagB.postIds).toEqual([""1""]);
> 73 |     expect(serverPost.tagIds).toEqual([""2""]);
     |    ^ Duplicate Assert
  74 |   });
  75 | });
  76 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/regressions/many-to-many-bug-test.js,Magic Number,"{'line': 40, 'column': 44, 'index': 963}","  38 |     });
  39 |
> 40 |     expect(serverTagA.postIds).toHaveLength(1);
     |                                            ^ Magic Number
  41 |     expect(serverTagB.postIds).toHaveLength(1);
  42 |     expect(serverPost.tagIds).toEqual([""1"", ""2""]);
  43 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/move-after-handle-request/regressions/many-to-many-bug-test.js,Magic Number,"{'line': 41, 'column': 44, 'index': 1011}","  39 |
  40 |     expect(serverTagA.postIds).toHaveLength(1);
> 41 |     expect(serverTagB.postIds).toHaveLength(1);
     |                                            ^ Magic Number
  42 |     expect(serverPost.tagIds).toEqual([""1"", ""2""]);
  43 |
  44 |     await fetch(""/posts/1"", {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/integration/schema/schema-verification/mixed-test.js,Duplicate Assert,"{'line': 165, 'column': 4, 'index': 4925}","  163 |       articleAuthorAssociation
  164 |     );
> 165 |     expect(author.inverseFor(postAuthorAssociation)).toEqual(
      |    ^ Duplicate Assert
  166 |       writingsAssociation
  167 |     );
  168 |     expect(author.inverseFor(postAuthorAssociation)).toEqual(",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/integration/schema/schema-verification/mixed-test.js,Duplicate Assert,"{'line': 165, 'column': 4, 'index': 4925}","  163 |       articleAuthorAssociation
  164 |     );
> 165 |     expect(author.inverseFor(postAuthorAssociation)).toEqual(
      |    ^ Duplicate Assert
  166 |       writingsAssociation
  167 |     );
  168 |     expect(author.inverseFor(postAuthorAssociation)).toEqual(",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/integration/schema/schema-verification/mixed-test.js,Duplicate Assert,"{'line': 168, 'column': 4, 'index': 5020}","  166 |       writingsAssociation
  167 |     );
> 168 |     expect(author.inverseFor(postAuthorAssociation)).toEqual(
      |    ^ Duplicate Assert
  169 |       writingsAssociation
  170 |     );
  171 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/integration/schema/schema-verification/mixed-test.js,Duplicate Assert,"{'line': 168, 'column': 4, 'index': 5020}","  166 |       writingsAssociation
  167 |     );
> 168 |     expect(author.inverseFor(postAuthorAssociation)).toEqual(
      |    ^ Duplicate Assert
  169 |       writingsAssociation
  170 |     );
  171 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/internal/integration/performance/simple-factory-test.js,Conditional Test Logic,"{'line': 43, 'column': 4, 'index': 880}","  41 |     });
  42 |
> 43 |     if (timeout) {
     |    ^ Conditional Test Logic
  44 |       expect(duration).toBeLessThan(timeout);
  45 |     } else {
  46 |       expect(`${duration}ms`).toBeTruthy();",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/identity-manager-test.js,Conditional Test Logic,"{'line': 14, 'column': 4, 'index': 221}","  12 |   }
  13 |   fetch() {
> 14 |     if (this.wasCalled) {
     |    ^ Conditional Test Logic
  15 |       throw new Error(
  16 |         ""IdentityManager used for test only supports one call to fetch""
  17 |       );",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/server/load-fixtures-test.js,Magic Number,"{'line': 34, 'column': 43, 'index': 746}","  32 |     server.loadFixtures();
  33 |
> 34 |     expect(server.db.authors).toHaveLength(2);
     |                                           ^ Magic Number
  35 |     expect(server.db.posts).toHaveLength(2);
  36 |     expect(server.db.comments).toHaveLength(1);
  37 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/server/load-fixtures-test.js,Magic Number,"{'line': 35, 'column': 41, 'index': 791}","  33 |
  34 |     expect(server.db.authors).toHaveLength(2);
> 35 |     expect(server.db.posts).toHaveLength(2);
     |                                         ^ Magic Number
  36 |     expect(server.db.comments).toHaveLength(1);
  37 |   });
  38 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/server/load-fixtures-test.js,Magic Number,"{'line': 36, 'column': 44, 'index': 839}","  34 |     expect(server.db.authors).toHaveLength(2);
  35 |     expect(server.db.posts).toHaveLength(2);
> 36 |     expect(server.db.comments).toHaveLength(1);
     |                                            ^ Magic Number
  37 |   });
  38 |
  39 |   test(""it can load a single named fixture file"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/server/load-fixtures-test.js,Magic Number,"{'line': 42, 'column': 43, 'index': 988}","  40 |     server.loadFixtures(""authors"");
  41 |
> 42 |     expect(server.db.authors).toHaveLength(2);
     |                                           ^ Magic Number
  43 |     expect(server.db.posts).toHaveLength(0);
  44 |     expect(server.db.comments).toHaveLength(0);
  45 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/server/load-fixtures-test.js,Magic Number,"{'line': 43, 'column': 41, 'index': 1033}","  41 |
  42 |     expect(server.db.authors).toHaveLength(2);
> 43 |     expect(server.db.posts).toHaveLength(0);
     |                                         ^ Magic Number
  44 |     expect(server.db.comments).toHaveLength(0);
  45 |   });
  46 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/server/load-fixtures-test.js,Magic Number,"{'line': 44, 'column': 44, 'index': 1081}","  42 |     expect(server.db.authors).toHaveLength(2);
  43 |     expect(server.db.posts).toHaveLength(0);
> 44 |     expect(server.db.comments).toHaveLength(0);
     |                                            ^ Magic Number
  45 |   });
  46 |
  47 |   test(""it can load several named single fixtures"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/server/load-fixtures-test.js,Magic Number,"{'line': 50, 'column': 43, 'index': 1241}","  48 |     server.loadFixtures(""authors"", ""posts"");
  49 |
> 50 |     expect(server.db.authors).toHaveLength(2);
     |                                           ^ Magic Number
  51 |     expect(server.db.posts).toHaveLength(2);
  52 |     expect(server.db.comments).toHaveLength(0);
  53 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/server/load-fixtures-test.js,Magic Number,"{'line': 51, 'column': 41, 'index': 1286}","  49 |
  50 |     expect(server.db.authors).toHaveLength(2);
> 51 |     expect(server.db.posts).toHaveLength(2);
     |                                         ^ Magic Number
  52 |     expect(server.db.comments).toHaveLength(0);
  53 |   });
  54 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/server/load-fixtures-test.js,Magic Number,"{'line': 52, 'column': 44, 'index': 1334}","  50 |     expect(server.db.authors).toHaveLength(2);
  51 |     expect(server.db.posts).toHaveLength(2);
> 52 |     expect(server.db.comments).toHaveLength(0);
     |                                            ^ Magic Number
  53 |   });
  54 |
  55 |   test(""it throws on a non-existing file name"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/serializers/json-api-serializer/associations/model-test.js,Conditional Test Logic,"{'line': 93, 'column': 12, 'index': 2519}","  91 |         application: JSONAPISerializer.extend({
  92 |           shouldIncludeLinkageData(relationshipName, model) {
> 93 |             if (relationshipName === ""wordSmith"") {
     |            ^ Conditional Test Logic
  94 |               return true;
  95 |             }
  96 |           },",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/serializers/json-api-serializer/associations/model-test.js,Conditional Test Logic,"{'line': 132, 'column': 12, 'index': 3579}","  130 |         wordSmith: JSONAPISerializer.extend({
  131 |           shouldIncludeLinkageData(relationshipName, model) {
> 132 |             if (relationshipName === ""blogPosts"") {
      |            ^ Conditional Test Logic
  133 |               return true;
  134 |             }
  135 |           },",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/serializers/json-api-serializer/associations/collection-test.js,Conditional Test Logic,"{'line': 112, 'column': 12, 'index': 3124}","  110 |         application: JSONAPISerializer.extend({
  111 |           shouldIncludeLinkageData(relationshipName, model) {
> 112 |             if (relationshipName == ""posts"") {
      |            ^ Conditional Test Logic
  113 |               return true;
  114 |             }
  115 |           },",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/where-test.js,Magic Number,"{'line': 33, 'column': 38, 'index': 761}","  31 |
  32 |     expect(users instanceof Collection).toBeTruthy();
> 33 |     expect(users.models).toHaveLength(1);
     |                                      ^ Magic Number
  34 |     expect(users.models[0] instanceof User).toBeTruthy();
  35 |     expect(users.models[0].attrs).toEqual({
  36 |       id: ""3"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/where-test.js,Magic Number,"{'line': 48, 'column': 38, 'index': 1191}","  46 |
  47 |     expect(users instanceof Collection).toBeTruthy();
> 48 |     expect(users.models).toHaveLength(1);
     |                                      ^ Magic Number
  49 |     expect(users.models[0] instanceof User).toBeTruthy();
  50 |     expect(users.models[0].attrs).toEqual({
  51 |       id: ""3"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/where-test.js,Magic Number,"{'line': 61, 'column': 38, 'index': 1610}","  59 |
  60 |     expect(users instanceof Collection).toBeTruthy();
> 61 |     expect(users.models).toHaveLength(0);
     |                                      ^ Magic Number
  62 |   });
  63 | });
  64 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/update-test.js,Duplicate Assert,"{'line': 69, 'column': 4, 'index': 1819}","  67 |     user.name = ""Young link"";
  68 |
> 69 |     expect(user.attrs).toEqual({
     |    ^ Duplicate Assert
  70 |       id: ""1"",
  71 |       name: ""Young link"",
  72 |       location: ""Hyrule"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/update-test.js,Duplicate Assert,"{'line': 69, 'column': 4, 'index': 1819}","  67 |     user.name = ""Young link"";
  68 |
> 69 |     expect(user.attrs).toEqual({
     |    ^ Duplicate Assert
  70 |       id: ""1"",
  71 |       name: ""Young link"",
  72 |       location: ""Hyrule"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/update-test.js,Duplicate Assert,"{'line': 75, 'column': 4, 'index': 1946}","  73 |       evil: false,
  74 |     });
> 75 |     expect(server.db.users.find(1)).toEqual({
     |    ^ Duplicate Assert
  76 |       id: ""1"",
  77 |       name: ""Link"",
  78 |       location: ""Hyrule"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/update-test.js,Duplicate Assert,"{'line': 84, 'column': 4, 'index': 2099}","  82 |     user.save();
  83 |
> 84 |     expect(user.attrs).toEqual({
     |    ^ Duplicate Assert
  85 |       id: ""1"",
  86 |       name: ""Young link"",
  87 |       location: ""Hyrule"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/update-test.js,Duplicate Assert,"{'line': 84, 'column': 4, 'index': 2099}","  82 |     user.save();
  83 |
> 84 |     expect(user.attrs).toEqual({
     |    ^ Duplicate Assert
  85 |       id: ""1"",
  86 |       name: ""Young link"",
  87 |       location: ""Hyrule"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/update-test.js,Duplicate Assert,"{'line': 90, 'column': 4, 'index': 2226}","  88 |       evil: false,
  89 |     });
> 90 |     expect(server.db.users.find(1)).toEqual({
     |    ^ Duplicate Assert
  91 |       id: ""1"",
  92 |       name: ""Young link"",
  93 |       location: ""Hyrule"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/none-test.js,Magic Number,"{'line': 31, 'column': 38, 'index': 688}","  29 |
  30 |     expect(users instanceof Collection).toBeTruthy();
> 31 |     expect(users.models).toHaveLength(0);
     |                                      ^ Magic Number
  32 |   });
  33 | });
  34 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/find-test.js,Magic Number,"{'line': 46, 'column': 38, 'index': 1076}","  44 |     expect(users instanceof Collection).toBeTruthy();
  45 |     expect(users.models[0] instanceof User).toBeTruthy();
> 46 |     expect(users.models).toHaveLength(2);
     |                                      ^ Magic Number
  47 |     expect(users.models[1].attrs).toEqual({ id: ""2"", name: ""Zelda"" });
  48 |   });
  49 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/find-or-create-by-test.js,Duplicate Assert,"{'line': 37, 'column': 4, 'index': 877}","  35 |
  36 |   test(""it creates a model if no existing model with the attrs is found"", () => {
> 37 |     expect(server.schema.db.users).toHaveLength(3);
     |    ^ Duplicate Assert
  38 |
  39 |     let newUser = server.schema.users.findOrCreateBy({
  40 |       name: ""Link"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/find-or-create-by-test.js,Duplicate Assert,"{'line': 44, 'column': 4, 'index': 1033}","  42 |     });
  43 |
> 44 |     expect(server.schema.db.users).toHaveLength(4);
     |    ^ Duplicate Assert
  45 |     expect(newUser instanceof User).toBeTruthy();
  46 |     expect(newUser.attrs).toEqual({ id: ""4"", name: ""Link"", good: false });
  47 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/find-or-create-by-test.js,Magic Number,"{'line': 37, 'column': 48, 'index': 921}","  35 |
  36 |   test(""it creates a model if no existing model with the attrs is found"", () => {
> 37 |     expect(server.schema.db.users).toHaveLength(3);
     |                                                ^ Magic Number
  38 |
  39 |     let newUser = server.schema.users.findOrCreateBy({
  40 |       name: ""Link"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/find-or-create-by-test.js,Magic Number,"{'line': 44, 'column': 48, 'index': 1077}","  42 |     });
  43 |
> 44 |     expect(server.schema.db.users).toHaveLength(4);
     |                                                ^ Magic Number
  45 |     expect(newUser instanceof User).toBeTruthy();
  46 |     expect(newUser.attrs).toEqual({ id: ""4"", name: ""Link"", good: false });
  47 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/destroy-test.js,Duplicate Assert,"{'line': 28, 'column': 4, 'index': 617}","  26 |
  27 |   test(""destroying a model removes the associated record from the db"", () => {
> 28 |     expect(server.db.users).toHaveLength(3);
     |    ^ Duplicate Assert
  29 |
  30 |     let link = server.schema.users.find(1);
  31 |     link.destroy();",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/destroy-test.js,Duplicate Assert,"{'line': 34, 'column': 4, 'index': 776}","  32 |
  33 |     expect(server.db.users.find(1)).toBeNull();
> 34 |     expect(server.db.users).toHaveLength(2);
     |    ^ Duplicate Assert
  35 |   });
  36 |
  37 |   test(""destroying a collection removes the associated records from the db"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/destroy-test.js,Duplicate Assert,"{'line': 38, 'column': 4, 'index': 913}","  36 |
  37 |   test(""destroying a collection removes the associated records from the db"", () => {
> 38 |     expect(server.db.users).toHaveLength(3);
     |    ^ Duplicate Assert
  39 |
  40 |     let users = server.schema.users.all();
  41 |     users.destroy();",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/destroy-test.js,Duplicate Assert,"{'line': 43, 'column': 4, 'index': 1024}","  41 |     users.destroy();
  42 |
> 43 |     expect(server.db.users).toBeEmpty();
     |    ^ Duplicate Assert
  44 |   });
  45 | });
  46 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/destroy-test.js,Magic Number,"{'line': 28, 'column': 41, 'index': 654}","  26 |
  27 |   test(""destroying a model removes the associated record from the db"", () => {
> 28 |     expect(server.db.users).toHaveLength(3);
     |                                         ^ Magic Number
  29 |
  30 |     let link = server.schema.users.find(1);
  31 |     link.destroy();",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/destroy-test.js,Magic Number,"{'line': 34, 'column': 41, 'index': 813}","  32 |
  33 |     expect(server.db.users.find(1)).toBeNull();
> 34 |     expect(server.db.users).toHaveLength(2);
     |                                         ^ Magic Number
  35 |   });
  36 |
  37 |   test(""destroying a collection removes the associated records from the db"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/destroy-test.js,Magic Number,"{'line': 38, 'column': 41, 'index': 950}","  36 |
  37 |   test(""destroying a collection removes the associated records from the db"", () => {
> 38 |     expect(server.db.users).toHaveLength(3);
     |                                         ^ Magic Number
  39 |
  40 |     let users = server.schema.users.all();
  41 |     users.destroy();",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/create-test.js,Duplicate Assert,"{'line': 37, 'column': 4, 'index': 851}","  35 |
  36 |     expect(user instanceof User).toBeTruthy();
> 37 |     expect(user.attrs).toEqual({ name: ""Link"" });
     |    ^ Duplicate Assert
  38 |     expect(server.db.users).toBeEmpty();
  39 |
  40 |     user.save();",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/create-test.js,Duplicate Assert,"{'line': 38, 'column': 4, 'index': 901}","  36 |     expect(user instanceof User).toBeTruthy();
  37 |     expect(user.attrs).toEqual({ name: ""Link"" });
> 38 |     expect(server.db.users).toBeEmpty();
     |    ^ Duplicate Assert
  39 |
  40 |     user.save();
  41 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/create-test.js,Duplicate Assert,"{'line': 43, 'column': 4, 'index': 995}","  41 |
  42 |     expect(user.id).toBeTruthy();
> 43 |     expect(user.attrs).toEqual({ id: ""1"", name: ""Link"" });
     |    ^ Duplicate Assert
  44 |     expect(server.db.users).toIncludeSameMembers([{ id: ""1"", name: ""Link"" }]);
  45 |   });
  46 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/create-test.js,Duplicate Assert,"{'line': 44, 'column': 4, 'index': 1054}","  42 |     expect(user.id).toBeTruthy();
  43 |     expect(user.attrs).toEqual({ id: ""1"", name: ""Link"" });
> 44 |     expect(server.db.users).toIncludeSameMembers([{ id: ""1"", name: ""Link"" }]);
     |    ^ Duplicate Assert
  45 |   });
  46 |
  47 |   test(""it can create new models, saved directly to the db"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/collection-test.js,Duplicate Assert,"{'line': 37, 'column': 4, 'index': 860}","  35 |   test(""a collection can reload its models"", () => {
  36 |     let collection = server.schema.users.all();
> 37 |     expect(collection.models[0].name).toBe(""Link"");
     |    ^ Duplicate Assert
  38 |
  39 |     collection.models[0].name = ""Sam"";
  40 |     expect(collection.models[0].name).toBe(""Sam"");",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/collection-test.js,Duplicate Assert,"{'line': 37, 'column': 4, 'index': 860}","  35 |   test(""a collection can reload its models"", () => {
  36 |     let collection = server.schema.users.all();
> 37 |     expect(collection.models[0].name).toBe(""Link"");
     |    ^ Duplicate Assert
  38 |
  39 |     collection.models[0].name = ""Sam"";
  40 |     expect(collection.models[0].name).toBe(""Sam"");",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/collection-test.js,Duplicate Assert,"{'line': 40, 'column': 4, 'index': 952}","  38 |
  39 |     collection.models[0].name = ""Sam"";
> 40 |     expect(collection.models[0].name).toBe(""Sam"");
     |    ^ Duplicate Assert
  41 |
  42 |     collection.reload();
  43 |     expect(collection.models[0].name).toBe(""Link"");",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/collection-test.js,Duplicate Assert,"{'line': 43, 'column': 4, 'index': 1029}","  41 |
  42 |     collection.reload();
> 43 |     expect(collection.models[0].name).toBe(""Link"");
     |    ^ Duplicate Assert
  44 |   });
  45 |
  46 |   test(""a collection can filter its models"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/collection-test.js,Duplicate Assert,"{'line': 43, 'column': 4, 'index': 1029}","  41 |
  42 |     collection.reload();
> 43 |     expect(collection.models[0].name).toBe(""Link"");
     |    ^ Duplicate Assert
  44 |   });
  45 |
  46 |   test(""a collection can filter its models"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/collection-test.js,Duplicate Assert,"{'line': 97, 'column': 4, 'index': 2682}","   95 |     let badGuys = server.schema.users.where((user) => !user.good);
   96 |
>  97 |     expect(goodGuys.models).toHaveLength(2);
      |    ^ Duplicate Assert
   98 |     expect(badGuys.models).toHaveLength(1);
   99 |
  100 |     goodGuys.mergeCollection(badGuys);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/collection-test.js,Duplicate Assert,"{'line': 102, 'column': 4, 'index': 2812}","  100 |     goodGuys.mergeCollection(badGuys);
  101 |
> 102 |     expect(goodGuys.models).toHaveLength(3);
      |    ^ Duplicate Assert
  103 |   });
  104 | });
  105 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/collection-test.js,Magic Number,"{'line': 48, 'column': 43, 'index': 1228}","  46 |   test(""a collection can filter its models"", () => {
  47 |     let collection = server.schema.users.all();
> 48 |     expect(collection.models).toHaveLength(3);
     |                                           ^ Magic Number
  49 |
  50 |     let newCollection = collection.filter((author) => author.good);
  51 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/collection-test.js,Magic Number,"{'line': 54, 'column': 46, 'index': 1460}","  52 |     expect(newCollection instanceof Collection).toBeTruthy();
  53 |     expect(newCollection.modelName).toBe(""user"");
> 54 |     expect(newCollection.models).toHaveLength(2);
     |                                              ^ Magic Number
  55 |   });
  56 |
  57 |   test(""a collection can sort its models"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/collection-test.js,Magic Number,"{'line': 97, 'column': 41, 'index': 2719}","   95 |     let badGuys = server.schema.users.where((user) => !user.good);
   96 |
>  97 |     expect(goodGuys.models).toHaveLength(2);
      |                                         ^ Magic Number
   98 |     expect(badGuys.models).toHaveLength(1);
   99 |
  100 |     goodGuys.mergeCollection(badGuys);",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/collection-test.js,Magic Number,"{'line': 98, 'column': 40, 'index': 2763}","   96 |
   97 |     expect(goodGuys.models).toHaveLength(2);
>  98 |     expect(badGuys.models).toHaveLength(1);
      |                                        ^ Magic Number
   99 |
  100 |     goodGuys.mergeCollection(badGuys);
  101 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/collection-test.js,Magic Number,"{'line': 102, 'column': 41, 'index': 2849}","  100 |     goodGuys.mergeCollection(badGuys);
  101 |
> 102 |     expect(goodGuys.models).toHaveLength(3);
      |                                         ^ Magic Number
  103 |   });
  104 | });
  105 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/assertions-test.js,Redundant Assertion,"{'column': 4, 'line': 37}","  35 |       posts: [],
  36 |     });
> 37 |     expect(true).toBeTruthy();
     |    ^ Redundant Assertion
  38 |   });
  39 |
  40 |   test(""it errors when passing in the wrong type for a HasMany association foreign key"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/all-test.js,Magic Number,"{'line': 33, 'column': 38, 'index': 712}","  31 |     expect(users instanceof Collection).toBeTruthy();
  32 |     expect(users.models[0] instanceof User).toBeTruthy();
> 33 |     expect(users.models).toHaveLength(2);
     |                                      ^ Magic Number
  34 |     expect(users.models[1].attrs).toEqual({ id: ""2"", name: ""Zelda"" });
  35 |   });
  36 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/all-test.js,Magic Number,"{'line': 42, 'column': 38, 'index': 1037}","  40 |     expect(users instanceof Collection).toBeTruthy();
  41 |     expect(users.modelName).toBe(""user"");
> 42 |     expect(users.models).toHaveLength(0);
     |                                      ^ Magic Number
  43 |   });
  44 | });
  45 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/instantiating-test.js,Magic Number,"{'line': 32, 'column': 44, 'index': 935}","  30 |     let user = schema.users.new({ thingIds: null });
  31 |
> 32 |     expect(user.things.models).toHaveLength(0);
     |                                            ^ Magic Number
  33 |     expect(user.thingIds).toBeEmpty();
  34 |     expect(user.attrs).toEqual({ thingIds: null });
  35 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/instantiating-test.js,Magic Number,"{'line': 56, 'column': 44, 'index': 1733}","  54 |     let user = schema.users.new({ things: null });
  55 |
> 56 |     expect(user.things.models).toHaveLength(0);
     |                                            ^ Magic Number
  57 |     expect(user.thingIds).toBeEmpty();
  58 |     expect(user.attrs).toEqual({ thingIds: null });
  59 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 416}","  14 |       let [user, posts] = helper[state]();
  15 |
> 16 |       if (posts && posts.length) {
     |      ^ Conditional Test Logic
  17 |         posts.forEach((p) => p.destroy());
  18 |         user.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/create-test.js,Magic Number,"{'line': 27, 'column': 34, 'index': 875}","  25 |
  26 |     let { db } = helper;
> 27 |     expect(db.posts).toHaveLength(1);
     |                                  ^ Magic Number
  28 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
  29 |     expect(db.users).toHaveLength(1);
  30 |     expect(db.users[0]).toEqual({",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/create-test.js,Magic Number,"{'line': 29, 'column': 34, 'index': 972}","  27 |     expect(db.posts).toHaveLength(1);
  28 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
> 29 |     expect(db.users).toHaveLength(1);
     |                                  ^ Magic Number
  30 |     expect(db.users[0]).toEqual({
  31 |       id: ""1"",
  32 |       thingIds: [{ type: ""post"", id: ""1"" }],",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/create-test.js,Magic Number,"{'line': 48, 'column': 34, 'index': 1598}","  46 |
  47 |     let { db } = helper;
> 48 |     expect(db.posts).toHaveLength(1);
     |                                  ^ Magic Number
  49 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
  50 |     expect(db.users).toHaveLength(1);
  51 |     expect(db.users[0]).toEqual({",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/create-test.js,Magic Number,"{'line': 50, 'column': 34, 'index': 1695}","  48 |     expect(db.posts).toHaveLength(1);
  49 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
> 50 |     expect(db.users).toHaveLength(1);
     |                                  ^ Magic Number
  51 |     expect(db.users[0]).toEqual({
  52 |       id: ""1"",
  53 |       thingIds: [{ type: ""post"", id: ""1"" }],",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/create-test.js,Magic Number,"{'line': 69, 'column': 34, 'index': 2304}","  67 |
  68 |     let { db } = helper;
> 69 |     expect(db.posts).toHaveLength(1);
     |                                  ^ Magic Number
  70 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
  71 |     expect(db.users).toHaveLength(1);
  72 |     expect(db.users[0]).toEqual({",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/create-test.js,Magic Number,"{'line': 71, 'column': 34, 'index': 2401}","  69 |     expect(db.posts).toHaveLength(1);
  70 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
> 71 |     expect(db.users).toHaveLength(1);
     |                                  ^ Magic Number
  72 |     expect(db.users[0]).toEqual({
  73 |       id: ""1"",
  74 |       thingIds: [{ type: ""post"", id: ""1"" }],",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/association-set-test.js,Conditional Test Logic,"{'line': 32, 'column': 8, 'index': 853}","  30 |
  31 |       originalPosts.forEach((post) => {
> 32 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  33 |           post.reload();
  34 |           expect(post.user).toBeNull();
  35 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/association-set-test.js,Conditional Test Logic,"{'line': 51, 'column': 8, 'index': 1365}","  49 |
  50 |       originalPosts.forEach((post) => {
> 51 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  52 |           post.reload();
  53 |           expect(post.user).toBeNull();
  54 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/association-set-test.js,Conditional Test Logic,"{'line': 69, 'column': 8, 'index': 1793}","  67 |
  68 |       originalPosts.forEach((post) => {
> 69 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  70 |           post.reload();
  71 |           expect(post.user).toBeNull();
  72 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/association-set-test.js,Conditional Test Logic,"{'line': 87, 'column': 8, 'index': 2223}","  85 |
  86 |       originalPosts.forEach((post) => {
> 87 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  88 |           post.reload();
  89 |           expect(post.user).toBeNull();
  90 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/association-set-ids-test.js,Conditional Test Logic,"{'line': 34, 'column': 8, 'index': 1011}","  32 |       // Check old associates
  33 |       originalPosts.forEach((post) => {
> 34 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  35 |           post.reload();
  36 |           expect(post.user).toBeNull();
  37 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/association-set-ids-test.js,Conditional Test Logic,"{'line': 53, 'column': 8, 'index': 1471}","  51 |       // Check old associates
  52 |       originalPosts.forEach((post) => {
> 53 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  54 |           post.reload();
  55 |           expect(post.user).toBeNull();
  56 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/accessor-test.js,Conditional Test Logic,"{'line': 25, 'column': 8, 'index': 686}","  23 |         expect(user.things.includes(post)).toBeTruthy();
  24 |
> 25 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  26 |           expect(
  27 |             user.thingIds.find((obj) => {
  28 |               return obj.id === post.id && obj.type === ""post"";",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/2-many-to-one/create-test.js,Magic Number,"{'line': 28, 'column': 34, 'index': 796}","  26 |
  27 |     let { db } = helper;
> 28 |     expect(db.posts).toHaveLength(1);
     |                                  ^ Magic Number
  29 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
  30 |     expect(db.users).toHaveLength(1);
  31 |     expect(db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/2-many-to-one/create-test.js,Magic Number,"{'line': 30, 'column': 34, 'index': 893}","  28 |     expect(db.posts).toHaveLength(1);
  29 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
> 30 |     expect(db.users).toHaveLength(1);
     |                                  ^ Magic Number
  31 |     expect(db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });
  32 |   });
  33 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/2-many-to-one/create-test.js,Magic Number,"{'line': 47, 'column': 34, 'index': 1432}","  45 |
  46 |     let { db } = helper;
> 47 |     expect(db.posts).toHaveLength(1);
     |                                  ^ Magic Number
  48 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
  49 |     expect(db.users).toHaveLength(1);
  50 |     expect(db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/2-many-to-one/create-test.js,Magic Number,"{'line': 49, 'column': 34, 'index': 1529}","  47 |     expect(db.posts).toHaveLength(1);
  48 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
> 49 |     expect(db.users).toHaveLength(1);
     |                                  ^ Magic Number
  50 |     expect(db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });
  51 |   });
  52 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/2-many-to-one/association-set-test.js,Conditional Test Logic,"{'line': 28, 'column': 6, 'index': 720}","  26 |
  27 |       // Old inverse was cleared
> 28 |       if (originalUser && originalUser.isSaved()) {
     |      ^ Conditional Test Logic
  29 |         originalUser.reload();
  30 |         expect(originalUser.posts.includes(post)).toBeFalsy();
  31 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/2-many-to-one/association-set-test.js,Conditional Test Logic,"{'line': 46, 'column': 6, 'index': 1229}","  44 |
  45 |       // Old inverse was cleared
> 46 |       if (originalUser && originalUser.isSaved()) {
     |      ^ Conditional Test Logic
  47 |         originalUser.reload();
  48 |         expect(originalUser.posts.includes(post)).toBeFalsy();
  49 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/2-many-to-one/association-set-test.js,Conditional Test Logic,"{'line': 62, 'column': 6, 'index': 1633}","  60 |
  61 |       // Old inverse was cleared
> 62 |       if (originalUser && originalUser.isSaved()) {
     |      ^ Conditional Test Logic
  63 |         originalUser.reload();
  64 |         expect(originalUser.posts.includes(post)).toBeFalsy();
  65 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/2-many-to-one/association-set-ids-test.js,Conditional Test Logic,"{'line': 33, 'column': 6, 'index': 863}","  31 |
  32 |       // Old inverses were cleared
> 33 |       if (originalUser && originalUser.isSaved()) {
     |      ^ Conditional Test Logic
  34 |         originalUser.reload();
  35 |         expect(originalUser.posts.includes(post)).toBeFalsy();
  36 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/2-many-to-one/association-set-ids-test.js,Conditional Test Logic,"{'line': 49, 'column': 6, 'index': 1276}","  47 |       post.save();
  48 |
> 49 |       if (originalUser && originalUser.isSaved()) {
     |      ^ Conditional Test Logic
  50 |         originalUser.reload();
  51 |         expect(originalUser.posts.includes(post)).toBeFalsy();
  52 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/2-many-to-one/association-new-test.js,Conditional Test Logic,"{'line': 37, 'column': 6, 'index': 964}","  35 |
  36 |       // Ensure old inverse was cleared
> 37 |       if (originalUser && originalUser.isSaved()) {
     |      ^ Conditional Test Logic
  38 |         originalUser.reload();
  39 |         expect(originalUser.posts.includes(post)).toBeFalsy();
  40 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/2-many-to-one/association-create-test.js,Conditional Test Logic,"{'line': 29, 'column': 6, 'index': 783}","  27 |
  28 |       // Ensure old inverse was cleared
> 29 |       if (originalUser && originalUser.isSaved()) {
     |      ^ Conditional Test Logic
  30 |         originalUser.reload();
  31 |         expect(originalUser.posts.includes(post)).toBeFalsy();
  32 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/2-many-to-one/accessor-test.js,Conditional Test Logic,"{'line': 19, 'column': 6, 'index': 463}","  17 |       let [post, user] = helper[state]();
  18 |
> 19 |       if (post.user) {
     |      ^ Conditional Test Logic
  20 |         expect(post.user.equals(user)).toBeTruthy();
  21 |       } else {
  22 |         expect(post.user).toBeNull();",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/2-many-to-one/accessor-test.js,Conditional Test Logic,"{'line': 30, 'column': 6, 'index': 739}","  28 |
  29 |       // Check the inverse
> 30 |       if (user && user.isSaved()) {
     |      ^ Conditional Test Logic
  31 |         user.reload();
  32 |         expect(user.posts.includes(post)).toBeTruthy();
  33 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/instantiating-test.js,Magic Number,"{'line': 32, 'column': 43, 'index': 851}","  30 |     let user = schema.users.new({ postIds: null });
  31 |
> 32 |     expect(user.posts.models).toHaveLength(0);
     |                                           ^ Magic Number
  33 |     expect(user.postIds).toBeEmpty();
  34 |     expect(user.attrs).toEqual({ postIds: null });
  35 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/instantiating-test.js,Magic Number,"{'line': 56, 'column': 43, 'index': 1595}","  54 |     let user = schema.users.new({ posts: null });
  55 |
> 56 |     expect(user.posts.models).toHaveLength(0);
     |                                           ^ Magic Number
  57 |     expect(user.postIds).toBeEmpty();
  58 |     expect(user.attrs).toEqual({ postIds: null });
  59 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/create-test.js,Magic Number,"{'line': 27, 'column': 34, 'index': 793}","  25 |
  26 |     let { db } = helper;
> 27 |     expect(db.posts).toHaveLength(1);
     |                                  ^ Magic Number
  28 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
  29 |     expect(db.users).toHaveLength(1);
  30 |     expect(db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/create-test.js,Magic Number,"{'line': 29, 'column': 34, 'index': 890}","  27 |     expect(db.posts).toHaveLength(1);
  28 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
> 29 |     expect(db.users).toHaveLength(1);
     |                                  ^ Magic Number
  30 |     expect(db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });
  31 |   });
  32 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/create-test.js,Magic Number,"{'line': 45, 'column': 34, 'index': 1428}","  43 |
  44 |     let { db } = helper;
> 45 |     expect(db.posts).toHaveLength(1);
     |                                  ^ Magic Number
  46 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
  47 |     expect(db.users).toHaveLength(1);
  48 |     expect(db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/create-test.js,Magic Number,"{'line': 47, 'column': 34, 'index': 1525}","  45 |     expect(db.posts).toHaveLength(1);
  46 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
> 47 |     expect(db.users).toHaveLength(1);
     |                                  ^ Magic Number
  48 |     expect(db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });
  49 |   });
  50 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/create-test.js,Magic Number,"{'line': 63, 'column': 34, 'index': 2046}","  61 |
  62 |     let { db } = helper;
> 63 |     expect(db.posts).toHaveLength(1);
     |                                  ^ Magic Number
  64 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
  65 |     expect(db.users).toHaveLength(1);
  66 |     expect(db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/create-test.js,Magic Number,"{'line': 65, 'column': 34, 'index': 2143}","  63 |     expect(db.posts).toHaveLength(1);
  64 |     expect(db.posts[0]).toEqual({ id: ""1"", userId: ""1"" });
> 65 |     expect(db.users).toHaveLength(1);
     |                                  ^ Magic Number
  66 |     expect(db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });
  67 |   });
  68 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/association-set-test.js,Conditional Test Logic,"{'line': 28, 'column': 8, 'index': 766}","  26 |
  27 |       originalPosts.forEach((post) => {
> 28 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  29 |           post.reload();
  30 |           expect(post.user).toBeNull();
  31 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/association-set-test.js,Conditional Test Logic,"{'line': 47, 'column': 8, 'index': 1253}","  45 |
  46 |       originalPosts.forEach((post) => {
> 47 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  48 |           post.reload();
  49 |           expect(post.user).toBeNull();
  50 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/association-set-test.js,Conditional Test Logic,"{'line': 65, 'column': 8, 'index': 1678}","  63 |
  64 |       originalPosts.forEach((post) => {
> 65 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  66 |           post.reload();
  67 |           expect(post.user).toBeNull();
  68 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/association-set-test.js,Conditional Test Logic,"{'line': 83, 'column': 8, 'index': 2105}","  81 |
  82 |       originalPosts.forEach((post) => {
> 83 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  84 |           post.reload();
  85 |           expect(post.user).toBeNull();
  86 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/association-set-ids-test.js,Conditional Test Logic,"{'line': 34, 'column': 8, 'index': 952}","  32 |       // Check old associates
  33 |       originalPosts.forEach((post) => {
> 34 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  35 |           post.reload();
  36 |           expect(post.user).toBeNull();
  37 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/association-set-ids-test.js,Conditional Test Logic,"{'line': 53, 'column': 8, 'index': 1409}","  51 |       // Check old associates
  52 |       originalPosts.forEach((post) => {
> 53 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  54 |           post.reload();
  55 |           expect(post.user).toBeNull();
  56 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/mixed/1-one-to-many/accessor-test.js,Conditional Test Logic,"{'line': 25, 'column': 8, 'index': 671}","  23 |         expect(user.posts.includes(post)).toBeTruthy();
  24 |
> 25 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  26 |           expect(user.postIds.indexOf(post.id) > -1).toBeTruthy();
  27 |         }
  28 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/9-one-way-polymorphic/instantiating-test.js,Magic Number,"{'line': 32, 'column': 44, 'index': 934}","  30 |     let user = schema.users.new({ thingIds: null });
  31 |
> 32 |     expect(user.things.models).toHaveLength(0);
     |                                            ^ Magic Number
  33 |     expect(user.thingIds).toBeEmpty();
  34 |     expect(user.attrs).toEqual({ thingIds: null });
  35 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/9-one-way-polymorphic/instantiating-test.js,Magic Number,"{'line': 56, 'column': 44, 'index': 1740}","  54 |     let user = schema.users.new({ things: null });
  55 |
> 56 |     expect(user.things.models).toHaveLength(0);
     |                                            ^ Magic Number
  57 |     expect(user.thingIds).toBeEmpty();
  58 |     expect(user.attrs).toEqual({ thingIds: null });
  59 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/9-one-way-polymorphic/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 415}","  14 |       let [user, posts] = helper[state]();
  15 |
> 16 |       if (posts && posts.length) {
     |      ^ Conditional Test Logic
  17 |         posts.forEach((p) => p.destroy());
  18 |         user.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/9-one-way-polymorphic/create-test.js,Magic Number,"{'line': 23, 'column': 41, 'index': 795}","  21 |     expect(user.attrs.thingIds).toEqual([{ type: ""post"", id: post.id }]);
  22 |     expect(user.things.models[0].attrs).toEqual(post.attrs);
> 23 |     expect(helper.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  24 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
  25 |     expect(helper.db.users).toHaveLength(1);
  26 |     expect(helper.db.users[0]).toEqual({",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/9-one-way-polymorphic/create-test.js,Magic Number,"{'line': 25, 'column': 41, 'index': 893}","  23 |     expect(helper.db.posts).toHaveLength(1);
  24 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
> 25 |     expect(helper.db.users).toHaveLength(1);
     |                                         ^ Magic Number
  26 |     expect(helper.db.users[0]).toEqual({
  27 |       id: ""1"",
  28 |       thingIds: [{ type: ""post"", id: ""1"" }],",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/9-one-way-polymorphic/create-test.js,Magic Number,"{'line': 41, 'column': 41, 'index': 1458}","  39 |     expect(user.attrs.thingIds).toEqual([{ type: ""post"", id: post.id }]);
  40 |     expect(user.things.includes(post)).toBeTruthy();
> 41 |     expect(helper.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  42 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
  43 |     expect(helper.db.users).toHaveLength(1);
  44 |     expect(helper.db.users[0]).toEqual({",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/9-one-way-polymorphic/create-test.js,Magic Number,"{'line': 43, 'column': 41, 'index': 1556}","  41 |     expect(helper.db.posts).toHaveLength(1);
  42 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
> 43 |     expect(helper.db.users).toHaveLength(1);
     |                                         ^ Magic Number
  44 |     expect(helper.db.users[0]).toEqual({
  45 |       id: ""1"",
  46 |       thingIds: [{ type: ""post"", id: ""1"" }],",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/9-one-way-polymorphic/create-test.js,Magic Number,"{'line': 59, 'column': 41, 'index': 2134}","  57 |     expect(user.attrs.thingIds).toEqual([{ type: ""post"", id: post.id }]);
  58 |     expect(user.things.includes(post)).toBeTruthy();
> 59 |     expect(helper.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  60 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
  61 |     expect(helper.db.users).toHaveLength(1);
  62 |     expect(helper.db.users[0]).toEqual({",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/9-one-way-polymorphic/create-test.js,Magic Number,"{'line': 61, 'column': 41, 'index': 2232}","  59 |     expect(helper.db.posts).toHaveLength(1);
  60 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
> 61 |     expect(helper.db.users).toHaveLength(1);
     |                                         ^ Magic Number
  62 |     expect(helper.db.users[0]).toEqual({
  63 |       id: ""1"",
  64 |       thingIds: [{ type: ""post"", id: ""1"" }],",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/9-one-way-polymorphic/accessor-test.js,Conditional Test Logic,"{'line': 25, 'column': 8, 'index': 688}","  23 |         expect(user.things.includes(post)).toBeTruthy();
  24 |
> 25 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  26 |           expect(user.thingIds[i]).toEqual({ type: ""post"", id: post.id });
  27 |         }
  28 |       });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/8-many-to-many/new-test.js,Magic Number,"{'line': 32, 'column': 47, 'index': 883}","  30 |     let order = schema.orders.new({ productIds: null });
  31 |
> 32 |     expect(order.products.models).toHaveLength(0);
     |                                               ^ Magic Number
  33 |     expect(order.productIds).toBeEmpty();
  34 |     expect(order.attrs).toEqual({ productIds: null });
  35 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/8-many-to-many/new-test.js,Magic Number,"{'line': 56, 'column': 47, 'index': 1692}","  54 |     let order = schema.orders.new({ products: null });
  55 |
> 56 |     expect(order.products.models).toHaveLength(0);
     |                                               ^ Magic Number
  57 |     expect(order.productIds).toBeEmpty();
  58 |     expect(order.attrs).toEqual({ productIds: null });
  59 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/8-many-to-many/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 412}","  14 |       let [order, products] = helper[state]();
  15 |
> 16 |       if (products && products.length) {
     |      ^ Conditional Test Logic
  17 |         products.forEach((t) => t.destroy());
  18 |         order.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/8-many-to-many/create-test.js,Magic Number,"{'line': 29, 'column': 42, 'index': 961}","  27 |     expect(order.products.models[0].attrs).toEqual(product.attrs);
  28 |     expect(product.orders.models[0].attrs).toEqual(order.attrs);
> 29 |     expect(helper.db.orders).toHaveLength(1);
     |                                          ^ Magic Number
  30 |     expect(helper.db.products).toHaveLength(1);
  31 |     expect(helper.db.orders[0]).toEqual({ id: ""1"", productIds: [""1""] });
  32 |     expect(helper.db.products[0]).toEqual({ id: ""1"", orderIds: [""1""] });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/8-many-to-many/create-test.js,Magic Number,"{'line': 30, 'column': 44, 'index': 1009}","  28 |     expect(product.orders.models[0].attrs).toEqual(order.attrs);
  29 |     expect(helper.db.orders).toHaveLength(1);
> 30 |     expect(helper.db.products).toHaveLength(1);
     |                                            ^ Magic Number
  31 |     expect(helper.db.orders[0]).toEqual({ id: ""1"", productIds: [""1""] });
  32 |     expect(helper.db.products[0]).toEqual({ id: ""1"", orderIds: [""1""] });
  33 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/8-many-to-many/create-test.js,Magic Number,"{'line': 48, 'column': 42, 'index': 1682}","  46 |     expect(order.attrs.productIds).toEqual([product.id]);
  47 |     expect(product.attrs.orderIds).toEqual([order.id]);
> 48 |     expect(helper.db.orders).toHaveLength(1);
     |                                          ^ Magic Number
  49 |     expect(helper.db.products).toHaveLength(1);
  50 |   });
  51 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/8-many-to-many/create-test.js,Magic Number,"{'line': 49, 'column': 44, 'index': 1730}","  47 |     expect(product.attrs.orderIds).toEqual([order.id]);
  48 |     expect(helper.db.orders).toHaveLength(1);
> 49 |     expect(helper.db.products).toHaveLength(1);
     |                                            ^ Magic Number
  50 |   });
  51 |
  52 |   test(""it sets up associations correctly when passing in a collection"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/8-many-to-many/create-test.js,Magic Number,"{'line': 65, 'column': 42, 'index': 2263}","  63 |     expect(order.attrs.productIds).toEqual([product.id]);
  64 |     expect(product.attrs.orderIds).toEqual([order.id]);
> 65 |     expect(helper.db.orders).toHaveLength(1);
     |                                          ^ Magic Number
  66 |     expect(helper.db.products).toHaveLength(1);
  67 |   });
  68 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/8-many-to-many/create-test.js,Magic Number,"{'line': 66, 'column': 44, 'index': 2311}","  64 |     expect(product.attrs.orderIds).toEqual([order.id]);
  65 |     expect(helper.db.orders).toHaveLength(1);
> 66 |     expect(helper.db.products).toHaveLength(1);
     |                                            ^ Magic Number
  67 |   });
  68 |
  69 |   test(""it throws an error if a model is passed in without a defined relationship"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/8-many-to-many/association-set-ids-test.js,Conditional Test Logic,"{'line': 27, 'column': 8, 'index': 832}","  25 |       expect(savedProduct.orders.models[0].attrs).toEqual(order.attrs);
  26 |       originalProducts.forEach((p) => {
> 27 |         if (p.isSaved()) {
     |        ^ Conditional Test Logic
  28 |           p.reload();
  29 |           expect(p.orders.includes(order)).toBeFalsy();
  30 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/8-many-to-many/accessor-test.js,Conditional Test Logic,"{'line': 22, 'column': 8, 'index': 611}","  20 |         expect(order.products.includes(p)).toBeTruthy();
  21 |
> 22 |         if (p.isSaved()) {
     |        ^ Conditional Test Logic
  23 |           expect(order.productIds.indexOf(p.id) > -1).toBeTruthy();
  24 |         }
  25 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/new-test.js,Magic Number,"{'line': 32, 'column': 43, 'index': 857}","  30 |     let tag = schema.tags.new({ labelIds: null });
  31 |
> 32 |     expect(tag.labels.models).toHaveLength(0);
     |                                           ^ Magic Number
  33 |     expect(tag.labelIds).toBeEmpty();
  34 |     expect(tag.attrs).toEqual({ labelIds: null });
  35 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/new-test.js,Magic Number,"{'line': 56, 'column': 43, 'index': 1601}","  54 |     let tag = schema.tags.new({ labels: null });
  55 |
> 56 |     expect(tag.labels.models).toHaveLength(0);
     |                                           ^ Magic Number
  57 |     expect(tag.labelIds).toBeEmpty();
  58 |     expect(tag.attrs).toEqual({ labelIds: null });
  59 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 419}","  14 |       let [tag, labels] = helper[state]();
  15 |
> 16 |       if (labels && labels.length) {
     |      ^ Conditional Test Logic
  17 |         labels.forEach((t) => t.destroy());
  18 |         tag.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/create-test.js,Magic Number,"{'line': 27, 'column': 40, 'index': 802}","  25 |     expect(tagB.attrs.labelIds).toEqual([tagA.id]);
  26 |     expect(tagB.labels.models[0].attrs).toEqual(tagA.attrs);
> 27 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  28 |     expect(helper.db.tags[0]).toEqual({ id: ""1"", labelIds: null });
  29 |     expect(helper.db.tags[1]).toEqual({ id: ""2"", labelIds: [""1""] });
  30 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/create-test.js,Magic Number,"{'line': 45, 'column': 40, 'index': 1411}","  43 |     expect(tagB.attrs.labelIds).toEqual([tagA.id]);
  44 |     expect(tagA.attrs.labelIds).toBeNull();
> 45 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  46 |   });
  47 |
  48 |   test(""it sets up associations correctly when passing in a collection"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/create-test.js,Magic Number,"{'line': 61, 'column': 40, 'index': 1888}","  59 |     expect(tagB.attrs.labelIds).toEqual([tagA.id]);
  60 |     expect(tagA.attrs.labelIds).toBeNull();
> 61 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  62 |   });
  63 |
  64 |   test(""it throws an error if a model is passed in without a defined relationship"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/accessor-test.js,Conditional Test Logic,"{'line': 22, 'column': 8, 'index': 592}","  20 |         expect(tag.labels.includes(t)).toBeTruthy();
  21 |
> 22 |         if (t.isSaved()) {
     |        ^ Conditional Test Logic
  23 |           expect(tag.labelIds.indexOf(t.id) > -1).toBeTruthy();
  24 |         }
  25 |       });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/6-one-way-reflexive/new-test.js,Magic Number,"{'line': 32, 'column': 41, 'index': 839}","  30 |     let tag = schema.tags.new({ tagIds: null });
  31 |
> 32 |     expect(tag.tags.models).toHaveLength(0);
     |                                         ^ Magic Number
  33 |     expect(tag.tagIds).toBeEmpty();
  34 |     expect(tag.attrs).toEqual({ tagIds: null });
  35 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/6-one-way-reflexive/new-test.js,Magic Number,"{'line': 56, 'column': 41, 'index': 1563}","  54 |     let tag = schema.tags.new({ tags: null });
  55 |
> 56 |     expect(tag.tags.models).toHaveLength(0);
     |                                         ^ Magic Number
  57 |     expect(tag.tagIds).toBeEmpty();
  58 |     expect(tag.attrs).toEqual({ tagIds: null });
  59 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/6-one-way-reflexive/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 411}","  14 |       let [tag, tags] = helper[state]();
  15 |
> 16 |       if (tags && tags.length) {
     |      ^ Conditional Test Logic
  17 |         tags.forEach((t) => t.destroy());
  18 |         tag.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/6-one-way-reflexive/create-test.js,Magic Number,"{'line': 27, 'column': 40, 'index': 786}","  25 |     expect(tagB.attrs.tagIds).toEqual([tagA.id]);
  26 |     expect(tagB.tags.models[0].attrs).toEqual(tagA.attrs);
> 27 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  28 |     expect(helper.db.tags[0]).toEqual({ id: ""1"", tagIds: null });
  29 |     expect(helper.db.tags[1]).toEqual({ id: ""2"", tagIds: [""1""] });
  30 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/6-one-way-reflexive/create-test.js,Magic Number,"{'line': 45, 'column': 40, 'index': 1381}","  43 |     expect(tagB.attrs.tagIds).toEqual([tagA.id]);
  44 |     expect(tagA.attrs.tagIds).toBeNull();
> 45 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  46 |   });
  47 |
  48 |   test(""it sets up associations correctly when passing in a collection"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/6-one-way-reflexive/create-test.js,Magic Number,"{'line': 61, 'column': 40, 'index': 1848}","  59 |     expect(tagB.attrs.tagIds).toEqual([tagA.id]);
  60 |     expect(tagA.attrs.tagIds).toBeNull();
> 61 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  62 |   });
  63 |
  64 |   test(""it throws an error if a model is passed in without a defined relationship"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/6-one-way-reflexive/accessor-test.js,Conditional Test Logic,"{'line': 22, 'column': 8, 'index': 580}","  20 |         expect(tag.tags.includes(t)).toBeTruthy();
  21 |
> 22 |         if (t.isSaved()) {
     |        ^ Conditional Test Logic
  23 |           expect(tag.tagIds.indexOf(t.id) > -1).toBeTruthy();
  24 |         }
  25 |       });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/new-test.js,Magic Number,"{'line': 32, 'column': 43, 'index': 866}","  30 |     let tag = schema.tags.new({ labelIds: null });
  31 |
> 32 |     expect(tag.labels.models).toHaveLength(0);
     |                                           ^ Magic Number
  33 |     expect(tag.labelIds).toBeEmpty();
  34 |     expect(tag.attrs).toEqual({ labelIds: null });
  35 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/new-test.js,Magic Number,"{'line': 56, 'column': 43, 'index': 1610}","  54 |     let tag = schema.tags.new({ labels: null });
  55 |
> 56 |     expect(tag.labels.models).toHaveLength(0);
     |                                           ^ Magic Number
  57 |     expect(tag.labelIds).toBeEmpty();
  58 |     expect(tag.attrs).toEqual({ labelIds: null });
  59 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 428}","  14 |       let [tag, labels] = helper[state]();
  15 |
> 16 |       if (labels && labels.length) {
     |      ^ Conditional Test Logic
  17 |         labels.forEach((t) => t.destroy());
  18 |         tag.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/create-test.js,Magic Number,"{'line': 29, 'column': 40, 'index': 931}","  27 |     expect(tagA.labels.models[0].attrs).toEqual(tagB.attrs);
  28 |     expect(tagB.labels.models[0].attrs).toEqual(tagA.attrs);
> 29 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  30 |     expect(helper.db.tags[0]).toEqual({ id: ""1"", labelIds: [""2""] });
  31 |     expect(helper.db.tags[1]).toEqual({ id: ""2"", labelIds: [""1""] });
  32 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/create-test.js,Magic Number,"{'line': 47, 'column': 40, 'index': 1556}","  45 |     expect(tagA.attrs.labelIds).toEqual([tagB.id]);
  46 |     expect(tagB.attrs.labelIds).toEqual([tagA.id]);
> 47 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  48 |   });
  49 |
  50 |   test(""it sets up associations correctly when passing in a collection"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/create-test.js,Magic Number,"{'line': 63, 'column': 40, 'index': 2048}","  61 |     expect(tagB.attrs.labelIds).toEqual([tagA.id]);
  62 |     expect(tagA.attrs.labelIds).toEqual([tagB.id]);
> 63 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  64 |   });
  65 |
  66 |   test(""it throws an error if a model is passed in without a defined relationship"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/association-set-ids-test.js,Conditional Test Logic,"{'line': 27, 'column': 8, 'index': 812}","  25 |       expect(savedTag.labels.models[0].attrs).toEqual(tag.attrs);
  26 |       originalTags.forEach((originalTag) => {
> 27 |         if (originalTag.isSaved()) {
     |        ^ Conditional Test Logic
  28 |           originalTag.reload();
  29 |           expect(originalTag.labels.includes(tag)).toBeFalsy();
  30 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/accessor-test.js,Conditional Test Logic,"{'line': 22, 'column': 8, 'index': 601}","  20 |         expect(tag.labels.includes(t)).toBeTruthy();
  21 |
> 22 |         if (t.isSaved()) {
     |        ^ Conditional Test Logic
  23 |           expect(tag.labelIds.indexOf(t.id) > -1).toBeTruthy();
  24 |         }
  25 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/4-named-reflexive/new-test.js,Magic Number,"{'line': 32, 'column': 43, 'index': 849}","  30 |     let tag = schema.tags.new({ labelIds: null });
  31 |
> 32 |     expect(tag.labels.models).toHaveLength(0);
     |                                           ^ Magic Number
  33 |     expect(tag.labelIds).toBeEmpty();
  34 |     expect(tag.attrs).toEqual({ labelIds: null });
  35 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/4-named-reflexive/new-test.js,Magic Number,"{'line': 56, 'column': 43, 'index': 1593}","  54 |     let tag = schema.tags.new({ labels: null });
  55 |
> 56 |     expect(tag.labels.models).toHaveLength(0);
     |                                           ^ Magic Number
  57 |     expect(tag.labelIds).toBeEmpty();
  58 |     expect(tag.attrs).toEqual({ labelIds: null });
  59 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/4-named-reflexive/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 411}","  14 |       let [tag, labels] = helper[state]();
  15 |
> 16 |       if (labels && labels.length) {
     |      ^ Conditional Test Logic
  17 |         labels.forEach((t) => t.destroy());
  18 |         tag.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/4-named-reflexive/create-test.js,Magic Number,"{'line': 29, 'column': 40, 'index': 914}","  27 |     expect(tagA.labels.models[0].attrs).toEqual(tagB.attrs);
  28 |     expect(tagB.labels.models[0].attrs).toEqual(tagA.attrs);
> 29 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  30 |     expect(helper.db.tags[0]).toEqual({ id: ""1"", labelIds: [""2""] });
  31 |     expect(helper.db.tags[1]).toEqual({ id: ""2"", labelIds: [""1""] });
  32 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/4-named-reflexive/create-test.js,Magic Number,"{'line': 47, 'column': 40, 'index': 1539}","  45 |     expect(tagA.attrs.labelIds).toEqual([tagB.id]);
  46 |     expect(tagB.attrs.labelIds).toEqual([tagA.id]);
> 47 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  48 |   });
  49 |
  50 |   test(""it sets up associations correctly when passing in a collection"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/4-named-reflexive/create-test.js,Magic Number,"{'line': 63, 'column': 40, 'index': 2031}","  61 |     expect(tagB.attrs.labelIds).toEqual([tagA.id]);
  62 |     expect(tagA.attrs.labelIds).toEqual([tagB.id]);
> 63 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  64 |   });
  65 |
  66 |   test(""it throws an error if a model is passed in without a defined relationship"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/4-named-reflexive/association-set-ids-test.js,Conditional Test Logic,"{'line': 27, 'column': 8, 'index': 795}","  25 |       expect(savedTag.labels.models[0].attrs).toEqual(tag.attrs);
  26 |       originalTags.forEach((originalTag) => {
> 27 |         if (originalTag.isSaved()) {
     |        ^ Conditional Test Logic
  28 |           originalTag.reload();
  29 |           expect(originalTag.labels.includes(tag)).toBeFalsy();
  30 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/4-named-reflexive/accessor-test.js,Conditional Test Logic,"{'line': 22, 'column': 8, 'index': 584}","  20 |         expect(tag.labels.includes(t)).toBeTruthy();
  21 |
> 22 |         if (t.isSaved()) {
     |        ^ Conditional Test Logic
  23 |           expect(tag.labelIds.indexOf(t.id) > -1).toBeTruthy();
  24 |         }
  25 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/3-reflexive/new-test.js,Magic Number,"{'line': 32, 'column': 41, 'index': 831}","  30 |     let tag = schema.tags.new({ tagIds: null });
  31 |
> 32 |     expect(tag.tags.models).toHaveLength(0);
     |                                         ^ Magic Number
  33 |     expect(tag.tagIds).toBeEmpty();
  34 |     expect(tag.attrs).toEqual({ tagIds: null });
  35 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/3-reflexive/new-test.js,Magic Number,"{'line': 56, 'column': 41, 'index': 1555}","  54 |     let tag = schema.tags.new({ tags: null });
  55 |
> 56 |     expect(tag.tags.models).toHaveLength(0);
     |                                         ^ Magic Number
  57 |     expect(tag.tagIds).toBeEmpty();
  58 |     expect(tag.attrs).toEqual({ tagIds: null });
  59 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/3-reflexive/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 403}","  14 |       let [tag, tags] = helper[state]();
  15 |
> 16 |       if (tags && tags.length) {
     |      ^ Conditional Test Logic
  17 |         tags.forEach((t) => t.destroy());
  18 |         tag.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/3-reflexive/create-test.js,Magic Number,"{'line': 29, 'column': 40, 'index': 878}","  27 |     expect(tagA.tags.includes(tagB)).toBeTruthy();
  28 |     expect(tagB.tags.includes(tagA)).toBeTruthy();
> 29 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  30 |     expect(helper.db.tags[0]).toEqual({ id: ""1"", tagIds: [""2""] });
  31 |     expect(helper.db.tags[1]).toEqual({ id: ""2"", tagIds: [""1""] });
  32 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/3-reflexive/create-test.js,Magic Number,"{'line': 47, 'column': 40, 'index': 1489}","  45 |     expect(tagA.attrs.tagIds).toEqual([tagB.id]);
  46 |     expect(tagB.attrs.tagIds).toEqual([tagA.id]);
> 47 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  48 |   });
  49 |
  50 |   test(""it sets up associations correctly when passing in a collection"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/3-reflexive/create-test.js,Magic Number,"{'line': 63, 'column': 40, 'index': 1971}","  61 |     expect(tagB.attrs.tagIds).toEqual([tagA.id]);
  62 |     expect(tagA.attrs.tagIds).toEqual([tagB.id]);
> 63 |     expect(helper.db.tags).toHaveLength(2);
     |                                        ^ Magic Number
  64 |   });
  65 |
  66 |   test(""it throws an error if a model is passed in without a defined relationship"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/3-reflexive/association-set-ids-test.js,Conditional Test Logic,"{'line': 27, 'column': 8, 'index': 781}","  25 |       expect(savedTag.tags.models[0].attrs).toEqual(tag.attrs);
  26 |       originalTags.forEach((originalTag) => {
> 27 |         if (originalTag.isSaved()) {
     |        ^ Conditional Test Logic
  28 |           originalTag.reload();
  29 |           expect(originalTag.tags.includes(tag)).toBeFalsy();
  30 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/3-reflexive/accessor-test.js,Conditional Test Logic,"{'line': 22, 'column': 8, 'index': 572}","  20 |         expect(tag.tags.includes(t)).toBeTruthy();
  21 |
> 22 |         if (t.isSaved()) {
     |        ^ Conditional Test Logic
  23 |           expect(tag.tagIds.indexOf(t.id) > -1).toBeTruthy();
  24 |         }
  25 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/2-named/instantiating-test.js,Magic Number,"{'line': 32, 'column': 47, 'index': 868}","  30 |     let user = schema.users.new({ blogPostIds: null });
  31 |
> 32 |     expect(user.blogPosts.models).toHaveLength(0);
     |                                               ^ Magic Number
  33 |     expect(user.blogPostIds).toBeEmpty();
  34 |     expect(user.attrs).toEqual({ blogPostIds: null });
  35 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/2-named/instantiating-test.js,Magic Number,"{'line': 56, 'column': 47, 'index': 1652}","  54 |     let user = schema.users.new({ blogPosts: null });
  55 |
> 56 |     expect(user.blogPosts.models).toHaveLength(0);
     |                                               ^ Magic Number
  57 |     expect(user.blogPostIds).toBeEmpty();
  58 |     expect(user.attrs).toEqual({ blogPostIds: null });
  59 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/2-named/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 405}","  14 |       let [user, blogPosts] = helper[state]();
  15 |
> 16 |       if (blogPosts && blogPosts.length) {
     |      ^ Conditional Test Logic
  17 |         blogPosts.forEach((p) => p.destroy());
  18 |         user.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/2-named/create-test.js,Magic Number,"{'line': 23, 'column': 41, 'index': 727}","  21 |     expect(user.attrs.blogPostIds).toEqual([post.id]);
  22 |     expect(user.blogPosts.models[0].attrs).toEqual(post.attrs);
> 23 |     expect(helper.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  24 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
  25 |     expect(helper.db.users).toHaveLength(1);
  26 |     expect(helper.db.users[0]).toEqual({ id: ""1"", blogPostIds: [""1""] });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/2-named/create-test.js,Magic Number,"{'line': 25, 'column': 41, 'index': 825}","  23 |     expect(helper.db.posts).toHaveLength(1);
  24 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
> 25 |     expect(helper.db.users).toHaveLength(1);
     |                                         ^ Magic Number
  26 |     expect(helper.db.users[0]).toEqual({ id: ""1"", blogPostIds: [""1""] });
  27 |   });
  28 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/2-named/create-test.js,Magic Number,"{'line': 38, 'column': 41, 'index': 1330}","  36 |     expect(user.attrs.blogPostIds).toEqual([post.id]);
  37 |     expect(user.blogPosts.models[0].attrs).toEqual(post.attrs);
> 38 |     expect(helper.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  39 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
  40 |     expect(helper.db.users).toHaveLength(1);
  41 |     expect(helper.db.users[0]).toEqual({ id: ""1"", blogPostIds: [""1""] });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/2-named/create-test.js,Magic Number,"{'line': 40, 'column': 41, 'index': 1428}","  38 |     expect(helper.db.posts).toHaveLength(1);
  39 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
> 40 |     expect(helper.db.users).toHaveLength(1);
     |                                         ^ Magic Number
  41 |     expect(helper.db.users[0]).toEqual({ id: ""1"", blogPostIds: [""1""] });
  42 |   });
  43 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/2-named/create-test.js,Magic Number,"{'line': 53, 'column': 41, 'index': 1946}","  51 |     expect(user.attrs.blogPostIds).toEqual([post.id]);
  52 |     expect(user.blogPosts.models[0].attrs).toEqual(post.attrs);
> 53 |     expect(helper.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  54 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
  55 |     expect(helper.db.users).toHaveLength(1);
  56 |     expect(helper.db.users[0]).toEqual({ id: ""1"", blogPostIds: [""1""] });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/2-named/create-test.js,Magic Number,"{'line': 55, 'column': 41, 'index': 2044}","  53 |     expect(helper.db.posts).toHaveLength(1);
  54 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
> 55 |     expect(helper.db.users).toHaveLength(1);
     |                                         ^ Magic Number
  56 |     expect(helper.db.users[0]).toEqual({ id: ""1"", blogPostIds: [""1""] });
  57 |   });
  58 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/2-named/accessor-test.js,Conditional Test Logic,"{'line': 25, 'column': 8, 'index': 683}","  23 |         expect(user.blogPosts.models[i]).toEqual(posts[i]);
  24 |
> 25 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  26 |           expect(user.blogPostIds.indexOf(post.id) > -1).toBeTruthy();
  27 |         }
  28 |       });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/instantiating-test.js,Magic Number,"{'line': 32, 'column': 50, 'index': 975}","  30 |     let user = schema.users.new({ commentableIds: null });
  31 |
> 32 |     expect(user.commentables.models).toHaveLength(0);
     |                                                  ^ Magic Number
  33 |     expect(user.commentableIds).toBeEmpty();
  34 |     expect(user.attrs).toEqual({ commentableIds: null });
  35 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/instantiating-test.js,Magic Number,"{'line': 56, 'column': 50, 'index': 1841}","  54 |     let user = schema.users.new({ commentables: null });
  55 |
> 56 |     expect(user.commentables.models).toHaveLength(0);
     |                                                  ^ Magic Number
  57 |     expect(user.commentableIds).toBeEmpty();
  58 |     expect(user.attrs).toEqual({ commentableIds: null });
  59 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 420}","  14 |       let [user, posts] = helper[state]();
  15 |
> 16 |       if (posts && posts.length) {
     |      ^ Conditional Test Logic
  17 |         posts.forEach((p) => p.destroy());
  18 |         user.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/create-test.js,Magic Number,"{'line': 23, 'column': 41, 'index': 763}","  21 |     expect(user.attrs.commentableIds).toEqual([{ type: ""post"", id: post.id }]);
  22 |     expect(user.commentables.models[0].attrs).toEqual(post.attrs);
> 23 |     expect(helper.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  24 |     expect(helper.db.users).toHaveLength(1);
  25 |     expect(helper.db.posts[0]).toEqual({ id: ""1"", userIds: [""1""] });
  26 |     expect(helper.db.users[0]).toEqual({",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/create-test.js,Magic Number,"{'line': 24, 'column': 41, 'index': 808}","  22 |     expect(user.commentables.models[0].attrs).toEqual(post.attrs);
  23 |     expect(helper.db.posts).toHaveLength(1);
> 24 |     expect(helper.db.users).toHaveLength(1);
     |                                         ^ Magic Number
  25 |     expect(helper.db.posts[0]).toEqual({ id: ""1"", userIds: [""1""] });
  26 |     expect(helper.db.users[0]).toEqual({
  27 |       id: ""1"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/create-test.js,Magic Number,"{'line': 44, 'column': 41, 'index': 1525}","  42 |     expect(user.attrs.commentableIds).toEqual([{ type: ""post"", id: post.id }]);
  43 |     expect(post.attrs.userIds).toEqual([user.id]);
> 44 |     expect(helper.db.users).toHaveLength(1);
     |                                         ^ Magic Number
  45 |     expect(helper.db.posts).toHaveLength(1);
  46 |   });
  47 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/create-test.js,Magic Number,"{'line': 45, 'column': 41, 'index': 1570}","  43 |     expect(post.attrs.userIds).toEqual([user.id]);
  44 |     expect(helper.db.users).toHaveLength(1);
> 45 |     expect(helper.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  46 |   });
  47 |
  48 |   test(""it sets up associations correctly when passing in a collection"", () => {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/create-test.js,Magic Number,"{'line': 60, 'column': 41, 'index': 2120}","  58 |     expect(user.attrs.commentableIds).toEqual([{ type: ""post"", id: post.id }]);
  59 |     expect(post.attrs.userIds).toEqual([user.id]);
> 60 |     expect(helper.db.users).toHaveLength(1);
     |                                         ^ Magic Number
  61 |     expect(helper.db.posts).toHaveLength(1);
  62 |   });
  63 | });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/create-test.js,Magic Number,"{'line': 61, 'column': 41, 'index': 2165}","  59 |     expect(post.attrs.userIds).toEqual([user.id]);
  60 |     expect(helper.db.users).toHaveLength(1);
> 61 |     expect(helper.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  62 |   });
  63 | });
  64 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/association-set-ids-test.js,Conditional Test Logic,"{'line': 34, 'column': 8, 'index': 995}","  32 |       expect(savedPost.users.includes(user)).toBeTruthy();
  33 |       originalPosts.forEach((post) => {
> 34 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  35 |           post.reload();
  36 |           expect(post.users.includes(user)).toBeFalsy();
  37 |         }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/accessor-test.js,Conditional Test Logic,"{'line': 25, 'column': 8, 'index': 711}","  23 |         expect(user.commentables.includes(post)).toBeTruthy();
  24 |
> 25 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  26 |           expect(user.commentableIds[i]).toEqual({ type: ""post"", id: post.id });
  27 |         }
  28 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/1-basic/instantiating-test.js,Magic Number,"{'line': 32, 'column': 43, 'index': 844}","  30 |     let user = schema.users.new({ postIds: null });
  31 |
> 32 |     expect(user.posts.models).toHaveLength(0);
     |                                           ^ Magic Number
  33 |     expect(user.postIds).toBeEmpty();
  34 |     expect(user.attrs).toEqual({ postIds: null });
  35 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/1-basic/instantiating-test.js,Magic Number,"{'line': 56, 'column': 43, 'index': 1588}","  54 |     let user = schema.users.new({ posts: null });
  55 |
> 56 |     expect(user.posts.models).toHaveLength(0);
     |                                           ^ Magic Number
  57 |     expect(user.postIds).toBeEmpty();
  58 |     expect(user.attrs).toEqual({ postIds: null });
  59 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/1-basic/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 401}","  14 |       let [user, posts] = helper[state]();
  15 |
> 16 |       if (posts && posts.length) {
     |      ^ Conditional Test Logic
  17 |         posts.forEach((p) => p.destroy());
  18 |         user.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/1-basic/create-test.js,Magic Number,"{'line': 23, 'column': 41, 'index': 711}","  21 |     expect(user.attrs.postIds).toEqual([post.id]);
  22 |     expect(user.posts.models[0].attrs).toEqual(post.attrs);
> 23 |     expect(helper.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  24 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
  25 |     expect(helper.db.users).toHaveLength(1);
  26 |     expect(helper.db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/1-basic/create-test.js,Magic Number,"{'line': 25, 'column': 41, 'index': 809}","  23 |     expect(helper.db.posts).toHaveLength(1);
  24 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
> 25 |     expect(helper.db.users).toHaveLength(1);
     |                                         ^ Magic Number
  26 |     expect(helper.db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });
  27 |   });
  28 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/1-basic/create-test.js,Magic Number,"{'line': 38, 'column': 41, 'index': 1294}","  36 |     expect(user.attrs.postIds).toEqual([post.id]);
  37 |     expect(user.posts.models[0].attrs).toEqual(post.attrs);
> 38 |     expect(helper.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  39 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
  40 |     expect(helper.db.users).toHaveLength(1);
  41 |     expect(helper.db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/1-basic/create-test.js,Magic Number,"{'line': 40, 'column': 41, 'index': 1392}","  38 |     expect(helper.db.posts).toHaveLength(1);
  39 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
> 40 |     expect(helper.db.users).toHaveLength(1);
     |                                         ^ Magic Number
  41 |     expect(helper.db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });
  42 |   });
  43 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/1-basic/create-test.js,Magic Number,"{'line': 53, 'column': 41, 'index': 1890}","  51 |     expect(user.attrs.postIds).toEqual([post.id]);
  52 |     expect(user.posts.models[0].attrs).toEqual(post.attrs);
> 53 |     expect(helper.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  54 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
  55 |     expect(helper.db.users).toHaveLength(1);
  56 |     expect(helper.db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/1-basic/create-test.js,Magic Number,"{'line': 55, 'column': 41, 'index': 1988}","  53 |     expect(helper.db.posts).toHaveLength(1);
  54 |     expect(helper.db.posts[0]).toEqual({ id: ""1"" });
> 55 |     expect(helper.db.users).toHaveLength(1);
     |                                         ^ Magic Number
  56 |     expect(helper.db.users[0]).toEqual({ id: ""1"", postIds: [""1""] });
  57 |   });
  58 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/has-many/1-basic/accessor-test.js,Conditional Test Logic,"{'line': 25, 'column': 8, 'index': 671}","  23 |         expect(user.posts.models[i]).toEqual(posts[i]);
  24 |
> 25 |         if (post.isSaved()) {
     |        ^ Conditional Test Logic
  26 |           expect(user.postIds.indexOf(post.id) > -1).toBeTruthy();
  27 |         }
  28 |       });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/9-one-way-polymorphic/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 420}","  14 |       let [comment, post] = helper[state]();
  15 |
> 16 |       if (post) {
     |      ^ Conditional Test Logic
  17 |         post.destroy();
  18 |         comment.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/9-one-way-polymorphic/create-test.js,Magic Number,"{'line': 22, 'column': 48, 'index': 743}","  20 |     expect(comment.commentableId).toEqual({ id: post.id, type: ""post"" });
  21 |     expect(comment.commentable.attrs).toEqual(post.attrs);
> 22 |     expect(helper.schema.db.posts).toHaveLength(1);
     |                                                ^ Magic Number
  23 |     expect(helper.schema.db.posts[0]).toEqual({ id: ""1"" });
  24 |     expect(helper.schema.db.comments).toHaveLength(1);
  25 |     expect(helper.schema.db.comments[0]).toEqual({",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/9-one-way-polymorphic/create-test.js,Magic Number,"{'line': 24, 'column': 51, 'index': 858}","  22 |     expect(helper.schema.db.posts).toHaveLength(1);
  23 |     expect(helper.schema.db.posts[0]).toEqual({ id: ""1"" });
> 24 |     expect(helper.schema.db.comments).toHaveLength(1);
     |                                                   ^ Magic Number
  25 |     expect(helper.schema.db.comments[0]).toEqual({
  26 |       id: ""1"",
  27 |       commentableId: { id: ""1"", type: ""post"" },",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/9-one-way-polymorphic/create-test.js,Magic Number,"{'line': 39, 'column': 48, 'index': 1394}","  37 |     expect(comment.commentableId).toEqual({ id: post.id, type: ""post"" });
  38 |     expect(comment.commentable.attrs).toEqual(post.attrs);
> 39 |     expect(helper.schema.db.posts).toHaveLength(1);
     |                                                ^ Magic Number
  40 |     expect(helper.schema.db.posts[0]).toEqual({ id: ""1"" });
  41 |     expect(helper.schema.db.comments).toHaveLength(1);
  42 |     expect(helper.schema.db.comments[0]).toEqual({",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/9-one-way-polymorphic/create-test.js,Magic Number,"{'line': 41, 'column': 51, 'index': 1509}","  39 |     expect(helper.schema.db.posts).toHaveLength(1);
  40 |     expect(helper.schema.db.posts[0]).toEqual({ id: ""1"" });
> 41 |     expect(helper.schema.db.comments).toHaveLength(1);
     |                                                   ^ Magic Number
  42 |     expect(helper.schema.db.comments[0]).toEqual({
  43 |       id: ""1"",
  44 |       commentableId: { id: ""1"", type: ""post"" },",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/9-one-way-polymorphic/association-set-id-test.js,Conditional Test Logic,"{'line': 27, 'column': 51, 'index': 826}","  25 |   });
  26 |
> 27 |   [""savedChildSavedParent"", ""newChildSavedParent""].forEach((state) => {
     |                                                   ^ Conditional Test Logic
  28 |     test(`a ${state} can clear its association via a null parentId`, () => {
  29 |       let [comment] = helper[state]();
  30 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/8-one-to-one/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 411}","  14 |       let [user, profile] = helper[state]();
  15 |
> 16 |       if (profile) {
     |      ^ Conditional Test Logic
  17 |         profile.destroy();
  18 |         user.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/8-one-to-one/create-test.js,Magic Number,"{'line': 25, 'column': 41, 'index': 763}","  23 |     expect(user.profile.attrs).toEqual(profile.attrs);
  24 |     expect(profile.user.attrs).toEqual(user.attrs);
> 25 |     expect(schema.db.users).toHaveLength(1);
     |                                         ^ Magic Number
  26 |     expect(schema.db.profiles).toHaveLength(1);
  27 |     expect(schema.db.users[0]).toEqual({ id: ""1"", profileId: ""1"" });
  28 |     expect(schema.db.profiles[0]).toEqual({ id: ""1"", userId: ""1"" });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/8-one-to-one/create-test.js,Magic Number,"{'line': 26, 'column': 44, 'index': 811}","  24 |     expect(profile.user.attrs).toEqual(user.attrs);
  25 |     expect(schema.db.users).toHaveLength(1);
> 26 |     expect(schema.db.profiles).toHaveLength(1);
     |                                            ^ Magic Number
  27 |     expect(schema.db.users[0]).toEqual({ id: ""1"", profileId: ""1"" });
  28 |     expect(schema.db.profiles[0]).toEqual({ id: ""1"", userId: ""1"" });
  29 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/8-one-to-one/create-test.js,Magic Number,"{'line': 41, 'column': 41, 'index': 1383}","  39 |     expect(user.profile.attrs).toEqual(profile.attrs);
  40 |     expect(profile.user.attrs).toEqual(user.attrs);
> 41 |     expect(schema.db.users).toHaveLength(1);
     |                                         ^ Magic Number
  42 |     expect(schema.db.profiles).toHaveLength(1);
  43 |     expect(schema.db.users[0]).toEqual({ id: ""1"", profileId: ""1"" });
  44 |     expect(schema.db.profiles[0]).toEqual({ id: ""1"", userId: ""1"" });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/8-one-to-one/create-test.js,Magic Number,"{'line': 42, 'column': 44, 'index': 1431}","  40 |     expect(profile.user.attrs).toEqual(user.attrs);
  41 |     expect(schema.db.users).toHaveLength(1);
> 42 |     expect(schema.db.profiles).toHaveLength(1);
     |                                            ^ Magic Number
  43 |     expect(schema.db.users[0]).toEqual({ id: ""1"", profileId: ""1"" });
  44 |     expect(schema.db.profiles[0]).toEqual({ id: ""1"", userId: ""1"" });
  45 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/8-one-to-one/accessor-test.js,Conditional Test Logic,"{'line': 20, 'column': 6, 'index': 564}","  18 |
  19 |       // We use .attrs here because otherwise deepEqual goes on infinite recursive comparison
> 20 |       if (profile) {
     |      ^ Conditional Test Logic
  21 |         expect(user.profile.attrs).toEqual(profile.attrs);
  22 |         expect(user.profileId).toEqual(profile.id);
  23 |       } else {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/8-one-to-one/accessor-test.js,Conditional Test Logic,"{'line': 29, 'column': 6, 'index': 892}","  27 |
  28 |       // If there's a profile in this state, make sure the inverse association is correct
> 29 |       if (profile) {
     |      ^ Conditional Test Logic
  30 |         expect(profile.user.attrs).toEqual(user.attrs);
  31 |         expect(profile.userId).toEqual(user.id);
  32 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/7-named-one-way-reflexive/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 423}","  14 |       let [user, parent] = helper[state]();
  15 |
> 16 |       if (parent) {
     |      ^ Conditional Test Logic
  17 |         parent.destroy();
  18 |         user.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/7-named-one-way-reflexive/create-test.js,Magic Number,"{'line': 23, 'column': 41, 'index': 695}","  21 |     expect(child.parentId).toEqual(parent.id);
  22 |     expect(child.parent.attrs).toEqual(parent.attrs);
> 23 |     expect(schema.db.users).toHaveLength(2);
     |                                         ^ Magic Number
  24 |     expect(schema.db.users[0]).toEqual({ id: ""1"", parentId: null });
  25 |     expect(schema.db.users[1]).toEqual({ id: ""2"", parentId: ""1"" });
  26 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/7-named-one-way-reflexive/create-test.js,Magic Number,"{'line': 37, 'column': 41, 'index': 1208}","  35 |     expect(child.parentId).toEqual(parent.id);
  36 |     expect(child.parent.attrs).toEqual(parent.attrs);
> 37 |     expect(schema.db.users).toHaveLength(2);
     |                                         ^ Magic Number
  38 |     expect(schema.db.users[0]).toEqual({ id: ""1"", parentId: null });
  39 |     expect(schema.db.users[1]).toEqual({ id: ""2"", parentId: ""1"" });
  40 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/7-named-one-way-reflexive/association-set-id-test.js,Conditional Test Logic,"{'line': 27, 'column': 51, 'index': 771}","  25 |   });
  26 |
> 27 |   [""savedChildSavedParent"", ""newChildSavedParent""].forEach((state) => {
     |                                                   ^ Conditional Test Logic
  28 |     test(`a ${state} can clear its association via a null parentId`, () => {
  29 |       let [child] = helper[state]();
  30 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/7-named-one-way-reflexive/accessor-test.js,Conditional Test Logic,"{'line': 20, 'column': 6, 'index': 538}","  18 |
  19 |       // We use .attrs here to avoid infinite recursion
> 20 |       if (parent) {
     |      ^ Conditional Test Logic
  21 |         expect(user.parent.attrs).toEqual(parent.attrs);
  22 |         expect(user.parentId).toEqual(parent.id);
  23 |       } else {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/6-one-way-reflexive/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 421}","  14 |       let [user, targetUser] = helper[state]();
  15 |
> 16 |       if (targetUser) {
     |      ^ Conditional Test Logic
  17 |         targetUser.destroy();
  18 |         user.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/6-one-way-reflexive/create-test.js,Magic Number,"{'line': 23, 'column': 41, 'index': 683}","  21 |     expect(child.userId).toEqual(parent.id);
  22 |     expect(child.user.attrs).toEqual(parent.attrs);
> 23 |     expect(schema.db.users).toHaveLength(2);
     |                                         ^ Magic Number
  24 |     expect(schema.db.users[0]).toEqual({ id: ""1"", userId: null });
  25 |     expect(schema.db.users[1]).toEqual({ id: ""2"", userId: ""1"" });
  26 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/6-one-way-reflexive/create-test.js,Magic Number,"{'line': 37, 'column': 41, 'index': 1194}","  35 |     expect(child.userId).toEqual(parent.id);
  36 |     expect(child.user.attrs).toEqual(parent.attrs);
> 37 |     expect(schema.db.users).toHaveLength(2);
     |                                         ^ Magic Number
  38 |     expect(schema.db.users[0]).toEqual({ id: ""1"", userId: null });
  39 |     expect(schema.db.users[1]).toEqual({ id: ""2"", userId: ""1"" });
  40 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/6-one-way-reflexive/association-set-id-test.js,Conditional Test Logic,"{'line': 27, 'column': 51, 'index': 759}","  25 |   });
  26 |
> 27 |   [""savedChildSavedParent"", ""newChildSavedParent""].forEach((state) => {
     |                                                   ^ Conditional Test Logic
  28 |     test(`a ${state} can clear its association via a null parentId`, () => {
  29 |       let [child] = helper[state]();
  30 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/6-one-way-reflexive/accessor-test.js,Conditional Test Logic,"{'line': 20, 'column': 6, 'index': 532}","  18 |
  19 |       // We use .attrs here to avoid infinite recursion
> 20 |       if (parent) {
     |      ^ Conditional Test Logic
  21 |         expect(user.user.attrs).toEqual(parent.attrs);
  22 |         expect(user.userId).toEqual(parent.id);
  23 |       } else {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/5-named-reflexive-explicit-inverse/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 436}","  14 |       let [user, bestFriend] = helper[state]();
  15 |
> 16 |       if (bestFriend) {
     |      ^ Conditional Test Logic
  17 |         bestFriend.destroy();
  18 |         user.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/5-named-reflexive-explicit-inverse/create-test.js,Magic Number,"{'line': 25, 'column': 41, 'index': 735}","  23 |     expect(user.bestFriendId).toEqual(friend.id);
  24 |     expect(user.bestFriend.attrs).toEqual(friend.attrs);
> 25 |     expect(schema.db.users).toHaveLength(2);
     |                                         ^ Magic Number
  26 |     expect(schema.db.users[0]).toEqual({ id: ""1"", bestFriendId: ""2"" });
  27 |     expect(schema.db.users[1]).toEqual({ id: ""2"", bestFriendId: ""1"" });
  28 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/5-named-reflexive-explicit-inverse/create-test.js,Magic Number,"{'line': 39, 'column': 41, 'index': 1272}","  37 |     expect(user.bestFriendId).toEqual(friend.id);
  38 |     expect(user.bestFriend.attrs).toEqual(friend.attrs);
> 39 |     expect(schema.db.users).toHaveLength(2);
     |                                         ^ Magic Number
  40 |     expect(schema.db.users[0]).toEqual({ id: ""1"", bestFriendId: ""2"" });
  41 |     expect(schema.db.users[1]).toEqual({ id: ""2"", bestFriendId: ""1"" });
  42 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-id-test.js,Conditional Test Logic,"{'line': 27, 'column': 51, 'index': 768}","  25 |   });
  26 |
> 27 |   [""savedChildSavedParent"", ""newChildSavedParent""].forEach((state) => {
     |                                                   ^ Conditional Test Logic
  28 |     test(`a ${state} can clear its association via a null parentId`, () => {
  29 |       let [user] = helper[state]();
  30 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/5-named-reflexive-explicit-inverse/accessor-test.js,Conditional Test Logic,"{'line': 20, 'column': 6, 'index': 585}","  18 |
  19 |       // We use .attrs here because otherwise deepEqual goes on infinite recursive comparison
> 20 |       if (friend) {
     |      ^ Conditional Test Logic
  21 |         expect(user.bestFriend.attrs).toEqual(friend.attrs);
  22 |         expect(user.bestFriendId).toEqual(friend.id);
  23 |       } else {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/5-named-reflexive-explicit-inverse/accessor-test.js,Conditional Test Logic,"{'line': 29, 'column': 6, 'index': 921}","  27 |
  28 |       // If there's a friend in this state, make sure the inverse association is correct
> 29 |       if (friend) {
     |      ^ Conditional Test Logic
  30 |         expect(friend.bestFriend.attrs).toEqual(user.attrs);
  31 |         expect(friend.bestFriendId).toEqual(user.id);
  32 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/4-named-reflexive/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 419}","  14 |       let [user, bestFriend] = helper[state]();
  15 |
> 16 |       if (bestFriend) {
     |      ^ Conditional Test Logic
  17 |         bestFriend.destroy();
  18 |         user.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/4-named-reflexive/create-test.js,Magic Number,"{'line': 25, 'column': 41, 'index': 718}","  23 |     expect(user.bestFriendId).toEqual(friend.id);
  24 |     expect(user.bestFriend.attrs).toEqual(friend.attrs);
> 25 |     expect(schema.db.users).toHaveLength(2);
     |                                         ^ Magic Number
  26 |     expect(schema.db.users[0]).toEqual({ id: ""1"", bestFriendId: ""2"" });
  27 |     expect(schema.db.users[1]).toEqual({ id: ""2"", bestFriendId: ""1"" });
  28 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/4-named-reflexive/create-test.js,Magic Number,"{'line': 39, 'column': 41, 'index': 1255}","  37 |     expect(user.bestFriendId).toEqual(friend.id);
  38 |     expect(user.bestFriend.attrs).toEqual(friend.attrs);
> 39 |     expect(schema.db.users).toHaveLength(2);
     |                                         ^ Magic Number
  40 |     expect(schema.db.users[0]).toEqual({ id: ""1"", bestFriendId: ""2"" });
  41 |     expect(schema.db.users[1]).toEqual({ id: ""2"", bestFriendId: ""1"" });
  42 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/4-named-reflexive/association-set-id-test.js,Conditional Test Logic,"{'line': 27, 'column': 51, 'index': 751}","  25 |   });
  26 |
> 27 |   [""savedChildSavedParent"", ""newChildSavedParent""].forEach((state) => {
     |                                                   ^ Conditional Test Logic
  28 |     test(`a ${state} can clear its association via a null parentId`, () => {
  29 |       let [user] = helper[state]();
  30 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/4-named-reflexive/accessor-test.js,Conditional Test Logic,"{'line': 20, 'column': 6, 'index': 568}","  18 |
  19 |       // We use .attrs here because otherwise deepEqual goes on infinite recursive comparison
> 20 |       if (friend) {
     |      ^ Conditional Test Logic
  21 |         expect(user.bestFriend.attrs).toEqual(friend.attrs);
  22 |         expect(user.bestFriendId).toEqual(friend.id);
  23 |       } else {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/4-named-reflexive/accessor-test.js,Conditional Test Logic,"{'line': 29, 'column': 6, 'index': 904}","  27 |
  28 |       // If there's a friend in this state, make sure the inverse association is correct
> 29 |       if (friend) {
     |      ^ Conditional Test Logic
  30 |         expect(friend.bestFriend.attrs).toEqual(user.attrs);
  31 |         expect(friend.bestFriendId).toEqual(user.id);
  32 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/3-reflexive/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 413}","  14 |       let [user, targetUser] = helper[state]();
  15 |
> 16 |       if (targetUser) {
     |      ^ Conditional Test Logic
  17 |         targetUser.destroy();
  18 |         user.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/3-reflexive/create-test.js,Magic Number,"{'line': 25, 'column': 41, 'index': 694}","  23 |     expect(user.userId).toEqual(friend.id);
  24 |     expect(user.user.attrs).toEqual(friend.attrs);
> 25 |     expect(schema.db.users).toHaveLength(2);
     |                                         ^ Magic Number
  26 |     expect(schema.db.users[0]).toEqual({ id: ""1"", userId: ""2"" });
  27 |     expect(schema.db.users[1]).toEqual({ id: ""2"", userId: ""1"" });
  28 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/3-reflexive/create-test.js,Magic Number,"{'line': 39, 'column': 41, 'index': 1201}","  37 |     expect(user.userId).toEqual(friend.id);
  38 |     expect(user.user.attrs).toEqual(friend.attrs);
> 39 |     expect(schema.db.users).toHaveLength(2);
     |                                         ^ Magic Number
  40 |     expect(schema.db.users[0]).toEqual({ id: ""1"", userId: ""2"" });
  41 |     expect(schema.db.users[1]).toEqual({ id: ""2"", userId: ""1"" });
  42 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/3-reflexive/association-set-test.js,Conditional Test Logic,"{'line': 26, 'column': 6, 'index': 679}","  24 |
  25 |       user.save();
> 26 |       if (originalUser) {
     |      ^ Conditional Test Logic
  27 |         originalUser.reload();
  28 |         expect(originalUser.userId).toBeNil();
  29 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/3-reflexive/association-set-test.js,Conditional Test Logic,"{'line': 42, 'column': 6, 'index': 1101}","  40 |
  41 |       user.save();
> 42 |       if (originalUser) {
     |      ^ Conditional Test Logic
  43 |         originalUser.reload();
  44 |         expect(originalUser.userId).toBeNil();
  45 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/3-reflexive/association-set-test.js,Conditional Test Logic,"{'line': 57, 'column': 6, 'index': 1465}","  55 |
  56 |       user.save();
> 57 |       if (originalUser) {
     |      ^ Conditional Test Logic
  58 |         originalUser.reload();
  59 |         expect(originalUser.userId).toBeNil();
  60 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/3-reflexive/association-set-id-test.js,Conditional Test Logic,"{'line': 26, 'column': 6, 'index': 701}","  24 |
  25 |       user.save();
> 26 |       if (originalUser) {
     |      ^ Conditional Test Logic
  27 |         originalUser.reload();
  28 |         expect(originalUser.userId).toBeNil();
  29 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/3-reflexive/association-set-id-test.js,Conditional Test Logic,"{'line': 33, 'column': 51, 'index': 873}","  31 |   });
  32 |
> 33 |   [""savedChildSavedParent"", ""newChildSavedParent""].forEach((state) => {
     |                                                   ^ Conditional Test Logic
  34 |     test(`a ${state} can clear its association via a null parentId`, () => {
  35 |       let [user, originalUser] = helper[state]();
  36 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/3-reflexive/association-set-id-test.js,Conditional Test Logic,"{'line': 43, 'column': 6, 'index': 1147}","  41 |
  42 |       user.save();
> 43 |       if (originalUser) {
     |      ^ Conditional Test Logic
  44 |         originalUser.reload();
  45 |         expect(originalUser.userId).toBeNil();
  46 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/3-reflexive/association-new-test.js,Conditional Test Logic,"{'line': 32, 'column': 6, 'index': 801}","  30 |       expect(user.userId).toEqual(ganon.id);
  31 |
> 32 |       if (originalUser) {
     |      ^ Conditional Test Logic
  33 |         originalUser.reload();
  34 |         expect(originalUser.userId).toBeNil();
  35 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/3-reflexive/association-create-test.js,Conditional Test Logic,"{'line': 28, 'column': 6, 'index': 841}","  26 |       expect(helper.schema.users.find(user.id).userId).toEqual(ganon.id);
  27 |
> 28 |       if (originalUser) {
     |      ^ Conditional Test Logic
  29 |         originalUser.reload();
  30 |         expect(originalUser.userId).toBeNil();
  31 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/3-reflexive/accessor-test.js,Conditional Test Logic,"{'line': 20, 'column': 6, 'index': 562}","  18 |
  19 |       // We use .attrs here because otherwise deepEqual goes on infinite recursive comparison
> 20 |       if (friend) {
     |      ^ Conditional Test Logic
  21 |         expect(user.user.attrs).toEqual(friend.attrs);
  22 |         expect(user.userId).toEqual(friend.id);
  23 |       } else {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/3-reflexive/accessor-test.js,Conditional Test Logic,"{'line': 29, 'column': 6, 'index': 874}","  27 |
  28 |       // If there's a friend in this state, make sure the inverse association is correct
> 29 |       if (friend) {
     |      ^ Conditional Test Logic
  30 |         expect(friend.user.attrs).toEqual(user.attrs);
  31 |         expect(friend.userId).toEqual(user.id);
  32 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/2-named/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 403}","  14 |       let [post, user] = helper[state]();
  15 |
> 16 |       if (user) {
     |      ^ Conditional Test Logic
  17 |         user.destroy();
  18 |         post.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/2-named/create-test.js,Magic Number,"{'line': 22, 'column': 48, 'index': 666}","  20 |     expect(post.authorId).toEqual(author.id);
  21 |     expect(post.author.attrs).toEqual(author.attrs);
> 22 |     expect(helper.schema.db.users).toHaveLength(1);
     |                                                ^ Magic Number
  23 |     expect(helper.schema.db.users[0]).toEqual({ id: ""1"" });
  24 |     expect(helper.schema.db.posts).toHaveLength(1);
  25 |     expect(helper.schema.db.posts[0]).toEqual({ id: ""1"", authorId: ""1"" });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/2-named/create-test.js,Magic Number,"{'line': 24, 'column': 48, 'index': 778}","  22 |     expect(helper.schema.db.users).toHaveLength(1);
  23 |     expect(helper.schema.db.users[0]).toEqual({ id: ""1"" });
> 24 |     expect(helper.schema.db.posts).toHaveLength(1);
     |                                                ^ Magic Number
  25 |     expect(helper.schema.db.posts[0]).toEqual({ id: ""1"", authorId: ""1"" });
  26 |   });
  27 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/2-named/create-test.js,Magic Number,"{'line': 36, 'column': 48, 'index': 1218}","  34 |     expect(post.authorId).toEqual(author.id);
  35 |     expect(post.author.attrs).toEqual(author.attrs);
> 36 |     expect(helper.schema.db.users).toHaveLength(1);
     |                                                ^ Magic Number
  37 |     expect(helper.schema.db.users[0]).toEqual({ id: ""1"" });
  38 |     expect(helper.schema.db.posts).toHaveLength(1);
  39 |     expect(helper.schema.db.posts[0]).toEqual({ id: ""1"", authorId: ""1"" });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/2-named/create-test.js,Magic Number,"{'line': 38, 'column': 48, 'index': 1330}","  36 |     expect(helper.schema.db.users).toHaveLength(1);
  37 |     expect(helper.schema.db.users[0]).toEqual({ id: ""1"" });
> 38 |     expect(helper.schema.db.posts).toHaveLength(1);
     |                                                ^ Magic Number
  39 |     expect(helper.schema.db.posts[0]).toEqual({ id: ""1"", authorId: ""1"" });
  40 |   });
  41 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/2-named/association-set-id-test.js,Conditional Test Logic,"{'line': 27, 'column': 51, 'index': 737}","  25 |   });
  26 |
> 27 |   [""savedChildSavedParent"", ""newChildSavedParent""].forEach((state) => {
     |                                                   ^ Conditional Test Logic
  28 |     test(`a ${state} can clear its association via a null parentId`, () => {
  29 |       let [post] = helper[state]();
  30 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/11-named-one-way-reflexive-self-referential/association-set-id-test.js,Conditional Test Logic,"{'line': 16, 'column': 50, 'index': 403}","  14 |   */
  15 |
> 16 |   [""savedChildNoParent"", ""savedChildSavedParent""].forEach((state) => {
     |                                                  ^ Conditional Test Logic
  17 |     test(`a ${state} can update its association to itself via parentId`, () => {
  18 |       let [user] = helper[state]();
  19 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/11-named-one-way-reflexive-self-referential/association-set-id-test.js,Conditional Test Logic,"{'line': 32, 'column': 49, 'index': 897}","  30 |   });
  31 |
> 32 |   [""savedChildSavedParent"", ""newChildNewParent""].forEach((state) => {
     |                                                 ^ Conditional Test Logic
  33 |     test(`a ${state} can clear its association via a null parentId`, () => {
  34 |       let [user] = helper[state]();
  35 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/11-named-one-way-reflexive-self-referential/accessor-test.js,Conditional Test Logic,"{'line': 20, 'column': 6, 'index': 601}","  18 |
  19 |       // We use .attrs here because otherwise deepEqual goes on infinite recursive comparison
> 20 |       if (representative) {
     |      ^ Conditional Test Logic
  21 |         expect(user.representative.attrs).toEqual(representative.attrs);
  22 |         expect(user.representativeId).toEqual(representative.id);
  23 |       } else {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/10-one-to-one-polymorphic/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 423}","  14 |       let [comment, post] = helper[state]();
  15 |
> 16 |       if (post) {
     |      ^ Conditional Test Logic
  17 |         post.destroy();
  18 |         comment.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/10-one-to-one-polymorphic/create-test.js,Magic Number,"{'line': 25, 'column': 44, 'index': 831}","  23 |     expect(comment.commentable.attrs).toEqual(post.attrs);
  24 |     expect(post.comment.attrs).toEqual(comment.attrs);
> 25 |     expect(schema.db.comments).toHaveLength(1);
     |                                            ^ Magic Number
  26 |     expect(schema.db.posts).toHaveLength(1);
  27 |     expect(schema.db.comments[0]).toEqual({
  28 |       id: ""1"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/10-one-to-one-polymorphic/create-test.js,Magic Number,"{'line': 26, 'column': 41, 'index': 876}","  24 |     expect(post.comment.attrs).toEqual(comment.attrs);
  25 |     expect(schema.db.comments).toHaveLength(1);
> 26 |     expect(schema.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  27 |     expect(schema.db.comments[0]).toEqual({
  28 |       id: ""1"",
  29 |       commentableId: { type: ""post"", id: ""1"" },",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/10-one-to-one-polymorphic/create-test.js,Magic Number,"{'line': 44, 'column': 44, 'index': 1540}","  42 |     expect(comment.commentable.attrs).toEqual(post.attrs);
  43 |     expect(post.comment.attrs).toEqual(comment.attrs);
> 44 |     expect(schema.db.comments).toHaveLength(1);
     |                                            ^ Magic Number
  45 |     expect(schema.db.posts).toHaveLength(1);
  46 |     expect(schema.db.comments[0]).toEqual({
  47 |       id: ""1"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/10-one-to-one-polymorphic/create-test.js,Magic Number,"{'line': 45, 'column': 41, 'index': 1585}","  43 |     expect(post.comment.attrs).toEqual(comment.attrs);
  44 |     expect(schema.db.comments).toHaveLength(1);
> 45 |     expect(schema.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  46 |     expect(schema.db.comments[0]).toEqual({
  47 |       id: ""1"",
  48 |       commentableId: { type: ""post"", id: ""1"" },",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/10-one-to-one-polymorphic/association-set-id-test.js,Conditional Test Logic,"{'line': 33, 'column': 51, 'index': 961}","  31 |   });
  32 |
> 33 |   [""savedChildSavedParent"", ""newChildSavedParent""].forEach((state) => {
     |                                                   ^ Conditional Test Logic
  34 |     test(`a ${state} can clear its association via a null parentId`, () => {
  35 |       let [comment] = helper[state]();
  36 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/10-one-to-one-polymorphic/accessor-test.js,Conditional Test Logic,"{'line': 20, 'column': 6, 'index': 576}","  18 |
  19 |       // We use .attrs here because otherwise deepEqual goes on infinite recursive comparison
> 20 |       if (post) {
     |      ^ Conditional Test Logic
  21 |         expect(comment.commentable.attrs).toEqual(post.attrs);
  22 |         expect(comment.commentableId).toEqual({ type: ""post"", id: post.id });
  23 |       } else {",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/10-one-to-one-polymorphic/accessor-test.js,Conditional Test Logic,"{'line': 29, 'column': 6, 'index': 942}","  27 |
  28 |       // If there's a post in this state, make sure the inverse association is correct
> 29 |       if (post) {
     |      ^ Conditional Test Logic
  30 |         expect(post.comment.attrs).toEqual(comment.attrs);
  31 |         expect(post.commentId).toEqual(comment.id);
  32 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/1-basic/delete-test.js,Conditional Test Logic,"{'line': 16, 'column': 6, 'index': 405}","  14 |       let [post, author] = helper[state]();
  15 |
> 16 |       if (author) {
     |      ^ Conditional Test Logic
  17 |         author.destroy();
  18 |         post.reload();
  19 |       }",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/1-basic/create-test.js,Magic Number,"{'line': 22, 'column': 50, 'index': 670}","  20 |     expect(post.authorId).toEqual(author.id);
  21 |     expect(post.author.attrs).toEqual(author.attrs);
> 22 |     expect(helper.schema.db.authors).toHaveLength(1);
     |                                                  ^ Magic Number
  23 |     expect(helper.schema.db.authors[0]).toEqual({ id: ""1"" });
  24 |     expect(helper.schema.db.posts).toHaveLength(1);
  25 |     expect(helper.schema.db.posts[0]).toEqual({ id: ""1"", authorId: ""1"" });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/1-basic/create-test.js,Magic Number,"{'line': 24, 'column': 48, 'index': 784}","  22 |     expect(helper.schema.db.authors).toHaveLength(1);
  23 |     expect(helper.schema.db.authors[0]).toEqual({ id: ""1"" });
> 24 |     expect(helper.schema.db.posts).toHaveLength(1);
     |                                                ^ Magic Number
  25 |     expect(helper.schema.db.posts[0]).toEqual({ id: ""1"", authorId: ""1"" });
  26 |   });
  27 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/1-basic/create-test.js,Magic Number,"{'line': 36, 'column': 50, 'index': 1228}","  34 |     expect(post.authorId).toEqual(author.id);
  35 |     expect(post.author.attrs).toEqual(author.attrs);
> 36 |     expect(helper.schema.db.authors).toHaveLength(1);
     |                                                  ^ Magic Number
  37 |     expect(helper.schema.db.authors[0]).toEqual({ id: ""1"" });
  38 |     expect(helper.schema.db.posts).toHaveLength(1);
  39 |     expect(helper.schema.db.posts[0]).toEqual({ id: ""1"", authorId: ""1"" });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/1-basic/create-test.js,Magic Number,"{'line': 38, 'column': 48, 'index': 1342}","  36 |     expect(helper.schema.db.authors).toHaveLength(1);
  37 |     expect(helper.schema.db.authors[0]).toEqual({ id: ""1"" });
> 38 |     expect(helper.schema.db.posts).toHaveLength(1);
     |                                                ^ Magic Number
  39 |     expect(helper.schema.db.posts[0]).toEqual({ id: ""1"", authorId: ""1"" });
  40 |   });
  41 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/orm/belongs-to/1-basic/association-set-id-test.js,Conditional Test Logic,"{'line': 27, 'column': 51, 'index': 749}","  25 |   });
  26 |
> 27 |   [""savedChildSavedParent"", ""newChildSavedParent""].forEach((state) => {
     |                                                   ^ Conditional Test Logic
  28 |     test(`a ${state} can clear its association via a null parentId`, () => {
  29 |       let [post] = helper[state]();
  30 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/factories/helpers-test.js,Magic Number,"{'line': 47, 'column': 36, 'index': 923}","  45 |     let { db } = server;
  46 |
> 47 |     expect(db.authors).toHaveLength(1);
     |                                    ^ Magic Number
  48 |     expect(db.authors[0]).toEqual({
  49 |       id: ""1"",
  50 |       name: ""Sam"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/factories/helpers-test.js,Magic Number,"{'line': 96, 'column': 34, 'index': 2056}","  94 |     let { db } = server;
  95 |
> 96 |     expect(db.posts).toHaveLength(1);
     |                                  ^ Magic Number
  97 |     expect(db.posts[0]).toEqual({
  98 |       id: ""1"",
  99 |       title: ""Lorem ipsum"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/factories/helpers-test.js,Magic Number,"{'line': 104, 'column': 36, 'index': 2222}","  102 |     });
  103 |
> 104 |     expect(db.authors).toHaveLength(1);
      |                                    ^ Magic Number
  105 |     expect(db.authors[0]).toEqual({
  106 |       id: ""1"",
  107 |       name: ""Sam"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/factories/helpers-test.js,Magic Number,"{'line': 111, 'column': 39, 'index': 2366}","  109 |     });
  110 |
> 111 |     expect(db.categories).toHaveLength(1);
      |                                       ^ Magic Number
  112 |     expect(db.categories[0]).toEqual({
  113 |       id: ""1"",
  114 |       name: ""awesome software"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/factories/create-and-create-list-test.js,Magic Number,"{'line': 165, 'column': 31, 'index': 4599}","  163 |
  164 |     expect(posts[0] instanceof Post).toBeTruthy();
> 165 |     expect(posts).toHaveLength(2);
      |                               ^ Magic Number
  166 |     expect(posts[0].id).toBe(""1"");
  167 |   });
  168 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/factories/create-and-create-list-test.js,Magic Number,"{'line': 178, 'column': 45, 'index': 4922}","  176 |     author.reload();
  177 |
> 178 |     expect(author.posts.models).toHaveLength(1);
      |                                             ^ Magic Number
  179 |     expect(post.author.attrs).toEqual(author.attrs);
  180 |     expect(server.db.posts[0].authorId).toEqual(author.id);
  181 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/factories/create-and-create-list-test.js,Magic Number,"{'line': 191, 'column': 45, 'index': 5292}","  189 |     });
  190 |
> 191 |     expect(author.posts.models).toHaveLength(1);
      |                                             ^ Magic Number
  192 |     expect(post.author.attrs).toEqual(author.attrs);
  193 |     expect(server.db.posts[0].authorId).toEqual(author.id);
  194 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/factories/create-and-create-list-test.js,Redundant Assertion,"{'column': 4, 'line': 10}","   8 |   // eslint-disable-next-line no-console
   9 |   console.warn = () => {
> 10 |     expect(true).toBeFalsy();
     |    ^ Redundant Assertion
  11 |   };
  12 | }
  13 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/factories/after-create-test.js,Magic Number,"{'line': 46, 'column': 41, 'index': 1104}","  44 |
  45 |     expect(author.name).toBe(""Sam"");
> 46 |     expect(server.db.posts).toHaveLength(1);
     |                                         ^ Magic Number
  47 |     expect(server.db.posts[0]).toEqual({
  48 |       id: ""1"",
  49 |       title: ""Lorem ipsum"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/shared/factories/after-create-test.js,Magic Number,"{'line': 52, 'column': 44, 'index': 1265}","  50 |       authorId: ""1"",
  51 |     });
> 52 |     expect(server.db.comments).toHaveLength(1);
     |                                            ^ Magic Number
  53 |     expect(server.db.comments[0]).toEqual({
  54 |       id: ""1"",
  55 |       text: ""Yo soy el nino"",",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/browser-only/passthrough-test.js,Conditional Test Logic,"{'line': 75, 'column': 4, 'index': 1930}","  73 |     });
  74 |
> 75 |     for (let method of verbs) {
     |    ^ Conditional Test Logic
  76 |       await expect(fetch(""/addresses"", { method })).rejects.toThrow(
  77 |         ""Network request failed""
  78 |       );",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/browser-only/passthrough-test.js,Duplicate Assert,"{'line': 178, 'column': 10, 'index': 4844}","  176 |       ""Network request failed""
  177 |     );
> 178 |     await expect(fetch(""/movies"")).rejects.toThrow(
      |          ^ Duplicate Assert
  179 |       `Mirage: Your app tried to GET '/movies'`
  180 |     );
  181 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/browser-only/passthrough-test.js,Duplicate Assert,"{'line': 178, 'column': 10, 'index': 4844}","  176 |       ""Network request failed""
  177 |     );
> 178 |     await expect(fetch(""/movies"")).rejects.toThrow(
      |          ^ Duplicate Assert
  179 |       `Mirage: Your app tried to GET '/movies'`
  180 |     );
  181 |",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/browser-only/passthrough-test.js,Duplicate Assert,"{'line': 185, 'column': 10, 'index': 5055}","  183 |       ""Network request failed""
  184 |     );
> 185 |     await expect(fetch(""/movies"")).rejects.toThrow(
      |          ^ Duplicate Assert
  186 |       `Mirage: Your app tried to GET '/movies'`
  187 |     );
  188 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/browser-only/passthrough-test.js,Duplicate Assert,"{'line': 185, 'column': 10, 'index': 5055}","  183 |       ""Network request failed""
  184 |     );
> 185 |     await expect(fetch(""/movies"")).rejects.toThrow(
      |          ^ Duplicate Assert
  186 |       `Mirage: Your app tried to GET '/movies'`
  187 |     );
  188 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/browser-only/passthrough-test.js,Magic Number,"{'line': 39, 'column': 22, 'index': 918}","  37 |     let res = await fetch(""/contacts"");
  38 |     let data = await res.json();
> 39 |     expect(data).toBe(123);
     |                      ^ Magic Number
  40 |
  41 |     await expect(fetch(""/addresses"")).rejects.toThrow(`Network request failed`);
  42 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/browser-only/passthrough-test.js,Magic Number,"{'line': 56, 'column': 22, 'index': 1378}","  54 |     let res = await fetch(""/contacts"");
  55 |     let data = await res.json();
> 56 |     expect(data).toBe(123);
     |                      ^ Magic Number
  57 |
  58 |     await expect(fetch(""/addresses"")).rejects.toThrow(
  59 |       `Mirage: Your app tried to GET '/addresses', but there was no route defined to handle this request`",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/browser-only/passthrough-test.js,Magic Number,"{'line': 122, 'column': 22, 'index': 3310}","  120 |     let res = await fetch(""/contacts"");
  121 |     let data = await res.json();
> 122 |     expect(data).toBe(123);
      |                      ^ Magic Number
  123 |
  124 |     await expect(fetch(""/addresses"")).rejects.toThrow(""Network request failed"");
  125 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/browser-only/passthrough-test.js,Magic Number,"{'line': 139, 'column': 22, 'index': 3771}","  137 |     let res = await fetch(""/contacts"");
  138 |     let data = await res.json();
> 139 |     expect(data).toBe(123);
      |                      ^ Magic Number
  140 |
  141 |     await expect(fetch(""/"")).rejects.toThrow(""Network request failed"");
  142 |   });",,
/home/gabriel/Desktop/research/projects/miragejs/__tests__/external/browser-only/fetch-sanity-check-test.js,Magic Number,"{'line': 114, 'column': 28, 'index': 2398}","  112 |     });
  113 |
> 114 |     expect(res.status).toBe(404);
      |                            ^ Magic Number
  115 |   });
  116 |
  117 |   test(""mirage responds to options"", async () => {",,
__tests__/internal/unit/server-test.js,IdenticalTestDescription,"[{""startLine"":54,""endLine"":62}]",,62.0,8.0
__tests__/internal/unit/server-test.js,IdenticalTestDescription,"[{""startLine"":64,""endLine"":75}]",,62.0,8.0
__tests__/internal/unit/factory-test.js,AnonymousTest,"[{""startLine"":5,""endLine"":7}]",,17.0,1.0
__tests__/internal/unit/db-test.js,IdenticalTestDescription,"[{""startLine"":324,""endLine"":332}]",,57.0,12.0
__tests__/internal/move-after-handle-request/resource-shorthand-test.js,VerboseStatement,"[{""startLine"":157,""endLine"":207}]",,13.0,1.0
__tests__/internal/move-after-handle-request/full-request-test.js,AnonymousTest,"[{""startLine"":74,""endLine"":87}]",,4.0,1.0
__tests__/external/shared/fixtures-and-factories-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":19}]",,0.0,1.0
__tests__/external/shared/fixtures-and-factories-test.js,NonFunctionalStatement,"[{""startLine"":15,""endLine"":15}]",,0.0,1.0
__tests__/external/browser-only/passthrough-test.js,GeneralFixture,"[{""startLine"":18,""endLine"":18}]",,11.0,1.0
__tests__/external/browser-only/passthrough-test.js,NonFunctionalStatement,"[{""startLine"":19,""endLine"":19}]",,11.0,1.0
__tests__/internal/unit/serializers/rest-serializer-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":9}]",,4.0,1.0
__tests__/internal/unit/serializers/active-model-serializer-test.js,AnonymousTest,"[{""startLine"":27,""endLine"":45}]",,9.0,1.0
__tests__/internal/unit/serializers/active-model-serializer-test.js,GeneralFixture,"[{""startLine"":14,""endLine"":21}]",,9.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/put-shorthand-test.js,GeneralFixture,"[{""startLine"":8,""endLine"":13}]",,4.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/put-shorthand-test.js,SubOptimalAssert,"[{""startLine"":56,""endLine"":56}]",,4.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/put-shorthand-test.js,SubOptimalAssert,"[{""startLine"":73,""endLine"":73}]",,4.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/put-shorthand-test.js,SubOptimalAssert,"[{""startLine"":94,""endLine"":94}]",,4.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/post-shorthand-test.js,GeneralFixture,"[{""startLine"":8,""endLine"":13}]",,4.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/post-shorthand-test.js,SubOptimalAssert,"[{""startLine"":42,""endLine"":42}]",,4.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/post-shorthand-test.js,SubOptimalAssert,"[{""startLine"":58,""endLine"":58}]",,4.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/post-shorthand-test.js,SubOptimalAssert,"[{""startLine"":75,""endLine"":75}]",,4.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,GeneralFixture,"[{""startLine"":8,""endLine"":14}]",,8.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,GeneralFixture,"[{""startLine"":18,""endLine"":22}]",,8.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,GeneralFixture,"[{""startLine"":23,""endLine"":26}]",,8.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,SubOptimalAssert,"[{""startLine"":51,""endLine"":51}]",,8.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,SubOptimalAssert,"[{""startLine"":66,""endLine"":66}]",,8.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,SubOptimalAssert,"[{""startLine"":86,""endLine"":86}]",,8.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,SubOptimalAssert,"[{""startLine"":101,""endLine"":101}]",,8.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,SubOptimalAssert,"[{""startLine"":111,""endLine"":111}]",,8.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,SubOptimalAssert,"[{""startLine"":121,""endLine"":121}]",,8.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,SubOptimalAssert,"[{""startLine"":141,""endLine"":141}]",,8.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/head-shorthand-test.js,SubOptimalAssert,"[{""startLine"":151,""endLine"":151}]",,8.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,GeneralFixture,"[{""startLine"":17,""endLine"":33}]",,16.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,GeneralFixture,"[{""startLine"":42,""endLine"":45}]",,16.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,GeneralFixture,"[{""startLine"":50,""endLine"":50}]",,16.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,SubOptimalAssert,"[{""startLine"":78,""endLine"":78}]",,16.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,SubOptimalAssert,"[{""startLine"":94,""endLine"":94}]",,16.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,SubOptimalAssert,"[{""startLine"":109,""endLine"":109}]",,16.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,SubOptimalAssert,"[{""startLine"":125,""endLine"":125}]",,16.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,SubOptimalAssert,"[{""startLine"":140,""endLine"":140}]",,16.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,SubOptimalAssert,"[{""startLine"":198,""endLine"":198}]",,16.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,SubOptimalAssert,"[{""startLine"":208,""endLine"":208}]",,16.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,SubOptimalAssert,"[{""startLine"":219,""endLine"":219}]",,16.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,SubOptimalAssert,"[{""startLine"":281,""endLine"":281}]",,16.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,SubOptimalAssert,"[{""startLine"":285,""endLine"":285}]",,16.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/get-shorthand-test.js,SubOptimalAssert,"[{""startLine"":317,""endLine"":317}]",,16.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/delete-shorthand-test.js,GeneralFixture,"[{""startLine"":9,""endLine"":17}]",,5.0,1.0
__tests__/internal/move-after-handle-request/regressions/many-to-many-bug-test.js,AnonymousTest,"[{""startLine"":30,""endLine"":74}]",,1.0,1.0
__tests__/internal/move-after-handle-request/regressions/many-to-many-bug-test.js,VerboseStatement,"[{""startLine"":30,""endLine"":74}]",,1.0,1.0
__tests__/internal/move-after-handle-request/regressions/1322-relationship-path-normalization-test.js,AnonymousTest,"[{""startLine"":39,""endLine"":82}]",,1.0,1.0
__tests__/internal/move-after-handle-request/regressions/1318-linkage-data-bug-test.js,AnonymousTest,"[{""startLine"":34,""endLine"":76}]",,1.0,1.0
__tests__/internal/integration/performance/simple-factory-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":19}]",,0.0,1.0
__tests__/external/shared/orm/where-test.js,SubOptimalAssert,"[{""startLine"":32,""endLine"":32}]",,3.0,1.0
__tests__/external/shared/orm/where-test.js,SubOptimalAssert,"[{""startLine"":34,""endLine"":34}]",,3.0,1.0
__tests__/external/shared/orm/where-test.js,SubOptimalAssert,"[{""startLine"":47,""endLine"":47}]",,3.0,1.0
__tests__/external/shared/orm/where-test.js,SubOptimalAssert,"[{""startLine"":49,""endLine"":49}]",,3.0,1.0
__tests__/external/shared/orm/where-test.js,SubOptimalAssert,"[{""startLine"":60,""endLine"":60}]",,3.0,1.0
__tests__/external/shared/orm/none-test.js,SubOptimalAssert,"[{""startLine"":30,""endLine"":30}]",,1.0,1.0
__tests__/external/shared/orm/model-associations-test.js,GeneralFixture,"[{""startLine"":8,""endLine"":18}]",,1.0,1.0
__tests__/external/shared/orm/first-test.js,SubOptimalAssert,"[{""startLine"":31,""endLine"":31}]",,1.0,1.0
__tests__/external/shared/orm/find-test.js,SubOptimalAssert,"[{""startLine"":31,""endLine"":31}]",,4.0,1.0
__tests__/external/shared/orm/find-test.js,SubOptimalAssert,"[{""startLine"":44,""endLine"":44}]",,4.0,1.0
__tests__/external/shared/orm/find-test.js,SubOptimalAssert,"[{""startLine"":45,""endLine"":45}]",,4.0,1.0
__tests__/external/shared/orm/find-or-create-by-test.js,SubOptimalAssert,"[{""startLine"":32,""endLine"":32}]",,2.0,1.0
__tests__/external/shared/orm/find-or-create-by-test.js,SubOptimalAssert,"[{""startLine"":45,""endLine"":45}]",,2.0,1.0
__tests__/external/shared/orm/create-test.js,SubOptimalAssert,"[{""startLine"":36,""endLine"":36}]",,4.0,1.0
__tests__/external/shared/orm/create-test.js,SubOptimalAssert,"[{""startLine"":50,""endLine"":50}]",,4.0,1.0
__tests__/external/shared/orm/create-test.js,SubOptimalAssert,"[{""startLine"":51,""endLine"":51}]",,4.0,1.0
__tests__/external/shared/orm/collection-test.js,SubOptimalAssert,"[{""startLine"":52,""endLine"":52}]",,6.0,1.0
__tests__/external/shared/orm/collection-test.js,SubOptimalAssert,"[{""startLine"":69,""endLine"":69}]",,6.0,1.0
__tests__/external/shared/orm/collection-test.js,SubOptimalAssert,"[{""startLine"":88,""endLine"":88}]",,6.0,1.0
__tests__/external/shared/orm/associations-test.js,GeneralFixture,"[{""startLine"":9,""endLine"":19}]",,4.0,1.0
__tests__/external/shared/orm/all-test.js,SubOptimalAssert,"[{""startLine"":31,""endLine"":31}]",,2.0,1.0
__tests__/external/shared/orm/all-test.js,SubOptimalAssert,"[{""startLine"":32,""endLine"":32}]",,2.0,1.0
__tests__/external/shared/orm/all-test.js,SubOptimalAssert,"[{""startLine"":40,""endLine"":40}]",,2.0,1.0
__tests__/external/shared/factories/create-and-create-list-test.js,GeneralFixture,"[{""startLine"":27,""endLine"":29}]",,14.0,1.0
__tests__/external/shared/factories/create-and-create-list-test.js,SubOptimalAssert,"[{""startLine"":84,""endLine"":84}]",,14.0,1.0
__tests__/external/shared/factories/create-and-create-list-test.js,SubOptimalAssert,"[{""startLine"":93,""endLine"":93}]",,14.0,1.0
__tests__/external/shared/factories/create-and-create-list-test.js,SubOptimalAssert,"[{""startLine"":122,""endLine"":122}]",,14.0,1.0
__tests__/external/shared/factories/create-and-create-list-test.js,SubOptimalAssert,"[{""startLine"":131,""endLine"":131}]",,14.0,1.0
__tests__/external/shared/factories/create-and-create-list-test.js,SubOptimalAssert,"[{""startLine"":139,""endLine"":139}]",,14.0,1.0
__tests__/external/shared/factories/create-and-create-list-test.js,SubOptimalAssert,"[{""startLine"":147,""endLine"":147}]",,14.0,1.0
__tests__/external/shared/factories/create-and-create-list-test.js,SubOptimalAssert,"[{""startLine"":155,""endLine"":155}]",,14.0,1.0
__tests__/external/shared/factories/create-and-create-list-test.js,SubOptimalAssert,"[{""startLine"":164,""endLine"":164}]",,14.0,1.0
__tests__/internal/unit/serializers/json-api-serializer/create-includes-graph-snapshot-models-test.js,GeneralFixture,"[{""startLine"":21,""endLine"":25}]",,6.0,1.0
__tests__/internal/unit/serializers/json-api-serializer/create-includes-graph-snapshot-models-test.js,GeneralFixture,"[{""startLine"":26,""endLine"":26}]",,6.0,1.0
__tests__/internal/unit/serializers/json-api-serializer/create-includes-graph-snapshot-mixed-test.js,GeneralFixture,"[{""startLine"":21,""endLine"":25}]",,1.0,1.0
__tests__/internal/unit/serializers/json-api-serializer/create-includes-graph-snapshot-mixed-test.js,GeneralFixture,"[{""startLine"":26,""endLine"":26}]",,1.0,1.0
__tests__/internal/unit/serializers/json-api-serializer/create-includes-graph-snapshot-collections-test.js,GeneralFixture,"[{""startLine"":20,""endLine"":24}]",,2.0,1.0
__tests__/internal/unit/serializers/json-api-serializer/create-includes-graph-snapshot-collections-test.js,GeneralFixture,"[{""startLine"":25,""endLine"":25}]",,2.0,1.0
__tests__/internal/unit/serializers/json-api-serializer/create-includes-graph-snapshot-collections-test.js,VerboseStatement,"[{""startLine"":48,""endLine"":132}]",,2.0,1.0
__tests__/internal/unit/route-handlers/shorthands/base-test.js,VerboseStatement,"[{""startLine"":31,""endLine"":59}]",,7.0,1.0
__tests__/internal/move-after-handle-request/route-handlers/function-handler/normalize-request-attrs-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":15}]",,0.0,1.0
__tests__/internal/integration/schema/schema-verification/has-many-test.js,SubOptimalAssert,"[{""startLine"":30,""endLine"":30}]",,3.0,1.0
__tests__/internal/integration/schema/schema-verification/has-many-test.js,SubOptimalAssert,"[{""startLine"":56,""endLine"":56}]",,3.0,1.0
__tests__/internal/integration/schema/schema-verification/has-many-test.js,SubOptimalAssert,"[{""startLine"":78,""endLine"":78}]",,3.0,1.0
__tests__/internal/integration/schema/schema-verification/belongs-to-test.js,SubOptimalAssert,"[{""startLine"":28,""endLine"":28}]",,8.0,1.0
__tests__/internal/integration/schema/schema-verification/belongs-to-test.js,SubOptimalAssert,"[{""startLine"":52,""endLine"":52}]",,8.0,1.0
__tests__/internal/integration/schema/schema-verification/belongs-to-test.js,SubOptimalAssert,"[{""startLine"":73,""endLine"":73}]",,8.0,1.0
__tests__/internal/integration/schema/schema-verification/belongs-to-test.js,SubOptimalAssert,"[{""startLine"":94,""endLine"":94}]",,8.0,1.0
__tests__/internal/integration/schema/schema-verification/belongs-to-test.js,SubOptimalAssert,"[{""startLine"":115,""endLine"":115}]",,8.0,1.0
__tests__/internal/integration/schema/schema-verification/belongs-to-test.js,SubOptimalAssert,"[{""startLine"":136,""endLine"":136}]",,8.0,1.0
__tests__/internal/integration/schema/schema-verification/belongs-to-test.js,SubOptimalAssert,"[{""startLine"":157,""endLine"":157}]",,8.0,1.0
__tests__/external/shared/serializers/json-api-serializer/key-formatting-test.js,GeneralFixture,"[{""startLine"":8,""endLine"":13}]",,0.0,1.0
__tests__/external/shared/serializers/json-api-serializer/base-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":14}]",,0.0,1.0
__tests__/external/shared/serializers/json-api-serializer/attrs-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":12}]",,0.0,1.0
__tests__/external/shared/serializers/base/serialize-ids-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":15}]",,0.0,1.0
__tests__/external/shared/serializers/base/root-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":17}]",,0.0,1.0
__tests__/external/shared/serializers/base/override-serialize-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":11}]",,0.0,1.0
__tests__/external/shared/serializers/base/attrs-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":17}]",,0.0,1.0
__tests__/external/shared/serializers/base/attribute-key-formatting-test.js,GeneralFixture,"[{""startLine"":13,""endLine"":25}]",,0.0,1.0
__tests__/external/shared/serializers/base/assorted-collections-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":19}]",,0.0,1.0
__tests__/external/shared/serializers/json-api-serializer/associations/model-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":20}]",,0.0,1.0
__tests__/external/shared/serializers/json-api-serializer/associations/links-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":20}]",,0.0,1.0
__tests__/external/shared/serializers/json-api-serializer/associations/key-for-relationship-test.js,GeneralFixture,"[{""startLine"":8,""endLine"":15}]",,0.0,1.0
__tests__/external/shared/serializers/json-api-serializer/associations/collection-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":20}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/sideloading-model-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":20}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/sideloading-model-test.js,GeneralFixture,"[{""startLine"":30,""endLine"":32}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/sideloading-collection-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":20}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/sideloading-collection-test.js,GeneralFixture,"[{""startLine"":31,""endLine"":33}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/sideloading-assorted-collections-test.js,GeneralFixture,"[{""startLine"":11,""endLine"":28}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/sideloading-assorted-collections-test.js,GeneralFixture,"[{""startLine"":30,""endLine"":34}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/sideloading-assorted-collections-test.js,GeneralFixture,"[{""startLine"":35,""endLine"":38}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/sideloading-assorted-collections-test.js,GeneralFixture,"[{""startLine"":39,""endLine"":42}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/sideloading-and-embedded-model-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":9}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/sideloading-and-embedded-model-test.js,GeneralFixture,"[{""startLine"":11,""endLine"":24}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/sideloading-and-embedded-collection-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":20}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/sideloading-and-embedded-collection-test.js,GeneralFixture,"[{""startLine"":31,""endLine"":33}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/embedded-model-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":20}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/embedded-model-test.js,GeneralFixture,"[{""startLine"":30,""endLine"":32}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/embedded-collection-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":20}]",,0.0,2.0
__tests__/external/shared/serializers/base/associations/embedded-collection-test.js,GeneralFixture,"[{""startLine"":30,""endLine"":32}]",,0.0,2.0
__tests__/external/shared/orm/mixed/regressions/1613-two-bidirectional-many-to-many-with-same-target-model-update-bug-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":19}]",,0.0,1.0
__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/association-set-ids-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/3-one-to-many-polymorphic/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/2-many-to-one/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/2-many-to-one/association-set-ids-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/2-many-to-one/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/2-many-to-one/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/2-many-to-one/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/1-one-to-many/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/1-one-to-many/association-set-test.js,SubOptimalAssert,"[{""startLine"":23,""endLine"":23}]",,0.0,1.0
__tests__/external/shared/orm/mixed/1-one-to-many/association-set-ids-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/1-one-to-many/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/1-one-to-many/association-new-test.js,SubOptimalAssert,"[{""startLine"":35,""endLine"":35}]",,0.0,1.0
__tests__/external/shared/orm/mixed/1-one-to-many/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/1-one-to-many/association-create-test.js,SubOptimalAssert,"[{""startLine"":25,""endLine"":25}]",,0.0,1.0
__tests__/external/shared/orm/mixed/1-one-to-many/association-create-test.js,SubOptimalAssert,"[{""startLine"":26,""endLine"":26}]",,0.0,1.0
__tests__/external/shared/orm/mixed/1-one-to-many/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/mixed/1-one-to-many/accessor-test.js,SubOptimalAssert,"[{""startLine"":26,""endLine"":26}]",,0.0,1.0
__tests__/external/shared/orm/has-many/regressions/many-to-many-inverse-set-bug-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":17}]",,0.0,1.0
__tests__/external/shared/orm/has-many/9-one-way-polymorphic/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/9-one-way-polymorphic/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/9-one-way-polymorphic/association-set-ids-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/9-one-way-polymorphic/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/9-one-way-polymorphic/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/9-one-way-polymorphic/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/8-many-to-many/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/8-many-to-many/create-test.js,VerboseStatement,"[{""startLine"":14,""endLine"":33}]",,6.0,1.0
__tests__/external/shared/orm/has-many/8-many-to-many/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/8-many-to-many/association-set-ids-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/8-many-to-many/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/8-many-to-many/association-new-test.js,SubOptimalAssert,"[{""startLine"":36,""endLine"":36}]",,0.0,1.0
__tests__/external/shared/orm/has-many/8-many-to-many/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/8-many-to-many/association-create-test.js,SubOptimalAssert,"[{""startLine"":25,""endLine"":25}]",,0.0,1.0
__tests__/external/shared/orm/has-many/8-many-to-many/association-create-test.js,SubOptimalAssert,"[{""startLine"":26,""endLine"":28}]",,0.0,1.0
__tests__/external/shared/orm/has-many/8-many-to-many/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/8-many-to-many/accessor-test.js,SubOptimalAssert,"[{""startLine"":23,""endLine"":23}]",,0.0,1.0
__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/association-set-ids-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/association-new-test.js,SubOptimalAssert,"[{""startLine"":36,""endLine"":36}]",,0.0,1.0
__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/association-create-test.js,SubOptimalAssert,"[{""startLine"":25,""endLine"":25}]",,0.0,1.0
__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/association-create-test.js,SubOptimalAssert,"[{""startLine"":26,""endLine"":26}]",,0.0,1.0
__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/7-named-one-way-reflexive/accessor-test.js,SubOptimalAssert,"[{""startLine"":23,""endLine"":23}]",,0.0,1.0
__tests__/external/shared/orm/has-many/6-one-way-reflexive/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/6-one-way-reflexive/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/6-one-way-reflexive/association-set-ids-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/6-one-way-reflexive/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/6-one-way-reflexive/association-new-test.js,SubOptimalAssert,"[{""startLine"":36,""endLine"":36}]",,0.0,1.0
__tests__/external/shared/orm/has-many/6-one-way-reflexive/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/6-one-way-reflexive/association-create-test.js,SubOptimalAssert,"[{""startLine"":25,""endLine"":25}]",,0.0,1.0
__tests__/external/shared/orm/has-many/6-one-way-reflexive/association-create-test.js,SubOptimalAssert,"[{""startLine"":26,""endLine"":26}]",,0.0,1.0
__tests__/external/shared/orm/has-many/6-one-way-reflexive/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/6-one-way-reflexive/accessor-test.js,SubOptimalAssert,"[{""startLine"":23,""endLine"":23}]",,0.0,1.0
__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/association-set-ids-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/association-new-test.js,SubOptimalAssert,"[{""startLine"":36,""endLine"":36}]",,0.0,1.0
__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/association-create-test.js,SubOptimalAssert,"[{""startLine"":25,""endLine"":25}]",,0.0,1.0
__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/association-create-test.js,SubOptimalAssert,"[{""startLine"":26,""endLine"":26}]",,0.0,1.0
__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/5-named-reflexive-explicit-inverse/accessor-test.js,SubOptimalAssert,"[{""startLine"":23,""endLine"":23}]",,0.0,1.0
__tests__/external/shared/orm/has-many/4-named-reflexive/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/4-named-reflexive/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/4-named-reflexive/association-set-ids-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/4-named-reflexive/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/4-named-reflexive/association-new-test.js,SubOptimalAssert,"[{""startLine"":36,""endLine"":36}]",,0.0,1.0
__tests__/external/shared/orm/has-many/4-named-reflexive/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/4-named-reflexive/association-create-test.js,SubOptimalAssert,"[{""startLine"":25,""endLine"":25}]",,0.0,1.0
__tests__/external/shared/orm/has-many/4-named-reflexive/association-create-test.js,SubOptimalAssert,"[{""startLine"":26,""endLine"":26}]",,0.0,1.0
__tests__/external/shared/orm/has-many/4-named-reflexive/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/4-named-reflexive/accessor-test.js,SubOptimalAssert,"[{""startLine"":23,""endLine"":23}]",,0.0,1.0
__tests__/external/shared/orm/has-many/3-reflexive/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/3-reflexive/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/3-reflexive/association-set-ids-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/3-reflexive/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/3-reflexive/association-new-test.js,SubOptimalAssert,"[{""startLine"":37,""endLine"":37}]",,0.0,1.0
__tests__/external/shared/orm/has-many/3-reflexive/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/3-reflexive/association-create-test.js,SubOptimalAssert,"[{""startLine"":28,""endLine"":28}]",,0.0,1.0
__tests__/external/shared/orm/has-many/3-reflexive/association-create-test.js,SubOptimalAssert,"[{""startLine"":29,""endLine"":29}]",,0.0,1.0
__tests__/external/shared/orm/has-many/3-reflexive/association-create-test.js,SubOptimalAssert,"[{""startLine"":30,""endLine"":30}]",,0.0,1.0
__tests__/external/shared/orm/has-many/3-reflexive/association-create-test.js,SubOptimalAssert,"[{""startLine"":31,""endLine"":31}]",,0.0,1.0
__tests__/external/shared/orm/has-many/3-reflexive/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/3-reflexive/accessor-test.js,SubOptimalAssert,"[{""startLine"":23,""endLine"":23}]",,0.0,1.0
__tests__/external/shared/orm/has-many/2-named/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/2-named/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/2-named/association-set-test.js,SubOptimalAssert,"[{""startLine"":22,""endLine"":22}]",,0.0,1.0
__tests__/external/shared/orm/has-many/2-named/association-set-test.js,SubOptimalAssert,"[{""startLine"":23,""endLine"":23}]",,0.0,1.0
__tests__/external/shared/orm/has-many/2-named/association-set-ids-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/2-named/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/2-named/association-new-test.js,SubOptimalAssert,"[{""startLine"":33,""endLine"":33}]",,0.0,1.0
__tests__/external/shared/orm/has-many/2-named/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/2-named/association-create-test.js,SubOptimalAssert,"[{""startLine"":25,""endLine"":25}]",,0.0,1.0
__tests__/external/shared/orm/has-many/2-named/association-create-test.js,SubOptimalAssert,"[{""startLine"":26,""endLine"":26}]",,0.0,1.0
__tests__/external/shared/orm/has-many/2-named/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/2-named/accessor-test.js,SubOptimalAssert,"[{""startLine"":26,""endLine"":26}]",,0.0,1.0
__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/association-set-ids-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/10-many-to-many-polymorphic/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/1-basic/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/1-basic/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/1-basic/association-set-test.js,SubOptimalAssert,"[{""startLine"":22,""endLine"":22}]",,0.0,1.0
__tests__/external/shared/orm/has-many/1-basic/association-set-test.js,SubOptimalAssert,"[{""startLine"":23,""endLine"":23}]",,0.0,1.0
__tests__/external/shared/orm/has-many/1-basic/association-set-ids-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/1-basic/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/1-basic/association-new-test.js,SubOptimalAssert,"[{""startLine"":33,""endLine"":33}]",,0.0,1.0
__tests__/external/shared/orm/has-many/1-basic/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/1-basic/association-create-test.js,SubOptimalAssert,"[{""startLine"":25,""endLine"":25}]",,0.0,1.0
__tests__/external/shared/orm/has-many/1-basic/association-create-test.js,SubOptimalAssert,"[{""startLine"":26,""endLine"":26}]",,0.0,1.0
__tests__/external/shared/orm/has-many/1-basic/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/has-many/1-basic/accessor-test.js,SubOptimalAssert,"[{""startLine"":26,""endLine"":26}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/9-one-way-polymorphic/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/9-one-way-polymorphic/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/9-one-way-polymorphic/association-set-id-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/9-one-way-polymorphic/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/9-one-way-polymorphic/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/9-one-way-polymorphic/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/8-one-to-one/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/8-one-to-one/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/8-one-to-one/association-set-id-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/8-one-to-one/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/8-one-to-one/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/8-one-to-one/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/7-named-one-way-reflexive/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/7-named-one-way-reflexive/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/7-named-one-way-reflexive/association-set-id-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/7-named-one-way-reflexive/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/7-named-one-way-reflexive/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/7-named-one-way-reflexive/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/6-one-way-reflexive/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/6-one-way-reflexive/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/6-one-way-reflexive/association-set-id-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/6-one-way-reflexive/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/6-one-way-reflexive/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/6-one-way-reflexive/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/5-named-reflexive-explicit-inverse/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/5-named-reflexive-explicit-inverse/association-set-id-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/5-named-reflexive-explicit-inverse/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/5-named-reflexive-explicit-inverse/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/5-named-reflexive-explicit-inverse/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/4-named-reflexive/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/4-named-reflexive/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/4-named-reflexive/association-set-id-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/4-named-reflexive/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/4-named-reflexive/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/4-named-reflexive/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/3-reflexive/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/3-reflexive/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/3-reflexive/association-set-id-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/3-reflexive/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/3-reflexive/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/3-reflexive/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/2-named/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/2-named/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/2-named/association-set-id-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/2-named/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/2-named/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/2-named/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/11-named-one-way-reflexive-self-referential/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/11-named-one-way-reflexive-self-referential/association-set-id-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/11-named-one-way-reflexive-self-referential/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/11-named-one-way-reflexive-self-referential/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/11-named-one-way-reflexive-self-referential/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/10-one-to-one-polymorphic/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/10-one-to-one-polymorphic/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/10-one-to-one-polymorphic/association-set-id-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/10-one-to-one-polymorphic/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/10-one-to-one-polymorphic/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/10-one-to-one-polymorphic/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/1-basic/delete-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/1-basic/association-set-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/1-basic/association-set-id-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/1-basic/association-new-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/1-basic/association-create-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/orm/belongs-to/1-basic/accessor-test.js,GeneralFixture,"[{""startLine"":6,""endLine"":6}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/polymorphic/top-level-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":15}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/polymorphic/top-level-test.js,GeneralFixture,"[{""startLine"":16,""endLine"":21}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/polymorphic/has-many-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":14}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/polymorphic/belongs-to-test.js,GeneralFixture,"[{""startLine"":7,""endLine"":14}]",,0.0,1.0
__tests__/external/shared/serializers/base/associations/polymorphic/belongs-to-test.js,GeneralFixture,"[{""startLine"":19,""endLine"":21}]",,0.0,1.0
