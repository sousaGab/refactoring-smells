file,type,smells,frame,itCount,describeCount
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 20, 'column': 8, 'index': 1016}","  18 |     it(""should not parse Latin-1 outside \\text{} with strict"", function() {
  19 |         const chars = 'ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ';
> 20 |         for (const ch of chars) {
     |        ^ Conditional Test Logic
  21 |             expect(ch).not.toParse(strictSettings);
  22 |         }
  23 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 144, 'column': 8, 'index': 5144}","  142 |
  143 |     it(""supportedCodepoint() should return the correct values"", () => {
> 144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |        ^ Conditional Test Logic
  145 |             expect(supportedCodepoint(codepoint)).toBe(
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 152, 'column': 8, 'index': 5441}","  150 |
  151 |     it(""should correctly identify script for supported codepoints"", () => {
> 152 |         for (const scriptName of scriptNames) {
      |        ^ Conditional Test Logic
  153 |             const testChar = findCharacterInScript(scriptName);
  154 |             const codepoint = testChar.charCodeAt(0);
  155 |             expect(scriptFromCodepoint(codepoint)).toEqual(scriptName);",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 161, 'column': 8, 'index': 5857}","  159 |     it(""should return null for unsupported codepoints"", () => {
  160 |         const unsupportedCodepoints = [0x0, 0x7F, 0xFFFF]; // Control chars, ASCII, beyond BMP
> 161 |         for (const codepoint of unsupportedCodepoints) {
      |        ^ Conditional Test Logic
  162 |             expect(scriptFromCodepoint(codepoint)).toBe(null);
  163 |         }
  164 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 168, 'column': 8, 'index': 6145}","  166 |     it(""should match supportedCodepoint() results"", () => {
  167 |         const testCodepoints = [0x0100, 0x0400, 0x0530, 0x0900, 0x10A0, 0x3000, 0xAC00];
> 168 |         for (const codepoint of testCodepoints) {
      |        ^ Conditional Test Logic
  169 |             const hasScript = scriptFromCodepoint(codepoint) !== null;
  170 |             expect(supportedCodepoint(codepoint)).toBe(hasScript);
  171 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 177, 'column': 8, 'index': 6515}","  175 |     function findCharacterInScript(scriptName) {
  176 |         const regexp = scriptRegExps[scriptName];
> 177 |         for (let cp = 0; cp <= 0xFFFF; cp++) {
      |        ^ Conditional Test Logic
  178 |             const char = String.fromCharCode(cp);
  179 |             if (regexp.test(char)) {
  180 |                 return char;",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 179, 'column': 12, 'index': 6616}","  177 |         for (let cp = 0; cp <= 0xFFFF; cp++) {
  178 |             const char = String.fromCharCode(cp);
> 179 |             if (regexp.test(char)) {
      |            ^ Conditional Test Logic
  180 |                 return char;
  181 |             }
  182 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 169, 'column': 30, 'index': 6217}","  167 |         const testCodepoints = [0x0100, 0x0400, 0x0530, 0x0900, 0x10A0, 0x3000, 0xAC00];
  168 |         for (const codepoint of testCodepoints) {
> 169 |             const hasScript = scriptFromCodepoint(codepoint) !== null;
      |                              ^ Eager Test
  170 |             expect(supportedCodepoint(codepoint)).toBe(hasScript);
  171 |         }
  172 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 170, 'column': 19, 'index': 6277}","  168 |         for (const codepoint of testCodepoints) {
  169 |             const hasScript = scriptFromCodepoint(codepoint) !== null;
> 170 |             expect(supportedCodepoint(codepoint)).toBe(hasScript);
      |                   ^ Eager Test
  171 |         }
  172 |     });
  173 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 145, 'column': 19, 'index': 5223}","  143 |     it(""supportedCodepoint() should return the correct values"", () => {
  144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
> 145 |             expect(supportedCodepoint(codepoint)).toBe(
      |                   ^ Lazy Test
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );
  148 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 155, 'column': 19, 'index': 5618}","  153 |             const testChar = findCharacterInScript(scriptName);
  154 |             const codepoint = testChar.charCodeAt(0);
> 155 |             expect(scriptFromCodepoint(codepoint)).toEqual(scriptName);
      |                   ^ Lazy Test
  156 |         }
  157 |     });
  158 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 162, 'column': 19, 'index': 5925}","  160 |         const unsupportedCodepoints = [0x0, 0x7F, 0xFFFF]; // Control chars, ASCII, beyond BMP
  161 |         for (const codepoint of unsupportedCodepoints) {
> 162 |             expect(scriptFromCodepoint(codepoint)).toBe(null);
      |                   ^ Lazy Test
  163 |         }
  164 |     });
  165 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 169, 'column': 30, 'index': 6217}","  167 |         const testCodepoints = [0x0100, 0x0400, 0x0530, 0x0900, 0x10A0, 0x3000, 0xAC00];
  168 |         for (const codepoint of testCodepoints) {
> 169 |             const hasScript = scriptFromCodepoint(codepoint) !== null;
      |                              ^ Lazy Test
  170 |             expect(supportedCodepoint(codepoint)).toBe(hasScript);
  171 |         }
  172 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 170, 'column': 19, 'index': 6277}","  168 |         for (const codepoint of testCodepoints) {
  169 |             const hasScript = scriptFromCodepoint(codepoint) !== null;
> 170 |             expect(supportedCodepoint(codepoint)).toBe(hasScript);
      |                   ^ Lazy Test
  171 |         }
  172 |     });
  173 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 7}","   5 |
   6 | describe(""unicode"", function() {
>  7 |     it(""should build Latin-1 inside \\text{}"", function() {
     |    ^ Unknown Test
   8 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}`
   9 |             .toBuild();
  10 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 12}","  10 |     });
  11 |
> 12 |     it(""should build Latin-1 inside \\text{} like accent commands"", function() {
     |    ^ Unknown Test
  13 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}`
  14 |             .toParseLike`\text{\`A\'A\^A\~A\""A\r A\`E\'E\^E\""E\`I\'I\^I\""I\~N\`O\'O\^O\~O\""O\`U\'U\^U\""U\'Y\`a\'a\^a\~a\""a\r a\`e\'e\^e\""e\`ı\'ı\^ı\""ı\~n\`o\'o\^o\~o\""o\`u\'u\^u\""u\'y\""y\c C\c c}`;
  15 |         // TODO(edemaine): A few characters don't have analogs yet.",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 25}","  23 |     });
  24 |
> 25 |     it(""should build Latin-1 outside \\text{}"", function() {
     |    ^ Unknown Test
  26 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ`
  27 |             .toBuild(nonstrictSettings);
  28 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 30}","  28 |     });
  29 |
> 30 |     it(""should build all lower case Greek letters"", function() {
     |    ^ Unknown Test
  31 |         expect`αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω`.toBuild();
  32 |     });
  33 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 34}","  32 |     });
  33 |
> 34 |     it(""should build math upper case Greek letters"", function() {
     |    ^ Unknown Test
  35 |         expect`ΓΔΘΛΞΠΣΥΦΨΩ`.toBuild();
  36 |     });
  37 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 38}","  36 |     });
  37 |
> 38 |     it(""should build Cyrillic inside \\text{}"", function() {
     |    ^ Unknown Test
  39 |         expect`\text{БГДЖЗЙЛФЦШЫЮЯ}`.toBuild();
  40 |     });
  41 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 42}","  40 |     });
  41 |
> 42 |     it(""should build Cyrillic outside \\text{}"", function() {
     |    ^ Unknown Test
  43 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.toBuild(nonstrictSettings);
  44 |     });
  45 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 46}","  44 |     });
  45 |
> 46 |     it(""should not parse Cyrillic outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  47 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.not.toParse(strictSettings);
  48 |     });
  49 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 50}","  48 |     });
  49 |
> 50 |     it(""should build CJK inside \\text{}"", function() {
     |    ^ Unknown Test
  51 |         expect`\text{私はバナナです}`.toBuild();
  52 |         expect`\text{여보세요}`.toBuild();
  53 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 55}","  53 |     });
  54 |
> 55 |     it(""should build CJK outside \\text{}"", function() {
     |    ^ Unknown Test
  56 |         expect`私はバナナです`.toBuild(nonstrictSettings);
  57 |         expect`여보세요`.toBuild(nonstrictSettings);
  58 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 60}","  58 |     });
  59 |
> 60 |     it(""should not parse CJK outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  61 |         expect`私はバナナです。`.not.toParse(strictSettings);
  62 |         expect`여보세요`.not.toParse(strictSettings);
  63 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 65}","  63 |     });
  64 |
> 65 |     it(""should build Devanagari inside \\text{}"", function() {
     |    ^ Unknown Test
  66 |         expect`\text{नमस्ते}`.toBuild();
  67 |     });
  68 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 69}","  67 |     });
  68 |
> 69 |     it(""should build Devanagari outside \\text{}"", function() {
     |    ^ Unknown Test
  70 |         expect`नमस्ते`.toBuild(nonstrictSettings);
  71 |     });
  72 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 73}","  71 |     });
  72 |
> 73 |     it(""should not parse Devanagari outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  74 |         expect`नमस्ते`.not.toParse(strictSettings);
  75 |     });
  76 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 77}","  75 |     });
  76 |
> 77 |     it(""should build Georgian inside \\text{}"", function() {
     |    ^ Unknown Test
  78 |         expect`\text{გამარჯობა}`.toBuild();
  79 |     });
  80 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 81}","  79 |     });
  80 |
> 81 |     it(""should build Georgian outside \\text{}"", function() {
     |    ^ Unknown Test
  82 |         expect`გამარჯობა`.toBuild(nonstrictSettings);
  83 |     });
  84 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 85}","  83 |     });
  84 |
> 85 |     it(""should not parse Georgian outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  86 |         expect`გამარჯობა`.not.toParse(strictSettings);
  87 |     });
  88 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 89}","  87 |     });
  88 |
> 89 |     it(""should build Armenian both inside and outside \\text{}"", function() {
     |    ^ Unknown Test
  90 |         expect`ԱԲԳաբգ`.toBuild(nonstrictSettings);
  91 |         expect`\text{ԱԲԳաբգ}`.toBuild(nonstrictSettings);
  92 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 94}","  92 |     });
  93 |
> 94 |     it(""should build extended Latin characters inside \\text{}"", function() {
     |    ^ Unknown Test
  95 |         expect`\text{ěščřžůřťďňőİı}`.toBuild();
  96 |     });
  97 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 98}","   96 |     });
   97 |
>  98 |     it(""should not parse extended Latin outside \\text{} with strict"", function() {
      |    ^ Unknown Test
   99 |         expect`ěščřžůřťďňőİı`.not.toParse(strictSettings);
  100 |     });
  101 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 102}","  100 |     });
  101 |
> 102 |     it(""should not allow emoji in strict mode"", function() {
      |    ^ Unknown Test
  103 |         expect`✌`.not.toParse(strictSettings);
  104 |         expect`\text{✌}`.not.toParse(strictSettings);
  105 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 113}","  111 |     });
  112 |
> 113 |     it(""should allow emoji outside strict mode"", function() {
      |    ^ Unknown Test
  114 |         expect`✌`.toWarn();
  115 |         expect`\text{✌}`.toWarn();
  116 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 4, 'column': 4, 'index': 98}","  2 |
  3 | describe(""Screenshotter item"", function() {
> 4 |     for (const key in data) {
    |    ^ Conditional Test Logic
  5 |         if (data.hasOwnProperty(key)) {
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 5, 'column': 8, 'index': 132}","  3 | describe(""Screenshotter item"", function() {
  4 |     for (const key in data) {
> 5 |         if (data.hasOwnProperty(key)) {
    |        ^ Conditional Test Logic
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {
  8 |                 expect(item.tex).toBuild({",,
/home/gabriel/Desktop/research/projects/katex/test/mathml-spec.js,Conditional Test Logic,"{'line': 9, 'column': 4, 'index': 300}","   7 | const getMathML = function(expr, settings = new Settings()) {
   8 |     let startStyle = Style.TEXT;
>  9 |     if (settings.displayMode) {
     |    ^ Conditional Test Logic
  10 |         startStyle = Style.DISPLAY;
  11 |     }
  12 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 46, 'column': 8, 'index': 1257}","  44 |         const parse = getParsed(expression);
  45 |
> 46 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  47 |             const group = parse[i];
  48 |             expect(group.type).toMatch(""ord"");
  49 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 69, 'column': 8, 'index': 1848}","  67 |         const parse = getParsed(expression);
  68 |
> 69 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  70 |             const group = parse[i];
  71 |             expect(group.type).toEqual(""atom"");
  72 |             expect(group.family).toEqual(""bin"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 89, 'column': 8, 'index': 2443}","  87 |         const parse = getParsed(expression);
  88 |
> 89 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  90 |             let group = parse[i];
  91 |             if (group.type === ""htmlmathml"") {
  92 |                 expect(group.html).toHaveLength(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 91, 'column': 12, 'index': 2530}","  89 |         for (let i = 0; i < parse.length; i++) {
  90 |             let group = parse[i];
> 91 |             if (group.type === ""htmlmathml"") {
     |            ^ Conditional Test Logic
  92 |                 expect(group.html).toHaveLength(1);
  93 |                 group = group.html[0];
  94 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 95, 'column': 12, 'index': 2682}","  93 |                 group = group.html[0];
  94 |             }
> 95 |             if (group.type === ""mclass"") {
     |            ^ Conditional Test Logic
  96 |                 expect(group.mclass).toEqual(""mrel"");
  97 |             } else {
  98 |                 expect(group.type).toEqual(""atom"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 128, 'column': 8, 'index': 3698}","  126 |         const parse = getParsed(expression);
  127 |
> 128 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  129 |             const group = parse[i];
  130 |             expect(group.type).toEqual(""atom"");
  131 |             expect(group.family).toEqual(""punct"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 146, 'column': 8, 'index': 4159}","  144 |         const parse = getParsed(expression);
  145 |
> 146 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  147 |             const group = parse[i];
  148 |             expect(group.type).toEqual(""atom"");
  149 |             expect(group.family).toEqual(""open"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 164, 'column': 8, 'index': 4622}","  162 |         const parse = getParsed(expression);
  163 |
> 164 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  165 |             const group = parse[i];
  166 |             expect(group.type).toEqual(""atom"");
  167 |             expect(group.family).toEqual(""close"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1262, 'column': 4, 'index': 40422}","  1260 |     ];
  1261 |
> 1262 |     for (const [actual, expected] of cases) {
       |    ^ Conditional Test Logic
  1263 |         it(`should build ""${actual}"" like ""${expected}""`, () => {
  1264 |             expect(actual).toBuildLike(expected);
  1265 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1411, 'column': 8, 'index': 45668}","  1409 |         ];
  1410 |
> 1411 |         for (let i = 0; i < missingGroups.length; i++) {
       |        ^ Conditional Test Logic
  1412 |             expect(missingGroups[i]).not.toParse();
  1413 |         }
  1414 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1438, 'column': 8, 'index': 46629}","  1436 |         ];
  1437 |
> 1438 |         for (let i = 0; i < badArguments.length; i++) {
       |        ^ Conditional Test Logic
  1439 |             expect(badArguments[i]).not.toParse();
  1440 |         }
  1441 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1456, 'column': 8, 'index': 47195}","  1454 |         ];
  1455 |
> 1456 |         for (let i = 0; i < goodArguments.length; i++) {
       |        ^ Conditional Test Logic
  1457 |             expect(goodArguments[i]).toParse();
  1458 |         }
  1459 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1469, 'column': 8, 'index': 47551}","  1467 |         ];
  1468 |
> 1469 |         for (let i = 0; i < badSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1470 |             expect(badSupSubscripts[i]).not.toParse();
  1471 |         }
  1472 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1482, 'column': 8, 'index': 47930}","  1480 |         ];
  1481 |
> 1482 |         for (let i = 0; i < goodSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1483 |             expect(goodSupSubscripts[i]).toParse();
  1484 |         }
  1485 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1520, 'column': 8, 'index': 49162}","  1518 |         ];
  1519 |
> 1520 |         for (let i = 0; i < badLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1521 |             expect(badLeftArguments[i]).not.toParse();
  1522 |         }
  1523 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1534, 'column': 8, 'index': 49639}","  1532 |         ];
  1533 |
> 1534 |         for (let i = 0; i < goodLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1535 |             expect(goodLeftArguments[i]).toParse();
  1536 |         }
  1537 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 2172, 'column': 8, 'index': 77589}","  2170 |
  2171 |     it(""should throw Error when HTML attribute name is invalid"", function() {
> 2172 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
       |        ^ Conditional Test Logic
  2173 |             try {
  2174 |                 katex.renderToString(
  2175 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 3835, 'column': 4, 'index': 141526}","  3833 | describe(""leqno and fleqn rendering options"", () => {
  3834 |     const expr = r`\tag{hi}x+y`;
> 3835 |     for (const opt of [""leqno"", ""fleqn""]) {
       |    ^ Conditional Test Logic
  3836 |         it(`should not add ${opt} class by default`, () => {
  3837 |             const settings = new Settings({displayMode: true});
  3838 |             const built = katex.__renderToDomTree(expr, settings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4240, 'column': 8, 'index': 158466}","  4238 |         // add eastern arabic numbers to symbols table
  4239 |         // these symbols are ۰۱۲۳۴۵۶۷۸۹ and ٠١٢٣٤٥٦٧٨٩
> 4240 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4241 |             const persianNum = String.fromCharCode(0x0660 + number);
  4242 |             katex.__defineSymbol(
  4243 |                 ""math"", fontName, ""textord"", persianNum, persianNum);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4259, 'column': 8, 'index': 159412}","  4257 |         const mockMetrics = {};
  4258 |         // mock font metrics for the symbols that we added previously
> 4259 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4260 |             mockMetrics[0x0660 + number] = [-0.00244140625, 0.6875, 0, 0];
  4261 |             mockMetrics[0x06F0 + number] = [-0.00244140625, 0.6875, 0, 0];
  4262 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 574, 'column': 8, 'index': 17088}","  572 |         parse = getParsed(simpleOver)[0];
  573 |
> 574 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  575 |         expect(parse.numer).toBeDefined();
  576 |         expect(parse.denom).toBeDefined();
  577 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 574, 'column': 8, 'index': 17088}","  572 |         parse = getParsed(simpleOver)[0];
  573 |
> 574 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  575 |         expect(parse.numer).toBeDefined();
  576 |         expect(parse.denom).toBeDefined();
  577 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 575, 'column': 8, 'index': 17135}","  573 |
  574 |         expect(parse.type).toEqual(""genfrac"");
> 575 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  576 |         expect(parse.denom).toBeDefined();
  577 |
  578 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 575, 'column': 8, 'index': 17135}","  573 |
  574 |         expect(parse.type).toEqual(""genfrac"");
> 575 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  576 |         expect(parse.denom).toBeDefined();
  577 |
  578 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 576, 'column': 8, 'index': 17178}","  574 |         expect(parse.type).toEqual(""genfrac"");
  575 |         expect(parse.numer).toBeDefined();
> 576 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  577 |
  578 |         parse = getParsed(complexOver)[0];
  579 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 576, 'column': 8, 'index': 17178}","  574 |         expect(parse.type).toEqual(""genfrac"");
  575 |         expect(parse.numer).toBeDefined();
> 576 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  577 |
  578 |         parse = getParsed(complexOver)[0];
  579 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 580, 'column': 8, 'index': 17266}","  578 |         parse = getParsed(complexOver)[0];
  579 |
> 580 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  581 |         expect(parse.numer).toBeDefined();
  582 |         expect(parse.denom).toBeDefined();
  583 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 580, 'column': 8, 'index': 17266}","  578 |         parse = getParsed(complexOver)[0];
  579 |
> 580 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  581 |         expect(parse.numer).toBeDefined();
  582 |         expect(parse.denom).toBeDefined();
  583 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 581, 'column': 8, 'index': 17313}","  579 |
  580 |         expect(parse.type).toEqual(""genfrac"");
> 581 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  582 |         expect(parse.denom).toBeDefined();
  583 |
  584 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 581, 'column': 8, 'index': 17313}","  579 |
  580 |         expect(parse.type).toEqual(""genfrac"");
> 581 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  582 |         expect(parse.denom).toBeDefined();
  583 |
  584 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 582, 'column': 8, 'index': 17356}","  580 |         expect(parse.type).toEqual(""genfrac"");
  581 |         expect(parse.numer).toBeDefined();
> 582 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  583 |
  584 |         const parseBraceFrac = getParsed(braceFrac)[0];
  585 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 582, 'column': 8, 'index': 17356}","  580 |         expect(parse.type).toEqual(""genfrac"");
  581 |         expect(parse.numer).toBeDefined();
> 582 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  583 |
  584 |         const parseBraceFrac = getParsed(braceFrac)[0];
  585 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1639, 'column': 8, 'index': 53408}","  1637 |         expect(bbBody).toHaveLength(3);
  1638 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1639 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1640 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1641 |         expect(bbBody[2].type).toEqual(""font"");
  1642 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1639, 'column': 8, 'index': 53408}","  1637 |         expect(bbBody).toHaveLength(3);
  1638 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1639 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1640 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1641 |         expect(bbBody[2].type).toEqual(""font"");
  1642 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1641, 'column': 8, 'index': 53506}","  1639 |         expect(bbBody[2].type).toEqual(""font"");
  1640 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1641 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1642 |     });
  1643 |
  1644 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1641, 'column': 8, 'index': 53506}","  1639 |         expect(bbBody[2].type).toEqual(""font"");
  1640 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1641 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1642 |     });
  1643 |
  1644 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1834, 'column': 8, 'index': 61061}","  1832 |     it(""should render \\text{R\\textit{S}T} with the correct fonts"", function() {
  1833 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
> 1834 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
       |        ^ Duplicate Assert
  1835 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
  1836 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1837 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1835, 'column': 8, 'index': 61128}","  1833 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
  1834 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
> 1835 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
       |        ^ Duplicate Assert
  1836 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1837 |     });
  1838 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1836, 'column': 8, 'index': 61202}","  1834 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
  1835 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
> 1836 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
       |        ^ Duplicate Assert
  1837 |     });
  1838 |
  1839 |     it(""should render \\textbf{R } with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1860, 'column': 8, 'index': 62393}","  1858 |     it(""should render \\textsf{\\textit{R}G\\textbf{B}} with the correct font"", function() {
  1859 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
> 1860 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
       |        ^ Duplicate Assert
  1861 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
  1862 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1863 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1861, 'column': 8, 'index': 62474}","  1859 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
  1860 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
> 1861 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
       |        ^ Duplicate Assert
  1862 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1863 |     });
  1864 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1862, 'column': 8, 'index': 62548}","  1860 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
  1861 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
> 1862 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
       |        ^ Duplicate Assert
  1863 |     });
  1864 |
  1865 |     it(""should render \\textsf{\\textbf{$\\mathrm{A}$}} with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1883, 'column': 8, 'index': 63623}","  1881 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1882 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1883 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1884 |
  1885 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1886 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1883, 'column': 8, 'index': 63623}","  1881 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1882 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1883 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1884 |
  1885 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1886 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1887, 'column': 8, 'index': 63813}","  1885 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1886 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1887 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1888 |     });
  1889 |
  1890 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1887, 'column': 8, 'index': 63813}","  1885 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1886 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1887 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1888 |     });
  1889 |
  1890 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2080, 'column': 8, 'index': 74086}","  2078 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2079 |             ""</mstyle>"";
> 2080 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2081 |
  2082 |         // reverse the order of the commands
  2083 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2080, 'column': 8, 'index': 74086}","  2078 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2079 |             ""</mstyle>"";
> 2080 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2081 |
  2082 |         // reverse the order of the commands
  2083 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2089, 'column': 8, 'index': 74447}","  2087 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2088 |             ""</mstyle>"";
> 2089 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2090 |     });
  2091 |
  2092 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2089, 'column': 8, 'index': 74447}","  2087 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2088 |             ""</mstyle>"";
> 2089 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2090 |     });
  2091 |
  2092 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2103, 'column': 8, 'index': 75008}","  2101 |         const tree = getParsed(tex);
  2102 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
> 2103 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
       |        ^ Duplicate Assert
  2104 |         expect(markup).toContain(
  2105 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2106 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2104, 'column': 8, 'index': 75079}","  2102 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2103 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
> 2104 |         expect(markup).toContain(
       |        ^ Duplicate Assert
  2105 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2106 |     });
  2107 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2201, 'column': 8, 'index': 78642}","  2199 |         const built = getBuilt`+ x`;
  2200 |
> 2201 |         expect(built[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2202 |         expect(built[0].classes).not.toContain(""mbin"");
  2203 |     });
  2204 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2202, 'column': 8, 'index': 78694}","  2200 |
  2201 |         expect(built[0].classes).toContain(""mord"");
> 2202 |         expect(built[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2203 |     });
  2204 |
  2205 |     it(""should create ords after some other objects"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2236, 'column': 8, 'index': 80210}","  2234 |         const markup = katex.renderToString(r`\sigma^2`);
  2235 |         expect(markup.indexOf(""<span"")).toBe(0);
> 2236 |         expect(markup).toContain(""\u03c3"");  // sigma
       |        ^ Duplicate Assert
  2237 |         expect(markup).toContain(""margin-right"");
  2238 |         expect(markup).not.toContain(""marginRight"");
  2239 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2237, 'column': 8, 'index': 80264}","  2235 |         expect(markup.indexOf(""<span"")).toBe(0);
  2236 |         expect(markup).toContain(""\u03c3"");  // sigma
> 2237 |         expect(markup).toContain(""margin-right"");
       |        ^ Duplicate Assert
  2238 |         expect(markup).not.toContain(""marginRight"");
  2239 |     });
  2240 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2238, 'column': 8, 'index': 80314}","  2236 |         expect(markup).toContain(""\u03c3"");  // sigma
  2237 |         expect(markup).toContain(""margin-right"");
> 2238 |         expect(markup).not.toContain(""marginRight"");
       |        ^ Duplicate Assert
  2239 |     });
  2240 |
  2241 |     it(""generates both MathML and HTML"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2244, 'column': 8, 'index': 80481}","  2242 |         const markup = katex.renderToString(""a"");
  2243 |
> 2244 |         expect(markup).toContain(""<span"");
       |        ^ Duplicate Assert
  2245 |         expect(markup).toContain(""<math"");
  2246 |     });
  2247 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2245, 'column': 8, 'index': 80524}","  2243 |
  2244 |         expect(markup).toContain(""<span"");
> 2245 |         expect(markup).toContain(""<math"");
       |        ^ Duplicate Assert
  2246 |     });
  2247 | });
  2248 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2297, 'column': 8, 'index': 81987}","  2295 |     it(""should produce mords"", function() {
  2296 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
> 2297 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2298 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2299 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2300 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2298, 'column': 8, 'index': 82050}","  2296 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
  2297 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
> 2298 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2299 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2300 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2301 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2299, 'column': 8, 'index': 82117}","  2297 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
  2298 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
> 2299 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2300 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2301 |     });
  2302 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2300, 'column': 8, 'index': 82182}","  2298 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2299 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
> 2300 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2301 |     });
  2302 | });
  2303 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2315, 'column': 8, 'index': 82699}","  2313 |     it(""should produce mords"", function() {
  2314 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
> 2315 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2316 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2317 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2318 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2316, 'column': 8, 'index': 82766}","  2314 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
  2315 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
> 2316 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2317 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2318 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2319 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2317, 'column': 8, 'index': 82837}","  2315 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
  2316 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
> 2317 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2318 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2319 |     });
  2320 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2318, 'column': 8, 'index': 82906}","  2316 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2317 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
> 2318 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2319 |     });
  2320 | });
  2321 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2332, 'column': 8, 'index': 83424}","  2330 |     it(""should produce mords"", function() {
  2331 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
> 2332 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2333 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2334 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2335 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2333, 'column': 8, 'index': 83498}","  2331 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
  2332 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
> 2333 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2334 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2335 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2336 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2334, 'column': 8, 'index': 83576}","  2332 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
  2333 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
> 2334 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2335 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2336 |     });
  2337 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2335, 'column': 8, 'index': 83652}","  2333 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2334 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
> 2335 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2336 |     });
  2337 | });
  2338 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2379, 'column': 8, 'index': 85141}","  2377 |     it(""should produce mords"", function() {
  2378 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
> 2379 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2380 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2381 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2382 |         expect(getBuilt`\underrightarrow )^2`[0].classes)",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2380, 'column': 8, 'index': 85216}","  2378 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
  2379 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
> 2380 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2381 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2382 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2383 |             .not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2381, 'column': 8, 'index': 85295}","  2379 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
  2380 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
> 2381 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2382 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2383 |             .not.toContain(""mclose"");
  2384 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2382, 'column': 8, 'index': 85372}","  2380 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2381 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
> 2382 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
       |        ^ Duplicate Assert
  2383 |             .not.toContain(""mclose"");
  2384 |     });
  2385 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2421, 'column': 8, 'index': 86675}","  2419 |         expect(getBuilt`\xrightarrow x`[0].classes).toContain(""mrel"");
  2420 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
> 2421 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2422 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2423 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2424 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2422, 'column': 8, 'index': 86746}","  2420 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
  2421 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
> 2422 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2423 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2424 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2425 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2423, 'column': 8, 'index': 86821}","  2421 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
  2422 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
> 2423 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2424 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2425 |     });
  2426 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2424, 'column': 8, 'index': 86894}","  2422 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2423 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
> 2424 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2425 |     });
  2426 | });
  2427 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2462, 'column': 8, 'index': 88139}","  2460 |         expect(getBuilt`\overbrace x`[0].classes).toContain(""mord"");
  2461 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
> 2462 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2463 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2464 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2465 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2463, 'column': 8, 'index': 88208}","  2461 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
  2462 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
> 2463 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2464 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2465 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2466 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2464, 'column': 8, 'index': 88281}","  2462 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
  2463 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
> 2464 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2465 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2466 |     });
  2467 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2465, 'column': 8, 'index': 88352}","  2463 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2464 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
> 2465 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2466 |     });
  2467 | });
  2468 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2494, 'column': 8, 'index': 89188}","  2492 |     it(""should produce mords"", function() {
  2493 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
> 2494 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2495 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2496 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2497 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2495, 'column': 8, 'index': 89253}","  2493 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
  2494 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
> 2495 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2496 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2497 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2498 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2496, 'column': 8, 'index': 89322}","  2494 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
  2495 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
> 2496 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2497 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2498 |     });
  2499 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2497, 'column': 8, 'index': 89389}","  2495 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2496 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
> 2497 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2498 |     });
  2499 | });
  2500 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2614, 'column': 8, 'index': 93178}","  2612 |     it(""should produce mords"", function() {
  2613 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
> 2614 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2615 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2616 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2617 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2615, 'column': 8, 'index': 93244}","  2613 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
  2614 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
> 2615 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2616 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2617 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2618 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2616, 'column': 8, 'index': 93314}","  2614 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
  2615 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
> 2616 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2617 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2618 |     });
  2619 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2617, 'column': 8, 'index': 93382}","  2615 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2616 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
> 2617 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2618 |     });
  2619 | });
  2620 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3465, 'column': 8, 'index': 126522}","  3463 |     it(""\\char produces literal characters"", () => {
  3464 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3465 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Duplicate Assert
  3466 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3467 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3468 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3466, 'column': 8, 'index': 126573}","  3464 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3465 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3466 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Duplicate Assert
  3467 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3468 |         expect`\char`.not.toParse();
  3469 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3467, 'column': 8, 'index': 126625}","  3465 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3466 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3467 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Duplicate Assert
  3468 |         expect`\char`.not.toParse();
  3469 |         expect(""\\char`"").not.toParse();
  3470 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4099, 'column': 8, 'index': 152747}","  4097 |         const example = exp32 + r`\a{1}`;
  4098 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
> 4099 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4100 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4101 |     });
  4102 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4100, 'column': 8, 'index': 152814}","  4098 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
  4099 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4100 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4101 |     });
  4102 |
  4103 |     it(""should count correctly with Unicode sub/superscripts"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4106, 'column': 8, 'index': 153083}","  4104 |         const example = exp32 + r`\def+{\a{1}}x⁺x⁺x⁺x⁺`;
  4105 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
> 4106 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4107 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4108 |     });
  4109 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4107, 'column': 8, 'index': 153150}","  4105 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
  4106 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4107 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4108 |     });
  4109 | });
  4110 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4149, 'column': 8, 'index': 154797}","  4147 |         // Ensure newlines appear outside base spans (because, in this regexp,
  4148 |         // base span occurs immediately after each newline span).
> 4149 |         expect(markup).toMatch(
       |        ^ Duplicate Assert
  4150 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
  4151 |         expect(markup).toMatchSnapshot();
  4152 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4151, 'column': 8, 'index': 154937}","  4149 |         expect(markup).toMatch(
  4150 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
> 4151 |         expect(markup).toMatchSnapshot();
       |        ^ Duplicate Assert
  4152 |     });
  4153 | });
  4154 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 509, 'column': 27, 'index': 14973}","  507 |
  508 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 509 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Eager Test
  510 |
  511 |         expect(dfracParse.type).toEqual(""genfrac"");
  512 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 515, 'column': 27, 'index': 15181}","  513 |         expect(dfracParse.denom).toBeDefined();
  514 |
> 515 |         const tfracParse = getParsed(tfracExpression)[0];
      |                           ^ Eager Test
  516 |
  517 |         expect(tfracParse.type).toEqual(""genfrac"");
  518 |         expect(tfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 521, 'column': 27, 'index': 15389}","  519 |         expect(tfracParse.denom).toBeDefined();
  520 |
> 521 |         const cfracParse = getParsed(cfracExpression)[0];
      |                           ^ Eager Test
  522 |
  523 |         expect(cfracParse.type).toEqual(""genfrac"");
  524 |         expect(cfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 527, 'column': 29, 'index': 15599}","  525 |         expect(cfracParse.denom).toBeDefined();
  526 |
> 527 |         const genfracParse = getParsed(genfrac1)[0];
      |                             ^ Eager Test
  528 |
  529 |         expect(genfracParse.type).toEqual(""genfrac"");
  530 |         expect(genfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 572, 'column': 16, 'index': 17053}","  570 |         let parse;
  571 |
> 572 |         parse = getParsed(simpleOver)[0];
      |                ^ Eager Test
  573 |
  574 |         expect(parse.type).toEqual(""genfrac"");
  575 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 578, 'column': 16, 'index': 17230}","  576 |         expect(parse.denom).toBeDefined();
  577 |
> 578 |         parse = getParsed(complexOver)[0];
      |                ^ Eager Test
  579 |
  580 |         expect(parse.type).toEqual(""genfrac"");
  581 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 584, 'column': 31, 'index': 17423}","  582 |         expect(parse.denom).toBeDefined();
  583 |
> 584 |         const parseBraceFrac = getParsed(braceFrac)[0];
      |                               ^ Eager Test
  585 |
  586 |         expect(parseBraceFrac.type).toEqual(""genfrac"");
  587 |         expect(parseBraceFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 592, 'column': 31, 'index': 17754}","  590 |         expect(parseBraceFrac.rightDelim).toBeDefined();
  591 |
> 592 |         const parseBrackFrac = getParsed(brackFrac)[0];
      |                               ^ Eager Test
  593 |
  594 |         expect(parseBrackFrac.type).toEqual(""genfrac"");
  595 |         expect(parseBrackFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 869, 'column': 23, 'index': 27715}","  867 |
  868 |     it(""should correctly extract the custom color"", function() {
> 869 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Eager Test
  870 |         const parse2 = getParsed(customColorExpression2)[0];
  871 |         const parse3 = getParsed(customColorExpression3)[0];
  872 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 870, 'column': 23, 'index': 27776}","  868 |     it(""should correctly extract the custom color"", function() {
  869 |         const parse1 = getParsed(customColorExpression1)[0];
> 870 |         const parse2 = getParsed(customColorExpression2)[0];
      |                       ^ Eager Test
  871 |         const parse3 = getParsed(customColorExpression3)[0];
  872 |
  873 |         expect(parse1.color).toEqual(""#fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 871, 'column': 23, 'index': 27837}","  869 |         const parse1 = getParsed(customColorExpression1)[0];
  870 |         const parse2 = getParsed(customColorExpression2)[0];
> 871 |         const parse3 = getParsed(customColorExpression3)[0];
      |                       ^ Eager Test
  872 |
  873 |         expect(parse1.color).toEqual(""#fA6"");
  874 |         expect(parse2.color).toEqual(""#fA6fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 969, 'column': 26, 'index': 30787}","  967 |
  968 |     it(""should produce the correct direction delimiter"", function() {
> 969 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Eager Test
  970 |         const rightParse = getParsed(bigDelim)[0];
  971 |
  972 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 970, 'column': 27, 'index': 30841}","  968 |     it(""should produce the correct direction delimiter"", function() {
  969 |         const leftParse = getParsed(normalDelim)[0];
> 970 |         const rightParse = getParsed(bigDelim)[0];
      |                           ^ Eager Test
  971 |
  972 |         expect(leftParse.mclass).toEqual(""mopen"");
  973 |         expect(rightParse.mclass).toEqual(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 977, 'column': 27, 'index': 31069}","  975 |
  976 |     it(""should parse the correct size delimiter"", function() {
> 977 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Eager Test
  978 |         const bigParse = getParsed(bigDelim)[0];
  979 |
  980 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 978, 'column': 25, 'index': 31121}","  976 |     it(""should parse the correct size delimiter"", function() {
  977 |         const smallParse = getParsed(normalDelim)[0];
> 978 |         const bigParse = getParsed(bigDelim)[0];
      |                         ^ Eager Test
  979 |
  980 |         expect(smallParse.size).toEqual(1);
  981 |         expect(bigParse.size).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1058, 'column': 24, 'index': 33487}","  1056 |
  1057 |     it(""should list the correct units"", function() {
> 1058 |         const emParse = getParsed(emRule)[0];
       |                        ^ Eager Test
  1059 |         const exParse = getParsed(exRule)[0];
  1060 |
  1061 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1059, 'column': 24, 'index': 33533}","  1057 |     it(""should list the correct units"", function() {
  1058 |         const emParse = getParsed(emRule)[0];
> 1059 |         const exParse = getParsed(exRule)[0];
       |                        ^ Eager Test
  1060 |
  1061 |         expect(emParse.width.unit).toEqual(""em"");
  1062 |         expect(emParse.height.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1096, 'column': 24, 'index': 34703}","  1094 |
  1095 |     it(""should list the correct units"", function() {
> 1096 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1097 |         const exParse = getParsed(exKern)[0];
  1098 |         const muParse = getParsed(muKern)[0];
  1099 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1097, 'column': 24, 'index': 34749}","  1095 |     it(""should list the correct units"", function() {
  1096 |         const emParse = getParsed(emKern)[0];
> 1097 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1098 |         const muParse = getParsed(muKern)[0];
  1099 |         const abParse = getParsed(abKern)[1];
  1100 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1098, 'column': 24, 'index': 34795}","  1096 |         const emParse = getParsed(emKern)[0];
  1097 |         const exParse = getParsed(exKern)[0];
> 1098 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1099 |         const abParse = getParsed(abKern)[1];
  1100 |
  1101 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1099, 'column': 24, 'index': 34841}","  1097 |         const exParse = getParsed(exKern)[0];
  1098 |         const muParse = getParsed(muKern)[0];
> 1099 |         const abParse = getParsed(abKern)[1];
       |                        ^ Eager Test
  1100 |
  1101 |         expect(emParse.dimension.unit).toEqual(""em"");
  1102 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1134, 'column': 24, 'index': 35986}","  1132 |
  1133 |     it(""should list the correct units"", function() {
> 1134 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1135 |         const exParse = getParsed(exKern)[0];
  1136 |         const muParse = getParsed(muKern)[0];
  1137 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1135, 'column': 24, 'index': 36032}","  1133 |     it(""should list the correct units"", function() {
  1134 |         const emParse = getParsed(emKern)[0];
> 1135 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1136 |         const muParse = getParsed(muKern)[0];
  1137 |         const abParse1 = getParsed(abKern1)[1];
  1138 |         const abParse2 = getParsed(abKern2)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1136, 'column': 24, 'index': 36078}","  1134 |         const emParse = getParsed(emKern)[0];
  1135 |         const exParse = getParsed(exKern)[0];
> 1136 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1137 |         const abParse1 = getParsed(abKern1)[1];
  1138 |         const abParse2 = getParsed(abKern2)[1];
  1139 |         const abParse3 = getParsed(abKern3)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1137, 'column': 25, 'index': 36125}","  1135 |         const exParse = getParsed(exKern)[0];
  1136 |         const muParse = getParsed(muKern)[0];
> 1137 |         const abParse1 = getParsed(abKern1)[1];
       |                         ^ Eager Test
  1138 |         const abParse2 = getParsed(abKern2)[1];
  1139 |         const abParse3 = getParsed(abKern3)[1];
  1140 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1138, 'column': 25, 'index': 36173}","  1136 |         const muParse = getParsed(muKern)[0];
  1137 |         const abParse1 = getParsed(abKern1)[1];
> 1138 |         const abParse2 = getParsed(abKern2)[1];
       |                         ^ Eager Test
  1139 |         const abParse3 = getParsed(abKern3)[1];
  1140 |
  1141 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1139, 'column': 25, 'index': 36221}","  1137 |         const abParse1 = getParsed(abKern1)[1];
  1138 |         const abParse2 = getParsed(abKern2)[1];
> 1139 |         const abParse3 = getParsed(abKern3)[1];
       |                         ^ Eager Test
  1140 |
  1141 |         expect(emParse.dimension.unit).toEqual(""em"");
  1142 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1150, 'column': 25, 'index': 36676}","  1148 |
  1149 |     it(""should parse elements on either side of a kern"", function() {
> 1150 |         const abParse1 = getParsed(abKern1);
       |                         ^ Eager Test
  1151 |         const abParse2 = getParsed(abKern2);
  1152 |         const abParse3 = getParsed(abKern3);
  1153 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1151, 'column': 25, 'index': 36721}","  1149 |     it(""should parse elements on either side of a kern"", function() {
  1150 |         const abParse1 = getParsed(abKern1);
> 1151 |         const abParse2 = getParsed(abKern2);
       |                         ^ Eager Test
  1152 |         const abParse3 = getParsed(abKern3);
  1153 |
  1154 |         expect(abParse1).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1152, 'column': 25, 'index': 36766}","  1150 |         const abParse1 = getParsed(abKern1);
  1151 |         const abParse2 = getParsed(abKern2);
> 1152 |         const abParse3 = getParsed(abKern3);
       |                         ^ Eager Test
  1153 |
  1154 |         expect(abParse1).toHaveLength(3);
  1155 |         expect(abParse1[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2075, 'column': 19, 'index': 73857}","  2073 |     it(""should render a combination of font and color changes"", function() {
  2074 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2075 |         let tree = getParsed(tex);
       |                   ^ Eager Test
  2076 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2077 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2078 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2084, 'column': 15, 'index': 74226}","  2082 |         // reverse the order of the commands
  2083 |         tex = r`\mathbb{\textcolor{blue}{R}}`;
> 2084 |         tree = getParsed(tex);
       |               ^ Eager Test
  2085 |         markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2086 |         node = ""<mstyle mathcolor=\""blue\"">"" +
  2087 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2992, 'column': 24, 'index': 108081}","  2990 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2991 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2992 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  2993 |         expect(parsed1.href).toBe(url);
  2994 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2995 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2994, 'column': 24, 'index': 108201}","  2992 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  2993 |         expect(parsed1.href).toBe(url);
> 2994 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  2995 |         expect(parsed2.href).toBe(url);
  2996 |     });
  2997 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3000, 'column': 24, 'index': 108431}","  2998 |     it(""should allow balanced braces in url"", function() {
  2999 |         const url = ""http://example.org/{{}t{oo}}"";
> 3000 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3001 |         expect(parsed1.href).toBe(url);
  3002 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3003 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3002, 'column': 24, 'index': 108551}","  3000 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  3001 |         expect(parsed1.href).toBe(url);
> 3002 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3003 |         expect(parsed2.href).toBe(url);
  3004 |     });
  3005 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3016, 'column': 24, 'index': 109205}","  3014 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3015 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3016 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3017 |         expect(parsed1.href).toBe(url);
  3018 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3019 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3018, 'column': 24, 'index': 109327}","  3016 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
  3017 |         expect(parsed1.href).toBe(url);
> 3018 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
       |                        ^ Eager Test
  3019 |         expect(parsed2.href).toBe(url);
  3020 |     });
  3021 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2173, 'column': 12, 'index': 77668}","  2171 |     it(""should throw Error when HTML attribute name is invalid"", function() {
  2172 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
> 2173 |             try {
       |            ^ Exception Handling
  2174 |                 katex.renderToString(
  2175 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);
  2176 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2738, 'column': 8, 'index': 97299}","  2736 | describe(""A parser error"", function() {
  2737 |     it(""should report the position of an error"", function() {
> 2738 |         try {
       |        ^ Exception Handling
  2739 |             parseTree(r`\sqrt}`, new Settings());
  2740 |         } catch (e) {
  2741 |             expect(e.position).toEqual(5);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3157, 'column': 8, 'index': 114764}","  3155 | describe(""ParseError properties"", function() {
  3156 |     it(""should contain affected position and length information"", function() {
> 3157 |         try {
       |        ^ Exception Handling
  3158 |             katex.renderToString(""1 + \\fraq{}{}"");
  3159 |
  3160 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3172, 'column': 8, 'index': 115427}","  3170 |
  3171 |     it(""should contain position and length information at end of input"", function() {
> 3172 |         try {
       |        ^ Exception Handling
  3173 |             katex.renderToString(""\\frac{}"");
  3174 |
  3175 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3187, 'column': 8, 'index': 116123}","  3185 |
  3186 |     it(""should contain no position and length information if unavailable"", function() {
> 3187 |         try {
       |        ^ Exception Handling
  3188 |             katex.renderToString(""\\verb|hello\nworld|"");
  3189 |
  3190 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 44, 'column': 22, 'index': 1225}","  42 |
  43 |     it(""should build a list of ords"", function() {
> 44 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  45 |
  46 |         for (let i = 0; i < parse.length; i++) {
  47 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 53, 'column': 22, 'index': 1483}","  51 |
  52 |     it(""should parse the right number of ords"", function() {
> 53 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  54 |
  55 |         expect(parse).toHaveLength(expression.length);
  56 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 67, 'column': 22, 'index': 1816}","  65 |
  66 |     it(""should build a list of bins"", function() {
> 67 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  68 |
  69 |         for (let i = 0; i < parse.length; i++) {
  70 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 87, 'column': 22, 'index': 2411}","  85 |
  86 |     it(""should build a list of rels"", function() {
> 87 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  88 |
  89 |         for (let i = 0; i < parse.length; i++) {
  90 |             let group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 113, 'column': 32, 'index': 3312}","  111 |     it(""should return one group, not a fragment"", function() {
  112 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
> 113 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
      |                                ^ Lazy Test
  114 |         expect(mml.children.length).toEqual(1);
  115 |     });
  116 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 126, 'column': 22, 'index': 3666}","  124 |
  125 |     it(""should build a list of puncts"", function() {
> 126 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  127 |
  128 |         for (let i = 0; i < parse.length; i++) {
  129 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 144, 'column': 22, 'index': 4127}","  142 |
  143 |     it(""should build a list of opens"", function() {
> 144 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  145 |
  146 |         for (let i = 0; i < parse.length; i++) {
  147 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 162, 'column': 22, 'index': 4590}","  160 |
  161 |     it(""should build a list of closes"", function() {
> 162 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  163 |
  164 |         for (let i = 0; i < parse.length; i++) {
  165 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 493, 'column': 22, 'index': 14415}","  491 |
  492 |     it(""should produce a frac"", function() {
> 493 |         const parse = getParsed(expression)[0];
      |                      ^ Lazy Test
  494 |
  495 |         expect(parse.type).toEqual(""genfrac"");
  496 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 509, 'column': 27, 'index': 14973}","  507 |
  508 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 509 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Lazy Test
  510 |
  511 |         expect(dfracParse.type).toEqual(""genfrac"");
  512 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 572, 'column': 16, 'index': 17053}","  570 |         let parse;
  571 |
> 572 |         parse = getParsed(simpleOver)[0];
      |                ^ Lazy Test
  573 |
  574 |         expect(parse.type).toEqual(""genfrac"");
  575 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 602, 'column': 22, 'index': 18162}","  600 |
  601 |     it(""should create a numerator from the atoms before \\over"", function() {
> 602 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  603 |
  604 |         const numer = parse.numer;
  605 |         expect(numer.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 609, 'column': 22, 'index': 18379}","  607 |
  608 |     it(""should create a denominator from the atoms after \\over"", function() {
> 609 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  610 |
  611 |         const denom = parse.denom;
  612 |         expect(denom.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 617, 'column': 22, 'index': 18614}","  615 |     it(""should handle empty numerators"", function() {
  616 |         const emptyNumerator = r`\over x`;
> 617 |         const parse = getParsed(emptyNumerator)[0];
      |                      ^ Lazy Test
  618 |         expect(parse.type).toEqual(""genfrac"");
  619 |         expect(parse.numer).toBeDefined();
  620 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 625, 'column': 22, 'index': 18909}","  623 |     it(""should handle empty denominators"", function() {
  624 |         const emptyDenominator = r`1 \over`;
> 625 |         const parse = getParsed(emptyDenominator)[0];
      |                      ^ Lazy Test
  626 |         expect(parse.type).toEqual(""genfrac"");
  627 |         expect(parse.numer).toBeDefined();
  628 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 633, 'column': 22, 'index': 19234}","  631 |     it(""should handle \\displaystyle correctly"", function() {
  632 |         const displaystyleExpression = r`\displaystyle 1 \over 2`;
> 633 |         const parse = getParsed(displaystyleExpression)[0];
      |                      ^ Lazy Test
  634 |         expect(parse.type).toEqual(""genfrac"");
  635 |         expect(parse.numer.body[0].type).toEqual(""styling"");
  636 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 646, 'column': 22, 'index': 19786}","  644 |     it(""should handle nested factions"", function() {
  645 |         const nestedOverExpression = r`{1 \over 2} \over 3`;
> 646 |         const parse = getParsed(nestedOverExpression)[0];
      |                      ^ Lazy Test
  647 |         expect(parse.type).toEqual(""genfrac"");
  648 |         expect(parse.numer.body[0].type).toEqual(""genfrac"");
  649 |         expect(parse.numer.body[0].numer.body[0].text).toEqual(""1"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 695, 'column': 22, 'index': 21496}","  693 |
  694 |     it(""should produce a sizing node"", function() {
> 695 |         const parse = getParsed(sizeExpression)[0];
      |                      ^ Lazy Test
  696 |
  697 |         expect(parse.type).toEqual(""sizing"");
  698 |         expect(parse.size).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 719, 'column': 22, 'index': 22305}","  717 |
  718 |     it(""should produce a text"", function() {
> 719 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  720 |
  721 |         expect(parse.type).toEqual(""text"");
  722 |         expect(parse.body).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 726, 'column': 22, 'index': 22520}","  724 |
  725 |     it(""should produce textords instead of mathords"", function() {
> 726 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  727 |         const group = parse.body;
  728 |
  729 |         expect(group[0].type).toEqual(""textord"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 749, 'column': 22, 'index': 23183}","  747 |
  748 |     it(""should contract spaces"", function() {
> 749 |         const parse = getParsed(spaceTextExpression)[0];
      |                      ^ Lazy Test
  750 |         const group = parse.body;
  751 |
  752 |         expect(group.length).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 768, 'column': 22, 'index': 23859}","  766 |
  767 |     it(""should ignore a space before the text group"", function() {
> 768 |         const parse = getParsed(leadingSpaceTextExpression)[0];
      |                      ^ Lazy Test
  769 |         // [m, o, o]
  770 |         expect(parse.body).toHaveLength(3);
  771 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 855, 'column': 22, 'index': 27246}","  853 |
  854 |     it(""should build a color node"", function() {
> 855 |         const parse = getParsed(colorExpression)[0];
      |                      ^ Lazy Test
  856 |
  857 |         expect(parse.type).toEqual(""color"");
  858 |         expect(parse.color).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 869, 'column': 23, 'index': 27715}","  867 |
  868 |     it(""should correctly extract the custom color"", function() {
> 869 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Lazy Test
  870 |         const parse2 = getParsed(customColorExpression2)[0];
  871 |         const parse3 = getParsed(customColorExpression3)[0];
  872 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 928, 'column': 22, 'index': 29641}","  926 |
  927 |     it(""should produce spacing in math mode"", function() {
> 928 |         const parse = getParsed(mathTie);
      |                      ^ Lazy Test
  929 |
  930 |         expect(parse[1].type).toEqual(""spacing"");
  931 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 934, 'column': 21, 'index': 29801}","  932 |
  933 |     it(""should produce spacing in text mode"", function() {
> 934 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  935 |         const parse = text.body;
  936 |
  937 |         expect(parse[1].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 941, 'column': 21, 'index': 30006}","  939 |
  940 |     it(""should not contract with spaces in text mode"", function() {
> 941 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  942 |         const parse = text.body;
  943 |
  944 |         expect(parse[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 963, 'column': 22, 'index': 30603}","  961 |
  962 |     it(""should produce a delimsizing"", function() {
> 963 |         const parse = getParsed(normalDelim)[0];
      |                      ^ Lazy Test
  964 |
  965 |         expect(parse.type).toEqual(""delimsizing"");
  966 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 969, 'column': 26, 'index': 30787}","  967 |
  968 |     it(""should produce the correct direction delimiter"", function() {
> 969 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Lazy Test
  970 |         const rightParse = getParsed(bigDelim)[0];
  971 |
  972 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 977, 'column': 27, 'index': 31069}","  975 |
  976 |     it(""should parse the correct size delimiter"", function() {
> 977 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Lazy Test
  978 |         const bigParse = getParsed(bigDelim)[0];
  979 |
  980 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 993, 'column': 22, 'index': 31484}","  991 |
  992 |     it(""should produce an overline"", function() {
> 993 |         const parse = getParsed(overline)[0];
      |                      ^ Lazy Test
  994 |
  995 |         expect(parse.type).toEqual(""overline"");
  996 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1052, 'column': 22, 'index': 33334}","  1050 |
  1051 |     it(""should produce a rule"", function() {
> 1052 |         const parse = getParsed(emRule)[0];
       |                      ^ Lazy Test
  1053 |
  1054 |         expect(parse.type).toEqual(""rule"");
  1055 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1058, 'column': 24, 'index': 33487}","  1056 |
  1057 |     it(""should list the correct units"", function() {
> 1058 |         const emParse = getParsed(emRule)[0];
       |                        ^ Lazy Test
  1059 |         const exParse = getParsed(exRule)[0];
  1060 |
  1061 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1069, 'column': 32, 'index': 33857}","  1067 |
  1068 |     it(""should parse the number correctly"", function() {
> 1069 |         const hardNumberParse = getParsed(hardNumberRule)[0];
       |                                ^ Lazy Test
  1070 |
  1071 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
  1072 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1096, 'column': 24, 'index': 34703}","  1094 |
  1095 |     it(""should list the correct units"", function() {
> 1096 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1097 |         const exParse = getParsed(exKern)[0];
  1098 |         const muParse = getParsed(muKern)[0];
  1099 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1134, 'column': 24, 'index': 35986}","  1132 |
  1133 |     it(""should list the correct units"", function() {
> 1134 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1135 |         const exParse = getParsed(exKern)[0];
  1136 |         const muParse = getParsed(muKern)[0];
  1137 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1150, 'column': 25, 'index': 36676}","  1148 |
  1149 |     it(""should parse elements on either side of a kern"", function() {
> 1150 |         const abParse1 = getParsed(abKern1);
       |                         ^ Lazy Test
  1151 |         const abParse2 = getParsed(abKern2);
  1152 |         const abParse3 = getParsed(abKern3);
  1153 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1181, 'column': 24, 'index': 37751}","  1179 |
  1180 |     it(""should handle whitespace"", function() {
> 1181 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
       |                        ^ Lazy Test
  1182 |
  1183 |         expect(abParse).toHaveLength(3);
  1184 |         expect(abParse[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1199, 'column': 22, 'index': 38318}","  1197 |
  1198 |     it(""should produce a leftright"", function() {
> 1199 |         const parse = getParsed(normalLeftRight)[0];
       |                      ^ Lazy Test
  1200 |
  1201 |         expect(parse.type).toEqual(""leftright"");
  1202 |         expect(parse.left).toEqual(""("");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1376, 'column': 22, 'index': 44683}","  1374 |
  1375 |     it(""should produce sqrts"", function() {
> 1376 |         const parse = getParsed(sqrt)[0];
       |                      ^ Lazy Test
  1377 |
  1378 |         expect(parse.type).toEqual(""sqrt"");
  1379 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1575, 'column': 22, 'index': 51103}","  1573 |     it(""should only change the style within its group"", function() {
  1574 |         const text = r`a b { c d \displaystyle e f } g h`;
> 1575 |         const parse = getParsed(text);
       |                      ^ Lazy Test
  1576 |
  1577 |         const displayNode = parse[2].body[2];
  1578 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2075, 'column': 19, 'index': 73857}","  2073 |     it(""should render a combination of font and color changes"", function() {
  2074 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2075 |         let tree = getParsed(tex);
       |                   ^ Lazy Test
  2076 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2077 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2078 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2094, 'column': 21, 'index': 74598}","  2092 |     it(""should render text as <mtext>"", function() {
  2093 |         const tex = r`\text{for }`;
> 2094 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2095 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2096 |         expect(markup).toContain(""<mtext>for\u00a0</mtext>"");
  2097 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2101, 'column': 21, 'index': 74910}","  2099 |     it(""should render math within text as side-by-side children"", function() {
  2100 |         const tex = r`\text{graph: $y = mx + b$}`;
> 2101 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2102 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2103 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
  2104 |         expect(markup).toContain(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2116, 'column': 15, 'index': 75570}","  2114 |
  2115 |     it(""should produce mords"", function() {
> 2116 |         expect(getBuilt(img, trustSettings)[0].classes).toContain(""mord"");
       |               ^ Lazy Test
  2117 |     });
  2118 |
  2119 |     it(""should not render without trust setting"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2120, 'column': 22, 'index': 75724}","  2118 |
  2119 |     it(""should not render without trust setting"", function() {
> 2120 |         const built = getBuilt(img);
       |                      ^ Lazy Test
  2121 |         expect(built).toMatchSnapshot();
  2122 |     });
  2123 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2125, 'column': 22, 'index': 75867}","  2123 |
  2124 |     it(""should render with trust setting"", function() {
> 2125 |         const built = getBuilt(img, trustSettings);
       |                      ^ Lazy Test
  2126 |         expect(built).toMatchSnapshot();
  2127 |     });
  2128 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2151, 'column': 22, 'index': 76813}","  2149 |
  2150 |     it(""should set HTML attributes"", function() {
> 2151 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2152 |         expect(built[0].attributes.id).toMatch(""bar"");
  2153 |         expect(built[1].classes).toContain(""foo"");
  2154 |         expect(built[2].attributes.style).toMatch(""color: red"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2162, 'column': 22, 'index': 77220}","  2160 |
  2161 |     it(""should not affect spacing"", function() {
> 2162 |         const built = getBuilt(""\\htmlId{a}{x+}y"", trustNonStrictSettings);
       |                      ^ Lazy Test
  2163 |         expect(built).toMatchSnapshot();
  2164 |     });
  2165 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2167, 'column': 22, 'index': 77413}","  2165 |
  2166 |     it(""should render with trust and strict setting"", function() {
> 2167 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2168 |         expect(built).toMatchSnapshot();
  2169 |     });
  2170 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2342, 'column': 21, 'index': 83915}","  2340 |     it(""should properly render stretchy accents"", function() {
  2341 |         const tex = `\\widetilde{ABCD}`;
> 2342 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2343 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2344 |         expect(markup).toContain('<mo stretchy=""true"">~</mo>');
  2345 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2992, 'column': 24, 'index': 108081}","  2990 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2991 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2992 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  2993 |         expect(parsed1.href).toBe(url);
  2994 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2995 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3000, 'column': 24, 'index': 108431}","  2998 |     it(""should allow balanced braces in url"", function() {
  2999 |         const url = ""http://example.org/{{}t{oo}}"";
> 3000 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3001 |         expect(parsed1.href).toBe(url);
  3002 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3003 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3016, 'column': 24, 'index': 109205}","  3014 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3015 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3016 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3017 |         expect(parsed1.href).toBe(url);
  3018 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3019 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3032, 'column': 22, 'index': 109870}","  3030 |
  3031 |     it(""should not affect spacing around"", function() {
> 3032 |         const built = getBuilt(""a\\href{http://example.com/}{+b}"", trustSettings);
       |                      ^ Lazy Test
  3033 |         expect(built).toMatchSnapshot();
  3034 |     });
  3035 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3042, 'column': 23, 'index': 110244}","  3040 |
  3041 |     it(""should allow explicitly allowed protocols"", () => {
> 3042 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3043 |             ""\\href{ftp://x}{foo}"",
  3044 |             new Settings({trust: (context) => context.protocol === ""ftp""}),
  3045 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3050, 'column': 23, 'index': 110523}","  3048 |
  3049 |     it(""should allow all protocols when trust option is true"", () => {
> 3050 |         const parsed = getParsed(""\\href{ftp://x}{foo}"", trustSettings);
       |                       ^ Lazy Test
  3051 |         expect(parsed).toMatchSnapshot();
  3052 |     });
  3053 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3055, 'column': 23, 'index': 110714}","  3053 |
  3054 |     it(""should not allow explicitly disallowed protocols"", () => {
> 3055 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3056 |             ""\\href{javascript:alert('x')}{foo}"",
  3057 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3058 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3063, 'column': 23, 'index': 111019}","  3061 |
  3062 |     it(""should not allow explicitly uppercased disallowed protocols"", () => {
> 3063 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3064 |             ""\\href{JavaScript:alert('x')}{foo}"",
  3065 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3066 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3139, 'column': 28, 'index': 114100}","  3137 |
  3138 |     it(""should produce color nodes with a color value given by errorColor"", function() {
> 3139 |         const parsedInput = getParsed(r`\error`, noThrowSettings);
       |                            ^ Lazy Test
  3140 |         expect(parsedInput[0].type).toBe(""color"");
  3141 |         expect(parsedInput[0].color).toBe(errorColor);
  3142 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3145, 'column': 22, 'index': 114359}","  3143 |
  3144 |     it(""should build katex-error span for other type of KaTeX error"", function() {
> 3145 |         const built = getBuilt(`2^2^2`, noThrowSettings);
       |                      ^ Lazy Test
  3146 |         expect(built).toMatchSnapshot();
  3147 |     });
  3148 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3480, 'column': 27, 'index': 127117}","  3478 |         const parsedBare = getParsed`~`;
  3479 |         expect(parsedBare[0].type).toEqual(""spacing"");
> 3480 |         const parsedChar = getParsed(""\\char`\\~"");
       |                           ^ Lazy Test
  3481 |         expect(parsedChar[0].type).toEqual(""textord"");
  3482 |     });
  3483 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4052, 'column': 22, 'index': 151078}","  4050 |
  4051 |     it(""should clamp size when set"", function() {
> 4052 |         const built = getBuilt(rule, new Settings({maxSize: 5}))[0];
       |                      ^ Lazy Test
  4053 |         expect(built.style.borderRightWidth).toEqual(""5em"");
  4054 |         expect(built.style.borderTopWidth).toEqual(""5em"");
  4055 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4058, 'column': 22, 'index': 151334}","  4056 |
  4057 |     it(""should not clamp size when not set"", function() {
> 4058 |         const built = getBuilt(rule)[0];
       |                      ^ Lazy Test
  4059 |         expect(built.style.borderRightWidth).toEqual(""999em"");
  4060 |         expect(built.style.borderTopWidth).toEqual(""999em"");
  4061 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4064, 'column': 22, 'index': 151592}","  4062 |
  4063 |     it(""should make zero-width rules if a negative maxSize is passed"", function() {
> 4064 |         const built = getBuilt(rule, new Settings({maxSize: -5}))[0];
       |                      ^ Lazy Test
  4065 |         expect(built.style.borderRightWidth).toEqual(""0em"");
  4066 |         expect(built.style.borderTopWidth).toEqual(""0em"");
  4067 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 92, 'column': 48, 'index': 2613}","  90 |             let group = parse[i];
  91 |             if (group.type === ""htmlmathml"") {
> 92 |                 expect(group.html).toHaveLength(1);
     |                                                ^ Magic Number
  93 |                 group = group.html[0];
  94 |             }
  95 |             if (group.type === ""mclass"") {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 114, 'column': 44, 'index': 3404}","  112 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
  113 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
> 114 |         expect(mml.children.length).toEqual(1);
      |                                            ^ Magic Number
  115 |     });
  116 | });
  117 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 346, 'column': 35, 'index': 10074}","  344 |         const parse = getParsed`{xy}`;
  345 |
> 346 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  347 |
  348 |         const ord = parse[0];
  349 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 368, 'column': 35, 'index': 10676}","  366 |         const parse = getParsed`\begingroup xy \endgroup`;
  367 |
> 368 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  369 |
  370 |         const ord = parse[0];
  371 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 391, 'column': 35, 'index': 11303}","  389 |         const parse = getParsed`\Large abc`;
  390 |
> 391 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  392 |
  393 |         const sizing = parse[0];
  394 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 403, 'column': 35, 'index': 11626}","  401 |         const parse = getParsed`a \Large abc`;
  402 |
> 403 |         expect(parse).toHaveLength(2);
      |                                   ^ Magic Number
  404 |
  405 |         const sizing = parse[1];
  406 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 408, 'column': 41, 'index': 11753}","  406 |
  407 |         expect(sizing.type).toEqual(""sizing"");
> 408 |         expect(sizing.body).toHaveLength(3);
      |                                         ^ Magic Number
  409 |     });
  410 |
  411 |     it(""should stop at the ends of groups"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 418, 'column': 41, 'index': 12036}","  416 |
  417 |         expect(sizing.type).toEqual(""sizing"");
> 418 |         expect(sizing.body).toHaveLength(1);
      |                                         ^ Magic Number
  419 |     });
  420 |
  421 |     describe(""within optional groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 605, 'column': 40, 'index': 18265}","  603 |
  604 |         const numer = parse.numer;
> 605 |         expect(numer.body).toHaveLength(4);
      |                                        ^ Magic Number
  606 |     });
  607 |
  608 |     it(""should create a denominator from the atoms after \\over"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 612, 'column': 40, 'index': 18482}","  610 |
  611 |         const denom = parse.denom;
> 612 |         expect(denom.body).toHaveLength(4);
      |                                        ^ Magic Number
  613 |     });
  614 |
  615 |     it(""should handle empty numerators"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 752, 'column': 37, 'index': 23290}","  750 |         const group = parse.body;
  751 |
> 752 |         expect(group.length).toEqual(4);
      |                                     ^ Magic Number
  753 |         expect(group[0].type).toEqual(""spacing"");
  754 |         expect(group[1].type).toEqual(""textord"");
  755 |         expect(group[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 770, 'column': 40, 'index': 23962}","  768 |         const parse = getParsed(leadingSpaceTextExpression)[0];
  769 |         // [m, o, o]
> 770 |         expect(parse.body).toHaveLength(3);
      |                                        ^ Magic Number
  771 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");
  772 |     });
  773 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 980, 'column': 40, 'index': 31186}","  978 |         const bigParse = getParsed(bigDelim)[0];
  979 |
> 980 |         expect(smallParse.size).toEqual(1);
      |                                        ^ Magic Number
  981 |         expect(bigParse.size).toEqual(4);
  982 |     });
  983 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 981, 'column': 38, 'index': 31228}","  979 |
  980 |         expect(smallParse.size).toEqual(1);
> 981 |         expect(bigParse.size).toEqual(4);
      |                                      ^ Magic Number
  982 |     });
  983 | });
  984 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1071, 'column': 57, 'index': 33945}","  1069 |         const hardNumberParse = getParsed(hardNumberRule)[0];
  1070 |
> 1071 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
       |                                                         ^ Magic Number
  1072 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
  1073 |     });
  1074 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1072, 'column': 58, 'index': 34010}","  1070 |
  1071 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
> 1072 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
       |                                                          ^ Magic Number
  1073 |     });
  1074 |
  1075 |     it(""should parse negative sizes"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1119, 'column': 51, 'index': 35555}","  1117 |     it(""should parse positive sizes"", function() {
  1118 |         const parse = getParsed`\kern{+1em}`[0];
> 1119 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1120 |     });
  1121 | });
  1122 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1154, 'column': 38, 'index': 36825}","  1152 |         const abParse3 = getParsed(abKern3);
  1153 |
> 1154 |         expect(abParse1).toHaveLength(3);
       |                                      ^ Magic Number
  1155 |         expect(abParse1[0].text).toEqual(""a"");
  1156 |         expect(abParse1[2].text).toEqual(""b"");
  1157 |         expect(abParse2).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1157, 'column': 38, 'index': 36961}","  1155 |         expect(abParse1[0].text).toEqual(""a"");
  1156 |         expect(abParse1[2].text).toEqual(""b"");
> 1157 |         expect(abParse2).toHaveLength(3);
       |                                      ^ Magic Number
  1158 |         expect(abParse2[0].text).toEqual(""a"");
  1159 |         expect(abParse2[2].text).toEqual(""b"");
  1160 |         expect(abParse3).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1160, 'column': 38, 'index': 37097}","  1158 |         expect(abParse2[0].text).toEqual(""a"");
  1159 |         expect(abParse2[2].text).toEqual(""b"");
> 1160 |         expect(abParse3).toHaveLength(3);
       |                                      ^ Magic Number
  1161 |         expect(abParse3[0].text).toEqual(""a"");
  1162 |         expect(abParse3[2].text).toEqual(""b"");
  1163 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1177, 'column': 51, 'index': 37666}","  1175 |     it(""should parse positive sizes"", function() {
  1176 |         const parse = getParsed`\kern+1em`[0];
> 1177 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1178 |     });
  1179 |
  1180 |     it(""should handle whitespace"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1183, 'column': 37, 'index': 37828}","  1181 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
  1182 |
> 1183 |         expect(abParse).toHaveLength(3);
       |                                     ^ Magic Number
  1184 |         expect(abParse[0].text).toEqual(""a"");
  1185 |         expect(abParse[1].dimension.unit).toEqual(""mu"");
  1186 |         expect(abParse[2].text).toEqual(""b"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1336, 'column': 37, 'index': 43124}","  1334 |     it(""should eat a final newline"", function() {
  1335 |         const m3 = getParsed`\begin{matrix}a&b\\ c&d \\ \end{matrix}`[0];
> 1336 |         expect(m3.body).toHaveLength(2);
       |                                     ^ Magic Number
  1337 |     });
  1338 |
  1339 |     it(""should grab \\arraystretch"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1583, 'column': 41, 'index': 51310}","  1581 |         const displayBody = displayNode.body;
  1582 |
> 1583 |         expect(displayBody).toHaveLength(2);
       |                                         ^ Magic Number
  1584 |         expect(displayBody[0].text).toEqual(""e"");
  1585 |     });
  1586 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1637, 'column': 36, 'index': 53345}","  1635 |
  1636 |         const bbBody = nestedParse.body.body;
> 1637 |         expect(bbBody).toHaveLength(3);
       |                                    ^ Magic Number
  1638 |         expect(bbBody[0].type).toEqual(""mathord"");
  1639 |         expect(bbBody[2].type).toEqual(""font"");
  1640 |         expect(bbBody[2].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1649, 'column': 34, 'index': 53873}","  1647 |         expect(colorMathbbParse.color).toEqual(""blue"");
  1648 |         const body = colorMathbbParse.body;
> 1649 |         expect(body).toHaveLength(1);
       |                                  ^ Magic Number
  1650 |         expect(body[0].type).toEqual(""font"");
  1651 |         expect(body[0].font).toEqual(""mathbb"");
  1652 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1662, 'column': 42, 'index': 54337}","  1660 |         expect(bf.type).toEqual(""font"");
  1661 |         expect(bf.font).toEqual(""mathbf"");
> 1662 |         expect(bf.body.body).toHaveLength(3);
       |                                          ^ Magic Number
  1663 |         expect(bf.body.body[0].text).toEqual(""a"");
  1664 |         expect(bf.body.body[1].type).toEqual(""font"");
  1665 |         expect(bf.body.body[1].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2235, 'column': 45, 'index': 80198}","  2233 |         // Just a few quick sanity checks here...
  2234 |         const markup = katex.renderToString(r`\sigma^2`);
> 2235 |         expect(markup.indexOf(""<span"")).toBe(0);
       |                                             ^ Magic Number
  2236 |         expect(markup).toContain(""\u03c3"");  // sigma
  2237 |         expect(markup).toContain(""margin-right"");
  2238 |         expect(markup).not.toContain(""marginRight"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2741, 'column': 39, 'index': 97416}","  2739 |             parseTree(r`\sqrt}`, new Settings());
  2740 |         } catch (e) {
> 2741 |             expect(e.position).toEqual(5);
       |                                       ^ Magic Number
  2742 |         }
  2743 |     });
  2744 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2875, 'column': 37, 'index': 101711}","  2873 |     it(""should not eat the last row when its first cell is empty"", function() {
  2874 |         const ae = getParsed`\begin{aligned}&E_1 & (1)\\&E_2 & (2)\\&E_3 & (3)\end{aligned}`[0];
> 2875 |         expect(ae.body).toHaveLength(3);
       |                                     ^ Magic Number
  2876 |     });
  2877 | });
  2878 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3166, 'column': 40, 'index': 115268}","  3164 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");
  3165 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
> 3166 |             expect(error.position).toBe(4);
       |                                        ^ Magic Number
  3167 |             expect(error.length).toBe(5);
  3168 |         }
  3169 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3167, 'column': 38, 'index': 115310}","  3165 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
  3166 |             expect(error.position).toBe(4);
> 3167 |             expect(error.length).toBe(5);
       |                                      ^ Magic Number
  3168 |         }
  3169 |     });
  3170 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3181, 'column': 40, 'index': 115962}","  3179 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");
  3180 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
> 3181 |             expect(error.position).toBe(7);
       |                                        ^ Magic Number
  3182 |             expect(error.length).toBe(0);
  3183 |         }
  3184 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3182, 'column': 38, 'index': 116004}","  3180 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
  3181 |             expect(error.position).toBe(7);
> 3182 |             expect(error.length).toBe(0);
       |                                      ^ Magic Number
  3183 |         }
  3184 |     });
  3185 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 760}","  758 |
  759 |     it(""should handle backslash followed by newline"", () => {
> 760 |         expect(""\\text{\\ \t\r \n \t\r  }"").toParseLike`\text{\ }`;
      |        ^ Redundant Assertion
  761 |     });
  762 |
  763 |     it(""should accept math mode tokens after its argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1731}","  1729 | describe(""A comment parser"", function() {
  1730 |     it(""should parse comments at the end of a line"", () => {
> 1731 |         expect(""a^2 + b^2 = c^2 % Pythagoras' Theorem\n"").toParse();
       |        ^ Redundant Assertion
  1732 |     });
  1733 |
  1734 |     it(""should parse comments at the start of a line"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1735}","  1733 |
  1734 |     it(""should parse comments at the start of a line"", () => {
> 1735 |         expect(""% comment\n"").toParse();
       |        ^ Redundant Assertion
  1736 |     });
  1737 |
  1738 |     it(""should parse multiple lines of comments in a row"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1739}","  1737 |
  1738 |     it(""should parse multiple lines of comments in a row"", () => {
> 1739 |         expect(""% comment 1\n% comment 2\n"").toParse();
       |        ^ Redundant Assertion
  1740 |     });
  1741 |
  1742 |     it(""should parse comments between subscript and superscript"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1743}","  1741 |
  1742 |     it(""should parse comments between subscript and superscript"", () => {
> 1743 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
       |        ^ Redundant Assertion
  1744 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
  1745 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1746 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1744}","  1742 |     it(""should parse comments between subscript and superscript"", () => {
  1743 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
> 1744 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
       |        ^ Redundant Assertion
  1745 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1746 |     });
  1747 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1745}","  1743 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
  1744 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
> 1745 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
       |        ^ Redundant Assertion
  1746 |     });
  1747 |
  1748 |     it(""should parse comments in size and color groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1749}","  1747 |
  1748 |     it(""should parse comments in size and color groups"", () => {
> 1749 |         expect(""\\kern{1 %kern\nem}"").toParse();
       |        ^ Redundant Assertion
  1750 |         expect(""\\kern1 %kern\nem"").toParse();
  1751 |         expect(""\\color{#f00%red\n}"").toParse();
  1752 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1750}","  1748 |     it(""should parse comments in size and color groups"", () => {
  1749 |         expect(""\\kern{1 %kern\nem}"").toParse();
> 1750 |         expect(""\\kern1 %kern\nem"").toParse();
       |        ^ Redundant Assertion
  1751 |         expect(""\\color{#f00%red\n}"").toParse();
  1752 |     });
  1753 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1751}","  1749 |         expect(""\\kern{1 %kern\nem}"").toParse();
  1750 |         expect(""\\kern1 %kern\nem"").toParse();
> 1751 |         expect(""\\color{#f00%red\n}"").toParse();
       |        ^ Redundant Assertion
  1752 |     });
  1753 |
  1754 |     it(""should parse comments before an expression"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1755}","  1753 |
  1754 |     it(""should parse comments before an expression"", () => {
> 1755 |         expect(""%comment\n{2}"").toParseLike`{2}`;
       |        ^ Redundant Assertion
  1756 |     });
  1757 |
  1758 |     it(""should parse comments before and between \\hline"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1765}","  1763 |
  1764 |     it(""should parse comments in the macro definition"", () => {
> 1765 |         expect(""\\def\\foo{1 %}\n2}\n\\foo"").toParseLike`12`;
       |        ^ Redundant Assertion
  1766 |     });
  1767 |
  1768 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1769}","  1767 |
  1768 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {
> 1769 |         expect(""\\def\\foo{1\n2}\nx %\\foo\n"").toParseLike`x`;
       |        ^ Redundant Assertion
  1770 |     });
  1771 |
  1772 |     it(""should not parse a comment without newline in strict mode"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1778}","  1776 |
  1777 |     it(""should not produce or consume space"", () => {
> 1778 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
       |        ^ Redundant Assertion
  1779 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
  1780 |     });
  1781 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1779}","  1777 |     it(""should not produce or consume space"", () => {
  1778 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
> 1779 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
       |        ^ Redundant Assertion
  1780 |     });
  1781 |
  1782 |     it(""should not include comments in the output"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1783}","  1781 |
  1782 |     it(""should not include comments in the output"", () => {
> 1783 |         expect(""5 % comment\n"").toParseLike`5`;
       |        ^ Redundant Assertion
  1784 |     });
  1785 | });
  1786 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 16, 'line': 2178}","  2176 |
  2177 |                 // Render is expected to throw, so this should not be called.
> 2178 |                 expect(true).toBe(false);
       |                ^ Redundant Assertion
  2179 |             } catch (error) {
  2180 |                 expect(error).toBeInstanceOf(ParseError);
  2181 |                 const message =",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 2980}","  2978 |         expect`\href%end`.toParseLike(""\\href{%}end"", trustSettings);
  2979 |         expect`\url%end`.toParseLike(""\\url{%}end"", trustSettings);
> 2980 |         expect(""\\url%%end\n"").toParseLike(""\\url{%}"", trustSettings);
       |        ^ Redundant Assertion
  2981 |         expect`\url end`.toParseLike(""\\url{e}nd"", trustSettings);
  2982 |         expect`\url%end`.toParseLike(""\\url {%}end"", trustSettings);
  2983 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3023}","  3021 |
  3022 |     it(""should allow comments after URLs"", function() {
> 3023 |         expect(""\\url{http://example.com/}%comment\n"").toBuild();
       |        ^ Redundant Assertion
  3024 |     });
  3025 |
  3026 |     it(""should be marked up correctly"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3161}","  3159 |
  3160 |             // Render is expected to throw, so this should not be called.
> 3161 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3162 |         } catch (error) {
  3163 |             expect(error).toBeInstanceOf(ParseError);
  3164 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3176}","  3174 |
  3175 |             // Render is expected to throw, so this should not be called.
> 3176 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3177 |         } catch (error) {
  3178 |             expect(error).toBeInstanceOf(ParseError);
  3179 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3191}","  3189 |
  3190 |             // Render is expected to throw, so this should not be called.
> 3191 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3192 |         } catch (error) {
  3193 |             expect(error).toBeInstanceOf(ParseError);
  3194 |             expect(error.message).toBe(""KaTeX parse error: \\verb ended by end of line instead of matching delimiter"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3464}","  3462 |
  3463 |     it(""\\char produces literal characters"", () => {
> 3464 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
       |        ^ Redundant Assertion
  3465 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3466 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3467 |         expect(""\\char`\\%"").toParseLike`\char""25`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3465}","  3463 |     it(""\\char produces literal characters"", () => {
  3464 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3465 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Redundant Assertion
  3466 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3467 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3468 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3466}","  3464 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3465 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3466 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Redundant Assertion
  3467 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3468 |         expect`\char`.not.toParse();
  3469 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3467}","  3465 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3466 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3467 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Redundant Assertion
  3468 |         expect`\char`.not.toParse();
  3469 |         expect(""\\char`"").not.toParse();
  3470 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3469}","  3467 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3468 |         expect`\char`.not.toParse();
> 3469 |         expect(""\\char`"").not.toParse();
       |        ^ Redundant Assertion
  3470 |         expect`\char'`.not.toParse();
  3471 |         expect`\char""`.not.toParse();
  3472 |         expect`\char'a`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3933}","  3931 |
  3932 |     it(""should parse combining characters"", function() {
> 3933 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
       |        ^ Redundant Assertion
  3934 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
  3935 |     });
  3936 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3934}","  3932 |     it(""should parse combining characters"", function() {
  3933 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
> 3934 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
       |        ^ Redundant Assertion
  3935 |     });
  3936 |
  3937 |     it(""should parse multi-accented characters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3972}","  3970 |
  3971 |     it(""should parse symbols"", function() {
> 3972 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3973 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
  3974 |     });
  3975 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3973}","  3971 |     it(""should parse symbols"", function() {
  3972 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
> 3973 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3974 |     });
  3975 |
  3976 |     it(""should build Greek capital letters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3990}","  3988 |
  3989 |     it(""should build binary operators"", function() {
> 3990 |         expect(""±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞\u22C5\u2218\u2216\u2219"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3991 |     });
  3992 |
  3993 |     it(""should build common ords"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3994}","  3992 |
  3993 |     it(""should build common ords"", function() {
> 3994 |         expect(""§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3995 |     });
  3996 |
  3997 |     it(""should build delimiters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3998}","  3996 |
  3997 |     it(""should build delimiters"", function() {
> 3998 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
       |        ^ Redundant Assertion
  3999 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4000 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4001 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3999}","  3997 |     it(""should build delimiters"", function() {
  3998 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
> 3999 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
       |        ^ Redundant Assertion
  4000 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4001 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4002 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4000}","  3998 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
  3999 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
> 4000 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
       |        ^ Redundant Assertion
  4001 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4002 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4003 |         expect`┌x┐ └x┘`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4001}","  3999 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4000 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
> 4001 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
       |        ^ Redundant Assertion
  4002 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4003 |         expect`┌x┐ └x┘`.toBuild();
  4004 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4002}","  4000 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4001 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
> 4002 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
       |        ^ Redundant Assertion
  4003 |         expect`┌x┐ └x┘`.toBuild();
  4004 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4005 |         expect(""\u27E6x\u27E7"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4004}","  4002 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4003 |         expect`┌x┐ └x┘`.toBuild();
> 4004 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
       |        ^ Redundant Assertion
  4005 |         expect(""\u27E6x\u27E7"").toBuild();
  4006 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4007 |         expect(""\\lBrace \\rBrace"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4005}","  4003 |         expect`┌x┐ └x┘`.toBuild();
  4004 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
> 4005 |         expect(""\u27E6x\u27E7"").toBuild();
       |        ^ Redundant Assertion
  4006 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4007 |         expect(""\\lBrace \\rBrace"").toBuild();
  4008 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4006}","  4004 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4005 |         expect(""\u27E6x\u27E7"").toBuild();
> 4006 |         expect(""\\llbracket \\rrbracket"").toBuild();
       |        ^ Redundant Assertion
  4007 |         expect(""\\lBrace \\rBrace"").toBuild();
  4008 |     });
  4009 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4007}","  4005 |         expect(""\u27E6x\u27E7"").toBuild();
  4006 |         expect(""\\llbracket \\rrbracket"").toBuild();
> 4007 |         expect(""\\lBrace \\rBrace"").toBuild();
       |        ^ Redundant Assertion
  4008 |     });
  4009 |
  4010 |     it(""should build some surrogate pairs"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4277, 'column': 19, 'index': 160200}","  4275 |             expect`\message{Hello, world}`.toParse();
  4276 |             // eslint-disable-next-line no-console
> 4277 |             expect(console.log).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4278 |         });
  4279 |     });
  4280 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4286, 'column': 19, 'index': 160565}","  4284 |             expect`\errmessage{Hello, world}`.toParse();
  4285 |             // eslint-disable-next-line no-console
> 4286 |             expect(console.error).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4287 |         });
  4288 |     });
  4289 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 23}","  21 |
  22 | describe(""A parser"", function() {
> 23 |     it(""should not fail on an empty string"", function() {
     |    ^ Unknown Test
  24 |         expect``.toParse(strictSettings);
  25 |     });
  26 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 27}","  25 |     });
  26 |
> 27 |     it(""should ignore whitespace"", function() {
     |    ^ Unknown Test
  28 |         expect`    x    y    `.toParseLike(""xy"", strictSettings);
  29 |     });
  30 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 31}","  29 |     });
  30 |
> 31 |     it(""should ignore whitespace in atom"", function() {
     |    ^ Unknown Test
  32 |         expect`    x   ^ y    `.toParseLike(""x^y"", strictSettings);
  33 |     });
  34 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 106}","  104 |
  105 | describe(""A mathinner parser"", function() {
> 106 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  107 |         expect`\mathinner{\langle{\psi}\rangle}`.toParse();
  108 |         expect`\frac 1 {\mathinner{\langle{\psi}\rangle}}`.toParse();
  109 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 173}","  171 |
  172 | describe(""A \\KaTeX parser"", function() {
> 173 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  174 |         expect`\KaTeX`.toParse();
  175 |     });
  176 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 179}","  177 |
  178 | describe(""A subscript and superscript parser"", function() {
> 179 |     it(""should not fail on superscripts"", function() {
      |    ^ Unknown Test
  180 |         expect`x^2`.toParse();
  181 |     });
  182 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 183}","  181 |     });
  182 |
> 183 |     it(""should not fail on subscripts"", function() {
      |    ^ Unknown Test
  184 |         expect`x_3`.toParse();
  185 |     });
  186 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 187}","  185 |     });
  186 |
> 187 |     it(""should not fail on both subscripts and superscripts"", function() {
      |    ^ Unknown Test
  188 |         expect`x^2_3`.toParse();
  189 |
  190 |         expect`x_2^3`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 193}","  191 |     });
  192 |
> 193 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  194 |         expect`^3`.toParse();
  195 |         expect`^3+`.toParse();
  196 |         expect`_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 237}","  235 |     });
  236 |
> 237 |     it(""should produce the same thing regardless of order"", function() {
      |    ^ Unknown Test
  238 |         expect`x^2_3`.toParseLike`x_3^2`;
  239 |     });
  240 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 241}","  239 |     });
  240 |
> 241 |     it(""should not parse double subscripts or superscripts"", function() {
      |    ^ Unknown Test
  242 |         expect`x^x^x`.not.toParse();
  243 |
  244 |         expect`x_x_x`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 255}","  253 |     });
  254 |
> 255 |     it(""should work correctly with {}s"", function() {
      |    ^ Unknown Test
  256 |         expect`x^{2+3}`.toParse();
  257 |
  258 |         expect`x_{3-2}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 273}","  271 |     });
  272 |
> 273 |     it(""should work with nested super/subscripts"", function() {
      |    ^ Unknown Test
  274 |         expect`x^{x^x}`.toParse();
  275 |         expect`x^{x_x}`.toParse();
  276 |         expect`x_{x^x}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 280}","  278 |     });
  279 |
> 280 |     it(""should work with Unicode (sub|super)script characters"", function() {
      |    ^ Unknown Test
  281 |         expect`A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃`.toParseLike`A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}`;
  282 |     });
  283 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 284}","  282 |     });
  283 |
> 284 |     it(""should not fail if \\relax is in an atom"", function() {
      |    ^ Unknown Test
  285 |         expect`\hskip1em\relax^2`.toParse(strictSettings);
  286 |     });
  287 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 288}","  286 |     });
  287 |
> 288 |     it(""should skip \\relax in super/subscripts"", function() {
      |    ^ Unknown Test
  289 |         expect`x^\relax 2`.toParseLike`x^2`;
  290 |         expect`x_\relax 2`.toParseLike`x_2`;
  291 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 295}","  293 |
  294 | describe(""A subscript and superscript tree-builder"", function() {
> 295 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  296 |         expect`^3`.toBuild();
  297 |         expect`_2`.toBuild();
  298 |         expect`^3_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 304}","  302 |
  303 | describe(""A parser with limit controls"", function() {
> 304 |     it(""should fail when the limit control is not preceded by an op node"", function() {
      |    ^ Unknown Test
  305 |         expect`3\nolimits_2^2`.not.toParse();
  306 |         expect`\sqrt\limits_2^2`.not.toParse();
  307 |         expect`45 +\nolimits 45`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 310}","  308 |     });
  309 |
> 310 |     it(""should parse when the limit control directly follows an op node"", function() {
      |    ^ Unknown Test
  311 |         expect`\int\limits_2^2 3`.toParse();
  312 |         expect`\sum\nolimits_3^4 4`.toParse();
  313 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 315}","  313 |     });
  314 |
> 315 |     it(""should parse when the limit control is in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  316 |         expect`\int_2^2\limits`.toParse();
  317 |         expect`\int^2\nolimits_2`.toParse();
  318 |         expect`\int_2\limits^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 321}","  319 |     });
  320 |
> 321 |     it(""should allow multiple limit controls in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  322 |         expect`\int_2\nolimits^2\limits 3`.toParse();
  323 |         expect`\int\nolimits\limits_2^2`.toParse();
  324 |         expect`\int\limits\limits\limits_2^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 339}","  337 |
  338 | describe(""A group parser"", function() {
> 339 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  340 |         expect`{xy}`.toParse();
  341 |     });
  342 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 356}","  354 |
  355 | describe(""A \\begingroup...\\endgroup parser"", function() {
> 356 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  357 |         expect`\begingroup xy \endgroup`.toParse();
  358 |     });
  359 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 360}","  358 |     });
  359 |
> 360 |     it(""should fail when it is mismatched"", function() {
      |    ^ Unknown Test
  361 |         expect`\begingroup xy`.not.toParse();
  362 |         expect`\begingroup xy }`.not.toParse();
  363 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 377}","  375 |     });
  376 |
> 377 |     it(""should not affect spacing in math mode"", function() {
      |    ^ Unknown Test
  378 |         expect`\begingroup x+ \endgroup y`.toBuildLike`x+y`;
  379 |     });
  380 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 383}","  381 |
  382 | describe(""An implicit group parser"", function() {
> 383 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  384 |         expect`\Large x`.toParse();
  385 |         expect`abc {abc \Large xyz} abc`.toParse();
  386 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 445}","  443 |
  444 | describe(""A function parser"", function() {
> 445 |     it(""should parse no argument functions"", function() {
      |    ^ Unknown Test
  446 |         expect`\div`.toParse();
  447 |     });
  448 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 449}","  447 |     });
  448 |
> 449 |     it(""should parse 1 argument functions"", function() {
      |    ^ Unknown Test
  450 |         expect`\blue x`.toParse();
  451 |     });
  452 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 453}","  451 |     });
  452 |
> 453 |     it(""should parse 2 argument functions"", function() {
      |    ^ Unknown Test
  454 |         expect`\frac 1 2`.toParse();
  455 |     });
  456 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 457}","  455 |     });
  456 |
> 457 |     it(""should not parse 1 argument functions with no arguments"", function() {
      |    ^ Unknown Test
  458 |         expect`\blue`.not.toParse();
  459 |     });
  460 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 461}","  459 |     });
  460 |
> 461 |     it(""should not parse 2 argument functions with 0 or 1 arguments"", function() {
      |    ^ Unknown Test
  462 |         expect`\frac`.not.toParse();
  463 |
  464 |         expect`\frac 1`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 467}","  465 |     });
  466 |
> 467 |     it(""should not parse a function with text right after it"", function() {
      |    ^ Unknown Test
  468 |         expect`\redx`.not.toParse();
  469 |     });
  470 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 471}","  469 |     });
  470 |
> 471 |     it(""should parse a function with a number right after it"", function() {
      |    ^ Unknown Test
  472 |         expect`\frac12`.toParse();
  473 |     });
  474 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 475}","  473 |     });
  474 |
> 475 |     it(""should parse some functions with text right after it"", function() {
      |    ^ Unknown Test
  476 |         expect`\;x`.toParse();
  477 |     });
  478 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 639}","  637 |     });
  638 |
> 639 |     it(""should handle \\textstyle correctly"", function() {
      |    ^ Unknown Test
  640 |         expect`\textstyle 1 \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  641 |         expect`{\textstyle 1} \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  642 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 665}","  663 |
  664 | describe(""A genfrac builder"", function() {
> 665 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  666 |         expect`\frac{x}{y}`.toBuild();
  667 |         expect`\dfrac{x}{y}`.toBuild();
  668 |         expect`\tfrac{x}{y}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 678}","  676 |
  677 | describe(""A infix builder"", function() {
> 678 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  679 |         expect`a \over b`.toBuild();
  680 |         expect`a \atop b`.toBuild();
  681 |         expect`a \choose b`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 774}","  772 |     });
  773 |
> 774 |     it(""should parse math within text group"", function() {
      |    ^ Unknown Test
  775 |         expect`\text{graph: $y = mx + b$}`.toParse(strictSettings);
  776 |         expect`\text{graph: \(y = mx + b\)}`.toParse(strictSettings);
  777 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 779}","  777 |     });
  778 |
> 779 |     it(""should parse math within text within math within text"", function() {
      |    ^ Unknown Test
  780 |         expect`\text{hello $x + \text{world $y$} + z$}`.toParse(strictSettings);
  781 |         expect`\text{hello \(x + \text{world $y$} + z\)}`.toParse(strictSettings);
  782 |         expect`\text{hello $x + \text{world \(y\)} + z$}`.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 786}","  784 |     });
  785 |
> 786 |     it(""should forbid \\( within math mode"", function() {
      |    ^ Unknown Test
  787 |         expect`\(`.not.toParse();
  788 |         expect`\text{$\(x\)$}`.not.toParse();
  789 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 791}","  789 |     });
  790 |
> 791 |     it(""should forbid $ within math mode"", function() {
      |    ^ Unknown Test
  792 |         expect`$x$`.not.toParse();
  793 |         expect`\text{\($x$\)}`.not.toParse();
  794 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 796}","  794 |     });
  795 |
> 796 |     it(""should detect unbalanced \\)"", function() {
      |    ^ Unknown Test
  797 |         expect`\)`.not.toParse();
  798 |         expect`\text{\)}`.not.toParse();
  799 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 801}","  799 |     });
  800 |
> 801 |     it(""should detect unbalanced $"", function() {
      |    ^ Unknown Test
  802 |         expect`$`.not.toParse();
  803 |         expect`\text{$}`.not.toParse();
  804 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 806}","  804 |     });
  805 |
> 806 |     it(""should not mix $ and \\(..\\)"", function() {
      |    ^ Unknown Test
  807 |         expect`\text{$x\)}`.not.toParse();
  808 |         expect`\text{\(x$}`.not.toParse();
  809 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 811}","  809 |     });
  810 |
> 811 |     it(""should parse spacing functions"", function() {
      |    ^ Unknown Test
  812 |         expect`a b\, \; \! \: \> ~ \thinspace \medspace \quad \ `.toBuild();
  813 |         expect`\enspace \thickspace \qquad \space \nobreakspace`.toBuild();
  814 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 816}","  814 |     });
  815 |
> 816 |     it(""should omit spaces after commands"", function() {
      |    ^ Unknown Test
  817 |         expect`\text{\textellipsis !}`.toParseLike`\text{\textellipsis!}`;
  818 |     });
  819 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 820}","  818 |     });
  819 |
> 820 |     it(""should handle ⋮ and \\vdots"", function() {
      |    ^ Unknown Test
  821 |         expect`\text{a \vdots b ⋮ d}`.toParse();
  822 |     });
  823 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 826}","  824 |
  825 | describe(""A texvc builder"", function() {
> 826 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  827 |         expect`\lang\N\darr\R\dArr\Z\Darr\alef\rang`.toBuild();
  828 |         expect`\alefsym\uarr\Alpha\uArr\Beta\Uarr\Chi`.toBuild();
  829 |         expect`\clubs\diamonds\hearts\spades\cnums\Complex`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1000}","   998 |
   999 | describe(""An lap parser"", function() {
> 1000 |     it(""should not fail on a text argument"", function() {
       |    ^ Unknown Test
  1001 |         expect`\rlap{\,/}{=}`.toParse();
  1002 |         expect`\mathrlap{\,/}{=}`.toParse();
  1003 |         expect`{=}\llap{/\,}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1009}","  1007 |     });
  1008 |
> 1009 |     it(""should not fail if math version is used"", function() {
       |    ^ Unknown Test
  1010 |         expect`\mathrlap{\frac{a}{b}}{=}`.toParse();
  1011 |         expect`{=}\mathllap{\frac{a}{b}}`.toParse();
  1012 |         expect`\sum_{\mathclap{\frac{a}{b}}}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1015}","  1013 |     });
  1014 |
> 1015 |     it(""should fail on math if AMS version is used"", function() {
       |    ^ Unknown Test
  1016 |         expect`\rlap{\frac{a}{b}}{=}`.not.toParse();
  1017 |         expect`{=}\llap{\frac{a}{b}}`.not.toParse();
  1018 |         expect`\sum_{\clap{\frac{a}{b}}}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1271}","  1269 | describe(""A begin/end parser"", function() {
  1270 |
> 1271 |     it(""should parse a simple environment"", function() {
       |    ^ Unknown Test
  1272 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1273 |     });
  1274 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1275}","  1273 |     });
  1274 |
> 1275 |     it(""should parse an environment with argument"", function() {
       |    ^ Unknown Test
  1276 |         expect`\begin{array}{cc}a&b\\c&d\end{array}`.toParse();
  1277 |     });
  1278 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1279}","  1277 |     });
  1278 |
> 1279 |     it(""should parse and build an empty environment"", function() {
       |    ^ Unknown Test
  1280 |         expect`\begin{aligned}\end{aligned}`.toBuild();
  1281 |         expect`\begin{matrix}\end{matrix}`.toBuild();
  1282 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1284}","  1282 |     });
  1283 |
> 1284 |     it(""should parse an environment with hlines"", function() {
       |    ^ Unknown Test
  1285 |         expect`\begin{matrix}\hline a&b\\ \hline c&d\end{matrix}`.toParse();
  1286 |         expect`\begin{matrix}\hline a&b\cr \hline c&d\end{matrix}`.toParse();
  1287 |         expect`\begin{matrix}\hdashline a&b\\ \hdashline c&d\end{matrix}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1290}","  1288 |     });
  1289 |
> 1290 |     it(""should forbid hlines outside array environment"", () => {
       |    ^ Unknown Test
  1291 |         expect`\hline`.not.toParse();
  1292 |     });
  1293 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1294}","  1292 |     });
  1293 |
> 1294 |     it(""should error when name is mismatched"", function() {
       |    ^ Unknown Test
  1295 |         expect`\begin{matrix}a&b\\c&d\end{pmatrix}`.not.toParse();
  1296 |     });
  1297 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1298}","  1296 |     });
  1297 |
> 1298 |     it(""should error when commands are mismatched"", function() {
       |    ^ Unknown Test
  1299 |         expect`\begin{matrix}a&b\\c&d\right{pmatrix}`.not.toParse();
  1300 |     });
  1301 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1302}","  1300 |     });
  1301 |
> 1302 |     it(""should error when end is missing"", function() {
       |    ^ Unknown Test
  1303 |         expect`\begin{matrix}a&b\\c&d`.not.toParse();
  1304 |     });
  1305 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1306}","  1304 |     });
  1305 |
> 1306 |     it(""should error when braces are mismatched"", function() {
       |    ^ Unknown Test
  1307 |         expect`{\begin{matrix}a&b\\c&d}\end{matrix}`.not.toParse();
  1308 |     });
  1309 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1310}","  1308 |     });
  1309 |
> 1310 |     it(""should cooperate with infix notation"", function() {
       |    ^ Unknown Test
  1311 |         expect`\begin{matrix}0&1\over2&3\\4&5&6\end{matrix}`.toParse();
  1312 |     });
  1313 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1320}","  1318 |     });
  1319 |
> 1320 |     it(""should allow \\cr and \\\\ as a line terminator"", function() {
       |    ^ Unknown Test
  1321 |         expect`\begin{matrix}a&b\cr c&d\end{matrix}`.toParse();
  1322 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1323 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1325}","  1323 |     });
  1324 |
> 1325 |     it(""should not allow \\cr to scan for an optional size argument"", function() {
       |    ^ Unknown Test
  1326 |         expect`\begin{matrix}a&b\cr[c]&d\end{matrix}`.toParse();
  1327 |     });
  1328 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1329}","  1327 |     });
  1328 |
> 1329 |     it(""should not treat [ after space as optional argument to \\\\"", function() {
       |    ^ Unknown Test
  1330 |         expect`\begin{matrix}a&b\\ [c]&d\end{matrix}`.toParse();
  1331 |         expect`a\\ [b]`.toParse();
  1332 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1344}","  1342 |     });
  1343 |
> 1344 |     it(""should allow an optional argument in {matrix*} and company."", function() {
       |    ^ Unknown Test
  1345 |         expect`\begin{matrix*}[r] a & -1 \\ -1 & d \end{matrix*}`.toBuild();
  1346 |         expect`\begin{pmatrix*}[r] a & -1 \\ -1 & d \end{pmatrix*}`.toBuild();
  1347 |         expect`\begin{bmatrix*}[r] a & -1 \\ -1 & d \end{bmatrix*}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1381}","  1379 |     });
  1380 |
> 1381 |     it(""should build sized square roots"", function() {
       |    ^ Unknown Test
  1382 |         expect`\Large\sqrt[3]{x}`.toBuild();
  1383 |     });
  1384 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1385}","  1383 |     });
  1384 |
> 1385 |     it(""should expand argument if optional argument doesn't exist"", function() {
       |    ^ Unknown Test
  1386 |         expect`\sqrt\foo`.toParseLike(""\\sqrt123"",
  1387 |             new Settings({macros: {""\\foo"": ""123""}}));
  1388 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1390}","  1388 |     });
  1389 |
> 1390 |     it(""should not expand argument if optional argument exists"", function() {
       |    ^ Unknown Test
  1391 |         expect`\sqrt[2]\foo`.toParseLike(""\\sqrt[2]{123}"",
  1392 |             new Settings({macros: {""\\foo"": ""123""}}));
  1393 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1397}","  1395 |
  1396 | describe(""A TeX-compliant parser"", function() {
> 1397 |     it(""should work"", function() {
       |    ^ Unknown Test
  1398 |         expect`\frac 2 3`.toParse();
  1399 |     });
  1400 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1416}","  1414 |     });
  1415 |
> 1416 |     it(""should fail when there are missing sup/subscripts"", function() {
       |    ^ Unknown Test
  1417 |         expect`x^`.not.toParse();
  1418 |         expect`x_`.not.toParse();
  1419 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1487}","  1485 |     });
  1486 |
> 1487 |     it(""should parse multiple primes correctly"", function() {
       |    ^ Unknown Test
  1488 |         expect`x''''`.toParse();
  1489 |         expect`x_2''`.toParse();
  1490 |         expect`x''_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1493}","  1491 |     });
  1492 |
> 1493 |     it(""should fail when sup/subscripts are interspersed with arguments"", function() {
       |    ^ Unknown Test
  1494 |         expect`\sqrt^23`.not.toParse();
  1495 |         expect`\frac^234`.not.toParse();
  1496 |         expect`\frac2^34`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1499}","  1497 |     });
  1498 |
> 1499 |     it(""should succeed when sup/subscripts come after whole functions"", function() {
       |    ^ Unknown Test
  1500 |         expect`\sqrt2^3`.toParse();
  1501 |         expect`\frac23^4`.toParse();
  1502 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1504}","  1502 |     });
  1503 |
> 1504 |     it(""should succeed with a sqrt around a text/frac"", function() {
       |    ^ Unknown Test
  1505 |         expect`\sqrt \frac x y`.toParse();
  1506 |         expect`\sqrt \text x`.toParse();
  1507 |         expect`x^\frac x y`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1541}","  1539 |
  1540 | describe(""An op symbol builder"", function() {
> 1541 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1542 |         expect`\int_i^n`.toBuild();
  1543 |         expect`\iint_i^n`.toBuild();
  1544 |         expect`\iiint_i^n`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1558}","  1556 |
  1557 | describe(""A style change parser"", function() {
> 1558 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1559 |         expect`\displaystyle x`.toParse();
  1560 |         expect`\textstyle x`.toParse();
  1561 |         expect`\scriptstyle x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1589}","  1587 |
  1588 | describe(""A font parser"", function() {
> 1589 |     it(""should parse \\mathrm, \\mathbb, \\mathit, and \\mathnormal"", function() {
       |    ^ Unknown Test
  1590 |         expect`\mathrm x`.toParse();
  1591 |         expect`\mathbb x`.toParse();
  1592 |         expect`\mathit x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1600}","  1598 |     });
  1599 |
> 1600 |     it(""should parse \\mathcal and \\mathfrak"", function() {
       |    ^ Unknown Test
  1601 |         expect`\mathcal{ABC123}`.toParse();
  1602 |         expect`\mathfrak{abcABC123}`.toParse();
  1603 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1654}","  1652 |     });
  1653 |
> 1654 |     it(""should not parse a series of font commands"", function() {
       |    ^ Unknown Test
  1655 |         expect`\mathbb \mathrm R`.not.toParse();
  1656 |     });
  1657 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1669}","  1667 |     });
  1668 |
> 1669 |     it(""should be allowed in the argument"", function() {
       |    ^ Unknown Test
  1670 |         expect`e^\mathbf{x}`.toParse();
  1671 |     });
  1672 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1678}","  1676 |     });
  1677 |
> 1678 |     it(""old-style fonts work like new-style fonts"", () => {
       |    ^ Unknown Test
  1679 |         expect`\rm xyz`.toParseLike`\mathrm{xyz}`;
  1680 |         expect`\sf xyz`.toParseLike`\mathsf{xyz}`;
  1681 |         expect`\tt xyz`.toParseLike`\mathtt{xyz}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1689}","  1687 |
  1688 | describe(""A \\pmb builder"", function() {
> 1689 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1690 |         expect`\pmb{\mu}`.toBuild();
  1691 |         expect`\pmb{=}`.toBuild();
  1692 |         expect`\pmb{+}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1700}","  1698 |
  1699 | describe(""A raise parser"", function() {
> 1700 |     it(""should parse and build text in \\raisebox"", function() {
       |    ^ Unknown Test
  1701 |         expect`\raisebox{5pt}{text}`.toBuild(strictSettings);
  1702 |         expect`\raisebox{-5pt}{text}`.toBuild(strictSettings);
  1703 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1705}","  1703 |     });
  1704 |
> 1705 |     it(""should parse and build math in non-strict \\vcenter"", function() {
       |    ^ Unknown Test
  1706 |         expect`\vcenter{\frac a b}`.toBuild(nonstrictSettings);
  1707 |     });
  1708 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1709}","  1707 |     });
  1708 |
> 1709 |     it(""should fail to parse math in \\raisebox"", function() {
       |    ^ Unknown Test
  1710 |         expect`\raisebox{5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1711 |         expect`\raisebox{-5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1712 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1714}","  1712 |     });
  1713 |
> 1714 |     it(""should fail to parse math in an \\hbox"", function() {
       |    ^ Unknown Test
  1715 |         expect`\hbox{\frac a b}`.not.toParse(nonstrictSettings);
  1716 |     });
  1717 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1718}","  1716 |     });
  1717 |
> 1718 |     it(""should fail to build, given an unbraced length"", function() {
       |    ^ Unknown Test
  1719 |         expect`\raisebox5pt{text}`.not.toBuild(strictSettings);
  1720 |         expect`\raisebox-5pt{text}`.not.toBuild(strictSettings);
  1721 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1723}","  1721 |     });
  1722 |
> 1723 |     it(""should build math in an hbox when math mode is set"", function() {
       |    ^ Unknown Test
  1724 |         expect`a + \vcenter{\hbox{$\frac{\frac a b}c$}}`
  1725 |             .toBuild(strictSettings);
  1726 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1772}","  1770 |     });
  1771 |
> 1772 |     it(""should not parse a comment without newline in strict mode"", () => {
       |    ^ Unknown Test
  1773 |         expect`x%y`.not.toParse(strictSettings);
  1774 |         expect`x%y`.toParse(nonstrictSettings);
  1775 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2257}","  2255 |
  2256 | describe(""An accent parser"", function() {
> 2257 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2258 |         expect`\vec{x}`.toParse();
  2259 |         expect`\vec{x^2}`.toParse();
  2260 |         expect`\vec{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2277}","  2275 |     });
  2276 |
> 2277 |     it(""should parse stretchy, shifty accents"", function() {
       |    ^ Unknown Test
  2278 |         expect`\widehat{x}`.toParse();
  2279 |         expect`\widecheck{x}`.toParse();
  2280 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2282}","  2280 |     });
  2281 |
> 2282 |     it(""should parse stretchy, non-shifty accents"", function() {
       |    ^ Unknown Test
  2283 |         expect`\overrightarrow{x}`.toParse();
  2284 |     });
  2285 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2288}","  2286 |
  2287 | describe(""An accent builder"", function() {
> 2288 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2289 |         expect`\vec{x}`.toBuild();
  2290 |         expect`\vec{x}^2`.toBuild();
  2291 |         expect`\vec{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2305}","  2303 |
  2304 | describe(""A stretchy and shifty accent builder"", function() {
> 2305 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2306 |         expect`\widehat{AB}`.toBuild();
  2307 |         expect`\widecheck{AB}`.toBuild();
  2308 |         expect`\widehat{AB}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2323}","  2321 |
  2322 | describe(""A stretchy and non-shifty accent builder"", function() {
> 2323 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2324 |         expect`\overrightarrow{AB}`.toBuild();
  2325 |         expect`\overrightarrow{AB}^2`.toBuild();
  2326 |         expect`\overrightarrow{AB}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2349}","  2347 |
  2348 | describe(""An under-accent parser"", function() {
> 2349 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2350 |         expect`\underrightarrow{x}`.toParse();
  2351 |         expect`\underrightarrow{x^2}`.toParse();
  2352 |         expect`\underrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2370}","  2368 |
  2369 | describe(""An under-accent builder"", function() {
> 2370 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2371 |         expect`\underrightarrow{x}`.toBuild();
  2372 |         expect`\underrightarrow{x}^2`.toBuild();
  2373 |         expect`\underrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2388}","  2386 |
  2387 | describe(""An extensible arrow parser"", function() {
> 2388 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2389 |         expect`\xrightarrow{x}`.toParse();
  2390 |         expect`\xrightarrow{x^2}`.toParse();
  2391 |         expect`\xrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2410}","  2408 |
  2409 | describe(""An extensible arrow builder"", function() {
> 2410 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2411 |         expect`\xrightarrow{x}`.toBuild();
  2412 |         expect`\xrightarrow{x}^2`.toBuild();
  2413 |         expect`\xrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2429}","  2427 |
  2428 | describe(""A horizontal brace parser"", function() {
> 2429 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2430 |         expect`\overbrace{x}`.toParse();
  2431 |         expect`\overbrace{x^2}`.toParse();
  2432 |         expect`\overbrace{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2452}","  2450 |
  2451 | describe(""A horizontal brace builder"", function() {
> 2452 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2453 |         expect`\overbrace{x}`.toBuild();
  2454 |         expect`\overbrace{x}^2`.toBuild();
  2455 |         expect`\underbrace{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2470}","  2468 |
  2469 | describe(""A boxed parser"", function() {
> 2470 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2471 |         expect`\boxed{x}`.toParse();
  2472 |         expect`\boxed{x^2}`.toParse();
  2473 |         expect`\boxed{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2485}","  2483 |
  2484 | describe(""A boxed builder"", function() {
> 2485 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2486 |         expect`\boxed{x}`.toBuild();
  2487 |         expect`\boxed{x}^2`.toBuild();
  2488 |         expect`\boxed{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2502}","  2500 |
  2501 | describe(""An fbox parser, unlike a boxed parser,"", function() {
> 2502 |     it(""should fail when given math"", function() {
       |    ^ Unknown Test
  2503 |         expect`\fbox{\frac a b}`.not.toParse();
  2504 |     });
  2505 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2508}","  2506 |
  2507 | describe(""A colorbox parser"", function() {
> 2508 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2509 |         expect`\colorbox{red}{a b}`.toParse();
  2510 |         expect`\colorbox{red}{x}^2`.toParse();
  2511 |         expect`\colorbox{red} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2514}","  2512 |     });
  2513 |
> 2514 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2515 |         expect`\colorbox{red}{\alpha}`.not.toParse();
  2516 |         expect`\colorbox{red}{\frac{a}{b}}`.not.toParse();
  2517 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2519}","  2517 |     });
  2518 |
> 2519 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2520 |         expect`\colorbox{red}{a b}`.toParse();
  2521 |         expect`\colorbox{#197}{a b}`.toParse();
  2522 |         expect`\colorbox{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2532}","  2530 |
  2531 | describe(""A colorbox builder"", function() {
> 2532 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2533 |         expect`\colorbox{red}{a b}`.toBuild();
  2534 |         expect`\colorbox{red}{a b}^2`.toBuild();
  2535 |         expect`\colorbox{red} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2544}","  2542 |
  2543 | describe(""An fcolorbox parser"", function() {
> 2544 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2545 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2546 |         expect`\fcolorbox{blue}{yellow}{x}^2`.toParse();
  2547 |         expect`\fcolorbox{blue}{yellow} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2550}","  2548 |     });
  2549 |
> 2550 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2551 |         expect`\fcolorbox{blue}{yellow}{\alpha}`.not.toParse();
  2552 |         expect`\fcolorbox{blue}{yellow}{\frac{a}{b}}`.not.toParse();
  2553 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2555}","  2553 |     });
  2554 |
> 2555 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2556 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2557 |         expect`\fcolorbox{blue}{#197}{a b}`.toParse();
  2558 |         expect`\fcolorbox{blue}{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2568}","  2566 |
  2567 | describe(""A fcolorbox builder"", function() {
> 2568 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2569 |         expect`\fcolorbox{blue}{yellow}{a b}`.toBuild();
  2570 |         expect`\fcolorbox{blue}{yellow}{a b}^2`.toBuild();
  2571 |         expect`\fcolorbox{blue}{yellow} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2580}","  2578 |
  2579 | describe(""A strike-through parser"", function() {
> 2580 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2581 |         expect`\cancel{x}`.toParse();
  2582 |         expect`\cancel{x^2}`.toParse();
  2583 |         expect`\cancel{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2601}","  2599 |
  2600 | describe(""A strike-through builder"", function() {
> 2601 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2602 |         expect`\cancel{x}`.toBuild();
  2603 |         expect`\cancel{x}^2`.toBuild();
  2604 |         expect`\cancel{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2622}","  2620 |
  2621 | describe(""A actuarial angle parser"", function() {
> 2622 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2623 |         expect`a_{\angl{n}}`.toParse();
  2624 |     });
  2625 |     it(""should fail in text mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2625}","  2623 |         expect`a_{\angl{n}}`.toParse();
  2624 |     });
> 2625 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2626 |         expect`\text{a_{\angl{n}}}`.not.toParse();
  2627 |     });
  2628 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2631}","  2629 |
  2630 | describe(""A actuarial angle builder"", function() {
> 2631 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2632 |         expect`a_{\angl{n}}`.toBuild();
  2633 |         expect`a_{\angl{n}i}`.toBuild();
  2634 |         expect`a_{\angl n}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2640}","  2638 |
  2639 | describe(""\\phase"", function() {
> 2640 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2641 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2642 |     });
  2643 |     it(""should not fail in math mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2643}","  2641 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2642 |     });
> 2643 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2644 |         expect`\phase{-78.2^\circ}`.toBuild();
  2645 |     });
  2646 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2649}","  2647 |
  2648 | describe(""A phantom parser"", function() {
> 2649 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2650 |         expect`\phantom{x}`.toParse();
  2651 |         expect`\phantom{x^2}`.toParse();
  2652 |         expect`\phantom{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2669}","  2667 |
  2668 | describe(""A phantom builder"", function() {
> 2669 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2670 |         expect`\phantom{x}`.toBuild();
  2671 |         expect`\phantom{x^2}`.toBuild();
  2672 |         expect`\phantom{x}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2698}","  2696 |
  2697 | describe(""A smash parser"", function() {
> 2698 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2699 |         expect`\smash{x}`.toParse();
  2700 |         expect`\smash{x^2}`.toParse();
  2701 |         expect`\smash{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2723}","  2721 |
  2722 | describe(""A smash builder"", function() {
> 2723 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2724 |         expect`\smash{x}`.toBuild(nonstrictSettings);
  2725 |         expect`\smash{x^2}`.toBuild(nonstrictSettings);
  2726 |         expect`\smash{x}^2`.toBuild(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2747}","  2745 |
  2746 | describe(""An optional argument parser"", function() {
> 2747 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2748 |         // Note this doesn't actually make an optional argument, but still
  2749 |         // should work
  2750 |         expect`\frac[1]{2}{3}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2755}","  2753 |     });
  2754 |
> 2755 |     it(""should work with sqrts with optional arguments"", function() {
       |    ^ Unknown Test
  2756 |         expect`\sqrt[3]{2}`.toParse();
  2757 |     });
  2758 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2759}","  2757 |     });
  2758 |
> 2759 |     it(""should work when the optional argument is missing"", function() {
       |    ^ Unknown Test
  2760 |         expect`\sqrt{2}`.toParse();
  2761 |         expect`\rule{1em}{2em}`.toParse();
  2762 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2764}","  2762 |     });
  2763 |
> 2764 |     it(""should fail when the optional argument is malformed"", function() {
       |    ^ Unknown Test
  2765 |         expect`\rule[1]{2em}{3em}`.not.toParse();
  2766 |     });
  2767 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2768}","  2766 |     });
  2767 |
> 2768 |     it(""should not work if the optional argument isn't closed"", function() {
       |    ^ Unknown Test
  2769 |         expect`\sqrt[`.not.toParse();
  2770 |     });
  2771 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2818}","  2816 | describe(""A substack function"", function() {
  2817 |
> 2818 |     it(""should build"", function() {
       |    ^ Unknown Test
  2819 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2820 |     });
  2821 |     it(""should accommodate spaces in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2821}","  2819 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2820 |     });
> 2821 |     it(""should accommodate spaces in the argument"", function() {
       |    ^ Unknown Test
  2822 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2823 |     });
  2824 |     it(""should accommodate macros in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2824}","  2822 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2823 |     });
> 2824 |     it(""should accommodate macros in the argument"", function() {
       |    ^ Unknown Test
  2825 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2826 |     });
  2827 |     it(""should accommodate an empty argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2827}","  2825 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2826 |     });
> 2827 |     it(""should accommodate an empty argument"", function() {
       |    ^ Unknown Test
  2828 |         expect`\sum_{\substack{}}  P(i,j)`.toBuild();
  2829 |     });
  2830 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2835}","  2833 | describe(""A smallmatrix environment"", function() {
  2834 |
> 2835 |     it(""should build"", function() {
       |    ^ Unknown Test
  2836 |         expect`\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}`.toBuild();
  2837 |     });
  2838 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2843}","  2841 | describe(""A cases environment"", function() {
  2842 |
> 2843 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2844 |         expect`f(a,b)=\begin{cases}a+1&\text{if }b\text{ is odd}\\a&\text{if }b=0\\a-1&\text{otherwise}\end{cases}`
  2845 |             .toParse();
  2846 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2852}","  2850 | describe(""An rcases environment"", function() {
  2851 |
> 2852 |     it(""should build"", function() {
       |    ^ Unknown Test
  2853 |         expect`\begin{rcases} a &\text{if } b \\ c &\text{if } d \end{rcases}⇒…`
  2854 |             .toBuild();
  2855 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2861}","  2859 | describe(""An aligned environment"", function() {
  2860 |
> 2861 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2862 |         expect`\begin{aligned}a&=b&c&=d\\e&=f\end{aligned}`.toParse();
  2863 |     });
  2864 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2865}","  2863 |     });
  2864 |
> 2865 |     it(""should allow cells in brackets"", function() {
       |    ^ Unknown Test
  2866 |         expect`\begin{aligned}[a]&[b]\\ [c]&[d]\end{aligned}`.toParse();
  2867 |     });
  2868 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2869}","  2867 |     });
  2868 |
> 2869 |     it(""should forbid cells in brackets without space"", function() {
       |    ^ Unknown Test
  2870 |         expect`\begin{aligned}[a]&[b]\\[c]&[d]\end{aligned}`.not.toParse();
  2871 |     });
  2872 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2880}","  2878 |
  2879 | describe(""AMS environments"", function() {
> 2880 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  2881 |         expect`\begin{gather}a+b\\c+d\end{gather}`.not.toParse(nonstrictSettings);
  2882 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.not.toParse(nonstrictSettings);
  2883 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.not.toParse(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2893}","  2891 |
  2892 |     const displayMode = new Settings({displayMode: true});
> 2893 |     it(""should build if in display mode"", () => {
       |    ^ Unknown Test
  2894 |         expect`\begin{gather}a+b\\c+d\end{gather}`.toBuild(displayMode);
  2895 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.toBuild(displayMode);
  2896 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2906}","  2904 |     });
  2905 |
> 2906 |     it(""should build an empty environment"", () => {
       |    ^ Unknown Test
  2907 |         expect`\begin{gather}\end{gather}`.toBuild(displayMode);
  2908 |         expect`\begin{gather*}\end{gather*}`.toBuild(displayMode);
  2909 |         expect`\begin{align}\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2918}","  2916 |     });
  2917 |
> 2918 |     it(""{equation} should fail if argument contains two rows."", () => {
       |    ^ Unknown Test
  2919 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2920 |     });
  2921 |     it(""{equation} should fail if argument contains two columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2921}","  2919 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2920 |     });
> 2921 |     it(""{equation} should fail if argument contains two columns."", () => {
       |    ^ Unknown Test
  2922 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2923 |     });
  2924 |     it(""{split} should fail if argument contains three columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2924}","  2922 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2923 |     });
> 2924 |     it(""{split} should fail if argument contains three columns."", () => {
       |    ^ Unknown Test
  2925 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2926 |     });
  2927 |     it(""{array} should fail if body contains more columns than specification."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2927}","  2925 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2926 |     });
> 2927 |     it(""{array} should fail if body contains more columns than specification."", () => {
       |    ^ Unknown Test
  2928 |         expect`\begin{array}{2}a & b & c\\d & e  f\end{array}`.not.toBuild(displayMode);
  2929 |     });
  2930 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2956}","  2954 |
  2955 | describe(""operatorname support"", function() {
> 2956 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2957 |         expect`\operatorname{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2958 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2959 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}_y x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2967}","  2965 |
  2966 | describe(""href and url commands"", function() {
> 2967 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2968 |         expect`\href{http://example.com/}{\sin}`.toBuild(trustSettings);
  2969 |         expect`\url{http://example.com/}`.toBuild(trustSettings);
  2970 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2972}","  2970 |     });
  2971 |
> 2972 |     it(""should allow empty URLs"", function() {
       |    ^ Unknown Test
  2973 |         expect`\href{}{example here}`.toBuild(trustSettings);
  2974 |         expect`\url{}`.toBuild(trustSettings);
  2975 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2985}","  2983 |     });
  2984 |
> 2985 |     it(""should allow spaces single-character URLs"", () => {
       |    ^ Unknown Test
  2986 |         expect`\href %end`.toParseLike(""\\href{%}end"", trustSettings);
  2987 |         expect`\url %end`.toParseLike(""\\url{%}end"", trustSettings);
  2988 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3006}","  3004 |     });
  3005 |
> 3006 |     it(""should not allow unbalanced brace(s) in url"", function() {
       |    ^ Unknown Test
  3007 |         expect`\href{http://example.com/{a}{bar}`.not.toParse();
  3008 |         expect`\href{http://example.com/}a}{bar}`.not.toParse();
  3009 |         expect`\url{http://example.com/{a}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3097}","  3095 |
  3096 | describe(""A raw text parser"", function() {
> 3097 |     it(""should return null for a omitted optional string"", function() {
       |    ^ Unknown Test
  3098 |         expect`\includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}`.toParse();
  3099 |     });
  3100 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3112}","  3110 |     });
  3111 |
> 3112 |     it(""should still parse on unrecognized control sequences"", function() {
       |    ^ Unknown Test
  3113 |         expect`\error`.toParse(noThrowSettings);
  3114 |     });
  3115 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3117}","  3115 |
  3116 |     describe(""should allow unrecognized controls sequences anywhere, including"", function() {
> 3117 |         it(""in superscripts and subscripts"", function() {
       |        ^ Unknown Test
  3118 |             expect`2_\error`.toBuild(noThrowSettings);
  3119 |             expect`3^{\error}_\error`.toBuild(noThrowSettings);
  3120 |             expect`\int\nolimits^\error_\error`.toBuild(noThrowSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3123}","  3121 |         });
  3122 |
> 3123 |         it(""in fractions"", function() {
       |        ^ Unknown Test
  3124 |             expect`\frac{345}{\error}`.toBuild(noThrowSettings);
  3125 |             expect`\frac\error{\error}`.toBuild(noThrowSettings);
  3126 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3128}","  3126 |         });
  3127 |
> 3128 |         it(""in square roots"", function() {
       |        ^ Unknown Test
  3129 |             expect`\sqrt\error`.toBuild(noThrowSettings);
  3130 |             expect`\sqrt{234\error}`.toBuild(noThrowSettings);
  3131 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3133}","  3131 |         });
  3132 |
> 3133 |         it(""in text boxes"", function() {
       |        ^ Unknown Test
  3134 |             expect`\text{\error}`.toBuild(noThrowSettings);
  3135 |         });
  3136 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3203}","  3201 |
  3202 | describe(""The symbol table integrity"", function() {
> 3203 |     it(""should treat certain symbols as synonyms"", function() {
       |    ^ Unknown Test
  3204 |         expect`<`.toBuildLike`\lt`;
  3205 |         expect`>`.toBuildLike`\gt`;
  3206 |         expect`\left<\frac{1}{x}\right>`.toBuildLike`\left\lt\frac{1}{x}\right\gt`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3221}","  3219 |
  3220 | describe(""A macro expander"", function() {
> 3221 |     it(""should produce individual tokens"", function() {
       |    ^ Unknown Test
  3222 |         expect`e^\foo`.toParseLike(""e^1 23"",
  3223 |             new Settings({macros: {""\\foo"": ""123""}}));
  3224 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3226}","  3224 |     });
  3225 |
> 3226 |     it(""should preserve leading spaces inside macro definition"", function() {
       |    ^ Unknown Test
  3227 |         expect`\text{\foo}`.toParseLike(r`\text{ x}`,
  3228 |             new Settings({macros: {""\\foo"": "" x""}}));
  3229 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3231}","  3229 |     });
  3230 |
> 3231 |     it(""should preserve leading spaces inside macro argument"", function() {
       |    ^ Unknown Test
  3232 |         expect`\text{\foo{ x}}`.toParseLike(r`\text{ x}`,
  3233 |             new Settings({macros: {""\\foo"": ""#1""}}));
  3234 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3236}","  3234 |     });
  3235 |
> 3236 |     it(""should ignore expanded spaces in math mode"", function() {
       |    ^ Unknown Test
  3237 |         expect`\foo`.toParseLike(""x"", new Settings({macros: {""\\foo"": "" x""}}));
  3238 |     });
  3239 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3240}","  3238 |     });
  3239 |
> 3240 |     it(""should consume spaces after control-word macro"", function() {
       |    ^ Unknown Test
  3241 |         expect`\text{\foo }`.toParseLike(r`\text{x}`,
  3242 |             new Settings({macros: {""\\foo"": ""x""}}));
  3243 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3245}","  3243 |     });
  3244 |
> 3245 |     it(""should consume spaces after macro with \\relax"", function() {
       |    ^ Unknown Test
  3246 |         expect`\text{\foo }`.toParseLike(r`\text{}`,
  3247 |             new Settings({macros: {""\\foo"": ""\\relax""}}));
  3248 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3250}","  3248 |     });
  3249 |
> 3250 |     it(""should not consume spaces after control-word expansion"", function() {
       |    ^ Unknown Test
  3251 |         expect`\text{\\ }`.toParseLike(r`\text{ }`,
  3252 |             new Settings({macros: {""\\\\"": ""\\relax""}}));
  3253 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3255}","  3253 |     });
  3254 |
> 3255 |     it(""should consume spaces after \\relax"", function() {
       |    ^ Unknown Test
  3256 |         expect`\text{\relax }`.toParseLike`\text{}`;
  3257 |     });
  3258 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3259}","  3257 |     });
  3258 |
> 3259 |     it(""should consume spaces after control-word function"", function() {
       |    ^ Unknown Test
  3260 |         expect`\text{\KaTeX }`.toParseLike`\text{\KaTeX}`;
  3261 |     });
  3262 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3263}","  3261 |     });
  3262 |
> 3263 |     it(""should preserve spaces after control-symbol macro"", function() {
       |    ^ Unknown Test
  3264 |         expect`\text{\% y}`.toParseLike(r`\text{x y}`,
  3265 |             new Settings({macros: {""\\%"": ""x""}}));
  3266 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3268}","  3266 |     });
  3267 |
> 3268 |     it(""should preserve spaces after control-symbol function"", function() {
       |    ^ Unknown Test
  3269 |         expect`\text{\' }`.toParse();
  3270 |     });
  3271 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3272}","  3270 |     });
  3271 |
> 3272 |     it(""should consume spaces between arguments"", function() {
       |    ^ Unknown Test
  3273 |         expect`\text{\foo 1 2}`.toParseLike(r`\text{12end}`,
  3274 |             new Settings({macros: {""\\foo"": ""#1#2end""}}));
  3275 |         expect`\text{\foo {1} {2}}`.toParseLike(r`\text{12end}`,",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3279}","  3277 |     });
  3278 |
> 3279 |     it(""should allow for multiple expansion"", function() {
       |    ^ Unknown Test
  3280 |         expect`1\foo2`.toParseLike(""1aa2"", new Settings({macros: {
  3281 |             ""\\foo"": ""\\bar\\bar"",
  3282 |             ""\\bar"": ""a"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3286}","  3284 |     });
  3285 |
> 3286 |     it(""should allow for multiple expansion with argument"", function() {
       |    ^ Unknown Test
  3287 |         expect`1\foo2`.toParseLike(""12222"", new Settings({macros: {
  3288 |             ""\\foo"": ""\\bar{#1}\\bar{#1}"",
  3289 |             ""\\bar"": ""#1#1"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3293}","  3291 |     });
  3292 |
> 3293 |     it(""should allow for macro argument"", function() {
       |    ^ Unknown Test
  3294 |         expect`\foo\bar`.toParseLike(""(xyz)"", new Settings({macros: {
  3295 |             ""\\foo"": ""(#1)"",
  3296 |             ""\\bar"": ""xyz"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3300}","  3298 |     });
  3299 |
> 3300 |     it(""should allow properly nested group for macro argument"", function() {
       |    ^ Unknown Test
  3301 |         expect`\foo{e^{x_{12}+3}}`.toParseLike(""(e^{x_{12}+3})"",
  3302 |             new Settings({macros: {""\\foo"": ""(#1)""}}));
  3303 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3305}","  3303 |     });
  3304 |
> 3305 |     it(""should delay expansion if preceded by \\expandafter"", function() {
       |    ^ Unknown Test
  3306 |         expect`\expandafter\foo\bar`.toParseLike(""x+y"", new Settings({macros: {
  3307 |             ""\\foo"": ""#1+#2"",
  3308 |             ""\\bar"": ""xy"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3315}","  3313 |     });
  3314 |
> 3315 |     it(""should not expand if preceded by \\noexpand"", function() {
       |    ^ Unknown Test
  3316 |         // \foo is not expanded and interpreted as if its meaning were \relax
  3317 |         expect`\noexpand\foo y`.toParseLike(""y"",
  3318 |             new Settings({macros: {""\\foo"": ""x""}}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3328}","  3326 |     });
  3327 |
> 3328 |     it(""should allow for space macro argument (text version)"", function() {
       |    ^ Unknown Test
  3329 |         expect`\text{\foo\bar}`.toParseLike(r`\text{( )}`, new Settings({macros: {
  3330 |             ""\\foo"": ""(#1)"",
  3331 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3335}","  3333 |     });
  3334 |
> 3335 |     it(""should allow for space macro argument (math version)"", function() {
       |    ^ Unknown Test
  3336 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3337 |             ""\\foo"": ""(#1)"",
  3338 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3342}","  3340 |     });
  3341 |
> 3342 |     it(""should allow for space second argument (text version)"", function() {
       |    ^ Unknown Test
  3343 |         expect`\text{\foo\bar\bar}`.toParseLike(r`\text{( , )}`, new Settings({macros: {
  3344 |             ""\\foo"": ""(#1,#2)"",
  3345 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3349}","  3347 |     });
  3348 |
> 3349 |     it(""should treat \\relax as empty argument"", function() {
       |    ^ Unknown Test
  3350 |         expect`\text{\foo\relax x}`.toParseLike(r`\text{(,x)}`, new Settings({macros: {
  3351 |             ""\\foo"": ""(#1,#2)"",
  3352 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3355}","  3353 |     });
  3354 |
> 3355 |     it(""should allow for space second argument (math version)"", function() {
       |    ^ Unknown Test
  3356 |         expect`\foo\bar\bar`.toParseLike(""(,)"", new Settings({macros: {
  3357 |             ""\\foo"": ""(#1,#2)"",
  3358 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3362}","  3360 |     });
  3361 |
> 3362 |     it(""should allow for empty macro argument"", function() {
       |    ^ Unknown Test
  3363 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3364 |             ""\\foo"": ""(#1)"",
  3365 |             ""\\bar"": """",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3369}","  3367 |     });
  3368 |
> 3369 |     it(""should allow for space function arguments"", function() {
       |    ^ Unknown Test
  3370 |         expect`\frac\bar\bar`.toParseLike(r`\frac{}{}`, new Settings({macros: {
  3371 |             ""\\bar"": "" "",
  3372 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3375}","  3373 |     });
  3374 |
> 3375 |     it(""should build \\overset and \\underset"", function() {
       |    ^ Unknown Test
  3376 |         expect`\overset{f}{\rightarrow} Y`.toBuild();
  3377 |         expect`\underset{f}{\rightarrow} Y`.toBuild();
  3378 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3380}","  3378 |     });
  3379 |
> 3380 |     it(""should build \\iff, \\implies, \\impliedby"", function() {
       |    ^ Unknown Test
  3381 |         expect`X \iff Y`.toBuild();
  3382 |         expect`X \implies Y`.toBuild();
  3383 |         expect`X \impliedby Y`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3386}","  3384 |     });
  3385 |
> 3386 |     it(""should allow aliasing characters"", function() {
       |    ^ Unknown Test
  3387 |         expect`x’=c`.toParseLike(""x'=c"", new Settings({macros: {
  3388 |             ""’"": ""'"",
  3389 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3392}","  3390 |     });
  3391 |
> 3392 |     it(""\\@firstoftwo should consume both, and avoid errors"", function() {
       |    ^ Unknown Test
  3393 |         expect`\@firstoftwo{yes}{no}`.toParseLike`yes`;
  3394 |         expect`\@firstoftwo{yes}{1'_2^3}`.toParseLike`yes`;
  3395 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3397}","  3395 |     });
  3396 |
> 3397 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3398 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3399 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3400 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3402}","  3400 |     });
  3401 |
> 3402 |     it(""\\@ifnextchar should not consume nonspaces"", function() {
       |    ^ Unknown Test
  3403 |         expect`\@ifnextchar!{yes}{no}!!`.toParseLike`yes!!`;
  3404 |         expect`\@ifnextchar!{yes}{no}?!`.toParseLike`no?!`;
  3405 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3407}","  3405 |     });
  3406 |
> 3407 |     it(""\\@ifnextchar should consume spaces"", function() {
       |    ^ Unknown Test
  3408 |         expect`\def\x#1{\@ifnextchar x{yes}{no}}\x{}x\x{} x`
  3409 |             .toParseLike`yesxyesx`;
  3410 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3412}","  3410 |     });
  3411 |
> 3412 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3413 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3414 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3415 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3417}","  3415 |     });
  3416 |
> 3417 |     it(""\\TextOrMath should work immediately"", function() {
       |    ^ Unknown Test
  3418 |         expect`\TextOrMath{text}{math}`.toParseLike`math`;
  3419 |     });
  3420 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3421}","  3419 |     });
  3420 |
> 3421 |     it(""\\TextOrMath should work after other math"", function() {
       |    ^ Unknown Test
  3422 |         expect`x+\TextOrMath{text}{math}`.toParseLike`x+math`;
  3423 |     });
  3424 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3425}","  3423 |     });
  3424 |
> 3425 |     it(""\\TextOrMath should work immediately after \\text"", function() {
       |    ^ Unknown Test
  3426 |         expect`\text{\TextOrMath{text}{math}}`.toParseLike`\text{text}`;
  3427 |     });
  3428 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3429}","  3427 |     });
  3428 |
> 3429 |     it(""\\TextOrMath should work later after \\text"", function() {
       |    ^ Unknown Test
  3430 |         expect`\text{hello \TextOrMath{text}{math}}`.toParseLike`\text{hello text}`;
  3431 |     });
  3432 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3433}","  3431 |     });
  3432 |
> 3433 |     it(""\\TextOrMath should work immediately after \\text ends"", function() {
       |    ^ Unknown Test
  3434 |         expect`\text{\TextOrMath{text}{math}}\TextOrMath{text}{math}`
  3435 |             .toParseLike`\text{text}math`;
  3436 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3438}","  3436 |     });
  3437 |
> 3438 |     it(""\\TextOrMath should work immediately after $"", function() {
       |    ^ Unknown Test
  3439 |         expect`\text{$\TextOrMath{text}{math}$}`.toParseLike`\text{$math$}`;
  3440 |     });
  3441 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3442}","  3440 |     });
  3441 |
> 3442 |     it(""\\TextOrMath should work later after $"", function() {
       |    ^ Unknown Test
  3443 |         expect`\text{$x+\TextOrMath{text}{math}$}`.toParseLike`\text{$x+math$}`;
  3444 |     });
  3445 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3446}","  3444 |     });
  3445 |
> 3446 |     it(""\\TextOrMath should work immediately after $ ends"", function() {
       |    ^ Unknown Test
  3447 |         expect`\text{$\TextOrMath{text}{math}$\TextOrMath{text}{math}}`
  3448 |             .toParseLike`\text{$math$text}`;
  3449 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3451}","  3449 |     });
  3450 |
> 3451 |     it(""\\TextOrMath should work in a macro"", function() {
       |    ^ Unknown Test
  3452 |         expect`\mode\text{\mode$\mode$\mode}\mode`
  3453 |             .toParseLike(r`math\text{text$math$text}math`, new Settings({macros: {
  3454 |                 ""\\mode"": ""\\TextOrMath{text}{math}"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3458}","  3456 |     });
  3457 |
> 3458 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3459 |         expect`\text\mode`.toParseLike(r`\text t`, new Settings({macros:
  3460 |             {""\\mode"": ""\\TextOrMath{t}{m}""}}));
  3461 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3490}","  3488 |     });
  3489 |
> 3490 |     it(""should build Unicode private area characters"", function() {
       |    ^ Unknown Test
  3491 |         expect`\gvertneqq\lvertneqq\ngeqq\ngeqslant\nleqq`.toBuild();
  3492 |         expect`\nleqslant\nshortmid\nshortparallel\varsubsetneq`.toBuild();
  3493 |         expect`\varsubsetneqq\varsupsetneq\varsupsetneqq`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3496}","  3494 |     });
  3495 |
> 3496 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3497 |         expect`\text\mode`.toParseLike(r`\text{text}`, new Settings({macros:
  3498 |             {""\\mode"": ""\\TextOrMath{text}{math}""}}));
  3499 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3501}","  3499 |     });
  3500 |
> 3501 |     it(""\\gdef defines macros"", function() {
       |    ^ Unknown Test
  3502 |         expect`\gdef\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3503 |         expect`\gdef\foo{hi}\foo+\text\foo`.toParseLike`hi+\text{hi}`;
  3504 |         expect`\gdef\foo#1{hi #1}\text{\foo{Alice}, \foo{Bob}}`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3519}","  3517 |     });
  3518 |
> 3519 |     it(""\\gdef defines macros with delimited parameter"", function() {
       |    ^ Unknown Test
  3520 |         expect`\gdef\foo|#1||{#1}\text{\foo| x y ||}`.toParseLike`\text{ x y }`;
  3521 |         expect`\gdef\foo#1|#2{#1+#2}\foo 1 2 |34`.toParseLike`12+34`;
  3522 |         expect`\gdef\foo#1#{#1}\foo1^{23}`.toParseLike`1^{23}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3528}","  3526 |     });
  3527 |
> 3528 |     it(""\\xdef should expand definition"", function() {
       |    ^ Unknown Test
  3529 |         expect`\def\foo{a}\xdef\bar{\foo}\def\foo{}\bar`.toParseLike`a`;
  3530 |         // \def\noexpand\foo{} expands into \def\foo{}
  3531 |         expect`\def\foo{a}\xdef\bar{\def\noexpand\foo{}}\foo\bar\foo`.toParseLike`a`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3538}","  3536 |     });
  3537 |
> 3538 |     it(""\\def should be handled in Parser"", () => {
       |    ^ Unknown Test
  3539 |         expect`\gdef\foo{1}`.toParse(new Settings({maxExpand: 0}));
  3540 |         expect`2^\def\foo{1}2`.not.toParse();
  3541 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3543}","  3541 |     });
  3542 |
> 3543 |     it(""\\def works locally"", () => {
       |    ^ Unknown Test
  3544 |         expect`\def\x{1}\x{\def\x{2}\x{\def\x{3}\x}\x}\x`
  3545 |             .toParseLike`1{2{3}2}1`;
  3546 |         expect`\def\x{1}\x\def\x{2}\x{\def\x{3}\x\def\x{4}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3550}","  3548 |     });
  3549 |
> 3550 |     it(""\\gdef overrides at all levels"", () => {
       |    ^ Unknown Test
  3551 |         expect`\def\x{1}\x{\def\x{2}\x{\gdef\x{3}\x}\x}\x`
  3552 |             .toParseLike`1{2{3}3}3`;
  3553 |         expect`\def\x{1}\x{\def\x{2}\x{\global\def\x{3}\x}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3559}","  3557 |     });
  3558 |
> 3559 |     it(""\\global needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3560 |         expect`\global\def\foo{}\foo`.toParseLike``;
  3561 |         expect`\global\edef\foo{}\foo`.toParseLike``;
  3562 |         expect`\def\DEF{\def}\global\DEF\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3569}","  3567 |     });
  3568 |
> 3569 |     it(""\\long needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3570 |         expect`\long\def\foo{}\foo`.toParseLike``;
  3571 |         expect`\long\edef\foo{}\foo`.toParseLike``;
  3572 |         expect`\long\global\def\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3576}","  3574 |     });
  3575 |
> 3576 |     it(""Macro arguments do not generate groups"", () => {
       |    ^ Unknown Test
  3577 |         expect`\def\x{1}\x\def\foo#1{#1}\foo{\x\def\x{2}\x}\x`
  3578 |             .toParseLike`1122`;
  3579 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3581}","  3579 |     });
  3580 |
> 3581 |     it(""\\textbf arguments do generate groups"", () => {
       |    ^ Unknown Test
  3582 |         expect`\def\x{1}\x\textbf{\x\def\x{2}\x}\x`.toParseLike`1\textbf{12}1`;
  3583 |     });
  3584 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3585}","  3583 |     });
  3584 |
> 3585 |     it(""\\sqrt optional arguments generate groups"", () => {
       |    ^ Unknown Test
  3586 |         expect`\def\x{1}\def\y{1}\x\y\sqrt[\def\x{2}\x]{\def\y{2}\y}\x\y`
  3587 |             .toParseLike`11\sqrt[2]{2}11`;
  3588 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3590}","  3588 |     });
  3589 |
> 3590 |     it(""array cells generate groups"", () => {
       |    ^ Unknown Test
  3591 |         expect`\def\x{1}\begin{matrix}\x&\def\x{2}\x&\x\end{matrix}\x`
  3592 |             .toParseLike`\begin{matrix}1&2&1\end{matrix}1`;
  3593 |         expect`\def\x{1}\begin{matrix}\def\x{2}\x&\x\end{matrix}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3621}","  3619 |     });
  3620 |
> 3621 |     it(""\\let copies the definition"", () => {
       |    ^ Unknown Test
  3622 |         expect`\let\foo=\frac\def\frac{}\foo12`.toParseLike`\frac12`;
  3623 |         expect`\def\foo{1}\let\bar\foo\def\foo{2}\bar`.toParseLike`1`;
  3624 |         expect`\let\foo=\kern\edef\bar{\foo1em}\let\kern=\relax\bar`.toParseLike`\kern1em`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3641}","  3639 |     });
  3640 |
> 3641 |     it(""\\futurelet should parse correctly"", () => {
       |    ^ Unknown Test
  3642 |         expect`\futurelet\foo\frac1{2+\foo}`.toParseLike`\frac1{2+1}`;
  3643 |     });
  3644 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3645}","  3643 |     });
  3644 |
> 3645 |     it(""macros argument can simulate \\let"", () => {
       |    ^ Unknown Test
  3646 |         expect`\int`.toParseLike(""\\int\\limits"", {macros: {
  3647 |             ""\\Oldint"": {
  3648 |                 tokens: [{text: ""\\int"", noexpand: true}],",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3672}","  3670 |     });
  3671 |
> 3672 |     it(""\\newcommand defines new macros"", () => {
       |    ^ Unknown Test
  3673 |         expect`\newcommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3674 |         expect`\newcommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3675 |         // Function detection",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3687}","  3685 |     });
  3686 |
> 3687 |     it(""\\renewcommand redefines macros"", () => {
       |    ^ Unknown Test
  3688 |         expect`\renewcommand\foo{x^2}\foo+\foo`.not.toParse();
  3689 |         expect`\renewcommand{\foo}{x^2}\foo+\foo`.not.toParse();
  3690 |         expect`\renewcommand\bar{x^2}\bar+\bar`.toParseLike`x^2+x^2`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3695}","  3693 |     });
  3694 |
> 3695 |     it(""\\providecommand defines but does not redefine macros"", () => {
       |    ^ Unknown Test
  3696 |         expect`\providecommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3697 |         expect`\providecommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3698 |         expect`\newcommand{\foo}{1}\foo\providecommand{\foo}{2}\foo`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3706}","  3704 |     });
  3705 |
> 3706 |     it(""\\newcommand is local"", () => {
       |    ^ Unknown Test
  3707 |         expect`\newcommand\foo{1}\foo{\renewcommand\foo{2}\foo}\foo`
  3708 |             .toParseLike`1{2}1`;
  3709 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3711}","  3709 |     });
  3710 |
> 3711 |     it(""\\newcommand accepts number of arguments"", () => {
       |    ^ Unknown Test
  3712 |         expect`\newcommand\foo[1]{#1^2}\foo x+\foo{y}`.toParseLike`x^2+y^2`;
  3713 |         expect`\newcommand\foo[10]{#1^2}\foo 0123456789`.toParseLike`0^2`;
  3714 |         expect`\newcommand\foo[x]{}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3720}","  3718 |     // This may change in the future, if we support the extra features of
  3719 |     // \hspace.
> 3720 |     it(""should treat \\hspace, \\hskip like \\kern"", function() {
       |    ^ Unknown Test
  3721 |         expect`\hspace{1em}`.toParseLike`\kern1em`;
  3722 |         expect`\hskip{1em}`.toParseLike`\kern1em`;
  3723 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3725}","  3723 |     });
  3724 |
> 3725 |     it(""should expand \\limsup as expected"", () => {
       |    ^ Unknown Test
  3726 |         expect`\limsup`.toParseLike`\operatorname*{lim\,sup}`;
  3727 |     });
  3728 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3729}","  3727 |     });
  3728 |
> 3729 |     it(""should expand \\liminf as expected"", () => {
       |    ^ Unknown Test
  3730 |         expect`\liminf`.toParseLike`\operatorname*{lim\,inf}`;
  3731 |     });
  3732 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3733}","  3731 |     });
  3732 |
> 3733 |     it(""should expand AMS log-like symbols as expected"", () => {
       |    ^ Unknown Test
  3734 |         expect`\injlim`.toParseLike`\operatorname*{inj\,lim}`;
  3735 |         expect`\projlim`.toParseLike`\operatorname*{proj\,lim}`;
  3736 |         expect`\varlimsup`.toParseLike`\operatorname*{\overline{lim}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3743}","  3741 |     });
  3742 |
> 3743 |     it(""should expand \\plim as expected"", () => {
       |    ^ Unknown Test
  3744 |         expect`\plim`.toParseLike`\mathop{\operatorname{plim}}\limits`;
  3745 |     });
  3746 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3747}","  3745 |     });
  3746 |
> 3747 |     it(""should expand \\argmin as expected"", () => {
       |    ^ Unknown Test
  3748 |         expect`\argmin`.toParseLike`\operatorname*{arg\,min}`;
  3749 |     });
  3750 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3751}","  3749 |     });
  3750 |
> 3751 |     it(""should expand \\argmax as expected"", () => {
       |    ^ Unknown Test
  3752 |         expect`\argmax`.toParseLike`\operatorname*{arg\,max}`;
  3753 |     });
  3754 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3755}","  3753 |     });
  3754 |
> 3755 |     it(""should expand \\bra as expected"", () => {
       |    ^ Unknown Test
  3756 |         expect`\bra{\phi}`.toParseLike`\mathinner{\langle{\phi}|}`;
  3757 |     });
  3758 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3759}","  3757 |     });
  3758 |
> 3759 |     it(""should expand \\ket as expected"", () => {
       |    ^ Unknown Test
  3760 |         expect`\ket{\psi}`.toParseLike`\mathinner{|{\psi}\rangle}`;
  3761 |     });
  3762 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3763}","  3761 |     });
  3762 |
> 3763 |     it(""should expand \\braket as expected"", () => {
       |    ^ Unknown Test
  3764 |         expect`\braket{\phi|\psi}`.toParseLike`\mathinner{\langle{\phi|\psi}\rangle}`;
  3765 |     });
  3766 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3767}","  3765 |     });
  3766 |
> 3767 |     it(""should expand \\Bra as expected"", () => {
       |    ^ Unknown Test
  3768 |         expect`\Bra{\phi}`.toParseLike`\left\langle\phi\right|`;
  3769 |     });
  3770 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3771}","  3769 |     });
  3770 |
> 3771 |     it(""should expand \\Ket as expected"", () => {
       |    ^ Unknown Test
  3772 |         expect`\Ket{\psi}`.toParseLike`\left|\psi\right\rangle`;
  3773 |     });
  3774 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3775}","  3773 |     });
  3774 |
> 3775 |     it(""should expand \\Braket as expected"", () => {
       |    ^ Unknown Test
  3776 |         expect`\Braket{ ϕ | \frac{∂^2}{∂ t^2} | ψ }`.toParseLike`\left\langle ϕ\,\middle\vert\,\frac{∂^2}{∂ t^2}\,\middle\vert\, ψ\right\rangle`;
  3777 |     });
  3778 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3779}","  3777 |     });
  3778 |
> 3779 |     it(""should expand \\set as expected"", () => {
       |    ^ Unknown Test
  3780 |         expect`\set{x|x<5|S|}`.toParseLike`\{\,x\mid x<5|S|\,\}`;
  3781 |         // \set doesn't support special || or \| handling
  3782 |         expect`\set{x||x<5|S|}`.toParseLike`\{\,x\mid |x<5|S|\,\}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3786}","  3784 |     });
  3785 |
> 3786 |     it(""should expand \\Set as expected"", () => {
       |    ^ Unknown Test
  3787 |         expect`\Set{ x | x<\frac 1 2 |S| }`
  3788 |         .toParseLike`\left\{\: x\;\middle\vert\; x<\frac 1 2 |S| \:\right\}`;
  3789 |         expect`\Set{ x || x<\frac 1 2 |S| }`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3799}","  3797 |     const displayMode = new Settings({displayMode: true});
  3798 |
> 3799 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  3800 |         expect`\tag{hi}x+y`.not.toParse();
  3801 |     });
  3802 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3803}","  3801 |     });
  3802 |
> 3803 |     it(""should fail with multiple tags"", () => {
       |    ^ Unknown Test
  3804 |         expect`\tag{1}\tag{2}x+y`.not.toParse(displayMode);
  3805 |     });
  3806 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3807}","  3805 |     });
  3806 |
> 3807 |     it(""should fail with multiple tags in one row"", () => {
       |    ^ Unknown Test
  3808 |         expect`\begin{align}\tag{1}x+y\tag{2}\end{align}`.not.toParse(displayMode);
  3809 |     });
  3810 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3811}","  3809 |     });
  3810 |
> 3811 |     it(""should work with one tag per row"", () => {
       |    ^ Unknown Test
  3812 |         expect`\begin{align}\tag{1}x\\&+y\tag{2}\end{align}`.toParse(displayMode);
  3813 |     });
  3814 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3815}","  3813 |     });
  3814 |
> 3815 |     it(""should work with \\nonumber/\\notag"", () => {
       |    ^ Unknown Test
  3816 |         expect`\begin{align}\tag{1}\nonumber x\\&+y\notag\end{align}`
  3817 |         .toParseLike(r`\begin{align}\tag{1}x\\&+y\nonumber\end{align}`, displayMode);
  3818 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3820}","  3818 |     });
  3819 |
> 3820 |     it(""should build"", () => {
       |    ^ Unknown Test
  3821 |         expect`\tag{hi}x+y`.toBuild(displayMode);
  3822 |     });
  3823 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3824}","  3822 |     });
  3823 |
> 3824 |     it(""should ignore location of \\tag"", () => {
       |    ^ Unknown Test
  3825 |         expect`\tag{hi}x+y`.toParseLike(r`x+y\tag{hi}`, displayMode);
  3826 |     });
  3827 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3828}","  3826 |     });
  3827 |
> 3828 |     it(""should handle \\tag* like \\tag"", () => {
       |    ^ Unknown Test
  3829 |         expect`\tag{hi}x+y`.toParseLike(r`\tag*{({hi})}x+y`, displayMode);
  3830 |     });
  3831 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3857}","  3855 |
  3856 | describe(""\\@binrel automatic bin/rel/ord"", () => {
> 3857 |     it(""should generate proper class"", () => {
       |    ^ Unknown Test
  3858 |         expect`L\@binrel+xR`.toParseLike`L\mathbin xR`;
  3859 |         expect`L\@binrel=xR`.toParseLike`L\mathrel xR`;
  3860 |         expect`L\@binrel xxR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3866}","  3864 |     });
  3865 |
> 3866 |     it(""should base on just first character in group"", () => {
       |    ^ Unknown Test
  3867 |         expect`L\@binrel{+x}xR`.toParseLike`L\mathbin xR`;
  3868 |         expect`L\@binrel{=x}xR`.toParseLike`L\mathrel xR`;
  3869 |         expect`L\@binrel{xx}xR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3886}","  3884 |
  3885 | describe(""Unicode accents"", function() {
> 3886 |     it(""should parse Latin-1 letters in math mode"", function() {
       |    ^ Unknown Test
  3887 |         // TODO(edemaine): Unsupported Latin-1 letters in math: ÇÐÞçðþ
  3888 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ`
  3889 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3906}","  3904 |     });
  3905 |
> 3906 |     it(""should parse Latin-1 letters in text mode"", function() {
       |    ^ Unknown Test
  3907 |         // TODO(edemaine): Unsupported Latin-1 letters in text: ÇÐÞçðþ
  3908 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}`
  3909 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3926}","  3924 |     });
  3925 |
> 3926 |     it(""should support \\aa in text mode"", function() {
       |    ^ Unknown Test
  3927 |         expect`\text{\aa\AA}`.toParseLike(r`\text{\r a\r A}`, strictSettings);
  3928 |         expect`\aa`.not.toParse(strictSettings);
  3929 |         expect`\Aa`.not.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3937}","  3935 |     });
  3936 |
> 3937 |     it(""should parse multi-accented characters"", function() {
       |    ^ Unknown Test
  3938 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3939 |         // Doesn't parse quite the same as
  3940 |         // ""\\text{\\'{\\^a}\\'{\\=a}\\'{\\u a}}"" because of the ordgroups.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3943}","  3941 |     });
  3942 |
> 3943 |     it(""should parse accented i's and j's"", function() {
       |    ^ Unknown Test
  3944 |         expect`íȷ́`.toParseLike(r`\acute ı\acute ȷ`, nonstrictSettings);
  3945 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3946 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3950}","  3948 |
  3949 | describe(""Unicode"", function() {
> 3950 |     it(""should parse negated relations"", function() {
       |    ^ Unknown Test
  3951 |         expect`∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌`.toParse(strictSettings);
  3952 |     });
  3953 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3954}","  3952 |     });
  3953 |
> 3954 |     it(""should build relations"", function() {
       |    ^ Unknown Test
  3955 |         expect`∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌`.toBuild(strictSettings);
  3956 |     });
  3957 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3958}","  3956 |     });
  3957 |
> 3958 |     it(""should parse relations"", function() {
       |    ^ Unknown Test
  3959 |         // These characters are not in the KaTeX fonts. So they build with an error message.
  3960 |         expect`⊶⊷`.toParse();
  3961 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3963}","  3961 |     });
  3962 |
> 3963 |     it(""should build big operators"", function() {
       |    ^ Unknown Test
  3964 |         expect`∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆`.toBuild(strictSettings);
  3965 |     });
  3966 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3967}","  3965 |     });
  3966 |
> 3967 |     it(""should build more relations"", function() {
       |    ^ Unknown Test
  3968 |         expect`⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋`.toBuild(strictSettings);
  3969 |     });
  3970 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3981}","  3979 |     });
  3980 |
> 3981 |     it(""should build arrows"", function() {
       |    ^ Unknown Test
  3982 |         expect`←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉`.toBuild(strictSettings);
  3983 |     });
  3984 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3985}","  3983 |     });
  3984 |
> 3985 |     it(""should build more arrows"", function() {
       |    ^ Unknown Test
  3986 |         expect`⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼`.toBuild(strictSettings);
  3987 |     });
  3988 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4071}","  4069 |
  4070 | describe(""The maxExpand setting"", () => {
> 4071 |     it(""should prevent expansion"", () => {
       |    ^ Unknown Test
  4072 |         expect`\gdef\foo{1}\foo`.toParse();
  4073 |         expect`\gdef\foo{1}\foo`.toParse(new Settings({maxExpand: 1}));
  4074 |         expect`\gdef\foo{1}\foo`.not.toParse(new Settings({maxExpand: 0}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4077}","  4075 |     });
  4076 |
> 4077 |     it(""should prevent infinite loops"", () => {
       |    ^ Unknown Test
  4078 |         expect`\gdef\foo{\foo}\foo`.not.toParse(
  4079 |             new Settings({maxExpand: 10}));
  4080 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4082}","  4080 |     });
  4081 |
> 4082 |     it(""should prevent exponential blowup via \\edef"", () => {
       |    ^ Unknown Test
  4083 |         expect`\edef0{x}\edef0{00}\edef0{00}\edef0{00}\edef0{00}`.not.toParse(
  4084 |             new Settings({maxExpand: 10}));
  4085 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4133}","  4131 |
  4132 | describe(""Newlines via \\\\ and \\newline"", function() {
> 4133 |     it(""should build \\\\ without the optional argument and \\newline the same"", () => {
       |    ^ Unknown Test
  4134 |         expect`hello \\ world`.toBuildLike`hello \newline world`;
  4135 |     });
  4136 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4137}","  4135 |     });
  4136 |
> 4137 |     it(""should not allow \\newline to scan for an optional size argument"", () => {
       |    ^ Unknown Test
  4138 |         expect`hello \newline[w]orld`.toBuild();
  4139 |     });
  4140 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4141}","  4139 |     });
  4140 |
> 4141 |     it(""should not allow \\cr at top level"", () => {
       |    ^ Unknown Test
  4142 |         expect`hello \cr world`.not.toBuild();
  4143 |     });
  4144 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4156}","  4154 |
  4155 | describe(""Symbols"", function() {
> 4156 |     it(""should parse \\text{\\i\\j}"", () => {
       |    ^ Unknown Test
  4157 |         expect`\text{\i\j}`.toBuild(strictSettings);
  4158 |     });
  4159 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4160}","  4158 |     });
  4159 |
> 4160 |     it(""should parse spacing functions in math or text mode"", () => {
       |    ^ Unknown Test
  4161 |         expect`A\;B\,C\nobreakspace \text{A\;B\,C\nobreakspace}`.toBuild(strictSettings);
  4162 |     });
  4163 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4164}","  4162 |     });
  4163 |
> 4164 |     it(""should build \\minuso"", () => {
       |    ^ Unknown Test
  4165 |         expect`\\minuso`.toBuild(strictSettings);
  4166 |     });
  4167 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4168}","  4166 |     });
  4167 |
> 4168 |     it(""should render ligature commands like their unicode characters"", () => {
       |    ^ Unknown Test
  4169 |         expect`\text{\ae\AE\oe\OE\o\O\ss}`.toBuildLike(r`\text{æÆœŒøØß}`, strictSettings);
  4170 |     });
  4171 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4174}","  4172 |
  4173 | describe(""strict setting"", function() {
> 4174 |     it(""should allow unicode text when not strict"", () => {
       |    ^ Unknown Test
  4175 |         expect`é`.toParse(new Settings(nonstrictSettings));
  4176 |         expect`試`.toParse(new Settings(nonstrictSettings));
  4177 |         expect`é`.toParse(new Settings({strict: ""ignore""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4185}","  4183 |     });
  4184 |
> 4185 |     it(""should forbid unicode text when strict"", () => {
       |    ^ Unknown Test
  4186 |         expect`é`.not.toParse(new Settings({strict: true}));
  4187 |         expect`試`.not.toParse(new Settings({strict: true}));
  4188 |         expect`é`.not.toParse(new Settings({strict: ""error""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4196}","  4194 |     });
  4195 |
> 4196 |     it(""should warn about unicode text when default"", () => {
       |    ^ Unknown Test
  4197 |         expect`é`.toWarn(new Settings());
  4198 |         expect`試`.toWarn(new Settings());
  4199 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4201}","  4199 |     });
  4200 |
> 4201 |     it(""should always allow unicode text in text mode"", () => {
       |    ^ Unknown Test
  4202 |         expect`\text{é試}`.toParse(nonstrictSettings);
  4203 |         expect`\text{é試}`.toParse(strictSettings);
  4204 |         expect`\text{é試}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4207}","  4205 |     });
  4206 |
> 4207 |     it(""should warn about top-level \\newline in display mode"", () => {
       |    ^ Unknown Test
  4208 |         expect`x\\y`.toWarn(new Settings({displayMode: true}));
  4209 |         expect`x\\y`.toParse(new Settings({displayMode: false}));
  4210 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4256}","  4254 |         }).toThrow(errorMessage);
  4255 |     });
> 4256 |     it(""should add font metrics to metrics map and render successfully"", () => {
       |    ^ Unknown Test
  4257 |         const mockMetrics = {};
  4258 |         // mock font metrics for the symbols that we added previously
  4259 |         for (let number = 0; number <= 9; number++) {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4292}","  4290 |
  4291 | describe(""\\relax"", () => {
> 4292 |     it(""should stop the expansion"", () => {
       |    ^ Unknown Test
  4293 |         expect`\kern2\relax em`.not.toParse();
  4294 |     });
  4295 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4298}","  4296 |
  4297 | describe(""\\emph"", () => {
> 4298 |     it(""should toggle italics"", () => {
       |    ^ Unknown Test
  4299 |         expect`\emph{foo \emph{bar}}`.toBuildLike`\textit{foo \textup{bar}}`;
  4300 |     });
  4301 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4302}","  4300 |     });
  4301 |
> 4302 |     it(""should toggle italics within text"", () => {
       |    ^ Unknown Test
  4303 |         expect`\text{\emph{foo \emph{bar}}}`.toBuildLike`\text{\textit{foo \textup{bar}}}`;
  4304 |     });
  4305 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4306}","  4304 |     });
  4305 |
> 4306 |     it(""should toggle italics within textup"", () => {
       |    ^ Unknown Test
  4307 |         expect`\textup{\emph{foo \emph{bar}}}`.toBuildLike`\textup{\textit{foo \textup{bar}}}`;
  4308 |     });
  4309 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4310}","  4308 |     });
  4309 |
> 4310 |     it(""should toggle italics within textit"", () => {
       |    ^ Unknown Test
  4311 |         expect`\textit{\emph{foo \emph{bar}}}`.toBuildLike`\textit{\textup{foo \textit{bar}}}`;
  4312 |     });
  4313 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 132}","  130 |         });
  131 |         it(""complains about mismatched \\verb with end of line"", function() {
> 132 |             expect(""\\verb|hello\nworld|"").toFailWithParseError(
      |            ^ Redundant Assertion
  133 |                 ""\\verb ended by end of line instead of matching delimiter"");
  134 |         });
  135 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 291}","  289 |     describe(""#_innerLex"", function() {
  290 |         it(""rejects lone surrogate char"", function() {
> 291 |             expect(""\udcba "").toFailWithParseError(
      |            ^ Redundant Assertion
  292 |                    ""Unexpected character: '\udcba' at position 1:"" +
  293 |                     "" \udcba\u0332 "");
  294 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 296}","  294 |         });
  295 |         it(""rejects lone backslash at end of input"", function() {
> 296 |             expect(""\\"").toFailWithParseError(
      |            ^ Redundant Assertion
  297 |                    ""Unexpected character: '\\' at position 1: \\̲"");
  298 |         });
  299 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 8, 'line': 328}","  326 | describe(""Unicode accents"", function() {
  327 |     it(""should return error for invalid combining characters"", function() {
> 328 |         expect(""A\u0328"").toFailWithParseError(
      |        ^ Redundant Assertion
  329 |             ""Unknown accent ' ̨' at position 1: Ą̲̲"");
  330 |     });
  331 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 6}","  4 |
  5 |     describe(""#handleInfixNodes"", function() {
> 6 |         it(""rejects repeated infix operators"", function() {
    |        ^ Unknown Test
  7 |             expect`1\over 2\over 3`.toFailWithParseError(
  8 |                    ""only one infix operator per group at position 9: "" +
  9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 11}","   9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");
  10 |         });
> 11 |         it(""rejects conflicting infix operators"", function() {
     |        ^ Unknown Test
  12 |             expect`1\over 2\choose 3`.toFailWithParseError(
  13 |                    ""only one infix operator per group at position 9: "" +
  14 |                    ""1\\over 2\\̲c̲h̲o̲o̲s̲e̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 19}","  17 |
  18 |     describe(""#handleSupSubscript"", function() {
> 19 |         it(""rejects ^ at end of group"", function() {
     |        ^ Unknown Test
  20 |             expect`{1^}`.toFailWithParseError(
  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 23}","  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });
> 23 |         it(""rejects _ at end of input"", function() {
     |        ^ Unknown Test
  24 |             expect`1_`.toFailWithParseError(
  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 27}","  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });
> 27 |         it(""rejects \\sqrt as argument to ^"", function() {
     |        ^ Unknown Test
  28 |             expect`1^\sqrt{2}`.toFailWithParseError(
  29 |                    ""Got function '\\sqrt' with no arguments as superscript"" +
  30 |                    "" at position 3: 1^\\̲s̲q̲r̲t̲{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 35}","  33 |
  34 |     describe(""#parseAtom"", function() {
> 35 |         it(""rejects \\limits without operator"", function() {
     |        ^ Unknown Test
  36 |             expect`\alpha\limits\omega`.toFailWithParseError(
  37 |                    ""Limit controls must follow a math operator"" +
  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 40}","  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");
  39 |         });
> 40 |         it(""rejects \\limits at the beginning of the input"", function() {
     |        ^ Unknown Test
  41 |             expect`\limits\omega`.toFailWithParseError(
  42 |                    ""Limit controls must follow a math operator"" +
  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 45}","  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");
  44 |         });
> 45 |         it(""rejects double superscripts"", function() {
     |        ^ Unknown Test
  46 |             expect`1^2^3`.toFailWithParseError(
  47 |                    ""Double superscript at position 4: 1^2^̲3"");
  48 |             expect`1^{2+3}_4^5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 51}","  49 |                    ""Double superscript at position 10: 1^{2+3}_4^̲5"");
  50 |         });
> 51 |         it(""rejects double superscripts involving primes"", function() {
     |        ^ Unknown Test
  52 |             expect`1'_2^3`.toFailWithParseError(
  53 |                    ""Double superscript at position 5: 1'_2^̲3"");
  54 |             expect`1^2'`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 61}","  59 |                    ""Double superscript at position 5: 1'_2'̲"");
  60 |         });
> 61 |         it(""rejects double subscripts"", function() {
     |        ^ Unknown Test
  62 |             expect`1_2_3`.toFailWithParseError(
  63 |                    ""Double subscript at position 4: 1_2_̲3"");
  64 |             expect`1_{2+3}^4_5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 70}","  68 |
  69 |     describe(""#parseImplicitGroup"", function() {
> 70 |         it(""reports unknown environments"", function() {
     |        ^ Unknown Test
  71 |             expect`\begin{foo}bar\end{foo}`.toFailWithParseError(
  72 |                    ""No such environment: foo at position 7:"" +
  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 75}","  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");
  74 |         });
> 75 |         it(""reports mismatched environments"", function() {
     |        ^ Unknown Test
  76 |             expect`\begin{pmatrix}1&2\\3&4\end{bmatrix}+5`
  77 |                 .toFailWithParseError(
  78 |                    ""Mismatch: \\begin{pmatrix} matched by \\end{bmatrix}"" +",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 84}","  82 |
  83 |     describe(""#parseFunction"", function() {
> 84 |         it(""rejects math-mode functions in text mode"", function() {
     |        ^ Unknown Test
  85 |             expect`\text{\sqrt2 is irrational}`.toFailWithParseError(
  86 |                 ""Can't use function '\\sqrt' in text mode"" +
  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 89}","  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");
  88 |         });
> 89 |         it(""rejects text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  90 |             expect`$`.toFailWithParseError(
  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 93}","  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });
> 93 |         it(""rejects strict-mode text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  94 |             expect`\'echec`.toFailWithParseError(""LaTeX-incompatible input "" +
  95 |                 ""and strict mode is set to 'error': LaTeX's accent \\' works "" +
  96 |                 ""only in text mode [mathVsTextAccents]"", strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 101}","   99 |
  100 |     describe(""#parseArguments"", function() {
> 101 |         it(""complains about missing argument at end of input"", function() {
      |        ^ Unknown Test
  102 |             expect`2\sqrt`.toFailWithParseError(
  103 |                    ""Expected group as argument to '\\sqrt'"" +
  104 |                    "" at end of input: 2\\sqrt"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 106}","  104 |                    "" at end of input: 2\\sqrt"");
  105 |         });
> 106 |         it(""complains about missing argument at end of group"", function() {
      |        ^ Unknown Test
  107 |             expect`1^{2\sqrt}`.toFailWithParseError(
  108 |                    ""Expected group as argument to '\\sqrt'"" +
  109 |                    "" at position 10: 1^{2\\sqrt}̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 111}","  109 |                    "" at position 10: 1^{2\\sqrt}̲"");
  110 |         });
> 111 |         it(""complains about functions as arguments to others"", function() {
      |        ^ Unknown Test
  112 |             expect`\sqrt\over2`.toFailWithParseError(
  113 |                    ""Got function '\\over' with no arguments as argument to"" +
  114 |                    "" '\\sqrt' at position 6: \\sqrt\\̲o̲v̲e̲r̲2"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 119}","  117 |
  118 |     describe(""#parseGroup"", function() {
> 119 |         it(""complains about undefined control sequence"", function() {
      |        ^ Unknown Test
  120 |             expect`\xyz`.toFailWithParseError(
  121 |                    ""Undefined control sequence: \\xyz"" +
  122 |                    "" at position 1: \\̲x̲y̲z̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 127}","  125 |
  126 |     describe(""#verb"", function() {
> 127 |         it(""complains about mismatched \\verb with end of string"", function() {
      |        ^ Unknown Test
  128 |             expect`\verb|hello`.toFailWithParseError(
  129 |                 ""\\verb ended by end of line instead of matching delimiter"");
  130 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 142}","  140 |
  141 |     describe(""#parseInput expecting EOF"", function() {
> 142 |         it(""complains about extra }"", function() {
      |        ^ Unknown Test
  143 |             expect`{1+2}}`.toFailWithParseError(
  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 146}","  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });
> 146 |         it(""complains about extra \\end"", function() {
      |        ^ Unknown Test
  147 |             expect`x\end{matrix}`.toFailWithParseError(
  148 |                    ""Expected 'EOF', got '\\end' at position 2:"" +
  149 |                    "" x\\̲e̲n̲d̲{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 151}","  149 |                    "" x\\̲e̲n̲d̲{matrix}"");
  150 |         });
> 151 |         it(""complains about top-level &"", function() {
      |        ^ Unknown Test
  152 |             expect`1&2`.toFailWithParseError(
  153 |                    ""Expected 'EOF', got '&' at position 2: 1&̲2"");
  154 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 158}","  156 |
  157 |     describe(""#parseImplicitGroup expecting \\right"", function() {
> 158 |         it(""rejects missing \\right"", function() {
      |        ^ Unknown Test
  159 |             expect`\left(1+2)`.toFailWithParseError(
  160 |                    ""Expected '\\right', got 'EOF' at end of input:"" +
  161 |                    "" \\left(1+2)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 163}","  161 |                    "" \\left(1+2)"");
  162 |         });
> 163 |         it(""rejects incorrectly scoped \\right"", function() {
      |        ^ Unknown Test
  164 |             expect`{\left(1+2}\right)`.toFailWithParseError(
  165 |                    ""Expected '\\right', got '}' at position 11:"" +
  166 |                    "" {\\left(1+2}̲\\right)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 174}","  172 |
  173 |     describe(""#parseSpecialGroup expecting braces"", function() {
> 174 |         it(""complains about missing { for color"", function() {
      |        ^ Unknown Test
  175 |             expect`\textcolor#ffffff{text}`.toFailWithParseError(
  176 |                    ""Invalid color: '#' at position 11:"" +
  177 |                    "" \\textcolor#̲ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 179}","  177 |                    "" \\textcolor#̲ffffff{text}"");
  178 |         });
> 179 |         it(""complains about missing { for size"", function() {
      |        ^ Unknown Test
  180 |             expect`\rule{1em}[2em]`.toFailWithParseError(
  181 |                    ""Invalid size: '[' at position 11: \\rule{1em}[̲2em]"");
  182 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 184}","  182 |         });
  183 |         // Can't test for the [ of an optional group since it's optional
> 184 |         it(""complains about missing } for color"", function() {
      |        ^ Unknown Test
  185 |             expect`\textcolor{#ffffff{text}`.toFailWithParseError(
  186 |                    ""Unexpected end of input in a macro argument,"" +
  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 189}","  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");
  188 |         });
> 189 |         it(""complains about missing ] for size"", function() {
      |        ^ Unknown Test
  190 |             expect`\rule[1em{2em}{3em}`.toFailWithParseError(
  191 |                    ""Unexpected end of input in a macro argument,"" +
  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 194}","  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");
  193 |         });
> 194 |         it(""complains about missing ] for size at end of input"", function() {
      |        ^ Unknown Test
  195 |             expect`\rule[1em`.toFailWithParseError(
  196 |                    ""Unexpected end of input in a macro argument,"" +
  197 |                    "" expected ']' at end of input: \\rule[1em"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 199}","  197 |                    "" expected ']' at end of input: \\rule[1em"");
  198 |         });
> 199 |         it(""complains about missing } for color at end of input"", function() {
      |        ^ Unknown Test
  200 |             expect`\textcolor{#123456`.toFailWithParseError(
  201 |                    ""Unexpected end of input in a macro argument,"" +
  202 |                    "" expected '}' at end of input: …xtcolor{#123456"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 207}","  205 |
  206 |     describe(""#parseGroup expecting }"", function() {
> 207 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  208 |             expect`\sqrt{2`.toFailWithParseError(
  209 |                    ""Expected '}', got 'EOF' at end of input: \\sqrt{2"");
  210 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 214}","  212 |
  213 |     describe(""#parseOptionalGroup expecting ]"", function() {
> 214 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  215 |             expect`\sqrt[3`.toFailWithParseError(
  216 |                    ""Unexpected end of input in a macro argument,"" +
  217 |                    "" expected ']' at end of input: \\sqrt[3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 219}","  217 |                    "" expected ']' at end of input: \\sqrt[3"");
  218 |         });
> 219 |         it(""before group"", function() {
      |        ^ Unknown Test
  220 |             expect`\sqrt[3{2}`.toFailWithParseError(
  221 |                    ""Unexpected end of input in a macro argument,"" +
  222 |                    "" expected ']' at end of input: \\sqrt[3{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 231}","  229 |
  230 |     describe(""parseArray"", function() {
> 231 |         it(""rejects missing \\end"", function() {
      |        ^ Unknown Test
  232 |             expect`\begin{matrix}1`.toFailWithParseError(
  233 |                    ""Expected & or \\\\ or \\cr or \\end at end of input:"" +
  234 |                    "" \\begin{matrix}1"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 236}","  234 |                    "" \\begin{matrix}1"");
  235 |         });
> 236 |         it(""rejects incorrectly scoped \\end"", function() {
      |        ^ Unknown Test
  237 |             expect`{\begin{matrix}1}\end{matrix}`.toFailWithParseError(
  238 |                    ""Expected & or \\\\ or \\cr or \\end at position 17:"" +
  239 |                    "" …\\begin{matrix}1}̲\\end{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 244}","  242 |
  243 |     describe(""array environment"", function() {
> 244 |         it(""rejects unknown column types"", function() {
      |        ^ Unknown Test
  245 |             expect`\begin{array}{cba}\end{array}`.toFailWithParseError(
  246 |                    ""Unknown column alignment: b at position 16:"" +
  247 |                    "" \\begin{array}{cb̲a}\\end{array}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 256}","  254 |
  255 |     describe(""delimiter functions"", function() {
> 256 |         it(""reject invalid opening delimiters"", function() {
      |        ^ Unknown Test
  257 |             expect`\bigl 1 + 2 \bigr`.toFailWithParseError(
  258 |                    ""Invalid delimiter '1' after '\\bigl' at position 7:"" +
  259 |                    "" \\bigl 1̲ + 2 \\bigr"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 261}","  259 |                    "" \\bigl 1̲ + 2 \\bigr"");
  260 |         });
> 261 |         it(""reject invalid closing delimiters"", function() {
      |        ^ Unknown Test
  262 |             expect`\bigl(1+2\bigr=3`.toFailWithParseError(
  263 |                    ""Invalid delimiter '=' after '\\bigr' at position 15:"" +
  264 |                    "" \\bigl(1+2\\bigr=̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 266}","  264 |                    "" \\bigl(1+2\\bigr=̲3"");
  265 |         });
> 266 |         it(""reject group opening delimiters"", function() {
      |        ^ Unknown Test
  267 |             expect`\bigl{(}1+2\bigr)3`.toFailWithParseError(
  268 |                    ""Invalid delimiter type 'ordgroup' at position 6:"" +
  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 271}","  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");
  270 |         });
> 271 |         it(""reject group closing delimiters"", function() {
      |        ^ Unknown Test
  272 |             expect`\bigl(1+2\bigr{)}3`.toFailWithParseError(
  273 |                    ""Invalid delimiter type 'ordgroup' at position 15:"" +
  274 |                    "" \\bigl(1+2\\bigr{̲)̲}̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 279}","  277 |
  278 |     describe(""\\begin and \\end"", function() {
> 279 |         it(""reject invalid environment names"", function() {
      |        ^ Unknown Test
  280 |             expect`\begin x\end y`.toFailWithParseError(
  281 |                    ""No such environment: x at position 8: \\begin x̲\\end y"");
  282 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 302}","  300 |
  301 |     describe(""#_innerLexColor"", function() {
> 302 |         it(""reject 3-digit hex notation without #"", function() {
      |        ^ Unknown Test
  303 |             expect`\textcolor{1a2}{foo}`.toFailWithParseError(
  304 |                    ""Invalid color: '1a2'"" +
  305 |                    "" at position 11: \\textcolor{̲1̲a̲2̲}̲{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 310}","  308 |
  309 |     describe(""#_innerLexSize"", function() {
> 310 |         it(""reject size without unit"", function() {
      |        ^ Unknown Test
  311 |             expect`\rule{0}{2em}`.toFailWithParseError(
  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 314}","  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });
> 314 |         it(""reject size with bogus unit"", function() {
      |        ^ Unknown Test
  315 |             expect`\rule{1au}{2em}`.toFailWithParseError(
  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 318}","  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });
> 318 |         it(""reject size without number"", function() {
      |        ^ Unknown Test
  319 |             expect`\rule{em}{2em}`.toFailWithParseError(
  320 |                    ""Invalid size: 'em' at position 6: \\rule{̲e̲m̲}̲{2em}"");
  321 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 5, 'column': 4, 'index': 124}","  3 |
  4 | describe(""Symbols and macros"", () => {
> 5 |     for (const macro in macros) {
    |    ^ Conditional Test Logic
  6 |         if (!macros.hasOwnProperty(macro)) {
  7 |             continue;
  8 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 6, 'column': 8, 'index': 162}","  4 | describe(""Symbols and macros"", () => {
  5 |     for (const macro in macros) {
> 6 |         if (!macros.hasOwnProperty(macro)) {
    |        ^ Conditional Test Logic
  7 |             continue;
  8 |         }
  9 |         it(`macro ${macro} should not shadow a symbol`, () => {",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 10, 'column': 12, 'index': 307}","   8 |         }
   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
> 10 |             for (const kind in symbols) {
     |            ^ Conditional Test Logic
  11 |                 if (!symbols.hasOwnProperty(kind)) {
  12 |                     continue;
  13 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 11, 'column': 16, 'index': 353}","   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
  10 |             for (const kind in symbols) {
> 11 |                 if (!symbols.hasOwnProperty(kind)) {
     |                ^ Conditional Test Logic
  12 |                     continue;
  13 |                 }
  14 |                 expect(symbols[kind][macro]).toBeFalsy();",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 18, 'column': 12, 'index': 481}","  16 |                   splitAtDelimiters(actual, delimiters);
  17 |
> 18 |             if (split.length !== result.length) {
     |            ^ Conditional Test Logic
  19 |                 message.pass = false;
  20 |                 message.message = () => ""Different number of splits: "" +
  21 |                     split.length + "" vs. "" + result.length + "" ("" +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 27, 'column': 12, 'index': 861}","  25 |             }
  26 |
> 27 |             for (let i = 0; i < split.length; i++) {
     |            ^ Conditional Test Logic
  28 |                 const real = split[i];
  29 |                 const correct = result[i];
  30 |",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 34, 'column': 16, 'index': 1061}","  32 |                 let diff;
  33 |
> 34 |                 if (real.type !== correct.type) {
     |                ^ Conditional Test Logic
  35 |                     good = false;
  36 |                     diff = ""type"";
  37 |                 } else if (real.data !== correct.data) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 37, 'column': 23, 'index': 1187}","  35 |                     good = false;
  36 |                     diff = ""type"";
> 37 |                 } else if (real.data !== correct.data) {
     |                       ^ Conditional Test Logic
  38 |                     good = false;
  39 |                     diff = ""data"";
  40 |                 } else if (real.display !== correct.display) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 40, 'column': 23, 'index': 1313}","  38 |                     good = false;
  39 |                     diff = ""data"";
> 40 |                 } else if (real.display !== correct.display) {
     |                       ^ Conditional Test Logic
  41 |                     good = false;
  42 |                     diff = ""display"";
  43 |                 }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 45, 'column': 16, 'index': 1460}","  43 |                 }
  44 |
> 45 |                 if (!good) {
     |                ^ Conditional Test Logic
  46 |                     message.pass = false;
  47 |                     message.message = () => ""Difference at split "" +
  48 |                         (i + 1) + "": "" + JSON.stringify(real) +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 332, 'column': 8, 'index': 11671}","  330 |             '\\]'];
  331 |         const el = document.createElement('div');
> 332 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  333 |             const txt = document.createTextNode(textNodes[i]);
  334 |             el.appendChild(txt);
  335 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 350, 'column': 8, 'index': 12420}","  348 |             'consectetur adipiscing elit'];
  349 |         const el = document.createElement('div');
> 350 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  351 |             const txt = document.createTextNode(textNodes[i]);
  352 |             el.appendChild(txt);
  353 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 355, 'column': 8, 'index': 12630}","  353 |         }
  354 |         const el2 = document.createElement('div');
> 355 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  356 |             const txt = document.createTextNode(textNodes[i]);
  357 |             el2.appendChild(txt);
  358 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 62}","  60 | describe(""A delimiter splitter"", function() {
  61 |     it(""doesn't split when there are no delimiters"", function() {
> 62 |         expect(""hello"").toSplitInto(
     |        ^ Redundant Assertion
  63 |             [
  64 |                 {type: ""text"", data: ""hello""},
  65 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 72}","  70 |
  71 |     it(""doesn't create a math node with only one left delimiter"", function() {
> 72 |         expect(""hello ( world"").toSplitInto(
     |        ^ Redundant Assertion
  73 |             [
  74 |                 {type: ""text"", data: ""hello ""},
  75 |                 {type: ""text"", data: ""( world""},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 83}","  81 |
  82 |     it(""doesn't split when there's only a right delimiter"", function() {
> 83 |         expect(""hello ) world"").toSplitInto(
     |        ^ Redundant Assertion
  84 |             [
  85 |                 {type: ""text"", data: ""hello ) world""},
  86 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 93}","  91 |
  92 |     it(""splits when there are both delimiters"", function() {
> 93 |         expect(""hello ( world ) boo"").toSplitInto(
     |        ^ Redundant Assertion
  94 |             [
  95 |                 {type: ""text"", data: ""hello ""},
  96 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 106}","  104 |
  105 |     it(""splits on multi-character delimiters"", function() {
> 106 |         expect(""hello [[ world ]] boo"").toSplitInto(
      |        ^ Redundant Assertion
  107 |             [
  108 |                 {type: ""text"", data: ""hello ""},
  109 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 116}","  114 |                 {left: ""[["", right: ""]]"", display: false},
  115 |             ]);
> 116 |         expect(""hello \\begin{equation} world \\end{equation} boo"").toSplitInto(
      |        ^ Redundant Assertion
  117 |             [
  118 |                 {type: ""text"", data: ""hello ""},
  119 |                 {type: ""math"", data: ""\\begin{equation} world \\end{equation}"",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 131}","  129 |
  130 |     it(""splits multiple times"", function() {
> 131 |         expect(""hello ( world ) boo ( more ) stuff"").toSplitInto(
      |        ^ Redundant Assertion
  132 |             [
  133 |                 {type: ""text"", data: ""hello ""},
  134 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 147}","  145 |
  146 |     it(""leaves the ending when there's only a left delimiter"", function() {
> 147 |         expect(""hello ( world ) boo ( left"").toSplitInto(
      |        ^ Redundant Assertion
  148 |             [
  149 |                 {type: ""text"", data: ""hello ""},
  150 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 161}","  159 |
  160 |     it(""doesn't split when close delimiters are in {}s"", function() {
> 161 |         expect(""hello ( world { ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  162 |             [
  163 |                 {type: ""text"", data: ""hello ""},
  164 |                 {type: ""math"", data: "" world { ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 172}","  170 |             ]);
  171 |
> 172 |         expect(""hello ( world { { } ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  173 |             [
  174 |                 {type: ""text"", data: ""hello ""},
  175 |                 {type: ""math"", data: "" world { { } ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 185}","  183 |
  184 |     it(""correctly processes sequences of $..$"", function() {
> 185 |         expect(""$hello$$world$$boo$"").toSplitInto(
      |        ^ Redundant Assertion
  186 |             [
  187 |                 {type: ""math"", data: ""hello"",
  188 |                     rawData: ""$hello$"", display: false},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 200}","  198 |
  199 |     it(""doesn't split at escaped delimiters"", function() {
> 200 |         expect(""hello ( world \\) ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  201 |             [
  202 |                 {type: ""text"", data: ""hello ""},
  203 |                 {type: ""math"", data: "" world \\) "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 224}","  222 |
  223 |     it(""splits when the right and left delimiters are the same"", function() {
> 224 |         expect(""hello $ world $ boo"").toSplitInto(
      |        ^ Redundant Assertion
  225 |             [
  226 |                 {type: ""text"", data: ""hello ""},
  227 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 237}","  235 |
  236 |     it(""ignores \\$"", function() {
> 237 |         expect(""$x = \\$5$"").toSplitInto(
      |        ^ Redundant Assertion
  238 |             [
  239 |                 {type: ""math"", data: ""x = \\$5"",
  240 |                     rawData: ""$x = \\$5$"", display: false},",,
test/unicode-spec.js,SubOptimalAssert,"[{""startLine"":162,""endLine"":162}]",,27.0,2.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1314,""endLine"":1318}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1397,""endLine"":1399}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2818,""endLine"":2820}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2835,""endLine"":2837}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2852,""endLine"":2855}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3123,""endLine"":3126}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3820,""endLine"":3822}]",,556.0,117.0
test/katex-spec.js,OvercommentedTest,"[{""startLine"":4010,""endLine"":4045}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":62,""endLine"":64}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":81,""endLine"":84}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":106,""endLine"":109}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":121,""endLine"":123}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":139,""endLine"":141}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":157,""endLine"":159}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":173,""endLine"":175}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":295,""endLine"":300}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":339,""endLine"":341}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":356,""endLine"":358}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":383,""endLine"":386}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":488,""endLine"":490}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":562,""endLine"":567}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":569,""endLine"":599}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":665,""endLine"":674}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":678,""endLine"":684}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":690,""endLine"":692}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":714,""endLine"":716}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":826,""endLine"":836}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":850,""endLine"":852}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":988,""endLine"":990}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1036,""endLine"":1039}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1095,""endLine"":1105}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1107,""endLine"":1110}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1112,""endLine"":1115}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1133,""endLine"":1147}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1165,""endLine"":1168}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1170,""endLine"":1173}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1175,""endLine"":1178}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1194,""endLine"":1196}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1306,""endLine"":1308}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1541,""endLine"":1554}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1558,""endLine"":1563}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1689,""endLine"":1696}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2073,""endLine"":2090}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2111,""endLine"":2113}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2146,""endLine"":2148}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2257,""endLine"":2263}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2288,""endLine"":2293}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2295,""endLine"":2301}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2305,""endLine"":2311}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2313,""endLine"":2319}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2323,""endLine"":2328}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2330,""endLine"":2336}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2349,""endLine"":2354}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2362,""endLine"":2366}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2370,""endLine"":2375}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2377,""endLine"":2384}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2388,""endLine"":2394}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2402,""endLine"":2406}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2410,""endLine"":2416}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2429,""endLine"":2436}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2444,""endLine"":2448}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2452,""endLine"":2457}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2459,""endLine"":2466}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2470,""endLine"":2475}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2485,""endLine"":2490}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2492,""endLine"":2498}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2525,""endLine"":2528}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2532,""endLine"":2536}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2538,""endLine"":2540}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2544,""endLine"":2548}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2550,""endLine"":2553}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2555,""endLine"":2559}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2561,""endLine"":2564}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2568,""endLine"":2572}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2574,""endLine"":2576}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2580,""endLine"":2585}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2587,""endLine"":2591}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2593,""endLine"":2597}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2601,""endLine"":2610}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2612,""endLine"":2618}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2631,""endLine"":2636}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2640,""endLine"":2642}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2643,""endLine"":2645}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2649,""endLine"":2658}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2669,""endLine"":2680}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2698,""endLine"":2713}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2723,""endLine"":2733}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2747,""endLine"":2753}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2835,""endLine"":2837}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2852,""endLine"":2855}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2861,""endLine"":2863}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2956,""endLine"":2963}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2967,""endLine"":2970}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3412,""endLine"":3415}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3496,""endLine"":3499}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3799,""endLine"":3801}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3820,""endLine"":3822}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":91,""endLine"":94}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":95,""endLine"":100}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1759,""endLine"":1761}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1894,""endLine"":1895}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3167,""endLine"":3167}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3182,""endLine"":3182}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3977,""endLine"":3978}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":508,""endLine"":534}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":569,""endLine"":599}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":1605,""endLine"":1629}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3078,""endLine"":3093}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3501,""endLine"":3517}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":4010,""endLine"":4045}]",,556.0,117.0
test/errors-spec.js,AnonymousTest,"[{""startLine"":219,""endLine"":223}]",,50.0,26.0
test/errors-spec.js,IdenticalTestDescription,"[{""startLine"":214,""endLine"":218}]",,50.0,26.0
