file,type,smells,frame,itCount,describeCount
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 20, 'column': 8, 'index': 1016}","  18 |     it(""should not parse Latin-1 outside \\text{} with strict"", function() {
  19 |         const chars = 'ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ';
> 20 |         for (const ch of chars) {
     |        ^ Conditional Test Logic
  21 |             expect(ch).not.toParse(strictSettings);
  22 |         }
  23 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 144, 'column': 8, 'index': 5144}","  142 |
  143 |     it(""supportedCodepoint() should return the correct values"", () => {
> 144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |        ^ Conditional Test Logic
  145 |             expect(supportedCodepoint(codepoint)).toBe(
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 152, 'column': 15, 'index': 5441}","  150 |
  151 |     it(""scriptFromCodepoint() should return correct values"", () => {
> 152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |               ^ Conditional Test Logic
  153 |             const character = String.fromCharCode(codepoint);
  154 |             const script = scriptFromCodepoint(codepoint);
  155 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 156, 'column': 12, 'index': 5635}","  154 |             const script = scriptFromCodepoint(codepoint);
  155 |
> 156 |             for (const scriptName of scriptNames) {
      |            ^ Conditional Test Logic
  157 |                 if (scriptRegExps[scriptName].test(character)) {
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 157, 'column': 16, 'index': 5691}","  155 |
  156 |             for (const scriptName of scriptNames) {
> 157 |                 if (scriptRegExps[scriptName].test(character)) {
      |                ^ Conditional Test Logic
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;
  160 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 158, 'column': 20, 'index': 5760}","  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {
> 158 |                     expect(script).toEqual(scriptName);
      |                    ^ Duplicate Assert
  159 |                     continue outer;
  160 |                 }
  161 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 163, 'column': 12, 'index': 5877}","  161 |             }
  162 |
> 163 |             expect(script).toBe(null);
      |            ^ Duplicate Assert
  164 |             expect(supportedCodepoint(codepoint)).toBe(false);
  165 |         }
  166 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 154, 'column': 27, 'index': 5590}","  152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
  153 |             const character = String.fromCharCode(codepoint);
> 154 |             const script = scriptFromCodepoint(codepoint);
      |                           ^ Eager Test
  155 |
  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Eager Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 145, 'column': 19, 'index': 5223}","  143 |     it(""supportedCodepoint() should return the correct values"", () => {
  144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
> 145 |             expect(supportedCodepoint(codepoint)).toBe(
      |                   ^ Lazy Test
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );
  148 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Lazy Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 7}","   5 |
   6 | describe(""unicode"", function() {
>  7 |     it(""should build Latin-1 inside \\text{}"", function() {
     |    ^ Unknown Test
   8 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}`
   9 |             .toBuild();
  10 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 12}","  10 |     });
  11 |
> 12 |     it(""should build Latin-1 inside \\text{} like accent commands"", function() {
     |    ^ Unknown Test
  13 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}`
  14 |             .toParseLike`\text{\`A\'A\^A\~A\""A\r A\`E\'E\^E\""E\`I\'I\^I\""I\~N\`O\'O\^O\~O\""O\`U\'U\^U\""U\'Y\`a\'a\^a\~a\""a\r a\`e\'e\^e\""e\`ı\'ı\^ı\""ı\~n\`o\'o\^o\~o\""o\`u\'u\^u\""u\'y\""y\c C\c c}`;
  15 |         // TODO(edemaine): A few characters don't have analogs yet.",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 25}","  23 |     });
  24 |
> 25 |     it(""should build Latin-1 outside \\text{}"", function() {
     |    ^ Unknown Test
  26 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ`
  27 |             .toBuild(nonstrictSettings);
  28 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 30}","  28 |     });
  29 |
> 30 |     it(""should build all lower case Greek letters"", function() {
     |    ^ Unknown Test
  31 |         expect`αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω`.toBuild();
  32 |     });
  33 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 34}","  32 |     });
  33 |
> 34 |     it(""should build math upper case Greek letters"", function() {
     |    ^ Unknown Test
  35 |         expect`ΓΔΘΛΞΠΣΥΦΨΩ`.toBuild();
  36 |     });
  37 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 38}","  36 |     });
  37 |
> 38 |     it(""should build Cyrillic inside \\text{}"", function() {
     |    ^ Unknown Test
  39 |         expect`\text{БГДЖЗЙЛФЦШЫЮЯ}`.toBuild();
  40 |     });
  41 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 42}","  40 |     });
  41 |
> 42 |     it(""should build Cyrillic outside \\text{}"", function() {
     |    ^ Unknown Test
  43 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.toBuild(nonstrictSettings);
  44 |     });
  45 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 46}","  44 |     });
  45 |
> 46 |     it(""should not parse Cyrillic outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  47 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.not.toParse(strictSettings);
  48 |     });
  49 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 50}","  48 |     });
  49 |
> 50 |     it(""should build CJK inside \\text{}"", function() {
     |    ^ Unknown Test
  51 |         expect`\text{私はバナナです}`.toBuild();
  52 |         expect`\text{여보세요}`.toBuild();
  53 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 55}","  53 |     });
  54 |
> 55 |     it(""should build CJK outside \\text{}"", function() {
     |    ^ Unknown Test
  56 |         expect`私はバナナです`.toBuild(nonstrictSettings);
  57 |         expect`여보세요`.toBuild(nonstrictSettings);
  58 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 60}","  58 |     });
  59 |
> 60 |     it(""should not parse CJK outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  61 |         expect`私はバナナです。`.not.toParse(strictSettings);
  62 |         expect`여보세요`.not.toParse(strictSettings);
  63 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 65}","  63 |     });
  64 |
> 65 |     it(""should build Devanagari inside \\text{}"", function() {
     |    ^ Unknown Test
  66 |         expect`\text{नमस्ते}`.toBuild();
  67 |     });
  68 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 69}","  67 |     });
  68 |
> 69 |     it(""should build Devanagari outside \\text{}"", function() {
     |    ^ Unknown Test
  70 |         expect`नमस्ते`.toBuild(nonstrictSettings);
  71 |     });
  72 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 73}","  71 |     });
  72 |
> 73 |     it(""should not parse Devanagari outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  74 |         expect`नमस्ते`.not.toParse(strictSettings);
  75 |     });
  76 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 77}","  75 |     });
  76 |
> 77 |     it(""should build Georgian inside \\text{}"", function() {
     |    ^ Unknown Test
  78 |         expect`\text{გამარჯობა}`.toBuild();
  79 |     });
  80 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 81}","  79 |     });
  80 |
> 81 |     it(""should build Georgian outside \\text{}"", function() {
     |    ^ Unknown Test
  82 |         expect`გამარჯობა`.toBuild(nonstrictSettings);
  83 |     });
  84 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 85}","  83 |     });
  84 |
> 85 |     it(""should not parse Georgian outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  86 |         expect`გამარჯობა`.not.toParse(strictSettings);
  87 |     });
  88 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 89}","  87 |     });
  88 |
> 89 |     it(""should build Armenian both inside and outside \\text{}"", function() {
     |    ^ Unknown Test
  90 |         expect`ԱԲԳաբգ`.toBuild(nonstrictSettings);
  91 |         expect`\text{ԱԲԳաբգ}`.toBuild(nonstrictSettings);
  92 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 94}","  92 |     });
  93 |
> 94 |     it(""should build extended Latin characters inside \\text{}"", function() {
     |    ^ Unknown Test
  95 |         expect`\text{ěščřžůřťďňőİı}`.toBuild();
  96 |     });
  97 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 98}","   96 |     });
   97 |
>  98 |     it(""should not parse extended Latin outside \\text{} with strict"", function() {
      |    ^ Unknown Test
   99 |         expect`ěščřžůřťďňőİı`.not.toParse(strictSettings);
  100 |     });
  101 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 102}","  100 |     });
  101 |
> 102 |     it(""should not allow emoji in strict mode"", function() {
      |    ^ Unknown Test
  103 |         expect`✌`.not.toParse(strictSettings);
  104 |         expect`\text{✌}`.not.toParse(strictSettings);
  105 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 113}","  111 |     });
  112 |
> 113 |     it(""should allow emoji outside strict mode"", function() {
      |    ^ Unknown Test
  114 |         expect`✌`.toWarn();
  115 |         expect`\text{✌}`.toWarn();
  116 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 4, 'column': 4, 'index': 98}","  2 |
  3 | describe(""Screenshotter item"", function() {
> 4 |     for (const key in data) {
    |    ^ Conditional Test Logic
  5 |         if (data.hasOwnProperty(key)) {
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 5, 'column': 8, 'index': 132}","  3 | describe(""Screenshotter item"", function() {
  4 |     for (const key in data) {
> 5 |         if (data.hasOwnProperty(key)) {
    |        ^ Conditional Test Logic
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {
  8 |                 expect(item.tex).toBuild({",,
/home/gabriel/Desktop/research/projects/katex/test/mathml-spec.js,Conditional Test Logic,"{'line': 9, 'column': 4, 'index': 300}","   7 | const getMathML = function(expr, settings = new Settings()) {
   8 |     let startStyle = Style.TEXT;
>  9 |     if (settings.displayMode) {
     |    ^ Conditional Test Logic
  10 |         startStyle = Style.DISPLAY;
  11 |     }
  12 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 46, 'column': 8, 'index': 1257}","  44 |         const parse = getParsed(expression);
  45 |
> 46 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  47 |             const group = parse[i];
  48 |             expect(group.type).toMatch(""ord"");
  49 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 55, 'column': 8, 'index': 1515}","  53 |         const parse = getParsed(expression);
  54 |
> 55 |         for (let i = 0; i < expression.length; i++) {
     |        ^ Conditional Test Logic
  56 |             expect(parse[i].type).toBe(""ord"");
  57 |         }
  58 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 77, 'column': 8, 'index': 2077}","  75 |         const parse = getParsed(expression);
  76 |
> 77 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  78 |             const group = parse[i];
  79 |             expect(group.type).toEqual(""atom"");
  80 |             expect(group.family).toEqual(""bin"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 97, 'column': 8, 'index': 2672}","   95 |         const parse = getParsed(expression);
   96 |
>  97 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
   98 |             let group = parse[i];
   99 |             if (group.type === ""htmlmathml"") {
  100 |                 expect(group.html).toHaveLength(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 99, 'column': 12, 'index': 2759}","   97 |         for (let i = 0; i < parse.length; i++) {
   98 |             let group = parse[i];
>  99 |             if (group.type === ""htmlmathml"") {
      |            ^ Conditional Test Logic
  100 |                 expect(group.html).toHaveLength(1);
  101 |                 group = group.html[0];
  102 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 103, 'column': 12, 'index': 2911}","  101 |                 group = group.html[0];
  102 |             }
> 103 |             if (group.type === ""mclass"") {
      |            ^ Conditional Test Logic
  104 |                 expect(group.mclass).toEqual(""mrel"");
  105 |             } else {
  106 |                 expect(group.type).toEqual(""atom"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 136, 'column': 8, 'index': 3927}","  134 |         const parse = getParsed(expression);
  135 |
> 136 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  137 |             const group = parse[i];
  138 |             expect(group.type).toEqual(""atom"");
  139 |             expect(group.family).toEqual(""punct"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 154, 'column': 8, 'index': 4388}","  152 |         const parse = getParsed(expression);
  153 |
> 154 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  155 |             const group = parse[i];
  156 |             expect(group.type).toEqual(""atom"");
  157 |             expect(group.family).toEqual(""open"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 172, 'column': 8, 'index': 4851}","  170 |         const parse = getParsed(expression);
  171 |
> 172 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  173 |             const group = parse[i];
  174 |             expect(group.type).toEqual(""atom"");
  175 |             expect(group.family).toEqual(""close"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1270, 'column': 4, 'index': 40651}","  1268 |     ];
  1269 |
> 1270 |     for (const [actual, expected] of cases) {
       |    ^ Conditional Test Logic
  1271 |         it(`should build ""${actual}"" like ""${expected}""`, () => {
  1272 |             expect(actual).toBuildLike(expected);
  1273 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1419, 'column': 8, 'index': 45897}","  1417 |         ];
  1418 |
> 1419 |         for (let i = 0; i < missingGroups.length; i++) {
       |        ^ Conditional Test Logic
  1420 |             expect(missingGroups[i]).not.toParse();
  1421 |         }
  1422 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1446, 'column': 8, 'index': 46858}","  1444 |         ];
  1445 |
> 1446 |         for (let i = 0; i < badArguments.length; i++) {
       |        ^ Conditional Test Logic
  1447 |             expect(badArguments[i]).not.toParse();
  1448 |         }
  1449 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1464, 'column': 8, 'index': 47424}","  1462 |         ];
  1463 |
> 1464 |         for (let i = 0; i < goodArguments.length; i++) {
       |        ^ Conditional Test Logic
  1465 |             expect(goodArguments[i]).toParse();
  1466 |         }
  1467 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1477, 'column': 8, 'index': 47780}","  1475 |         ];
  1476 |
> 1477 |         for (let i = 0; i < badSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1478 |             expect(badSupSubscripts[i]).not.toParse();
  1479 |         }
  1480 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1490, 'column': 8, 'index': 48159}","  1488 |         ];
  1489 |
> 1490 |         for (let i = 0; i < goodSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1491 |             expect(goodSupSubscripts[i]).toParse();
  1492 |         }
  1493 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1528, 'column': 8, 'index': 49391}","  1526 |         ];
  1527 |
> 1528 |         for (let i = 0; i < badLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1529 |             expect(badLeftArguments[i]).not.toParse();
  1530 |         }
  1531 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1542, 'column': 8, 'index': 49868}","  1540 |         ];
  1541 |
> 1542 |         for (let i = 0; i < goodLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1543 |             expect(goodLeftArguments[i]).toParse();
  1544 |         }
  1545 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 2180, 'column': 8, 'index': 77818}","  2178 |
  2179 |     it(""should throw Error when HTML attribute name is invalid"", function() {
> 2180 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
       |        ^ Conditional Test Logic
  2181 |             try {
  2182 |                 katex.renderToString(
  2183 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 3843, 'column': 4, 'index': 141755}","  3841 | describe(""leqno and fleqn rendering options"", () => {
  3842 |     const expr = r`\tag{hi}x+y`;
> 3843 |     for (const opt of [""leqno"", ""fleqn""]) {
       |    ^ Conditional Test Logic
  3844 |         it(`should not add ${opt} class by default`, () => {
  3845 |             const settings = new Settings({displayMode: true});
  3846 |             const built = katex.__renderToDomTree(expr, settings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4248, 'column': 8, 'index': 158695}","  4246 |         // add eastern arabic numbers to symbols table
  4247 |         // these symbols are ۰۱۲۳۴۵۶۷۸۹ and ٠١٢٣٤٥٦٧٨٩
> 4248 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4249 |             const persianNum = String.fromCharCode(0x0660 + number);
  4250 |             katex.__defineSymbol(
  4251 |                 ""math"", fontName, ""textord"", persianNum, persianNum);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4267, 'column': 8, 'index': 159641}","  4265 |         const mockMetrics = {};
  4266 |         // mock font metrics for the symbols that we added previously
> 4267 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4268 |             mockMetrics[0x0660 + number] = [-0.00244140625, 0.6875, 0, 0];
  4269 |             mockMetrics[0x06F0 + number] = [-0.00244140625, 0.6875, 0, 0];
  4270 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 582, 'column': 8, 'index': 17317}","  580 |         parse = getParsed(simpleOver)[0];
  581 |
> 582 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  583 |         expect(parse.numer).toBeDefined();
  584 |         expect(parse.denom).toBeDefined();
  585 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 582, 'column': 8, 'index': 17317}","  580 |         parse = getParsed(simpleOver)[0];
  581 |
> 582 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  583 |         expect(parse.numer).toBeDefined();
  584 |         expect(parse.denom).toBeDefined();
  585 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 583, 'column': 8, 'index': 17364}","  581 |
  582 |         expect(parse.type).toEqual(""genfrac"");
> 583 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  584 |         expect(parse.denom).toBeDefined();
  585 |
  586 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 583, 'column': 8, 'index': 17364}","  581 |
  582 |         expect(parse.type).toEqual(""genfrac"");
> 583 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  584 |         expect(parse.denom).toBeDefined();
  585 |
  586 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 584, 'column': 8, 'index': 17407}","  582 |         expect(parse.type).toEqual(""genfrac"");
  583 |         expect(parse.numer).toBeDefined();
> 584 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  585 |
  586 |         parse = getParsed(complexOver)[0];
  587 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 584, 'column': 8, 'index': 17407}","  582 |         expect(parse.type).toEqual(""genfrac"");
  583 |         expect(parse.numer).toBeDefined();
> 584 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  585 |
  586 |         parse = getParsed(complexOver)[0];
  587 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 588, 'column': 8, 'index': 17495}","  586 |         parse = getParsed(complexOver)[0];
  587 |
> 588 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  589 |         expect(parse.numer).toBeDefined();
  590 |         expect(parse.denom).toBeDefined();
  591 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 588, 'column': 8, 'index': 17495}","  586 |         parse = getParsed(complexOver)[0];
  587 |
> 588 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  589 |         expect(parse.numer).toBeDefined();
  590 |         expect(parse.denom).toBeDefined();
  591 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 589, 'column': 8, 'index': 17542}","  587 |
  588 |         expect(parse.type).toEqual(""genfrac"");
> 589 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  590 |         expect(parse.denom).toBeDefined();
  591 |
  592 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 589, 'column': 8, 'index': 17542}","  587 |
  588 |         expect(parse.type).toEqual(""genfrac"");
> 589 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  590 |         expect(parse.denom).toBeDefined();
  591 |
  592 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 590, 'column': 8, 'index': 17585}","  588 |         expect(parse.type).toEqual(""genfrac"");
  589 |         expect(parse.numer).toBeDefined();
> 590 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  591 |
  592 |         const parseBraceFrac = getParsed(braceFrac)[0];
  593 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 590, 'column': 8, 'index': 17585}","  588 |         expect(parse.type).toEqual(""genfrac"");
  589 |         expect(parse.numer).toBeDefined();
> 590 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  591 |
  592 |         const parseBraceFrac = getParsed(braceFrac)[0];
  593 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1647, 'column': 8, 'index': 53637}","  1645 |         expect(bbBody).toHaveLength(3);
  1646 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1647 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1648 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1649 |         expect(bbBody[2].type).toEqual(""font"");
  1650 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1647, 'column': 8, 'index': 53637}","  1645 |         expect(bbBody).toHaveLength(3);
  1646 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1647 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1648 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1649 |         expect(bbBody[2].type).toEqual(""font"");
  1650 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1649, 'column': 8, 'index': 53735}","  1647 |         expect(bbBody[2].type).toEqual(""font"");
  1648 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1649 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1650 |     });
  1651 |
  1652 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1649, 'column': 8, 'index': 53735}","  1647 |         expect(bbBody[2].type).toEqual(""font"");
  1648 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1649 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1650 |     });
  1651 |
  1652 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1842, 'column': 8, 'index': 61290}","  1840 |     it(""should render \\text{R\\textit{S}T} with the correct fonts"", function() {
  1841 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
> 1842 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
       |        ^ Duplicate Assert
  1843 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
  1844 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1845 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1843, 'column': 8, 'index': 61357}","  1841 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
  1842 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
> 1843 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
       |        ^ Duplicate Assert
  1844 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1845 |     });
  1846 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1844, 'column': 8, 'index': 61431}","  1842 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
  1843 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
> 1844 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
       |        ^ Duplicate Assert
  1845 |     });
  1846 |
  1847 |     it(""should render \\textbf{R } with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1868, 'column': 8, 'index': 62622}","  1866 |     it(""should render \\textsf{\\textit{R}G\\textbf{B}} with the correct font"", function() {
  1867 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
> 1868 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
       |        ^ Duplicate Assert
  1869 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
  1870 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1871 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1869, 'column': 8, 'index': 62703}","  1867 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
  1868 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
> 1869 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
       |        ^ Duplicate Assert
  1870 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1871 |     });
  1872 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1870, 'column': 8, 'index': 62777}","  1868 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
  1869 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
> 1870 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
       |        ^ Duplicate Assert
  1871 |     });
  1872 |
  1873 |     it(""should render \\textsf{\\textbf{$\\mathrm{A}$}} with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1891, 'column': 8, 'index': 63852}","  1889 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1890 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1891 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1892 |
  1893 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1894 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1891, 'column': 8, 'index': 63852}","  1889 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1890 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1891 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1892 |
  1893 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1894 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1895, 'column': 8, 'index': 64042}","  1893 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1894 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1895 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1896 |     });
  1897 |
  1898 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1895, 'column': 8, 'index': 64042}","  1893 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1894 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1895 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1896 |     });
  1897 |
  1898 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2088, 'column': 8, 'index': 74315}","  2086 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2087 |             ""</mstyle>"";
> 2088 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2089 |
  2090 |         // reverse the order of the commands
  2091 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2088, 'column': 8, 'index': 74315}","  2086 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2087 |             ""</mstyle>"";
> 2088 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2089 |
  2090 |         // reverse the order of the commands
  2091 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2097, 'column': 8, 'index': 74676}","  2095 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2096 |             ""</mstyle>"";
> 2097 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2098 |     });
  2099 |
  2100 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2097, 'column': 8, 'index': 74676}","  2095 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2096 |             ""</mstyle>"";
> 2097 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2098 |     });
  2099 |
  2100 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2111, 'column': 8, 'index': 75237}","  2109 |         const tree = getParsed(tex);
  2110 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
> 2111 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
       |        ^ Duplicate Assert
  2112 |         expect(markup).toContain(
  2113 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2114 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2112, 'column': 8, 'index': 75308}","  2110 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2111 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
> 2112 |         expect(markup).toContain(
       |        ^ Duplicate Assert
  2113 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2114 |     });
  2115 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2209, 'column': 8, 'index': 78871}","  2207 |         const built = getBuilt`+ x`;
  2208 |
> 2209 |         expect(built[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2210 |         expect(built[0].classes).not.toContain(""mbin"");
  2211 |     });
  2212 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2210, 'column': 8, 'index': 78923}","  2208 |
  2209 |         expect(built[0].classes).toContain(""mord"");
> 2210 |         expect(built[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2211 |     });
  2212 |
  2213 |     it(""should create ords after some other objects"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2244, 'column': 8, 'index': 80439}","  2242 |         const markup = katex.renderToString(r`\sigma^2`);
  2243 |         expect(markup.indexOf(""<span"")).toBe(0);
> 2244 |         expect(markup).toContain(""\u03c3"");  // sigma
       |        ^ Duplicate Assert
  2245 |         expect(markup).toContain(""margin-right"");
  2246 |         expect(markup).not.toContain(""marginRight"");
  2247 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2245, 'column': 8, 'index': 80493}","  2243 |         expect(markup.indexOf(""<span"")).toBe(0);
  2244 |         expect(markup).toContain(""\u03c3"");  // sigma
> 2245 |         expect(markup).toContain(""margin-right"");
       |        ^ Duplicate Assert
  2246 |         expect(markup).not.toContain(""marginRight"");
  2247 |     });
  2248 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2246, 'column': 8, 'index': 80543}","  2244 |         expect(markup).toContain(""\u03c3"");  // sigma
  2245 |         expect(markup).toContain(""margin-right"");
> 2246 |         expect(markup).not.toContain(""marginRight"");
       |        ^ Duplicate Assert
  2247 |     });
  2248 |
  2249 |     it(""generates both MathML and HTML"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2252, 'column': 8, 'index': 80710}","  2250 |         const markup = katex.renderToString(""a"");
  2251 |
> 2252 |         expect(markup).toContain(""<span"");
       |        ^ Duplicate Assert
  2253 |         expect(markup).toContain(""<math"");
  2254 |     });
  2255 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2253, 'column': 8, 'index': 80753}","  2251 |
  2252 |         expect(markup).toContain(""<span"");
> 2253 |         expect(markup).toContain(""<math"");
       |        ^ Duplicate Assert
  2254 |     });
  2255 | });
  2256 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2305, 'column': 8, 'index': 82216}","  2303 |     it(""should produce mords"", function() {
  2304 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
> 2305 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2306 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2307 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2308 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2306, 'column': 8, 'index': 82279}","  2304 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
  2305 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
> 2306 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2307 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2308 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2309 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2307, 'column': 8, 'index': 82346}","  2305 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
  2306 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
> 2307 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2308 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2309 |     });
  2310 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2308, 'column': 8, 'index': 82411}","  2306 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2307 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
> 2308 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2309 |     });
  2310 | });
  2311 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2323, 'column': 8, 'index': 82928}","  2321 |     it(""should produce mords"", function() {
  2322 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
> 2323 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2324 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2325 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2326 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2324, 'column': 8, 'index': 82995}","  2322 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
  2323 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
> 2324 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2325 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2326 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2327 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2325, 'column': 8, 'index': 83066}","  2323 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
  2324 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
> 2325 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2326 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2327 |     });
  2328 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2326, 'column': 8, 'index': 83135}","  2324 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2325 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
> 2326 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2327 |     });
  2328 | });
  2329 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2340, 'column': 8, 'index': 83653}","  2338 |     it(""should produce mords"", function() {
  2339 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
> 2340 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2341 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2342 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2343 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2341, 'column': 8, 'index': 83727}","  2339 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
  2340 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
> 2341 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2342 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2343 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2344 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2342, 'column': 8, 'index': 83805}","  2340 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
  2341 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
> 2342 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2343 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2344 |     });
  2345 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2343, 'column': 8, 'index': 83881}","  2341 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2342 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
> 2343 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2344 |     });
  2345 | });
  2346 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2387, 'column': 8, 'index': 85370}","  2385 |     it(""should produce mords"", function() {
  2386 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
> 2387 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2388 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2389 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2390 |         expect(getBuilt`\underrightarrow )^2`[0].classes)",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2388, 'column': 8, 'index': 85445}","  2386 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
  2387 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
> 2388 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2389 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2390 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2391 |             .not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2389, 'column': 8, 'index': 85524}","  2387 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
  2388 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
> 2389 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2390 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2391 |             .not.toContain(""mclose"");
  2392 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2390, 'column': 8, 'index': 85601}","  2388 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2389 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
> 2390 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
       |        ^ Duplicate Assert
  2391 |             .not.toContain(""mclose"");
  2392 |     });
  2393 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2429, 'column': 8, 'index': 86904}","  2427 |         expect(getBuilt`\xrightarrow x`[0].classes).toContain(""mrel"");
  2428 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
> 2429 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2430 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2431 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2432 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2430, 'column': 8, 'index': 86975}","  2428 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
  2429 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
> 2430 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2431 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2432 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2433 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2431, 'column': 8, 'index': 87050}","  2429 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
  2430 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
> 2431 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2432 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2433 |     });
  2434 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2432, 'column': 8, 'index': 87123}","  2430 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2431 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
> 2432 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2433 |     });
  2434 | });
  2435 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2470, 'column': 8, 'index': 88368}","  2468 |         expect(getBuilt`\overbrace x`[0].classes).toContain(""mord"");
  2469 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
> 2470 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2471 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2472 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2473 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2471, 'column': 8, 'index': 88437}","  2469 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
  2470 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
> 2471 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2472 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2473 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2474 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2472, 'column': 8, 'index': 88510}","  2470 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
  2471 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
> 2472 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2473 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2474 |     });
  2475 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2473, 'column': 8, 'index': 88581}","  2471 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2472 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
> 2473 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2474 |     });
  2475 | });
  2476 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2502, 'column': 8, 'index': 89417}","  2500 |     it(""should produce mords"", function() {
  2501 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
> 2502 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2503 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2504 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2505 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2503, 'column': 8, 'index': 89482}","  2501 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
  2502 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
> 2503 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2504 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2505 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2506 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2504, 'column': 8, 'index': 89551}","  2502 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
  2503 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
> 2504 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2505 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2506 |     });
  2507 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2505, 'column': 8, 'index': 89618}","  2503 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2504 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
> 2505 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2506 |     });
  2507 | });
  2508 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2622, 'column': 8, 'index': 93407}","  2620 |     it(""should produce mords"", function() {
  2621 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
> 2622 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2623 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2624 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2625 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2623, 'column': 8, 'index': 93473}","  2621 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
  2622 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
> 2623 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2624 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2625 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2626 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2624, 'column': 8, 'index': 93543}","  2622 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
  2623 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
> 2624 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2625 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2626 |     });
  2627 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2625, 'column': 8, 'index': 93611}","  2623 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2624 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
> 2625 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2626 |     });
  2627 | });
  2628 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3473, 'column': 8, 'index': 126751}","  3471 |     it(""\\char produces literal characters"", () => {
  3472 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3473 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Duplicate Assert
  3474 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3475 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3476 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3474, 'column': 8, 'index': 126802}","  3472 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3473 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3474 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Duplicate Assert
  3475 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3476 |         expect`\char`.not.toParse();
  3477 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3475, 'column': 8, 'index': 126854}","  3473 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3474 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3475 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Duplicate Assert
  3476 |         expect`\char`.not.toParse();
  3477 |         expect(""\\char`"").not.toParse();
  3478 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4107, 'column': 8, 'index': 152976}","  4105 |         const example = exp32 + r`\a{1}`;
  4106 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
> 4107 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4108 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4109 |     });
  4110 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4108, 'column': 8, 'index': 153043}","  4106 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
  4107 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4108 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4109 |     });
  4110 |
  4111 |     it(""should count correctly with Unicode sub/superscripts"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4114, 'column': 8, 'index': 153312}","  4112 |         const example = exp32 + r`\def+{\a{1}}x⁺x⁺x⁺x⁺`;
  4113 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
> 4114 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4115 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4116 |     });
  4117 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4115, 'column': 8, 'index': 153379}","  4113 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
  4114 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4115 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4116 |     });
  4117 | });
  4118 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4157, 'column': 8, 'index': 155026}","  4155 |         // Ensure newlines appear outside base spans (because, in this regexp,
  4156 |         // base span occurs immediately after each newline span).
> 4157 |         expect(markup).toMatch(
       |        ^ Duplicate Assert
  4158 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
  4159 |         expect(markup).toMatchSnapshot();
  4160 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4159, 'column': 8, 'index': 155166}","  4157 |         expect(markup).toMatch(
  4158 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
> 4159 |         expect(markup).toMatchSnapshot();
       |        ^ Duplicate Assert
  4160 |     });
  4161 | });
  4162 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 517, 'column': 27, 'index': 15202}","  515 |
  516 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 517 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Eager Test
  518 |
  519 |         expect(dfracParse.type).toEqual(""genfrac"");
  520 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 523, 'column': 27, 'index': 15410}","  521 |         expect(dfracParse.denom).toBeDefined();
  522 |
> 523 |         const tfracParse = getParsed(tfracExpression)[0];
      |                           ^ Eager Test
  524 |
  525 |         expect(tfracParse.type).toEqual(""genfrac"");
  526 |         expect(tfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 529, 'column': 27, 'index': 15618}","  527 |         expect(tfracParse.denom).toBeDefined();
  528 |
> 529 |         const cfracParse = getParsed(cfracExpression)[0];
      |                           ^ Eager Test
  530 |
  531 |         expect(cfracParse.type).toEqual(""genfrac"");
  532 |         expect(cfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 535, 'column': 29, 'index': 15828}","  533 |         expect(cfracParse.denom).toBeDefined();
  534 |
> 535 |         const genfracParse = getParsed(genfrac1)[0];
      |                             ^ Eager Test
  536 |
  537 |         expect(genfracParse.type).toEqual(""genfrac"");
  538 |         expect(genfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 580, 'column': 16, 'index': 17282}","  578 |         let parse;
  579 |
> 580 |         parse = getParsed(simpleOver)[0];
      |                ^ Eager Test
  581 |
  582 |         expect(parse.type).toEqual(""genfrac"");
  583 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 586, 'column': 16, 'index': 17459}","  584 |         expect(parse.denom).toBeDefined();
  585 |
> 586 |         parse = getParsed(complexOver)[0];
      |                ^ Eager Test
  587 |
  588 |         expect(parse.type).toEqual(""genfrac"");
  589 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 592, 'column': 31, 'index': 17652}","  590 |         expect(parse.denom).toBeDefined();
  591 |
> 592 |         const parseBraceFrac = getParsed(braceFrac)[0];
      |                               ^ Eager Test
  593 |
  594 |         expect(parseBraceFrac.type).toEqual(""genfrac"");
  595 |         expect(parseBraceFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 600, 'column': 31, 'index': 17983}","  598 |         expect(parseBraceFrac.rightDelim).toBeDefined();
  599 |
> 600 |         const parseBrackFrac = getParsed(brackFrac)[0];
      |                               ^ Eager Test
  601 |
  602 |         expect(parseBrackFrac.type).toEqual(""genfrac"");
  603 |         expect(parseBrackFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 877, 'column': 23, 'index': 27944}","  875 |
  876 |     it(""should correctly extract the custom color"", function() {
> 877 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Eager Test
  878 |         const parse2 = getParsed(customColorExpression2)[0];
  879 |         const parse3 = getParsed(customColorExpression3)[0];
  880 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 878, 'column': 23, 'index': 28005}","  876 |     it(""should correctly extract the custom color"", function() {
  877 |         const parse1 = getParsed(customColorExpression1)[0];
> 878 |         const parse2 = getParsed(customColorExpression2)[0];
      |                       ^ Eager Test
  879 |         const parse3 = getParsed(customColorExpression3)[0];
  880 |
  881 |         expect(parse1.color).toEqual(""#fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 879, 'column': 23, 'index': 28066}","  877 |         const parse1 = getParsed(customColorExpression1)[0];
  878 |         const parse2 = getParsed(customColorExpression2)[0];
> 879 |         const parse3 = getParsed(customColorExpression3)[0];
      |                       ^ Eager Test
  880 |
  881 |         expect(parse1.color).toEqual(""#fA6"");
  882 |         expect(parse2.color).toEqual(""#fA6fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 977, 'column': 26, 'index': 31016}","  975 |
  976 |     it(""should produce the correct direction delimiter"", function() {
> 977 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Eager Test
  978 |         const rightParse = getParsed(bigDelim)[0];
  979 |
  980 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 978, 'column': 27, 'index': 31070}","  976 |     it(""should produce the correct direction delimiter"", function() {
  977 |         const leftParse = getParsed(normalDelim)[0];
> 978 |         const rightParse = getParsed(bigDelim)[0];
      |                           ^ Eager Test
  979 |
  980 |         expect(leftParse.mclass).toEqual(""mopen"");
  981 |         expect(rightParse.mclass).toEqual(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 985, 'column': 27, 'index': 31298}","  983 |
  984 |     it(""should parse the correct size delimiter"", function() {
> 985 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Eager Test
  986 |         const bigParse = getParsed(bigDelim)[0];
  987 |
  988 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 986, 'column': 25, 'index': 31350}","  984 |     it(""should parse the correct size delimiter"", function() {
  985 |         const smallParse = getParsed(normalDelim)[0];
> 986 |         const bigParse = getParsed(bigDelim)[0];
      |                         ^ Eager Test
  987 |
  988 |         expect(smallParse.size).toEqual(1);
  989 |         expect(bigParse.size).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1066, 'column': 24, 'index': 33716}","  1064 |
  1065 |     it(""should list the correct units"", function() {
> 1066 |         const emParse = getParsed(emRule)[0];
       |                        ^ Eager Test
  1067 |         const exParse = getParsed(exRule)[0];
  1068 |
  1069 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1067, 'column': 24, 'index': 33762}","  1065 |     it(""should list the correct units"", function() {
  1066 |         const emParse = getParsed(emRule)[0];
> 1067 |         const exParse = getParsed(exRule)[0];
       |                        ^ Eager Test
  1068 |
  1069 |         expect(emParse.width.unit).toEqual(""em"");
  1070 |         expect(emParse.height.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1104, 'column': 24, 'index': 34932}","  1102 |
  1103 |     it(""should list the correct units"", function() {
> 1104 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1105 |         const exParse = getParsed(exKern)[0];
  1106 |         const muParse = getParsed(muKern)[0];
  1107 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1105, 'column': 24, 'index': 34978}","  1103 |     it(""should list the correct units"", function() {
  1104 |         const emParse = getParsed(emKern)[0];
> 1105 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1106 |         const muParse = getParsed(muKern)[0];
  1107 |         const abParse = getParsed(abKern)[1];
  1108 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1106, 'column': 24, 'index': 35024}","  1104 |         const emParse = getParsed(emKern)[0];
  1105 |         const exParse = getParsed(exKern)[0];
> 1106 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1107 |         const abParse = getParsed(abKern)[1];
  1108 |
  1109 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1107, 'column': 24, 'index': 35070}","  1105 |         const exParse = getParsed(exKern)[0];
  1106 |         const muParse = getParsed(muKern)[0];
> 1107 |         const abParse = getParsed(abKern)[1];
       |                        ^ Eager Test
  1108 |
  1109 |         expect(emParse.dimension.unit).toEqual(""em"");
  1110 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1142, 'column': 24, 'index': 36215}","  1140 |
  1141 |     it(""should list the correct units"", function() {
> 1142 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1143 |         const exParse = getParsed(exKern)[0];
  1144 |         const muParse = getParsed(muKern)[0];
  1145 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1143, 'column': 24, 'index': 36261}","  1141 |     it(""should list the correct units"", function() {
  1142 |         const emParse = getParsed(emKern)[0];
> 1143 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1144 |         const muParse = getParsed(muKern)[0];
  1145 |         const abParse1 = getParsed(abKern1)[1];
  1146 |         const abParse2 = getParsed(abKern2)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1144, 'column': 24, 'index': 36307}","  1142 |         const emParse = getParsed(emKern)[0];
  1143 |         const exParse = getParsed(exKern)[0];
> 1144 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1145 |         const abParse1 = getParsed(abKern1)[1];
  1146 |         const abParse2 = getParsed(abKern2)[1];
  1147 |         const abParse3 = getParsed(abKern3)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1145, 'column': 25, 'index': 36354}","  1143 |         const exParse = getParsed(exKern)[0];
  1144 |         const muParse = getParsed(muKern)[0];
> 1145 |         const abParse1 = getParsed(abKern1)[1];
       |                         ^ Eager Test
  1146 |         const abParse2 = getParsed(abKern2)[1];
  1147 |         const abParse3 = getParsed(abKern3)[1];
  1148 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1146, 'column': 25, 'index': 36402}","  1144 |         const muParse = getParsed(muKern)[0];
  1145 |         const abParse1 = getParsed(abKern1)[1];
> 1146 |         const abParse2 = getParsed(abKern2)[1];
       |                         ^ Eager Test
  1147 |         const abParse3 = getParsed(abKern3)[1];
  1148 |
  1149 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1147, 'column': 25, 'index': 36450}","  1145 |         const abParse1 = getParsed(abKern1)[1];
  1146 |         const abParse2 = getParsed(abKern2)[1];
> 1147 |         const abParse3 = getParsed(abKern3)[1];
       |                         ^ Eager Test
  1148 |
  1149 |         expect(emParse.dimension.unit).toEqual(""em"");
  1150 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1158, 'column': 25, 'index': 36905}","  1156 |
  1157 |     it(""should parse elements on either side of a kern"", function() {
> 1158 |         const abParse1 = getParsed(abKern1);
       |                         ^ Eager Test
  1159 |         const abParse2 = getParsed(abKern2);
  1160 |         const abParse3 = getParsed(abKern3);
  1161 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1159, 'column': 25, 'index': 36950}","  1157 |     it(""should parse elements on either side of a kern"", function() {
  1158 |         const abParse1 = getParsed(abKern1);
> 1159 |         const abParse2 = getParsed(abKern2);
       |                         ^ Eager Test
  1160 |         const abParse3 = getParsed(abKern3);
  1161 |
  1162 |         expect(abParse1).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1160, 'column': 25, 'index': 36995}","  1158 |         const abParse1 = getParsed(abKern1);
  1159 |         const abParse2 = getParsed(abKern2);
> 1160 |         const abParse3 = getParsed(abKern3);
       |                         ^ Eager Test
  1161 |
  1162 |         expect(abParse1).toHaveLength(3);
  1163 |         expect(abParse1[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2083, 'column': 19, 'index': 74086}","  2081 |     it(""should render a combination of font and color changes"", function() {
  2082 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2083 |         let tree = getParsed(tex);
       |                   ^ Eager Test
  2084 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2085 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2086 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2092, 'column': 15, 'index': 74455}","  2090 |         // reverse the order of the commands
  2091 |         tex = r`\mathbb{\textcolor{blue}{R}}`;
> 2092 |         tree = getParsed(tex);
       |               ^ Eager Test
  2093 |         markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2094 |         node = ""<mstyle mathcolor=\""blue\"">"" +
  2095 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3000, 'column': 24, 'index': 108310}","  2998 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2999 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 3000 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3001 |         expect(parsed1.href).toBe(url);
  3002 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3003 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3002, 'column': 24, 'index': 108430}","  3000 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  3001 |         expect(parsed1.href).toBe(url);
> 3002 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3003 |         expect(parsed2.href).toBe(url);
  3004 |     });
  3005 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3008, 'column': 24, 'index': 108660}","  3006 |     it(""should allow balanced braces in url"", function() {
  3007 |         const url = ""http://example.org/{{}t{oo}}"";
> 3008 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3009 |         expect(parsed1.href).toBe(url);
  3010 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3011 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3010, 'column': 24, 'index': 108780}","  3008 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  3009 |         expect(parsed1.href).toBe(url);
> 3010 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3011 |         expect(parsed2.href).toBe(url);
  3012 |     });
  3013 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3024, 'column': 24, 'index': 109434}","  3022 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3023 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3024 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3025 |         expect(parsed1.href).toBe(url);
  3026 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3027 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3026, 'column': 24, 'index': 109556}","  3024 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
  3025 |         expect(parsed1.href).toBe(url);
> 3026 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
       |                        ^ Eager Test
  3027 |         expect(parsed2.href).toBe(url);
  3028 |     });
  3029 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2181, 'column': 12, 'index': 77897}","  2179 |     it(""should throw Error when HTML attribute name is invalid"", function() {
  2180 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
> 2181 |             try {
       |            ^ Exception Handling
  2182 |                 katex.renderToString(
  2183 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);
  2184 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2746, 'column': 8, 'index': 97528}","  2744 | describe(""A parser error"", function() {
  2745 |     it(""should report the position of an error"", function() {
> 2746 |         try {
       |        ^ Exception Handling
  2747 |             parseTree(r`\sqrt}`, new Settings());
  2748 |         } catch (e) {
  2749 |             expect(e.position).toEqual(5);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3165, 'column': 8, 'index': 114993}","  3163 | describe(""ParseError properties"", function() {
  3164 |     it(""should contain affected position and length information"", function() {
> 3165 |         try {
       |        ^ Exception Handling
  3166 |             katex.renderToString(""1 + \\fraq{}{}"");
  3167 |
  3168 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3180, 'column': 8, 'index': 115656}","  3178 |
  3179 |     it(""should contain position and length information at end of input"", function() {
> 3180 |         try {
       |        ^ Exception Handling
  3181 |             katex.renderToString(""\\frac{}"");
  3182 |
  3183 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3195, 'column': 8, 'index': 116352}","  3193 |
  3194 |     it(""should contain no position and length information if unavailable"", function() {
> 3195 |         try {
       |        ^ Exception Handling
  3196 |             katex.renderToString(""\\verb|hello\nworld|"");
  3197 |
  3198 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 44, 'column': 22, 'index': 1225}","  42 |
  43 |     it(""should build a list of ords"", function() {
> 44 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  45 |
  46 |         for (let i = 0; i < parse.length; i++) {
  47 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 53, 'column': 22, 'index': 1483}","  51 |
  52 |     it(""should parse each character as an ord"", function() {
> 53 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  54 |
  55 |         for (let i = 0; i < expression.length; i++) {
  56 |             expect(parse[i].type).toBe(""ord"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 61, 'column': 22, 'index': 1712}","  59 |
  60 |     it(""should parse the correct number of ords"", function() {
> 61 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  62 |
  63 |         expect(parse).toHaveLength(expression.length);
  64 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 75, 'column': 22, 'index': 2045}","  73 |
  74 |     it(""should build a list of bins"", function() {
> 75 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  76 |
  77 |         for (let i = 0; i < parse.length; i++) {
  78 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 95, 'column': 22, 'index': 2640}","  93 |
  94 |     it(""should build a list of rels"", function() {
> 95 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  96 |
  97 |         for (let i = 0; i < parse.length; i++) {
  98 |             let group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 121, 'column': 32, 'index': 3541}","  119 |     it(""should return one group, not a fragment"", function() {
  120 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
> 121 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
      |                                ^ Lazy Test
  122 |         expect(mml.children.length).toEqual(1);
  123 |     });
  124 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 134, 'column': 22, 'index': 3895}","  132 |
  133 |     it(""should build a list of puncts"", function() {
> 134 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  135 |
  136 |         for (let i = 0; i < parse.length; i++) {
  137 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 152, 'column': 22, 'index': 4356}","  150 |
  151 |     it(""should build a list of opens"", function() {
> 152 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  153 |
  154 |         for (let i = 0; i < parse.length; i++) {
  155 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 170, 'column': 22, 'index': 4819}","  168 |
  169 |     it(""should build a list of closes"", function() {
> 170 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  171 |
  172 |         for (let i = 0; i < parse.length; i++) {
  173 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 501, 'column': 22, 'index': 14644}","  499 |
  500 |     it(""should produce a frac"", function() {
> 501 |         const parse = getParsed(expression)[0];
      |                      ^ Lazy Test
  502 |
  503 |         expect(parse.type).toEqual(""genfrac"");
  504 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 517, 'column': 27, 'index': 15202}","  515 |
  516 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 517 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Lazy Test
  518 |
  519 |         expect(dfracParse.type).toEqual(""genfrac"");
  520 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 580, 'column': 16, 'index': 17282}","  578 |         let parse;
  579 |
> 580 |         parse = getParsed(simpleOver)[0];
      |                ^ Lazy Test
  581 |
  582 |         expect(parse.type).toEqual(""genfrac"");
  583 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 610, 'column': 22, 'index': 18391}","  608 |
  609 |     it(""should create a numerator from the atoms before \\over"", function() {
> 610 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  611 |
  612 |         const numer = parse.numer;
  613 |         expect(numer.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 617, 'column': 22, 'index': 18608}","  615 |
  616 |     it(""should create a denominator from the atoms after \\over"", function() {
> 617 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  618 |
  619 |         const denom = parse.denom;
  620 |         expect(denom.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 625, 'column': 22, 'index': 18843}","  623 |     it(""should handle empty numerators"", function() {
  624 |         const emptyNumerator = r`\over x`;
> 625 |         const parse = getParsed(emptyNumerator)[0];
      |                      ^ Lazy Test
  626 |         expect(parse.type).toEqual(""genfrac"");
  627 |         expect(parse.numer).toBeDefined();
  628 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 633, 'column': 22, 'index': 19138}","  631 |     it(""should handle empty denominators"", function() {
  632 |         const emptyDenominator = r`1 \over`;
> 633 |         const parse = getParsed(emptyDenominator)[0];
      |                      ^ Lazy Test
  634 |         expect(parse.type).toEqual(""genfrac"");
  635 |         expect(parse.numer).toBeDefined();
  636 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 641, 'column': 22, 'index': 19463}","  639 |     it(""should handle \\displaystyle correctly"", function() {
  640 |         const displaystyleExpression = r`\displaystyle 1 \over 2`;
> 641 |         const parse = getParsed(displaystyleExpression)[0];
      |                      ^ Lazy Test
  642 |         expect(parse.type).toEqual(""genfrac"");
  643 |         expect(parse.numer.body[0].type).toEqual(""styling"");
  644 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 654, 'column': 22, 'index': 20015}","  652 |     it(""should handle nested factions"", function() {
  653 |         const nestedOverExpression = r`{1 \over 2} \over 3`;
> 654 |         const parse = getParsed(nestedOverExpression)[0];
      |                      ^ Lazy Test
  655 |         expect(parse.type).toEqual(""genfrac"");
  656 |         expect(parse.numer.body[0].type).toEqual(""genfrac"");
  657 |         expect(parse.numer.body[0].numer.body[0].text).toEqual(""1"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 703, 'column': 22, 'index': 21725}","  701 |
  702 |     it(""should produce a sizing node"", function() {
> 703 |         const parse = getParsed(sizeExpression)[0];
      |                      ^ Lazy Test
  704 |
  705 |         expect(parse.type).toEqual(""sizing"");
  706 |         expect(parse.size).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 727, 'column': 22, 'index': 22534}","  725 |
  726 |     it(""should produce a text"", function() {
> 727 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  728 |
  729 |         expect(parse.type).toEqual(""text"");
  730 |         expect(parse.body).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 734, 'column': 22, 'index': 22749}","  732 |
  733 |     it(""should produce textords instead of mathords"", function() {
> 734 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  735 |         const group = parse.body;
  736 |
  737 |         expect(group[0].type).toEqual(""textord"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 757, 'column': 22, 'index': 23412}","  755 |
  756 |     it(""should contract spaces"", function() {
> 757 |         const parse = getParsed(spaceTextExpression)[0];
      |                      ^ Lazy Test
  758 |         const group = parse.body;
  759 |
  760 |         expect(group.length).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 776, 'column': 22, 'index': 24088}","  774 |
  775 |     it(""should ignore a space before the text group"", function() {
> 776 |         const parse = getParsed(leadingSpaceTextExpression)[0];
      |                      ^ Lazy Test
  777 |         // [m, o, o]
  778 |         expect(parse.body).toHaveLength(3);
  779 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 863, 'column': 22, 'index': 27475}","  861 |
  862 |     it(""should build a color node"", function() {
> 863 |         const parse = getParsed(colorExpression)[0];
      |                      ^ Lazy Test
  864 |
  865 |         expect(parse.type).toEqual(""color"");
  866 |         expect(parse.color).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 877, 'column': 23, 'index': 27944}","  875 |
  876 |     it(""should correctly extract the custom color"", function() {
> 877 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Lazy Test
  878 |         const parse2 = getParsed(customColorExpression2)[0];
  879 |         const parse3 = getParsed(customColorExpression3)[0];
  880 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 936, 'column': 22, 'index': 29870}","  934 |
  935 |     it(""should produce spacing in math mode"", function() {
> 936 |         const parse = getParsed(mathTie);
      |                      ^ Lazy Test
  937 |
  938 |         expect(parse[1].type).toEqual(""spacing"");
  939 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 942, 'column': 21, 'index': 30030}","  940 |
  941 |     it(""should produce spacing in text mode"", function() {
> 942 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  943 |         const parse = text.body;
  944 |
  945 |         expect(parse[1].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 949, 'column': 21, 'index': 30235}","  947 |
  948 |     it(""should not contract with spaces in text mode"", function() {
> 949 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  950 |         const parse = text.body;
  951 |
  952 |         expect(parse[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 971, 'column': 22, 'index': 30832}","  969 |
  970 |     it(""should produce a delimsizing"", function() {
> 971 |         const parse = getParsed(normalDelim)[0];
      |                      ^ Lazy Test
  972 |
  973 |         expect(parse.type).toEqual(""delimsizing"");
  974 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 977, 'column': 26, 'index': 31016}","  975 |
  976 |     it(""should produce the correct direction delimiter"", function() {
> 977 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Lazy Test
  978 |         const rightParse = getParsed(bigDelim)[0];
  979 |
  980 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 985, 'column': 27, 'index': 31298}","  983 |
  984 |     it(""should parse the correct size delimiter"", function() {
> 985 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Lazy Test
  986 |         const bigParse = getParsed(bigDelim)[0];
  987 |
  988 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1001, 'column': 22, 'index': 31713}","   999 |
  1000 |     it(""should produce an overline"", function() {
> 1001 |         const parse = getParsed(overline)[0];
       |                      ^ Lazy Test
  1002 |
  1003 |         expect(parse.type).toEqual(""overline"");
  1004 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1060, 'column': 22, 'index': 33563}","  1058 |
  1059 |     it(""should produce a rule"", function() {
> 1060 |         const parse = getParsed(emRule)[0];
       |                      ^ Lazy Test
  1061 |
  1062 |         expect(parse.type).toEqual(""rule"");
  1063 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1066, 'column': 24, 'index': 33716}","  1064 |
  1065 |     it(""should list the correct units"", function() {
> 1066 |         const emParse = getParsed(emRule)[0];
       |                        ^ Lazy Test
  1067 |         const exParse = getParsed(exRule)[0];
  1068 |
  1069 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1077, 'column': 32, 'index': 34086}","  1075 |
  1076 |     it(""should parse the number correctly"", function() {
> 1077 |         const hardNumberParse = getParsed(hardNumberRule)[0];
       |                                ^ Lazy Test
  1078 |
  1079 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
  1080 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1104, 'column': 24, 'index': 34932}","  1102 |
  1103 |     it(""should list the correct units"", function() {
> 1104 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1105 |         const exParse = getParsed(exKern)[0];
  1106 |         const muParse = getParsed(muKern)[0];
  1107 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1142, 'column': 24, 'index': 36215}","  1140 |
  1141 |     it(""should list the correct units"", function() {
> 1142 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1143 |         const exParse = getParsed(exKern)[0];
  1144 |         const muParse = getParsed(muKern)[0];
  1145 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1158, 'column': 25, 'index': 36905}","  1156 |
  1157 |     it(""should parse elements on either side of a kern"", function() {
> 1158 |         const abParse1 = getParsed(abKern1);
       |                         ^ Lazy Test
  1159 |         const abParse2 = getParsed(abKern2);
  1160 |         const abParse3 = getParsed(abKern3);
  1161 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1189, 'column': 24, 'index': 37980}","  1187 |
  1188 |     it(""should handle whitespace"", function() {
> 1189 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
       |                        ^ Lazy Test
  1190 |
  1191 |         expect(abParse).toHaveLength(3);
  1192 |         expect(abParse[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1207, 'column': 22, 'index': 38547}","  1205 |
  1206 |     it(""should produce a leftright"", function() {
> 1207 |         const parse = getParsed(normalLeftRight)[0];
       |                      ^ Lazy Test
  1208 |
  1209 |         expect(parse.type).toEqual(""leftright"");
  1210 |         expect(parse.left).toEqual(""("");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1384, 'column': 22, 'index': 44912}","  1382 |
  1383 |     it(""should produce sqrts"", function() {
> 1384 |         const parse = getParsed(sqrt)[0];
       |                      ^ Lazy Test
  1385 |
  1386 |         expect(parse.type).toEqual(""sqrt"");
  1387 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1583, 'column': 22, 'index': 51332}","  1581 |     it(""should only change the style within its group"", function() {
  1582 |         const text = r`a b { c d \displaystyle e f } g h`;
> 1583 |         const parse = getParsed(text);
       |                      ^ Lazy Test
  1584 |
  1585 |         const displayNode = parse[2].body[2];
  1586 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2083, 'column': 19, 'index': 74086}","  2081 |     it(""should render a combination of font and color changes"", function() {
  2082 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2083 |         let tree = getParsed(tex);
       |                   ^ Lazy Test
  2084 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2085 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2086 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2102, 'column': 21, 'index': 74827}","  2100 |     it(""should render text as <mtext>"", function() {
  2101 |         const tex = r`\text{for }`;
> 2102 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2103 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2104 |         expect(markup).toContain(""<mtext>for\u00a0</mtext>"");
  2105 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2109, 'column': 21, 'index': 75139}","  2107 |     it(""should render math within text as side-by-side children"", function() {
  2108 |         const tex = r`\text{graph: $y = mx + b$}`;
> 2109 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2110 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2111 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
  2112 |         expect(markup).toContain(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2124, 'column': 15, 'index': 75799}","  2122 |
  2123 |     it(""should produce mords"", function() {
> 2124 |         expect(getBuilt(img, trustSettings)[0].classes).toContain(""mord"");
       |               ^ Lazy Test
  2125 |     });
  2126 |
  2127 |     it(""should not render without trust setting"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2128, 'column': 22, 'index': 75953}","  2126 |
  2127 |     it(""should not render without trust setting"", function() {
> 2128 |         const built = getBuilt(img);
       |                      ^ Lazy Test
  2129 |         expect(built).toMatchSnapshot();
  2130 |     });
  2131 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2133, 'column': 22, 'index': 76096}","  2131 |
  2132 |     it(""should render with trust setting"", function() {
> 2133 |         const built = getBuilt(img, trustSettings);
       |                      ^ Lazy Test
  2134 |         expect(built).toMatchSnapshot();
  2135 |     });
  2136 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2159, 'column': 22, 'index': 77042}","  2157 |
  2158 |     it(""should set HTML attributes"", function() {
> 2159 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2160 |         expect(built[0].attributes.id).toMatch(""bar"");
  2161 |         expect(built[1].classes).toContain(""foo"");
  2162 |         expect(built[2].attributes.style).toMatch(""color: red"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2170, 'column': 22, 'index': 77449}","  2168 |
  2169 |     it(""should not affect spacing"", function() {
> 2170 |         const built = getBuilt(""\\htmlId{a}{x+}y"", trustNonStrictSettings);
       |                      ^ Lazy Test
  2171 |         expect(built).toMatchSnapshot();
  2172 |     });
  2173 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2175, 'column': 22, 'index': 77642}","  2173 |
  2174 |     it(""should render with trust and strict setting"", function() {
> 2175 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2176 |         expect(built).toMatchSnapshot();
  2177 |     });
  2178 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2350, 'column': 21, 'index': 84144}","  2348 |     it(""should properly render stretchy accents"", function() {
  2349 |         const tex = `\\widetilde{ABCD}`;
> 2350 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2351 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2352 |         expect(markup).toContain('<mo stretchy=""true"">~</mo>');
  2353 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3000, 'column': 24, 'index': 108310}","  2998 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2999 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 3000 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3001 |         expect(parsed1.href).toBe(url);
  3002 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3003 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3008, 'column': 24, 'index': 108660}","  3006 |     it(""should allow balanced braces in url"", function() {
  3007 |         const url = ""http://example.org/{{}t{oo}}"";
> 3008 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3009 |         expect(parsed1.href).toBe(url);
  3010 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3011 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3024, 'column': 24, 'index': 109434}","  3022 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3023 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3024 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3025 |         expect(parsed1.href).toBe(url);
  3026 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3027 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3040, 'column': 22, 'index': 110099}","  3038 |
  3039 |     it(""should not affect spacing around"", function() {
> 3040 |         const built = getBuilt(""a\\href{http://example.com/}{+b}"", trustSettings);
       |                      ^ Lazy Test
  3041 |         expect(built).toMatchSnapshot();
  3042 |     });
  3043 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3050, 'column': 23, 'index': 110473}","  3048 |
  3049 |     it(""should allow explicitly allowed protocols"", () => {
> 3050 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3051 |             ""\\href{ftp://x}{foo}"",
  3052 |             new Settings({trust: (context) => context.protocol === ""ftp""}),
  3053 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3058, 'column': 23, 'index': 110752}","  3056 |
  3057 |     it(""should allow all protocols when trust option is true"", () => {
> 3058 |         const parsed = getParsed(""\\href{ftp://x}{foo}"", trustSettings);
       |                       ^ Lazy Test
  3059 |         expect(parsed).toMatchSnapshot();
  3060 |     });
  3061 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3063, 'column': 23, 'index': 110943}","  3061 |
  3062 |     it(""should not allow explicitly disallowed protocols"", () => {
> 3063 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3064 |             ""\\href{javascript:alert('x')}{foo}"",
  3065 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3066 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3071, 'column': 23, 'index': 111248}","  3069 |
  3070 |     it(""should not allow explicitly uppercased disallowed protocols"", () => {
> 3071 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3072 |             ""\\href{JavaScript:alert('x')}{foo}"",
  3073 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3074 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3147, 'column': 28, 'index': 114329}","  3145 |
  3146 |     it(""should produce color nodes with a color value given by errorColor"", function() {
> 3147 |         const parsedInput = getParsed(r`\error`, noThrowSettings);
       |                            ^ Lazy Test
  3148 |         expect(parsedInput[0].type).toBe(""color"");
  3149 |         expect(parsedInput[0].color).toBe(errorColor);
  3150 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3153, 'column': 22, 'index': 114588}","  3151 |
  3152 |     it(""should build katex-error span for other type of KaTeX error"", function() {
> 3153 |         const built = getBuilt(`2^2^2`, noThrowSettings);
       |                      ^ Lazy Test
  3154 |         expect(built).toMatchSnapshot();
  3155 |     });
  3156 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3488, 'column': 27, 'index': 127346}","  3486 |         const parsedBare = getParsed`~`;
  3487 |         expect(parsedBare[0].type).toEqual(""spacing"");
> 3488 |         const parsedChar = getParsed(""\\char`\\~"");
       |                           ^ Lazy Test
  3489 |         expect(parsedChar[0].type).toEqual(""textord"");
  3490 |     });
  3491 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4060, 'column': 22, 'index': 151307}","  4058 |
  4059 |     it(""should clamp size when set"", function() {
> 4060 |         const built = getBuilt(rule, new Settings({maxSize: 5}))[0];
       |                      ^ Lazy Test
  4061 |         expect(built.style.borderRightWidth).toEqual(""5em"");
  4062 |         expect(built.style.borderTopWidth).toEqual(""5em"");
  4063 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4066, 'column': 22, 'index': 151563}","  4064 |
  4065 |     it(""should not clamp size when not set"", function() {
> 4066 |         const built = getBuilt(rule)[0];
       |                      ^ Lazy Test
  4067 |         expect(built.style.borderRightWidth).toEqual(""999em"");
  4068 |         expect(built.style.borderTopWidth).toEqual(""999em"");
  4069 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4072, 'column': 22, 'index': 151821}","  4070 |
  4071 |     it(""should make zero-width rules if a negative maxSize is passed"", function() {
> 4072 |         const built = getBuilt(rule, new Settings({maxSize: -5}))[0];
       |                      ^ Lazy Test
  4073 |         expect(built.style.borderRightWidth).toEqual(""0em"");
  4074 |         expect(built.style.borderTopWidth).toEqual(""0em"");
  4075 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 100, 'column': 48, 'index': 2842}","   98 |             let group = parse[i];
   99 |             if (group.type === ""htmlmathml"") {
> 100 |                 expect(group.html).toHaveLength(1);
      |                                                ^ Magic Number
  101 |                 group = group.html[0];
  102 |             }
  103 |             if (group.type === ""mclass"") {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 122, 'column': 44, 'index': 3633}","  120 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
  121 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
> 122 |         expect(mml.children.length).toEqual(1);
      |                                            ^ Magic Number
  123 |     });
  124 | });
  125 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 354, 'column': 35, 'index': 10303}","  352 |         const parse = getParsed`{xy}`;
  353 |
> 354 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  355 |
  356 |         const ord = parse[0];
  357 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 376, 'column': 35, 'index': 10905}","  374 |         const parse = getParsed`\begingroup xy \endgroup`;
  375 |
> 376 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  377 |
  378 |         const ord = parse[0];
  379 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 399, 'column': 35, 'index': 11532}","  397 |         const parse = getParsed`\Large abc`;
  398 |
> 399 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  400 |
  401 |         const sizing = parse[0];
  402 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 411, 'column': 35, 'index': 11855}","  409 |         const parse = getParsed`a \Large abc`;
  410 |
> 411 |         expect(parse).toHaveLength(2);
      |                                   ^ Magic Number
  412 |
  413 |         const sizing = parse[1];
  414 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 416, 'column': 41, 'index': 11982}","  414 |
  415 |         expect(sizing.type).toEqual(""sizing"");
> 416 |         expect(sizing.body).toHaveLength(3);
      |                                         ^ Magic Number
  417 |     });
  418 |
  419 |     it(""should stop at the ends of groups"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 426, 'column': 41, 'index': 12265}","  424 |
  425 |         expect(sizing.type).toEqual(""sizing"");
> 426 |         expect(sizing.body).toHaveLength(1);
      |                                         ^ Magic Number
  427 |     });
  428 |
  429 |     describe(""within optional groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 613, 'column': 40, 'index': 18494}","  611 |
  612 |         const numer = parse.numer;
> 613 |         expect(numer.body).toHaveLength(4);
      |                                        ^ Magic Number
  614 |     });
  615 |
  616 |     it(""should create a denominator from the atoms after \\over"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 620, 'column': 40, 'index': 18711}","  618 |
  619 |         const denom = parse.denom;
> 620 |         expect(denom.body).toHaveLength(4);
      |                                        ^ Magic Number
  621 |     });
  622 |
  623 |     it(""should handle empty numerators"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 760, 'column': 37, 'index': 23519}","  758 |         const group = parse.body;
  759 |
> 760 |         expect(group.length).toEqual(4);
      |                                     ^ Magic Number
  761 |         expect(group[0].type).toEqual(""spacing"");
  762 |         expect(group[1].type).toEqual(""textord"");
  763 |         expect(group[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 778, 'column': 40, 'index': 24191}","  776 |         const parse = getParsed(leadingSpaceTextExpression)[0];
  777 |         // [m, o, o]
> 778 |         expect(parse.body).toHaveLength(3);
      |                                        ^ Magic Number
  779 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");
  780 |     });
  781 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 988, 'column': 40, 'index': 31415}","  986 |         const bigParse = getParsed(bigDelim)[0];
  987 |
> 988 |         expect(smallParse.size).toEqual(1);
      |                                        ^ Magic Number
  989 |         expect(bigParse.size).toEqual(4);
  990 |     });
  991 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 989, 'column': 38, 'index': 31457}","  987 |
  988 |         expect(smallParse.size).toEqual(1);
> 989 |         expect(bigParse.size).toEqual(4);
      |                                      ^ Magic Number
  990 |     });
  991 | });
  992 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1079, 'column': 57, 'index': 34174}","  1077 |         const hardNumberParse = getParsed(hardNumberRule)[0];
  1078 |
> 1079 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
       |                                                         ^ Magic Number
  1080 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
  1081 |     });
  1082 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1080, 'column': 58, 'index': 34239}","  1078 |
  1079 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
> 1080 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
       |                                                          ^ Magic Number
  1081 |     });
  1082 |
  1083 |     it(""should parse negative sizes"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1127, 'column': 51, 'index': 35784}","  1125 |     it(""should parse positive sizes"", function() {
  1126 |         const parse = getParsed`\kern{+1em}`[0];
> 1127 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1128 |     });
  1129 | });
  1130 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1162, 'column': 38, 'index': 37054}","  1160 |         const abParse3 = getParsed(abKern3);
  1161 |
> 1162 |         expect(abParse1).toHaveLength(3);
       |                                      ^ Magic Number
  1163 |         expect(abParse1[0].text).toEqual(""a"");
  1164 |         expect(abParse1[2].text).toEqual(""b"");
  1165 |         expect(abParse2).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1165, 'column': 38, 'index': 37190}","  1163 |         expect(abParse1[0].text).toEqual(""a"");
  1164 |         expect(abParse1[2].text).toEqual(""b"");
> 1165 |         expect(abParse2).toHaveLength(3);
       |                                      ^ Magic Number
  1166 |         expect(abParse2[0].text).toEqual(""a"");
  1167 |         expect(abParse2[2].text).toEqual(""b"");
  1168 |         expect(abParse3).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1168, 'column': 38, 'index': 37326}","  1166 |         expect(abParse2[0].text).toEqual(""a"");
  1167 |         expect(abParse2[2].text).toEqual(""b"");
> 1168 |         expect(abParse3).toHaveLength(3);
       |                                      ^ Magic Number
  1169 |         expect(abParse3[0].text).toEqual(""a"");
  1170 |         expect(abParse3[2].text).toEqual(""b"");
  1171 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1185, 'column': 51, 'index': 37895}","  1183 |     it(""should parse positive sizes"", function() {
  1184 |         const parse = getParsed`\kern+1em`[0];
> 1185 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1186 |     });
  1187 |
  1188 |     it(""should handle whitespace"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1191, 'column': 37, 'index': 38057}","  1189 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
  1190 |
> 1191 |         expect(abParse).toHaveLength(3);
       |                                     ^ Magic Number
  1192 |         expect(abParse[0].text).toEqual(""a"");
  1193 |         expect(abParse[1].dimension.unit).toEqual(""mu"");
  1194 |         expect(abParse[2].text).toEqual(""b"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1344, 'column': 37, 'index': 43353}","  1342 |     it(""should eat a final newline"", function() {
  1343 |         const m3 = getParsed`\begin{matrix}a&b\\ c&d \\ \end{matrix}`[0];
> 1344 |         expect(m3.body).toHaveLength(2);
       |                                     ^ Magic Number
  1345 |     });
  1346 |
  1347 |     it(""should grab \\arraystretch"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1591, 'column': 41, 'index': 51539}","  1589 |         const displayBody = displayNode.body;
  1590 |
> 1591 |         expect(displayBody).toHaveLength(2);
       |                                         ^ Magic Number
  1592 |         expect(displayBody[0].text).toEqual(""e"");
  1593 |     });
  1594 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1645, 'column': 36, 'index': 53574}","  1643 |
  1644 |         const bbBody = nestedParse.body.body;
> 1645 |         expect(bbBody).toHaveLength(3);
       |                                    ^ Magic Number
  1646 |         expect(bbBody[0].type).toEqual(""mathord"");
  1647 |         expect(bbBody[2].type).toEqual(""font"");
  1648 |         expect(bbBody[2].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1657, 'column': 34, 'index': 54102}","  1655 |         expect(colorMathbbParse.color).toEqual(""blue"");
  1656 |         const body = colorMathbbParse.body;
> 1657 |         expect(body).toHaveLength(1);
       |                                  ^ Magic Number
  1658 |         expect(body[0].type).toEqual(""font"");
  1659 |         expect(body[0].font).toEqual(""mathbb"");
  1660 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1670, 'column': 42, 'index': 54566}","  1668 |         expect(bf.type).toEqual(""font"");
  1669 |         expect(bf.font).toEqual(""mathbf"");
> 1670 |         expect(bf.body.body).toHaveLength(3);
       |                                          ^ Magic Number
  1671 |         expect(bf.body.body[0].text).toEqual(""a"");
  1672 |         expect(bf.body.body[1].type).toEqual(""font"");
  1673 |         expect(bf.body.body[1].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2243, 'column': 45, 'index': 80427}","  2241 |         // Just a few quick sanity checks here...
  2242 |         const markup = katex.renderToString(r`\sigma^2`);
> 2243 |         expect(markup.indexOf(""<span"")).toBe(0);
       |                                             ^ Magic Number
  2244 |         expect(markup).toContain(""\u03c3"");  // sigma
  2245 |         expect(markup).toContain(""margin-right"");
  2246 |         expect(markup).not.toContain(""marginRight"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2749, 'column': 39, 'index': 97645}","  2747 |             parseTree(r`\sqrt}`, new Settings());
  2748 |         } catch (e) {
> 2749 |             expect(e.position).toEqual(5);
       |                                       ^ Magic Number
  2750 |         }
  2751 |     });
  2752 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2883, 'column': 37, 'index': 101940}","  2881 |     it(""should not eat the last row when its first cell is empty"", function() {
  2882 |         const ae = getParsed`\begin{aligned}&E_1 & (1)\\&E_2 & (2)\\&E_3 & (3)\end{aligned}`[0];
> 2883 |         expect(ae.body).toHaveLength(3);
       |                                     ^ Magic Number
  2884 |     });
  2885 | });
  2886 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3174, 'column': 40, 'index': 115497}","  3172 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");
  3173 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
> 3174 |             expect(error.position).toBe(4);
       |                                        ^ Magic Number
  3175 |             expect(error.length).toBe(5);
  3176 |         }
  3177 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3175, 'column': 38, 'index': 115539}","  3173 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
  3174 |             expect(error.position).toBe(4);
> 3175 |             expect(error.length).toBe(5);
       |                                      ^ Magic Number
  3176 |         }
  3177 |     });
  3178 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3189, 'column': 40, 'index': 116191}","  3187 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");
  3188 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
> 3189 |             expect(error.position).toBe(7);
       |                                        ^ Magic Number
  3190 |             expect(error.length).toBe(0);
  3191 |         }
  3192 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3190, 'column': 38, 'index': 116233}","  3188 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
  3189 |             expect(error.position).toBe(7);
> 3190 |             expect(error.length).toBe(0);
       |                                      ^ Magic Number
  3191 |         }
  3192 |     });
  3193 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 768}","  766 |
  767 |     it(""should handle backslash followed by newline"", () => {
> 768 |         expect(""\\text{\\ \t\r \n \t\r  }"").toParseLike`\text{\ }`;
      |        ^ Redundant Assertion
  769 |     });
  770 |
  771 |     it(""should accept math mode tokens after its argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1739}","  1737 | describe(""A comment parser"", function() {
  1738 |     it(""should parse comments at the end of a line"", () => {
> 1739 |         expect(""a^2 + b^2 = c^2 % Pythagoras' Theorem\n"").toParse();
       |        ^ Redundant Assertion
  1740 |     });
  1741 |
  1742 |     it(""should parse comments at the start of a line"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1743}","  1741 |
  1742 |     it(""should parse comments at the start of a line"", () => {
> 1743 |         expect(""% comment\n"").toParse();
       |        ^ Redundant Assertion
  1744 |     });
  1745 |
  1746 |     it(""should parse multiple lines of comments in a row"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1747}","  1745 |
  1746 |     it(""should parse multiple lines of comments in a row"", () => {
> 1747 |         expect(""% comment 1\n% comment 2\n"").toParse();
       |        ^ Redundant Assertion
  1748 |     });
  1749 |
  1750 |     it(""should parse comments between subscript and superscript"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1751}","  1749 |
  1750 |     it(""should parse comments between subscript and superscript"", () => {
> 1751 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
       |        ^ Redundant Assertion
  1752 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
  1753 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1754 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1752}","  1750 |     it(""should parse comments between subscript and superscript"", () => {
  1751 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
> 1752 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
       |        ^ Redundant Assertion
  1753 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1754 |     });
  1755 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1753}","  1751 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
  1752 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
> 1753 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
       |        ^ Redundant Assertion
  1754 |     });
  1755 |
  1756 |     it(""should parse comments in size and color groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1757}","  1755 |
  1756 |     it(""should parse comments in size and color groups"", () => {
> 1757 |         expect(""\\kern{1 %kern\nem}"").toParse();
       |        ^ Redundant Assertion
  1758 |         expect(""\\kern1 %kern\nem"").toParse();
  1759 |         expect(""\\color{#f00%red\n}"").toParse();
  1760 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1758}","  1756 |     it(""should parse comments in size and color groups"", () => {
  1757 |         expect(""\\kern{1 %kern\nem}"").toParse();
> 1758 |         expect(""\\kern1 %kern\nem"").toParse();
       |        ^ Redundant Assertion
  1759 |         expect(""\\color{#f00%red\n}"").toParse();
  1760 |     });
  1761 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1759}","  1757 |         expect(""\\kern{1 %kern\nem}"").toParse();
  1758 |         expect(""\\kern1 %kern\nem"").toParse();
> 1759 |         expect(""\\color{#f00%red\n}"").toParse();
       |        ^ Redundant Assertion
  1760 |     });
  1761 |
  1762 |     it(""should parse comments before an expression"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1763}","  1761 |
  1762 |     it(""should parse comments before an expression"", () => {
> 1763 |         expect(""%comment\n{2}"").toParseLike`{2}`;
       |        ^ Redundant Assertion
  1764 |     });
  1765 |
  1766 |     it(""should parse comments before and between \\hline"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1773}","  1771 |
  1772 |     it(""should parse comments in the macro definition"", () => {
> 1773 |         expect(""\\def\\foo{1 %}\n2}\n\\foo"").toParseLike`12`;
       |        ^ Redundant Assertion
  1774 |     });
  1775 |
  1776 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1777}","  1775 |
  1776 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {
> 1777 |         expect(""\\def\\foo{1\n2}\nx %\\foo\n"").toParseLike`x`;
       |        ^ Redundant Assertion
  1778 |     });
  1779 |
  1780 |     it(""should not parse a comment without newline in strict mode"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1786}","  1784 |
  1785 |     it(""should not produce or consume space"", () => {
> 1786 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
       |        ^ Redundant Assertion
  1787 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
  1788 |     });
  1789 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1787}","  1785 |     it(""should not produce or consume space"", () => {
  1786 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
> 1787 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
       |        ^ Redundant Assertion
  1788 |     });
  1789 |
  1790 |     it(""should not include comments in the output"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1791}","  1789 |
  1790 |     it(""should not include comments in the output"", () => {
> 1791 |         expect(""5 % comment\n"").toParseLike`5`;
       |        ^ Redundant Assertion
  1792 |     });
  1793 | });
  1794 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 16, 'line': 2186}","  2184 |
  2185 |                 // Render is expected to throw, so this should not be called.
> 2186 |                 expect(true).toBe(false);
       |                ^ Redundant Assertion
  2187 |             } catch (error) {
  2188 |                 expect(error).toBeInstanceOf(ParseError);
  2189 |                 const message =",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 2988}","  2986 |         expect`\href%end`.toParseLike(""\\href{%}end"", trustSettings);
  2987 |         expect`\url%end`.toParseLike(""\\url{%}end"", trustSettings);
> 2988 |         expect(""\\url%%end\n"").toParseLike(""\\url{%}"", trustSettings);
       |        ^ Redundant Assertion
  2989 |         expect`\url end`.toParseLike(""\\url{e}nd"", trustSettings);
  2990 |         expect`\url%end`.toParseLike(""\\url {%}end"", trustSettings);
  2991 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3031}","  3029 |
  3030 |     it(""should allow comments after URLs"", function() {
> 3031 |         expect(""\\url{http://example.com/}%comment\n"").toBuild();
       |        ^ Redundant Assertion
  3032 |     });
  3033 |
  3034 |     it(""should be marked up correctly"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3169}","  3167 |
  3168 |             // Render is expected to throw, so this should not be called.
> 3169 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3170 |         } catch (error) {
  3171 |             expect(error).toBeInstanceOf(ParseError);
  3172 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3184}","  3182 |
  3183 |             // Render is expected to throw, so this should not be called.
> 3184 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3185 |         } catch (error) {
  3186 |             expect(error).toBeInstanceOf(ParseError);
  3187 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3199}","  3197 |
  3198 |             // Render is expected to throw, so this should not be called.
> 3199 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3200 |         } catch (error) {
  3201 |             expect(error).toBeInstanceOf(ParseError);
  3202 |             expect(error.message).toBe(""KaTeX parse error: \\verb ended by end of line instead of matching delimiter"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3472}","  3470 |
  3471 |     it(""\\char produces literal characters"", () => {
> 3472 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
       |        ^ Redundant Assertion
  3473 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3474 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3475 |         expect(""\\char`\\%"").toParseLike`\char""25`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3473}","  3471 |     it(""\\char produces literal characters"", () => {
  3472 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3473 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Redundant Assertion
  3474 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3475 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3476 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3474}","  3472 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3473 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3474 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Redundant Assertion
  3475 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3476 |         expect`\char`.not.toParse();
  3477 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3475}","  3473 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3474 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3475 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Redundant Assertion
  3476 |         expect`\char`.not.toParse();
  3477 |         expect(""\\char`"").not.toParse();
  3478 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3477}","  3475 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3476 |         expect`\char`.not.toParse();
> 3477 |         expect(""\\char`"").not.toParse();
       |        ^ Redundant Assertion
  3478 |         expect`\char'`.not.toParse();
  3479 |         expect`\char""`.not.toParse();
  3480 |         expect`\char'a`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3941}","  3939 |
  3940 |     it(""should parse combining characters"", function() {
> 3941 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
       |        ^ Redundant Assertion
  3942 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
  3943 |     });
  3944 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3942}","  3940 |     it(""should parse combining characters"", function() {
  3941 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
> 3942 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
       |        ^ Redundant Assertion
  3943 |     });
  3944 |
  3945 |     it(""should parse multi-accented characters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3980}","  3978 |
  3979 |     it(""should parse symbols"", function() {
> 3980 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3981 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
  3982 |     });
  3983 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3981}","  3979 |     it(""should parse symbols"", function() {
  3980 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
> 3981 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3982 |     });
  3983 |
  3984 |     it(""should build Greek capital letters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3998}","  3996 |
  3997 |     it(""should build binary operators"", function() {
> 3998 |         expect(""±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞\u22C5\u2218\u2216\u2219"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3999 |     });
  4000 |
  4001 |     it(""should build common ords"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4002}","  4000 |
  4001 |     it(""should build common ords"", function() {
> 4002 |         expect(""§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  4003 |     });
  4004 |
  4005 |     it(""should build delimiters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4006}","  4004 |
  4005 |     it(""should build delimiters"", function() {
> 4006 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
       |        ^ Redundant Assertion
  4007 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4008 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4009 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4007}","  4005 |     it(""should build delimiters"", function() {
  4006 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
> 4007 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
       |        ^ Redundant Assertion
  4008 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4009 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4010 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4008}","  4006 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
  4007 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
> 4008 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
       |        ^ Redundant Assertion
  4009 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4010 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4011 |         expect`┌x┐ └x┘`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4009}","  4007 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4008 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
> 4009 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
       |        ^ Redundant Assertion
  4010 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4011 |         expect`┌x┐ └x┘`.toBuild();
  4012 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4010}","  4008 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4009 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
> 4010 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
       |        ^ Redundant Assertion
  4011 |         expect`┌x┐ └x┘`.toBuild();
  4012 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4013 |         expect(""\u27E6x\u27E7"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4012}","  4010 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4011 |         expect`┌x┐ └x┘`.toBuild();
> 4012 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
       |        ^ Redundant Assertion
  4013 |         expect(""\u27E6x\u27E7"").toBuild();
  4014 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4015 |         expect(""\\lBrace \\rBrace"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4013}","  4011 |         expect`┌x┐ └x┘`.toBuild();
  4012 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
> 4013 |         expect(""\u27E6x\u27E7"").toBuild();
       |        ^ Redundant Assertion
  4014 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4015 |         expect(""\\lBrace \\rBrace"").toBuild();
  4016 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4014}","  4012 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4013 |         expect(""\u27E6x\u27E7"").toBuild();
> 4014 |         expect(""\\llbracket \\rrbracket"").toBuild();
       |        ^ Redundant Assertion
  4015 |         expect(""\\lBrace \\rBrace"").toBuild();
  4016 |     });
  4017 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4015}","  4013 |         expect(""\u27E6x\u27E7"").toBuild();
  4014 |         expect(""\\llbracket \\rrbracket"").toBuild();
> 4015 |         expect(""\\lBrace \\rBrace"").toBuild();
       |        ^ Redundant Assertion
  4016 |     });
  4017 |
  4018 |     it(""should build some surrogate pairs"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4285, 'column': 19, 'index': 160429}","  4283 |             expect`\message{Hello, world}`.toParse();
  4284 |             // eslint-disable-next-line no-console
> 4285 |             expect(console.log).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4286 |         });
  4287 |     });
  4288 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4294, 'column': 19, 'index': 160794}","  4292 |             expect`\errmessage{Hello, world}`.toParse();
  4293 |             // eslint-disable-next-line no-console
> 4294 |             expect(console.error).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4295 |         });
  4296 |     });
  4297 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 23}","  21 |
  22 | describe(""A parser"", function() {
> 23 |     it(""should not fail on an empty string"", function() {
     |    ^ Unknown Test
  24 |         expect``.toParse(strictSettings);
  25 |     });
  26 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 27}","  25 |     });
  26 |
> 27 |     it(""should ignore whitespace"", function() {
     |    ^ Unknown Test
  28 |         expect`    x    y    `.toParseLike(""xy"", strictSettings);
  29 |     });
  30 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 31}","  29 |     });
  30 |
> 31 |     it(""should ignore whitespace in atom"", function() {
     |    ^ Unknown Test
  32 |         expect`    x   ^ y    `.toParseLike(""x^y"", strictSettings);
  33 |     });
  34 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 114}","  112 |
  113 | describe(""A mathinner parser"", function() {
> 114 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  115 |         expect`\mathinner{\langle{\psi}\rangle}`.toParse();
  116 |         expect`\frac 1 {\mathinner{\langle{\psi}\rangle}}`.toParse();
  117 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 181}","  179 |
  180 | describe(""A \\KaTeX parser"", function() {
> 181 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  182 |         expect`\KaTeX`.toParse();
  183 |     });
  184 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 187}","  185 |
  186 | describe(""A subscript and superscript parser"", function() {
> 187 |     it(""should not fail on superscripts"", function() {
      |    ^ Unknown Test
  188 |         expect`x^2`.toParse();
  189 |     });
  190 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 191}","  189 |     });
  190 |
> 191 |     it(""should not fail on subscripts"", function() {
      |    ^ Unknown Test
  192 |         expect`x_3`.toParse();
  193 |     });
  194 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 195}","  193 |     });
  194 |
> 195 |     it(""should not fail on both subscripts and superscripts"", function() {
      |    ^ Unknown Test
  196 |         expect`x^2_3`.toParse();
  197 |
  198 |         expect`x_2^3`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 201}","  199 |     });
  200 |
> 201 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  202 |         expect`^3`.toParse();
  203 |         expect`^3+`.toParse();
  204 |         expect`_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 245}","  243 |     });
  244 |
> 245 |     it(""should produce the same thing regardless of order"", function() {
      |    ^ Unknown Test
  246 |         expect`x^2_3`.toParseLike`x_3^2`;
  247 |     });
  248 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 249}","  247 |     });
  248 |
> 249 |     it(""should not parse double subscripts or superscripts"", function() {
      |    ^ Unknown Test
  250 |         expect`x^x^x`.not.toParse();
  251 |
  252 |         expect`x_x_x`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 263}","  261 |     });
  262 |
> 263 |     it(""should work correctly with {}s"", function() {
      |    ^ Unknown Test
  264 |         expect`x^{2+3}`.toParse();
  265 |
  266 |         expect`x_{3-2}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 281}","  279 |     });
  280 |
> 281 |     it(""should work with nested super/subscripts"", function() {
      |    ^ Unknown Test
  282 |         expect`x^{x^x}`.toParse();
  283 |         expect`x^{x_x}`.toParse();
  284 |         expect`x_{x^x}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 288}","  286 |     });
  287 |
> 288 |     it(""should work with Unicode (sub|super)script characters"", function() {
      |    ^ Unknown Test
  289 |         expect`A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃`.toParseLike`A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}`;
  290 |     });
  291 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 292}","  290 |     });
  291 |
> 292 |     it(""should not fail if \\relax is in an atom"", function() {
      |    ^ Unknown Test
  293 |         expect`\hskip1em\relax^2`.toParse(strictSettings);
  294 |     });
  295 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 296}","  294 |     });
  295 |
> 296 |     it(""should skip \\relax in super/subscripts"", function() {
      |    ^ Unknown Test
  297 |         expect`x^\relax 2`.toParseLike`x^2`;
  298 |         expect`x_\relax 2`.toParseLike`x_2`;
  299 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 303}","  301 |
  302 | describe(""A subscript and superscript tree-builder"", function() {
> 303 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  304 |         expect`^3`.toBuild();
  305 |         expect`_2`.toBuild();
  306 |         expect`^3_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 312}","  310 |
  311 | describe(""A parser with limit controls"", function() {
> 312 |     it(""should fail when the limit control is not preceded by an op node"", function() {
      |    ^ Unknown Test
  313 |         expect`3\nolimits_2^2`.not.toParse();
  314 |         expect`\sqrt\limits_2^2`.not.toParse();
  315 |         expect`45 +\nolimits 45`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 318}","  316 |     });
  317 |
> 318 |     it(""should parse when the limit control directly follows an op node"", function() {
      |    ^ Unknown Test
  319 |         expect`\int\limits_2^2 3`.toParse();
  320 |         expect`\sum\nolimits_3^4 4`.toParse();
  321 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 323}","  321 |     });
  322 |
> 323 |     it(""should parse when the limit control is in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  324 |         expect`\int_2^2\limits`.toParse();
  325 |         expect`\int^2\nolimits_2`.toParse();
  326 |         expect`\int_2\limits^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 329}","  327 |     });
  328 |
> 329 |     it(""should allow multiple limit controls in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  330 |         expect`\int_2\nolimits^2\limits 3`.toParse();
  331 |         expect`\int\nolimits\limits_2^2`.toParse();
  332 |         expect`\int\limits\limits\limits_2^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 347}","  345 |
  346 | describe(""A group parser"", function() {
> 347 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  348 |         expect`{xy}`.toParse();
  349 |     });
  350 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 364}","  362 |
  363 | describe(""A \\begingroup...\\endgroup parser"", function() {
> 364 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  365 |         expect`\begingroup xy \endgroup`.toParse();
  366 |     });
  367 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 368}","  366 |     });
  367 |
> 368 |     it(""should fail when it is mismatched"", function() {
      |    ^ Unknown Test
  369 |         expect`\begingroup xy`.not.toParse();
  370 |         expect`\begingroup xy }`.not.toParse();
  371 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 385}","  383 |     });
  384 |
> 385 |     it(""should not affect spacing in math mode"", function() {
      |    ^ Unknown Test
  386 |         expect`\begingroup x+ \endgroup y`.toBuildLike`x+y`;
  387 |     });
  388 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 391}","  389 |
  390 | describe(""An implicit group parser"", function() {
> 391 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  392 |         expect`\Large x`.toParse();
  393 |         expect`abc {abc \Large xyz} abc`.toParse();
  394 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 453}","  451 |
  452 | describe(""A function parser"", function() {
> 453 |     it(""should parse no argument functions"", function() {
      |    ^ Unknown Test
  454 |         expect`\div`.toParse();
  455 |     });
  456 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 457}","  455 |     });
  456 |
> 457 |     it(""should parse 1 argument functions"", function() {
      |    ^ Unknown Test
  458 |         expect`\blue x`.toParse();
  459 |     });
  460 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 461}","  459 |     });
  460 |
> 461 |     it(""should parse 2 argument functions"", function() {
      |    ^ Unknown Test
  462 |         expect`\frac 1 2`.toParse();
  463 |     });
  464 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 465}","  463 |     });
  464 |
> 465 |     it(""should not parse 1 argument functions with no arguments"", function() {
      |    ^ Unknown Test
  466 |         expect`\blue`.not.toParse();
  467 |     });
  468 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 469}","  467 |     });
  468 |
> 469 |     it(""should not parse 2 argument functions with 0 or 1 arguments"", function() {
      |    ^ Unknown Test
  470 |         expect`\frac`.not.toParse();
  471 |
  472 |         expect`\frac 1`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 475}","  473 |     });
  474 |
> 475 |     it(""should not parse a function with text right after it"", function() {
      |    ^ Unknown Test
  476 |         expect`\redx`.not.toParse();
  477 |     });
  478 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 479}","  477 |     });
  478 |
> 479 |     it(""should parse a function with a number right after it"", function() {
      |    ^ Unknown Test
  480 |         expect`\frac12`.toParse();
  481 |     });
  482 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 483}","  481 |     });
  482 |
> 483 |     it(""should parse some functions with text right after it"", function() {
      |    ^ Unknown Test
  484 |         expect`\;x`.toParse();
  485 |     });
  486 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 647}","  645 |     });
  646 |
> 647 |     it(""should handle \\textstyle correctly"", function() {
      |    ^ Unknown Test
  648 |         expect`\textstyle 1 \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  649 |         expect`{\textstyle 1} \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  650 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 673}","  671 |
  672 | describe(""A genfrac builder"", function() {
> 673 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  674 |         expect`\frac{x}{y}`.toBuild();
  675 |         expect`\dfrac{x}{y}`.toBuild();
  676 |         expect`\tfrac{x}{y}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 686}","  684 |
  685 | describe(""A infix builder"", function() {
> 686 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  687 |         expect`a \over b`.toBuild();
  688 |         expect`a \atop b`.toBuild();
  689 |         expect`a \choose b`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 782}","  780 |     });
  781 |
> 782 |     it(""should parse math within text group"", function() {
      |    ^ Unknown Test
  783 |         expect`\text{graph: $y = mx + b$}`.toParse(strictSettings);
  784 |         expect`\text{graph: \(y = mx + b\)}`.toParse(strictSettings);
  785 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 787}","  785 |     });
  786 |
> 787 |     it(""should parse math within text within math within text"", function() {
      |    ^ Unknown Test
  788 |         expect`\text{hello $x + \text{world $y$} + z$}`.toParse(strictSettings);
  789 |         expect`\text{hello \(x + \text{world $y$} + z\)}`.toParse(strictSettings);
  790 |         expect`\text{hello $x + \text{world \(y\)} + z$}`.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 794}","  792 |     });
  793 |
> 794 |     it(""should forbid \\( within math mode"", function() {
      |    ^ Unknown Test
  795 |         expect`\(`.not.toParse();
  796 |         expect`\text{$\(x\)$}`.not.toParse();
  797 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 799}","  797 |     });
  798 |
> 799 |     it(""should forbid $ within math mode"", function() {
      |    ^ Unknown Test
  800 |         expect`$x$`.not.toParse();
  801 |         expect`\text{\($x$\)}`.not.toParse();
  802 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 804}","  802 |     });
  803 |
> 804 |     it(""should detect unbalanced \\)"", function() {
      |    ^ Unknown Test
  805 |         expect`\)`.not.toParse();
  806 |         expect`\text{\)}`.not.toParse();
  807 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 809}","  807 |     });
  808 |
> 809 |     it(""should detect unbalanced $"", function() {
      |    ^ Unknown Test
  810 |         expect`$`.not.toParse();
  811 |         expect`\text{$}`.not.toParse();
  812 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 814}","  812 |     });
  813 |
> 814 |     it(""should not mix $ and \\(..\\)"", function() {
      |    ^ Unknown Test
  815 |         expect`\text{$x\)}`.not.toParse();
  816 |         expect`\text{\(x$}`.not.toParse();
  817 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 819}","  817 |     });
  818 |
> 819 |     it(""should parse spacing functions"", function() {
      |    ^ Unknown Test
  820 |         expect`a b\, \; \! \: \> ~ \thinspace \medspace \quad \ `.toBuild();
  821 |         expect`\enspace \thickspace \qquad \space \nobreakspace`.toBuild();
  822 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 824}","  822 |     });
  823 |
> 824 |     it(""should omit spaces after commands"", function() {
      |    ^ Unknown Test
  825 |         expect`\text{\textellipsis !}`.toParseLike`\text{\textellipsis!}`;
  826 |     });
  827 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 828}","  826 |     });
  827 |
> 828 |     it(""should handle ⋮ and \\vdots"", function() {
      |    ^ Unknown Test
  829 |         expect`\text{a \vdots b ⋮ d}`.toParse();
  830 |     });
  831 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 834}","  832 |
  833 | describe(""A texvc builder"", function() {
> 834 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  835 |         expect`\lang\N\darr\R\dArr\Z\Darr\alef\rang`.toBuild();
  836 |         expect`\alefsym\uarr\Alpha\uArr\Beta\Uarr\Chi`.toBuild();
  837 |         expect`\clubs\diamonds\hearts\spades\cnums\Complex`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1008}","  1006 |
  1007 | describe(""An lap parser"", function() {
> 1008 |     it(""should not fail on a text argument"", function() {
       |    ^ Unknown Test
  1009 |         expect`\rlap{\,/}{=}`.toParse();
  1010 |         expect`\mathrlap{\,/}{=}`.toParse();
  1011 |         expect`{=}\llap{/\,}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1017}","  1015 |     });
  1016 |
> 1017 |     it(""should not fail if math version is used"", function() {
       |    ^ Unknown Test
  1018 |         expect`\mathrlap{\frac{a}{b}}{=}`.toParse();
  1019 |         expect`{=}\mathllap{\frac{a}{b}}`.toParse();
  1020 |         expect`\sum_{\mathclap{\frac{a}{b}}}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1023}","  1021 |     });
  1022 |
> 1023 |     it(""should fail on math if AMS version is used"", function() {
       |    ^ Unknown Test
  1024 |         expect`\rlap{\frac{a}{b}}{=}`.not.toParse();
  1025 |         expect`{=}\llap{\frac{a}{b}}`.not.toParse();
  1026 |         expect`\sum_{\clap{\frac{a}{b}}}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1279}","  1277 | describe(""A begin/end parser"", function() {
  1278 |
> 1279 |     it(""should parse a simple environment"", function() {
       |    ^ Unknown Test
  1280 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1281 |     });
  1282 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1283}","  1281 |     });
  1282 |
> 1283 |     it(""should parse an environment with argument"", function() {
       |    ^ Unknown Test
  1284 |         expect`\begin{array}{cc}a&b\\c&d\end{array}`.toParse();
  1285 |     });
  1286 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1287}","  1285 |     });
  1286 |
> 1287 |     it(""should parse and build an empty environment"", function() {
       |    ^ Unknown Test
  1288 |         expect`\begin{aligned}\end{aligned}`.toBuild();
  1289 |         expect`\begin{matrix}\end{matrix}`.toBuild();
  1290 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1292}","  1290 |     });
  1291 |
> 1292 |     it(""should parse an environment with hlines"", function() {
       |    ^ Unknown Test
  1293 |         expect`\begin{matrix}\hline a&b\\ \hline c&d\end{matrix}`.toParse();
  1294 |         expect`\begin{matrix}\hline a&b\cr \hline c&d\end{matrix}`.toParse();
  1295 |         expect`\begin{matrix}\hdashline a&b\\ \hdashline c&d\end{matrix}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1298}","  1296 |     });
  1297 |
> 1298 |     it(""should forbid hlines outside array environment"", () => {
       |    ^ Unknown Test
  1299 |         expect`\hline`.not.toParse();
  1300 |     });
  1301 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1302}","  1300 |     });
  1301 |
> 1302 |     it(""should error when name is mismatched"", function() {
       |    ^ Unknown Test
  1303 |         expect`\begin{matrix}a&b\\c&d\end{pmatrix}`.not.toParse();
  1304 |     });
  1305 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1306}","  1304 |     });
  1305 |
> 1306 |     it(""should error when commands are mismatched"", function() {
       |    ^ Unknown Test
  1307 |         expect`\begin{matrix}a&b\\c&d\right{pmatrix}`.not.toParse();
  1308 |     });
  1309 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1310}","  1308 |     });
  1309 |
> 1310 |     it(""should error when end is missing"", function() {
       |    ^ Unknown Test
  1311 |         expect`\begin{matrix}a&b\\c&d`.not.toParse();
  1312 |     });
  1313 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1314}","  1312 |     });
  1313 |
> 1314 |     it(""should error when braces are mismatched"", function() {
       |    ^ Unknown Test
  1315 |         expect`{\begin{matrix}a&b\\c&d}\end{matrix}`.not.toParse();
  1316 |     });
  1317 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1318}","  1316 |     });
  1317 |
> 1318 |     it(""should cooperate with infix notation"", function() {
       |    ^ Unknown Test
  1319 |         expect`\begin{matrix}0&1\over2&3\\4&5&6\end{matrix}`.toParse();
  1320 |     });
  1321 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1328}","  1326 |     });
  1327 |
> 1328 |     it(""should allow \\cr and \\\\ as a line terminator"", function() {
       |    ^ Unknown Test
  1329 |         expect`\begin{matrix}a&b\cr c&d\end{matrix}`.toParse();
  1330 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1331 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1333}","  1331 |     });
  1332 |
> 1333 |     it(""should not allow \\cr to scan for an optional size argument"", function() {
       |    ^ Unknown Test
  1334 |         expect`\begin{matrix}a&b\cr[c]&d\end{matrix}`.toParse();
  1335 |     });
  1336 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1337}","  1335 |     });
  1336 |
> 1337 |     it(""should not treat [ after space as optional argument to \\\\"", function() {
       |    ^ Unknown Test
  1338 |         expect`\begin{matrix}a&b\\ [c]&d\end{matrix}`.toParse();
  1339 |         expect`a\\ [b]`.toParse();
  1340 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1352}","  1350 |     });
  1351 |
> 1352 |     it(""should allow an optional argument in {matrix*} and company."", function() {
       |    ^ Unknown Test
  1353 |         expect`\begin{matrix*}[r] a & -1 \\ -1 & d \end{matrix*}`.toBuild();
  1354 |         expect`\begin{pmatrix*}[r] a & -1 \\ -1 & d \end{pmatrix*}`.toBuild();
  1355 |         expect`\begin{bmatrix*}[r] a & -1 \\ -1 & d \end{bmatrix*}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1389}","  1387 |     });
  1388 |
> 1389 |     it(""should build sized square roots"", function() {
       |    ^ Unknown Test
  1390 |         expect`\Large\sqrt[3]{x}`.toBuild();
  1391 |     });
  1392 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1393}","  1391 |     });
  1392 |
> 1393 |     it(""should expand argument if optional argument doesn't exist"", function() {
       |    ^ Unknown Test
  1394 |         expect`\sqrt\foo`.toParseLike(""\\sqrt123"",
  1395 |             new Settings({macros: {""\\foo"": ""123""}}));
  1396 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1398}","  1396 |     });
  1397 |
> 1398 |     it(""should not expand argument if optional argument exists"", function() {
       |    ^ Unknown Test
  1399 |         expect`\sqrt[2]\foo`.toParseLike(""\\sqrt[2]{123}"",
  1400 |             new Settings({macros: {""\\foo"": ""123""}}));
  1401 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1405}","  1403 |
  1404 | describe(""A TeX-compliant parser"", function() {
> 1405 |     it(""should work"", function() {
       |    ^ Unknown Test
  1406 |         expect`\frac 2 3`.toParse();
  1407 |     });
  1408 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1424}","  1422 |     });
  1423 |
> 1424 |     it(""should fail when there are missing sup/subscripts"", function() {
       |    ^ Unknown Test
  1425 |         expect`x^`.not.toParse();
  1426 |         expect`x_`.not.toParse();
  1427 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1495}","  1493 |     });
  1494 |
> 1495 |     it(""should parse multiple primes correctly"", function() {
       |    ^ Unknown Test
  1496 |         expect`x''''`.toParse();
  1497 |         expect`x_2''`.toParse();
  1498 |         expect`x''_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1501}","  1499 |     });
  1500 |
> 1501 |     it(""should fail when sup/subscripts are interspersed with arguments"", function() {
       |    ^ Unknown Test
  1502 |         expect`\sqrt^23`.not.toParse();
  1503 |         expect`\frac^234`.not.toParse();
  1504 |         expect`\frac2^34`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1507}","  1505 |     });
  1506 |
> 1507 |     it(""should succeed when sup/subscripts come after whole functions"", function() {
       |    ^ Unknown Test
  1508 |         expect`\sqrt2^3`.toParse();
  1509 |         expect`\frac23^4`.toParse();
  1510 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1512}","  1510 |     });
  1511 |
> 1512 |     it(""should succeed with a sqrt around a text/frac"", function() {
       |    ^ Unknown Test
  1513 |         expect`\sqrt \frac x y`.toParse();
  1514 |         expect`\sqrt \text x`.toParse();
  1515 |         expect`x^\frac x y`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1549}","  1547 |
  1548 | describe(""An op symbol builder"", function() {
> 1549 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1550 |         expect`\int_i^n`.toBuild();
  1551 |         expect`\iint_i^n`.toBuild();
  1552 |         expect`\iiint_i^n`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1566}","  1564 |
  1565 | describe(""A style change parser"", function() {
> 1566 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1567 |         expect`\displaystyle x`.toParse();
  1568 |         expect`\textstyle x`.toParse();
  1569 |         expect`\scriptstyle x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1597}","  1595 |
  1596 | describe(""A font parser"", function() {
> 1597 |     it(""should parse \\mathrm, \\mathbb, \\mathit, and \\mathnormal"", function() {
       |    ^ Unknown Test
  1598 |         expect`\mathrm x`.toParse();
  1599 |         expect`\mathbb x`.toParse();
  1600 |         expect`\mathit x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1608}","  1606 |     });
  1607 |
> 1608 |     it(""should parse \\mathcal and \\mathfrak"", function() {
       |    ^ Unknown Test
  1609 |         expect`\mathcal{ABC123}`.toParse();
  1610 |         expect`\mathfrak{abcABC123}`.toParse();
  1611 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1662}","  1660 |     });
  1661 |
> 1662 |     it(""should not parse a series of font commands"", function() {
       |    ^ Unknown Test
  1663 |         expect`\mathbb \mathrm R`.not.toParse();
  1664 |     });
  1665 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1677}","  1675 |     });
  1676 |
> 1677 |     it(""should be allowed in the argument"", function() {
       |    ^ Unknown Test
  1678 |         expect`e^\mathbf{x}`.toParse();
  1679 |     });
  1680 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1686}","  1684 |     });
  1685 |
> 1686 |     it(""old-style fonts work like new-style fonts"", () => {
       |    ^ Unknown Test
  1687 |         expect`\rm xyz`.toParseLike`\mathrm{xyz}`;
  1688 |         expect`\sf xyz`.toParseLike`\mathsf{xyz}`;
  1689 |         expect`\tt xyz`.toParseLike`\mathtt{xyz}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1697}","  1695 |
  1696 | describe(""A \\pmb builder"", function() {
> 1697 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1698 |         expect`\pmb{\mu}`.toBuild();
  1699 |         expect`\pmb{=}`.toBuild();
  1700 |         expect`\pmb{+}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1708}","  1706 |
  1707 | describe(""A raise parser"", function() {
> 1708 |     it(""should parse and build text in \\raisebox"", function() {
       |    ^ Unknown Test
  1709 |         expect`\raisebox{5pt}{text}`.toBuild(strictSettings);
  1710 |         expect`\raisebox{-5pt}{text}`.toBuild(strictSettings);
  1711 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1713}","  1711 |     });
  1712 |
> 1713 |     it(""should parse and build math in non-strict \\vcenter"", function() {
       |    ^ Unknown Test
  1714 |         expect`\vcenter{\frac a b}`.toBuild(nonstrictSettings);
  1715 |     });
  1716 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1717}","  1715 |     });
  1716 |
> 1717 |     it(""should fail to parse math in \\raisebox"", function() {
       |    ^ Unknown Test
  1718 |         expect`\raisebox{5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1719 |         expect`\raisebox{-5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1720 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1722}","  1720 |     });
  1721 |
> 1722 |     it(""should fail to parse math in an \\hbox"", function() {
       |    ^ Unknown Test
  1723 |         expect`\hbox{\frac a b}`.not.toParse(nonstrictSettings);
  1724 |     });
  1725 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1726}","  1724 |     });
  1725 |
> 1726 |     it(""should fail to build, given an unbraced length"", function() {
       |    ^ Unknown Test
  1727 |         expect`\raisebox5pt{text}`.not.toBuild(strictSettings);
  1728 |         expect`\raisebox-5pt{text}`.not.toBuild(strictSettings);
  1729 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1731}","  1729 |     });
  1730 |
> 1731 |     it(""should build math in an hbox when math mode is set"", function() {
       |    ^ Unknown Test
  1732 |         expect`a + \vcenter{\hbox{$\frac{\frac a b}c$}}`
  1733 |             .toBuild(strictSettings);
  1734 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1780}","  1778 |     });
  1779 |
> 1780 |     it(""should not parse a comment without newline in strict mode"", () => {
       |    ^ Unknown Test
  1781 |         expect`x%y`.not.toParse(strictSettings);
  1782 |         expect`x%y`.toParse(nonstrictSettings);
  1783 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2265}","  2263 |
  2264 | describe(""An accent parser"", function() {
> 2265 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2266 |         expect`\vec{x}`.toParse();
  2267 |         expect`\vec{x^2}`.toParse();
  2268 |         expect`\vec{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2285}","  2283 |     });
  2284 |
> 2285 |     it(""should parse stretchy, shifty accents"", function() {
       |    ^ Unknown Test
  2286 |         expect`\widehat{x}`.toParse();
  2287 |         expect`\widecheck{x}`.toParse();
  2288 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2290}","  2288 |     });
  2289 |
> 2290 |     it(""should parse stretchy, non-shifty accents"", function() {
       |    ^ Unknown Test
  2291 |         expect`\overrightarrow{x}`.toParse();
  2292 |     });
  2293 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2296}","  2294 |
  2295 | describe(""An accent builder"", function() {
> 2296 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2297 |         expect`\vec{x}`.toBuild();
  2298 |         expect`\vec{x}^2`.toBuild();
  2299 |         expect`\vec{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2313}","  2311 |
  2312 | describe(""A stretchy and shifty accent builder"", function() {
> 2313 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2314 |         expect`\widehat{AB}`.toBuild();
  2315 |         expect`\widecheck{AB}`.toBuild();
  2316 |         expect`\widehat{AB}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2331}","  2329 |
  2330 | describe(""A stretchy and non-shifty accent builder"", function() {
> 2331 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2332 |         expect`\overrightarrow{AB}`.toBuild();
  2333 |         expect`\overrightarrow{AB}^2`.toBuild();
  2334 |         expect`\overrightarrow{AB}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2357}","  2355 |
  2356 | describe(""An under-accent parser"", function() {
> 2357 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2358 |         expect`\underrightarrow{x}`.toParse();
  2359 |         expect`\underrightarrow{x^2}`.toParse();
  2360 |         expect`\underrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2378}","  2376 |
  2377 | describe(""An under-accent builder"", function() {
> 2378 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2379 |         expect`\underrightarrow{x}`.toBuild();
  2380 |         expect`\underrightarrow{x}^2`.toBuild();
  2381 |         expect`\underrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2396}","  2394 |
  2395 | describe(""An extensible arrow parser"", function() {
> 2396 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2397 |         expect`\xrightarrow{x}`.toParse();
  2398 |         expect`\xrightarrow{x^2}`.toParse();
  2399 |         expect`\xrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2418}","  2416 |
  2417 | describe(""An extensible arrow builder"", function() {
> 2418 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2419 |         expect`\xrightarrow{x}`.toBuild();
  2420 |         expect`\xrightarrow{x}^2`.toBuild();
  2421 |         expect`\xrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2437}","  2435 |
  2436 | describe(""A horizontal brace parser"", function() {
> 2437 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2438 |         expect`\overbrace{x}`.toParse();
  2439 |         expect`\overbrace{x^2}`.toParse();
  2440 |         expect`\overbrace{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2460}","  2458 |
  2459 | describe(""A horizontal brace builder"", function() {
> 2460 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2461 |         expect`\overbrace{x}`.toBuild();
  2462 |         expect`\overbrace{x}^2`.toBuild();
  2463 |         expect`\underbrace{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2478}","  2476 |
  2477 | describe(""A boxed parser"", function() {
> 2478 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2479 |         expect`\boxed{x}`.toParse();
  2480 |         expect`\boxed{x^2}`.toParse();
  2481 |         expect`\boxed{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2493}","  2491 |
  2492 | describe(""A boxed builder"", function() {
> 2493 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2494 |         expect`\boxed{x}`.toBuild();
  2495 |         expect`\boxed{x}^2`.toBuild();
  2496 |         expect`\boxed{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2510}","  2508 |
  2509 | describe(""An fbox parser, unlike a boxed parser,"", function() {
> 2510 |     it(""should fail when given math"", function() {
       |    ^ Unknown Test
  2511 |         expect`\fbox{\frac a b}`.not.toParse();
  2512 |     });
  2513 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2516}","  2514 |
  2515 | describe(""A colorbox parser"", function() {
> 2516 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2517 |         expect`\colorbox{red}{a b}`.toParse();
  2518 |         expect`\colorbox{red}{x}^2`.toParse();
  2519 |         expect`\colorbox{red} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2522}","  2520 |     });
  2521 |
> 2522 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2523 |         expect`\colorbox{red}{\alpha}`.not.toParse();
  2524 |         expect`\colorbox{red}{\frac{a}{b}}`.not.toParse();
  2525 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2527}","  2525 |     });
  2526 |
> 2527 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2528 |         expect`\colorbox{red}{a b}`.toParse();
  2529 |         expect`\colorbox{#197}{a b}`.toParse();
  2530 |         expect`\colorbox{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2540}","  2538 |
  2539 | describe(""A colorbox builder"", function() {
> 2540 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2541 |         expect`\colorbox{red}{a b}`.toBuild();
  2542 |         expect`\colorbox{red}{a b}^2`.toBuild();
  2543 |         expect`\colorbox{red} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2552}","  2550 |
  2551 | describe(""An fcolorbox parser"", function() {
> 2552 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2553 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2554 |         expect`\fcolorbox{blue}{yellow}{x}^2`.toParse();
  2555 |         expect`\fcolorbox{blue}{yellow} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2558}","  2556 |     });
  2557 |
> 2558 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2559 |         expect`\fcolorbox{blue}{yellow}{\alpha}`.not.toParse();
  2560 |         expect`\fcolorbox{blue}{yellow}{\frac{a}{b}}`.not.toParse();
  2561 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2563}","  2561 |     });
  2562 |
> 2563 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2564 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2565 |         expect`\fcolorbox{blue}{#197}{a b}`.toParse();
  2566 |         expect`\fcolorbox{blue}{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2576}","  2574 |
  2575 | describe(""A fcolorbox builder"", function() {
> 2576 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2577 |         expect`\fcolorbox{blue}{yellow}{a b}`.toBuild();
  2578 |         expect`\fcolorbox{blue}{yellow}{a b}^2`.toBuild();
  2579 |         expect`\fcolorbox{blue}{yellow} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2588}","  2586 |
  2587 | describe(""A strike-through parser"", function() {
> 2588 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2589 |         expect`\cancel{x}`.toParse();
  2590 |         expect`\cancel{x^2}`.toParse();
  2591 |         expect`\cancel{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2609}","  2607 |
  2608 | describe(""A strike-through builder"", function() {
> 2609 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2610 |         expect`\cancel{x}`.toBuild();
  2611 |         expect`\cancel{x}^2`.toBuild();
  2612 |         expect`\cancel{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2630}","  2628 |
  2629 | describe(""A actuarial angle parser"", function() {
> 2630 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2631 |         expect`a_{\angl{n}}`.toParse();
  2632 |     });
  2633 |     it(""should fail in text mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2633}","  2631 |         expect`a_{\angl{n}}`.toParse();
  2632 |     });
> 2633 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2634 |         expect`\text{a_{\angl{n}}}`.not.toParse();
  2635 |     });
  2636 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2639}","  2637 |
  2638 | describe(""A actuarial angle builder"", function() {
> 2639 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2640 |         expect`a_{\angl{n}}`.toBuild();
  2641 |         expect`a_{\angl{n}i}`.toBuild();
  2642 |         expect`a_{\angl n}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2648}","  2646 |
  2647 | describe(""\\phase"", function() {
> 2648 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2649 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2650 |     });
  2651 |     it(""should not fail in math mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2651}","  2649 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2650 |     });
> 2651 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2652 |         expect`\phase{-78.2^\circ}`.toBuild();
  2653 |     });
  2654 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2657}","  2655 |
  2656 | describe(""A phantom parser"", function() {
> 2657 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2658 |         expect`\phantom{x}`.toParse();
  2659 |         expect`\phantom{x^2}`.toParse();
  2660 |         expect`\phantom{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2677}","  2675 |
  2676 | describe(""A phantom builder"", function() {
> 2677 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2678 |         expect`\phantom{x}`.toBuild();
  2679 |         expect`\phantom{x^2}`.toBuild();
  2680 |         expect`\phantom{x}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2706}","  2704 |
  2705 | describe(""A smash parser"", function() {
> 2706 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2707 |         expect`\smash{x}`.toParse();
  2708 |         expect`\smash{x^2}`.toParse();
  2709 |         expect`\smash{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2731}","  2729 |
  2730 | describe(""A smash builder"", function() {
> 2731 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2732 |         expect`\smash{x}`.toBuild(nonstrictSettings);
  2733 |         expect`\smash{x^2}`.toBuild(nonstrictSettings);
  2734 |         expect`\smash{x}^2`.toBuild(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2755}","  2753 |
  2754 | describe(""An optional argument parser"", function() {
> 2755 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2756 |         // Note this doesn't actually make an optional argument, but still
  2757 |         // should work
  2758 |         expect`\frac[1]{2}{3}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2763}","  2761 |     });
  2762 |
> 2763 |     it(""should work with sqrts with optional arguments"", function() {
       |    ^ Unknown Test
  2764 |         expect`\sqrt[3]{2}`.toParse();
  2765 |     });
  2766 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2767}","  2765 |     });
  2766 |
> 2767 |     it(""should work when the optional argument is missing"", function() {
       |    ^ Unknown Test
  2768 |         expect`\sqrt{2}`.toParse();
  2769 |         expect`\rule{1em}{2em}`.toParse();
  2770 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2772}","  2770 |     });
  2771 |
> 2772 |     it(""should fail when the optional argument is malformed"", function() {
       |    ^ Unknown Test
  2773 |         expect`\rule[1]{2em}{3em}`.not.toParse();
  2774 |     });
  2775 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2776}","  2774 |     });
  2775 |
> 2776 |     it(""should not work if the optional argument isn't closed"", function() {
       |    ^ Unknown Test
  2777 |         expect`\sqrt[`.not.toParse();
  2778 |     });
  2779 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2826}","  2824 | describe(""A substack function"", function() {
  2825 |
> 2826 |     it(""should build"", function() {
       |    ^ Unknown Test
  2827 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2828 |     });
  2829 |     it(""should accommodate spaces in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2829}","  2827 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2828 |     });
> 2829 |     it(""should accommodate spaces in the argument"", function() {
       |    ^ Unknown Test
  2830 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2831 |     });
  2832 |     it(""should accommodate macros in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2832}","  2830 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2831 |     });
> 2832 |     it(""should accommodate macros in the argument"", function() {
       |    ^ Unknown Test
  2833 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2834 |     });
  2835 |     it(""should accommodate an empty argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2835}","  2833 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2834 |     });
> 2835 |     it(""should accommodate an empty argument"", function() {
       |    ^ Unknown Test
  2836 |         expect`\sum_{\substack{}}  P(i,j)`.toBuild();
  2837 |     });
  2838 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2843}","  2841 | describe(""A smallmatrix environment"", function() {
  2842 |
> 2843 |     it(""should build"", function() {
       |    ^ Unknown Test
  2844 |         expect`\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}`.toBuild();
  2845 |     });
  2846 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2851}","  2849 | describe(""A cases environment"", function() {
  2850 |
> 2851 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2852 |         expect`f(a,b)=\begin{cases}a+1&\text{if }b\text{ is odd}\\a&\text{if }b=0\\a-1&\text{otherwise}\end{cases}`
  2853 |             .toParse();
  2854 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2860}","  2858 | describe(""An rcases environment"", function() {
  2859 |
> 2860 |     it(""should build"", function() {
       |    ^ Unknown Test
  2861 |         expect`\begin{rcases} a &\text{if } b \\ c &\text{if } d \end{rcases}⇒…`
  2862 |             .toBuild();
  2863 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2869}","  2867 | describe(""An aligned environment"", function() {
  2868 |
> 2869 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2870 |         expect`\begin{aligned}a&=b&c&=d\\e&=f\end{aligned}`.toParse();
  2871 |     });
  2872 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2873}","  2871 |     });
  2872 |
> 2873 |     it(""should allow cells in brackets"", function() {
       |    ^ Unknown Test
  2874 |         expect`\begin{aligned}[a]&[b]\\ [c]&[d]\end{aligned}`.toParse();
  2875 |     });
  2876 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2877}","  2875 |     });
  2876 |
> 2877 |     it(""should forbid cells in brackets without space"", function() {
       |    ^ Unknown Test
  2878 |         expect`\begin{aligned}[a]&[b]\\[c]&[d]\end{aligned}`.not.toParse();
  2879 |     });
  2880 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2888}","  2886 |
  2887 | describe(""AMS environments"", function() {
> 2888 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  2889 |         expect`\begin{gather}a+b\\c+d\end{gather}`.not.toParse(nonstrictSettings);
  2890 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.not.toParse(nonstrictSettings);
  2891 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.not.toParse(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2901}","  2899 |
  2900 |     const displayMode = new Settings({displayMode: true});
> 2901 |     it(""should build if in display mode"", () => {
       |    ^ Unknown Test
  2902 |         expect`\begin{gather}a+b\\c+d\end{gather}`.toBuild(displayMode);
  2903 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.toBuild(displayMode);
  2904 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2914}","  2912 |     });
  2913 |
> 2914 |     it(""should build an empty environment"", () => {
       |    ^ Unknown Test
  2915 |         expect`\begin{gather}\end{gather}`.toBuild(displayMode);
  2916 |         expect`\begin{gather*}\end{gather*}`.toBuild(displayMode);
  2917 |         expect`\begin{align}\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2926}","  2924 |     });
  2925 |
> 2926 |     it(""{equation} should fail if argument contains two rows."", () => {
       |    ^ Unknown Test
  2927 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2928 |     });
  2929 |     it(""{equation} should fail if argument contains two columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2929}","  2927 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2928 |     });
> 2929 |     it(""{equation} should fail if argument contains two columns."", () => {
       |    ^ Unknown Test
  2930 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2931 |     });
  2932 |     it(""{split} should fail if argument contains three columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2932}","  2930 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2931 |     });
> 2932 |     it(""{split} should fail if argument contains three columns."", () => {
       |    ^ Unknown Test
  2933 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2934 |     });
  2935 |     it(""{array} should fail if body contains more columns than specification."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2935}","  2933 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2934 |     });
> 2935 |     it(""{array} should fail if body contains more columns than specification."", () => {
       |    ^ Unknown Test
  2936 |         expect`\begin{array}{2}a & b & c\\d & e  f\end{array}`.not.toBuild(displayMode);
  2937 |     });
  2938 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2964}","  2962 |
  2963 | describe(""operatorname support"", function() {
> 2964 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2965 |         expect`\operatorname{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2966 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2967 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}_y x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2975}","  2973 |
  2974 | describe(""href and url commands"", function() {
> 2975 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2976 |         expect`\href{http://example.com/}{\sin}`.toBuild(trustSettings);
  2977 |         expect`\url{http://example.com/}`.toBuild(trustSettings);
  2978 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2980}","  2978 |     });
  2979 |
> 2980 |     it(""should allow empty URLs"", function() {
       |    ^ Unknown Test
  2981 |         expect`\href{}{example here}`.toBuild(trustSettings);
  2982 |         expect`\url{}`.toBuild(trustSettings);
  2983 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2993}","  2991 |     });
  2992 |
> 2993 |     it(""should allow spaces single-character URLs"", () => {
       |    ^ Unknown Test
  2994 |         expect`\href %end`.toParseLike(""\\href{%}end"", trustSettings);
  2995 |         expect`\url %end`.toParseLike(""\\url{%}end"", trustSettings);
  2996 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3014}","  3012 |     });
  3013 |
> 3014 |     it(""should not allow unbalanced brace(s) in url"", function() {
       |    ^ Unknown Test
  3015 |         expect`\href{http://example.com/{a}{bar}`.not.toParse();
  3016 |         expect`\href{http://example.com/}a}{bar}`.not.toParse();
  3017 |         expect`\url{http://example.com/{a}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3105}","  3103 |
  3104 | describe(""A raw text parser"", function() {
> 3105 |     it(""should return null for a omitted optional string"", function() {
       |    ^ Unknown Test
  3106 |         expect`\includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}`.toParse();
  3107 |     });
  3108 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3120}","  3118 |     });
  3119 |
> 3120 |     it(""should still parse on unrecognized control sequences"", function() {
       |    ^ Unknown Test
  3121 |         expect`\error`.toParse(noThrowSettings);
  3122 |     });
  3123 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3125}","  3123 |
  3124 |     describe(""should allow unrecognized controls sequences anywhere, including"", function() {
> 3125 |         it(""in superscripts and subscripts"", function() {
       |        ^ Unknown Test
  3126 |             expect`2_\error`.toBuild(noThrowSettings);
  3127 |             expect`3^{\error}_\error`.toBuild(noThrowSettings);
  3128 |             expect`\int\nolimits^\error_\error`.toBuild(noThrowSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3131}","  3129 |         });
  3130 |
> 3131 |         it(""in fractions"", function() {
       |        ^ Unknown Test
  3132 |             expect`\frac{345}{\error}`.toBuild(noThrowSettings);
  3133 |             expect`\frac\error{\error}`.toBuild(noThrowSettings);
  3134 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3136}","  3134 |         });
  3135 |
> 3136 |         it(""in square roots"", function() {
       |        ^ Unknown Test
  3137 |             expect`\sqrt\error`.toBuild(noThrowSettings);
  3138 |             expect`\sqrt{234\error}`.toBuild(noThrowSettings);
  3139 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3141}","  3139 |         });
  3140 |
> 3141 |         it(""in text boxes"", function() {
       |        ^ Unknown Test
  3142 |             expect`\text{\error}`.toBuild(noThrowSettings);
  3143 |         });
  3144 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3211}","  3209 |
  3210 | describe(""The symbol table integrity"", function() {
> 3211 |     it(""should treat certain symbols as synonyms"", function() {
       |    ^ Unknown Test
  3212 |         expect`<`.toBuildLike`\lt`;
  3213 |         expect`>`.toBuildLike`\gt`;
  3214 |         expect`\left<\frac{1}{x}\right>`.toBuildLike`\left\lt\frac{1}{x}\right\gt`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3229}","  3227 |
  3228 | describe(""A macro expander"", function() {
> 3229 |     it(""should produce individual tokens"", function() {
       |    ^ Unknown Test
  3230 |         expect`e^\foo`.toParseLike(""e^1 23"",
  3231 |             new Settings({macros: {""\\foo"": ""123""}}));
  3232 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3234}","  3232 |     });
  3233 |
> 3234 |     it(""should preserve leading spaces inside macro definition"", function() {
       |    ^ Unknown Test
  3235 |         expect`\text{\foo}`.toParseLike(r`\text{ x}`,
  3236 |             new Settings({macros: {""\\foo"": "" x""}}));
  3237 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3239}","  3237 |     });
  3238 |
> 3239 |     it(""should preserve leading spaces inside macro argument"", function() {
       |    ^ Unknown Test
  3240 |         expect`\text{\foo{ x}}`.toParseLike(r`\text{ x}`,
  3241 |             new Settings({macros: {""\\foo"": ""#1""}}));
  3242 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3244}","  3242 |     });
  3243 |
> 3244 |     it(""should ignore expanded spaces in math mode"", function() {
       |    ^ Unknown Test
  3245 |         expect`\foo`.toParseLike(""x"", new Settings({macros: {""\\foo"": "" x""}}));
  3246 |     });
  3247 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3248}","  3246 |     });
  3247 |
> 3248 |     it(""should consume spaces after control-word macro"", function() {
       |    ^ Unknown Test
  3249 |         expect`\text{\foo }`.toParseLike(r`\text{x}`,
  3250 |             new Settings({macros: {""\\foo"": ""x""}}));
  3251 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3253}","  3251 |     });
  3252 |
> 3253 |     it(""should consume spaces after macro with \\relax"", function() {
       |    ^ Unknown Test
  3254 |         expect`\text{\foo }`.toParseLike(r`\text{}`,
  3255 |             new Settings({macros: {""\\foo"": ""\\relax""}}));
  3256 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3258}","  3256 |     });
  3257 |
> 3258 |     it(""should not consume spaces after control-word expansion"", function() {
       |    ^ Unknown Test
  3259 |         expect`\text{\\ }`.toParseLike(r`\text{ }`,
  3260 |             new Settings({macros: {""\\\\"": ""\\relax""}}));
  3261 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3263}","  3261 |     });
  3262 |
> 3263 |     it(""should consume spaces after \\relax"", function() {
       |    ^ Unknown Test
  3264 |         expect`\text{\relax }`.toParseLike`\text{}`;
  3265 |     });
  3266 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3267}","  3265 |     });
  3266 |
> 3267 |     it(""should consume spaces after control-word function"", function() {
       |    ^ Unknown Test
  3268 |         expect`\text{\KaTeX }`.toParseLike`\text{\KaTeX}`;
  3269 |     });
  3270 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3271}","  3269 |     });
  3270 |
> 3271 |     it(""should preserve spaces after control-symbol macro"", function() {
       |    ^ Unknown Test
  3272 |         expect`\text{\% y}`.toParseLike(r`\text{x y}`,
  3273 |             new Settings({macros: {""\\%"": ""x""}}));
  3274 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3276}","  3274 |     });
  3275 |
> 3276 |     it(""should preserve spaces after control-symbol function"", function() {
       |    ^ Unknown Test
  3277 |         expect`\text{\' }`.toParse();
  3278 |     });
  3279 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3280}","  3278 |     });
  3279 |
> 3280 |     it(""should consume spaces between arguments"", function() {
       |    ^ Unknown Test
  3281 |         expect`\text{\foo 1 2}`.toParseLike(r`\text{12end}`,
  3282 |             new Settings({macros: {""\\foo"": ""#1#2end""}}));
  3283 |         expect`\text{\foo {1} {2}}`.toParseLike(r`\text{12end}`,",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3287}","  3285 |     });
  3286 |
> 3287 |     it(""should allow for multiple expansion"", function() {
       |    ^ Unknown Test
  3288 |         expect`1\foo2`.toParseLike(""1aa2"", new Settings({macros: {
  3289 |             ""\\foo"": ""\\bar\\bar"",
  3290 |             ""\\bar"": ""a"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3294}","  3292 |     });
  3293 |
> 3294 |     it(""should allow for multiple expansion with argument"", function() {
       |    ^ Unknown Test
  3295 |         expect`1\foo2`.toParseLike(""12222"", new Settings({macros: {
  3296 |             ""\\foo"": ""\\bar{#1}\\bar{#1}"",
  3297 |             ""\\bar"": ""#1#1"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3301}","  3299 |     });
  3300 |
> 3301 |     it(""should allow for macro argument"", function() {
       |    ^ Unknown Test
  3302 |         expect`\foo\bar`.toParseLike(""(xyz)"", new Settings({macros: {
  3303 |             ""\\foo"": ""(#1)"",
  3304 |             ""\\bar"": ""xyz"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3308}","  3306 |     });
  3307 |
> 3308 |     it(""should allow properly nested group for macro argument"", function() {
       |    ^ Unknown Test
  3309 |         expect`\foo{e^{x_{12}+3}}`.toParseLike(""(e^{x_{12}+3})"",
  3310 |             new Settings({macros: {""\\foo"": ""(#1)""}}));
  3311 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3313}","  3311 |     });
  3312 |
> 3313 |     it(""should delay expansion if preceded by \\expandafter"", function() {
       |    ^ Unknown Test
  3314 |         expect`\expandafter\foo\bar`.toParseLike(""x+y"", new Settings({macros: {
  3315 |             ""\\foo"": ""#1+#2"",
  3316 |             ""\\bar"": ""xy"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3323}","  3321 |     });
  3322 |
> 3323 |     it(""should not expand if preceded by \\noexpand"", function() {
       |    ^ Unknown Test
  3324 |         // \foo is not expanded and interpreted as if its meaning were \relax
  3325 |         expect`\noexpand\foo y`.toParseLike(""y"",
  3326 |             new Settings({macros: {""\\foo"": ""x""}}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3336}","  3334 |     });
  3335 |
> 3336 |     it(""should allow for space macro argument (text version)"", function() {
       |    ^ Unknown Test
  3337 |         expect`\text{\foo\bar}`.toParseLike(r`\text{( )}`, new Settings({macros: {
  3338 |             ""\\foo"": ""(#1)"",
  3339 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3343}","  3341 |     });
  3342 |
> 3343 |     it(""should allow for space macro argument (math version)"", function() {
       |    ^ Unknown Test
  3344 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3345 |             ""\\foo"": ""(#1)"",
  3346 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3350}","  3348 |     });
  3349 |
> 3350 |     it(""should allow for space second argument (text version)"", function() {
       |    ^ Unknown Test
  3351 |         expect`\text{\foo\bar\bar}`.toParseLike(r`\text{( , )}`, new Settings({macros: {
  3352 |             ""\\foo"": ""(#1,#2)"",
  3353 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3357}","  3355 |     });
  3356 |
> 3357 |     it(""should treat \\relax as empty argument"", function() {
       |    ^ Unknown Test
  3358 |         expect`\text{\foo\relax x}`.toParseLike(r`\text{(,x)}`, new Settings({macros: {
  3359 |             ""\\foo"": ""(#1,#2)"",
  3360 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3363}","  3361 |     });
  3362 |
> 3363 |     it(""should allow for space second argument (math version)"", function() {
       |    ^ Unknown Test
  3364 |         expect`\foo\bar\bar`.toParseLike(""(,)"", new Settings({macros: {
  3365 |             ""\\foo"": ""(#1,#2)"",
  3366 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3370}","  3368 |     });
  3369 |
> 3370 |     it(""should allow for empty macro argument"", function() {
       |    ^ Unknown Test
  3371 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3372 |             ""\\foo"": ""(#1)"",
  3373 |             ""\\bar"": """",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3377}","  3375 |     });
  3376 |
> 3377 |     it(""should allow for space function arguments"", function() {
       |    ^ Unknown Test
  3378 |         expect`\frac\bar\bar`.toParseLike(r`\frac{}{}`, new Settings({macros: {
  3379 |             ""\\bar"": "" "",
  3380 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3383}","  3381 |     });
  3382 |
> 3383 |     it(""should build \\overset and \\underset"", function() {
       |    ^ Unknown Test
  3384 |         expect`\overset{f}{\rightarrow} Y`.toBuild();
  3385 |         expect`\underset{f}{\rightarrow} Y`.toBuild();
  3386 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3388}","  3386 |     });
  3387 |
> 3388 |     it(""should build \\iff, \\implies, \\impliedby"", function() {
       |    ^ Unknown Test
  3389 |         expect`X \iff Y`.toBuild();
  3390 |         expect`X \implies Y`.toBuild();
  3391 |         expect`X \impliedby Y`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3394}","  3392 |     });
  3393 |
> 3394 |     it(""should allow aliasing characters"", function() {
       |    ^ Unknown Test
  3395 |         expect`x’=c`.toParseLike(""x'=c"", new Settings({macros: {
  3396 |             ""’"": ""'"",
  3397 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3400}","  3398 |     });
  3399 |
> 3400 |     it(""\\@firstoftwo should consume both, and avoid errors"", function() {
       |    ^ Unknown Test
  3401 |         expect`\@firstoftwo{yes}{no}`.toParseLike`yes`;
  3402 |         expect`\@firstoftwo{yes}{1'_2^3}`.toParseLike`yes`;
  3403 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3405}","  3403 |     });
  3404 |
> 3405 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3406 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3407 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3408 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3410}","  3408 |     });
  3409 |
> 3410 |     it(""\\@ifnextchar should not consume nonspaces"", function() {
       |    ^ Unknown Test
  3411 |         expect`\@ifnextchar!{yes}{no}!!`.toParseLike`yes!!`;
  3412 |         expect`\@ifnextchar!{yes}{no}?!`.toParseLike`no?!`;
  3413 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3415}","  3413 |     });
  3414 |
> 3415 |     it(""\\@ifnextchar should consume spaces"", function() {
       |    ^ Unknown Test
  3416 |         expect`\def\x#1{\@ifnextchar x{yes}{no}}\x{}x\x{} x`
  3417 |             .toParseLike`yesxyesx`;
  3418 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3420}","  3418 |     });
  3419 |
> 3420 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3421 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3422 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3423 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3425}","  3423 |     });
  3424 |
> 3425 |     it(""\\TextOrMath should work immediately"", function() {
       |    ^ Unknown Test
  3426 |         expect`\TextOrMath{text}{math}`.toParseLike`math`;
  3427 |     });
  3428 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3429}","  3427 |     });
  3428 |
> 3429 |     it(""\\TextOrMath should work after other math"", function() {
       |    ^ Unknown Test
  3430 |         expect`x+\TextOrMath{text}{math}`.toParseLike`x+math`;
  3431 |     });
  3432 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3433}","  3431 |     });
  3432 |
> 3433 |     it(""\\TextOrMath should work immediately after \\text"", function() {
       |    ^ Unknown Test
  3434 |         expect`\text{\TextOrMath{text}{math}}`.toParseLike`\text{text}`;
  3435 |     });
  3436 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3437}","  3435 |     });
  3436 |
> 3437 |     it(""\\TextOrMath should work later after \\text"", function() {
       |    ^ Unknown Test
  3438 |         expect`\text{hello \TextOrMath{text}{math}}`.toParseLike`\text{hello text}`;
  3439 |     });
  3440 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3441}","  3439 |     });
  3440 |
> 3441 |     it(""\\TextOrMath should work immediately after \\text ends"", function() {
       |    ^ Unknown Test
  3442 |         expect`\text{\TextOrMath{text}{math}}\TextOrMath{text}{math}`
  3443 |             .toParseLike`\text{text}math`;
  3444 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3446}","  3444 |     });
  3445 |
> 3446 |     it(""\\TextOrMath should work immediately after $"", function() {
       |    ^ Unknown Test
  3447 |         expect`\text{$\TextOrMath{text}{math}$}`.toParseLike`\text{$math$}`;
  3448 |     });
  3449 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3450}","  3448 |     });
  3449 |
> 3450 |     it(""\\TextOrMath should work later after $"", function() {
       |    ^ Unknown Test
  3451 |         expect`\text{$x+\TextOrMath{text}{math}$}`.toParseLike`\text{$x+math$}`;
  3452 |     });
  3453 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3454}","  3452 |     });
  3453 |
> 3454 |     it(""\\TextOrMath should work immediately after $ ends"", function() {
       |    ^ Unknown Test
  3455 |         expect`\text{$\TextOrMath{text}{math}$\TextOrMath{text}{math}}`
  3456 |             .toParseLike`\text{$math$text}`;
  3457 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3459}","  3457 |     });
  3458 |
> 3459 |     it(""\\TextOrMath should work in a macro"", function() {
       |    ^ Unknown Test
  3460 |         expect`\mode\text{\mode$\mode$\mode}\mode`
  3461 |             .toParseLike(r`math\text{text$math$text}math`, new Settings({macros: {
  3462 |                 ""\\mode"": ""\\TextOrMath{text}{math}"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3466}","  3464 |     });
  3465 |
> 3466 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3467 |         expect`\text\mode`.toParseLike(r`\text t`, new Settings({macros:
  3468 |             {""\\mode"": ""\\TextOrMath{t}{m}""}}));
  3469 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3498}","  3496 |     });
  3497 |
> 3498 |     it(""should build Unicode private area characters"", function() {
       |    ^ Unknown Test
  3499 |         expect`\gvertneqq\lvertneqq\ngeqq\ngeqslant\nleqq`.toBuild();
  3500 |         expect`\nleqslant\nshortmid\nshortparallel\varsubsetneq`.toBuild();
  3501 |         expect`\varsubsetneqq\varsupsetneq\varsupsetneqq`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3504}","  3502 |     });
  3503 |
> 3504 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3505 |         expect`\text\mode`.toParseLike(r`\text{text}`, new Settings({macros:
  3506 |             {""\\mode"": ""\\TextOrMath{text}{math}""}}));
  3507 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3509}","  3507 |     });
  3508 |
> 3509 |     it(""\\gdef defines macros"", function() {
       |    ^ Unknown Test
  3510 |         expect`\gdef\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3511 |         expect`\gdef\foo{hi}\foo+\text\foo`.toParseLike`hi+\text{hi}`;
  3512 |         expect`\gdef\foo#1{hi #1}\text{\foo{Alice}, \foo{Bob}}`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3527}","  3525 |     });
  3526 |
> 3527 |     it(""\\gdef defines macros with delimited parameter"", function() {
       |    ^ Unknown Test
  3528 |         expect`\gdef\foo|#1||{#1}\text{\foo| x y ||}`.toParseLike`\text{ x y }`;
  3529 |         expect`\gdef\foo#1|#2{#1+#2}\foo 1 2 |34`.toParseLike`12+34`;
  3530 |         expect`\gdef\foo#1#{#1}\foo1^{23}`.toParseLike`1^{23}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3536}","  3534 |     });
  3535 |
> 3536 |     it(""\\xdef should expand definition"", function() {
       |    ^ Unknown Test
  3537 |         expect`\def\foo{a}\xdef\bar{\foo}\def\foo{}\bar`.toParseLike`a`;
  3538 |         // \def\noexpand\foo{} expands into \def\foo{}
  3539 |         expect`\def\foo{a}\xdef\bar{\def\noexpand\foo{}}\foo\bar\foo`.toParseLike`a`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3546}","  3544 |     });
  3545 |
> 3546 |     it(""\\def should be handled in Parser"", () => {
       |    ^ Unknown Test
  3547 |         expect`\gdef\foo{1}`.toParse(new Settings({maxExpand: 0}));
  3548 |         expect`2^\def\foo{1}2`.not.toParse();
  3549 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3551}","  3549 |     });
  3550 |
> 3551 |     it(""\\def works locally"", () => {
       |    ^ Unknown Test
  3552 |         expect`\def\x{1}\x{\def\x{2}\x{\def\x{3}\x}\x}\x`
  3553 |             .toParseLike`1{2{3}2}1`;
  3554 |         expect`\def\x{1}\x\def\x{2}\x{\def\x{3}\x\def\x{4}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3558}","  3556 |     });
  3557 |
> 3558 |     it(""\\gdef overrides at all levels"", () => {
       |    ^ Unknown Test
  3559 |         expect`\def\x{1}\x{\def\x{2}\x{\gdef\x{3}\x}\x}\x`
  3560 |             .toParseLike`1{2{3}3}3`;
  3561 |         expect`\def\x{1}\x{\def\x{2}\x{\global\def\x{3}\x}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3567}","  3565 |     });
  3566 |
> 3567 |     it(""\\global needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3568 |         expect`\global\def\foo{}\foo`.toParseLike``;
  3569 |         expect`\global\edef\foo{}\foo`.toParseLike``;
  3570 |         expect`\def\DEF{\def}\global\DEF\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3577}","  3575 |     });
  3576 |
> 3577 |     it(""\\long needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3578 |         expect`\long\def\foo{}\foo`.toParseLike``;
  3579 |         expect`\long\edef\foo{}\foo`.toParseLike``;
  3580 |         expect`\long\global\def\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3584}","  3582 |     });
  3583 |
> 3584 |     it(""Macro arguments do not generate groups"", () => {
       |    ^ Unknown Test
  3585 |         expect`\def\x{1}\x\def\foo#1{#1}\foo{\x\def\x{2}\x}\x`
  3586 |             .toParseLike`1122`;
  3587 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3589}","  3587 |     });
  3588 |
> 3589 |     it(""\\textbf arguments do generate groups"", () => {
       |    ^ Unknown Test
  3590 |         expect`\def\x{1}\x\textbf{\x\def\x{2}\x}\x`.toParseLike`1\textbf{12}1`;
  3591 |     });
  3592 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3593}","  3591 |     });
  3592 |
> 3593 |     it(""\\sqrt optional arguments generate groups"", () => {
       |    ^ Unknown Test
  3594 |         expect`\def\x{1}\def\y{1}\x\y\sqrt[\def\x{2}\x]{\def\y{2}\y}\x\y`
  3595 |             .toParseLike`11\sqrt[2]{2}11`;
  3596 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3598}","  3596 |     });
  3597 |
> 3598 |     it(""array cells generate groups"", () => {
       |    ^ Unknown Test
  3599 |         expect`\def\x{1}\begin{matrix}\x&\def\x{2}\x&\x\end{matrix}\x`
  3600 |             .toParseLike`\begin{matrix}1&2&1\end{matrix}1`;
  3601 |         expect`\def\x{1}\begin{matrix}\def\x{2}\x&\x\end{matrix}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3629}","  3627 |     });
  3628 |
> 3629 |     it(""\\let copies the definition"", () => {
       |    ^ Unknown Test
  3630 |         expect`\let\foo=\frac\def\frac{}\foo12`.toParseLike`\frac12`;
  3631 |         expect`\def\foo{1}\let\bar\foo\def\foo{2}\bar`.toParseLike`1`;
  3632 |         expect`\let\foo=\kern\edef\bar{\foo1em}\let\kern=\relax\bar`.toParseLike`\kern1em`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3649}","  3647 |     });
  3648 |
> 3649 |     it(""\\futurelet should parse correctly"", () => {
       |    ^ Unknown Test
  3650 |         expect`\futurelet\foo\frac1{2+\foo}`.toParseLike`\frac1{2+1}`;
  3651 |     });
  3652 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3653}","  3651 |     });
  3652 |
> 3653 |     it(""macros argument can simulate \\let"", () => {
       |    ^ Unknown Test
  3654 |         expect`\int`.toParseLike(""\\int\\limits"", {macros: {
  3655 |             ""\\Oldint"": {
  3656 |                 tokens: [{text: ""\\int"", noexpand: true}],",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3680}","  3678 |     });
  3679 |
> 3680 |     it(""\\newcommand defines new macros"", () => {
       |    ^ Unknown Test
  3681 |         expect`\newcommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3682 |         expect`\newcommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3683 |         // Function detection",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3695}","  3693 |     });
  3694 |
> 3695 |     it(""\\renewcommand redefines macros"", () => {
       |    ^ Unknown Test
  3696 |         expect`\renewcommand\foo{x^2}\foo+\foo`.not.toParse();
  3697 |         expect`\renewcommand{\foo}{x^2}\foo+\foo`.not.toParse();
  3698 |         expect`\renewcommand\bar{x^2}\bar+\bar`.toParseLike`x^2+x^2`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3703}","  3701 |     });
  3702 |
> 3703 |     it(""\\providecommand defines but does not redefine macros"", () => {
       |    ^ Unknown Test
  3704 |         expect`\providecommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3705 |         expect`\providecommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3706 |         expect`\newcommand{\foo}{1}\foo\providecommand{\foo}{2}\foo`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3714}","  3712 |     });
  3713 |
> 3714 |     it(""\\newcommand is local"", () => {
       |    ^ Unknown Test
  3715 |         expect`\newcommand\foo{1}\foo{\renewcommand\foo{2}\foo}\foo`
  3716 |             .toParseLike`1{2}1`;
  3717 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3719}","  3717 |     });
  3718 |
> 3719 |     it(""\\newcommand accepts number of arguments"", () => {
       |    ^ Unknown Test
  3720 |         expect`\newcommand\foo[1]{#1^2}\foo x+\foo{y}`.toParseLike`x^2+y^2`;
  3721 |         expect`\newcommand\foo[10]{#1^2}\foo 0123456789`.toParseLike`0^2`;
  3722 |         expect`\newcommand\foo[x]{}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3728}","  3726 |     // This may change in the future, if we support the extra features of
  3727 |     // \hspace.
> 3728 |     it(""should treat \\hspace, \\hskip like \\kern"", function() {
       |    ^ Unknown Test
  3729 |         expect`\hspace{1em}`.toParseLike`\kern1em`;
  3730 |         expect`\hskip{1em}`.toParseLike`\kern1em`;
  3731 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3733}","  3731 |     });
  3732 |
> 3733 |     it(""should expand \\limsup as expected"", () => {
       |    ^ Unknown Test
  3734 |         expect`\limsup`.toParseLike`\operatorname*{lim\,sup}`;
  3735 |     });
  3736 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3737}","  3735 |     });
  3736 |
> 3737 |     it(""should expand \\liminf as expected"", () => {
       |    ^ Unknown Test
  3738 |         expect`\liminf`.toParseLike`\operatorname*{lim\,inf}`;
  3739 |     });
  3740 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3741}","  3739 |     });
  3740 |
> 3741 |     it(""should expand AMS log-like symbols as expected"", () => {
       |    ^ Unknown Test
  3742 |         expect`\injlim`.toParseLike`\operatorname*{inj\,lim}`;
  3743 |         expect`\projlim`.toParseLike`\operatorname*{proj\,lim}`;
  3744 |         expect`\varlimsup`.toParseLike`\operatorname*{\overline{lim}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3751}","  3749 |     });
  3750 |
> 3751 |     it(""should expand \\plim as expected"", () => {
       |    ^ Unknown Test
  3752 |         expect`\plim`.toParseLike`\mathop{\operatorname{plim}}\limits`;
  3753 |     });
  3754 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3755}","  3753 |     });
  3754 |
> 3755 |     it(""should expand \\argmin as expected"", () => {
       |    ^ Unknown Test
  3756 |         expect`\argmin`.toParseLike`\operatorname*{arg\,min}`;
  3757 |     });
  3758 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3759}","  3757 |     });
  3758 |
> 3759 |     it(""should expand \\argmax as expected"", () => {
       |    ^ Unknown Test
  3760 |         expect`\argmax`.toParseLike`\operatorname*{arg\,max}`;
  3761 |     });
  3762 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3763}","  3761 |     });
  3762 |
> 3763 |     it(""should expand \\bra as expected"", () => {
       |    ^ Unknown Test
  3764 |         expect`\bra{\phi}`.toParseLike`\mathinner{\langle{\phi}|}`;
  3765 |     });
  3766 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3767}","  3765 |     });
  3766 |
> 3767 |     it(""should expand \\ket as expected"", () => {
       |    ^ Unknown Test
  3768 |         expect`\ket{\psi}`.toParseLike`\mathinner{|{\psi}\rangle}`;
  3769 |     });
  3770 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3771}","  3769 |     });
  3770 |
> 3771 |     it(""should expand \\braket as expected"", () => {
       |    ^ Unknown Test
  3772 |         expect`\braket{\phi|\psi}`.toParseLike`\mathinner{\langle{\phi|\psi}\rangle}`;
  3773 |     });
  3774 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3775}","  3773 |     });
  3774 |
> 3775 |     it(""should expand \\Bra as expected"", () => {
       |    ^ Unknown Test
  3776 |         expect`\Bra{\phi}`.toParseLike`\left\langle\phi\right|`;
  3777 |     });
  3778 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3779}","  3777 |     });
  3778 |
> 3779 |     it(""should expand \\Ket as expected"", () => {
       |    ^ Unknown Test
  3780 |         expect`\Ket{\psi}`.toParseLike`\left|\psi\right\rangle`;
  3781 |     });
  3782 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3783}","  3781 |     });
  3782 |
> 3783 |     it(""should expand \\Braket as expected"", () => {
       |    ^ Unknown Test
  3784 |         expect`\Braket{ ϕ | \frac{∂^2}{∂ t^2} | ψ }`.toParseLike`\left\langle ϕ\,\middle\vert\,\frac{∂^2}{∂ t^2}\,\middle\vert\, ψ\right\rangle`;
  3785 |     });
  3786 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3787}","  3785 |     });
  3786 |
> 3787 |     it(""should expand \\set as expected"", () => {
       |    ^ Unknown Test
  3788 |         expect`\set{x|x<5|S|}`.toParseLike`\{\,x\mid x<5|S|\,\}`;
  3789 |         // \set doesn't support special || or \| handling
  3790 |         expect`\set{x||x<5|S|}`.toParseLike`\{\,x\mid |x<5|S|\,\}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3794}","  3792 |     });
  3793 |
> 3794 |     it(""should expand \\Set as expected"", () => {
       |    ^ Unknown Test
  3795 |         expect`\Set{ x | x<\frac 1 2 |S| }`
  3796 |         .toParseLike`\left\{\: x\;\middle\vert\; x<\frac 1 2 |S| \:\right\}`;
  3797 |         expect`\Set{ x || x<\frac 1 2 |S| }`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3807}","  3805 |     const displayMode = new Settings({displayMode: true});
  3806 |
> 3807 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  3808 |         expect`\tag{hi}x+y`.not.toParse();
  3809 |     });
  3810 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3811}","  3809 |     });
  3810 |
> 3811 |     it(""should fail with multiple tags"", () => {
       |    ^ Unknown Test
  3812 |         expect`\tag{1}\tag{2}x+y`.not.toParse(displayMode);
  3813 |     });
  3814 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3815}","  3813 |     });
  3814 |
> 3815 |     it(""should fail with multiple tags in one row"", () => {
       |    ^ Unknown Test
  3816 |         expect`\begin{align}\tag{1}x+y\tag{2}\end{align}`.not.toParse(displayMode);
  3817 |     });
  3818 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3819}","  3817 |     });
  3818 |
> 3819 |     it(""should work with one tag per row"", () => {
       |    ^ Unknown Test
  3820 |         expect`\begin{align}\tag{1}x\\&+y\tag{2}\end{align}`.toParse(displayMode);
  3821 |     });
  3822 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3823}","  3821 |     });
  3822 |
> 3823 |     it(""should work with \\nonumber/\\notag"", () => {
       |    ^ Unknown Test
  3824 |         expect`\begin{align}\tag{1}\nonumber x\\&+y\notag\end{align}`
  3825 |         .toParseLike(r`\begin{align}\tag{1}x\\&+y\nonumber\end{align}`, displayMode);
  3826 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3828}","  3826 |     });
  3827 |
> 3828 |     it(""should build"", () => {
       |    ^ Unknown Test
  3829 |         expect`\tag{hi}x+y`.toBuild(displayMode);
  3830 |     });
  3831 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3832}","  3830 |     });
  3831 |
> 3832 |     it(""should ignore location of \\tag"", () => {
       |    ^ Unknown Test
  3833 |         expect`\tag{hi}x+y`.toParseLike(r`x+y\tag{hi}`, displayMode);
  3834 |     });
  3835 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3836}","  3834 |     });
  3835 |
> 3836 |     it(""should handle \\tag* like \\tag"", () => {
       |    ^ Unknown Test
  3837 |         expect`\tag{hi}x+y`.toParseLike(r`\tag*{({hi})}x+y`, displayMode);
  3838 |     });
  3839 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3865}","  3863 |
  3864 | describe(""\\@binrel automatic bin/rel/ord"", () => {
> 3865 |     it(""should generate proper class"", () => {
       |    ^ Unknown Test
  3866 |         expect`L\@binrel+xR`.toParseLike`L\mathbin xR`;
  3867 |         expect`L\@binrel=xR`.toParseLike`L\mathrel xR`;
  3868 |         expect`L\@binrel xxR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3874}","  3872 |     });
  3873 |
> 3874 |     it(""should base on just first character in group"", () => {
       |    ^ Unknown Test
  3875 |         expect`L\@binrel{+x}xR`.toParseLike`L\mathbin xR`;
  3876 |         expect`L\@binrel{=x}xR`.toParseLike`L\mathrel xR`;
  3877 |         expect`L\@binrel{xx}xR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3894}","  3892 |
  3893 | describe(""Unicode accents"", function() {
> 3894 |     it(""should parse Latin-1 letters in math mode"", function() {
       |    ^ Unknown Test
  3895 |         // TODO(edemaine): Unsupported Latin-1 letters in math: ÇÐÞçðþ
  3896 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ`
  3897 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3914}","  3912 |     });
  3913 |
> 3914 |     it(""should parse Latin-1 letters in text mode"", function() {
       |    ^ Unknown Test
  3915 |         // TODO(edemaine): Unsupported Latin-1 letters in text: ÇÐÞçðþ
  3916 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}`
  3917 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3934}","  3932 |     });
  3933 |
> 3934 |     it(""should support \\aa in text mode"", function() {
       |    ^ Unknown Test
  3935 |         expect`\text{\aa\AA}`.toParseLike(r`\text{\r a\r A}`, strictSettings);
  3936 |         expect`\aa`.not.toParse(strictSettings);
  3937 |         expect`\Aa`.not.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3945}","  3943 |     });
  3944 |
> 3945 |     it(""should parse multi-accented characters"", function() {
       |    ^ Unknown Test
  3946 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3947 |         // Doesn't parse quite the same as
  3948 |         // ""\\text{\\'{\\^a}\\'{\\=a}\\'{\\u a}}"" because of the ordgroups.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3951}","  3949 |     });
  3950 |
> 3951 |     it(""should parse accented i's and j's"", function() {
       |    ^ Unknown Test
  3952 |         expect`íȷ́`.toParseLike(r`\acute ı\acute ȷ`, nonstrictSettings);
  3953 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3954 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3958}","  3956 |
  3957 | describe(""Unicode"", function() {
> 3958 |     it(""should parse negated relations"", function() {
       |    ^ Unknown Test
  3959 |         expect`∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌`.toParse(strictSettings);
  3960 |     });
  3961 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3962}","  3960 |     });
  3961 |
> 3962 |     it(""should build relations"", function() {
       |    ^ Unknown Test
  3963 |         expect`∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌`.toBuild(strictSettings);
  3964 |     });
  3965 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3966}","  3964 |     });
  3965 |
> 3966 |     it(""should parse relations"", function() {
       |    ^ Unknown Test
  3967 |         // These characters are not in the KaTeX fonts. So they build with an error message.
  3968 |         expect`⊶⊷`.toParse();
  3969 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3971}","  3969 |     });
  3970 |
> 3971 |     it(""should build big operators"", function() {
       |    ^ Unknown Test
  3972 |         expect`∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆`.toBuild(strictSettings);
  3973 |     });
  3974 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3975}","  3973 |     });
  3974 |
> 3975 |     it(""should build more relations"", function() {
       |    ^ Unknown Test
  3976 |         expect`⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋`.toBuild(strictSettings);
  3977 |     });
  3978 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3989}","  3987 |     });
  3988 |
> 3989 |     it(""should build arrows"", function() {
       |    ^ Unknown Test
  3990 |         expect`←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉`.toBuild(strictSettings);
  3991 |     });
  3992 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3993}","  3991 |     });
  3992 |
> 3993 |     it(""should build more arrows"", function() {
       |    ^ Unknown Test
  3994 |         expect`⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼`.toBuild(strictSettings);
  3995 |     });
  3996 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4079}","  4077 |
  4078 | describe(""The maxExpand setting"", () => {
> 4079 |     it(""should prevent expansion"", () => {
       |    ^ Unknown Test
  4080 |         expect`\gdef\foo{1}\foo`.toParse();
  4081 |         expect`\gdef\foo{1}\foo`.toParse(new Settings({maxExpand: 1}));
  4082 |         expect`\gdef\foo{1}\foo`.not.toParse(new Settings({maxExpand: 0}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4085}","  4083 |     });
  4084 |
> 4085 |     it(""should prevent infinite loops"", () => {
       |    ^ Unknown Test
  4086 |         expect`\gdef\foo{\foo}\foo`.not.toParse(
  4087 |             new Settings({maxExpand: 10}));
  4088 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4090}","  4088 |     });
  4089 |
> 4090 |     it(""should prevent exponential blowup via \\edef"", () => {
       |    ^ Unknown Test
  4091 |         expect`\edef0{x}\edef0{00}\edef0{00}\edef0{00}\edef0{00}`.not.toParse(
  4092 |             new Settings({maxExpand: 10}));
  4093 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4141}","  4139 |
  4140 | describe(""Newlines via \\\\ and \\newline"", function() {
> 4141 |     it(""should build \\\\ without the optional argument and \\newline the same"", () => {
       |    ^ Unknown Test
  4142 |         expect`hello \\ world`.toBuildLike`hello \newline world`;
  4143 |     });
  4144 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4145}","  4143 |     });
  4144 |
> 4145 |     it(""should not allow \\newline to scan for an optional size argument"", () => {
       |    ^ Unknown Test
  4146 |         expect`hello \newline[w]orld`.toBuild();
  4147 |     });
  4148 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4149}","  4147 |     });
  4148 |
> 4149 |     it(""should not allow \\cr at top level"", () => {
       |    ^ Unknown Test
  4150 |         expect`hello \cr world`.not.toBuild();
  4151 |     });
  4152 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4164}","  4162 |
  4163 | describe(""Symbols"", function() {
> 4164 |     it(""should parse \\text{\\i\\j}"", () => {
       |    ^ Unknown Test
  4165 |         expect`\text{\i\j}`.toBuild(strictSettings);
  4166 |     });
  4167 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4168}","  4166 |     });
  4167 |
> 4168 |     it(""should parse spacing functions in math or text mode"", () => {
       |    ^ Unknown Test
  4169 |         expect`A\;B\,C\nobreakspace \text{A\;B\,C\nobreakspace}`.toBuild(strictSettings);
  4170 |     });
  4171 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4172}","  4170 |     });
  4171 |
> 4172 |     it(""should build \\minuso"", () => {
       |    ^ Unknown Test
  4173 |         expect`\\minuso`.toBuild(strictSettings);
  4174 |     });
  4175 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4176}","  4174 |     });
  4175 |
> 4176 |     it(""should render ligature commands like their unicode characters"", () => {
       |    ^ Unknown Test
  4177 |         expect`\text{\ae\AE\oe\OE\o\O\ss}`.toBuildLike(r`\text{æÆœŒøØß}`, strictSettings);
  4178 |     });
  4179 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4182}","  4180 |
  4181 | describe(""strict setting"", function() {
> 4182 |     it(""should allow unicode text when not strict"", () => {
       |    ^ Unknown Test
  4183 |         expect`é`.toParse(new Settings(nonstrictSettings));
  4184 |         expect`試`.toParse(new Settings(nonstrictSettings));
  4185 |         expect`é`.toParse(new Settings({strict: ""ignore""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4193}","  4191 |     });
  4192 |
> 4193 |     it(""should forbid unicode text when strict"", () => {
       |    ^ Unknown Test
  4194 |         expect`é`.not.toParse(new Settings({strict: true}));
  4195 |         expect`試`.not.toParse(new Settings({strict: true}));
  4196 |         expect`é`.not.toParse(new Settings({strict: ""error""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4204}","  4202 |     });
  4203 |
> 4204 |     it(""should warn about unicode text when default"", () => {
       |    ^ Unknown Test
  4205 |         expect`é`.toWarn(new Settings());
  4206 |         expect`試`.toWarn(new Settings());
  4207 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4209}","  4207 |     });
  4208 |
> 4209 |     it(""should always allow unicode text in text mode"", () => {
       |    ^ Unknown Test
  4210 |         expect`\text{é試}`.toParse(nonstrictSettings);
  4211 |         expect`\text{é試}`.toParse(strictSettings);
  4212 |         expect`\text{é試}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4215}","  4213 |     });
  4214 |
> 4215 |     it(""should warn about top-level \\newline in display mode"", () => {
       |    ^ Unknown Test
  4216 |         expect`x\\y`.toWarn(new Settings({displayMode: true}));
  4217 |         expect`x\\y`.toParse(new Settings({displayMode: false}));
  4218 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4264}","  4262 |         }).toThrow(errorMessage);
  4263 |     });
> 4264 |     it(""should add font metrics to metrics map and render successfully"", () => {
       |    ^ Unknown Test
  4265 |         const mockMetrics = {};
  4266 |         // mock font metrics for the symbols that we added previously
  4267 |         for (let number = 0; number <= 9; number++) {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4300}","  4298 |
  4299 | describe(""\\relax"", () => {
> 4300 |     it(""should stop the expansion"", () => {
       |    ^ Unknown Test
  4301 |         expect`\kern2\relax em`.not.toParse();
  4302 |     });
  4303 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4306}","  4304 |
  4305 | describe(""\\emph"", () => {
> 4306 |     it(""should toggle italics"", () => {
       |    ^ Unknown Test
  4307 |         expect`\emph{foo \emph{bar}}`.toBuildLike`\textit{foo \textup{bar}}`;
  4308 |     });
  4309 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4310}","  4308 |     });
  4309 |
> 4310 |     it(""should toggle italics within text"", () => {
       |    ^ Unknown Test
  4311 |         expect`\text{\emph{foo \emph{bar}}}`.toBuildLike`\text{\textit{foo \textup{bar}}}`;
  4312 |     });
  4313 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4314}","  4312 |     });
  4313 |
> 4314 |     it(""should toggle italics within textup"", () => {
       |    ^ Unknown Test
  4315 |         expect`\textup{\emph{foo \emph{bar}}}`.toBuildLike`\textup{\textit{foo \textup{bar}}}`;
  4316 |     });
  4317 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4318}","  4316 |     });
  4317 |
> 4318 |     it(""should toggle italics within textit"", () => {
       |    ^ Unknown Test
  4319 |         expect`\textit{\emph{foo \emph{bar}}}`.toBuildLike`\textit{\textup{foo \textit{bar}}}`;
  4320 |     });
  4321 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 132}","  130 |         });
  131 |         it(""complains about mismatched \\verb with end of line"", function() {
> 132 |             expect(""\\verb|hello\nworld|"").toFailWithParseError(
      |            ^ Redundant Assertion
  133 |                 ""\\verb ended by end of line instead of matching delimiter"");
  134 |         });
  135 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 291}","  289 |     describe(""#_innerLex"", function() {
  290 |         it(""rejects lone surrogate char"", function() {
> 291 |             expect(""\udcba "").toFailWithParseError(
      |            ^ Redundant Assertion
  292 |                    ""Unexpected character: '\udcba' at position 1:"" +
  293 |                     "" \udcba\u0332 "");
  294 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 296}","  294 |         });
  295 |         it(""rejects lone backslash at end of input"", function() {
> 296 |             expect(""\\"").toFailWithParseError(
      |            ^ Redundant Assertion
  297 |                    ""Unexpected character: '\\' at position 1: \\̲"");
  298 |         });
  299 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 8, 'line': 328}","  326 | describe(""Unicode accents"", function() {
  327 |     it(""should return error for invalid combining characters"", function() {
> 328 |         expect(""A\u0328"").toFailWithParseError(
      |        ^ Redundant Assertion
  329 |             ""Unknown accent ' ̨' at position 1: Ą̲̲"");
  330 |     });
  331 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 6}","  4 |
  5 |     describe(""#handleInfixNodes"", function() {
> 6 |         it(""rejects repeated infix operators"", function() {
    |        ^ Unknown Test
  7 |             expect`1\over 2\over 3`.toFailWithParseError(
  8 |                    ""only one infix operator per group at position 9: "" +
  9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 11}","   9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");
  10 |         });
> 11 |         it(""rejects conflicting infix operators"", function() {
     |        ^ Unknown Test
  12 |             expect`1\over 2\choose 3`.toFailWithParseError(
  13 |                    ""only one infix operator per group at position 9: "" +
  14 |                    ""1\\over 2\\̲c̲h̲o̲o̲s̲e̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 19}","  17 |
  18 |     describe(""#handleSupSubscript"", function() {
> 19 |         it(""rejects ^ at end of group"", function() {
     |        ^ Unknown Test
  20 |             expect`{1^}`.toFailWithParseError(
  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 23}","  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });
> 23 |         it(""rejects _ at end of input"", function() {
     |        ^ Unknown Test
  24 |             expect`1_`.toFailWithParseError(
  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 27}","  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });
> 27 |         it(""rejects \\sqrt as argument to ^"", function() {
     |        ^ Unknown Test
  28 |             expect`1^\sqrt{2}`.toFailWithParseError(
  29 |                    ""Got function '\\sqrt' with no arguments as superscript"" +
  30 |                    "" at position 3: 1^\\̲s̲q̲r̲t̲{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 35}","  33 |
  34 |     describe(""#parseAtom"", function() {
> 35 |         it(""rejects \\limits without operator"", function() {
     |        ^ Unknown Test
  36 |             expect`\alpha\limits\omega`.toFailWithParseError(
  37 |                    ""Limit controls must follow a math operator"" +
  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 40}","  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");
  39 |         });
> 40 |         it(""rejects \\limits at the beginning of the input"", function() {
     |        ^ Unknown Test
  41 |             expect`\limits\omega`.toFailWithParseError(
  42 |                    ""Limit controls must follow a math operator"" +
  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 45}","  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");
  44 |         });
> 45 |         it(""rejects double superscripts"", function() {
     |        ^ Unknown Test
  46 |             expect`1^2^3`.toFailWithParseError(
  47 |                    ""Double superscript at position 4: 1^2^̲3"");
  48 |             expect`1^{2+3}_4^5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 51}","  49 |                    ""Double superscript at position 10: 1^{2+3}_4^̲5"");
  50 |         });
> 51 |         it(""rejects double superscripts involving primes"", function() {
     |        ^ Unknown Test
  52 |             expect`1'_2^3`.toFailWithParseError(
  53 |                    ""Double superscript at position 5: 1'_2^̲3"");
  54 |             expect`1^2'`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 61}","  59 |                    ""Double superscript at position 5: 1'_2'̲"");
  60 |         });
> 61 |         it(""rejects double subscripts"", function() {
     |        ^ Unknown Test
  62 |             expect`1_2_3`.toFailWithParseError(
  63 |                    ""Double subscript at position 4: 1_2_̲3"");
  64 |             expect`1_{2+3}^4_5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 70}","  68 |
  69 |     describe(""#parseImplicitGroup"", function() {
> 70 |         it(""reports unknown environments"", function() {
     |        ^ Unknown Test
  71 |             expect`\begin{foo}bar\end{foo}`.toFailWithParseError(
  72 |                    ""No such environment: foo at position 7:"" +
  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 75}","  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");
  74 |         });
> 75 |         it(""reports mismatched environments"", function() {
     |        ^ Unknown Test
  76 |             expect`\begin{pmatrix}1&2\\3&4\end{bmatrix}+5`
  77 |                 .toFailWithParseError(
  78 |                    ""Mismatch: \\begin{pmatrix} matched by \\end{bmatrix}"" +",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 84}","  82 |
  83 |     describe(""#parseFunction"", function() {
> 84 |         it(""rejects math-mode functions in text mode"", function() {
     |        ^ Unknown Test
  85 |             expect`\text{\sqrt2 is irrational}`.toFailWithParseError(
  86 |                 ""Can't use function '\\sqrt' in text mode"" +
  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 89}","  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");
  88 |         });
> 89 |         it(""rejects text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  90 |             expect`$`.toFailWithParseError(
  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 93}","  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });
> 93 |         it(""rejects strict-mode text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  94 |             expect`\'echec`.toFailWithParseError(""LaTeX-incompatible input "" +
  95 |                 ""and strict mode is set to 'error': LaTeX's accent \\' works "" +
  96 |                 ""only in text mode [mathVsTextAccents]"", strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 101}","   99 |
  100 |     describe(""#parseArguments"", function() {
> 101 |         it(""complains about missing argument at end of input"", function() {
      |        ^ Unknown Test
  102 |             expect`2\sqrt`.toFailWithParseError(
  103 |                    ""Expected group as argument to '\\sqrt'"" +
  104 |                    "" at end of input: 2\\sqrt"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 106}","  104 |                    "" at end of input: 2\\sqrt"");
  105 |         });
> 106 |         it(""complains about missing argument at end of group"", function() {
      |        ^ Unknown Test
  107 |             expect`1^{2\sqrt}`.toFailWithParseError(
  108 |                    ""Expected group as argument to '\\sqrt'"" +
  109 |                    "" at position 10: 1^{2\\sqrt}̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 111}","  109 |                    "" at position 10: 1^{2\\sqrt}̲"");
  110 |         });
> 111 |         it(""complains about functions as arguments to others"", function() {
      |        ^ Unknown Test
  112 |             expect`\sqrt\over2`.toFailWithParseError(
  113 |                    ""Got function '\\over' with no arguments as argument to"" +
  114 |                    "" '\\sqrt' at position 6: \\sqrt\\̲o̲v̲e̲r̲2"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 119}","  117 |
  118 |     describe(""#parseGroup"", function() {
> 119 |         it(""complains about undefined control sequence"", function() {
      |        ^ Unknown Test
  120 |             expect`\xyz`.toFailWithParseError(
  121 |                    ""Undefined control sequence: \\xyz"" +
  122 |                    "" at position 1: \\̲x̲y̲z̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 127}","  125 |
  126 |     describe(""#verb"", function() {
> 127 |         it(""complains about mismatched \\verb with end of string"", function() {
      |        ^ Unknown Test
  128 |             expect`\verb|hello`.toFailWithParseError(
  129 |                 ""\\verb ended by end of line instead of matching delimiter"");
  130 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 142}","  140 |
  141 |     describe(""#parseInput expecting EOF"", function() {
> 142 |         it(""complains about extra }"", function() {
      |        ^ Unknown Test
  143 |             expect`{1+2}}`.toFailWithParseError(
  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 146}","  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });
> 146 |         it(""complains about extra \\end"", function() {
      |        ^ Unknown Test
  147 |             expect`x\end{matrix}`.toFailWithParseError(
  148 |                    ""Expected 'EOF', got '\\end' at position 2:"" +
  149 |                    "" x\\̲e̲n̲d̲{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 151}","  149 |                    "" x\\̲e̲n̲d̲{matrix}"");
  150 |         });
> 151 |         it(""complains about top-level &"", function() {
      |        ^ Unknown Test
  152 |             expect`1&2`.toFailWithParseError(
  153 |                    ""Expected 'EOF', got '&' at position 2: 1&̲2"");
  154 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 158}","  156 |
  157 |     describe(""#parseImplicitGroup expecting \\right"", function() {
> 158 |         it(""rejects missing \\right"", function() {
      |        ^ Unknown Test
  159 |             expect`\left(1+2)`.toFailWithParseError(
  160 |                    ""Expected '\\right', got 'EOF' at end of input:"" +
  161 |                    "" \\left(1+2)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 163}","  161 |                    "" \\left(1+2)"");
  162 |         });
> 163 |         it(""rejects incorrectly scoped \\right"", function() {
      |        ^ Unknown Test
  164 |             expect`{\left(1+2}\right)`.toFailWithParseError(
  165 |                    ""Expected '\\right', got '}' at position 11:"" +
  166 |                    "" {\\left(1+2}̲\\right)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 174}","  172 |
  173 |     describe(""#parseSpecialGroup expecting braces"", function() {
> 174 |         it(""complains about missing { for color"", function() {
      |        ^ Unknown Test
  175 |             expect`\textcolor#ffffff{text}`.toFailWithParseError(
  176 |                    ""Invalid color: '#' at position 11:"" +
  177 |                    "" \\textcolor#̲ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 179}","  177 |                    "" \\textcolor#̲ffffff{text}"");
  178 |         });
> 179 |         it(""complains about missing { for size"", function() {
      |        ^ Unknown Test
  180 |             expect`\rule{1em}[2em]`.toFailWithParseError(
  181 |                    ""Invalid size: '[' at position 11: \\rule{1em}[̲2em]"");
  182 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 184}","  182 |         });
  183 |         // Can't test for the [ of an optional group since it's optional
> 184 |         it(""complains about missing } for color"", function() {
      |        ^ Unknown Test
  185 |             expect`\textcolor{#ffffff{text}`.toFailWithParseError(
  186 |                    ""Unexpected end of input in a macro argument,"" +
  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 189}","  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");
  188 |         });
> 189 |         it(""complains about missing ] for size"", function() {
      |        ^ Unknown Test
  190 |             expect`\rule[1em{2em}{3em}`.toFailWithParseError(
  191 |                    ""Unexpected end of input in a macro argument,"" +
  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 194}","  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");
  193 |         });
> 194 |         it(""complains about missing ] for size at end of input"", function() {
      |        ^ Unknown Test
  195 |             expect`\rule[1em`.toFailWithParseError(
  196 |                    ""Unexpected end of input in a macro argument,"" +
  197 |                    "" expected ']' at end of input: \\rule[1em"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 199}","  197 |                    "" expected ']' at end of input: \\rule[1em"");
  198 |         });
> 199 |         it(""complains about missing } for color at end of input"", function() {
      |        ^ Unknown Test
  200 |             expect`\textcolor{#123456`.toFailWithParseError(
  201 |                    ""Unexpected end of input in a macro argument,"" +
  202 |                    "" expected '}' at end of input: …xtcolor{#123456"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 207}","  205 |
  206 |     describe(""#parseGroup expecting }"", function() {
> 207 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  208 |             expect`\sqrt{2`.toFailWithParseError(
  209 |                    ""Expected '}', got 'EOF' at end of input: \\sqrt{2"");
  210 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 214}","  212 |
  213 |     describe(""#parseOptionalGroup expecting ]"", function() {
> 214 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  215 |             expect`\sqrt[3`.toFailWithParseError(
  216 |                    ""Unexpected end of input in a macro argument,"" +
  217 |                    "" expected ']' at end of input: \\sqrt[3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 219}","  217 |                    "" expected ']' at end of input: \\sqrt[3"");
  218 |         });
> 219 |         it(""before group"", function() {
      |        ^ Unknown Test
  220 |             expect`\sqrt[3{2}`.toFailWithParseError(
  221 |                    ""Unexpected end of input in a macro argument,"" +
  222 |                    "" expected ']' at end of input: \\sqrt[3{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 231}","  229 |
  230 |     describe(""parseArray"", function() {
> 231 |         it(""rejects missing \\end"", function() {
      |        ^ Unknown Test
  232 |             expect`\begin{matrix}1`.toFailWithParseError(
  233 |                    ""Expected & or \\\\ or \\cr or \\end at end of input:"" +
  234 |                    "" \\begin{matrix}1"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 236}","  234 |                    "" \\begin{matrix}1"");
  235 |         });
> 236 |         it(""rejects incorrectly scoped \\end"", function() {
      |        ^ Unknown Test
  237 |             expect`{\begin{matrix}1}\end{matrix}`.toFailWithParseError(
  238 |                    ""Expected & or \\\\ or \\cr or \\end at position 17:"" +
  239 |                    "" …\\begin{matrix}1}̲\\end{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 244}","  242 |
  243 |     describe(""array environment"", function() {
> 244 |         it(""rejects unknown column types"", function() {
      |        ^ Unknown Test
  245 |             expect`\begin{array}{cba}\end{array}`.toFailWithParseError(
  246 |                    ""Unknown column alignment: b at position 16:"" +
  247 |                    "" \\begin{array}{cb̲a}\\end{array}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 256}","  254 |
  255 |     describe(""delimiter functions"", function() {
> 256 |         it(""reject invalid opening delimiters"", function() {
      |        ^ Unknown Test
  257 |             expect`\bigl 1 + 2 \bigr`.toFailWithParseError(
  258 |                    ""Invalid delimiter '1' after '\\bigl' at position 7:"" +
  259 |                    "" \\bigl 1̲ + 2 \\bigr"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 261}","  259 |                    "" \\bigl 1̲ + 2 \\bigr"");
  260 |         });
> 261 |         it(""reject invalid closing delimiters"", function() {
      |        ^ Unknown Test
  262 |             expect`\bigl(1+2\bigr=3`.toFailWithParseError(
  263 |                    ""Invalid delimiter '=' after '\\bigr' at position 15:"" +
  264 |                    "" \\bigl(1+2\\bigr=̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 266}","  264 |                    "" \\bigl(1+2\\bigr=̲3"");
  265 |         });
> 266 |         it(""reject group opening delimiters"", function() {
      |        ^ Unknown Test
  267 |             expect`\bigl{(}1+2\bigr)3`.toFailWithParseError(
  268 |                    ""Invalid delimiter type 'ordgroup' at position 6:"" +
  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 271}","  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");
  270 |         });
> 271 |         it(""reject group closing delimiters"", function() {
      |        ^ Unknown Test
  272 |             expect`\bigl(1+2\bigr{)}3`.toFailWithParseError(
  273 |                    ""Invalid delimiter type 'ordgroup' at position 15:"" +
  274 |                    "" \\bigl(1+2\\bigr{̲)̲}̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 279}","  277 |
  278 |     describe(""\\begin and \\end"", function() {
> 279 |         it(""reject invalid environment names"", function() {
      |        ^ Unknown Test
  280 |             expect`\begin x\end y`.toFailWithParseError(
  281 |                    ""No such environment: x at position 8: \\begin x̲\\end y"");
  282 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 302}","  300 |
  301 |     describe(""#_innerLexColor"", function() {
> 302 |         it(""reject 3-digit hex notation without #"", function() {
      |        ^ Unknown Test
  303 |             expect`\textcolor{1a2}{foo}`.toFailWithParseError(
  304 |                    ""Invalid color: '1a2'"" +
  305 |                    "" at position 11: \\textcolor{̲1̲a̲2̲}̲{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 310}","  308 |
  309 |     describe(""#_innerLexSize"", function() {
> 310 |         it(""reject size without unit"", function() {
      |        ^ Unknown Test
  311 |             expect`\rule{0}{2em}`.toFailWithParseError(
  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 314}","  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });
> 314 |         it(""reject size with bogus unit"", function() {
      |        ^ Unknown Test
  315 |             expect`\rule{1au}{2em}`.toFailWithParseError(
  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 318}","  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });
> 318 |         it(""reject size without number"", function() {
      |        ^ Unknown Test
  319 |             expect`\rule{em}{2em}`.toFailWithParseError(
  320 |                    ""Invalid size: 'em' at position 6: \\rule{̲e̲m̲}̲{2em}"");
  321 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 5, 'column': 4, 'index': 124}","  3 |
  4 | describe(""Symbols and macros"", () => {
> 5 |     for (const macro in macros) {
    |    ^ Conditional Test Logic
  6 |         if (!macros.hasOwnProperty(macro)) {
  7 |             continue;
  8 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 6, 'column': 8, 'index': 162}","  4 | describe(""Symbols and macros"", () => {
  5 |     for (const macro in macros) {
> 6 |         if (!macros.hasOwnProperty(macro)) {
    |        ^ Conditional Test Logic
  7 |             continue;
  8 |         }
  9 |         it(`macro ${macro} should not shadow a symbol`, () => {",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 10, 'column': 12, 'index': 307}","   8 |         }
   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
> 10 |             for (const kind in symbols) {
     |            ^ Conditional Test Logic
  11 |                 if (!symbols.hasOwnProperty(kind)) {
  12 |                     continue;
  13 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 11, 'column': 16, 'index': 353}","   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
  10 |             for (const kind in symbols) {
> 11 |                 if (!symbols.hasOwnProperty(kind)) {
     |                ^ Conditional Test Logic
  12 |                     continue;
  13 |                 }
  14 |                 expect(symbols[kind][macro]).toBeFalsy();",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 18, 'column': 12, 'index': 481}","  16 |                   splitAtDelimiters(actual, delimiters);
  17 |
> 18 |             if (split.length !== result.length) {
     |            ^ Conditional Test Logic
  19 |                 message.pass = false;
  20 |                 message.message = () => ""Different number of splits: "" +
  21 |                     split.length + "" vs. "" + result.length + "" ("" +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 27, 'column': 12, 'index': 861}","  25 |             }
  26 |
> 27 |             for (let i = 0; i < split.length; i++) {
     |            ^ Conditional Test Logic
  28 |                 const real = split[i];
  29 |                 const correct = result[i];
  30 |",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 34, 'column': 16, 'index': 1061}","  32 |                 let diff;
  33 |
> 34 |                 if (real.type !== correct.type) {
     |                ^ Conditional Test Logic
  35 |                     good = false;
  36 |                     diff = ""type"";
  37 |                 } else if (real.data !== correct.data) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 37, 'column': 23, 'index': 1187}","  35 |                     good = false;
  36 |                     diff = ""type"";
> 37 |                 } else if (real.data !== correct.data) {
     |                       ^ Conditional Test Logic
  38 |                     good = false;
  39 |                     diff = ""data"";
  40 |                 } else if (real.display !== correct.display) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 40, 'column': 23, 'index': 1313}","  38 |                     good = false;
  39 |                     diff = ""data"";
> 40 |                 } else if (real.display !== correct.display) {
     |                       ^ Conditional Test Logic
  41 |                     good = false;
  42 |                     diff = ""display"";
  43 |                 }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 45, 'column': 16, 'index': 1460}","  43 |                 }
  44 |
> 45 |                 if (!good) {
     |                ^ Conditional Test Logic
  46 |                     message.pass = false;
  47 |                     message.message = () => ""Difference at split "" +
  48 |                         (i + 1) + "": "" + JSON.stringify(real) +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 332, 'column': 8, 'index': 11671}","  330 |             '\\]'];
  331 |         const el = document.createElement('div');
> 332 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  333 |             const txt = document.createTextNode(textNodes[i]);
  334 |             el.appendChild(txt);
  335 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 350, 'column': 8, 'index': 12420}","  348 |             'consectetur adipiscing elit'];
  349 |         const el = document.createElement('div');
> 350 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  351 |             const txt = document.createTextNode(textNodes[i]);
  352 |             el.appendChild(txt);
  353 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 355, 'column': 8, 'index': 12630}","  353 |         }
  354 |         const el2 = document.createElement('div');
> 355 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  356 |             const txt = document.createTextNode(textNodes[i]);
  357 |             el2.appendChild(txt);
  358 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 62}","  60 | describe(""A delimiter splitter"", function() {
  61 |     it(""doesn't split when there are no delimiters"", function() {
> 62 |         expect(""hello"").toSplitInto(
     |        ^ Redundant Assertion
  63 |             [
  64 |                 {type: ""text"", data: ""hello""},
  65 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 72}","  70 |
  71 |     it(""doesn't create a math node with only one left delimiter"", function() {
> 72 |         expect(""hello ( world"").toSplitInto(
     |        ^ Redundant Assertion
  73 |             [
  74 |                 {type: ""text"", data: ""hello ""},
  75 |                 {type: ""text"", data: ""( world""},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 83}","  81 |
  82 |     it(""doesn't split when there's only a right delimiter"", function() {
> 83 |         expect(""hello ) world"").toSplitInto(
     |        ^ Redundant Assertion
  84 |             [
  85 |                 {type: ""text"", data: ""hello ) world""},
  86 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 93}","  91 |
  92 |     it(""splits when there are both delimiters"", function() {
> 93 |         expect(""hello ( world ) boo"").toSplitInto(
     |        ^ Redundant Assertion
  94 |             [
  95 |                 {type: ""text"", data: ""hello ""},
  96 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 106}","  104 |
  105 |     it(""splits on multi-character delimiters"", function() {
> 106 |         expect(""hello [[ world ]] boo"").toSplitInto(
      |        ^ Redundant Assertion
  107 |             [
  108 |                 {type: ""text"", data: ""hello ""},
  109 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 116}","  114 |                 {left: ""[["", right: ""]]"", display: false},
  115 |             ]);
> 116 |         expect(""hello \\begin{equation} world \\end{equation} boo"").toSplitInto(
      |        ^ Redundant Assertion
  117 |             [
  118 |                 {type: ""text"", data: ""hello ""},
  119 |                 {type: ""math"", data: ""\\begin{equation} world \\end{equation}"",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 131}","  129 |
  130 |     it(""splits multiple times"", function() {
> 131 |         expect(""hello ( world ) boo ( more ) stuff"").toSplitInto(
      |        ^ Redundant Assertion
  132 |             [
  133 |                 {type: ""text"", data: ""hello ""},
  134 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 147}","  145 |
  146 |     it(""leaves the ending when there's only a left delimiter"", function() {
> 147 |         expect(""hello ( world ) boo ( left"").toSplitInto(
      |        ^ Redundant Assertion
  148 |             [
  149 |                 {type: ""text"", data: ""hello ""},
  150 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 161}","  159 |
  160 |     it(""doesn't split when close delimiters are in {}s"", function() {
> 161 |         expect(""hello ( world { ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  162 |             [
  163 |                 {type: ""text"", data: ""hello ""},
  164 |                 {type: ""math"", data: "" world { ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 172}","  170 |             ]);
  171 |
> 172 |         expect(""hello ( world { { } ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  173 |             [
  174 |                 {type: ""text"", data: ""hello ""},
  175 |                 {type: ""math"", data: "" world { { } ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 185}","  183 |
  184 |     it(""correctly processes sequences of $..$"", function() {
> 185 |         expect(""$hello$$world$$boo$"").toSplitInto(
      |        ^ Redundant Assertion
  186 |             [
  187 |                 {type: ""math"", data: ""hello"",
  188 |                     rawData: ""$hello$"", display: false},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 200}","  198 |
  199 |     it(""doesn't split at escaped delimiters"", function() {
> 200 |         expect(""hello ( world \\) ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  201 |             [
  202 |                 {type: ""text"", data: ""hello ""},
  203 |                 {type: ""math"", data: "" world \\) "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 224}","  222 |
  223 |     it(""splits when the right and left delimiters are the same"", function() {
> 224 |         expect(""hello $ world $ boo"").toSplitInto(
      |        ^ Redundant Assertion
  225 |             [
  226 |                 {type: ""text"", data: ""hello ""},
  227 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 237}","  235 |
  236 |     it(""ignores \\$"", function() {
> 237 |         expect(""$x = \\$5$"").toSplitInto(
      |        ^ Redundant Assertion
  238 |             [
  239 |                 {type: ""math"", data: ""x = \\$5"",
  240 |                     rawData: ""$x = \\$5$"", display: false},",,
test/unicode-spec.js,ConditionalTestLogic,"[{""startLine"":157,""endLine"":160}]",,25.0,2.0
test/unicode-spec.js,SubOptimalAssert,"[{""startLine"":163,""endLine"":163}]",,25.0,2.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1322,""endLine"":1326}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1405,""endLine"":1407}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2826,""endLine"":2828}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2843,""endLine"":2845}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2860,""endLine"":2863}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3131,""endLine"":3134}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3828,""endLine"":3830}]",,557.0,117.0
test/katex-spec.js,OvercommentedTest,"[{""startLine"":4018,""endLine"":4053}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":70,""endLine"":72}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":89,""endLine"":92}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":114,""endLine"":117}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":129,""endLine"":131}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":147,""endLine"":149}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":165,""endLine"":167}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":181,""endLine"":183}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":303,""endLine"":308}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":347,""endLine"":349}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":364,""endLine"":366}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":391,""endLine"":394}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":496,""endLine"":498}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":570,""endLine"":575}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":577,""endLine"":607}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":673,""endLine"":682}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":686,""endLine"":692}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":698,""endLine"":700}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":722,""endLine"":724}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":834,""endLine"":844}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":858,""endLine"":860}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":996,""endLine"":998}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1044,""endLine"":1047}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1103,""endLine"":1113}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1115,""endLine"":1118}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1120,""endLine"":1123}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1141,""endLine"":1155}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1173,""endLine"":1176}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1178,""endLine"":1181}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1183,""endLine"":1186}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1202,""endLine"":1204}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1314,""endLine"":1316}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1549,""endLine"":1562}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1566,""endLine"":1571}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1697,""endLine"":1704}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2081,""endLine"":2098}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2119,""endLine"":2121}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2154,""endLine"":2156}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2265,""endLine"":2271}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2296,""endLine"":2301}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2303,""endLine"":2309}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2313,""endLine"":2319}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2321,""endLine"":2327}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2331,""endLine"":2336}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2338,""endLine"":2344}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2357,""endLine"":2362}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2370,""endLine"":2374}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2378,""endLine"":2383}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2385,""endLine"":2392}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2396,""endLine"":2402}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2410,""endLine"":2414}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2418,""endLine"":2424}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2437,""endLine"":2444}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2452,""endLine"":2456}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2460,""endLine"":2465}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2467,""endLine"":2474}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2478,""endLine"":2483}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2493,""endLine"":2498}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2500,""endLine"":2506}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2533,""endLine"":2536}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2540,""endLine"":2544}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2546,""endLine"":2548}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2552,""endLine"":2556}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2558,""endLine"":2561}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2563,""endLine"":2567}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2569,""endLine"":2572}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2576,""endLine"":2580}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2582,""endLine"":2584}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2588,""endLine"":2593}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2595,""endLine"":2599}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2601,""endLine"":2605}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2609,""endLine"":2618}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2620,""endLine"":2626}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2639,""endLine"":2644}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2648,""endLine"":2650}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2651,""endLine"":2653}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2657,""endLine"":2666}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2677,""endLine"":2688}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2706,""endLine"":2721}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2731,""endLine"":2741}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2755,""endLine"":2761}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2843,""endLine"":2845}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2860,""endLine"":2863}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2869,""endLine"":2871}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2964,""endLine"":2971}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2975,""endLine"":2978}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3420,""endLine"":3423}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3504,""endLine"":3507}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3807,""endLine"":3809}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3828,""endLine"":3830}]",,557.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":99,""endLine"":102}]",,557.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":103,""endLine"":108}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1767,""endLine"":1769}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1902,""endLine"":1903}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3175,""endLine"":3175}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3190,""endLine"":3190}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3985,""endLine"":3986}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":516,""endLine"":542}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":577,""endLine"":607}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":1613,""endLine"":1637}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3086,""endLine"":3101}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3509,""endLine"":3525}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":4018,""endLine"":4053}]",,557.0,117.0
test/errors-spec.js,AnonymousTest,"[{""startLine"":219,""endLine"":223}]",,50.0,26.0
test/errors-spec.js,IdenticalTestDescription,"[{""startLine"":214,""endLine"":218}]",,50.0,26.0
