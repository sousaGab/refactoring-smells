file,type,smells,frame,itCount,describeCount
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 20, 'column': 8, 'index': 1016}","  18 |     it(""should not parse Latin-1 outside \\text{} with strict"", function() {
  19 |         const chars = 'ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ';
> 20 |         for (const ch of chars) {
     |        ^ Conditional Test Logic
  21 |             expect(ch).not.toParse(strictSettings);
  22 |         }
  23 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 144, 'column': 8, 'index': 5144}","  142 |
  143 |     it(""supportedCodepoint() should return the correct values"", () => {
> 144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |        ^ Conditional Test Logic
  145 |             expect(supportedCodepoint(codepoint)).toBe(
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 152, 'column': 15, 'index': 5441}","  150 |
  151 |     it(""scriptFromCodepoint() should return correct values"", () => {
> 152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |               ^ Conditional Test Logic
  153 |             const character = String.fromCharCode(codepoint);
  154 |             const script = scriptFromCodepoint(codepoint);
  155 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 156, 'column': 12, 'index': 5635}","  154 |             const script = scriptFromCodepoint(codepoint);
  155 |
> 156 |             for (const scriptName of scriptNames) {
      |            ^ Conditional Test Logic
  157 |                 if (scriptRegExps[scriptName].test(character)) {
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 157, 'column': 16, 'index': 5691}","  155 |
  156 |             for (const scriptName of scriptNames) {
> 157 |                 if (scriptRegExps[scriptName].test(character)) {
      |                ^ Conditional Test Logic
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;
  160 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 158, 'column': 20, 'index': 5760}","  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {
> 158 |                     expect(script).toEqual(scriptName);
      |                    ^ Duplicate Assert
  159 |                     continue outer;
  160 |                 }
  161 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 163, 'column': 12, 'index': 5877}","  161 |             }
  162 |
> 163 |             expect(script).toBe(null);
      |            ^ Duplicate Assert
  164 |             expect(supportedCodepoint(codepoint)).toBe(false);
  165 |         }
  166 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 154, 'column': 27, 'index': 5590}","  152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
  153 |             const character = String.fromCharCode(codepoint);
> 154 |             const script = scriptFromCodepoint(codepoint);
      |                           ^ Eager Test
  155 |
  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Eager Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 145, 'column': 19, 'index': 5223}","  143 |     it(""supportedCodepoint() should return the correct values"", () => {
  144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
> 145 |             expect(supportedCodepoint(codepoint)).toBe(
      |                   ^ Lazy Test
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );
  148 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Lazy Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 7}","   5 |
   6 | describe(""unicode"", function() {
>  7 |     it(""should build Latin-1 inside \\text{}"", function() {
     |    ^ Unknown Test
   8 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}`
   9 |             .toBuild();
  10 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 12}","  10 |     });
  11 |
> 12 |     it(""should build Latin-1 inside \\text{} like accent commands"", function() {
     |    ^ Unknown Test
  13 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}`
  14 |             .toParseLike`\text{\`A\'A\^A\~A\""A\r A\`E\'E\^E\""E\`I\'I\^I\""I\~N\`O\'O\^O\~O\""O\`U\'U\^U\""U\'Y\`a\'a\^a\~a\""a\r a\`e\'e\^e\""e\`ı\'ı\^ı\""ı\~n\`o\'o\^o\~o\""o\`u\'u\^u\""u\'y\""y\c C\c c}`;
  15 |         // TODO(edemaine): A few characters don't have analogs yet.",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 25}","  23 |     });
  24 |
> 25 |     it(""should build Latin-1 outside \\text{}"", function() {
     |    ^ Unknown Test
  26 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ`
  27 |             .toBuild(nonstrictSettings);
  28 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 30}","  28 |     });
  29 |
> 30 |     it(""should build all lower case Greek letters"", function() {
     |    ^ Unknown Test
  31 |         expect`αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω`.toBuild();
  32 |     });
  33 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 34}","  32 |     });
  33 |
> 34 |     it(""should build math upper case Greek letters"", function() {
     |    ^ Unknown Test
  35 |         expect`ΓΔΘΛΞΠΣΥΦΨΩ`.toBuild();
  36 |     });
  37 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 38}","  36 |     });
  37 |
> 38 |     it(""should build Cyrillic inside \\text{}"", function() {
     |    ^ Unknown Test
  39 |         expect`\text{БГДЖЗЙЛФЦШЫЮЯ}`.toBuild();
  40 |     });
  41 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 42}","  40 |     });
  41 |
> 42 |     it(""should build Cyrillic outside \\text{}"", function() {
     |    ^ Unknown Test
  43 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.toBuild(nonstrictSettings);
  44 |     });
  45 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 46}","  44 |     });
  45 |
> 46 |     it(""should not parse Cyrillic outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  47 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.not.toParse(strictSettings);
  48 |     });
  49 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 50}","  48 |     });
  49 |
> 50 |     it(""should build CJK inside \\text{}"", function() {
     |    ^ Unknown Test
  51 |         expect`\text{私はバナナです}`.toBuild();
  52 |         expect`\text{여보세요}`.toBuild();
  53 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 55}","  53 |     });
  54 |
> 55 |     it(""should build CJK outside \\text{}"", function() {
     |    ^ Unknown Test
  56 |         expect`私はバナナです`.toBuild(nonstrictSettings);
  57 |         expect`여보세요`.toBuild(nonstrictSettings);
  58 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 60}","  58 |     });
  59 |
> 60 |     it(""should not parse CJK outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  61 |         expect`私はバナナです。`.not.toParse(strictSettings);
  62 |         expect`여보세요`.not.toParse(strictSettings);
  63 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 65}","  63 |     });
  64 |
> 65 |     it(""should build Devanagari inside \\text{}"", function() {
     |    ^ Unknown Test
  66 |         expect`\text{नमस्ते}`.toBuild();
  67 |     });
  68 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 69}","  67 |     });
  68 |
> 69 |     it(""should build Devanagari outside \\text{}"", function() {
     |    ^ Unknown Test
  70 |         expect`नमस्ते`.toBuild(nonstrictSettings);
  71 |     });
  72 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 73}","  71 |     });
  72 |
> 73 |     it(""should not parse Devanagari outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  74 |         expect`नमस्ते`.not.toParse(strictSettings);
  75 |     });
  76 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 77}","  75 |     });
  76 |
> 77 |     it(""should build Georgian inside \\text{}"", function() {
     |    ^ Unknown Test
  78 |         expect`\text{გამარჯობა}`.toBuild();
  79 |     });
  80 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 81}","  79 |     });
  80 |
> 81 |     it(""should build Georgian outside \\text{}"", function() {
     |    ^ Unknown Test
  82 |         expect`გამარჯობა`.toBuild(nonstrictSettings);
  83 |     });
  84 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 85}","  83 |     });
  84 |
> 85 |     it(""should not parse Georgian outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  86 |         expect`გამარჯობა`.not.toParse(strictSettings);
  87 |     });
  88 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 89}","  87 |     });
  88 |
> 89 |     it(""should build Armenian both inside and outside \\text{}"", function() {
     |    ^ Unknown Test
  90 |         expect`ԱԲԳաբգ`.toBuild(nonstrictSettings);
  91 |         expect`\text{ԱԲԳաբգ}`.toBuild(nonstrictSettings);
  92 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 94}","  92 |     });
  93 |
> 94 |     it(""should build extended Latin characters inside \\text{}"", function() {
     |    ^ Unknown Test
  95 |         expect`\text{ěščřžůřťďňőİı}`.toBuild();
  96 |     });
  97 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 98}","   96 |     });
   97 |
>  98 |     it(""should not parse extended Latin outside \\text{} with strict"", function() {
      |    ^ Unknown Test
   99 |         expect`ěščřžůřťďňőİı`.not.toParse(strictSettings);
  100 |     });
  101 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 102}","  100 |     });
  101 |
> 102 |     it(""should not allow emoji in strict mode"", function() {
      |    ^ Unknown Test
  103 |         expect`✌`.not.toParse(strictSettings);
  104 |         expect`\text{✌}`.not.toParse(strictSettings);
  105 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 113}","  111 |     });
  112 |
> 113 |     it(""should allow emoji outside strict mode"", function() {
      |    ^ Unknown Test
  114 |         expect`✌`.toWarn();
  115 |         expect`\text{✌}`.toWarn();
  116 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 4, 'column': 4, 'index': 98}","  2 |
  3 | describe(""Screenshotter item"", function() {
> 4 |     for (const key in data) {
    |    ^ Conditional Test Logic
  5 |         if (data.hasOwnProperty(key)) {
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 5, 'column': 8, 'index': 132}","  3 | describe(""Screenshotter item"", function() {
  4 |     for (const key in data) {
> 5 |         if (data.hasOwnProperty(key)) {
    |        ^ Conditional Test Logic
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {
  8 |                 expect(item.tex).toBuild({",,
/home/gabriel/Desktop/research/projects/katex/test/mathml-spec.js,Conditional Test Logic,"{'line': 9, 'column': 4, 'index': 300}","   7 | const getMathML = function(expr, settings = new Settings()) {
   8 |     let startStyle = Style.TEXT;
>  9 |     if (settings.displayMode) {
     |    ^ Conditional Test Logic
  10 |         startStyle = Style.DISPLAY;
  11 |     }
  12 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 46, 'column': 8, 'index': 1257}","  44 |         const parse = getParsed(expression);
  45 |
> 46 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  47 |             const group = parse[i];
  48 |             expect(group.type).toMatch(""ord"");
  49 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 69, 'column': 8, 'index': 1848}","  67 |         const parse = getParsed(expression);
  68 |
> 69 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  70 |             const group = parse[i];
  71 |             expect(group.type).toEqual(""atom"");
  72 |             expect(group.family).toEqual(""bin"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 89, 'column': 8, 'index': 2443}","  87 |         const parse = getParsed(expression);
  88 |
> 89 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  90 |             let group = parse[i];
  91 |             if (group.type === ""htmlmathml"") {
  92 |                 expect(group.html).toHaveLength(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 91, 'column': 12, 'index': 2530}","  89 |         for (let i = 0; i < parse.length; i++) {
  90 |             let group = parse[i];
> 91 |             if (group.type === ""htmlmathml"") {
     |            ^ Conditional Test Logic
  92 |                 expect(group.html).toHaveLength(1);
  93 |                 group = group.html[0];
  94 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 95, 'column': 12, 'index': 2682}","  93 |                 group = group.html[0];
  94 |             }
> 95 |             if (group.type === ""mclass"") {
     |            ^ Conditional Test Logic
  96 |                 expect(group.mclass).toEqual(""mrel"");
  97 |             } else {
  98 |                 expect(group.type).toEqual(""atom"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 128, 'column': 8, 'index': 3698}","  126 |         const parse = getParsed(expression);
  127 |
> 128 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  129 |             const group = parse[i];
  130 |             expect(group.type).toEqual(""atom"");
  131 |             expect(group.family).toEqual(""punct"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 146, 'column': 8, 'index': 4159}","  144 |         const parse = getParsed(expression);
  145 |
> 146 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  147 |             const group = parse[i];
  148 |             expect(group.type).toEqual(""atom"");
  149 |             expect(group.family).toEqual(""open"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 164, 'column': 8, 'index': 4622}","  162 |         const parse = getParsed(expression);
  163 |
> 164 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  165 |             const group = parse[i];
  166 |             expect(group.type).toEqual(""atom"");
  167 |             expect(group.family).toEqual(""close"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1263, 'column': 4, 'index': 40505}","  1261 |     ];
  1262 |
> 1263 |     for (const [actual, expected] of cases) {
       |    ^ Conditional Test Logic
  1264 |         it(`should build ""${actual}"" like ""${expected}""`, () => {
  1265 |             expect(actual).toBuildLike(expected);
  1266 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1412, 'column': 8, 'index': 45751}","  1410 |         ];
  1411 |
> 1412 |         for (let i = 0; i < missingGroups.length; i++) {
       |        ^ Conditional Test Logic
  1413 |             expect(missingGroups[i]).not.toParse();
  1414 |         }
  1415 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1439, 'column': 8, 'index': 46712}","  1437 |         ];
  1438 |
> 1439 |         for (let i = 0; i < badArguments.length; i++) {
       |        ^ Conditional Test Logic
  1440 |             expect(badArguments[i]).not.toParse();
  1441 |         }
  1442 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1457, 'column': 8, 'index': 47278}","  1455 |         ];
  1456 |
> 1457 |         for (let i = 0; i < goodArguments.length; i++) {
       |        ^ Conditional Test Logic
  1458 |             expect(goodArguments[i]).toParse();
  1459 |         }
  1460 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1470, 'column': 8, 'index': 47634}","  1468 |         ];
  1469 |
> 1470 |         for (let i = 0; i < badSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1471 |             expect(badSupSubscripts[i]).not.toParse();
  1472 |         }
  1473 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1483, 'column': 8, 'index': 48013}","  1481 |         ];
  1482 |
> 1483 |         for (let i = 0; i < goodSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1484 |             expect(goodSupSubscripts[i]).toParse();
  1485 |         }
  1486 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1521, 'column': 8, 'index': 49245}","  1519 |         ];
  1520 |
> 1521 |         for (let i = 0; i < badLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1522 |             expect(badLeftArguments[i]).not.toParse();
  1523 |         }
  1524 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1535, 'column': 8, 'index': 49722}","  1533 |         ];
  1534 |
> 1535 |         for (let i = 0; i < goodLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1536 |             expect(goodLeftArguments[i]).toParse();
  1537 |         }
  1538 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 2173, 'column': 8, 'index': 77672}","  2171 |
  2172 |     it(""should throw Error when HTML attribute name is invalid"", function() {
> 2173 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
       |        ^ Conditional Test Logic
  2174 |             try {
  2175 |                 katex.renderToString(
  2176 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 3836, 'column': 4, 'index': 141609}","  3834 | describe(""leqno and fleqn rendering options"", () => {
  3835 |     const expr = r`\tag{hi}x+y`;
> 3836 |     for (const opt of [""leqno"", ""fleqn""]) {
       |    ^ Conditional Test Logic
  3837 |         it(`should not add ${opt} class by default`, () => {
  3838 |             const settings = new Settings({displayMode: true});
  3839 |             const built = katex.__renderToDomTree(expr, settings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4241, 'column': 8, 'index': 158549}","  4239 |         // add eastern arabic numbers to symbols table
  4240 |         // these symbols are ۰۱۲۳۴۵۶۷۸۹ and ٠١٢٣٤٥٦٧٨٩
> 4241 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4242 |             const persianNum = String.fromCharCode(0x0660 + number);
  4243 |             katex.__defineSymbol(
  4244 |                 ""math"", fontName, ""textord"", persianNum, persianNum);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4260, 'column': 8, 'index': 159495}","  4258 |         const mockMetrics = {};
  4259 |         // mock font metrics for the symbols that we added previously
> 4260 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4261 |             mockMetrics[0x0660 + number] = [-0.00244140625, 0.6875, 0, 0];
  4262 |             mockMetrics[0x06F0 + number] = [-0.00244140625, 0.6875, 0, 0];
  4263 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 575, 'column': 8, 'index': 17171}","  573 |         parse = getParsed(simpleOver)[0];
  574 |
> 575 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  576 |         expect(parse.numer).toBeDefined();
  577 |         expect(parse.denom).toBeDefined();
  578 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 575, 'column': 8, 'index': 17171}","  573 |         parse = getParsed(simpleOver)[0];
  574 |
> 575 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  576 |         expect(parse.numer).toBeDefined();
  577 |         expect(parse.denom).toBeDefined();
  578 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 576, 'column': 8, 'index': 17218}","  574 |
  575 |         expect(parse.type).toEqual(""genfrac"");
> 576 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  577 |         expect(parse.denom).toBeDefined();
  578 |
  579 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 576, 'column': 8, 'index': 17218}","  574 |
  575 |         expect(parse.type).toEqual(""genfrac"");
> 576 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  577 |         expect(parse.denom).toBeDefined();
  578 |
  579 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 577, 'column': 8, 'index': 17261}","  575 |         expect(parse.type).toEqual(""genfrac"");
  576 |         expect(parse.numer).toBeDefined();
> 577 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  578 |
  579 |         parse = getParsed(complexOver)[0];
  580 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 577, 'column': 8, 'index': 17261}","  575 |         expect(parse.type).toEqual(""genfrac"");
  576 |         expect(parse.numer).toBeDefined();
> 577 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  578 |
  579 |         parse = getParsed(complexOver)[0];
  580 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 581, 'column': 8, 'index': 17349}","  579 |         parse = getParsed(complexOver)[0];
  580 |
> 581 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  582 |         expect(parse.numer).toBeDefined();
  583 |         expect(parse.denom).toBeDefined();
  584 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 581, 'column': 8, 'index': 17349}","  579 |         parse = getParsed(complexOver)[0];
  580 |
> 581 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  582 |         expect(parse.numer).toBeDefined();
  583 |         expect(parse.denom).toBeDefined();
  584 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 582, 'column': 8, 'index': 17396}","  580 |
  581 |         expect(parse.type).toEqual(""genfrac"");
> 582 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  583 |         expect(parse.denom).toBeDefined();
  584 |
  585 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 582, 'column': 8, 'index': 17396}","  580 |
  581 |         expect(parse.type).toEqual(""genfrac"");
> 582 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  583 |         expect(parse.denom).toBeDefined();
  584 |
  585 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 583, 'column': 8, 'index': 17439}","  581 |         expect(parse.type).toEqual(""genfrac"");
  582 |         expect(parse.numer).toBeDefined();
> 583 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  584 |
  585 |         const parseBraceFrac = getParsed(braceFrac)[0];
  586 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 583, 'column': 8, 'index': 17439}","  581 |         expect(parse.type).toEqual(""genfrac"");
  582 |         expect(parse.numer).toBeDefined();
> 583 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  584 |
  585 |         const parseBraceFrac = getParsed(braceFrac)[0];
  586 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1640, 'column': 8, 'index': 53491}","  1638 |         expect(bbBody).toHaveLength(3);
  1639 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1640 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1641 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1642 |         expect(bbBody[2].type).toEqual(""font"");
  1643 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1640, 'column': 8, 'index': 53491}","  1638 |         expect(bbBody).toHaveLength(3);
  1639 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1640 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1641 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1642 |         expect(bbBody[2].type).toEqual(""font"");
  1643 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1642, 'column': 8, 'index': 53589}","  1640 |         expect(bbBody[2].type).toEqual(""font"");
  1641 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1642 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1643 |     });
  1644 |
  1645 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1642, 'column': 8, 'index': 53589}","  1640 |         expect(bbBody[2].type).toEqual(""font"");
  1641 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1642 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1643 |     });
  1644 |
  1645 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1835, 'column': 8, 'index': 61144}","  1833 |     it(""should render \\text{R\\textit{S}T} with the correct fonts"", function() {
  1834 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
> 1835 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
       |        ^ Duplicate Assert
  1836 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
  1837 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1838 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1836, 'column': 8, 'index': 61211}","  1834 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
  1835 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
> 1836 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
       |        ^ Duplicate Assert
  1837 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1838 |     });
  1839 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1837, 'column': 8, 'index': 61285}","  1835 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
  1836 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
> 1837 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
       |        ^ Duplicate Assert
  1838 |     });
  1839 |
  1840 |     it(""should render \\textbf{R } with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1861, 'column': 8, 'index': 62476}","  1859 |     it(""should render \\textsf{\\textit{R}G\\textbf{B}} with the correct font"", function() {
  1860 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
> 1861 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
       |        ^ Duplicate Assert
  1862 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
  1863 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1864 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1862, 'column': 8, 'index': 62557}","  1860 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
  1861 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
> 1862 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
       |        ^ Duplicate Assert
  1863 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1864 |     });
  1865 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1863, 'column': 8, 'index': 62631}","  1861 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
  1862 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
> 1863 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
       |        ^ Duplicate Assert
  1864 |     });
  1865 |
  1866 |     it(""should render \\textsf{\\textbf{$\\mathrm{A}$}} with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1884, 'column': 8, 'index': 63706}","  1882 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1883 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1884 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1885 |
  1886 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1887 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1884, 'column': 8, 'index': 63706}","  1882 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1883 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1884 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1885 |
  1886 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1887 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1888, 'column': 8, 'index': 63896}","  1886 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1887 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1888 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1889 |     });
  1890 |
  1891 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1888, 'column': 8, 'index': 63896}","  1886 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1887 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1888 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1889 |     });
  1890 |
  1891 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2081, 'column': 8, 'index': 74169}","  2079 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2080 |             ""</mstyle>"";
> 2081 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2082 |
  2083 |         // reverse the order of the commands
  2084 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2081, 'column': 8, 'index': 74169}","  2079 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2080 |             ""</mstyle>"";
> 2081 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2082 |
  2083 |         // reverse the order of the commands
  2084 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2090, 'column': 8, 'index': 74530}","  2088 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2089 |             ""</mstyle>"";
> 2090 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2091 |     });
  2092 |
  2093 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2090, 'column': 8, 'index': 74530}","  2088 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2089 |             ""</mstyle>"";
> 2090 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2091 |     });
  2092 |
  2093 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2104, 'column': 8, 'index': 75091}","  2102 |         const tree = getParsed(tex);
  2103 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
> 2104 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
       |        ^ Duplicate Assert
  2105 |         expect(markup).toContain(
  2106 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2107 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2105, 'column': 8, 'index': 75162}","  2103 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2104 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
> 2105 |         expect(markup).toContain(
       |        ^ Duplicate Assert
  2106 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2107 |     });
  2108 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2202, 'column': 8, 'index': 78725}","  2200 |         const built = getBuilt`+ x`;
  2201 |
> 2202 |         expect(built[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2203 |         expect(built[0].classes).not.toContain(""mbin"");
  2204 |     });
  2205 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2203, 'column': 8, 'index': 78777}","  2201 |
  2202 |         expect(built[0].classes).toContain(""mord"");
> 2203 |         expect(built[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2204 |     });
  2205 |
  2206 |     it(""should create ords after some other objects"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2237, 'column': 8, 'index': 80293}","  2235 |         const markup = katex.renderToString(r`\sigma^2`);
  2236 |         expect(markup.indexOf(""<span"")).toBe(0);
> 2237 |         expect(markup).toContain(""\u03c3"");  // sigma
       |        ^ Duplicate Assert
  2238 |         expect(markup).toContain(""margin-right"");
  2239 |         expect(markup).not.toContain(""marginRight"");
  2240 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2238, 'column': 8, 'index': 80347}","  2236 |         expect(markup.indexOf(""<span"")).toBe(0);
  2237 |         expect(markup).toContain(""\u03c3"");  // sigma
> 2238 |         expect(markup).toContain(""margin-right"");
       |        ^ Duplicate Assert
  2239 |         expect(markup).not.toContain(""marginRight"");
  2240 |     });
  2241 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2239, 'column': 8, 'index': 80397}","  2237 |         expect(markup).toContain(""\u03c3"");  // sigma
  2238 |         expect(markup).toContain(""margin-right"");
> 2239 |         expect(markup).not.toContain(""marginRight"");
       |        ^ Duplicate Assert
  2240 |     });
  2241 |
  2242 |     it(""generates both MathML and HTML"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2245, 'column': 8, 'index': 80564}","  2243 |         const markup = katex.renderToString(""a"");
  2244 |
> 2245 |         expect(markup).toContain(""<span"");
       |        ^ Duplicate Assert
  2246 |         expect(markup).toContain(""<math"");
  2247 |     });
  2248 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2246, 'column': 8, 'index': 80607}","  2244 |
  2245 |         expect(markup).toContain(""<span"");
> 2246 |         expect(markup).toContain(""<math"");
       |        ^ Duplicate Assert
  2247 |     });
  2248 | });
  2249 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2298, 'column': 8, 'index': 82070}","  2296 |     it(""should produce mords"", function() {
  2297 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
> 2298 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2299 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2300 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2301 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2299, 'column': 8, 'index': 82133}","  2297 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
  2298 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
> 2299 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2300 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2301 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2302 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2300, 'column': 8, 'index': 82200}","  2298 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
  2299 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
> 2300 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2301 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2302 |     });
  2303 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2301, 'column': 8, 'index': 82265}","  2299 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2300 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
> 2301 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2302 |     });
  2303 | });
  2304 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2316, 'column': 8, 'index': 82782}","  2314 |     it(""should produce mords"", function() {
  2315 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
> 2316 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2317 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2318 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2319 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2317, 'column': 8, 'index': 82849}","  2315 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
  2316 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
> 2317 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2318 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2319 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2320 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2318, 'column': 8, 'index': 82920}","  2316 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
  2317 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
> 2318 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2319 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2320 |     });
  2321 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2319, 'column': 8, 'index': 82989}","  2317 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2318 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
> 2319 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2320 |     });
  2321 | });
  2322 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2333, 'column': 8, 'index': 83507}","  2331 |     it(""should produce mords"", function() {
  2332 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
> 2333 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2334 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2335 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2336 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2334, 'column': 8, 'index': 83581}","  2332 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
  2333 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
> 2334 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2335 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2336 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2337 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2335, 'column': 8, 'index': 83659}","  2333 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
  2334 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
> 2335 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2336 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2337 |     });
  2338 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2336, 'column': 8, 'index': 83735}","  2334 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2335 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
> 2336 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2337 |     });
  2338 | });
  2339 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2380, 'column': 8, 'index': 85224}","  2378 |     it(""should produce mords"", function() {
  2379 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
> 2380 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2381 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2382 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2383 |         expect(getBuilt`\underrightarrow )^2`[0].classes)",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2381, 'column': 8, 'index': 85299}","  2379 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
  2380 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
> 2381 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2382 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2383 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2384 |             .not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2382, 'column': 8, 'index': 85378}","  2380 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
  2381 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
> 2382 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2383 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2384 |             .not.toContain(""mclose"");
  2385 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2383, 'column': 8, 'index': 85455}","  2381 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2382 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
> 2383 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
       |        ^ Duplicate Assert
  2384 |             .not.toContain(""mclose"");
  2385 |     });
  2386 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2422, 'column': 8, 'index': 86758}","  2420 |         expect(getBuilt`\xrightarrow x`[0].classes).toContain(""mrel"");
  2421 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
> 2422 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2423 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2424 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2425 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2423, 'column': 8, 'index': 86829}","  2421 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
  2422 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
> 2423 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2424 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2425 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2426 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2424, 'column': 8, 'index': 86904}","  2422 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
  2423 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
> 2424 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2425 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2426 |     });
  2427 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2425, 'column': 8, 'index': 86977}","  2423 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2424 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
> 2425 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2426 |     });
  2427 | });
  2428 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2463, 'column': 8, 'index': 88222}","  2461 |         expect(getBuilt`\overbrace x`[0].classes).toContain(""mord"");
  2462 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
> 2463 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2464 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2465 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2466 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2464, 'column': 8, 'index': 88291}","  2462 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
  2463 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
> 2464 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2465 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2466 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2467 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2465, 'column': 8, 'index': 88364}","  2463 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
  2464 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
> 2465 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2466 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2467 |     });
  2468 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2466, 'column': 8, 'index': 88435}","  2464 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2465 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
> 2466 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2467 |     });
  2468 | });
  2469 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2495, 'column': 8, 'index': 89271}","  2493 |     it(""should produce mords"", function() {
  2494 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
> 2495 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2496 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2497 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2498 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2496, 'column': 8, 'index': 89336}","  2494 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
  2495 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
> 2496 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2497 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2498 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2499 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2497, 'column': 8, 'index': 89405}","  2495 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
  2496 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
> 2497 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2498 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2499 |     });
  2500 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2498, 'column': 8, 'index': 89472}","  2496 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2497 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
> 2498 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2499 |     });
  2500 | });
  2501 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2615, 'column': 8, 'index': 93261}","  2613 |     it(""should produce mords"", function() {
  2614 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
> 2615 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2616 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2617 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2618 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2616, 'column': 8, 'index': 93327}","  2614 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
  2615 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
> 2616 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2617 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2618 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2619 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2617, 'column': 8, 'index': 93397}","  2615 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
  2616 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
> 2617 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2618 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2619 |     });
  2620 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2618, 'column': 8, 'index': 93465}","  2616 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2617 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
> 2618 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2619 |     });
  2620 | });
  2621 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3466, 'column': 8, 'index': 126605}","  3464 |     it(""\\char produces literal characters"", () => {
  3465 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3466 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Duplicate Assert
  3467 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3468 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3469 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3467, 'column': 8, 'index': 126656}","  3465 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3466 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3467 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Duplicate Assert
  3468 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3469 |         expect`\char`.not.toParse();
  3470 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3468, 'column': 8, 'index': 126708}","  3466 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3467 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3468 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Duplicate Assert
  3469 |         expect`\char`.not.toParse();
  3470 |         expect(""\\char`"").not.toParse();
  3471 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4100, 'column': 8, 'index': 152830}","  4098 |         const example = exp32 + r`\a{1}`;
  4099 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
> 4100 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4101 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4102 |     });
  4103 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4101, 'column': 8, 'index': 152897}","  4099 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
  4100 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4101 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4102 |     });
  4103 |
  4104 |     it(""should count correctly with Unicode sub/superscripts"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4107, 'column': 8, 'index': 153166}","  4105 |         const example = exp32 + r`\def+{\a{1}}x⁺x⁺x⁺x⁺`;
  4106 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
> 4107 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4108 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4109 |     });
  4110 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4108, 'column': 8, 'index': 153233}","  4106 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
  4107 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4108 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4109 |     });
  4110 | });
  4111 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4150, 'column': 8, 'index': 154880}","  4148 |         // Ensure newlines appear outside base spans (because, in this regexp,
  4149 |         // base span occurs immediately after each newline span).
> 4150 |         expect(markup).toMatch(
       |        ^ Duplicate Assert
  4151 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
  4152 |         expect(markup).toMatchSnapshot();
  4153 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4152, 'column': 8, 'index': 155020}","  4150 |         expect(markup).toMatch(
  4151 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
> 4152 |         expect(markup).toMatchSnapshot();
       |        ^ Duplicate Assert
  4153 |     });
  4154 | });
  4155 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 510, 'column': 27, 'index': 15056}","  508 |
  509 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 510 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Eager Test
  511 |
  512 |         expect(dfracParse.type).toEqual(""genfrac"");
  513 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 516, 'column': 27, 'index': 15264}","  514 |         expect(dfracParse.denom).toBeDefined();
  515 |
> 516 |         const tfracParse = getParsed(tfracExpression)[0];
      |                           ^ Eager Test
  517 |
  518 |         expect(tfracParse.type).toEqual(""genfrac"");
  519 |         expect(tfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 522, 'column': 27, 'index': 15472}","  520 |         expect(tfracParse.denom).toBeDefined();
  521 |
> 522 |         const cfracParse = getParsed(cfracExpression)[0];
      |                           ^ Eager Test
  523 |
  524 |         expect(cfracParse.type).toEqual(""genfrac"");
  525 |         expect(cfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 528, 'column': 29, 'index': 15682}","  526 |         expect(cfracParse.denom).toBeDefined();
  527 |
> 528 |         const genfracParse = getParsed(genfrac1)[0];
      |                             ^ Eager Test
  529 |
  530 |         expect(genfracParse.type).toEqual(""genfrac"");
  531 |         expect(genfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 573, 'column': 16, 'index': 17136}","  571 |         let parse;
  572 |
> 573 |         parse = getParsed(simpleOver)[0];
      |                ^ Eager Test
  574 |
  575 |         expect(parse.type).toEqual(""genfrac"");
  576 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 579, 'column': 16, 'index': 17313}","  577 |         expect(parse.denom).toBeDefined();
  578 |
> 579 |         parse = getParsed(complexOver)[0];
      |                ^ Eager Test
  580 |
  581 |         expect(parse.type).toEqual(""genfrac"");
  582 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 585, 'column': 31, 'index': 17506}","  583 |         expect(parse.denom).toBeDefined();
  584 |
> 585 |         const parseBraceFrac = getParsed(braceFrac)[0];
      |                               ^ Eager Test
  586 |
  587 |         expect(parseBraceFrac.type).toEqual(""genfrac"");
  588 |         expect(parseBraceFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 593, 'column': 31, 'index': 17837}","  591 |         expect(parseBraceFrac.rightDelim).toBeDefined();
  592 |
> 593 |         const parseBrackFrac = getParsed(brackFrac)[0];
      |                               ^ Eager Test
  594 |
  595 |         expect(parseBrackFrac.type).toEqual(""genfrac"");
  596 |         expect(parseBrackFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 870, 'column': 23, 'index': 27798}","  868 |
  869 |     it(""should correctly extract the custom color"", function() {
> 870 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Eager Test
  871 |         const parse2 = getParsed(customColorExpression2)[0];
  872 |         const parse3 = getParsed(customColorExpression3)[0];
  873 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 871, 'column': 23, 'index': 27859}","  869 |     it(""should correctly extract the custom color"", function() {
  870 |         const parse1 = getParsed(customColorExpression1)[0];
> 871 |         const parse2 = getParsed(customColorExpression2)[0];
      |                       ^ Eager Test
  872 |         const parse3 = getParsed(customColorExpression3)[0];
  873 |
  874 |         expect(parse1.color).toEqual(""#fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 872, 'column': 23, 'index': 27920}","  870 |         const parse1 = getParsed(customColorExpression1)[0];
  871 |         const parse2 = getParsed(customColorExpression2)[0];
> 872 |         const parse3 = getParsed(customColorExpression3)[0];
      |                       ^ Eager Test
  873 |
  874 |         expect(parse1.color).toEqual(""#fA6"");
  875 |         expect(parse2.color).toEqual(""#fA6fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 970, 'column': 26, 'index': 30870}","  968 |
  969 |     it(""should produce the correct direction delimiter"", function() {
> 970 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Eager Test
  971 |         const rightParse = getParsed(bigDelim)[0];
  972 |
  973 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 971, 'column': 27, 'index': 30924}","  969 |     it(""should produce the correct direction delimiter"", function() {
  970 |         const leftParse = getParsed(normalDelim)[0];
> 971 |         const rightParse = getParsed(bigDelim)[0];
      |                           ^ Eager Test
  972 |
  973 |         expect(leftParse.mclass).toEqual(""mopen"");
  974 |         expect(rightParse.mclass).toEqual(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 978, 'column': 27, 'index': 31152}","  976 |
  977 |     it(""should parse the correct size delimiter"", function() {
> 978 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Eager Test
  979 |         const bigParse = getParsed(bigDelim)[0];
  980 |
  981 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 979, 'column': 25, 'index': 31204}","  977 |     it(""should parse the correct size delimiter"", function() {
  978 |         const smallParse = getParsed(normalDelim)[0];
> 979 |         const bigParse = getParsed(bigDelim)[0];
      |                         ^ Eager Test
  980 |
  981 |         expect(smallParse.size).toEqual(1);
  982 |         expect(bigParse.size).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1059, 'column': 24, 'index': 33570}","  1057 |
  1058 |     it(""should list the correct units"", function() {
> 1059 |         const emParse = getParsed(emRule)[0];
       |                        ^ Eager Test
  1060 |         const exParse = getParsed(exRule)[0];
  1061 |
  1062 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1060, 'column': 24, 'index': 33616}","  1058 |     it(""should list the correct units"", function() {
  1059 |         const emParse = getParsed(emRule)[0];
> 1060 |         const exParse = getParsed(exRule)[0];
       |                        ^ Eager Test
  1061 |
  1062 |         expect(emParse.width.unit).toEqual(""em"");
  1063 |         expect(emParse.height.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1097, 'column': 24, 'index': 34786}","  1095 |
  1096 |     it(""should list the correct units"", function() {
> 1097 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1098 |         const exParse = getParsed(exKern)[0];
  1099 |         const muParse = getParsed(muKern)[0];
  1100 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1098, 'column': 24, 'index': 34832}","  1096 |     it(""should list the correct units"", function() {
  1097 |         const emParse = getParsed(emKern)[0];
> 1098 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1099 |         const muParse = getParsed(muKern)[0];
  1100 |         const abParse = getParsed(abKern)[1];
  1101 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1099, 'column': 24, 'index': 34878}","  1097 |         const emParse = getParsed(emKern)[0];
  1098 |         const exParse = getParsed(exKern)[0];
> 1099 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1100 |         const abParse = getParsed(abKern)[1];
  1101 |
  1102 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1100, 'column': 24, 'index': 34924}","  1098 |         const exParse = getParsed(exKern)[0];
  1099 |         const muParse = getParsed(muKern)[0];
> 1100 |         const abParse = getParsed(abKern)[1];
       |                        ^ Eager Test
  1101 |
  1102 |         expect(emParse.dimension.unit).toEqual(""em"");
  1103 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1135, 'column': 24, 'index': 36069}","  1133 |
  1134 |     it(""should list the correct units"", function() {
> 1135 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1136 |         const exParse = getParsed(exKern)[0];
  1137 |         const muParse = getParsed(muKern)[0];
  1138 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1136, 'column': 24, 'index': 36115}","  1134 |     it(""should list the correct units"", function() {
  1135 |         const emParse = getParsed(emKern)[0];
> 1136 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1137 |         const muParse = getParsed(muKern)[0];
  1138 |         const abParse1 = getParsed(abKern1)[1];
  1139 |         const abParse2 = getParsed(abKern2)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1137, 'column': 24, 'index': 36161}","  1135 |         const emParse = getParsed(emKern)[0];
  1136 |         const exParse = getParsed(exKern)[0];
> 1137 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1138 |         const abParse1 = getParsed(abKern1)[1];
  1139 |         const abParse2 = getParsed(abKern2)[1];
  1140 |         const abParse3 = getParsed(abKern3)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1138, 'column': 25, 'index': 36208}","  1136 |         const exParse = getParsed(exKern)[0];
  1137 |         const muParse = getParsed(muKern)[0];
> 1138 |         const abParse1 = getParsed(abKern1)[1];
       |                         ^ Eager Test
  1139 |         const abParse2 = getParsed(abKern2)[1];
  1140 |         const abParse3 = getParsed(abKern3)[1];
  1141 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1139, 'column': 25, 'index': 36256}","  1137 |         const muParse = getParsed(muKern)[0];
  1138 |         const abParse1 = getParsed(abKern1)[1];
> 1139 |         const abParse2 = getParsed(abKern2)[1];
       |                         ^ Eager Test
  1140 |         const abParse3 = getParsed(abKern3)[1];
  1141 |
  1142 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1140, 'column': 25, 'index': 36304}","  1138 |         const abParse1 = getParsed(abKern1)[1];
  1139 |         const abParse2 = getParsed(abKern2)[1];
> 1140 |         const abParse3 = getParsed(abKern3)[1];
       |                         ^ Eager Test
  1141 |
  1142 |         expect(emParse.dimension.unit).toEqual(""em"");
  1143 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1151, 'column': 25, 'index': 36759}","  1149 |
  1150 |     it(""should parse elements on either side of a kern"", function() {
> 1151 |         const abParse1 = getParsed(abKern1);
       |                         ^ Eager Test
  1152 |         const abParse2 = getParsed(abKern2);
  1153 |         const abParse3 = getParsed(abKern3);
  1154 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1152, 'column': 25, 'index': 36804}","  1150 |     it(""should parse elements on either side of a kern"", function() {
  1151 |         const abParse1 = getParsed(abKern1);
> 1152 |         const abParse2 = getParsed(abKern2);
       |                         ^ Eager Test
  1153 |         const abParse3 = getParsed(abKern3);
  1154 |
  1155 |         expect(abParse1).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1153, 'column': 25, 'index': 36849}","  1151 |         const abParse1 = getParsed(abKern1);
  1152 |         const abParse2 = getParsed(abKern2);
> 1153 |         const abParse3 = getParsed(abKern3);
       |                         ^ Eager Test
  1154 |
  1155 |         expect(abParse1).toHaveLength(3);
  1156 |         expect(abParse1[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2076, 'column': 19, 'index': 73940}","  2074 |     it(""should render a combination of font and color changes"", function() {
  2075 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2076 |         let tree = getParsed(tex);
       |                   ^ Eager Test
  2077 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2078 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2079 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2085, 'column': 15, 'index': 74309}","  2083 |         // reverse the order of the commands
  2084 |         tex = r`\mathbb{\textcolor{blue}{R}}`;
> 2085 |         tree = getParsed(tex);
       |               ^ Eager Test
  2086 |         markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2087 |         node = ""<mstyle mathcolor=\""blue\"">"" +
  2088 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2993, 'column': 24, 'index': 108164}","  2991 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2992 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2993 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  2994 |         expect(parsed1.href).toBe(url);
  2995 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2996 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2995, 'column': 24, 'index': 108284}","  2993 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  2994 |         expect(parsed1.href).toBe(url);
> 2995 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  2996 |         expect(parsed2.href).toBe(url);
  2997 |     });
  2998 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3001, 'column': 24, 'index': 108514}","  2999 |     it(""should allow balanced braces in url"", function() {
  3000 |         const url = ""http://example.org/{{}t{oo}}"";
> 3001 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3002 |         expect(parsed1.href).toBe(url);
  3003 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3004 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3003, 'column': 24, 'index': 108634}","  3001 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  3002 |         expect(parsed1.href).toBe(url);
> 3003 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3004 |         expect(parsed2.href).toBe(url);
  3005 |     });
  3006 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3017, 'column': 24, 'index': 109288}","  3015 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3016 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3017 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3018 |         expect(parsed1.href).toBe(url);
  3019 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3020 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3019, 'column': 24, 'index': 109410}","  3017 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
  3018 |         expect(parsed1.href).toBe(url);
> 3019 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
       |                        ^ Eager Test
  3020 |         expect(parsed2.href).toBe(url);
  3021 |     });
  3022 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2174, 'column': 12, 'index': 77751}","  2172 |     it(""should throw Error when HTML attribute name is invalid"", function() {
  2173 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
> 2174 |             try {
       |            ^ Exception Handling
  2175 |                 katex.renderToString(
  2176 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);
  2177 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2739, 'column': 8, 'index': 97382}","  2737 | describe(""A parser error"", function() {
  2738 |     it(""should report the position of an error"", function() {
> 2739 |         try {
       |        ^ Exception Handling
  2740 |             parseTree(r`\sqrt}`, new Settings());
  2741 |         } catch (e) {
  2742 |             expect(e.position).toEqual(5);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3158, 'column': 8, 'index': 114847}","  3156 | describe(""ParseError properties"", function() {
  3157 |     it(""should contain affected position and length information"", function() {
> 3158 |         try {
       |        ^ Exception Handling
  3159 |             katex.renderToString(""1 + \\fraq{}{}"");
  3160 |
  3161 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3173, 'column': 8, 'index': 115510}","  3171 |
  3172 |     it(""should contain position and length information at end of input"", function() {
> 3173 |         try {
       |        ^ Exception Handling
  3174 |             katex.renderToString(""\\frac{}"");
  3175 |
  3176 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3188, 'column': 8, 'index': 116206}","  3186 |
  3187 |     it(""should contain no position and length information if unavailable"", function() {
> 3188 |         try {
       |        ^ Exception Handling
  3189 |             katex.renderToString(""\\verb|hello\nworld|"");
  3190 |
  3191 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 44, 'column': 22, 'index': 1225}","  42 |
  43 |     it(""should build a list of ords"", function() {
> 44 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  45 |
  46 |         for (let i = 0; i < parse.length; i++) {
  47 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 53, 'column': 22, 'index': 1483}","  51 |
  52 |     it(""should parse the right number of ords"", function() {
> 53 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  54 |
  55 |         expect(parse).toHaveLength(expression.length);
  56 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 67, 'column': 22, 'index': 1816}","  65 |
  66 |     it(""should build a list of bins"", function() {
> 67 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  68 |
  69 |         for (let i = 0; i < parse.length; i++) {
  70 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 87, 'column': 22, 'index': 2411}","  85 |
  86 |     it(""should build a list of rels"", function() {
> 87 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  88 |
  89 |         for (let i = 0; i < parse.length; i++) {
  90 |             let group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 113, 'column': 32, 'index': 3312}","  111 |     it(""should return one group, not a fragment"", function() {
  112 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
> 113 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
      |                                ^ Lazy Test
  114 |         expect(mml.children.length).toEqual(1);
  115 |     });
  116 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 126, 'column': 22, 'index': 3666}","  124 |
  125 |     it(""should build a list of puncts"", function() {
> 126 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  127 |
  128 |         for (let i = 0; i < parse.length; i++) {
  129 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 144, 'column': 22, 'index': 4127}","  142 |
  143 |     it(""should build a list of opens"", function() {
> 144 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  145 |
  146 |         for (let i = 0; i < parse.length; i++) {
  147 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 162, 'column': 22, 'index': 4590}","  160 |
  161 |     it(""should build a list of closes"", function() {
> 162 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  163 |
  164 |         for (let i = 0; i < parse.length; i++) {
  165 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 494, 'column': 22, 'index': 14498}","  492 |
  493 |     it(""should produce a frac"", function() {
> 494 |         const parse = getParsed(expression)[0];
      |                      ^ Lazy Test
  495 |
  496 |         expect(parse.type).toEqual(""genfrac"");
  497 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 510, 'column': 27, 'index': 15056}","  508 |
  509 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 510 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Lazy Test
  511 |
  512 |         expect(dfracParse.type).toEqual(""genfrac"");
  513 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 573, 'column': 16, 'index': 17136}","  571 |         let parse;
  572 |
> 573 |         parse = getParsed(simpleOver)[0];
      |                ^ Lazy Test
  574 |
  575 |         expect(parse.type).toEqual(""genfrac"");
  576 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 603, 'column': 22, 'index': 18245}","  601 |
  602 |     it(""should create a numerator from the atoms before \\over"", function() {
> 603 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  604 |
  605 |         const numer = parse.numer;
  606 |         expect(numer.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 610, 'column': 22, 'index': 18462}","  608 |
  609 |     it(""should create a denominator from the atoms after \\over"", function() {
> 610 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  611 |
  612 |         const denom = parse.denom;
  613 |         expect(denom.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 618, 'column': 22, 'index': 18697}","  616 |     it(""should handle empty numerators"", function() {
  617 |         const emptyNumerator = r`\over x`;
> 618 |         const parse = getParsed(emptyNumerator)[0];
      |                      ^ Lazy Test
  619 |         expect(parse.type).toEqual(""genfrac"");
  620 |         expect(parse.numer).toBeDefined();
  621 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 626, 'column': 22, 'index': 18992}","  624 |     it(""should handle empty denominators"", function() {
  625 |         const emptyDenominator = r`1 \over`;
> 626 |         const parse = getParsed(emptyDenominator)[0];
      |                      ^ Lazy Test
  627 |         expect(parse.type).toEqual(""genfrac"");
  628 |         expect(parse.numer).toBeDefined();
  629 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 634, 'column': 22, 'index': 19317}","  632 |     it(""should handle \\displaystyle correctly"", function() {
  633 |         const displaystyleExpression = r`\displaystyle 1 \over 2`;
> 634 |         const parse = getParsed(displaystyleExpression)[0];
      |                      ^ Lazy Test
  635 |         expect(parse.type).toEqual(""genfrac"");
  636 |         expect(parse.numer.body[0].type).toEqual(""styling"");
  637 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 647, 'column': 22, 'index': 19869}","  645 |     it(""should handle nested factions"", function() {
  646 |         const nestedOverExpression = r`{1 \over 2} \over 3`;
> 647 |         const parse = getParsed(nestedOverExpression)[0];
      |                      ^ Lazy Test
  648 |         expect(parse.type).toEqual(""genfrac"");
  649 |         expect(parse.numer.body[0].type).toEqual(""genfrac"");
  650 |         expect(parse.numer.body[0].numer.body[0].text).toEqual(""1"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 696, 'column': 22, 'index': 21579}","  694 |
  695 |     it(""should produce a sizing node"", function() {
> 696 |         const parse = getParsed(sizeExpression)[0];
      |                      ^ Lazy Test
  697 |
  698 |         expect(parse.type).toEqual(""sizing"");
  699 |         expect(parse.size).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 720, 'column': 22, 'index': 22388}","  718 |
  719 |     it(""should produce a text"", function() {
> 720 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  721 |
  722 |         expect(parse.type).toEqual(""text"");
  723 |         expect(parse.body).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 727, 'column': 22, 'index': 22603}","  725 |
  726 |     it(""should produce textords instead of mathords"", function() {
> 727 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  728 |         const group = parse.body;
  729 |
  730 |         expect(group[0].type).toEqual(""textord"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 750, 'column': 22, 'index': 23266}","  748 |
  749 |     it(""should contract spaces"", function() {
> 750 |         const parse = getParsed(spaceTextExpression)[0];
      |                      ^ Lazy Test
  751 |         const group = parse.body;
  752 |
  753 |         expect(group.length).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 769, 'column': 22, 'index': 23942}","  767 |
  768 |     it(""should ignore a space before the text group"", function() {
> 769 |         const parse = getParsed(leadingSpaceTextExpression)[0];
      |                      ^ Lazy Test
  770 |         // [m, o, o]
  771 |         expect(parse.body).toHaveLength(3);
  772 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 856, 'column': 22, 'index': 27329}","  854 |
  855 |     it(""should build a color node"", function() {
> 856 |         const parse = getParsed(colorExpression)[0];
      |                      ^ Lazy Test
  857 |
  858 |         expect(parse.type).toEqual(""color"");
  859 |         expect(parse.color).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 870, 'column': 23, 'index': 27798}","  868 |
  869 |     it(""should correctly extract the custom color"", function() {
> 870 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Lazy Test
  871 |         const parse2 = getParsed(customColorExpression2)[0];
  872 |         const parse3 = getParsed(customColorExpression3)[0];
  873 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 929, 'column': 22, 'index': 29724}","  927 |
  928 |     it(""should produce spacing in math mode"", function() {
> 929 |         const parse = getParsed(mathTie);
      |                      ^ Lazy Test
  930 |
  931 |         expect(parse[1].type).toEqual(""spacing"");
  932 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 935, 'column': 21, 'index': 29884}","  933 |
  934 |     it(""should produce spacing in text mode"", function() {
> 935 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  936 |         const parse = text.body;
  937 |
  938 |         expect(parse[1].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 942, 'column': 21, 'index': 30089}","  940 |
  941 |     it(""should not contract with spaces in text mode"", function() {
> 942 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  943 |         const parse = text.body;
  944 |
  945 |         expect(parse[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 964, 'column': 22, 'index': 30686}","  962 |
  963 |     it(""should produce a delimsizing"", function() {
> 964 |         const parse = getParsed(normalDelim)[0];
      |                      ^ Lazy Test
  965 |
  966 |         expect(parse.type).toEqual(""delimsizing"");
  967 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 970, 'column': 26, 'index': 30870}","  968 |
  969 |     it(""should produce the correct direction delimiter"", function() {
> 970 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Lazy Test
  971 |         const rightParse = getParsed(bigDelim)[0];
  972 |
  973 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 978, 'column': 27, 'index': 31152}","  976 |
  977 |     it(""should parse the correct size delimiter"", function() {
> 978 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Lazy Test
  979 |         const bigParse = getParsed(bigDelim)[0];
  980 |
  981 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 994, 'column': 22, 'index': 31567}","  992 |
  993 |     it(""should produce an overline"", function() {
> 994 |         const parse = getParsed(overline)[0];
      |                      ^ Lazy Test
  995 |
  996 |         expect(parse.type).toEqual(""overline"");
  997 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1053, 'column': 22, 'index': 33417}","  1051 |
  1052 |     it(""should produce a rule"", function() {
> 1053 |         const parse = getParsed(emRule)[0];
       |                      ^ Lazy Test
  1054 |
  1055 |         expect(parse.type).toEqual(""rule"");
  1056 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1059, 'column': 24, 'index': 33570}","  1057 |
  1058 |     it(""should list the correct units"", function() {
> 1059 |         const emParse = getParsed(emRule)[0];
       |                        ^ Lazy Test
  1060 |         const exParse = getParsed(exRule)[0];
  1061 |
  1062 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1070, 'column': 32, 'index': 33940}","  1068 |
  1069 |     it(""should parse the number correctly"", function() {
> 1070 |         const hardNumberParse = getParsed(hardNumberRule)[0];
       |                                ^ Lazy Test
  1071 |
  1072 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
  1073 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1097, 'column': 24, 'index': 34786}","  1095 |
  1096 |     it(""should list the correct units"", function() {
> 1097 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1098 |         const exParse = getParsed(exKern)[0];
  1099 |         const muParse = getParsed(muKern)[0];
  1100 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1135, 'column': 24, 'index': 36069}","  1133 |
  1134 |     it(""should list the correct units"", function() {
> 1135 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1136 |         const exParse = getParsed(exKern)[0];
  1137 |         const muParse = getParsed(muKern)[0];
  1138 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1151, 'column': 25, 'index': 36759}","  1149 |
  1150 |     it(""should parse elements on either side of a kern"", function() {
> 1151 |         const abParse1 = getParsed(abKern1);
       |                         ^ Lazy Test
  1152 |         const abParse2 = getParsed(abKern2);
  1153 |         const abParse3 = getParsed(abKern3);
  1154 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1182, 'column': 24, 'index': 37834}","  1180 |
  1181 |     it(""should handle whitespace"", function() {
> 1182 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
       |                        ^ Lazy Test
  1183 |
  1184 |         expect(abParse).toHaveLength(3);
  1185 |         expect(abParse[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1200, 'column': 22, 'index': 38401}","  1198 |
  1199 |     it(""should produce a leftright"", function() {
> 1200 |         const parse = getParsed(normalLeftRight)[0];
       |                      ^ Lazy Test
  1201 |
  1202 |         expect(parse.type).toEqual(""leftright"");
  1203 |         expect(parse.left).toEqual(""("");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1377, 'column': 22, 'index': 44766}","  1375 |
  1376 |     it(""should produce sqrts"", function() {
> 1377 |         const parse = getParsed(sqrt)[0];
       |                      ^ Lazy Test
  1378 |
  1379 |         expect(parse.type).toEqual(""sqrt"");
  1380 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1576, 'column': 22, 'index': 51186}","  1574 |     it(""should only change the style within its group"", function() {
  1575 |         const text = r`a b { c d \displaystyle e f } g h`;
> 1576 |         const parse = getParsed(text);
       |                      ^ Lazy Test
  1577 |
  1578 |         const displayNode = parse[2].body[2];
  1579 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2076, 'column': 19, 'index': 73940}","  2074 |     it(""should render a combination of font and color changes"", function() {
  2075 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2076 |         let tree = getParsed(tex);
       |                   ^ Lazy Test
  2077 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2078 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2079 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2095, 'column': 21, 'index': 74681}","  2093 |     it(""should render text as <mtext>"", function() {
  2094 |         const tex = r`\text{for }`;
> 2095 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2096 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2097 |         expect(markup).toContain(""<mtext>for\u00a0</mtext>"");
  2098 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2102, 'column': 21, 'index': 74993}","  2100 |     it(""should render math within text as side-by-side children"", function() {
  2101 |         const tex = r`\text{graph: $y = mx + b$}`;
> 2102 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2103 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2104 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
  2105 |         expect(markup).toContain(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2117, 'column': 15, 'index': 75653}","  2115 |
  2116 |     it(""should produce mords"", function() {
> 2117 |         expect(getBuilt(img, trustSettings)[0].classes).toContain(""mord"");
       |               ^ Lazy Test
  2118 |     });
  2119 |
  2120 |     it(""should not render without trust setting"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2121, 'column': 22, 'index': 75807}","  2119 |
  2120 |     it(""should not render without trust setting"", function() {
> 2121 |         const built = getBuilt(img);
       |                      ^ Lazy Test
  2122 |         expect(built).toMatchSnapshot();
  2123 |     });
  2124 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2126, 'column': 22, 'index': 75950}","  2124 |
  2125 |     it(""should render with trust setting"", function() {
> 2126 |         const built = getBuilt(img, trustSettings);
       |                      ^ Lazy Test
  2127 |         expect(built).toMatchSnapshot();
  2128 |     });
  2129 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2152, 'column': 22, 'index': 76896}","  2150 |
  2151 |     it(""should set HTML attributes"", function() {
> 2152 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2153 |         expect(built[0].attributes.id).toMatch(""bar"");
  2154 |         expect(built[1].classes).toContain(""foo"");
  2155 |         expect(built[2].attributes.style).toMatch(""color: red"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2163, 'column': 22, 'index': 77303}","  2161 |
  2162 |     it(""should not affect spacing"", function() {
> 2163 |         const built = getBuilt(""\\htmlId{a}{x+}y"", trustNonStrictSettings);
       |                      ^ Lazy Test
  2164 |         expect(built).toMatchSnapshot();
  2165 |     });
  2166 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2168, 'column': 22, 'index': 77496}","  2166 |
  2167 |     it(""should render with trust and strict setting"", function() {
> 2168 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2169 |         expect(built).toMatchSnapshot();
  2170 |     });
  2171 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2343, 'column': 21, 'index': 83998}","  2341 |     it(""should properly render stretchy accents"", function() {
  2342 |         const tex = `\\widetilde{ABCD}`;
> 2343 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2344 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2345 |         expect(markup).toContain('<mo stretchy=""true"">~</mo>');
  2346 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2993, 'column': 24, 'index': 108164}","  2991 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2992 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2993 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  2994 |         expect(parsed1.href).toBe(url);
  2995 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2996 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3001, 'column': 24, 'index': 108514}","  2999 |     it(""should allow balanced braces in url"", function() {
  3000 |         const url = ""http://example.org/{{}t{oo}}"";
> 3001 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3002 |         expect(parsed1.href).toBe(url);
  3003 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3004 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3017, 'column': 24, 'index': 109288}","  3015 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3016 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3017 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3018 |         expect(parsed1.href).toBe(url);
  3019 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3020 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3033, 'column': 22, 'index': 109953}","  3031 |
  3032 |     it(""should not affect spacing around"", function() {
> 3033 |         const built = getBuilt(""a\\href{http://example.com/}{+b}"", trustSettings);
       |                      ^ Lazy Test
  3034 |         expect(built).toMatchSnapshot();
  3035 |     });
  3036 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3043, 'column': 23, 'index': 110327}","  3041 |
  3042 |     it(""should allow explicitly allowed protocols"", () => {
> 3043 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3044 |             ""\\href{ftp://x}{foo}"",
  3045 |             new Settings({trust: (context) => context.protocol === ""ftp""}),
  3046 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3051, 'column': 23, 'index': 110606}","  3049 |
  3050 |     it(""should allow all protocols when trust option is true"", () => {
> 3051 |         const parsed = getParsed(""\\href{ftp://x}{foo}"", trustSettings);
       |                       ^ Lazy Test
  3052 |         expect(parsed).toMatchSnapshot();
  3053 |     });
  3054 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3056, 'column': 23, 'index': 110797}","  3054 |
  3055 |     it(""should not allow explicitly disallowed protocols"", () => {
> 3056 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3057 |             ""\\href{javascript:alert('x')}{foo}"",
  3058 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3059 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3064, 'column': 23, 'index': 111102}","  3062 |
  3063 |     it(""should not allow explicitly uppercased disallowed protocols"", () => {
> 3064 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3065 |             ""\\href{JavaScript:alert('x')}{foo}"",
  3066 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3067 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3140, 'column': 28, 'index': 114183}","  3138 |
  3139 |     it(""should produce color nodes with a color value given by errorColor"", function() {
> 3140 |         const parsedInput = getParsed(r`\error`, noThrowSettings);
       |                            ^ Lazy Test
  3141 |         expect(parsedInput[0].type).toBe(""color"");
  3142 |         expect(parsedInput[0].color).toBe(errorColor);
  3143 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3146, 'column': 22, 'index': 114442}","  3144 |
  3145 |     it(""should build katex-error span for other type of KaTeX error"", function() {
> 3146 |         const built = getBuilt(`2^2^2`, noThrowSettings);
       |                      ^ Lazy Test
  3147 |         expect(built).toMatchSnapshot();
  3148 |     });
  3149 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3481, 'column': 27, 'index': 127200}","  3479 |         const parsedBare = getParsed`~`;
  3480 |         expect(parsedBare[0].type).toEqual(""spacing"");
> 3481 |         const parsedChar = getParsed(""\\char`\\~"");
       |                           ^ Lazy Test
  3482 |         expect(parsedChar[0].type).toEqual(""textord"");
  3483 |     });
  3484 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4053, 'column': 22, 'index': 151161}","  4051 |
  4052 |     it(""should clamp size when set"", function() {
> 4053 |         const built = getBuilt(rule, new Settings({maxSize: 5}))[0];
       |                      ^ Lazy Test
  4054 |         expect(built.style.borderRightWidth).toEqual(""5em"");
  4055 |         expect(built.style.borderTopWidth).toEqual(""5em"");
  4056 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4059, 'column': 22, 'index': 151417}","  4057 |
  4058 |     it(""should not clamp size when not set"", function() {
> 4059 |         const built = getBuilt(rule)[0];
       |                      ^ Lazy Test
  4060 |         expect(built.style.borderRightWidth).toEqual(""999em"");
  4061 |         expect(built.style.borderTopWidth).toEqual(""999em"");
  4062 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4065, 'column': 22, 'index': 151675}","  4063 |
  4064 |     it(""should make zero-width rules if a negative maxSize is passed"", function() {
> 4065 |         const built = getBuilt(rule, new Settings({maxSize: -5}))[0];
       |                      ^ Lazy Test
  4066 |         expect(built.style.borderRightWidth).toEqual(""0em"");
  4067 |         expect(built.style.borderTopWidth).toEqual(""0em"");
  4068 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 92, 'column': 48, 'index': 2613}","  90 |             let group = parse[i];
  91 |             if (group.type === ""htmlmathml"") {
> 92 |                 expect(group.html).toHaveLength(1);
     |                                                ^ Magic Number
  93 |                 group = group.html[0];
  94 |             }
  95 |             if (group.type === ""mclass"") {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 114, 'column': 44, 'index': 3404}","  112 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
  113 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
> 114 |         expect(mml.children.length).toEqual(1);
      |                                            ^ Magic Number
  115 |     });
  116 | });
  117 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 346, 'column': 35, 'index': 10074}","  344 |         const parse = getParsed`{xy}`;
  345 |
> 346 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  347 |
  348 |         const ord = parse[0];
  349 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 368, 'column': 35, 'index': 10676}","  366 |         const parse = getParsed`\begingroup xy \endgroup`;
  367 |
> 368 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  369 |
  370 |         const ord = parse[0];
  371 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 392, 'column': 35, 'index': 11386}","  390 |         const parse = getParsed`\Large abc`;
  391 |
> 392 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  393 |
  394 |         const sizing = parse[0];
  395 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 404, 'column': 35, 'index': 11709}","  402 |         const parse = getParsed`a \Large abc`;
  403 |
> 404 |         expect(parse).toHaveLength(2);
      |                                   ^ Magic Number
  405 |
  406 |         const sizing = parse[1];
  407 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 409, 'column': 41, 'index': 11836}","  407 |
  408 |         expect(sizing.type).toEqual(""sizing"");
> 409 |         expect(sizing.body).toHaveLength(3);
      |                                         ^ Magic Number
  410 |     });
  411 |
  412 |     it(""should stop at the ends of groups"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 419, 'column': 41, 'index': 12119}","  417 |
  418 |         expect(sizing.type).toEqual(""sizing"");
> 419 |         expect(sizing.body).toHaveLength(1);
      |                                         ^ Magic Number
  420 |     });
  421 |
  422 |     describe(""within optional groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 606, 'column': 40, 'index': 18348}","  604 |
  605 |         const numer = parse.numer;
> 606 |         expect(numer.body).toHaveLength(4);
      |                                        ^ Magic Number
  607 |     });
  608 |
  609 |     it(""should create a denominator from the atoms after \\over"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 613, 'column': 40, 'index': 18565}","  611 |
  612 |         const denom = parse.denom;
> 613 |         expect(denom.body).toHaveLength(4);
      |                                        ^ Magic Number
  614 |     });
  615 |
  616 |     it(""should handle empty numerators"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 753, 'column': 37, 'index': 23373}","  751 |         const group = parse.body;
  752 |
> 753 |         expect(group.length).toEqual(4);
      |                                     ^ Magic Number
  754 |         expect(group[0].type).toEqual(""spacing"");
  755 |         expect(group[1].type).toEqual(""textord"");
  756 |         expect(group[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 771, 'column': 40, 'index': 24045}","  769 |         const parse = getParsed(leadingSpaceTextExpression)[0];
  770 |         // [m, o, o]
> 771 |         expect(parse.body).toHaveLength(3);
      |                                        ^ Magic Number
  772 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");
  773 |     });
  774 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 981, 'column': 40, 'index': 31269}","  979 |         const bigParse = getParsed(bigDelim)[0];
  980 |
> 981 |         expect(smallParse.size).toEqual(1);
      |                                        ^ Magic Number
  982 |         expect(bigParse.size).toEqual(4);
  983 |     });
  984 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 982, 'column': 38, 'index': 31311}","  980 |
  981 |         expect(smallParse.size).toEqual(1);
> 982 |         expect(bigParse.size).toEqual(4);
      |                                      ^ Magic Number
  983 |     });
  984 | });
  985 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1072, 'column': 57, 'index': 34028}","  1070 |         const hardNumberParse = getParsed(hardNumberRule)[0];
  1071 |
> 1072 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
       |                                                         ^ Magic Number
  1073 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
  1074 |     });
  1075 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1073, 'column': 58, 'index': 34093}","  1071 |
  1072 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
> 1073 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
       |                                                          ^ Magic Number
  1074 |     });
  1075 |
  1076 |     it(""should parse negative sizes"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1120, 'column': 51, 'index': 35638}","  1118 |     it(""should parse positive sizes"", function() {
  1119 |         const parse = getParsed`\kern{+1em}`[0];
> 1120 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1121 |     });
  1122 | });
  1123 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1155, 'column': 38, 'index': 36908}","  1153 |         const abParse3 = getParsed(abKern3);
  1154 |
> 1155 |         expect(abParse1).toHaveLength(3);
       |                                      ^ Magic Number
  1156 |         expect(abParse1[0].text).toEqual(""a"");
  1157 |         expect(abParse1[2].text).toEqual(""b"");
  1158 |         expect(abParse2).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1158, 'column': 38, 'index': 37044}","  1156 |         expect(abParse1[0].text).toEqual(""a"");
  1157 |         expect(abParse1[2].text).toEqual(""b"");
> 1158 |         expect(abParse2).toHaveLength(3);
       |                                      ^ Magic Number
  1159 |         expect(abParse2[0].text).toEqual(""a"");
  1160 |         expect(abParse2[2].text).toEqual(""b"");
  1161 |         expect(abParse3).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1161, 'column': 38, 'index': 37180}","  1159 |         expect(abParse2[0].text).toEqual(""a"");
  1160 |         expect(abParse2[2].text).toEqual(""b"");
> 1161 |         expect(abParse3).toHaveLength(3);
       |                                      ^ Magic Number
  1162 |         expect(abParse3[0].text).toEqual(""a"");
  1163 |         expect(abParse3[2].text).toEqual(""b"");
  1164 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1178, 'column': 51, 'index': 37749}","  1176 |     it(""should parse positive sizes"", function() {
  1177 |         const parse = getParsed`\kern+1em`[0];
> 1178 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1179 |     });
  1180 |
  1181 |     it(""should handle whitespace"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1184, 'column': 37, 'index': 37911}","  1182 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
  1183 |
> 1184 |         expect(abParse).toHaveLength(3);
       |                                     ^ Magic Number
  1185 |         expect(abParse[0].text).toEqual(""a"");
  1186 |         expect(abParse[1].dimension.unit).toEqual(""mu"");
  1187 |         expect(abParse[2].text).toEqual(""b"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1337, 'column': 37, 'index': 43207}","  1335 |     it(""should eat a final newline"", function() {
  1336 |         const m3 = getParsed`\begin{matrix}a&b\\ c&d \\ \end{matrix}`[0];
> 1337 |         expect(m3.body).toHaveLength(2);
       |                                     ^ Magic Number
  1338 |     });
  1339 |
  1340 |     it(""should grab \\arraystretch"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1584, 'column': 41, 'index': 51393}","  1582 |         const displayBody = displayNode.body;
  1583 |
> 1584 |         expect(displayBody).toHaveLength(2);
       |                                         ^ Magic Number
  1585 |         expect(displayBody[0].text).toEqual(""e"");
  1586 |     });
  1587 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1638, 'column': 36, 'index': 53428}","  1636 |
  1637 |         const bbBody = nestedParse.body.body;
> 1638 |         expect(bbBody).toHaveLength(3);
       |                                    ^ Magic Number
  1639 |         expect(bbBody[0].type).toEqual(""mathord"");
  1640 |         expect(bbBody[2].type).toEqual(""font"");
  1641 |         expect(bbBody[2].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1650, 'column': 34, 'index': 53956}","  1648 |         expect(colorMathbbParse.color).toEqual(""blue"");
  1649 |         const body = colorMathbbParse.body;
> 1650 |         expect(body).toHaveLength(1);
       |                                  ^ Magic Number
  1651 |         expect(body[0].type).toEqual(""font"");
  1652 |         expect(body[0].font).toEqual(""mathbb"");
  1653 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1663, 'column': 42, 'index': 54420}","  1661 |         expect(bf.type).toEqual(""font"");
  1662 |         expect(bf.font).toEqual(""mathbf"");
> 1663 |         expect(bf.body.body).toHaveLength(3);
       |                                          ^ Magic Number
  1664 |         expect(bf.body.body[0].text).toEqual(""a"");
  1665 |         expect(bf.body.body[1].type).toEqual(""font"");
  1666 |         expect(bf.body.body[1].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2236, 'column': 45, 'index': 80281}","  2234 |         // Just a few quick sanity checks here...
  2235 |         const markup = katex.renderToString(r`\sigma^2`);
> 2236 |         expect(markup.indexOf(""<span"")).toBe(0);
       |                                             ^ Magic Number
  2237 |         expect(markup).toContain(""\u03c3"");  // sigma
  2238 |         expect(markup).toContain(""margin-right"");
  2239 |         expect(markup).not.toContain(""marginRight"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2742, 'column': 39, 'index': 97499}","  2740 |             parseTree(r`\sqrt}`, new Settings());
  2741 |         } catch (e) {
> 2742 |             expect(e.position).toEqual(5);
       |                                       ^ Magic Number
  2743 |         }
  2744 |     });
  2745 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2876, 'column': 37, 'index': 101794}","  2874 |     it(""should not eat the last row when its first cell is empty"", function() {
  2875 |         const ae = getParsed`\begin{aligned}&E_1 & (1)\\&E_2 & (2)\\&E_3 & (3)\end{aligned}`[0];
> 2876 |         expect(ae.body).toHaveLength(3);
       |                                     ^ Magic Number
  2877 |     });
  2878 | });
  2879 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3167, 'column': 40, 'index': 115351}","  3165 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");
  3166 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
> 3167 |             expect(error.position).toBe(4);
       |                                        ^ Magic Number
  3168 |             expect(error.length).toBe(5);
  3169 |         }
  3170 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3168, 'column': 38, 'index': 115393}","  3166 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
  3167 |             expect(error.position).toBe(4);
> 3168 |             expect(error.length).toBe(5);
       |                                      ^ Magic Number
  3169 |         }
  3170 |     });
  3171 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3182, 'column': 40, 'index': 116045}","  3180 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");
  3181 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
> 3182 |             expect(error.position).toBe(7);
       |                                        ^ Magic Number
  3183 |             expect(error.length).toBe(0);
  3184 |         }
  3185 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3183, 'column': 38, 'index': 116087}","  3181 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
  3182 |             expect(error.position).toBe(7);
> 3183 |             expect(error.length).toBe(0);
       |                                      ^ Magic Number
  3184 |         }
  3185 |     });
  3186 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 761}","  759 |
  760 |     it(""should handle backslash followed by newline"", () => {
> 761 |         expect(""\\text{\\ \t\r \n \t\r  }"").toParseLike`\text{\ }`;
      |        ^ Redundant Assertion
  762 |     });
  763 |
  764 |     it(""should accept math mode tokens after its argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1732}","  1730 | describe(""A comment parser"", function() {
  1731 |     it(""should parse comments at the end of a line"", () => {
> 1732 |         expect(""a^2 + b^2 = c^2 % Pythagoras' Theorem\n"").toParse();
       |        ^ Redundant Assertion
  1733 |     });
  1734 |
  1735 |     it(""should parse comments at the start of a line"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1736}","  1734 |
  1735 |     it(""should parse comments at the start of a line"", () => {
> 1736 |         expect(""% comment\n"").toParse();
       |        ^ Redundant Assertion
  1737 |     });
  1738 |
  1739 |     it(""should parse multiple lines of comments in a row"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1740}","  1738 |
  1739 |     it(""should parse multiple lines of comments in a row"", () => {
> 1740 |         expect(""% comment 1\n% comment 2\n"").toParse();
       |        ^ Redundant Assertion
  1741 |     });
  1742 |
  1743 |     it(""should parse comments between subscript and superscript"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1744}","  1742 |
  1743 |     it(""should parse comments between subscript and superscript"", () => {
> 1744 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
       |        ^ Redundant Assertion
  1745 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
  1746 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1747 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1745}","  1743 |     it(""should parse comments between subscript and superscript"", () => {
  1744 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
> 1745 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
       |        ^ Redundant Assertion
  1746 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1747 |     });
  1748 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1746}","  1744 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
  1745 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
> 1746 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
       |        ^ Redundant Assertion
  1747 |     });
  1748 |
  1749 |     it(""should parse comments in size and color groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1750}","  1748 |
  1749 |     it(""should parse comments in size and color groups"", () => {
> 1750 |         expect(""\\kern{1 %kern\nem}"").toParse();
       |        ^ Redundant Assertion
  1751 |         expect(""\\kern1 %kern\nem"").toParse();
  1752 |         expect(""\\color{#f00%red\n}"").toParse();
  1753 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1751}","  1749 |     it(""should parse comments in size and color groups"", () => {
  1750 |         expect(""\\kern{1 %kern\nem}"").toParse();
> 1751 |         expect(""\\kern1 %kern\nem"").toParse();
       |        ^ Redundant Assertion
  1752 |         expect(""\\color{#f00%red\n}"").toParse();
  1753 |     });
  1754 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1752}","  1750 |         expect(""\\kern{1 %kern\nem}"").toParse();
  1751 |         expect(""\\kern1 %kern\nem"").toParse();
> 1752 |         expect(""\\color{#f00%red\n}"").toParse();
       |        ^ Redundant Assertion
  1753 |     });
  1754 |
  1755 |     it(""should parse comments before an expression"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1756}","  1754 |
  1755 |     it(""should parse comments before an expression"", () => {
> 1756 |         expect(""%comment\n{2}"").toParseLike`{2}`;
       |        ^ Redundant Assertion
  1757 |     });
  1758 |
  1759 |     it(""should parse comments before and between \\hline"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1766}","  1764 |
  1765 |     it(""should parse comments in the macro definition"", () => {
> 1766 |         expect(""\\def\\foo{1 %}\n2}\n\\foo"").toParseLike`12`;
       |        ^ Redundant Assertion
  1767 |     });
  1768 |
  1769 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1770}","  1768 |
  1769 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {
> 1770 |         expect(""\\def\\foo{1\n2}\nx %\\foo\n"").toParseLike`x`;
       |        ^ Redundant Assertion
  1771 |     });
  1772 |
  1773 |     it(""should not parse a comment without newline in strict mode"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1779}","  1777 |
  1778 |     it(""should not produce or consume space"", () => {
> 1779 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
       |        ^ Redundant Assertion
  1780 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
  1781 |     });
  1782 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1780}","  1778 |     it(""should not produce or consume space"", () => {
  1779 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
> 1780 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
       |        ^ Redundant Assertion
  1781 |     });
  1782 |
  1783 |     it(""should not include comments in the output"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1784}","  1782 |
  1783 |     it(""should not include comments in the output"", () => {
> 1784 |         expect(""5 % comment\n"").toParseLike`5`;
       |        ^ Redundant Assertion
  1785 |     });
  1786 | });
  1787 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 16, 'line': 2179}","  2177 |
  2178 |                 // Render is expected to throw, so this should not be called.
> 2179 |                 expect(true).toBe(false);
       |                ^ Redundant Assertion
  2180 |             } catch (error) {
  2181 |                 expect(error).toBeInstanceOf(ParseError);
  2182 |                 const message =",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 2981}","  2979 |         expect`\href%end`.toParseLike(""\\href{%}end"", trustSettings);
  2980 |         expect`\url%end`.toParseLike(""\\url{%}end"", trustSettings);
> 2981 |         expect(""\\url%%end\n"").toParseLike(""\\url{%}"", trustSettings);
       |        ^ Redundant Assertion
  2982 |         expect`\url end`.toParseLike(""\\url{e}nd"", trustSettings);
  2983 |         expect`\url%end`.toParseLike(""\\url {%}end"", trustSettings);
  2984 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3024}","  3022 |
  3023 |     it(""should allow comments after URLs"", function() {
> 3024 |         expect(""\\url{http://example.com/}%comment\n"").toBuild();
       |        ^ Redundant Assertion
  3025 |     });
  3026 |
  3027 |     it(""should be marked up correctly"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3162}","  3160 |
  3161 |             // Render is expected to throw, so this should not be called.
> 3162 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3163 |         } catch (error) {
  3164 |             expect(error).toBeInstanceOf(ParseError);
  3165 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3177}","  3175 |
  3176 |             // Render is expected to throw, so this should not be called.
> 3177 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3178 |         } catch (error) {
  3179 |             expect(error).toBeInstanceOf(ParseError);
  3180 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3192}","  3190 |
  3191 |             // Render is expected to throw, so this should not be called.
> 3192 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3193 |         } catch (error) {
  3194 |             expect(error).toBeInstanceOf(ParseError);
  3195 |             expect(error.message).toBe(""KaTeX parse error: \\verb ended by end of line instead of matching delimiter"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3465}","  3463 |
  3464 |     it(""\\char produces literal characters"", () => {
> 3465 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
       |        ^ Redundant Assertion
  3466 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3467 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3468 |         expect(""\\char`\\%"").toParseLike`\char""25`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3466}","  3464 |     it(""\\char produces literal characters"", () => {
  3465 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3466 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Redundant Assertion
  3467 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3468 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3469 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3467}","  3465 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3466 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3467 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Redundant Assertion
  3468 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3469 |         expect`\char`.not.toParse();
  3470 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3468}","  3466 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3467 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3468 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Redundant Assertion
  3469 |         expect`\char`.not.toParse();
  3470 |         expect(""\\char`"").not.toParse();
  3471 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3470}","  3468 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3469 |         expect`\char`.not.toParse();
> 3470 |         expect(""\\char`"").not.toParse();
       |        ^ Redundant Assertion
  3471 |         expect`\char'`.not.toParse();
  3472 |         expect`\char""`.not.toParse();
  3473 |         expect`\char'a`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3934}","  3932 |
  3933 |     it(""should parse combining characters"", function() {
> 3934 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
       |        ^ Redundant Assertion
  3935 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
  3936 |     });
  3937 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3935}","  3933 |     it(""should parse combining characters"", function() {
  3934 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
> 3935 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
       |        ^ Redundant Assertion
  3936 |     });
  3937 |
  3938 |     it(""should parse multi-accented characters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3973}","  3971 |
  3972 |     it(""should parse symbols"", function() {
> 3973 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3974 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
  3975 |     });
  3976 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3974}","  3972 |     it(""should parse symbols"", function() {
  3973 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
> 3974 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3975 |     });
  3976 |
  3977 |     it(""should build Greek capital letters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3991}","  3989 |
  3990 |     it(""should build binary operators"", function() {
> 3991 |         expect(""±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞\u22C5\u2218\u2216\u2219"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3992 |     });
  3993 |
  3994 |     it(""should build common ords"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3995}","  3993 |
  3994 |     it(""should build common ords"", function() {
> 3995 |         expect(""§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3996 |     });
  3997 |
  3998 |     it(""should build delimiters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3999}","  3997 |
  3998 |     it(""should build delimiters"", function() {
> 3999 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
       |        ^ Redundant Assertion
  4000 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4001 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4002 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4000}","  3998 |     it(""should build delimiters"", function() {
  3999 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
> 4000 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
       |        ^ Redundant Assertion
  4001 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4002 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4003 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4001}","  3999 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
  4000 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
> 4001 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
       |        ^ Redundant Assertion
  4002 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4003 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4004 |         expect`┌x┐ └x┘`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4002}","  4000 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4001 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
> 4002 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
       |        ^ Redundant Assertion
  4003 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4004 |         expect`┌x┐ └x┘`.toBuild();
  4005 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4003}","  4001 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4002 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
> 4003 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
       |        ^ Redundant Assertion
  4004 |         expect`┌x┐ └x┘`.toBuild();
  4005 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4006 |         expect(""\u27E6x\u27E7"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4005}","  4003 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4004 |         expect`┌x┐ └x┘`.toBuild();
> 4005 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
       |        ^ Redundant Assertion
  4006 |         expect(""\u27E6x\u27E7"").toBuild();
  4007 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4008 |         expect(""\\lBrace \\rBrace"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4006}","  4004 |         expect`┌x┐ └x┘`.toBuild();
  4005 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
> 4006 |         expect(""\u27E6x\u27E7"").toBuild();
       |        ^ Redundant Assertion
  4007 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4008 |         expect(""\\lBrace \\rBrace"").toBuild();
  4009 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4007}","  4005 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4006 |         expect(""\u27E6x\u27E7"").toBuild();
> 4007 |         expect(""\\llbracket \\rrbracket"").toBuild();
       |        ^ Redundant Assertion
  4008 |         expect(""\\lBrace \\rBrace"").toBuild();
  4009 |     });
  4010 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4008}","  4006 |         expect(""\u27E6x\u27E7"").toBuild();
  4007 |         expect(""\\llbracket \\rrbracket"").toBuild();
> 4008 |         expect(""\\lBrace \\rBrace"").toBuild();
       |        ^ Redundant Assertion
  4009 |     });
  4010 |
  4011 |     it(""should build some surrogate pairs"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4278, 'column': 19, 'index': 160283}","  4276 |             expect`\message{Hello, world}`.toParse();
  4277 |             // eslint-disable-next-line no-console
> 4278 |             expect(console.log).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4279 |         });
  4280 |     });
  4281 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4287, 'column': 19, 'index': 160648}","  4285 |             expect`\errmessage{Hello, world}`.toParse();
  4286 |             // eslint-disable-next-line no-console
> 4287 |             expect(console.error).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4288 |         });
  4289 |     });
  4290 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 23}","  21 |
  22 | describe(""A parser"", function() {
> 23 |     it(""should not fail on an empty string"", function() {
     |    ^ Unknown Test
  24 |         expect``.toParse(strictSettings);
  25 |     });
  26 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 27}","  25 |     });
  26 |
> 27 |     it(""should ignore whitespace"", function() {
     |    ^ Unknown Test
  28 |         expect`    x    y    `.toParseLike(""xy"", strictSettings);
  29 |     });
  30 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 31}","  29 |     });
  30 |
> 31 |     it(""should ignore whitespace in atom"", function() {
     |    ^ Unknown Test
  32 |         expect`    x   ^ y    `.toParseLike(""x^y"", strictSettings);
  33 |     });
  34 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 106}","  104 |
  105 | describe(""A mathinner parser"", function() {
> 106 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  107 |         expect`\mathinner{\langle{\psi}\rangle}`.toParse();
  108 |         expect`\frac 1 {\mathinner{\langle{\psi}\rangle}}`.toParse();
  109 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 173}","  171 |
  172 | describe(""A \\KaTeX parser"", function() {
> 173 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  174 |         expect`\KaTeX`.toParse();
  175 |     });
  176 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 179}","  177 |
  178 | describe(""A subscript and superscript parser"", function() {
> 179 |     it(""should not fail on superscripts"", function() {
      |    ^ Unknown Test
  180 |         expect`x^2`.toParse();
  181 |     });
  182 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 183}","  181 |     });
  182 |
> 183 |     it(""should not fail on subscripts"", function() {
      |    ^ Unknown Test
  184 |         expect`x_3`.toParse();
  185 |     });
  186 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 187}","  185 |     });
  186 |
> 187 |     it(""should not fail on both subscripts and superscripts"", function() {
      |    ^ Unknown Test
  188 |         expect`x^2_3`.toParse();
  189 |
  190 |         expect`x_2^3`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 193}","  191 |     });
  192 |
> 193 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  194 |         expect`^3`.toParse();
  195 |         expect`^3+`.toParse();
  196 |         expect`_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 237}","  235 |     });
  236 |
> 237 |     it(""should produce the same thing regardless of order"", function() {
      |    ^ Unknown Test
  238 |         expect`x^2_3`.toParseLike`x_3^2`;
  239 |     });
  240 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 241}","  239 |     });
  240 |
> 241 |     it(""should not parse double subscripts or superscripts"", function() {
      |    ^ Unknown Test
  242 |         expect`x^x^x`.not.toParse();
  243 |
  244 |         expect`x_x_x`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 255}","  253 |     });
  254 |
> 255 |     it(""should work correctly with {}s"", function() {
      |    ^ Unknown Test
  256 |         expect`x^{2+3}`.toParse();
  257 |
  258 |         expect`x_{3-2}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 273}","  271 |     });
  272 |
> 273 |     it(""should work with nested super/subscripts"", function() {
      |    ^ Unknown Test
  274 |         expect`x^{x^x}`.toParse();
  275 |         expect`x^{x_x}`.toParse();
  276 |         expect`x_{x^x}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 280}","  278 |     });
  279 |
> 280 |     it(""should work with Unicode (sub|super)script characters"", function() {
      |    ^ Unknown Test
  281 |         expect`A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃`.toParseLike`A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}`;
  282 |     });
  283 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 284}","  282 |     });
  283 |
> 284 |     it(""should not fail if \\relax is in an atom"", function() {
      |    ^ Unknown Test
  285 |         expect`\hskip1em\relax^2`.toParse(strictSettings);
  286 |     });
  287 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 288}","  286 |     });
  287 |
> 288 |     it(""should skip \\relax in super/subscripts"", function() {
      |    ^ Unknown Test
  289 |         expect`x^\relax 2`.toParseLike`x^2`;
  290 |         expect`x_\relax 2`.toParseLike`x_2`;
  291 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 295}","  293 |
  294 | describe(""A subscript and superscript tree-builder"", function() {
> 295 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  296 |         expect`^3`.toBuild();
  297 |         expect`_2`.toBuild();
  298 |         expect`^3_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 304}","  302 |
  303 | describe(""A parser with limit controls"", function() {
> 304 |     it(""should fail when the limit control is not preceded by an op node"", function() {
      |    ^ Unknown Test
  305 |         expect`3\nolimits_2^2`.not.toParse();
  306 |         expect`\sqrt\limits_2^2`.not.toParse();
  307 |         expect`45 +\nolimits 45`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 310}","  308 |     });
  309 |
> 310 |     it(""should parse when the limit control directly follows an op node"", function() {
      |    ^ Unknown Test
  311 |         expect`\int\limits_2^2 3`.toParse();
  312 |         expect`\sum\nolimits_3^4 4`.toParse();
  313 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 315}","  313 |     });
  314 |
> 315 |     it(""should parse when the limit control is in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  316 |         expect`\int_2^2\limits`.toParse();
  317 |         expect`\int^2\nolimits_2`.toParse();
  318 |         expect`\int_2\limits^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 321}","  319 |     });
  320 |
> 321 |     it(""should allow multiple limit controls in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  322 |         expect`\int_2\nolimits^2\limits 3`.toParse();
  323 |         expect`\int\nolimits\limits_2^2`.toParse();
  324 |         expect`\int\limits\limits\limits_2^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 339}","  337 |
  338 | describe(""A group parser"", function() {
> 339 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  340 |         expect`{xy}`.toParse();
  341 |     });
  342 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 356}","  354 |
  355 | describe(""A \\begingroup...\\endgroup parser"", function() {
> 356 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  357 |         expect`\begingroup xy \endgroup`.toParse();
  358 |     });
  359 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 360}","  358 |     });
  359 |
> 360 |     it(""should fail when it is mismatched"", function() {
      |    ^ Unknown Test
  361 |         expect`\begingroup xy`.not.toParse();
  362 |         expect`\begingroup xy }`.not.toParse();
  363 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 378}","  376 |     });
  377 |
> 378 |     it(""should not affect spacing in math mode"", function() {
      |    ^ Unknown Test
  379 |         expect`\begingroup x+ \endgroup y`.toBuildLike`x+y`;
  380 |     });
  381 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 384}","  382 |
  383 | describe(""An implicit group parser"", function() {
> 384 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  385 |         expect`\Large x`.toParse();
  386 |         expect`abc {abc \Large xyz} abc`.toParse();
  387 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 446}","  444 |
  445 | describe(""A function parser"", function() {
> 446 |     it(""should parse no argument functions"", function() {
      |    ^ Unknown Test
  447 |         expect`\div`.toParse();
  448 |     });
  449 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 450}","  448 |     });
  449 |
> 450 |     it(""should parse 1 argument functions"", function() {
      |    ^ Unknown Test
  451 |         expect`\blue x`.toParse();
  452 |     });
  453 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 454}","  452 |     });
  453 |
> 454 |     it(""should parse 2 argument functions"", function() {
      |    ^ Unknown Test
  455 |         expect`\frac 1 2`.toParse();
  456 |     });
  457 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 458}","  456 |     });
  457 |
> 458 |     it(""should not parse 1 argument functions with no arguments"", function() {
      |    ^ Unknown Test
  459 |         expect`\blue`.not.toParse();
  460 |     });
  461 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 462}","  460 |     });
  461 |
> 462 |     it(""should not parse 2 argument functions with 0 or 1 arguments"", function() {
      |    ^ Unknown Test
  463 |         expect`\frac`.not.toParse();
  464 |
  465 |         expect`\frac 1`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 468}","  466 |     });
  467 |
> 468 |     it(""should not parse a function with text right after it"", function() {
      |    ^ Unknown Test
  469 |         expect`\redx`.not.toParse();
  470 |     });
  471 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 472}","  470 |     });
  471 |
> 472 |     it(""should parse a function with a number right after it"", function() {
      |    ^ Unknown Test
  473 |         expect`\frac12`.toParse();
  474 |     });
  475 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 476}","  474 |     });
  475 |
> 476 |     it(""should parse some functions with text right after it"", function() {
      |    ^ Unknown Test
  477 |         expect`\;x`.toParse();
  478 |     });
  479 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 640}","  638 |     });
  639 |
> 640 |     it(""should handle \\textstyle correctly"", function() {
      |    ^ Unknown Test
  641 |         expect`\textstyle 1 \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  642 |         expect`{\textstyle 1} \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  643 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 666}","  664 |
  665 | describe(""A genfrac builder"", function() {
> 666 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  667 |         expect`\frac{x}{y}`.toBuild();
  668 |         expect`\dfrac{x}{y}`.toBuild();
  669 |         expect`\tfrac{x}{y}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 679}","  677 |
  678 | describe(""A infix builder"", function() {
> 679 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  680 |         expect`a \over b`.toBuild();
  681 |         expect`a \atop b`.toBuild();
  682 |         expect`a \choose b`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 775}","  773 |     });
  774 |
> 775 |     it(""should parse math within text group"", function() {
      |    ^ Unknown Test
  776 |         expect`\text{graph: $y = mx + b$}`.toParse(strictSettings);
  777 |         expect`\text{graph: \(y = mx + b\)}`.toParse(strictSettings);
  778 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 780}","  778 |     });
  779 |
> 780 |     it(""should parse math within text within math within text"", function() {
      |    ^ Unknown Test
  781 |         expect`\text{hello $x + \text{world $y$} + z$}`.toParse(strictSettings);
  782 |         expect`\text{hello \(x + \text{world $y$} + z\)}`.toParse(strictSettings);
  783 |         expect`\text{hello $x + \text{world \(y\)} + z$}`.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 787}","  785 |     });
  786 |
> 787 |     it(""should forbid \\( within math mode"", function() {
      |    ^ Unknown Test
  788 |         expect`\(`.not.toParse();
  789 |         expect`\text{$\(x\)$}`.not.toParse();
  790 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 792}","  790 |     });
  791 |
> 792 |     it(""should forbid $ within math mode"", function() {
      |    ^ Unknown Test
  793 |         expect`$x$`.not.toParse();
  794 |         expect`\text{\($x$\)}`.not.toParse();
  795 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 797}","  795 |     });
  796 |
> 797 |     it(""should detect unbalanced \\)"", function() {
      |    ^ Unknown Test
  798 |         expect`\)`.not.toParse();
  799 |         expect`\text{\)}`.not.toParse();
  800 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 802}","  800 |     });
  801 |
> 802 |     it(""should detect unbalanced $"", function() {
      |    ^ Unknown Test
  803 |         expect`$`.not.toParse();
  804 |         expect`\text{$}`.not.toParse();
  805 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 807}","  805 |     });
  806 |
> 807 |     it(""should not mix $ and \\(..\\)"", function() {
      |    ^ Unknown Test
  808 |         expect`\text{$x\)}`.not.toParse();
  809 |         expect`\text{\(x$}`.not.toParse();
  810 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 812}","  810 |     });
  811 |
> 812 |     it(""should parse spacing functions"", function() {
      |    ^ Unknown Test
  813 |         expect`a b\, \; \! \: \> ~ \thinspace \medspace \quad \ `.toBuild();
  814 |         expect`\enspace \thickspace \qquad \space \nobreakspace`.toBuild();
  815 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 817}","  815 |     });
  816 |
> 817 |     it(""should omit spaces after commands"", function() {
      |    ^ Unknown Test
  818 |         expect`\text{\textellipsis !}`.toParseLike`\text{\textellipsis!}`;
  819 |     });
  820 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 821}","  819 |     });
  820 |
> 821 |     it(""should handle ⋮ and \\vdots"", function() {
      |    ^ Unknown Test
  822 |         expect`\text{a \vdots b ⋮ d}`.toParse();
  823 |     });
  824 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 827}","  825 |
  826 | describe(""A texvc builder"", function() {
> 827 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  828 |         expect`\lang\N\darr\R\dArr\Z\Darr\alef\rang`.toBuild();
  829 |         expect`\alefsym\uarr\Alpha\uArr\Beta\Uarr\Chi`.toBuild();
  830 |         expect`\clubs\diamonds\hearts\spades\cnums\Complex`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1001}","   999 |
  1000 | describe(""An lap parser"", function() {
> 1001 |     it(""should not fail on a text argument"", function() {
       |    ^ Unknown Test
  1002 |         expect`\rlap{\,/}{=}`.toParse();
  1003 |         expect`\mathrlap{\,/}{=}`.toParse();
  1004 |         expect`{=}\llap{/\,}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1010}","  1008 |     });
  1009 |
> 1010 |     it(""should not fail if math version is used"", function() {
       |    ^ Unknown Test
  1011 |         expect`\mathrlap{\frac{a}{b}}{=}`.toParse();
  1012 |         expect`{=}\mathllap{\frac{a}{b}}`.toParse();
  1013 |         expect`\sum_{\mathclap{\frac{a}{b}}}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1016}","  1014 |     });
  1015 |
> 1016 |     it(""should fail on math if AMS version is used"", function() {
       |    ^ Unknown Test
  1017 |         expect`\rlap{\frac{a}{b}}{=}`.not.toParse();
  1018 |         expect`{=}\llap{\frac{a}{b}}`.not.toParse();
  1019 |         expect`\sum_{\clap{\frac{a}{b}}}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1272}","  1270 | describe(""A begin/end parser"", function() {
  1271 |
> 1272 |     it(""should parse a simple environment"", function() {
       |    ^ Unknown Test
  1273 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1274 |     });
  1275 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1276}","  1274 |     });
  1275 |
> 1276 |     it(""should parse an environment with argument"", function() {
       |    ^ Unknown Test
  1277 |         expect`\begin{array}{cc}a&b\\c&d\end{array}`.toParse();
  1278 |     });
  1279 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1280}","  1278 |     });
  1279 |
> 1280 |     it(""should parse and build an empty environment"", function() {
       |    ^ Unknown Test
  1281 |         expect`\begin{aligned}\end{aligned}`.toBuild();
  1282 |         expect`\begin{matrix}\end{matrix}`.toBuild();
  1283 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1285}","  1283 |     });
  1284 |
> 1285 |     it(""should parse an environment with hlines"", function() {
       |    ^ Unknown Test
  1286 |         expect`\begin{matrix}\hline a&b\\ \hline c&d\end{matrix}`.toParse();
  1287 |         expect`\begin{matrix}\hline a&b\cr \hline c&d\end{matrix}`.toParse();
  1288 |         expect`\begin{matrix}\hdashline a&b\\ \hdashline c&d\end{matrix}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1291}","  1289 |     });
  1290 |
> 1291 |     it(""should forbid hlines outside array environment"", () => {
       |    ^ Unknown Test
  1292 |         expect`\hline`.not.toParse();
  1293 |     });
  1294 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1295}","  1293 |     });
  1294 |
> 1295 |     it(""should error when name is mismatched"", function() {
       |    ^ Unknown Test
  1296 |         expect`\begin{matrix}a&b\\c&d\end{pmatrix}`.not.toParse();
  1297 |     });
  1298 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1299}","  1297 |     });
  1298 |
> 1299 |     it(""should error when commands are mismatched"", function() {
       |    ^ Unknown Test
  1300 |         expect`\begin{matrix}a&b\\c&d\right{pmatrix}`.not.toParse();
  1301 |     });
  1302 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1303}","  1301 |     });
  1302 |
> 1303 |     it(""should error when end is missing"", function() {
       |    ^ Unknown Test
  1304 |         expect`\begin{matrix}a&b\\c&d`.not.toParse();
  1305 |     });
  1306 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1307}","  1305 |     });
  1306 |
> 1307 |     it(""should error when braces are mismatched"", function() {
       |    ^ Unknown Test
  1308 |         expect`{\begin{matrix}a&b\\c&d}\end{matrix}`.not.toParse();
  1309 |     });
  1310 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1311}","  1309 |     });
  1310 |
> 1311 |     it(""should cooperate with infix notation"", function() {
       |    ^ Unknown Test
  1312 |         expect`\begin{matrix}0&1\over2&3\\4&5&6\end{matrix}`.toParse();
  1313 |     });
  1314 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1321}","  1319 |     });
  1320 |
> 1321 |     it(""should allow \\cr and \\\\ as a line terminator"", function() {
       |    ^ Unknown Test
  1322 |         expect`\begin{matrix}a&b\cr c&d\end{matrix}`.toParse();
  1323 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1324 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1326}","  1324 |     });
  1325 |
> 1326 |     it(""should not allow \\cr to scan for an optional size argument"", function() {
       |    ^ Unknown Test
  1327 |         expect`\begin{matrix}a&b\cr[c]&d\end{matrix}`.toParse();
  1328 |     });
  1329 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1330}","  1328 |     });
  1329 |
> 1330 |     it(""should not treat [ after space as optional argument to \\\\"", function() {
       |    ^ Unknown Test
  1331 |         expect`\begin{matrix}a&b\\ [c]&d\end{matrix}`.toParse();
  1332 |         expect`a\\ [b]`.toParse();
  1333 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1345}","  1343 |     });
  1344 |
> 1345 |     it(""should allow an optional argument in {matrix*} and company."", function() {
       |    ^ Unknown Test
  1346 |         expect`\begin{matrix*}[r] a & -1 \\ -1 & d \end{matrix*}`.toBuild();
  1347 |         expect`\begin{pmatrix*}[r] a & -1 \\ -1 & d \end{pmatrix*}`.toBuild();
  1348 |         expect`\begin{bmatrix*}[r] a & -1 \\ -1 & d \end{bmatrix*}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1382}","  1380 |     });
  1381 |
> 1382 |     it(""should build sized square roots"", function() {
       |    ^ Unknown Test
  1383 |         expect`\Large\sqrt[3]{x}`.toBuild();
  1384 |     });
  1385 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1386}","  1384 |     });
  1385 |
> 1386 |     it(""should expand argument if optional argument doesn't exist"", function() {
       |    ^ Unknown Test
  1387 |         expect`\sqrt\foo`.toParseLike(""\\sqrt123"",
  1388 |             new Settings({macros: {""\\foo"": ""123""}}));
  1389 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1391}","  1389 |     });
  1390 |
> 1391 |     it(""should not expand argument if optional argument exists"", function() {
       |    ^ Unknown Test
  1392 |         expect`\sqrt[2]\foo`.toParseLike(""\\sqrt[2]{123}"",
  1393 |             new Settings({macros: {""\\foo"": ""123""}}));
  1394 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1398}","  1396 |
  1397 | describe(""A TeX-compliant parser"", function() {
> 1398 |     it(""should work"", function() {
       |    ^ Unknown Test
  1399 |         expect`\frac 2 3`.toParse();
  1400 |     });
  1401 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1417}","  1415 |     });
  1416 |
> 1417 |     it(""should fail when there are missing sup/subscripts"", function() {
       |    ^ Unknown Test
  1418 |         expect`x^`.not.toParse();
  1419 |         expect`x_`.not.toParse();
  1420 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1488}","  1486 |     });
  1487 |
> 1488 |     it(""should parse multiple primes correctly"", function() {
       |    ^ Unknown Test
  1489 |         expect`x''''`.toParse();
  1490 |         expect`x_2''`.toParse();
  1491 |         expect`x''_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1494}","  1492 |     });
  1493 |
> 1494 |     it(""should fail when sup/subscripts are interspersed with arguments"", function() {
       |    ^ Unknown Test
  1495 |         expect`\sqrt^23`.not.toParse();
  1496 |         expect`\frac^234`.not.toParse();
  1497 |         expect`\frac2^34`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1500}","  1498 |     });
  1499 |
> 1500 |     it(""should succeed when sup/subscripts come after whole functions"", function() {
       |    ^ Unknown Test
  1501 |         expect`\sqrt2^3`.toParse();
  1502 |         expect`\frac23^4`.toParse();
  1503 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1505}","  1503 |     });
  1504 |
> 1505 |     it(""should succeed with a sqrt around a text/frac"", function() {
       |    ^ Unknown Test
  1506 |         expect`\sqrt \frac x y`.toParse();
  1507 |         expect`\sqrt \text x`.toParse();
  1508 |         expect`x^\frac x y`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1542}","  1540 |
  1541 | describe(""An op symbol builder"", function() {
> 1542 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1543 |         expect`\int_i^n`.toBuild();
  1544 |         expect`\iint_i^n`.toBuild();
  1545 |         expect`\iiint_i^n`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1559}","  1557 |
  1558 | describe(""A style change parser"", function() {
> 1559 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1560 |         expect`\displaystyle x`.toParse();
  1561 |         expect`\textstyle x`.toParse();
  1562 |         expect`\scriptstyle x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1590}","  1588 |
  1589 | describe(""A font parser"", function() {
> 1590 |     it(""should parse \\mathrm, \\mathbb, \\mathit, and \\mathnormal"", function() {
       |    ^ Unknown Test
  1591 |         expect`\mathrm x`.toParse();
  1592 |         expect`\mathbb x`.toParse();
  1593 |         expect`\mathit x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1601}","  1599 |     });
  1600 |
> 1601 |     it(""should parse \\mathcal and \\mathfrak"", function() {
       |    ^ Unknown Test
  1602 |         expect`\mathcal{ABC123}`.toParse();
  1603 |         expect`\mathfrak{abcABC123}`.toParse();
  1604 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1655}","  1653 |     });
  1654 |
> 1655 |     it(""should not parse a series of font commands"", function() {
       |    ^ Unknown Test
  1656 |         expect`\mathbb \mathrm R`.not.toParse();
  1657 |     });
  1658 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1670}","  1668 |     });
  1669 |
> 1670 |     it(""should be allowed in the argument"", function() {
       |    ^ Unknown Test
  1671 |         expect`e^\mathbf{x}`.toParse();
  1672 |     });
  1673 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1679}","  1677 |     });
  1678 |
> 1679 |     it(""old-style fonts work like new-style fonts"", () => {
       |    ^ Unknown Test
  1680 |         expect`\rm xyz`.toParseLike`\mathrm{xyz}`;
  1681 |         expect`\sf xyz`.toParseLike`\mathsf{xyz}`;
  1682 |         expect`\tt xyz`.toParseLike`\mathtt{xyz}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1690}","  1688 |
  1689 | describe(""A \\pmb builder"", function() {
> 1690 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1691 |         expect`\pmb{\mu}`.toBuild();
  1692 |         expect`\pmb{=}`.toBuild();
  1693 |         expect`\pmb{+}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1701}","  1699 |
  1700 | describe(""A raise parser"", function() {
> 1701 |     it(""should parse and build text in \\raisebox"", function() {
       |    ^ Unknown Test
  1702 |         expect`\raisebox{5pt}{text}`.toBuild(strictSettings);
  1703 |         expect`\raisebox{-5pt}{text}`.toBuild(strictSettings);
  1704 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1706}","  1704 |     });
  1705 |
> 1706 |     it(""should parse and build math in non-strict \\vcenter"", function() {
       |    ^ Unknown Test
  1707 |         expect`\vcenter{\frac a b}`.toBuild(nonstrictSettings);
  1708 |     });
  1709 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1710}","  1708 |     });
  1709 |
> 1710 |     it(""should fail to parse math in \\raisebox"", function() {
       |    ^ Unknown Test
  1711 |         expect`\raisebox{5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1712 |         expect`\raisebox{-5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1713 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1715}","  1713 |     });
  1714 |
> 1715 |     it(""should fail to parse math in an \\hbox"", function() {
       |    ^ Unknown Test
  1716 |         expect`\hbox{\frac a b}`.not.toParse(nonstrictSettings);
  1717 |     });
  1718 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1719}","  1717 |     });
  1718 |
> 1719 |     it(""should fail to build, given an unbraced length"", function() {
       |    ^ Unknown Test
  1720 |         expect`\raisebox5pt{text}`.not.toBuild(strictSettings);
  1721 |         expect`\raisebox-5pt{text}`.not.toBuild(strictSettings);
  1722 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1724}","  1722 |     });
  1723 |
> 1724 |     it(""should build math in an hbox when math mode is set"", function() {
       |    ^ Unknown Test
  1725 |         expect`a + \vcenter{\hbox{$\frac{\frac a b}c$}}`
  1726 |             .toBuild(strictSettings);
  1727 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1773}","  1771 |     });
  1772 |
> 1773 |     it(""should not parse a comment without newline in strict mode"", () => {
       |    ^ Unknown Test
  1774 |         expect`x%y`.not.toParse(strictSettings);
  1775 |         expect`x%y`.toParse(nonstrictSettings);
  1776 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2258}","  2256 |
  2257 | describe(""An accent parser"", function() {
> 2258 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2259 |         expect`\vec{x}`.toParse();
  2260 |         expect`\vec{x^2}`.toParse();
  2261 |         expect`\vec{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2278}","  2276 |     });
  2277 |
> 2278 |     it(""should parse stretchy, shifty accents"", function() {
       |    ^ Unknown Test
  2279 |         expect`\widehat{x}`.toParse();
  2280 |         expect`\widecheck{x}`.toParse();
  2281 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2283}","  2281 |     });
  2282 |
> 2283 |     it(""should parse stretchy, non-shifty accents"", function() {
       |    ^ Unknown Test
  2284 |         expect`\overrightarrow{x}`.toParse();
  2285 |     });
  2286 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2289}","  2287 |
  2288 | describe(""An accent builder"", function() {
> 2289 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2290 |         expect`\vec{x}`.toBuild();
  2291 |         expect`\vec{x}^2`.toBuild();
  2292 |         expect`\vec{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2306}","  2304 |
  2305 | describe(""A stretchy and shifty accent builder"", function() {
> 2306 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2307 |         expect`\widehat{AB}`.toBuild();
  2308 |         expect`\widecheck{AB}`.toBuild();
  2309 |         expect`\widehat{AB}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2324}","  2322 |
  2323 | describe(""A stretchy and non-shifty accent builder"", function() {
> 2324 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2325 |         expect`\overrightarrow{AB}`.toBuild();
  2326 |         expect`\overrightarrow{AB}^2`.toBuild();
  2327 |         expect`\overrightarrow{AB}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2350}","  2348 |
  2349 | describe(""An under-accent parser"", function() {
> 2350 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2351 |         expect`\underrightarrow{x}`.toParse();
  2352 |         expect`\underrightarrow{x^2}`.toParse();
  2353 |         expect`\underrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2371}","  2369 |
  2370 | describe(""An under-accent builder"", function() {
> 2371 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2372 |         expect`\underrightarrow{x}`.toBuild();
  2373 |         expect`\underrightarrow{x}^2`.toBuild();
  2374 |         expect`\underrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2389}","  2387 |
  2388 | describe(""An extensible arrow parser"", function() {
> 2389 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2390 |         expect`\xrightarrow{x}`.toParse();
  2391 |         expect`\xrightarrow{x^2}`.toParse();
  2392 |         expect`\xrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2411}","  2409 |
  2410 | describe(""An extensible arrow builder"", function() {
> 2411 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2412 |         expect`\xrightarrow{x}`.toBuild();
  2413 |         expect`\xrightarrow{x}^2`.toBuild();
  2414 |         expect`\xrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2430}","  2428 |
  2429 | describe(""A horizontal brace parser"", function() {
> 2430 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2431 |         expect`\overbrace{x}`.toParse();
  2432 |         expect`\overbrace{x^2}`.toParse();
  2433 |         expect`\overbrace{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2453}","  2451 |
  2452 | describe(""A horizontal brace builder"", function() {
> 2453 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2454 |         expect`\overbrace{x}`.toBuild();
  2455 |         expect`\overbrace{x}^2`.toBuild();
  2456 |         expect`\underbrace{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2471}","  2469 |
  2470 | describe(""A boxed parser"", function() {
> 2471 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2472 |         expect`\boxed{x}`.toParse();
  2473 |         expect`\boxed{x^2}`.toParse();
  2474 |         expect`\boxed{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2486}","  2484 |
  2485 | describe(""A boxed builder"", function() {
> 2486 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2487 |         expect`\boxed{x}`.toBuild();
  2488 |         expect`\boxed{x}^2`.toBuild();
  2489 |         expect`\boxed{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2503}","  2501 |
  2502 | describe(""An fbox parser, unlike a boxed parser,"", function() {
> 2503 |     it(""should fail when given math"", function() {
       |    ^ Unknown Test
  2504 |         expect`\fbox{\frac a b}`.not.toParse();
  2505 |     });
  2506 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2509}","  2507 |
  2508 | describe(""A colorbox parser"", function() {
> 2509 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2510 |         expect`\colorbox{red}{a b}`.toParse();
  2511 |         expect`\colorbox{red}{x}^2`.toParse();
  2512 |         expect`\colorbox{red} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2515}","  2513 |     });
  2514 |
> 2515 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2516 |         expect`\colorbox{red}{\alpha}`.not.toParse();
  2517 |         expect`\colorbox{red}{\frac{a}{b}}`.not.toParse();
  2518 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2520}","  2518 |     });
  2519 |
> 2520 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2521 |         expect`\colorbox{red}{a b}`.toParse();
  2522 |         expect`\colorbox{#197}{a b}`.toParse();
  2523 |         expect`\colorbox{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2533}","  2531 |
  2532 | describe(""A colorbox builder"", function() {
> 2533 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2534 |         expect`\colorbox{red}{a b}`.toBuild();
  2535 |         expect`\colorbox{red}{a b}^2`.toBuild();
  2536 |         expect`\colorbox{red} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2545}","  2543 |
  2544 | describe(""An fcolorbox parser"", function() {
> 2545 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2546 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2547 |         expect`\fcolorbox{blue}{yellow}{x}^2`.toParse();
  2548 |         expect`\fcolorbox{blue}{yellow} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2551}","  2549 |     });
  2550 |
> 2551 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2552 |         expect`\fcolorbox{blue}{yellow}{\alpha}`.not.toParse();
  2553 |         expect`\fcolorbox{blue}{yellow}{\frac{a}{b}}`.not.toParse();
  2554 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2556}","  2554 |     });
  2555 |
> 2556 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2557 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2558 |         expect`\fcolorbox{blue}{#197}{a b}`.toParse();
  2559 |         expect`\fcolorbox{blue}{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2569}","  2567 |
  2568 | describe(""A fcolorbox builder"", function() {
> 2569 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2570 |         expect`\fcolorbox{blue}{yellow}{a b}`.toBuild();
  2571 |         expect`\fcolorbox{blue}{yellow}{a b}^2`.toBuild();
  2572 |         expect`\fcolorbox{blue}{yellow} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2581}","  2579 |
  2580 | describe(""A strike-through parser"", function() {
> 2581 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2582 |         expect`\cancel{x}`.toParse();
  2583 |         expect`\cancel{x^2}`.toParse();
  2584 |         expect`\cancel{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2602}","  2600 |
  2601 | describe(""A strike-through builder"", function() {
> 2602 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2603 |         expect`\cancel{x}`.toBuild();
  2604 |         expect`\cancel{x}^2`.toBuild();
  2605 |         expect`\cancel{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2623}","  2621 |
  2622 | describe(""A actuarial angle parser"", function() {
> 2623 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2624 |         expect`a_{\angl{n}}`.toParse();
  2625 |     });
  2626 |     it(""should fail in text mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2626}","  2624 |         expect`a_{\angl{n}}`.toParse();
  2625 |     });
> 2626 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2627 |         expect`\text{a_{\angl{n}}}`.not.toParse();
  2628 |     });
  2629 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2632}","  2630 |
  2631 | describe(""A actuarial angle builder"", function() {
> 2632 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2633 |         expect`a_{\angl{n}}`.toBuild();
  2634 |         expect`a_{\angl{n}i}`.toBuild();
  2635 |         expect`a_{\angl n}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2641}","  2639 |
  2640 | describe(""\\phase"", function() {
> 2641 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2642 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2643 |     });
  2644 |     it(""should not fail in math mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2644}","  2642 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2643 |     });
> 2644 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2645 |         expect`\phase{-78.2^\circ}`.toBuild();
  2646 |     });
  2647 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2650}","  2648 |
  2649 | describe(""A phantom parser"", function() {
> 2650 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2651 |         expect`\phantom{x}`.toParse();
  2652 |         expect`\phantom{x^2}`.toParse();
  2653 |         expect`\phantom{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2670}","  2668 |
  2669 | describe(""A phantom builder"", function() {
> 2670 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2671 |         expect`\phantom{x}`.toBuild();
  2672 |         expect`\phantom{x^2}`.toBuild();
  2673 |         expect`\phantom{x}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2699}","  2697 |
  2698 | describe(""A smash parser"", function() {
> 2699 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2700 |         expect`\smash{x}`.toParse();
  2701 |         expect`\smash{x^2}`.toParse();
  2702 |         expect`\smash{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2724}","  2722 |
  2723 | describe(""A smash builder"", function() {
> 2724 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2725 |         expect`\smash{x}`.toBuild(nonstrictSettings);
  2726 |         expect`\smash{x^2}`.toBuild(nonstrictSettings);
  2727 |         expect`\smash{x}^2`.toBuild(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2748}","  2746 |
  2747 | describe(""An optional argument parser"", function() {
> 2748 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2749 |         // Note this doesn't actually make an optional argument, but still
  2750 |         // should work
  2751 |         expect`\frac[1]{2}{3}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2756}","  2754 |     });
  2755 |
> 2756 |     it(""should work with sqrts with optional arguments"", function() {
       |    ^ Unknown Test
  2757 |         expect`\sqrt[3]{2}`.toParse();
  2758 |     });
  2759 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2760}","  2758 |     });
  2759 |
> 2760 |     it(""should work when the optional argument is missing"", function() {
       |    ^ Unknown Test
  2761 |         expect`\sqrt{2}`.toParse();
  2762 |         expect`\rule{1em}{2em}`.toParse();
  2763 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2765}","  2763 |     });
  2764 |
> 2765 |     it(""should fail when the optional argument is malformed"", function() {
       |    ^ Unknown Test
  2766 |         expect`\rule[1]{2em}{3em}`.not.toParse();
  2767 |     });
  2768 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2769}","  2767 |     });
  2768 |
> 2769 |     it(""should not work if the optional argument isn't closed"", function() {
       |    ^ Unknown Test
  2770 |         expect`\sqrt[`.not.toParse();
  2771 |     });
  2772 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2819}","  2817 | describe(""A substack function"", function() {
  2818 |
> 2819 |     it(""should build"", function() {
       |    ^ Unknown Test
  2820 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2821 |     });
  2822 |     it(""should accommodate spaces in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2822}","  2820 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2821 |     });
> 2822 |     it(""should accommodate spaces in the argument"", function() {
       |    ^ Unknown Test
  2823 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2824 |     });
  2825 |     it(""should accommodate macros in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2825}","  2823 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2824 |     });
> 2825 |     it(""should accommodate macros in the argument"", function() {
       |    ^ Unknown Test
  2826 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2827 |     });
  2828 |     it(""should accommodate an empty argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2828}","  2826 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2827 |     });
> 2828 |     it(""should accommodate an empty argument"", function() {
       |    ^ Unknown Test
  2829 |         expect`\sum_{\substack{}}  P(i,j)`.toBuild();
  2830 |     });
  2831 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2836}","  2834 | describe(""A smallmatrix environment"", function() {
  2835 |
> 2836 |     it(""should build"", function() {
       |    ^ Unknown Test
  2837 |         expect`\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}`.toBuild();
  2838 |     });
  2839 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2844}","  2842 | describe(""A cases environment"", function() {
  2843 |
> 2844 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2845 |         expect`f(a,b)=\begin{cases}a+1&\text{if }b\text{ is odd}\\a&\text{if }b=0\\a-1&\text{otherwise}\end{cases}`
  2846 |             .toParse();
  2847 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2853}","  2851 | describe(""An rcases environment"", function() {
  2852 |
> 2853 |     it(""should build"", function() {
       |    ^ Unknown Test
  2854 |         expect`\begin{rcases} a &\text{if } b \\ c &\text{if } d \end{rcases}⇒…`
  2855 |             .toBuild();
  2856 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2862}","  2860 | describe(""An aligned environment"", function() {
  2861 |
> 2862 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2863 |         expect`\begin{aligned}a&=b&c&=d\\e&=f\end{aligned}`.toParse();
  2864 |     });
  2865 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2866}","  2864 |     });
  2865 |
> 2866 |     it(""should allow cells in brackets"", function() {
       |    ^ Unknown Test
  2867 |         expect`\begin{aligned}[a]&[b]\\ [c]&[d]\end{aligned}`.toParse();
  2868 |     });
  2869 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2870}","  2868 |     });
  2869 |
> 2870 |     it(""should forbid cells in brackets without space"", function() {
       |    ^ Unknown Test
  2871 |         expect`\begin{aligned}[a]&[b]\\[c]&[d]\end{aligned}`.not.toParse();
  2872 |     });
  2873 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2881}","  2879 |
  2880 | describe(""AMS environments"", function() {
> 2881 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  2882 |         expect`\begin{gather}a+b\\c+d\end{gather}`.not.toParse(nonstrictSettings);
  2883 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.not.toParse(nonstrictSettings);
  2884 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.not.toParse(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2894}","  2892 |
  2893 |     const displayMode = new Settings({displayMode: true});
> 2894 |     it(""should build if in display mode"", () => {
       |    ^ Unknown Test
  2895 |         expect`\begin{gather}a+b\\c+d\end{gather}`.toBuild(displayMode);
  2896 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.toBuild(displayMode);
  2897 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2907}","  2905 |     });
  2906 |
> 2907 |     it(""should build an empty environment"", () => {
       |    ^ Unknown Test
  2908 |         expect`\begin{gather}\end{gather}`.toBuild(displayMode);
  2909 |         expect`\begin{gather*}\end{gather*}`.toBuild(displayMode);
  2910 |         expect`\begin{align}\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2919}","  2917 |     });
  2918 |
> 2919 |     it(""{equation} should fail if argument contains two rows."", () => {
       |    ^ Unknown Test
  2920 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2921 |     });
  2922 |     it(""{equation} should fail if argument contains two columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2922}","  2920 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2921 |     });
> 2922 |     it(""{equation} should fail if argument contains two columns."", () => {
       |    ^ Unknown Test
  2923 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2924 |     });
  2925 |     it(""{split} should fail if argument contains three columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2925}","  2923 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2924 |     });
> 2925 |     it(""{split} should fail if argument contains three columns."", () => {
       |    ^ Unknown Test
  2926 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2927 |     });
  2928 |     it(""{array} should fail if body contains more columns than specification."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2928}","  2926 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2927 |     });
> 2928 |     it(""{array} should fail if body contains more columns than specification."", () => {
       |    ^ Unknown Test
  2929 |         expect`\begin{array}{2}a & b & c\\d & e  f\end{array}`.not.toBuild(displayMode);
  2930 |     });
  2931 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2957}","  2955 |
  2956 | describe(""operatorname support"", function() {
> 2957 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2958 |         expect`\operatorname{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2959 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2960 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}_y x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2968}","  2966 |
  2967 | describe(""href and url commands"", function() {
> 2968 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2969 |         expect`\href{http://example.com/}{\sin}`.toBuild(trustSettings);
  2970 |         expect`\url{http://example.com/}`.toBuild(trustSettings);
  2971 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2973}","  2971 |     });
  2972 |
> 2973 |     it(""should allow empty URLs"", function() {
       |    ^ Unknown Test
  2974 |         expect`\href{}{example here}`.toBuild(trustSettings);
  2975 |         expect`\url{}`.toBuild(trustSettings);
  2976 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2986}","  2984 |     });
  2985 |
> 2986 |     it(""should allow spaces single-character URLs"", () => {
       |    ^ Unknown Test
  2987 |         expect`\href %end`.toParseLike(""\\href{%}end"", trustSettings);
  2988 |         expect`\url %end`.toParseLike(""\\url{%}end"", trustSettings);
  2989 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3007}","  3005 |     });
  3006 |
> 3007 |     it(""should not allow unbalanced brace(s) in url"", function() {
       |    ^ Unknown Test
  3008 |         expect`\href{http://example.com/{a}{bar}`.not.toParse();
  3009 |         expect`\href{http://example.com/}a}{bar}`.not.toParse();
  3010 |         expect`\url{http://example.com/{a}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3098}","  3096 |
  3097 | describe(""A raw text parser"", function() {
> 3098 |     it(""should return null for a omitted optional string"", function() {
       |    ^ Unknown Test
  3099 |         expect`\includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}`.toParse();
  3100 |     });
  3101 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3113}","  3111 |     });
  3112 |
> 3113 |     it(""should still parse on unrecognized control sequences"", function() {
       |    ^ Unknown Test
  3114 |         expect`\error`.toParse(noThrowSettings);
  3115 |     });
  3116 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3118}","  3116 |
  3117 |     describe(""should allow unrecognized controls sequences anywhere, including"", function() {
> 3118 |         it(""in superscripts and subscripts"", function() {
       |        ^ Unknown Test
  3119 |             expect`2_\error`.toBuild(noThrowSettings);
  3120 |             expect`3^{\error}_\error`.toBuild(noThrowSettings);
  3121 |             expect`\int\nolimits^\error_\error`.toBuild(noThrowSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3124}","  3122 |         });
  3123 |
> 3124 |         it(""in fractions"", function() {
       |        ^ Unknown Test
  3125 |             expect`\frac{345}{\error}`.toBuild(noThrowSettings);
  3126 |             expect`\frac\error{\error}`.toBuild(noThrowSettings);
  3127 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3129}","  3127 |         });
  3128 |
> 3129 |         it(""in square roots"", function() {
       |        ^ Unknown Test
  3130 |             expect`\sqrt\error`.toBuild(noThrowSettings);
  3131 |             expect`\sqrt{234\error}`.toBuild(noThrowSettings);
  3132 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3134}","  3132 |         });
  3133 |
> 3134 |         it(""in text boxes"", function() {
       |        ^ Unknown Test
  3135 |             expect`\text{\error}`.toBuild(noThrowSettings);
  3136 |         });
  3137 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3204}","  3202 |
  3203 | describe(""The symbol table integrity"", function() {
> 3204 |     it(""should treat certain symbols as synonyms"", function() {
       |    ^ Unknown Test
  3205 |         expect`<`.toBuildLike`\lt`;
  3206 |         expect`>`.toBuildLike`\gt`;
  3207 |         expect`\left<\frac{1}{x}\right>`.toBuildLike`\left\lt\frac{1}{x}\right\gt`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3222}","  3220 |
  3221 | describe(""A macro expander"", function() {
> 3222 |     it(""should produce individual tokens"", function() {
       |    ^ Unknown Test
  3223 |         expect`e^\foo`.toParseLike(""e^1 23"",
  3224 |             new Settings({macros: {""\\foo"": ""123""}}));
  3225 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3227}","  3225 |     });
  3226 |
> 3227 |     it(""should preserve leading spaces inside macro definition"", function() {
       |    ^ Unknown Test
  3228 |         expect`\text{\foo}`.toParseLike(r`\text{ x}`,
  3229 |             new Settings({macros: {""\\foo"": "" x""}}));
  3230 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3232}","  3230 |     });
  3231 |
> 3232 |     it(""should preserve leading spaces inside macro argument"", function() {
       |    ^ Unknown Test
  3233 |         expect`\text{\foo{ x}}`.toParseLike(r`\text{ x}`,
  3234 |             new Settings({macros: {""\\foo"": ""#1""}}));
  3235 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3237}","  3235 |     });
  3236 |
> 3237 |     it(""should ignore expanded spaces in math mode"", function() {
       |    ^ Unknown Test
  3238 |         expect`\foo`.toParseLike(""x"", new Settings({macros: {""\\foo"": "" x""}}));
  3239 |     });
  3240 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3241}","  3239 |     });
  3240 |
> 3241 |     it(""should consume spaces after control-word macro"", function() {
       |    ^ Unknown Test
  3242 |         expect`\text{\foo }`.toParseLike(r`\text{x}`,
  3243 |             new Settings({macros: {""\\foo"": ""x""}}));
  3244 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3246}","  3244 |     });
  3245 |
> 3246 |     it(""should consume spaces after macro with \\relax"", function() {
       |    ^ Unknown Test
  3247 |         expect`\text{\foo }`.toParseLike(r`\text{}`,
  3248 |             new Settings({macros: {""\\foo"": ""\\relax""}}));
  3249 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3251}","  3249 |     });
  3250 |
> 3251 |     it(""should not consume spaces after control-word expansion"", function() {
       |    ^ Unknown Test
  3252 |         expect`\text{\\ }`.toParseLike(r`\text{ }`,
  3253 |             new Settings({macros: {""\\\\"": ""\\relax""}}));
  3254 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3256}","  3254 |     });
  3255 |
> 3256 |     it(""should consume spaces after \\relax"", function() {
       |    ^ Unknown Test
  3257 |         expect`\text{\relax }`.toParseLike`\text{}`;
  3258 |     });
  3259 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3260}","  3258 |     });
  3259 |
> 3260 |     it(""should consume spaces after control-word function"", function() {
       |    ^ Unknown Test
  3261 |         expect`\text{\KaTeX }`.toParseLike`\text{\KaTeX}`;
  3262 |     });
  3263 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3264}","  3262 |     });
  3263 |
> 3264 |     it(""should preserve spaces after control-symbol macro"", function() {
       |    ^ Unknown Test
  3265 |         expect`\text{\% y}`.toParseLike(r`\text{x y}`,
  3266 |             new Settings({macros: {""\\%"": ""x""}}));
  3267 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3269}","  3267 |     });
  3268 |
> 3269 |     it(""should preserve spaces after control-symbol function"", function() {
       |    ^ Unknown Test
  3270 |         expect`\text{\' }`.toParse();
  3271 |     });
  3272 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3273}","  3271 |     });
  3272 |
> 3273 |     it(""should consume spaces between arguments"", function() {
       |    ^ Unknown Test
  3274 |         expect`\text{\foo 1 2}`.toParseLike(r`\text{12end}`,
  3275 |             new Settings({macros: {""\\foo"": ""#1#2end""}}));
  3276 |         expect`\text{\foo {1} {2}}`.toParseLike(r`\text{12end}`,",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3280}","  3278 |     });
  3279 |
> 3280 |     it(""should allow for multiple expansion"", function() {
       |    ^ Unknown Test
  3281 |         expect`1\foo2`.toParseLike(""1aa2"", new Settings({macros: {
  3282 |             ""\\foo"": ""\\bar\\bar"",
  3283 |             ""\\bar"": ""a"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3287}","  3285 |     });
  3286 |
> 3287 |     it(""should allow for multiple expansion with argument"", function() {
       |    ^ Unknown Test
  3288 |         expect`1\foo2`.toParseLike(""12222"", new Settings({macros: {
  3289 |             ""\\foo"": ""\\bar{#1}\\bar{#1}"",
  3290 |             ""\\bar"": ""#1#1"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3294}","  3292 |     });
  3293 |
> 3294 |     it(""should allow for macro argument"", function() {
       |    ^ Unknown Test
  3295 |         expect`\foo\bar`.toParseLike(""(xyz)"", new Settings({macros: {
  3296 |             ""\\foo"": ""(#1)"",
  3297 |             ""\\bar"": ""xyz"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3301}","  3299 |     });
  3300 |
> 3301 |     it(""should allow properly nested group for macro argument"", function() {
       |    ^ Unknown Test
  3302 |         expect`\foo{e^{x_{12}+3}}`.toParseLike(""(e^{x_{12}+3})"",
  3303 |             new Settings({macros: {""\\foo"": ""(#1)""}}));
  3304 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3306}","  3304 |     });
  3305 |
> 3306 |     it(""should delay expansion if preceded by \\expandafter"", function() {
       |    ^ Unknown Test
  3307 |         expect`\expandafter\foo\bar`.toParseLike(""x+y"", new Settings({macros: {
  3308 |             ""\\foo"": ""#1+#2"",
  3309 |             ""\\bar"": ""xy"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3316}","  3314 |     });
  3315 |
> 3316 |     it(""should not expand if preceded by \\noexpand"", function() {
       |    ^ Unknown Test
  3317 |         // \foo is not expanded and interpreted as if its meaning were \relax
  3318 |         expect`\noexpand\foo y`.toParseLike(""y"",
  3319 |             new Settings({macros: {""\\foo"": ""x""}}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3329}","  3327 |     });
  3328 |
> 3329 |     it(""should allow for space macro argument (text version)"", function() {
       |    ^ Unknown Test
  3330 |         expect`\text{\foo\bar}`.toParseLike(r`\text{( )}`, new Settings({macros: {
  3331 |             ""\\foo"": ""(#1)"",
  3332 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3336}","  3334 |     });
  3335 |
> 3336 |     it(""should allow for space macro argument (math version)"", function() {
       |    ^ Unknown Test
  3337 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3338 |             ""\\foo"": ""(#1)"",
  3339 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3343}","  3341 |     });
  3342 |
> 3343 |     it(""should allow for space second argument (text version)"", function() {
       |    ^ Unknown Test
  3344 |         expect`\text{\foo\bar\bar}`.toParseLike(r`\text{( , )}`, new Settings({macros: {
  3345 |             ""\\foo"": ""(#1,#2)"",
  3346 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3350}","  3348 |     });
  3349 |
> 3350 |     it(""should treat \\relax as empty argument"", function() {
       |    ^ Unknown Test
  3351 |         expect`\text{\foo\relax x}`.toParseLike(r`\text{(,x)}`, new Settings({macros: {
  3352 |             ""\\foo"": ""(#1,#2)"",
  3353 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3356}","  3354 |     });
  3355 |
> 3356 |     it(""should allow for space second argument (math version)"", function() {
       |    ^ Unknown Test
  3357 |         expect`\foo\bar\bar`.toParseLike(""(,)"", new Settings({macros: {
  3358 |             ""\\foo"": ""(#1,#2)"",
  3359 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3363}","  3361 |     });
  3362 |
> 3363 |     it(""should allow for empty macro argument"", function() {
       |    ^ Unknown Test
  3364 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3365 |             ""\\foo"": ""(#1)"",
  3366 |             ""\\bar"": """",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3370}","  3368 |     });
  3369 |
> 3370 |     it(""should allow for space function arguments"", function() {
       |    ^ Unknown Test
  3371 |         expect`\frac\bar\bar`.toParseLike(r`\frac{}{}`, new Settings({macros: {
  3372 |             ""\\bar"": "" "",
  3373 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3376}","  3374 |     });
  3375 |
> 3376 |     it(""should build \\overset and \\underset"", function() {
       |    ^ Unknown Test
  3377 |         expect`\overset{f}{\rightarrow} Y`.toBuild();
  3378 |         expect`\underset{f}{\rightarrow} Y`.toBuild();
  3379 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3381}","  3379 |     });
  3380 |
> 3381 |     it(""should build \\iff, \\implies, \\impliedby"", function() {
       |    ^ Unknown Test
  3382 |         expect`X \iff Y`.toBuild();
  3383 |         expect`X \implies Y`.toBuild();
  3384 |         expect`X \impliedby Y`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3387}","  3385 |     });
  3386 |
> 3387 |     it(""should allow aliasing characters"", function() {
       |    ^ Unknown Test
  3388 |         expect`x’=c`.toParseLike(""x'=c"", new Settings({macros: {
  3389 |             ""’"": ""'"",
  3390 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3393}","  3391 |     });
  3392 |
> 3393 |     it(""\\@firstoftwo should consume both, and avoid errors"", function() {
       |    ^ Unknown Test
  3394 |         expect`\@firstoftwo{yes}{no}`.toParseLike`yes`;
  3395 |         expect`\@firstoftwo{yes}{1'_2^3}`.toParseLike`yes`;
  3396 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3398}","  3396 |     });
  3397 |
> 3398 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3399 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3400 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3401 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3403}","  3401 |     });
  3402 |
> 3403 |     it(""\\@ifnextchar should not consume nonspaces"", function() {
       |    ^ Unknown Test
  3404 |         expect`\@ifnextchar!{yes}{no}!!`.toParseLike`yes!!`;
  3405 |         expect`\@ifnextchar!{yes}{no}?!`.toParseLike`no?!`;
  3406 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3408}","  3406 |     });
  3407 |
> 3408 |     it(""\\@ifnextchar should consume spaces"", function() {
       |    ^ Unknown Test
  3409 |         expect`\def\x#1{\@ifnextchar x{yes}{no}}\x{}x\x{} x`
  3410 |             .toParseLike`yesxyesx`;
  3411 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3413}","  3411 |     });
  3412 |
> 3413 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3414 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3415 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3416 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3418}","  3416 |     });
  3417 |
> 3418 |     it(""\\TextOrMath should work immediately"", function() {
       |    ^ Unknown Test
  3419 |         expect`\TextOrMath{text}{math}`.toParseLike`math`;
  3420 |     });
  3421 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3422}","  3420 |     });
  3421 |
> 3422 |     it(""\\TextOrMath should work after other math"", function() {
       |    ^ Unknown Test
  3423 |         expect`x+\TextOrMath{text}{math}`.toParseLike`x+math`;
  3424 |     });
  3425 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3426}","  3424 |     });
  3425 |
> 3426 |     it(""\\TextOrMath should work immediately after \\text"", function() {
       |    ^ Unknown Test
  3427 |         expect`\text{\TextOrMath{text}{math}}`.toParseLike`\text{text}`;
  3428 |     });
  3429 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3430}","  3428 |     });
  3429 |
> 3430 |     it(""\\TextOrMath should work later after \\text"", function() {
       |    ^ Unknown Test
  3431 |         expect`\text{hello \TextOrMath{text}{math}}`.toParseLike`\text{hello text}`;
  3432 |     });
  3433 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3434}","  3432 |     });
  3433 |
> 3434 |     it(""\\TextOrMath should work immediately after \\text ends"", function() {
       |    ^ Unknown Test
  3435 |         expect`\text{\TextOrMath{text}{math}}\TextOrMath{text}{math}`
  3436 |             .toParseLike`\text{text}math`;
  3437 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3439}","  3437 |     });
  3438 |
> 3439 |     it(""\\TextOrMath should work immediately after $"", function() {
       |    ^ Unknown Test
  3440 |         expect`\text{$\TextOrMath{text}{math}$}`.toParseLike`\text{$math$}`;
  3441 |     });
  3442 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3443}","  3441 |     });
  3442 |
> 3443 |     it(""\\TextOrMath should work later after $"", function() {
       |    ^ Unknown Test
  3444 |         expect`\text{$x+\TextOrMath{text}{math}$}`.toParseLike`\text{$x+math$}`;
  3445 |     });
  3446 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3447}","  3445 |     });
  3446 |
> 3447 |     it(""\\TextOrMath should work immediately after $ ends"", function() {
       |    ^ Unknown Test
  3448 |         expect`\text{$\TextOrMath{text}{math}$\TextOrMath{text}{math}}`
  3449 |             .toParseLike`\text{$math$text}`;
  3450 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3452}","  3450 |     });
  3451 |
> 3452 |     it(""\\TextOrMath should work in a macro"", function() {
       |    ^ Unknown Test
  3453 |         expect`\mode\text{\mode$\mode$\mode}\mode`
  3454 |             .toParseLike(r`math\text{text$math$text}math`, new Settings({macros: {
  3455 |                 ""\\mode"": ""\\TextOrMath{text}{math}"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3459}","  3457 |     });
  3458 |
> 3459 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3460 |         expect`\text\mode`.toParseLike(r`\text t`, new Settings({macros:
  3461 |             {""\\mode"": ""\\TextOrMath{t}{m}""}}));
  3462 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3491}","  3489 |     });
  3490 |
> 3491 |     it(""should build Unicode private area characters"", function() {
       |    ^ Unknown Test
  3492 |         expect`\gvertneqq\lvertneqq\ngeqq\ngeqslant\nleqq`.toBuild();
  3493 |         expect`\nleqslant\nshortmid\nshortparallel\varsubsetneq`.toBuild();
  3494 |         expect`\varsubsetneqq\varsupsetneq\varsupsetneqq`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3497}","  3495 |     });
  3496 |
> 3497 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3498 |         expect`\text\mode`.toParseLike(r`\text{text}`, new Settings({macros:
  3499 |             {""\\mode"": ""\\TextOrMath{text}{math}""}}));
  3500 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3502}","  3500 |     });
  3501 |
> 3502 |     it(""\\gdef defines macros"", function() {
       |    ^ Unknown Test
  3503 |         expect`\gdef\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3504 |         expect`\gdef\foo{hi}\foo+\text\foo`.toParseLike`hi+\text{hi}`;
  3505 |         expect`\gdef\foo#1{hi #1}\text{\foo{Alice}, \foo{Bob}}`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3520}","  3518 |     });
  3519 |
> 3520 |     it(""\\gdef defines macros with delimited parameter"", function() {
       |    ^ Unknown Test
  3521 |         expect`\gdef\foo|#1||{#1}\text{\foo| x y ||}`.toParseLike`\text{ x y }`;
  3522 |         expect`\gdef\foo#1|#2{#1+#2}\foo 1 2 |34`.toParseLike`12+34`;
  3523 |         expect`\gdef\foo#1#{#1}\foo1^{23}`.toParseLike`1^{23}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3529}","  3527 |     });
  3528 |
> 3529 |     it(""\\xdef should expand definition"", function() {
       |    ^ Unknown Test
  3530 |         expect`\def\foo{a}\xdef\bar{\foo}\def\foo{}\bar`.toParseLike`a`;
  3531 |         // \def\noexpand\foo{} expands into \def\foo{}
  3532 |         expect`\def\foo{a}\xdef\bar{\def\noexpand\foo{}}\foo\bar\foo`.toParseLike`a`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3539}","  3537 |     });
  3538 |
> 3539 |     it(""\\def should be handled in Parser"", () => {
       |    ^ Unknown Test
  3540 |         expect`\gdef\foo{1}`.toParse(new Settings({maxExpand: 0}));
  3541 |         expect`2^\def\foo{1}2`.not.toParse();
  3542 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3544}","  3542 |     });
  3543 |
> 3544 |     it(""\\def works locally"", () => {
       |    ^ Unknown Test
  3545 |         expect`\def\x{1}\x{\def\x{2}\x{\def\x{3}\x}\x}\x`
  3546 |             .toParseLike`1{2{3}2}1`;
  3547 |         expect`\def\x{1}\x\def\x{2}\x{\def\x{3}\x\def\x{4}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3551}","  3549 |     });
  3550 |
> 3551 |     it(""\\gdef overrides at all levels"", () => {
       |    ^ Unknown Test
  3552 |         expect`\def\x{1}\x{\def\x{2}\x{\gdef\x{3}\x}\x}\x`
  3553 |             .toParseLike`1{2{3}3}3`;
  3554 |         expect`\def\x{1}\x{\def\x{2}\x{\global\def\x{3}\x}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3560}","  3558 |     });
  3559 |
> 3560 |     it(""\\global needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3561 |         expect`\global\def\foo{}\foo`.toParseLike``;
  3562 |         expect`\global\edef\foo{}\foo`.toParseLike``;
  3563 |         expect`\def\DEF{\def}\global\DEF\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3570}","  3568 |     });
  3569 |
> 3570 |     it(""\\long needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3571 |         expect`\long\def\foo{}\foo`.toParseLike``;
  3572 |         expect`\long\edef\foo{}\foo`.toParseLike``;
  3573 |         expect`\long\global\def\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3577}","  3575 |     });
  3576 |
> 3577 |     it(""Macro arguments do not generate groups"", () => {
       |    ^ Unknown Test
  3578 |         expect`\def\x{1}\x\def\foo#1{#1}\foo{\x\def\x{2}\x}\x`
  3579 |             .toParseLike`1122`;
  3580 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3582}","  3580 |     });
  3581 |
> 3582 |     it(""\\textbf arguments do generate groups"", () => {
       |    ^ Unknown Test
  3583 |         expect`\def\x{1}\x\textbf{\x\def\x{2}\x}\x`.toParseLike`1\textbf{12}1`;
  3584 |     });
  3585 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3586}","  3584 |     });
  3585 |
> 3586 |     it(""\\sqrt optional arguments generate groups"", () => {
       |    ^ Unknown Test
  3587 |         expect`\def\x{1}\def\y{1}\x\y\sqrt[\def\x{2}\x]{\def\y{2}\y}\x\y`
  3588 |             .toParseLike`11\sqrt[2]{2}11`;
  3589 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3591}","  3589 |     });
  3590 |
> 3591 |     it(""array cells generate groups"", () => {
       |    ^ Unknown Test
  3592 |         expect`\def\x{1}\begin{matrix}\x&\def\x{2}\x&\x\end{matrix}\x`
  3593 |             .toParseLike`\begin{matrix}1&2&1\end{matrix}1`;
  3594 |         expect`\def\x{1}\begin{matrix}\def\x{2}\x&\x\end{matrix}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3622}","  3620 |     });
  3621 |
> 3622 |     it(""\\let copies the definition"", () => {
       |    ^ Unknown Test
  3623 |         expect`\let\foo=\frac\def\frac{}\foo12`.toParseLike`\frac12`;
  3624 |         expect`\def\foo{1}\let\bar\foo\def\foo{2}\bar`.toParseLike`1`;
  3625 |         expect`\let\foo=\kern\edef\bar{\foo1em}\let\kern=\relax\bar`.toParseLike`\kern1em`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3642}","  3640 |     });
  3641 |
> 3642 |     it(""\\futurelet should parse correctly"", () => {
       |    ^ Unknown Test
  3643 |         expect`\futurelet\foo\frac1{2+\foo}`.toParseLike`\frac1{2+1}`;
  3644 |     });
  3645 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3646}","  3644 |     });
  3645 |
> 3646 |     it(""macros argument can simulate \\let"", () => {
       |    ^ Unknown Test
  3647 |         expect`\int`.toParseLike(""\\int\\limits"", {macros: {
  3648 |             ""\\Oldint"": {
  3649 |                 tokens: [{text: ""\\int"", noexpand: true}],",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3673}","  3671 |     });
  3672 |
> 3673 |     it(""\\newcommand defines new macros"", () => {
       |    ^ Unknown Test
  3674 |         expect`\newcommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3675 |         expect`\newcommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3676 |         // Function detection",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3688}","  3686 |     });
  3687 |
> 3688 |     it(""\\renewcommand redefines macros"", () => {
       |    ^ Unknown Test
  3689 |         expect`\renewcommand\foo{x^2}\foo+\foo`.not.toParse();
  3690 |         expect`\renewcommand{\foo}{x^2}\foo+\foo`.not.toParse();
  3691 |         expect`\renewcommand\bar{x^2}\bar+\bar`.toParseLike`x^2+x^2`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3696}","  3694 |     });
  3695 |
> 3696 |     it(""\\providecommand defines but does not redefine macros"", () => {
       |    ^ Unknown Test
  3697 |         expect`\providecommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3698 |         expect`\providecommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3699 |         expect`\newcommand{\foo}{1}\foo\providecommand{\foo}{2}\foo`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3707}","  3705 |     });
  3706 |
> 3707 |     it(""\\newcommand is local"", () => {
       |    ^ Unknown Test
  3708 |         expect`\newcommand\foo{1}\foo{\renewcommand\foo{2}\foo}\foo`
  3709 |             .toParseLike`1{2}1`;
  3710 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3712}","  3710 |     });
  3711 |
> 3712 |     it(""\\newcommand accepts number of arguments"", () => {
       |    ^ Unknown Test
  3713 |         expect`\newcommand\foo[1]{#1^2}\foo x+\foo{y}`.toParseLike`x^2+y^2`;
  3714 |         expect`\newcommand\foo[10]{#1^2}\foo 0123456789`.toParseLike`0^2`;
  3715 |         expect`\newcommand\foo[x]{}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3721}","  3719 |     // This may change in the future, if we support the extra features of
  3720 |     // \hspace.
> 3721 |     it(""should treat \\hspace, \\hskip like \\kern"", function() {
       |    ^ Unknown Test
  3722 |         expect`\hspace{1em}`.toParseLike`\kern1em`;
  3723 |         expect`\hskip{1em}`.toParseLike`\kern1em`;
  3724 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3726}","  3724 |     });
  3725 |
> 3726 |     it(""should expand \\limsup as expected"", () => {
       |    ^ Unknown Test
  3727 |         expect`\limsup`.toParseLike`\operatorname*{lim\,sup}`;
  3728 |     });
  3729 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3730}","  3728 |     });
  3729 |
> 3730 |     it(""should expand \\liminf as expected"", () => {
       |    ^ Unknown Test
  3731 |         expect`\liminf`.toParseLike`\operatorname*{lim\,inf}`;
  3732 |     });
  3733 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3734}","  3732 |     });
  3733 |
> 3734 |     it(""should expand AMS log-like symbols as expected"", () => {
       |    ^ Unknown Test
  3735 |         expect`\injlim`.toParseLike`\operatorname*{inj\,lim}`;
  3736 |         expect`\projlim`.toParseLike`\operatorname*{proj\,lim}`;
  3737 |         expect`\varlimsup`.toParseLike`\operatorname*{\overline{lim}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3744}","  3742 |     });
  3743 |
> 3744 |     it(""should expand \\plim as expected"", () => {
       |    ^ Unknown Test
  3745 |         expect`\plim`.toParseLike`\mathop{\operatorname{plim}}\limits`;
  3746 |     });
  3747 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3748}","  3746 |     });
  3747 |
> 3748 |     it(""should expand \\argmin as expected"", () => {
       |    ^ Unknown Test
  3749 |         expect`\argmin`.toParseLike`\operatorname*{arg\,min}`;
  3750 |     });
  3751 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3752}","  3750 |     });
  3751 |
> 3752 |     it(""should expand \\argmax as expected"", () => {
       |    ^ Unknown Test
  3753 |         expect`\argmax`.toParseLike`\operatorname*{arg\,max}`;
  3754 |     });
  3755 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3756}","  3754 |     });
  3755 |
> 3756 |     it(""should expand \\bra as expected"", () => {
       |    ^ Unknown Test
  3757 |         expect`\bra{\phi}`.toParseLike`\mathinner{\langle{\phi}|}`;
  3758 |     });
  3759 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3760}","  3758 |     });
  3759 |
> 3760 |     it(""should expand \\ket as expected"", () => {
       |    ^ Unknown Test
  3761 |         expect`\ket{\psi}`.toParseLike`\mathinner{|{\psi}\rangle}`;
  3762 |     });
  3763 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3764}","  3762 |     });
  3763 |
> 3764 |     it(""should expand \\braket as expected"", () => {
       |    ^ Unknown Test
  3765 |         expect`\braket{\phi|\psi}`.toParseLike`\mathinner{\langle{\phi|\psi}\rangle}`;
  3766 |     });
  3767 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3768}","  3766 |     });
  3767 |
> 3768 |     it(""should expand \\Bra as expected"", () => {
       |    ^ Unknown Test
  3769 |         expect`\Bra{\phi}`.toParseLike`\left\langle\phi\right|`;
  3770 |     });
  3771 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3772}","  3770 |     });
  3771 |
> 3772 |     it(""should expand \\Ket as expected"", () => {
       |    ^ Unknown Test
  3773 |         expect`\Ket{\psi}`.toParseLike`\left|\psi\right\rangle`;
  3774 |     });
  3775 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3776}","  3774 |     });
  3775 |
> 3776 |     it(""should expand \\Braket as expected"", () => {
       |    ^ Unknown Test
  3777 |         expect`\Braket{ ϕ | \frac{∂^2}{∂ t^2} | ψ }`.toParseLike`\left\langle ϕ\,\middle\vert\,\frac{∂^2}{∂ t^2}\,\middle\vert\, ψ\right\rangle`;
  3778 |     });
  3779 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3780}","  3778 |     });
  3779 |
> 3780 |     it(""should expand \\set as expected"", () => {
       |    ^ Unknown Test
  3781 |         expect`\set{x|x<5|S|}`.toParseLike`\{\,x\mid x<5|S|\,\}`;
  3782 |         // \set doesn't support special || or \| handling
  3783 |         expect`\set{x||x<5|S|}`.toParseLike`\{\,x\mid |x<5|S|\,\}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3787}","  3785 |     });
  3786 |
> 3787 |     it(""should expand \\Set as expected"", () => {
       |    ^ Unknown Test
  3788 |         expect`\Set{ x | x<\frac 1 2 |S| }`
  3789 |         .toParseLike`\left\{\: x\;\middle\vert\; x<\frac 1 2 |S| \:\right\}`;
  3790 |         expect`\Set{ x || x<\frac 1 2 |S| }`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3800}","  3798 |     const displayMode = new Settings({displayMode: true});
  3799 |
> 3800 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  3801 |         expect`\tag{hi}x+y`.not.toParse();
  3802 |     });
  3803 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3804}","  3802 |     });
  3803 |
> 3804 |     it(""should fail with multiple tags"", () => {
       |    ^ Unknown Test
  3805 |         expect`\tag{1}\tag{2}x+y`.not.toParse(displayMode);
  3806 |     });
  3807 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3808}","  3806 |     });
  3807 |
> 3808 |     it(""should fail with multiple tags in one row"", () => {
       |    ^ Unknown Test
  3809 |         expect`\begin{align}\tag{1}x+y\tag{2}\end{align}`.not.toParse(displayMode);
  3810 |     });
  3811 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3812}","  3810 |     });
  3811 |
> 3812 |     it(""should work with one tag per row"", () => {
       |    ^ Unknown Test
  3813 |         expect`\begin{align}\tag{1}x\\&+y\tag{2}\end{align}`.toParse(displayMode);
  3814 |     });
  3815 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3816}","  3814 |     });
  3815 |
> 3816 |     it(""should work with \\nonumber/\\notag"", () => {
       |    ^ Unknown Test
  3817 |         expect`\begin{align}\tag{1}\nonumber x\\&+y\notag\end{align}`
  3818 |         .toParseLike(r`\begin{align}\tag{1}x\\&+y\nonumber\end{align}`, displayMode);
  3819 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3821}","  3819 |     });
  3820 |
> 3821 |     it(""should build"", () => {
       |    ^ Unknown Test
  3822 |         expect`\tag{hi}x+y`.toBuild(displayMode);
  3823 |     });
  3824 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3825}","  3823 |     });
  3824 |
> 3825 |     it(""should ignore location of \\tag"", () => {
       |    ^ Unknown Test
  3826 |         expect`\tag{hi}x+y`.toParseLike(r`x+y\tag{hi}`, displayMode);
  3827 |     });
  3828 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3829}","  3827 |     });
  3828 |
> 3829 |     it(""should handle \\tag* like \\tag"", () => {
       |    ^ Unknown Test
  3830 |         expect`\tag{hi}x+y`.toParseLike(r`\tag*{({hi})}x+y`, displayMode);
  3831 |     });
  3832 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3858}","  3856 |
  3857 | describe(""\\@binrel automatic bin/rel/ord"", () => {
> 3858 |     it(""should generate proper class"", () => {
       |    ^ Unknown Test
  3859 |         expect`L\@binrel+xR`.toParseLike`L\mathbin xR`;
  3860 |         expect`L\@binrel=xR`.toParseLike`L\mathrel xR`;
  3861 |         expect`L\@binrel xxR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3867}","  3865 |     });
  3866 |
> 3867 |     it(""should base on just first character in group"", () => {
       |    ^ Unknown Test
  3868 |         expect`L\@binrel{+x}xR`.toParseLike`L\mathbin xR`;
  3869 |         expect`L\@binrel{=x}xR`.toParseLike`L\mathrel xR`;
  3870 |         expect`L\@binrel{xx}xR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3887}","  3885 |
  3886 | describe(""Unicode accents"", function() {
> 3887 |     it(""should parse Latin-1 letters in math mode"", function() {
       |    ^ Unknown Test
  3888 |         // TODO(edemaine): Unsupported Latin-1 letters in math: ÇÐÞçðþ
  3889 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ`
  3890 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3907}","  3905 |     });
  3906 |
> 3907 |     it(""should parse Latin-1 letters in text mode"", function() {
       |    ^ Unknown Test
  3908 |         // TODO(edemaine): Unsupported Latin-1 letters in text: ÇÐÞçðþ
  3909 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}`
  3910 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3927}","  3925 |     });
  3926 |
> 3927 |     it(""should support \\aa in text mode"", function() {
       |    ^ Unknown Test
  3928 |         expect`\text{\aa\AA}`.toParseLike(r`\text{\r a\r A}`, strictSettings);
  3929 |         expect`\aa`.not.toParse(strictSettings);
  3930 |         expect`\Aa`.not.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3938}","  3936 |     });
  3937 |
> 3938 |     it(""should parse multi-accented characters"", function() {
       |    ^ Unknown Test
  3939 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3940 |         // Doesn't parse quite the same as
  3941 |         // ""\\text{\\'{\\^a}\\'{\\=a}\\'{\\u a}}"" because of the ordgroups.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3944}","  3942 |     });
  3943 |
> 3944 |     it(""should parse accented i's and j's"", function() {
       |    ^ Unknown Test
  3945 |         expect`íȷ́`.toParseLike(r`\acute ı\acute ȷ`, nonstrictSettings);
  3946 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3947 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3951}","  3949 |
  3950 | describe(""Unicode"", function() {
> 3951 |     it(""should parse negated relations"", function() {
       |    ^ Unknown Test
  3952 |         expect`∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌`.toParse(strictSettings);
  3953 |     });
  3954 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3955}","  3953 |     });
  3954 |
> 3955 |     it(""should build relations"", function() {
       |    ^ Unknown Test
  3956 |         expect`∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌`.toBuild(strictSettings);
  3957 |     });
  3958 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3959}","  3957 |     });
  3958 |
> 3959 |     it(""should parse relations"", function() {
       |    ^ Unknown Test
  3960 |         // These characters are not in the KaTeX fonts. So they build with an error message.
  3961 |         expect`⊶⊷`.toParse();
  3962 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3964}","  3962 |     });
  3963 |
> 3964 |     it(""should build big operators"", function() {
       |    ^ Unknown Test
  3965 |         expect`∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆`.toBuild(strictSettings);
  3966 |     });
  3967 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3968}","  3966 |     });
  3967 |
> 3968 |     it(""should build more relations"", function() {
       |    ^ Unknown Test
  3969 |         expect`⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋`.toBuild(strictSettings);
  3970 |     });
  3971 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3982}","  3980 |     });
  3981 |
> 3982 |     it(""should build arrows"", function() {
       |    ^ Unknown Test
  3983 |         expect`←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉`.toBuild(strictSettings);
  3984 |     });
  3985 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3986}","  3984 |     });
  3985 |
> 3986 |     it(""should build more arrows"", function() {
       |    ^ Unknown Test
  3987 |         expect`⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼`.toBuild(strictSettings);
  3988 |     });
  3989 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4072}","  4070 |
  4071 | describe(""The maxExpand setting"", () => {
> 4072 |     it(""should prevent expansion"", () => {
       |    ^ Unknown Test
  4073 |         expect`\gdef\foo{1}\foo`.toParse();
  4074 |         expect`\gdef\foo{1}\foo`.toParse(new Settings({maxExpand: 1}));
  4075 |         expect`\gdef\foo{1}\foo`.not.toParse(new Settings({maxExpand: 0}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4078}","  4076 |     });
  4077 |
> 4078 |     it(""should prevent infinite loops"", () => {
       |    ^ Unknown Test
  4079 |         expect`\gdef\foo{\foo}\foo`.not.toParse(
  4080 |             new Settings({maxExpand: 10}));
  4081 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4083}","  4081 |     });
  4082 |
> 4083 |     it(""should prevent exponential blowup via \\edef"", () => {
       |    ^ Unknown Test
  4084 |         expect`\edef0{x}\edef0{00}\edef0{00}\edef0{00}\edef0{00}`.not.toParse(
  4085 |             new Settings({maxExpand: 10}));
  4086 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4134}","  4132 |
  4133 | describe(""Newlines via \\\\ and \\newline"", function() {
> 4134 |     it(""should build \\\\ without the optional argument and \\newline the same"", () => {
       |    ^ Unknown Test
  4135 |         expect`hello \\ world`.toBuildLike`hello \newline world`;
  4136 |     });
  4137 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4138}","  4136 |     });
  4137 |
> 4138 |     it(""should not allow \\newline to scan for an optional size argument"", () => {
       |    ^ Unknown Test
  4139 |         expect`hello \newline[w]orld`.toBuild();
  4140 |     });
  4141 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4142}","  4140 |     });
  4141 |
> 4142 |     it(""should not allow \\cr at top level"", () => {
       |    ^ Unknown Test
  4143 |         expect`hello \cr world`.not.toBuild();
  4144 |     });
  4145 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4157}","  4155 |
  4156 | describe(""Symbols"", function() {
> 4157 |     it(""should parse \\text{\\i\\j}"", () => {
       |    ^ Unknown Test
  4158 |         expect`\text{\i\j}`.toBuild(strictSettings);
  4159 |     });
  4160 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4161}","  4159 |     });
  4160 |
> 4161 |     it(""should parse spacing functions in math or text mode"", () => {
       |    ^ Unknown Test
  4162 |         expect`A\;B\,C\nobreakspace \text{A\;B\,C\nobreakspace}`.toBuild(strictSettings);
  4163 |     });
  4164 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4165}","  4163 |     });
  4164 |
> 4165 |     it(""should build \\minuso"", () => {
       |    ^ Unknown Test
  4166 |         expect`\\minuso`.toBuild(strictSettings);
  4167 |     });
  4168 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4169}","  4167 |     });
  4168 |
> 4169 |     it(""should render ligature commands like their unicode characters"", () => {
       |    ^ Unknown Test
  4170 |         expect`\text{\ae\AE\oe\OE\o\O\ss}`.toBuildLike(r`\text{æÆœŒøØß}`, strictSettings);
  4171 |     });
  4172 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4175}","  4173 |
  4174 | describe(""strict setting"", function() {
> 4175 |     it(""should allow unicode text when not strict"", () => {
       |    ^ Unknown Test
  4176 |         expect`é`.toParse(new Settings(nonstrictSettings));
  4177 |         expect`試`.toParse(new Settings(nonstrictSettings));
  4178 |         expect`é`.toParse(new Settings({strict: ""ignore""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4186}","  4184 |     });
  4185 |
> 4186 |     it(""should forbid unicode text when strict"", () => {
       |    ^ Unknown Test
  4187 |         expect`é`.not.toParse(new Settings({strict: true}));
  4188 |         expect`試`.not.toParse(new Settings({strict: true}));
  4189 |         expect`é`.not.toParse(new Settings({strict: ""error""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4197}","  4195 |     });
  4196 |
> 4197 |     it(""should warn about unicode text when default"", () => {
       |    ^ Unknown Test
  4198 |         expect`é`.toWarn(new Settings());
  4199 |         expect`試`.toWarn(new Settings());
  4200 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4202}","  4200 |     });
  4201 |
> 4202 |     it(""should always allow unicode text in text mode"", () => {
       |    ^ Unknown Test
  4203 |         expect`\text{é試}`.toParse(nonstrictSettings);
  4204 |         expect`\text{é試}`.toParse(strictSettings);
  4205 |         expect`\text{é試}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4208}","  4206 |     });
  4207 |
> 4208 |     it(""should warn about top-level \\newline in display mode"", () => {
       |    ^ Unknown Test
  4209 |         expect`x\\y`.toWarn(new Settings({displayMode: true}));
  4210 |         expect`x\\y`.toParse(new Settings({displayMode: false}));
  4211 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4257}","  4255 |         }).toThrow(errorMessage);
  4256 |     });
> 4257 |     it(""should add font metrics to metrics map and render successfully"", () => {
       |    ^ Unknown Test
  4258 |         const mockMetrics = {};
  4259 |         // mock font metrics for the symbols that we added previously
  4260 |         for (let number = 0; number <= 9; number++) {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4293}","  4291 |
  4292 | describe(""\\relax"", () => {
> 4293 |     it(""should stop the expansion"", () => {
       |    ^ Unknown Test
  4294 |         expect`\kern2\relax em`.not.toParse();
  4295 |     });
  4296 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4299}","  4297 |
  4298 | describe(""\\emph"", () => {
> 4299 |     it(""should toggle italics"", () => {
       |    ^ Unknown Test
  4300 |         expect`\emph{foo \emph{bar}}`.toBuildLike`\textit{foo \textup{bar}}`;
  4301 |     });
  4302 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4303}","  4301 |     });
  4302 |
> 4303 |     it(""should toggle italics within text"", () => {
       |    ^ Unknown Test
  4304 |         expect`\text{\emph{foo \emph{bar}}}`.toBuildLike`\text{\textit{foo \textup{bar}}}`;
  4305 |     });
  4306 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4307}","  4305 |     });
  4306 |
> 4307 |     it(""should toggle italics within textup"", () => {
       |    ^ Unknown Test
  4308 |         expect`\textup{\emph{foo \emph{bar}}}`.toBuildLike`\textup{\textit{foo \textup{bar}}}`;
  4309 |     });
  4310 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4311}","  4309 |     });
  4310 |
> 4311 |     it(""should toggle italics within textit"", () => {
       |    ^ Unknown Test
  4312 |         expect`\textit{\emph{foo \emph{bar}}}`.toBuildLike`\textit{\textup{foo \textit{bar}}}`;
  4313 |     });
  4314 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 132}","  130 |         });
  131 |         it(""complains about mismatched \\verb with end of line"", function() {
> 132 |             expect(""\\verb|hello\nworld|"").toFailWithParseError(
      |            ^ Redundant Assertion
  133 |                 ""\\verb ended by end of line instead of matching delimiter"");
  134 |         });
  135 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 291}","  289 |     describe(""#_innerLex"", function() {
  290 |         it(""rejects lone surrogate char"", function() {
> 291 |             expect(""\udcba "").toFailWithParseError(
      |            ^ Redundant Assertion
  292 |                    ""Unexpected character: '\udcba' at position 1:"" +
  293 |                     "" \udcba\u0332 "");
  294 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 296}","  294 |         });
  295 |         it(""rejects lone backslash at end of input"", function() {
> 296 |             expect(""\\"").toFailWithParseError(
      |            ^ Redundant Assertion
  297 |                    ""Unexpected character: '\\' at position 1: \\̲"");
  298 |         });
  299 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 8, 'line': 328}","  326 | describe(""Unicode accents"", function() {
  327 |     it(""should return error for invalid combining characters"", function() {
> 328 |         expect(""A\u0328"").toFailWithParseError(
      |        ^ Redundant Assertion
  329 |             ""Unknown accent ' ̨' at position 1: Ą̲̲"");
  330 |     });
  331 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 6}","  4 |
  5 |     describe(""#handleInfixNodes"", function() {
> 6 |         it(""rejects repeated infix operators"", function() {
    |        ^ Unknown Test
  7 |             expect`1\over 2\over 3`.toFailWithParseError(
  8 |                    ""only one infix operator per group at position 9: "" +
  9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 11}","   9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");
  10 |         });
> 11 |         it(""rejects conflicting infix operators"", function() {
     |        ^ Unknown Test
  12 |             expect`1\over 2\choose 3`.toFailWithParseError(
  13 |                    ""only one infix operator per group at position 9: "" +
  14 |                    ""1\\over 2\\̲c̲h̲o̲o̲s̲e̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 19}","  17 |
  18 |     describe(""#handleSupSubscript"", function() {
> 19 |         it(""rejects ^ at end of group"", function() {
     |        ^ Unknown Test
  20 |             expect`{1^}`.toFailWithParseError(
  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 23}","  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });
> 23 |         it(""rejects _ at end of input"", function() {
     |        ^ Unknown Test
  24 |             expect`1_`.toFailWithParseError(
  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 27}","  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });
> 27 |         it(""rejects \\sqrt as argument to ^"", function() {
     |        ^ Unknown Test
  28 |             expect`1^\sqrt{2}`.toFailWithParseError(
  29 |                    ""Got function '\\sqrt' with no arguments as superscript"" +
  30 |                    "" at position 3: 1^\\̲s̲q̲r̲t̲{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 35}","  33 |
  34 |     describe(""#parseAtom"", function() {
> 35 |         it(""rejects \\limits without operator"", function() {
     |        ^ Unknown Test
  36 |             expect`\alpha\limits\omega`.toFailWithParseError(
  37 |                    ""Limit controls must follow a math operator"" +
  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 40}","  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");
  39 |         });
> 40 |         it(""rejects \\limits at the beginning of the input"", function() {
     |        ^ Unknown Test
  41 |             expect`\limits\omega`.toFailWithParseError(
  42 |                    ""Limit controls must follow a math operator"" +
  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 45}","  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");
  44 |         });
> 45 |         it(""rejects double superscripts"", function() {
     |        ^ Unknown Test
  46 |             expect`1^2^3`.toFailWithParseError(
  47 |                    ""Double superscript at position 4: 1^2^̲3"");
  48 |             expect`1^{2+3}_4^5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 51}","  49 |                    ""Double superscript at position 10: 1^{2+3}_4^̲5"");
  50 |         });
> 51 |         it(""rejects double superscripts involving primes"", function() {
     |        ^ Unknown Test
  52 |             expect`1'_2^3`.toFailWithParseError(
  53 |                    ""Double superscript at position 5: 1'_2^̲3"");
  54 |             expect`1^2'`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 61}","  59 |                    ""Double superscript at position 5: 1'_2'̲"");
  60 |         });
> 61 |         it(""rejects double subscripts"", function() {
     |        ^ Unknown Test
  62 |             expect`1_2_3`.toFailWithParseError(
  63 |                    ""Double subscript at position 4: 1_2_̲3"");
  64 |             expect`1_{2+3}^4_5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 70}","  68 |
  69 |     describe(""#parseImplicitGroup"", function() {
> 70 |         it(""reports unknown environments"", function() {
     |        ^ Unknown Test
  71 |             expect`\begin{foo}bar\end{foo}`.toFailWithParseError(
  72 |                    ""No such environment: foo at position 7:"" +
  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 75}","  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");
  74 |         });
> 75 |         it(""reports mismatched environments"", function() {
     |        ^ Unknown Test
  76 |             expect`\begin{pmatrix}1&2\\3&4\end{bmatrix}+5`
  77 |                 .toFailWithParseError(
  78 |                    ""Mismatch: \\begin{pmatrix} matched by \\end{bmatrix}"" +",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 84}","  82 |
  83 |     describe(""#parseFunction"", function() {
> 84 |         it(""rejects math-mode functions in text mode"", function() {
     |        ^ Unknown Test
  85 |             expect`\text{\sqrt2 is irrational}`.toFailWithParseError(
  86 |                 ""Can't use function '\\sqrt' in text mode"" +
  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 89}","  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");
  88 |         });
> 89 |         it(""rejects text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  90 |             expect`$`.toFailWithParseError(
  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 93}","  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });
> 93 |         it(""rejects strict-mode text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  94 |             expect`\'echec`.toFailWithParseError(""LaTeX-incompatible input "" +
  95 |                 ""and strict mode is set to 'error': LaTeX's accent \\' works "" +
  96 |                 ""only in text mode [mathVsTextAccents]"", strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 101}","   99 |
  100 |     describe(""#parseArguments"", function() {
> 101 |         it(""complains about missing argument at end of input"", function() {
      |        ^ Unknown Test
  102 |             expect`2\sqrt`.toFailWithParseError(
  103 |                    ""Expected group as argument to '\\sqrt'"" +
  104 |                    "" at end of input: 2\\sqrt"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 106}","  104 |                    "" at end of input: 2\\sqrt"");
  105 |         });
> 106 |         it(""complains about missing argument at end of group"", function() {
      |        ^ Unknown Test
  107 |             expect`1^{2\sqrt}`.toFailWithParseError(
  108 |                    ""Expected group as argument to '\\sqrt'"" +
  109 |                    "" at position 10: 1^{2\\sqrt}̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 111}","  109 |                    "" at position 10: 1^{2\\sqrt}̲"");
  110 |         });
> 111 |         it(""complains about functions as arguments to others"", function() {
      |        ^ Unknown Test
  112 |             expect`\sqrt\over2`.toFailWithParseError(
  113 |                    ""Got function '\\over' with no arguments as argument to"" +
  114 |                    "" '\\sqrt' at position 6: \\sqrt\\̲o̲v̲e̲r̲2"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 119}","  117 |
  118 |     describe(""#parseGroup"", function() {
> 119 |         it(""complains about undefined control sequence"", function() {
      |        ^ Unknown Test
  120 |             expect`\xyz`.toFailWithParseError(
  121 |                    ""Undefined control sequence: \\xyz"" +
  122 |                    "" at position 1: \\̲x̲y̲z̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 127}","  125 |
  126 |     describe(""#verb"", function() {
> 127 |         it(""complains about mismatched \\verb with end of string"", function() {
      |        ^ Unknown Test
  128 |             expect`\verb|hello`.toFailWithParseError(
  129 |                 ""\\verb ended by end of line instead of matching delimiter"");
  130 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 142}","  140 |
  141 |     describe(""#parseInput expecting EOF"", function() {
> 142 |         it(""complains about extra }"", function() {
      |        ^ Unknown Test
  143 |             expect`{1+2}}`.toFailWithParseError(
  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 146}","  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });
> 146 |         it(""complains about extra \\end"", function() {
      |        ^ Unknown Test
  147 |             expect`x\end{matrix}`.toFailWithParseError(
  148 |                    ""Expected 'EOF', got '\\end' at position 2:"" +
  149 |                    "" x\\̲e̲n̲d̲{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 151}","  149 |                    "" x\\̲e̲n̲d̲{matrix}"");
  150 |         });
> 151 |         it(""complains about top-level &"", function() {
      |        ^ Unknown Test
  152 |             expect`1&2`.toFailWithParseError(
  153 |                    ""Expected 'EOF', got '&' at position 2: 1&̲2"");
  154 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 158}","  156 |
  157 |     describe(""#parseImplicitGroup expecting \\right"", function() {
> 158 |         it(""rejects missing \\right"", function() {
      |        ^ Unknown Test
  159 |             expect`\left(1+2)`.toFailWithParseError(
  160 |                    ""Expected '\\right', got 'EOF' at end of input:"" +
  161 |                    "" \\left(1+2)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 163}","  161 |                    "" \\left(1+2)"");
  162 |         });
> 163 |         it(""rejects incorrectly scoped \\right"", function() {
      |        ^ Unknown Test
  164 |             expect`{\left(1+2}\right)`.toFailWithParseError(
  165 |                    ""Expected '\\right', got '}' at position 11:"" +
  166 |                    "" {\\left(1+2}̲\\right)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 174}","  172 |
  173 |     describe(""#parseSpecialGroup expecting braces"", function() {
> 174 |         it(""complains about missing { for color"", function() {
      |        ^ Unknown Test
  175 |             expect`\textcolor#ffffff{text}`.toFailWithParseError(
  176 |                    ""Invalid color: '#' at position 11:"" +
  177 |                    "" \\textcolor#̲ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 179}","  177 |                    "" \\textcolor#̲ffffff{text}"");
  178 |         });
> 179 |         it(""complains about missing { for size"", function() {
      |        ^ Unknown Test
  180 |             expect`\rule{1em}[2em]`.toFailWithParseError(
  181 |                    ""Invalid size: '[' at position 11: \\rule{1em}[̲2em]"");
  182 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 184}","  182 |         });
  183 |         // Can't test for the [ of an optional group since it's optional
> 184 |         it(""complains about missing } for color"", function() {
      |        ^ Unknown Test
  185 |             expect`\textcolor{#ffffff{text}`.toFailWithParseError(
  186 |                    ""Unexpected end of input in a macro argument,"" +
  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 189}","  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");
  188 |         });
> 189 |         it(""complains about missing ] for size"", function() {
      |        ^ Unknown Test
  190 |             expect`\rule[1em{2em}{3em}`.toFailWithParseError(
  191 |                    ""Unexpected end of input in a macro argument,"" +
  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 194}","  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");
  193 |         });
> 194 |         it(""complains about missing ] for size at end of input"", function() {
      |        ^ Unknown Test
  195 |             expect`\rule[1em`.toFailWithParseError(
  196 |                    ""Unexpected end of input in a macro argument,"" +
  197 |                    "" expected ']' at end of input: \\rule[1em"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 199}","  197 |                    "" expected ']' at end of input: \\rule[1em"");
  198 |         });
> 199 |         it(""complains about missing } for color at end of input"", function() {
      |        ^ Unknown Test
  200 |             expect`\textcolor{#123456`.toFailWithParseError(
  201 |                    ""Unexpected end of input in a macro argument,"" +
  202 |                    "" expected '}' at end of input: …xtcolor{#123456"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 207}","  205 |
  206 |     describe(""#parseGroup expecting }"", function() {
> 207 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  208 |             expect`\sqrt{2`.toFailWithParseError(
  209 |                    ""Expected '}', got 'EOF' at end of input: \\sqrt{2"");
  210 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 214}","  212 |
  213 |     describe(""#parseOptionalGroup expecting ]"", function() {
> 214 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  215 |             expect`\sqrt[3`.toFailWithParseError(
  216 |                    ""Unexpected end of input in a macro argument,"" +
  217 |                    "" expected ']' at end of input: \\sqrt[3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 219}","  217 |                    "" expected ']' at end of input: \\sqrt[3"");
  218 |         });
> 219 |         it(""before group"", function() {
      |        ^ Unknown Test
  220 |             expect`\sqrt[3{2}`.toFailWithParseError(
  221 |                    ""Unexpected end of input in a macro argument,"" +
  222 |                    "" expected ']' at end of input: \\sqrt[3{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 231}","  229 |
  230 |     describe(""parseArray"", function() {
> 231 |         it(""rejects missing \\end"", function() {
      |        ^ Unknown Test
  232 |             expect`\begin{matrix}1`.toFailWithParseError(
  233 |                    ""Expected & or \\\\ or \\cr or \\end at end of input:"" +
  234 |                    "" \\begin{matrix}1"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 236}","  234 |                    "" \\begin{matrix}1"");
  235 |         });
> 236 |         it(""rejects incorrectly scoped \\end"", function() {
      |        ^ Unknown Test
  237 |             expect`{\begin{matrix}1}\end{matrix}`.toFailWithParseError(
  238 |                    ""Expected & or \\\\ or \\cr or \\end at position 17:"" +
  239 |                    "" …\\begin{matrix}1}̲\\end{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 244}","  242 |
  243 |     describe(""array environment"", function() {
> 244 |         it(""rejects unknown column types"", function() {
      |        ^ Unknown Test
  245 |             expect`\begin{array}{cba}\end{array}`.toFailWithParseError(
  246 |                    ""Unknown column alignment: b at position 16:"" +
  247 |                    "" \\begin{array}{cb̲a}\\end{array}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 256}","  254 |
  255 |     describe(""delimiter functions"", function() {
> 256 |         it(""reject invalid opening delimiters"", function() {
      |        ^ Unknown Test
  257 |             expect`\bigl 1 + 2 \bigr`.toFailWithParseError(
  258 |                    ""Invalid delimiter '1' after '\\bigl' at position 7:"" +
  259 |                    "" \\bigl 1̲ + 2 \\bigr"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 261}","  259 |                    "" \\bigl 1̲ + 2 \\bigr"");
  260 |         });
> 261 |         it(""reject invalid closing delimiters"", function() {
      |        ^ Unknown Test
  262 |             expect`\bigl(1+2\bigr=3`.toFailWithParseError(
  263 |                    ""Invalid delimiter '=' after '\\bigr' at position 15:"" +
  264 |                    "" \\bigl(1+2\\bigr=̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 266}","  264 |                    "" \\bigl(1+2\\bigr=̲3"");
  265 |         });
> 266 |         it(""reject group opening delimiters"", function() {
      |        ^ Unknown Test
  267 |             expect`\bigl{(}1+2\bigr)3`.toFailWithParseError(
  268 |                    ""Invalid delimiter type 'ordgroup' at position 6:"" +
  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 271}","  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");
  270 |         });
> 271 |         it(""reject group closing delimiters"", function() {
      |        ^ Unknown Test
  272 |             expect`\bigl(1+2\bigr{)}3`.toFailWithParseError(
  273 |                    ""Invalid delimiter type 'ordgroup' at position 15:"" +
  274 |                    "" \\bigl(1+2\\bigr{̲)̲}̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 279}","  277 |
  278 |     describe(""\\begin and \\end"", function() {
> 279 |         it(""reject invalid environment names"", function() {
      |        ^ Unknown Test
  280 |             expect`\begin x\end y`.toFailWithParseError(
  281 |                    ""No such environment: x at position 8: \\begin x̲\\end y"");
  282 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 302}","  300 |
  301 |     describe(""#_innerLexColor"", function() {
> 302 |         it(""reject 3-digit hex notation without #"", function() {
      |        ^ Unknown Test
  303 |             expect`\textcolor{1a2}{foo}`.toFailWithParseError(
  304 |                    ""Invalid color: '1a2'"" +
  305 |                    "" at position 11: \\textcolor{̲1̲a̲2̲}̲{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 310}","  308 |
  309 |     describe(""#_innerLexSize"", function() {
> 310 |         it(""reject size without unit"", function() {
      |        ^ Unknown Test
  311 |             expect`\rule{0}{2em}`.toFailWithParseError(
  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 314}","  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });
> 314 |         it(""reject size with bogus unit"", function() {
      |        ^ Unknown Test
  315 |             expect`\rule{1au}{2em}`.toFailWithParseError(
  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 318}","  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });
> 318 |         it(""reject size without number"", function() {
      |        ^ Unknown Test
  319 |             expect`\rule{em}{2em}`.toFailWithParseError(
  320 |                    ""Invalid size: 'em' at position 6: \\rule{̲e̲m̲}̲{2em}"");
  321 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 5, 'column': 4, 'index': 124}","  3 |
  4 | describe(""Symbols and macros"", () => {
> 5 |     for (const macro in macros) {
    |    ^ Conditional Test Logic
  6 |         if (!macros.hasOwnProperty(macro)) {
  7 |             continue;
  8 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 6, 'column': 8, 'index': 162}","  4 | describe(""Symbols and macros"", () => {
  5 |     for (const macro in macros) {
> 6 |         if (!macros.hasOwnProperty(macro)) {
    |        ^ Conditional Test Logic
  7 |             continue;
  8 |         }
  9 |         it(`macro ${macro} should not shadow a symbol`, () => {",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 10, 'column': 12, 'index': 307}","   8 |         }
   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
> 10 |             for (const kind in symbols) {
     |            ^ Conditional Test Logic
  11 |                 if (!symbols.hasOwnProperty(kind)) {
  12 |                     continue;
  13 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 11, 'column': 16, 'index': 353}","   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
  10 |             for (const kind in symbols) {
> 11 |                 if (!symbols.hasOwnProperty(kind)) {
     |                ^ Conditional Test Logic
  12 |                     continue;
  13 |                 }
  14 |                 expect(symbols[kind][macro]).toBeFalsy();",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 18, 'column': 12, 'index': 481}","  16 |                   splitAtDelimiters(actual, delimiters);
  17 |
> 18 |             if (split.length !== result.length) {
     |            ^ Conditional Test Logic
  19 |                 message.pass = false;
  20 |                 message.message = () => ""Different number of splits: "" +
  21 |                     split.length + "" vs. "" + result.length + "" ("" +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 27, 'column': 12, 'index': 861}","  25 |             }
  26 |
> 27 |             for (let i = 0; i < split.length; i++) {
     |            ^ Conditional Test Logic
  28 |                 const real = split[i];
  29 |                 const correct = result[i];
  30 |",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 34, 'column': 16, 'index': 1061}","  32 |                 let diff;
  33 |
> 34 |                 if (real.type !== correct.type) {
     |                ^ Conditional Test Logic
  35 |                     good = false;
  36 |                     diff = ""type"";
  37 |                 } else if (real.data !== correct.data) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 37, 'column': 23, 'index': 1187}","  35 |                     good = false;
  36 |                     diff = ""type"";
> 37 |                 } else if (real.data !== correct.data) {
     |                       ^ Conditional Test Logic
  38 |                     good = false;
  39 |                     diff = ""data"";
  40 |                 } else if (real.display !== correct.display) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 40, 'column': 23, 'index': 1313}","  38 |                     good = false;
  39 |                     diff = ""data"";
> 40 |                 } else if (real.display !== correct.display) {
     |                       ^ Conditional Test Logic
  41 |                     good = false;
  42 |                     diff = ""display"";
  43 |                 }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 45, 'column': 16, 'index': 1460}","  43 |                 }
  44 |
> 45 |                 if (!good) {
     |                ^ Conditional Test Logic
  46 |                     message.pass = false;
  47 |                     message.message = () => ""Difference at split "" +
  48 |                         (i + 1) + "": "" + JSON.stringify(real) +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 332, 'column': 8, 'index': 11671}","  330 |             '\\]'];
  331 |         const el = document.createElement('div');
> 332 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  333 |             const txt = document.createTextNode(textNodes[i]);
  334 |             el.appendChild(txt);
  335 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 350, 'column': 8, 'index': 12420}","  348 |             'consectetur adipiscing elit'];
  349 |         const el = document.createElement('div');
> 350 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  351 |             const txt = document.createTextNode(textNodes[i]);
  352 |             el.appendChild(txt);
  353 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 355, 'column': 8, 'index': 12630}","  353 |         }
  354 |         const el2 = document.createElement('div');
> 355 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  356 |             const txt = document.createTextNode(textNodes[i]);
  357 |             el2.appendChild(txt);
  358 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 62}","  60 | describe(""A delimiter splitter"", function() {
  61 |     it(""doesn't split when there are no delimiters"", function() {
> 62 |         expect(""hello"").toSplitInto(
     |        ^ Redundant Assertion
  63 |             [
  64 |                 {type: ""text"", data: ""hello""},
  65 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 72}","  70 |
  71 |     it(""doesn't create a math node with only one left delimiter"", function() {
> 72 |         expect(""hello ( world"").toSplitInto(
     |        ^ Redundant Assertion
  73 |             [
  74 |                 {type: ""text"", data: ""hello ""},
  75 |                 {type: ""text"", data: ""( world""},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 83}","  81 |
  82 |     it(""doesn't split when there's only a right delimiter"", function() {
> 83 |         expect(""hello ) world"").toSplitInto(
     |        ^ Redundant Assertion
  84 |             [
  85 |                 {type: ""text"", data: ""hello ) world""},
  86 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 93}","  91 |
  92 |     it(""splits when there are both delimiters"", function() {
> 93 |         expect(""hello ( world ) boo"").toSplitInto(
     |        ^ Redundant Assertion
  94 |             [
  95 |                 {type: ""text"", data: ""hello ""},
  96 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 106}","  104 |
  105 |     it(""splits on multi-character delimiters"", function() {
> 106 |         expect(""hello [[ world ]] boo"").toSplitInto(
      |        ^ Redundant Assertion
  107 |             [
  108 |                 {type: ""text"", data: ""hello ""},
  109 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 116}","  114 |                 {left: ""[["", right: ""]]"", display: false},
  115 |             ]);
> 116 |         expect(""hello \\begin{equation} world \\end{equation} boo"").toSplitInto(
      |        ^ Redundant Assertion
  117 |             [
  118 |                 {type: ""text"", data: ""hello ""},
  119 |                 {type: ""math"", data: ""\\begin{equation} world \\end{equation}"",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 131}","  129 |
  130 |     it(""splits multiple times"", function() {
> 131 |         expect(""hello ( world ) boo ( more ) stuff"").toSplitInto(
      |        ^ Redundant Assertion
  132 |             [
  133 |                 {type: ""text"", data: ""hello ""},
  134 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 147}","  145 |
  146 |     it(""leaves the ending when there's only a left delimiter"", function() {
> 147 |         expect(""hello ( world ) boo ( left"").toSplitInto(
      |        ^ Redundant Assertion
  148 |             [
  149 |                 {type: ""text"", data: ""hello ""},
  150 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 161}","  159 |
  160 |     it(""doesn't split when close delimiters are in {}s"", function() {
> 161 |         expect(""hello ( world { ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  162 |             [
  163 |                 {type: ""text"", data: ""hello ""},
  164 |                 {type: ""math"", data: "" world { ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 172}","  170 |             ]);
  171 |
> 172 |         expect(""hello ( world { { } ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  173 |             [
  174 |                 {type: ""text"", data: ""hello ""},
  175 |                 {type: ""math"", data: "" world { { } ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 185}","  183 |
  184 |     it(""correctly processes sequences of $..$"", function() {
> 185 |         expect(""$hello$$world$$boo$"").toSplitInto(
      |        ^ Redundant Assertion
  186 |             [
  187 |                 {type: ""math"", data: ""hello"",
  188 |                     rawData: ""$hello$"", display: false},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 200}","  198 |
  199 |     it(""doesn't split at escaped delimiters"", function() {
> 200 |         expect(""hello ( world \\) ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  201 |             [
  202 |                 {type: ""text"", data: ""hello ""},
  203 |                 {type: ""math"", data: "" world \\) "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 224}","  222 |
  223 |     it(""splits when the right and left delimiters are the same"", function() {
> 224 |         expect(""hello $ world $ boo"").toSplitInto(
      |        ^ Redundant Assertion
  225 |             [
  226 |                 {type: ""text"", data: ""hello ""},
  227 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 237}","  235 |
  236 |     it(""ignores \\$"", function() {
> 237 |         expect(""$x = \\$5$"").toSplitInto(
      |        ^ Redundant Assertion
  238 |             [
  239 |                 {type: ""math"", data: ""x = \\$5"",
  240 |                     rawData: ""$x = \\$5$"", display: false},",,
test/unicode-spec.js,ConditionalTestLogic,"[{""startLine"":157,""endLine"":160}]",,25.0,2.0
test/unicode-spec.js,SubOptimalAssert,"[{""startLine"":163,""endLine"":163}]",,25.0,2.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1315,""endLine"":1319}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1398,""endLine"":1400}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2819,""endLine"":2821}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2836,""endLine"":2838}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2853,""endLine"":2856}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3124,""endLine"":3127}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3821,""endLine"":3823}]",,556.0,117.0
test/katex-spec.js,OvercommentedTest,"[{""startLine"":4011,""endLine"":4046}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":62,""endLine"":64}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":81,""endLine"":84}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":106,""endLine"":109}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":121,""endLine"":123}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":139,""endLine"":141}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":157,""endLine"":159}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":173,""endLine"":175}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":295,""endLine"":300}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":339,""endLine"":341}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":356,""endLine"":358}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":384,""endLine"":387}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":489,""endLine"":491}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":563,""endLine"":568}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":570,""endLine"":600}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":666,""endLine"":675}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":679,""endLine"":685}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":691,""endLine"":693}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":715,""endLine"":717}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":827,""endLine"":837}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":851,""endLine"":853}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":989,""endLine"":991}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1037,""endLine"":1040}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1096,""endLine"":1106}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1108,""endLine"":1111}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1113,""endLine"":1116}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1134,""endLine"":1148}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1166,""endLine"":1169}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1171,""endLine"":1174}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1176,""endLine"":1179}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1195,""endLine"":1197}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1307,""endLine"":1309}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1542,""endLine"":1555}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1559,""endLine"":1564}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1690,""endLine"":1697}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2074,""endLine"":2091}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2112,""endLine"":2114}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2147,""endLine"":2149}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2258,""endLine"":2264}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2289,""endLine"":2294}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2296,""endLine"":2302}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2306,""endLine"":2312}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2314,""endLine"":2320}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2324,""endLine"":2329}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2331,""endLine"":2337}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2350,""endLine"":2355}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2363,""endLine"":2367}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2371,""endLine"":2376}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2378,""endLine"":2385}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2389,""endLine"":2395}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2403,""endLine"":2407}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2411,""endLine"":2417}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2430,""endLine"":2437}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2445,""endLine"":2449}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2453,""endLine"":2458}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2460,""endLine"":2467}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2471,""endLine"":2476}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2486,""endLine"":2491}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2493,""endLine"":2499}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2526,""endLine"":2529}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2533,""endLine"":2537}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2539,""endLine"":2541}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2545,""endLine"":2549}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2551,""endLine"":2554}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2556,""endLine"":2560}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2562,""endLine"":2565}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2569,""endLine"":2573}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2575,""endLine"":2577}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2581,""endLine"":2586}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2588,""endLine"":2592}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2594,""endLine"":2598}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2602,""endLine"":2611}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2613,""endLine"":2619}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2632,""endLine"":2637}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2641,""endLine"":2643}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2644,""endLine"":2646}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2650,""endLine"":2659}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2670,""endLine"":2681}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2699,""endLine"":2714}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2724,""endLine"":2734}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2748,""endLine"":2754}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2836,""endLine"":2838}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2853,""endLine"":2856}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2862,""endLine"":2864}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2957,""endLine"":2964}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2968,""endLine"":2971}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3413,""endLine"":3416}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3497,""endLine"":3500}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3800,""endLine"":3802}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3821,""endLine"":3823}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":91,""endLine"":94}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":95,""endLine"":100}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1760,""endLine"":1762}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1895,""endLine"":1896}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3168,""endLine"":3168}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3183,""endLine"":3183}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3978,""endLine"":3979}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":509,""endLine"":535}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":570,""endLine"":600}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":1606,""endLine"":1630}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3079,""endLine"":3094}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3502,""endLine"":3518}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":4011,""endLine"":4046}]",,556.0,117.0
test/errors-spec.js,AnonymousTest,"[{""startLine"":219,""endLine"":223}]",,50.0,26.0
test/errors-spec.js,IdenticalTestDescription,"[{""startLine"":214,""endLine"":218}]",,50.0,26.0
