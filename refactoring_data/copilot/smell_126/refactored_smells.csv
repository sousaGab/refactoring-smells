file,type,smells,frame,itCount,describeCount
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 20, 'column': 8, 'index': 1016}","  18 |     it(""should not parse Latin-1 outside \\text{} with strict"", function() {
  19 |         const chars = 'ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ';
> 20 |         for (const ch of chars) {
     |        ^ Conditional Test Logic
  21 |             expect(ch).not.toParse(strictSettings);
  22 |         }
  23 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 144, 'column': 8, 'index': 5144}","  142 |
  143 |     it(""supportedCodepoint() should return the correct values"", () => {
> 144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |        ^ Conditional Test Logic
  145 |             expect(supportedCodepoint(codepoint)).toBe(
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 152, 'column': 15, 'index': 5441}","  150 |
  151 |     it(""scriptFromCodepoint() should return correct values"", () => {
> 152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |               ^ Conditional Test Logic
  153 |             const character = String.fromCharCode(codepoint);
  154 |             const script = scriptFromCodepoint(codepoint);
  155 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 156, 'column': 12, 'index': 5635}","  154 |             const script = scriptFromCodepoint(codepoint);
  155 |
> 156 |             for (const scriptName of scriptNames) {
      |            ^ Conditional Test Logic
  157 |                 if (scriptRegExps[scriptName].test(character)) {
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 157, 'column': 16, 'index': 5691}","  155 |
  156 |             for (const scriptName of scriptNames) {
> 157 |                 if (scriptRegExps[scriptName].test(character)) {
      |                ^ Conditional Test Logic
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;
  160 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 158, 'column': 20, 'index': 5760}","  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {
> 158 |                     expect(script).toEqual(scriptName);
      |                    ^ Duplicate Assert
  159 |                     continue outer;
  160 |                 }
  161 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 163, 'column': 12, 'index': 5877}","  161 |             }
  162 |
> 163 |             expect(script).toBe(null);
      |            ^ Duplicate Assert
  164 |             expect(supportedCodepoint(codepoint)).toBe(false);
  165 |         }
  166 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 154, 'column': 27, 'index': 5590}","  152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
  153 |             const character = String.fromCharCode(codepoint);
> 154 |             const script = scriptFromCodepoint(codepoint);
      |                           ^ Eager Test
  155 |
  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Eager Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 145, 'column': 19, 'index': 5223}","  143 |     it(""supportedCodepoint() should return the correct values"", () => {
  144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
> 145 |             expect(supportedCodepoint(codepoint)).toBe(
      |                   ^ Lazy Test
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );
  148 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Lazy Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 7}","   5 |
   6 | describe(""unicode"", function() {
>  7 |     it(""should build Latin-1 inside \\text{}"", function() {
     |    ^ Unknown Test
   8 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}`
   9 |             .toBuild();
  10 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 12}","  10 |     });
  11 |
> 12 |     it(""should build Latin-1 inside \\text{} like accent commands"", function() {
     |    ^ Unknown Test
  13 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}`
  14 |             .toParseLike`\text{\`A\'A\^A\~A\""A\r A\`E\'E\^E\""E\`I\'I\^I\""I\~N\`O\'O\^O\~O\""O\`U\'U\^U\""U\'Y\`a\'a\^a\~a\""a\r a\`e\'e\^e\""e\`ı\'ı\^ı\""ı\~n\`o\'o\^o\~o\""o\`u\'u\^u\""u\'y\""y\c C\c c}`;
  15 |         // TODO(edemaine): A few characters don't have analogs yet.",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 25}","  23 |     });
  24 |
> 25 |     it(""should build Latin-1 outside \\text{}"", function() {
     |    ^ Unknown Test
  26 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ`
  27 |             .toBuild(nonstrictSettings);
  28 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 30}","  28 |     });
  29 |
> 30 |     it(""should build all lower case Greek letters"", function() {
     |    ^ Unknown Test
  31 |         expect`αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω`.toBuild();
  32 |     });
  33 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 34}","  32 |     });
  33 |
> 34 |     it(""should build math upper case Greek letters"", function() {
     |    ^ Unknown Test
  35 |         expect`ΓΔΘΛΞΠΣΥΦΨΩ`.toBuild();
  36 |     });
  37 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 38}","  36 |     });
  37 |
> 38 |     it(""should build Cyrillic inside \\text{}"", function() {
     |    ^ Unknown Test
  39 |         expect`\text{БГДЖЗЙЛФЦШЫЮЯ}`.toBuild();
  40 |     });
  41 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 42}","  40 |     });
  41 |
> 42 |     it(""should build Cyrillic outside \\text{}"", function() {
     |    ^ Unknown Test
  43 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.toBuild(nonstrictSettings);
  44 |     });
  45 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 46}","  44 |     });
  45 |
> 46 |     it(""should not parse Cyrillic outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  47 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.not.toParse(strictSettings);
  48 |     });
  49 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 50}","  48 |     });
  49 |
> 50 |     it(""should build CJK inside \\text{}"", function() {
     |    ^ Unknown Test
  51 |         expect`\text{私はバナナです}`.toBuild();
  52 |         expect`\text{여보세요}`.toBuild();
  53 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 55}","  53 |     });
  54 |
> 55 |     it(""should build CJK outside \\text{}"", function() {
     |    ^ Unknown Test
  56 |         expect`私はバナナです`.toBuild(nonstrictSettings);
  57 |         expect`여보세요`.toBuild(nonstrictSettings);
  58 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 60}","  58 |     });
  59 |
> 60 |     it(""should not parse CJK outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  61 |         expect`私はバナナです。`.not.toParse(strictSettings);
  62 |         expect`여보세요`.not.toParse(strictSettings);
  63 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 65}","  63 |     });
  64 |
> 65 |     it(""should build Devanagari inside \\text{}"", function() {
     |    ^ Unknown Test
  66 |         expect`\text{नमस्ते}`.toBuild();
  67 |     });
  68 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 69}","  67 |     });
  68 |
> 69 |     it(""should build Devanagari outside \\text{}"", function() {
     |    ^ Unknown Test
  70 |         expect`नमस्ते`.toBuild(nonstrictSettings);
  71 |     });
  72 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 73}","  71 |     });
  72 |
> 73 |     it(""should not parse Devanagari outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  74 |         expect`नमस्ते`.not.toParse(strictSettings);
  75 |     });
  76 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 77}","  75 |     });
  76 |
> 77 |     it(""should build Georgian inside \\text{}"", function() {
     |    ^ Unknown Test
  78 |         expect`\text{გამარჯობა}`.toBuild();
  79 |     });
  80 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 81}","  79 |     });
  80 |
> 81 |     it(""should build Georgian outside \\text{}"", function() {
     |    ^ Unknown Test
  82 |         expect`გამარჯობა`.toBuild(nonstrictSettings);
  83 |     });
  84 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 85}","  83 |     });
  84 |
> 85 |     it(""should not parse Georgian outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  86 |         expect`გამარჯობა`.not.toParse(strictSettings);
  87 |     });
  88 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 89}","  87 |     });
  88 |
> 89 |     it(""should build Armenian both inside and outside \\text{}"", function() {
     |    ^ Unknown Test
  90 |         expect`ԱԲԳաբգ`.toBuild(nonstrictSettings);
  91 |         expect`\text{ԱԲԳաբգ}`.toBuild(nonstrictSettings);
  92 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 94}","  92 |     });
  93 |
> 94 |     it(""should build extended Latin characters inside \\text{}"", function() {
     |    ^ Unknown Test
  95 |         expect`\text{ěščřžůřťďňőİı}`.toBuild();
  96 |     });
  97 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 98}","   96 |     });
   97 |
>  98 |     it(""should not parse extended Latin outside \\text{} with strict"", function() {
      |    ^ Unknown Test
   99 |         expect`ěščřžůřťďňőİı`.not.toParse(strictSettings);
  100 |     });
  101 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 102}","  100 |     });
  101 |
> 102 |     it(""should not allow emoji in strict mode"", function() {
      |    ^ Unknown Test
  103 |         expect`✌`.not.toParse(strictSettings);
  104 |         expect`\text{✌}`.not.toParse(strictSettings);
  105 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 113}","  111 |     });
  112 |
> 113 |     it(""should allow emoji outside strict mode"", function() {
      |    ^ Unknown Test
  114 |         expect`✌`.toWarn();
  115 |         expect`\text{✌}`.toWarn();
  116 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 4, 'column': 4, 'index': 98}","  2 |
  3 | describe(""Screenshotter item"", function() {
> 4 |     for (const key in data) {
    |    ^ Conditional Test Logic
  5 |         if (data.hasOwnProperty(key)) {
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 5, 'column': 8, 'index': 132}","  3 | describe(""Screenshotter item"", function() {
  4 |     for (const key in data) {
> 5 |         if (data.hasOwnProperty(key)) {
    |        ^ Conditional Test Logic
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {
  8 |                 expect(item.tex).toBuild({",,
/home/gabriel/Desktop/research/projects/katex/test/mathml-spec.js,Conditional Test Logic,"{'line': 9, 'column': 4, 'index': 300}","   7 | const getMathML = function(expr, settings = new Settings()) {
   8 |     let startStyle = Style.TEXT;
>  9 |     if (settings.displayMode) {
     |    ^ Conditional Test Logic
  10 |         startStyle = Style.DISPLAY;
  11 |     }
  12 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 74, 'column': 8, 'index': 1999}","  72 |         const parse = getParsed(expression);
  73 |
> 74 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  75 |             const group = parse[i];
  76 |             expect(group.type).toEqual(""atom"");
  77 |             expect(group.family).toEqual(""bin"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 94, 'column': 8, 'index': 2594}","  92 |         const parse = getParsed(expression);
  93 |
> 94 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  95 |             let group = parse[i];
  96 |             if (group.type === ""htmlmathml"") {
  97 |                 expect(group.html).toHaveLength(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 96, 'column': 12, 'index': 2681}","  94 |         for (let i = 0; i < parse.length; i++) {
  95 |             let group = parse[i];
> 96 |             if (group.type === ""htmlmathml"") {
     |            ^ Conditional Test Logic
  97 |                 expect(group.html).toHaveLength(1);
  98 |                 group = group.html[0];
  99 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 100, 'column': 12, 'index': 2833}","   98 |                 group = group.html[0];
   99 |             }
> 100 |             if (group.type === ""mclass"") {
      |            ^ Conditional Test Logic
  101 |                 expect(group.mclass).toEqual(""mrel"");
  102 |             } else {
  103 |                 expect(group.type).toEqual(""atom"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 133, 'column': 8, 'index': 3849}","  131 |         const parse = getParsed(expression);
  132 |
> 133 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  134 |             const group = parse[i];
  135 |             expect(group.type).toEqual(""atom"");
  136 |             expect(group.family).toEqual(""punct"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 151, 'column': 8, 'index': 4310}","  149 |         const parse = getParsed(expression);
  150 |
> 151 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  152 |             const group = parse[i];
  153 |             expect(group.type).toEqual(""atom"");
  154 |             expect(group.family).toEqual(""open"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 169, 'column': 8, 'index': 4773}","  167 |         const parse = getParsed(expression);
  168 |
> 169 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  170 |             const group = parse[i];
  171 |             expect(group.type).toEqual(""atom"");
  172 |             expect(group.family).toEqual(""close"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1267, 'column': 4, 'index': 40573}","  1265 |     ];
  1266 |
> 1267 |     for (const [actual, expected] of cases) {
       |    ^ Conditional Test Logic
  1268 |         it(`should build ""${actual}"" like ""${expected}""`, () => {
  1269 |             expect(actual).toBuildLike(expected);
  1270 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1416, 'column': 8, 'index': 45819}","  1414 |         ];
  1415 |
> 1416 |         for (let i = 0; i < missingGroups.length; i++) {
       |        ^ Conditional Test Logic
  1417 |             expect(missingGroups[i]).not.toParse();
  1418 |         }
  1419 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1443, 'column': 8, 'index': 46780}","  1441 |         ];
  1442 |
> 1443 |         for (let i = 0; i < badArguments.length; i++) {
       |        ^ Conditional Test Logic
  1444 |             expect(badArguments[i]).not.toParse();
  1445 |         }
  1446 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1461, 'column': 8, 'index': 47346}","  1459 |         ];
  1460 |
> 1461 |         for (let i = 0; i < goodArguments.length; i++) {
       |        ^ Conditional Test Logic
  1462 |             expect(goodArguments[i]).toParse();
  1463 |         }
  1464 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1474, 'column': 8, 'index': 47702}","  1472 |         ];
  1473 |
> 1474 |         for (let i = 0; i < badSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1475 |             expect(badSupSubscripts[i]).not.toParse();
  1476 |         }
  1477 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1487, 'column': 8, 'index': 48081}","  1485 |         ];
  1486 |
> 1487 |         for (let i = 0; i < goodSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1488 |             expect(goodSupSubscripts[i]).toParse();
  1489 |         }
  1490 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1525, 'column': 8, 'index': 49313}","  1523 |         ];
  1524 |
> 1525 |         for (let i = 0; i < badLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1526 |             expect(badLeftArguments[i]).not.toParse();
  1527 |         }
  1528 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1539, 'column': 8, 'index': 49790}","  1537 |         ];
  1538 |
> 1539 |         for (let i = 0; i < goodLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1540 |             expect(goodLeftArguments[i]).toParse();
  1541 |         }
  1542 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 2177, 'column': 8, 'index': 77740}","  2175 |
  2176 |     it(""should throw Error when HTML attribute name is invalid"", function() {
> 2177 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
       |        ^ Conditional Test Logic
  2178 |             try {
  2179 |                 katex.renderToString(
  2180 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 3840, 'column': 4, 'index': 141677}","  3838 | describe(""leqno and fleqn rendering options"", () => {
  3839 |     const expr = r`\tag{hi}x+y`;
> 3840 |     for (const opt of [""leqno"", ""fleqn""]) {
       |    ^ Conditional Test Logic
  3841 |         it(`should not add ${opt} class by default`, () => {
  3842 |             const settings = new Settings({displayMode: true});
  3843 |             const built = katex.__renderToDomTree(expr, settings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4245, 'column': 8, 'index': 158617}","  4243 |         // add eastern arabic numbers to symbols table
  4244 |         // these symbols are ۰۱۲۳۴۵۶۷۸۹ and ٠١٢٣٤٥٦٧٨٩
> 4245 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4246 |             const persianNum = String.fromCharCode(0x0660 + number);
  4247 |             katex.__defineSymbol(
  4248 |                 ""math"", fontName, ""textord"", persianNum, persianNum);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4264, 'column': 8, 'index': 159563}","  4262 |         const mockMetrics = {};
  4263 |         // mock font metrics for the symbols that we added previously
> 4264 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4265 |             mockMetrics[0x0660 + number] = [-0.00244140625, 0.6875, 0, 0];
  4266 |             mockMetrics[0x06F0 + number] = [-0.00244140625, 0.6875, 0, 0];
  4267 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 579, 'column': 8, 'index': 17239}","  577 |         parse = getParsed(simpleOver)[0];
  578 |
> 579 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  580 |         expect(parse.numer).toBeDefined();
  581 |         expect(parse.denom).toBeDefined();
  582 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 579, 'column': 8, 'index': 17239}","  577 |         parse = getParsed(simpleOver)[0];
  578 |
> 579 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  580 |         expect(parse.numer).toBeDefined();
  581 |         expect(parse.denom).toBeDefined();
  582 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 580, 'column': 8, 'index': 17286}","  578 |
  579 |         expect(parse.type).toEqual(""genfrac"");
> 580 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  581 |         expect(parse.denom).toBeDefined();
  582 |
  583 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 580, 'column': 8, 'index': 17286}","  578 |
  579 |         expect(parse.type).toEqual(""genfrac"");
> 580 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  581 |         expect(parse.denom).toBeDefined();
  582 |
  583 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 581, 'column': 8, 'index': 17329}","  579 |         expect(parse.type).toEqual(""genfrac"");
  580 |         expect(parse.numer).toBeDefined();
> 581 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  582 |
  583 |         parse = getParsed(complexOver)[0];
  584 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 581, 'column': 8, 'index': 17329}","  579 |         expect(parse.type).toEqual(""genfrac"");
  580 |         expect(parse.numer).toBeDefined();
> 581 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  582 |
  583 |         parse = getParsed(complexOver)[0];
  584 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 585, 'column': 8, 'index': 17417}","  583 |         parse = getParsed(complexOver)[0];
  584 |
> 585 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  586 |         expect(parse.numer).toBeDefined();
  587 |         expect(parse.denom).toBeDefined();
  588 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 585, 'column': 8, 'index': 17417}","  583 |         parse = getParsed(complexOver)[0];
  584 |
> 585 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  586 |         expect(parse.numer).toBeDefined();
  587 |         expect(parse.denom).toBeDefined();
  588 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 586, 'column': 8, 'index': 17464}","  584 |
  585 |         expect(parse.type).toEqual(""genfrac"");
> 586 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  587 |         expect(parse.denom).toBeDefined();
  588 |
  589 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 586, 'column': 8, 'index': 17464}","  584 |
  585 |         expect(parse.type).toEqual(""genfrac"");
> 586 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  587 |         expect(parse.denom).toBeDefined();
  588 |
  589 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 587, 'column': 8, 'index': 17507}","  585 |         expect(parse.type).toEqual(""genfrac"");
  586 |         expect(parse.numer).toBeDefined();
> 587 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  588 |
  589 |         const parseBraceFrac = getParsed(braceFrac)[0];
  590 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 587, 'column': 8, 'index': 17507}","  585 |         expect(parse.type).toEqual(""genfrac"");
  586 |         expect(parse.numer).toBeDefined();
> 587 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  588 |
  589 |         const parseBraceFrac = getParsed(braceFrac)[0];
  590 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1644, 'column': 8, 'index': 53559}","  1642 |         expect(bbBody).toHaveLength(3);
  1643 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1644 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1645 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1646 |         expect(bbBody[2].type).toEqual(""font"");
  1647 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1644, 'column': 8, 'index': 53559}","  1642 |         expect(bbBody).toHaveLength(3);
  1643 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1644 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1645 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1646 |         expect(bbBody[2].type).toEqual(""font"");
  1647 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1646, 'column': 8, 'index': 53657}","  1644 |         expect(bbBody[2].type).toEqual(""font"");
  1645 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1646 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1647 |     });
  1648 |
  1649 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1646, 'column': 8, 'index': 53657}","  1644 |         expect(bbBody[2].type).toEqual(""font"");
  1645 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1646 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1647 |     });
  1648 |
  1649 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1839, 'column': 8, 'index': 61212}","  1837 |     it(""should render \\text{R\\textit{S}T} with the correct fonts"", function() {
  1838 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
> 1839 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
       |        ^ Duplicate Assert
  1840 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
  1841 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1842 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1840, 'column': 8, 'index': 61279}","  1838 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
  1839 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
> 1840 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
       |        ^ Duplicate Assert
  1841 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1842 |     });
  1843 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1841, 'column': 8, 'index': 61353}","  1839 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
  1840 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
> 1841 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
       |        ^ Duplicate Assert
  1842 |     });
  1843 |
  1844 |     it(""should render \\textbf{R } with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1865, 'column': 8, 'index': 62544}","  1863 |     it(""should render \\textsf{\\textit{R}G\\textbf{B}} with the correct font"", function() {
  1864 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
> 1865 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
       |        ^ Duplicate Assert
  1866 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
  1867 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1868 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1866, 'column': 8, 'index': 62625}","  1864 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
  1865 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
> 1866 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
       |        ^ Duplicate Assert
  1867 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1868 |     });
  1869 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1867, 'column': 8, 'index': 62699}","  1865 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
  1866 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
> 1867 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
       |        ^ Duplicate Assert
  1868 |     });
  1869 |
  1870 |     it(""should render \\textsf{\\textbf{$\\mathrm{A}$}} with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1888, 'column': 8, 'index': 63774}","  1886 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1887 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1888 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1889 |
  1890 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1891 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1888, 'column': 8, 'index': 63774}","  1886 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1887 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1888 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1889 |
  1890 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1891 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1892, 'column': 8, 'index': 63964}","  1890 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1891 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1892 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1893 |     });
  1894 |
  1895 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1892, 'column': 8, 'index': 63964}","  1890 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1891 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1892 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1893 |     });
  1894 |
  1895 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2085, 'column': 8, 'index': 74237}","  2083 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2084 |             ""</mstyle>"";
> 2085 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2086 |
  2087 |         // reverse the order of the commands
  2088 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2085, 'column': 8, 'index': 74237}","  2083 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2084 |             ""</mstyle>"";
> 2085 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2086 |
  2087 |         // reverse the order of the commands
  2088 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2094, 'column': 8, 'index': 74598}","  2092 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2093 |             ""</mstyle>"";
> 2094 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2095 |     });
  2096 |
  2097 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2094, 'column': 8, 'index': 74598}","  2092 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2093 |             ""</mstyle>"";
> 2094 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2095 |     });
  2096 |
  2097 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2108, 'column': 8, 'index': 75159}","  2106 |         const tree = getParsed(tex);
  2107 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
> 2108 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
       |        ^ Duplicate Assert
  2109 |         expect(markup).toContain(
  2110 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2111 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2109, 'column': 8, 'index': 75230}","  2107 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2108 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
> 2109 |         expect(markup).toContain(
       |        ^ Duplicate Assert
  2110 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2111 |     });
  2112 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2206, 'column': 8, 'index': 78793}","  2204 |         const built = getBuilt`+ x`;
  2205 |
> 2206 |         expect(built[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2207 |         expect(built[0].classes).not.toContain(""mbin"");
  2208 |     });
  2209 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2207, 'column': 8, 'index': 78845}","  2205 |
  2206 |         expect(built[0].classes).toContain(""mord"");
> 2207 |         expect(built[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2208 |     });
  2209 |
  2210 |     it(""should create ords after some other objects"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2241, 'column': 8, 'index': 80361}","  2239 |         const markup = katex.renderToString(r`\sigma^2`);
  2240 |         expect(markup.indexOf(""<span"")).toBe(0);
> 2241 |         expect(markup).toContain(""\u03c3"");  // sigma
       |        ^ Duplicate Assert
  2242 |         expect(markup).toContain(""margin-right"");
  2243 |         expect(markup).not.toContain(""marginRight"");
  2244 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2242, 'column': 8, 'index': 80415}","  2240 |         expect(markup.indexOf(""<span"")).toBe(0);
  2241 |         expect(markup).toContain(""\u03c3"");  // sigma
> 2242 |         expect(markup).toContain(""margin-right"");
       |        ^ Duplicate Assert
  2243 |         expect(markup).not.toContain(""marginRight"");
  2244 |     });
  2245 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2243, 'column': 8, 'index': 80465}","  2241 |         expect(markup).toContain(""\u03c3"");  // sigma
  2242 |         expect(markup).toContain(""margin-right"");
> 2243 |         expect(markup).not.toContain(""marginRight"");
       |        ^ Duplicate Assert
  2244 |     });
  2245 |
  2246 |     it(""generates both MathML and HTML"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2249, 'column': 8, 'index': 80632}","  2247 |         const markup = katex.renderToString(""a"");
  2248 |
> 2249 |         expect(markup).toContain(""<span"");
       |        ^ Duplicate Assert
  2250 |         expect(markup).toContain(""<math"");
  2251 |     });
  2252 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2250, 'column': 8, 'index': 80675}","  2248 |
  2249 |         expect(markup).toContain(""<span"");
> 2250 |         expect(markup).toContain(""<math"");
       |        ^ Duplicate Assert
  2251 |     });
  2252 | });
  2253 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2302, 'column': 8, 'index': 82138}","  2300 |     it(""should produce mords"", function() {
  2301 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
> 2302 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2303 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2304 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2305 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2303, 'column': 8, 'index': 82201}","  2301 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
  2302 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
> 2303 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2304 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2305 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2306 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2304, 'column': 8, 'index': 82268}","  2302 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
  2303 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
> 2304 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2305 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2306 |     });
  2307 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2305, 'column': 8, 'index': 82333}","  2303 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2304 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
> 2305 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2306 |     });
  2307 | });
  2308 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2320, 'column': 8, 'index': 82850}","  2318 |     it(""should produce mords"", function() {
  2319 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
> 2320 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2321 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2322 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2323 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2321, 'column': 8, 'index': 82917}","  2319 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
  2320 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
> 2321 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2322 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2323 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2324 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2322, 'column': 8, 'index': 82988}","  2320 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
  2321 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
> 2322 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2323 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2324 |     });
  2325 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2323, 'column': 8, 'index': 83057}","  2321 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2322 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
> 2323 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2324 |     });
  2325 | });
  2326 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2337, 'column': 8, 'index': 83575}","  2335 |     it(""should produce mords"", function() {
  2336 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
> 2337 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2338 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2339 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2340 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2338, 'column': 8, 'index': 83649}","  2336 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
  2337 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
> 2338 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2339 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2340 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2341 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2339, 'column': 8, 'index': 83727}","  2337 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
  2338 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
> 2339 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2340 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2341 |     });
  2342 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2340, 'column': 8, 'index': 83803}","  2338 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2339 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
> 2340 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2341 |     });
  2342 | });
  2343 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2384, 'column': 8, 'index': 85292}","  2382 |     it(""should produce mords"", function() {
  2383 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
> 2384 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2385 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2386 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2387 |         expect(getBuilt`\underrightarrow )^2`[0].classes)",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2385, 'column': 8, 'index': 85367}","  2383 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
  2384 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
> 2385 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2386 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2387 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2388 |             .not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2386, 'column': 8, 'index': 85446}","  2384 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
  2385 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
> 2386 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2387 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2388 |             .not.toContain(""mclose"");
  2389 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2387, 'column': 8, 'index': 85523}","  2385 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2386 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
> 2387 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
       |        ^ Duplicate Assert
  2388 |             .not.toContain(""mclose"");
  2389 |     });
  2390 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2426, 'column': 8, 'index': 86826}","  2424 |         expect(getBuilt`\xrightarrow x`[0].classes).toContain(""mrel"");
  2425 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
> 2426 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2427 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2428 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2429 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2427, 'column': 8, 'index': 86897}","  2425 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
  2426 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
> 2427 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2428 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2429 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2430 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2428, 'column': 8, 'index': 86972}","  2426 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
  2427 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
> 2428 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2429 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2430 |     });
  2431 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2429, 'column': 8, 'index': 87045}","  2427 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2428 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
> 2429 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2430 |     });
  2431 | });
  2432 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2467, 'column': 8, 'index': 88290}","  2465 |         expect(getBuilt`\overbrace x`[0].classes).toContain(""mord"");
  2466 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
> 2467 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2468 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2469 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2470 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2468, 'column': 8, 'index': 88359}","  2466 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
  2467 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
> 2468 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2469 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2470 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2471 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2469, 'column': 8, 'index': 88432}","  2467 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
  2468 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
> 2469 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2470 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2471 |     });
  2472 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2470, 'column': 8, 'index': 88503}","  2468 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2469 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
> 2470 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2471 |     });
  2472 | });
  2473 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2499, 'column': 8, 'index': 89339}","  2497 |     it(""should produce mords"", function() {
  2498 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
> 2499 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2500 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2501 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2502 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2500, 'column': 8, 'index': 89404}","  2498 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
  2499 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
> 2500 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2501 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2502 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2503 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2501, 'column': 8, 'index': 89473}","  2499 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
  2500 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
> 2501 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2502 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2503 |     });
  2504 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2502, 'column': 8, 'index': 89540}","  2500 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2501 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
> 2502 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2503 |     });
  2504 | });
  2505 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2619, 'column': 8, 'index': 93329}","  2617 |     it(""should produce mords"", function() {
  2618 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
> 2619 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2620 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2621 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2622 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2620, 'column': 8, 'index': 93395}","  2618 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
  2619 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
> 2620 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2621 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2622 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2623 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2621, 'column': 8, 'index': 93465}","  2619 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
  2620 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
> 2621 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2622 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2623 |     });
  2624 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2622, 'column': 8, 'index': 93533}","  2620 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2621 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
> 2622 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2623 |     });
  2624 | });
  2625 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3470, 'column': 8, 'index': 126673}","  3468 |     it(""\\char produces literal characters"", () => {
  3469 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3470 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Duplicate Assert
  3471 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3472 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3473 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3471, 'column': 8, 'index': 126724}","  3469 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3470 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3471 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Duplicate Assert
  3472 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3473 |         expect`\char`.not.toParse();
  3474 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3472, 'column': 8, 'index': 126776}","  3470 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3471 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3472 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Duplicate Assert
  3473 |         expect`\char`.not.toParse();
  3474 |         expect(""\\char`"").not.toParse();
  3475 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4104, 'column': 8, 'index': 152898}","  4102 |         const example = exp32 + r`\a{1}`;
  4103 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
> 4104 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4105 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4106 |     });
  4107 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4105, 'column': 8, 'index': 152965}","  4103 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
  4104 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4105 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4106 |     });
  4107 |
  4108 |     it(""should count correctly with Unicode sub/superscripts"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4111, 'column': 8, 'index': 153234}","  4109 |         const example = exp32 + r`\def+{\a{1}}x⁺x⁺x⁺x⁺`;
  4110 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
> 4111 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4112 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4113 |     });
  4114 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4112, 'column': 8, 'index': 153301}","  4110 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
  4111 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4112 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4113 |     });
  4114 | });
  4115 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4154, 'column': 8, 'index': 154948}","  4152 |         // Ensure newlines appear outside base spans (because, in this regexp,
  4153 |         // base span occurs immediately after each newline span).
> 4154 |         expect(markup).toMatch(
       |        ^ Duplicate Assert
  4155 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
  4156 |         expect(markup).toMatchSnapshot();
  4157 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4156, 'column': 8, 'index': 155088}","  4154 |         expect(markup).toMatch(
  4155 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
> 4156 |         expect(markup).toMatchSnapshot();
       |        ^ Duplicate Assert
  4157 |     });
  4158 | });
  4159 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 514, 'column': 27, 'index': 15124}","  512 |
  513 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 514 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Eager Test
  515 |
  516 |         expect(dfracParse.type).toEqual(""genfrac"");
  517 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 520, 'column': 27, 'index': 15332}","  518 |         expect(dfracParse.denom).toBeDefined();
  519 |
> 520 |         const tfracParse = getParsed(tfracExpression)[0];
      |                           ^ Eager Test
  521 |
  522 |         expect(tfracParse.type).toEqual(""genfrac"");
  523 |         expect(tfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 526, 'column': 27, 'index': 15540}","  524 |         expect(tfracParse.denom).toBeDefined();
  525 |
> 526 |         const cfracParse = getParsed(cfracExpression)[0];
      |                           ^ Eager Test
  527 |
  528 |         expect(cfracParse.type).toEqual(""genfrac"");
  529 |         expect(cfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 532, 'column': 29, 'index': 15750}","  530 |         expect(cfracParse.denom).toBeDefined();
  531 |
> 532 |         const genfracParse = getParsed(genfrac1)[0];
      |                             ^ Eager Test
  533 |
  534 |         expect(genfracParse.type).toEqual(""genfrac"");
  535 |         expect(genfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 577, 'column': 16, 'index': 17204}","  575 |         let parse;
  576 |
> 577 |         parse = getParsed(simpleOver)[0];
      |                ^ Eager Test
  578 |
  579 |         expect(parse.type).toEqual(""genfrac"");
  580 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 583, 'column': 16, 'index': 17381}","  581 |         expect(parse.denom).toBeDefined();
  582 |
> 583 |         parse = getParsed(complexOver)[0];
      |                ^ Eager Test
  584 |
  585 |         expect(parse.type).toEqual(""genfrac"");
  586 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 589, 'column': 31, 'index': 17574}","  587 |         expect(parse.denom).toBeDefined();
  588 |
> 589 |         const parseBraceFrac = getParsed(braceFrac)[0];
      |                               ^ Eager Test
  590 |
  591 |         expect(parseBraceFrac.type).toEqual(""genfrac"");
  592 |         expect(parseBraceFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 597, 'column': 31, 'index': 17905}","  595 |         expect(parseBraceFrac.rightDelim).toBeDefined();
  596 |
> 597 |         const parseBrackFrac = getParsed(brackFrac)[0];
      |                               ^ Eager Test
  598 |
  599 |         expect(parseBrackFrac.type).toEqual(""genfrac"");
  600 |         expect(parseBrackFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 874, 'column': 23, 'index': 27866}","  872 |
  873 |     it(""should correctly extract the custom color"", function() {
> 874 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Eager Test
  875 |         const parse2 = getParsed(customColorExpression2)[0];
  876 |         const parse3 = getParsed(customColorExpression3)[0];
  877 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 875, 'column': 23, 'index': 27927}","  873 |     it(""should correctly extract the custom color"", function() {
  874 |         const parse1 = getParsed(customColorExpression1)[0];
> 875 |         const parse2 = getParsed(customColorExpression2)[0];
      |                       ^ Eager Test
  876 |         const parse3 = getParsed(customColorExpression3)[0];
  877 |
  878 |         expect(parse1.color).toEqual(""#fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 876, 'column': 23, 'index': 27988}","  874 |         const parse1 = getParsed(customColorExpression1)[0];
  875 |         const parse2 = getParsed(customColorExpression2)[0];
> 876 |         const parse3 = getParsed(customColorExpression3)[0];
      |                       ^ Eager Test
  877 |
  878 |         expect(parse1.color).toEqual(""#fA6"");
  879 |         expect(parse2.color).toEqual(""#fA6fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 974, 'column': 26, 'index': 30938}","  972 |
  973 |     it(""should produce the correct direction delimiter"", function() {
> 974 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Eager Test
  975 |         const rightParse = getParsed(bigDelim)[0];
  976 |
  977 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 975, 'column': 27, 'index': 30992}","  973 |     it(""should produce the correct direction delimiter"", function() {
  974 |         const leftParse = getParsed(normalDelim)[0];
> 975 |         const rightParse = getParsed(bigDelim)[0];
      |                           ^ Eager Test
  976 |
  977 |         expect(leftParse.mclass).toEqual(""mopen"");
  978 |         expect(rightParse.mclass).toEqual(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 982, 'column': 27, 'index': 31220}","  980 |
  981 |     it(""should parse the correct size delimiter"", function() {
> 982 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Eager Test
  983 |         const bigParse = getParsed(bigDelim)[0];
  984 |
  985 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 983, 'column': 25, 'index': 31272}","  981 |     it(""should parse the correct size delimiter"", function() {
  982 |         const smallParse = getParsed(normalDelim)[0];
> 983 |         const bigParse = getParsed(bigDelim)[0];
      |                         ^ Eager Test
  984 |
  985 |         expect(smallParse.size).toEqual(1);
  986 |         expect(bigParse.size).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1063, 'column': 24, 'index': 33638}","  1061 |
  1062 |     it(""should list the correct units"", function() {
> 1063 |         const emParse = getParsed(emRule)[0];
       |                        ^ Eager Test
  1064 |         const exParse = getParsed(exRule)[0];
  1065 |
  1066 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1064, 'column': 24, 'index': 33684}","  1062 |     it(""should list the correct units"", function() {
  1063 |         const emParse = getParsed(emRule)[0];
> 1064 |         const exParse = getParsed(exRule)[0];
       |                        ^ Eager Test
  1065 |
  1066 |         expect(emParse.width.unit).toEqual(""em"");
  1067 |         expect(emParse.height.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1101, 'column': 24, 'index': 34854}","  1099 |
  1100 |     it(""should list the correct units"", function() {
> 1101 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1102 |         const exParse = getParsed(exKern)[0];
  1103 |         const muParse = getParsed(muKern)[0];
  1104 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1102, 'column': 24, 'index': 34900}","  1100 |     it(""should list the correct units"", function() {
  1101 |         const emParse = getParsed(emKern)[0];
> 1102 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1103 |         const muParse = getParsed(muKern)[0];
  1104 |         const abParse = getParsed(abKern)[1];
  1105 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1103, 'column': 24, 'index': 34946}","  1101 |         const emParse = getParsed(emKern)[0];
  1102 |         const exParse = getParsed(exKern)[0];
> 1103 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1104 |         const abParse = getParsed(abKern)[1];
  1105 |
  1106 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1104, 'column': 24, 'index': 34992}","  1102 |         const exParse = getParsed(exKern)[0];
  1103 |         const muParse = getParsed(muKern)[0];
> 1104 |         const abParse = getParsed(abKern)[1];
       |                        ^ Eager Test
  1105 |
  1106 |         expect(emParse.dimension.unit).toEqual(""em"");
  1107 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1139, 'column': 24, 'index': 36137}","  1137 |
  1138 |     it(""should list the correct units"", function() {
> 1139 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1140 |         const exParse = getParsed(exKern)[0];
  1141 |         const muParse = getParsed(muKern)[0];
  1142 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1140, 'column': 24, 'index': 36183}","  1138 |     it(""should list the correct units"", function() {
  1139 |         const emParse = getParsed(emKern)[0];
> 1140 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1141 |         const muParse = getParsed(muKern)[0];
  1142 |         const abParse1 = getParsed(abKern1)[1];
  1143 |         const abParse2 = getParsed(abKern2)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1141, 'column': 24, 'index': 36229}","  1139 |         const emParse = getParsed(emKern)[0];
  1140 |         const exParse = getParsed(exKern)[0];
> 1141 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1142 |         const abParse1 = getParsed(abKern1)[1];
  1143 |         const abParse2 = getParsed(abKern2)[1];
  1144 |         const abParse3 = getParsed(abKern3)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1142, 'column': 25, 'index': 36276}","  1140 |         const exParse = getParsed(exKern)[0];
  1141 |         const muParse = getParsed(muKern)[0];
> 1142 |         const abParse1 = getParsed(abKern1)[1];
       |                         ^ Eager Test
  1143 |         const abParse2 = getParsed(abKern2)[1];
  1144 |         const abParse3 = getParsed(abKern3)[1];
  1145 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1143, 'column': 25, 'index': 36324}","  1141 |         const muParse = getParsed(muKern)[0];
  1142 |         const abParse1 = getParsed(abKern1)[1];
> 1143 |         const abParse2 = getParsed(abKern2)[1];
       |                         ^ Eager Test
  1144 |         const abParse3 = getParsed(abKern3)[1];
  1145 |
  1146 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1144, 'column': 25, 'index': 36372}","  1142 |         const abParse1 = getParsed(abKern1)[1];
  1143 |         const abParse2 = getParsed(abKern2)[1];
> 1144 |         const abParse3 = getParsed(abKern3)[1];
       |                         ^ Eager Test
  1145 |
  1146 |         expect(emParse.dimension.unit).toEqual(""em"");
  1147 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1155, 'column': 25, 'index': 36827}","  1153 |
  1154 |     it(""should parse elements on either side of a kern"", function() {
> 1155 |         const abParse1 = getParsed(abKern1);
       |                         ^ Eager Test
  1156 |         const abParse2 = getParsed(abKern2);
  1157 |         const abParse3 = getParsed(abKern3);
  1158 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1156, 'column': 25, 'index': 36872}","  1154 |     it(""should parse elements on either side of a kern"", function() {
  1155 |         const abParse1 = getParsed(abKern1);
> 1156 |         const abParse2 = getParsed(abKern2);
       |                         ^ Eager Test
  1157 |         const abParse3 = getParsed(abKern3);
  1158 |
  1159 |         expect(abParse1).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1157, 'column': 25, 'index': 36917}","  1155 |         const abParse1 = getParsed(abKern1);
  1156 |         const abParse2 = getParsed(abKern2);
> 1157 |         const abParse3 = getParsed(abKern3);
       |                         ^ Eager Test
  1158 |
  1159 |         expect(abParse1).toHaveLength(3);
  1160 |         expect(abParse1[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2080, 'column': 19, 'index': 74008}","  2078 |     it(""should render a combination of font and color changes"", function() {
  2079 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2080 |         let tree = getParsed(tex);
       |                   ^ Eager Test
  2081 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2082 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2083 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2089, 'column': 15, 'index': 74377}","  2087 |         // reverse the order of the commands
  2088 |         tex = r`\mathbb{\textcolor{blue}{R}}`;
> 2089 |         tree = getParsed(tex);
       |               ^ Eager Test
  2090 |         markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2091 |         node = ""<mstyle mathcolor=\""blue\"">"" +
  2092 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2997, 'column': 24, 'index': 108232}","  2995 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2996 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2997 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  2998 |         expect(parsed1.href).toBe(url);
  2999 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3000 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2999, 'column': 24, 'index': 108352}","  2997 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  2998 |         expect(parsed1.href).toBe(url);
> 2999 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3000 |         expect(parsed2.href).toBe(url);
  3001 |     });
  3002 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3005, 'column': 24, 'index': 108582}","  3003 |     it(""should allow balanced braces in url"", function() {
  3004 |         const url = ""http://example.org/{{}t{oo}}"";
> 3005 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3006 |         expect(parsed1.href).toBe(url);
  3007 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3008 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3007, 'column': 24, 'index': 108702}","  3005 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  3006 |         expect(parsed1.href).toBe(url);
> 3007 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3008 |         expect(parsed2.href).toBe(url);
  3009 |     });
  3010 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3021, 'column': 24, 'index': 109356}","  3019 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3020 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3021 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3022 |         expect(parsed1.href).toBe(url);
  3023 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3024 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3023, 'column': 24, 'index': 109478}","  3021 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
  3022 |         expect(parsed1.href).toBe(url);
> 3023 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
       |                        ^ Eager Test
  3024 |         expect(parsed2.href).toBe(url);
  3025 |     });
  3026 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2178, 'column': 12, 'index': 77819}","  2176 |     it(""should throw Error when HTML attribute name is invalid"", function() {
  2177 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
> 2178 |             try {
       |            ^ Exception Handling
  2179 |                 katex.renderToString(
  2180 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);
  2181 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2743, 'column': 8, 'index': 97450}","  2741 | describe(""A parser error"", function() {
  2742 |     it(""should report the position of an error"", function() {
> 2743 |         try {
       |        ^ Exception Handling
  2744 |             parseTree(r`\sqrt}`, new Settings());
  2745 |         } catch (e) {
  2746 |             expect(e.position).toEqual(5);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3162, 'column': 8, 'index': 114915}","  3160 | describe(""ParseError properties"", function() {
  3161 |     it(""should contain affected position and length information"", function() {
> 3162 |         try {
       |        ^ Exception Handling
  3163 |             katex.renderToString(""1 + \\fraq{}{}"");
  3164 |
  3165 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3177, 'column': 8, 'index': 115578}","  3175 |
  3176 |     it(""should contain position and length information at end of input"", function() {
> 3177 |         try {
       |        ^ Exception Handling
  3178 |             katex.renderToString(""\\frac{}"");
  3179 |
  3180 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3192, 'column': 8, 'index': 116274}","  3190 |
  3191 |     it(""should contain no position and length information if unavailable"", function() {
> 3192 |         try {
       |        ^ Exception Handling
  3193 |             katex.renderToString(""\\verb|hello\nworld|"");
  3194 |
  3195 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 44, 'column': 22, 'index': 1243}","  42 |
  43 |     it(""should build a list of ords with correct type"", function() {
> 44 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  45 |
  46 |         parse.forEach((group) => {
  47 |             expect(group.type).toMatch(""ord"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 52, 'column': 22, 'index': 1463}","  50 |
  51 |     it(""should build a list of ords with correct length"", function() {
> 52 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  53 |
  54 |         expect(parse).toHaveLength(expression.length);
  55 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 58, 'column': 22, 'index': 1634}","  56 |
  57 |     it(""should parse the right number of ords"", function() {
> 58 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  59 |
  60 |         expect(parse).toHaveLength(expression.length);
  61 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 72, 'column': 22, 'index': 1967}","  70 |
  71 |     it(""should build a list of bins"", function() {
> 72 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  73 |
  74 |         for (let i = 0; i < parse.length; i++) {
  75 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 92, 'column': 22, 'index': 2562}","  90 |
  91 |     it(""should build a list of rels"", function() {
> 92 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  93 |
  94 |         for (let i = 0; i < parse.length; i++) {
  95 |             let group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 118, 'column': 32, 'index': 3463}","  116 |     it(""should return one group, not a fragment"", function() {
  117 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
> 118 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
      |                                ^ Lazy Test
  119 |         expect(mml.children.length).toEqual(1);
  120 |     });
  121 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 131, 'column': 22, 'index': 3817}","  129 |
  130 |     it(""should build a list of puncts"", function() {
> 131 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  132 |
  133 |         for (let i = 0; i < parse.length; i++) {
  134 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 149, 'column': 22, 'index': 4278}","  147 |
  148 |     it(""should build a list of opens"", function() {
> 149 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  150 |
  151 |         for (let i = 0; i < parse.length; i++) {
  152 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 167, 'column': 22, 'index': 4741}","  165 |
  166 |     it(""should build a list of closes"", function() {
> 167 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  168 |
  169 |         for (let i = 0; i < parse.length; i++) {
  170 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 498, 'column': 22, 'index': 14566}","  496 |
  497 |     it(""should produce a frac"", function() {
> 498 |         const parse = getParsed(expression)[0];
      |                      ^ Lazy Test
  499 |
  500 |         expect(parse.type).toEqual(""genfrac"");
  501 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 514, 'column': 27, 'index': 15124}","  512 |
  513 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 514 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Lazy Test
  515 |
  516 |         expect(dfracParse.type).toEqual(""genfrac"");
  517 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 577, 'column': 16, 'index': 17204}","  575 |         let parse;
  576 |
> 577 |         parse = getParsed(simpleOver)[0];
      |                ^ Lazy Test
  578 |
  579 |         expect(parse.type).toEqual(""genfrac"");
  580 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 607, 'column': 22, 'index': 18313}","  605 |
  606 |     it(""should create a numerator from the atoms before \\over"", function() {
> 607 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  608 |
  609 |         const numer = parse.numer;
  610 |         expect(numer.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 614, 'column': 22, 'index': 18530}","  612 |
  613 |     it(""should create a denominator from the atoms after \\over"", function() {
> 614 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  615 |
  616 |         const denom = parse.denom;
  617 |         expect(denom.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 622, 'column': 22, 'index': 18765}","  620 |     it(""should handle empty numerators"", function() {
  621 |         const emptyNumerator = r`\over x`;
> 622 |         const parse = getParsed(emptyNumerator)[0];
      |                      ^ Lazy Test
  623 |         expect(parse.type).toEqual(""genfrac"");
  624 |         expect(parse.numer).toBeDefined();
  625 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 630, 'column': 22, 'index': 19060}","  628 |     it(""should handle empty denominators"", function() {
  629 |         const emptyDenominator = r`1 \over`;
> 630 |         const parse = getParsed(emptyDenominator)[0];
      |                      ^ Lazy Test
  631 |         expect(parse.type).toEqual(""genfrac"");
  632 |         expect(parse.numer).toBeDefined();
  633 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 638, 'column': 22, 'index': 19385}","  636 |     it(""should handle \\displaystyle correctly"", function() {
  637 |         const displaystyleExpression = r`\displaystyle 1 \over 2`;
> 638 |         const parse = getParsed(displaystyleExpression)[0];
      |                      ^ Lazy Test
  639 |         expect(parse.type).toEqual(""genfrac"");
  640 |         expect(parse.numer.body[0].type).toEqual(""styling"");
  641 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 651, 'column': 22, 'index': 19937}","  649 |     it(""should handle nested factions"", function() {
  650 |         const nestedOverExpression = r`{1 \over 2} \over 3`;
> 651 |         const parse = getParsed(nestedOverExpression)[0];
      |                      ^ Lazy Test
  652 |         expect(parse.type).toEqual(""genfrac"");
  653 |         expect(parse.numer.body[0].type).toEqual(""genfrac"");
  654 |         expect(parse.numer.body[0].numer.body[0].text).toEqual(""1"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 700, 'column': 22, 'index': 21647}","  698 |
  699 |     it(""should produce a sizing node"", function() {
> 700 |         const parse = getParsed(sizeExpression)[0];
      |                      ^ Lazy Test
  701 |
  702 |         expect(parse.type).toEqual(""sizing"");
  703 |         expect(parse.size).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 724, 'column': 22, 'index': 22456}","  722 |
  723 |     it(""should produce a text"", function() {
> 724 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  725 |
  726 |         expect(parse.type).toEqual(""text"");
  727 |         expect(parse.body).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 731, 'column': 22, 'index': 22671}","  729 |
  730 |     it(""should produce textords instead of mathords"", function() {
> 731 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  732 |         const group = parse.body;
  733 |
  734 |         expect(group[0].type).toEqual(""textord"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 754, 'column': 22, 'index': 23334}","  752 |
  753 |     it(""should contract spaces"", function() {
> 754 |         const parse = getParsed(spaceTextExpression)[0];
      |                      ^ Lazy Test
  755 |         const group = parse.body;
  756 |
  757 |         expect(group.length).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 773, 'column': 22, 'index': 24010}","  771 |
  772 |     it(""should ignore a space before the text group"", function() {
> 773 |         const parse = getParsed(leadingSpaceTextExpression)[0];
      |                      ^ Lazy Test
  774 |         // [m, o, o]
  775 |         expect(parse.body).toHaveLength(3);
  776 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 860, 'column': 22, 'index': 27397}","  858 |
  859 |     it(""should build a color node"", function() {
> 860 |         const parse = getParsed(colorExpression)[0];
      |                      ^ Lazy Test
  861 |
  862 |         expect(parse.type).toEqual(""color"");
  863 |         expect(parse.color).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 874, 'column': 23, 'index': 27866}","  872 |
  873 |     it(""should correctly extract the custom color"", function() {
> 874 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Lazy Test
  875 |         const parse2 = getParsed(customColorExpression2)[0];
  876 |         const parse3 = getParsed(customColorExpression3)[0];
  877 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 933, 'column': 22, 'index': 29792}","  931 |
  932 |     it(""should produce spacing in math mode"", function() {
> 933 |         const parse = getParsed(mathTie);
      |                      ^ Lazy Test
  934 |
  935 |         expect(parse[1].type).toEqual(""spacing"");
  936 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 939, 'column': 21, 'index': 29952}","  937 |
  938 |     it(""should produce spacing in text mode"", function() {
> 939 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  940 |         const parse = text.body;
  941 |
  942 |         expect(parse[1].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 946, 'column': 21, 'index': 30157}","  944 |
  945 |     it(""should not contract with spaces in text mode"", function() {
> 946 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  947 |         const parse = text.body;
  948 |
  949 |         expect(parse[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 968, 'column': 22, 'index': 30754}","  966 |
  967 |     it(""should produce a delimsizing"", function() {
> 968 |         const parse = getParsed(normalDelim)[0];
      |                      ^ Lazy Test
  969 |
  970 |         expect(parse.type).toEqual(""delimsizing"");
  971 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 974, 'column': 26, 'index': 30938}","  972 |
  973 |     it(""should produce the correct direction delimiter"", function() {
> 974 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Lazy Test
  975 |         const rightParse = getParsed(bigDelim)[0];
  976 |
  977 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 982, 'column': 27, 'index': 31220}","  980 |
  981 |     it(""should parse the correct size delimiter"", function() {
> 982 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Lazy Test
  983 |         const bigParse = getParsed(bigDelim)[0];
  984 |
  985 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 998, 'column': 22, 'index': 31635}","   996 |
   997 |     it(""should produce an overline"", function() {
>  998 |         const parse = getParsed(overline)[0];
       |                      ^ Lazy Test
   999 |
  1000 |         expect(parse.type).toEqual(""overline"");
  1001 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1057, 'column': 22, 'index': 33485}","  1055 |
  1056 |     it(""should produce a rule"", function() {
> 1057 |         const parse = getParsed(emRule)[0];
       |                      ^ Lazy Test
  1058 |
  1059 |         expect(parse.type).toEqual(""rule"");
  1060 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1063, 'column': 24, 'index': 33638}","  1061 |
  1062 |     it(""should list the correct units"", function() {
> 1063 |         const emParse = getParsed(emRule)[0];
       |                        ^ Lazy Test
  1064 |         const exParse = getParsed(exRule)[0];
  1065 |
  1066 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1074, 'column': 32, 'index': 34008}","  1072 |
  1073 |     it(""should parse the number correctly"", function() {
> 1074 |         const hardNumberParse = getParsed(hardNumberRule)[0];
       |                                ^ Lazy Test
  1075 |
  1076 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
  1077 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1101, 'column': 24, 'index': 34854}","  1099 |
  1100 |     it(""should list the correct units"", function() {
> 1101 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1102 |         const exParse = getParsed(exKern)[0];
  1103 |         const muParse = getParsed(muKern)[0];
  1104 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1139, 'column': 24, 'index': 36137}","  1137 |
  1138 |     it(""should list the correct units"", function() {
> 1139 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1140 |         const exParse = getParsed(exKern)[0];
  1141 |         const muParse = getParsed(muKern)[0];
  1142 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1155, 'column': 25, 'index': 36827}","  1153 |
  1154 |     it(""should parse elements on either side of a kern"", function() {
> 1155 |         const abParse1 = getParsed(abKern1);
       |                         ^ Lazy Test
  1156 |         const abParse2 = getParsed(abKern2);
  1157 |         const abParse3 = getParsed(abKern3);
  1158 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1186, 'column': 24, 'index': 37902}","  1184 |
  1185 |     it(""should handle whitespace"", function() {
> 1186 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
       |                        ^ Lazy Test
  1187 |
  1188 |         expect(abParse).toHaveLength(3);
  1189 |         expect(abParse[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1204, 'column': 22, 'index': 38469}","  1202 |
  1203 |     it(""should produce a leftright"", function() {
> 1204 |         const parse = getParsed(normalLeftRight)[0];
       |                      ^ Lazy Test
  1205 |
  1206 |         expect(parse.type).toEqual(""leftright"");
  1207 |         expect(parse.left).toEqual(""("");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1381, 'column': 22, 'index': 44834}","  1379 |
  1380 |     it(""should produce sqrts"", function() {
> 1381 |         const parse = getParsed(sqrt)[0];
       |                      ^ Lazy Test
  1382 |
  1383 |         expect(parse.type).toEqual(""sqrt"");
  1384 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1580, 'column': 22, 'index': 51254}","  1578 |     it(""should only change the style within its group"", function() {
  1579 |         const text = r`a b { c d \displaystyle e f } g h`;
> 1580 |         const parse = getParsed(text);
       |                      ^ Lazy Test
  1581 |
  1582 |         const displayNode = parse[2].body[2];
  1583 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2080, 'column': 19, 'index': 74008}","  2078 |     it(""should render a combination of font and color changes"", function() {
  2079 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2080 |         let tree = getParsed(tex);
       |                   ^ Lazy Test
  2081 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2082 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2083 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2099, 'column': 21, 'index': 74749}","  2097 |     it(""should render text as <mtext>"", function() {
  2098 |         const tex = r`\text{for }`;
> 2099 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2100 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2101 |         expect(markup).toContain(""<mtext>for\u00a0</mtext>"");
  2102 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2106, 'column': 21, 'index': 75061}","  2104 |     it(""should render math within text as side-by-side children"", function() {
  2105 |         const tex = r`\text{graph: $y = mx + b$}`;
> 2106 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2107 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2108 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
  2109 |         expect(markup).toContain(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2121, 'column': 15, 'index': 75721}","  2119 |
  2120 |     it(""should produce mords"", function() {
> 2121 |         expect(getBuilt(img, trustSettings)[0].classes).toContain(""mord"");
       |               ^ Lazy Test
  2122 |     });
  2123 |
  2124 |     it(""should not render without trust setting"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2125, 'column': 22, 'index': 75875}","  2123 |
  2124 |     it(""should not render without trust setting"", function() {
> 2125 |         const built = getBuilt(img);
       |                      ^ Lazy Test
  2126 |         expect(built).toMatchSnapshot();
  2127 |     });
  2128 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2130, 'column': 22, 'index': 76018}","  2128 |
  2129 |     it(""should render with trust setting"", function() {
> 2130 |         const built = getBuilt(img, trustSettings);
       |                      ^ Lazy Test
  2131 |         expect(built).toMatchSnapshot();
  2132 |     });
  2133 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2156, 'column': 22, 'index': 76964}","  2154 |
  2155 |     it(""should set HTML attributes"", function() {
> 2156 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2157 |         expect(built[0].attributes.id).toMatch(""bar"");
  2158 |         expect(built[1].classes).toContain(""foo"");
  2159 |         expect(built[2].attributes.style).toMatch(""color: red"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2167, 'column': 22, 'index': 77371}","  2165 |
  2166 |     it(""should not affect spacing"", function() {
> 2167 |         const built = getBuilt(""\\htmlId{a}{x+}y"", trustNonStrictSettings);
       |                      ^ Lazy Test
  2168 |         expect(built).toMatchSnapshot();
  2169 |     });
  2170 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2172, 'column': 22, 'index': 77564}","  2170 |
  2171 |     it(""should render with trust and strict setting"", function() {
> 2172 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2173 |         expect(built).toMatchSnapshot();
  2174 |     });
  2175 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2347, 'column': 21, 'index': 84066}","  2345 |     it(""should properly render stretchy accents"", function() {
  2346 |         const tex = `\\widetilde{ABCD}`;
> 2347 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2348 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2349 |         expect(markup).toContain('<mo stretchy=""true"">~</mo>');
  2350 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2997, 'column': 24, 'index': 108232}","  2995 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2996 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2997 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  2998 |         expect(parsed1.href).toBe(url);
  2999 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3000 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3005, 'column': 24, 'index': 108582}","  3003 |     it(""should allow balanced braces in url"", function() {
  3004 |         const url = ""http://example.org/{{}t{oo}}"";
> 3005 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3006 |         expect(parsed1.href).toBe(url);
  3007 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3008 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3021, 'column': 24, 'index': 109356}","  3019 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3020 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3021 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3022 |         expect(parsed1.href).toBe(url);
  3023 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3024 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3037, 'column': 22, 'index': 110021}","  3035 |
  3036 |     it(""should not affect spacing around"", function() {
> 3037 |         const built = getBuilt(""a\\href{http://example.com/}{+b}"", trustSettings);
       |                      ^ Lazy Test
  3038 |         expect(built).toMatchSnapshot();
  3039 |     });
  3040 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3047, 'column': 23, 'index': 110395}","  3045 |
  3046 |     it(""should allow explicitly allowed protocols"", () => {
> 3047 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3048 |             ""\\href{ftp://x}{foo}"",
  3049 |             new Settings({trust: (context) => context.protocol === ""ftp""}),
  3050 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3055, 'column': 23, 'index': 110674}","  3053 |
  3054 |     it(""should allow all protocols when trust option is true"", () => {
> 3055 |         const parsed = getParsed(""\\href{ftp://x}{foo}"", trustSettings);
       |                       ^ Lazy Test
  3056 |         expect(parsed).toMatchSnapshot();
  3057 |     });
  3058 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3060, 'column': 23, 'index': 110865}","  3058 |
  3059 |     it(""should not allow explicitly disallowed protocols"", () => {
> 3060 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3061 |             ""\\href{javascript:alert('x')}{foo}"",
  3062 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3063 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3068, 'column': 23, 'index': 111170}","  3066 |
  3067 |     it(""should not allow explicitly uppercased disallowed protocols"", () => {
> 3068 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3069 |             ""\\href{JavaScript:alert('x')}{foo}"",
  3070 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3071 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3144, 'column': 28, 'index': 114251}","  3142 |
  3143 |     it(""should produce color nodes with a color value given by errorColor"", function() {
> 3144 |         const parsedInput = getParsed(r`\error`, noThrowSettings);
       |                            ^ Lazy Test
  3145 |         expect(parsedInput[0].type).toBe(""color"");
  3146 |         expect(parsedInput[0].color).toBe(errorColor);
  3147 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3150, 'column': 22, 'index': 114510}","  3148 |
  3149 |     it(""should build katex-error span for other type of KaTeX error"", function() {
> 3150 |         const built = getBuilt(`2^2^2`, noThrowSettings);
       |                      ^ Lazy Test
  3151 |         expect(built).toMatchSnapshot();
  3152 |     });
  3153 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3485, 'column': 27, 'index': 127268}","  3483 |         const parsedBare = getParsed`~`;
  3484 |         expect(parsedBare[0].type).toEqual(""spacing"");
> 3485 |         const parsedChar = getParsed(""\\char`\\~"");
       |                           ^ Lazy Test
  3486 |         expect(parsedChar[0].type).toEqual(""textord"");
  3487 |     });
  3488 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4057, 'column': 22, 'index': 151229}","  4055 |
  4056 |     it(""should clamp size when set"", function() {
> 4057 |         const built = getBuilt(rule, new Settings({maxSize: 5}))[0];
       |                      ^ Lazy Test
  4058 |         expect(built.style.borderRightWidth).toEqual(""5em"");
  4059 |         expect(built.style.borderTopWidth).toEqual(""5em"");
  4060 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4063, 'column': 22, 'index': 151485}","  4061 |
  4062 |     it(""should not clamp size when not set"", function() {
> 4063 |         const built = getBuilt(rule)[0];
       |                      ^ Lazy Test
  4064 |         expect(built.style.borderRightWidth).toEqual(""999em"");
  4065 |         expect(built.style.borderTopWidth).toEqual(""999em"");
  4066 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4069, 'column': 22, 'index': 151743}","  4067 |
  4068 |     it(""should make zero-width rules if a negative maxSize is passed"", function() {
> 4069 |         const built = getBuilt(rule, new Settings({maxSize: -5}))[0];
       |                      ^ Lazy Test
  4070 |         expect(built.style.borderRightWidth).toEqual(""0em"");
  4071 |         expect(built.style.borderTopWidth).toEqual(""0em"");
  4072 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 97, 'column': 48, 'index': 2764}","   95 |             let group = parse[i];
   96 |             if (group.type === ""htmlmathml"") {
>  97 |                 expect(group.html).toHaveLength(1);
      |                                                ^ Magic Number
   98 |                 group = group.html[0];
   99 |             }
  100 |             if (group.type === ""mclass"") {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 119, 'column': 44, 'index': 3555}","  117 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
  118 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
> 119 |         expect(mml.children.length).toEqual(1);
      |                                            ^ Magic Number
  120 |     });
  121 | });
  122 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 351, 'column': 35, 'index': 10225}","  349 |         const parse = getParsed`{xy}`;
  350 |
> 351 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  352 |
  353 |         const ord = parse[0];
  354 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 373, 'column': 35, 'index': 10827}","  371 |         const parse = getParsed`\begingroup xy \endgroup`;
  372 |
> 373 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  374 |
  375 |         const ord = parse[0];
  376 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 396, 'column': 35, 'index': 11454}","  394 |         const parse = getParsed`\Large abc`;
  395 |
> 396 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  397 |
  398 |         const sizing = parse[0];
  399 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 408, 'column': 35, 'index': 11777}","  406 |         const parse = getParsed`a \Large abc`;
  407 |
> 408 |         expect(parse).toHaveLength(2);
      |                                   ^ Magic Number
  409 |
  410 |         const sizing = parse[1];
  411 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 413, 'column': 41, 'index': 11904}","  411 |
  412 |         expect(sizing.type).toEqual(""sizing"");
> 413 |         expect(sizing.body).toHaveLength(3);
      |                                         ^ Magic Number
  414 |     });
  415 |
  416 |     it(""should stop at the ends of groups"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 423, 'column': 41, 'index': 12187}","  421 |
  422 |         expect(sizing.type).toEqual(""sizing"");
> 423 |         expect(sizing.body).toHaveLength(1);
      |                                         ^ Magic Number
  424 |     });
  425 |
  426 |     describe(""within optional groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 610, 'column': 40, 'index': 18416}","  608 |
  609 |         const numer = parse.numer;
> 610 |         expect(numer.body).toHaveLength(4);
      |                                        ^ Magic Number
  611 |     });
  612 |
  613 |     it(""should create a denominator from the atoms after \\over"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 617, 'column': 40, 'index': 18633}","  615 |
  616 |         const denom = parse.denom;
> 617 |         expect(denom.body).toHaveLength(4);
      |                                        ^ Magic Number
  618 |     });
  619 |
  620 |     it(""should handle empty numerators"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 757, 'column': 37, 'index': 23441}","  755 |         const group = parse.body;
  756 |
> 757 |         expect(group.length).toEqual(4);
      |                                     ^ Magic Number
  758 |         expect(group[0].type).toEqual(""spacing"");
  759 |         expect(group[1].type).toEqual(""textord"");
  760 |         expect(group[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 775, 'column': 40, 'index': 24113}","  773 |         const parse = getParsed(leadingSpaceTextExpression)[0];
  774 |         // [m, o, o]
> 775 |         expect(parse.body).toHaveLength(3);
      |                                        ^ Magic Number
  776 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");
  777 |     });
  778 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 985, 'column': 40, 'index': 31337}","  983 |         const bigParse = getParsed(bigDelim)[0];
  984 |
> 985 |         expect(smallParse.size).toEqual(1);
      |                                        ^ Magic Number
  986 |         expect(bigParse.size).toEqual(4);
  987 |     });
  988 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 986, 'column': 38, 'index': 31379}","  984 |
  985 |         expect(smallParse.size).toEqual(1);
> 986 |         expect(bigParse.size).toEqual(4);
      |                                      ^ Magic Number
  987 |     });
  988 | });
  989 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1076, 'column': 57, 'index': 34096}","  1074 |         const hardNumberParse = getParsed(hardNumberRule)[0];
  1075 |
> 1076 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
       |                                                         ^ Magic Number
  1077 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
  1078 |     });
  1079 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1077, 'column': 58, 'index': 34161}","  1075 |
  1076 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
> 1077 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
       |                                                          ^ Magic Number
  1078 |     });
  1079 |
  1080 |     it(""should parse negative sizes"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1124, 'column': 51, 'index': 35706}","  1122 |     it(""should parse positive sizes"", function() {
  1123 |         const parse = getParsed`\kern{+1em}`[0];
> 1124 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1125 |     });
  1126 | });
  1127 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1159, 'column': 38, 'index': 36976}","  1157 |         const abParse3 = getParsed(abKern3);
  1158 |
> 1159 |         expect(abParse1).toHaveLength(3);
       |                                      ^ Magic Number
  1160 |         expect(abParse1[0].text).toEqual(""a"");
  1161 |         expect(abParse1[2].text).toEqual(""b"");
  1162 |         expect(abParse2).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1162, 'column': 38, 'index': 37112}","  1160 |         expect(abParse1[0].text).toEqual(""a"");
  1161 |         expect(abParse1[2].text).toEqual(""b"");
> 1162 |         expect(abParse2).toHaveLength(3);
       |                                      ^ Magic Number
  1163 |         expect(abParse2[0].text).toEqual(""a"");
  1164 |         expect(abParse2[2].text).toEqual(""b"");
  1165 |         expect(abParse3).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1165, 'column': 38, 'index': 37248}","  1163 |         expect(abParse2[0].text).toEqual(""a"");
  1164 |         expect(abParse2[2].text).toEqual(""b"");
> 1165 |         expect(abParse3).toHaveLength(3);
       |                                      ^ Magic Number
  1166 |         expect(abParse3[0].text).toEqual(""a"");
  1167 |         expect(abParse3[2].text).toEqual(""b"");
  1168 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1182, 'column': 51, 'index': 37817}","  1180 |     it(""should parse positive sizes"", function() {
  1181 |         const parse = getParsed`\kern+1em`[0];
> 1182 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1183 |     });
  1184 |
  1185 |     it(""should handle whitespace"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1188, 'column': 37, 'index': 37979}","  1186 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
  1187 |
> 1188 |         expect(abParse).toHaveLength(3);
       |                                     ^ Magic Number
  1189 |         expect(abParse[0].text).toEqual(""a"");
  1190 |         expect(abParse[1].dimension.unit).toEqual(""mu"");
  1191 |         expect(abParse[2].text).toEqual(""b"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1341, 'column': 37, 'index': 43275}","  1339 |     it(""should eat a final newline"", function() {
  1340 |         const m3 = getParsed`\begin{matrix}a&b\\ c&d \\ \end{matrix}`[0];
> 1341 |         expect(m3.body).toHaveLength(2);
       |                                     ^ Magic Number
  1342 |     });
  1343 |
  1344 |     it(""should grab \\arraystretch"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1588, 'column': 41, 'index': 51461}","  1586 |         const displayBody = displayNode.body;
  1587 |
> 1588 |         expect(displayBody).toHaveLength(2);
       |                                         ^ Magic Number
  1589 |         expect(displayBody[0].text).toEqual(""e"");
  1590 |     });
  1591 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1642, 'column': 36, 'index': 53496}","  1640 |
  1641 |         const bbBody = nestedParse.body.body;
> 1642 |         expect(bbBody).toHaveLength(3);
       |                                    ^ Magic Number
  1643 |         expect(bbBody[0].type).toEqual(""mathord"");
  1644 |         expect(bbBody[2].type).toEqual(""font"");
  1645 |         expect(bbBody[2].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1654, 'column': 34, 'index': 54024}","  1652 |         expect(colorMathbbParse.color).toEqual(""blue"");
  1653 |         const body = colorMathbbParse.body;
> 1654 |         expect(body).toHaveLength(1);
       |                                  ^ Magic Number
  1655 |         expect(body[0].type).toEqual(""font"");
  1656 |         expect(body[0].font).toEqual(""mathbb"");
  1657 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1667, 'column': 42, 'index': 54488}","  1665 |         expect(bf.type).toEqual(""font"");
  1666 |         expect(bf.font).toEqual(""mathbf"");
> 1667 |         expect(bf.body.body).toHaveLength(3);
       |                                          ^ Magic Number
  1668 |         expect(bf.body.body[0].text).toEqual(""a"");
  1669 |         expect(bf.body.body[1].type).toEqual(""font"");
  1670 |         expect(bf.body.body[1].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2240, 'column': 45, 'index': 80349}","  2238 |         // Just a few quick sanity checks here...
  2239 |         const markup = katex.renderToString(r`\sigma^2`);
> 2240 |         expect(markup.indexOf(""<span"")).toBe(0);
       |                                             ^ Magic Number
  2241 |         expect(markup).toContain(""\u03c3"");  // sigma
  2242 |         expect(markup).toContain(""margin-right"");
  2243 |         expect(markup).not.toContain(""marginRight"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2746, 'column': 39, 'index': 97567}","  2744 |             parseTree(r`\sqrt}`, new Settings());
  2745 |         } catch (e) {
> 2746 |             expect(e.position).toEqual(5);
       |                                       ^ Magic Number
  2747 |         }
  2748 |     });
  2749 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2880, 'column': 37, 'index': 101862}","  2878 |     it(""should not eat the last row when its first cell is empty"", function() {
  2879 |         const ae = getParsed`\begin{aligned}&E_1 & (1)\\&E_2 & (2)\\&E_3 & (3)\end{aligned}`[0];
> 2880 |         expect(ae.body).toHaveLength(3);
       |                                     ^ Magic Number
  2881 |     });
  2882 | });
  2883 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3171, 'column': 40, 'index': 115419}","  3169 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");
  3170 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
> 3171 |             expect(error.position).toBe(4);
       |                                        ^ Magic Number
  3172 |             expect(error.length).toBe(5);
  3173 |         }
  3174 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3172, 'column': 38, 'index': 115461}","  3170 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
  3171 |             expect(error.position).toBe(4);
> 3172 |             expect(error.length).toBe(5);
       |                                      ^ Magic Number
  3173 |         }
  3174 |     });
  3175 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3186, 'column': 40, 'index': 116113}","  3184 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");
  3185 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
> 3186 |             expect(error.position).toBe(7);
       |                                        ^ Magic Number
  3187 |             expect(error.length).toBe(0);
  3188 |         }
  3189 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3187, 'column': 38, 'index': 116155}","  3185 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
  3186 |             expect(error.position).toBe(7);
> 3187 |             expect(error.length).toBe(0);
       |                                      ^ Magic Number
  3188 |         }
  3189 |     });
  3190 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 765}","  763 |
  764 |     it(""should handle backslash followed by newline"", () => {
> 765 |         expect(""\\text{\\ \t\r \n \t\r  }"").toParseLike`\text{\ }`;
      |        ^ Redundant Assertion
  766 |     });
  767 |
  768 |     it(""should accept math mode tokens after its argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1736}","  1734 | describe(""A comment parser"", function() {
  1735 |     it(""should parse comments at the end of a line"", () => {
> 1736 |         expect(""a^2 + b^2 = c^2 % Pythagoras' Theorem\n"").toParse();
       |        ^ Redundant Assertion
  1737 |     });
  1738 |
  1739 |     it(""should parse comments at the start of a line"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1740}","  1738 |
  1739 |     it(""should parse comments at the start of a line"", () => {
> 1740 |         expect(""% comment\n"").toParse();
       |        ^ Redundant Assertion
  1741 |     });
  1742 |
  1743 |     it(""should parse multiple lines of comments in a row"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1744}","  1742 |
  1743 |     it(""should parse multiple lines of comments in a row"", () => {
> 1744 |         expect(""% comment 1\n% comment 2\n"").toParse();
       |        ^ Redundant Assertion
  1745 |     });
  1746 |
  1747 |     it(""should parse comments between subscript and superscript"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1748}","  1746 |
  1747 |     it(""should parse comments between subscript and superscript"", () => {
> 1748 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
       |        ^ Redundant Assertion
  1749 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
  1750 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1751 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1749}","  1747 |     it(""should parse comments between subscript and superscript"", () => {
  1748 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
> 1749 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
       |        ^ Redundant Assertion
  1750 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1751 |     });
  1752 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1750}","  1748 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
  1749 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
> 1750 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
       |        ^ Redundant Assertion
  1751 |     });
  1752 |
  1753 |     it(""should parse comments in size and color groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1754}","  1752 |
  1753 |     it(""should parse comments in size and color groups"", () => {
> 1754 |         expect(""\\kern{1 %kern\nem}"").toParse();
       |        ^ Redundant Assertion
  1755 |         expect(""\\kern1 %kern\nem"").toParse();
  1756 |         expect(""\\color{#f00%red\n}"").toParse();
  1757 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1755}","  1753 |     it(""should parse comments in size and color groups"", () => {
  1754 |         expect(""\\kern{1 %kern\nem}"").toParse();
> 1755 |         expect(""\\kern1 %kern\nem"").toParse();
       |        ^ Redundant Assertion
  1756 |         expect(""\\color{#f00%red\n}"").toParse();
  1757 |     });
  1758 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1756}","  1754 |         expect(""\\kern{1 %kern\nem}"").toParse();
  1755 |         expect(""\\kern1 %kern\nem"").toParse();
> 1756 |         expect(""\\color{#f00%red\n}"").toParse();
       |        ^ Redundant Assertion
  1757 |     });
  1758 |
  1759 |     it(""should parse comments before an expression"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1760}","  1758 |
  1759 |     it(""should parse comments before an expression"", () => {
> 1760 |         expect(""%comment\n{2}"").toParseLike`{2}`;
       |        ^ Redundant Assertion
  1761 |     });
  1762 |
  1763 |     it(""should parse comments before and between \\hline"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1770}","  1768 |
  1769 |     it(""should parse comments in the macro definition"", () => {
> 1770 |         expect(""\\def\\foo{1 %}\n2}\n\\foo"").toParseLike`12`;
       |        ^ Redundant Assertion
  1771 |     });
  1772 |
  1773 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1774}","  1772 |
  1773 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {
> 1774 |         expect(""\\def\\foo{1\n2}\nx %\\foo\n"").toParseLike`x`;
       |        ^ Redundant Assertion
  1775 |     });
  1776 |
  1777 |     it(""should not parse a comment without newline in strict mode"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1783}","  1781 |
  1782 |     it(""should not produce or consume space"", () => {
> 1783 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
       |        ^ Redundant Assertion
  1784 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
  1785 |     });
  1786 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1784}","  1782 |     it(""should not produce or consume space"", () => {
  1783 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
> 1784 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
       |        ^ Redundant Assertion
  1785 |     });
  1786 |
  1787 |     it(""should not include comments in the output"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1788}","  1786 |
  1787 |     it(""should not include comments in the output"", () => {
> 1788 |         expect(""5 % comment\n"").toParseLike`5`;
       |        ^ Redundant Assertion
  1789 |     });
  1790 | });
  1791 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 16, 'line': 2183}","  2181 |
  2182 |                 // Render is expected to throw, so this should not be called.
> 2183 |                 expect(true).toBe(false);
       |                ^ Redundant Assertion
  2184 |             } catch (error) {
  2185 |                 expect(error).toBeInstanceOf(ParseError);
  2186 |                 const message =",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 2985}","  2983 |         expect`\href%end`.toParseLike(""\\href{%}end"", trustSettings);
  2984 |         expect`\url%end`.toParseLike(""\\url{%}end"", trustSettings);
> 2985 |         expect(""\\url%%end\n"").toParseLike(""\\url{%}"", trustSettings);
       |        ^ Redundant Assertion
  2986 |         expect`\url end`.toParseLike(""\\url{e}nd"", trustSettings);
  2987 |         expect`\url%end`.toParseLike(""\\url {%}end"", trustSettings);
  2988 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3028}","  3026 |
  3027 |     it(""should allow comments after URLs"", function() {
> 3028 |         expect(""\\url{http://example.com/}%comment\n"").toBuild();
       |        ^ Redundant Assertion
  3029 |     });
  3030 |
  3031 |     it(""should be marked up correctly"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3166}","  3164 |
  3165 |             // Render is expected to throw, so this should not be called.
> 3166 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3167 |         } catch (error) {
  3168 |             expect(error).toBeInstanceOf(ParseError);
  3169 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3181}","  3179 |
  3180 |             // Render is expected to throw, so this should not be called.
> 3181 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3182 |         } catch (error) {
  3183 |             expect(error).toBeInstanceOf(ParseError);
  3184 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3196}","  3194 |
  3195 |             // Render is expected to throw, so this should not be called.
> 3196 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3197 |         } catch (error) {
  3198 |             expect(error).toBeInstanceOf(ParseError);
  3199 |             expect(error.message).toBe(""KaTeX parse error: \\verb ended by end of line instead of matching delimiter"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3469}","  3467 |
  3468 |     it(""\\char produces literal characters"", () => {
> 3469 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
       |        ^ Redundant Assertion
  3470 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3471 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3472 |         expect(""\\char`\\%"").toParseLike`\char""25`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3470}","  3468 |     it(""\\char produces literal characters"", () => {
  3469 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3470 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Redundant Assertion
  3471 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3472 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3473 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3471}","  3469 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3470 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3471 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Redundant Assertion
  3472 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3473 |         expect`\char`.not.toParse();
  3474 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3472}","  3470 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3471 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3472 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Redundant Assertion
  3473 |         expect`\char`.not.toParse();
  3474 |         expect(""\\char`"").not.toParse();
  3475 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3474}","  3472 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3473 |         expect`\char`.not.toParse();
> 3474 |         expect(""\\char`"").not.toParse();
       |        ^ Redundant Assertion
  3475 |         expect`\char'`.not.toParse();
  3476 |         expect`\char""`.not.toParse();
  3477 |         expect`\char'a`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3938}","  3936 |
  3937 |     it(""should parse combining characters"", function() {
> 3938 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
       |        ^ Redundant Assertion
  3939 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
  3940 |     });
  3941 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3939}","  3937 |     it(""should parse combining characters"", function() {
  3938 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
> 3939 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
       |        ^ Redundant Assertion
  3940 |     });
  3941 |
  3942 |     it(""should parse multi-accented characters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3977}","  3975 |
  3976 |     it(""should parse symbols"", function() {
> 3977 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3978 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
  3979 |     });
  3980 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3978}","  3976 |     it(""should parse symbols"", function() {
  3977 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
> 3978 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3979 |     });
  3980 |
  3981 |     it(""should build Greek capital letters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3995}","  3993 |
  3994 |     it(""should build binary operators"", function() {
> 3995 |         expect(""±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞\u22C5\u2218\u2216\u2219"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3996 |     });
  3997 |
  3998 |     it(""should build common ords"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3999}","  3997 |
  3998 |     it(""should build common ords"", function() {
> 3999 |         expect(""§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  4000 |     });
  4001 |
  4002 |     it(""should build delimiters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4003}","  4001 |
  4002 |     it(""should build delimiters"", function() {
> 4003 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
       |        ^ Redundant Assertion
  4004 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4005 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4006 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4004}","  4002 |     it(""should build delimiters"", function() {
  4003 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
> 4004 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
       |        ^ Redundant Assertion
  4005 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4006 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4007 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4005}","  4003 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
  4004 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
> 4005 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
       |        ^ Redundant Assertion
  4006 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4007 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4008 |         expect`┌x┐ └x┘`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4006}","  4004 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4005 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
> 4006 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
       |        ^ Redundant Assertion
  4007 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4008 |         expect`┌x┐ └x┘`.toBuild();
  4009 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4007}","  4005 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4006 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
> 4007 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
       |        ^ Redundant Assertion
  4008 |         expect`┌x┐ └x┘`.toBuild();
  4009 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4010 |         expect(""\u27E6x\u27E7"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4009}","  4007 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4008 |         expect`┌x┐ └x┘`.toBuild();
> 4009 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
       |        ^ Redundant Assertion
  4010 |         expect(""\u27E6x\u27E7"").toBuild();
  4011 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4012 |         expect(""\\lBrace \\rBrace"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4010}","  4008 |         expect`┌x┐ └x┘`.toBuild();
  4009 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
> 4010 |         expect(""\u27E6x\u27E7"").toBuild();
       |        ^ Redundant Assertion
  4011 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4012 |         expect(""\\lBrace \\rBrace"").toBuild();
  4013 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4011}","  4009 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4010 |         expect(""\u27E6x\u27E7"").toBuild();
> 4011 |         expect(""\\llbracket \\rrbracket"").toBuild();
       |        ^ Redundant Assertion
  4012 |         expect(""\\lBrace \\rBrace"").toBuild();
  4013 |     });
  4014 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4012}","  4010 |         expect(""\u27E6x\u27E7"").toBuild();
  4011 |         expect(""\\llbracket \\rrbracket"").toBuild();
> 4012 |         expect(""\\lBrace \\rBrace"").toBuild();
       |        ^ Redundant Assertion
  4013 |     });
  4014 |
  4015 |     it(""should build some surrogate pairs"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4282, 'column': 19, 'index': 160351}","  4280 |             expect`\message{Hello, world}`.toParse();
  4281 |             // eslint-disable-next-line no-console
> 4282 |             expect(console.log).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4283 |         });
  4284 |     });
  4285 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4291, 'column': 19, 'index': 160716}","  4289 |             expect`\errmessage{Hello, world}`.toParse();
  4290 |             // eslint-disable-next-line no-console
> 4291 |             expect(console.error).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4292 |         });
  4293 |     });
  4294 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 23}","  21 |
  22 | describe(""A parser"", function() {
> 23 |     it(""should not fail on an empty string"", function() {
     |    ^ Unknown Test
  24 |         expect``.toParse(strictSettings);
  25 |     });
  26 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 27}","  25 |     });
  26 |
> 27 |     it(""should ignore whitespace"", function() {
     |    ^ Unknown Test
  28 |         expect`    x    y    `.toParseLike(""xy"", strictSettings);
  29 |     });
  30 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 31}","  29 |     });
  30 |
> 31 |     it(""should ignore whitespace in atom"", function() {
     |    ^ Unknown Test
  32 |         expect`    x   ^ y    `.toParseLike(""x^y"", strictSettings);
  33 |     });
  34 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 111}","  109 |
  110 | describe(""A mathinner parser"", function() {
> 111 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  112 |         expect`\mathinner{\langle{\psi}\rangle}`.toParse();
  113 |         expect`\frac 1 {\mathinner{\langle{\psi}\rangle}}`.toParse();
  114 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 178}","  176 |
  177 | describe(""A \\KaTeX parser"", function() {
> 178 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  179 |         expect`\KaTeX`.toParse();
  180 |     });
  181 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 184}","  182 |
  183 | describe(""A subscript and superscript parser"", function() {
> 184 |     it(""should not fail on superscripts"", function() {
      |    ^ Unknown Test
  185 |         expect`x^2`.toParse();
  186 |     });
  187 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 188}","  186 |     });
  187 |
> 188 |     it(""should not fail on subscripts"", function() {
      |    ^ Unknown Test
  189 |         expect`x_3`.toParse();
  190 |     });
  191 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 192}","  190 |     });
  191 |
> 192 |     it(""should not fail on both subscripts and superscripts"", function() {
      |    ^ Unknown Test
  193 |         expect`x^2_3`.toParse();
  194 |
  195 |         expect`x_2^3`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 198}","  196 |     });
  197 |
> 198 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  199 |         expect`^3`.toParse();
  200 |         expect`^3+`.toParse();
  201 |         expect`_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 242}","  240 |     });
  241 |
> 242 |     it(""should produce the same thing regardless of order"", function() {
      |    ^ Unknown Test
  243 |         expect`x^2_3`.toParseLike`x_3^2`;
  244 |     });
  245 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 246}","  244 |     });
  245 |
> 246 |     it(""should not parse double subscripts or superscripts"", function() {
      |    ^ Unknown Test
  247 |         expect`x^x^x`.not.toParse();
  248 |
  249 |         expect`x_x_x`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 260}","  258 |     });
  259 |
> 260 |     it(""should work correctly with {}s"", function() {
      |    ^ Unknown Test
  261 |         expect`x^{2+3}`.toParse();
  262 |
  263 |         expect`x_{3-2}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 278}","  276 |     });
  277 |
> 278 |     it(""should work with nested super/subscripts"", function() {
      |    ^ Unknown Test
  279 |         expect`x^{x^x}`.toParse();
  280 |         expect`x^{x_x}`.toParse();
  281 |         expect`x_{x^x}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 285}","  283 |     });
  284 |
> 285 |     it(""should work with Unicode (sub|super)script characters"", function() {
      |    ^ Unknown Test
  286 |         expect`A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃`.toParseLike`A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}`;
  287 |     });
  288 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 289}","  287 |     });
  288 |
> 289 |     it(""should not fail if \\relax is in an atom"", function() {
      |    ^ Unknown Test
  290 |         expect`\hskip1em\relax^2`.toParse(strictSettings);
  291 |     });
  292 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 293}","  291 |     });
  292 |
> 293 |     it(""should skip \\relax in super/subscripts"", function() {
      |    ^ Unknown Test
  294 |         expect`x^\relax 2`.toParseLike`x^2`;
  295 |         expect`x_\relax 2`.toParseLike`x_2`;
  296 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 300}","  298 |
  299 | describe(""A subscript and superscript tree-builder"", function() {
> 300 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  301 |         expect`^3`.toBuild();
  302 |         expect`_2`.toBuild();
  303 |         expect`^3_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 309}","  307 |
  308 | describe(""A parser with limit controls"", function() {
> 309 |     it(""should fail when the limit control is not preceded by an op node"", function() {
      |    ^ Unknown Test
  310 |         expect`3\nolimits_2^2`.not.toParse();
  311 |         expect`\sqrt\limits_2^2`.not.toParse();
  312 |         expect`45 +\nolimits 45`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 315}","  313 |     });
  314 |
> 315 |     it(""should parse when the limit control directly follows an op node"", function() {
      |    ^ Unknown Test
  316 |         expect`\int\limits_2^2 3`.toParse();
  317 |         expect`\sum\nolimits_3^4 4`.toParse();
  318 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 320}","  318 |     });
  319 |
> 320 |     it(""should parse when the limit control is in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  321 |         expect`\int_2^2\limits`.toParse();
  322 |         expect`\int^2\nolimits_2`.toParse();
  323 |         expect`\int_2\limits^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 326}","  324 |     });
  325 |
> 326 |     it(""should allow multiple limit controls in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  327 |         expect`\int_2\nolimits^2\limits 3`.toParse();
  328 |         expect`\int\nolimits\limits_2^2`.toParse();
  329 |         expect`\int\limits\limits\limits_2^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 344}","  342 |
  343 | describe(""A group parser"", function() {
> 344 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  345 |         expect`{xy}`.toParse();
  346 |     });
  347 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 361}","  359 |
  360 | describe(""A \\begingroup...\\endgroup parser"", function() {
> 361 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  362 |         expect`\begingroup xy \endgroup`.toParse();
  363 |     });
  364 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 365}","  363 |     });
  364 |
> 365 |     it(""should fail when it is mismatched"", function() {
      |    ^ Unknown Test
  366 |         expect`\begingroup xy`.not.toParse();
  367 |         expect`\begingroup xy }`.not.toParse();
  368 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 382}","  380 |     });
  381 |
> 382 |     it(""should not affect spacing in math mode"", function() {
      |    ^ Unknown Test
  383 |         expect`\begingroup x+ \endgroup y`.toBuildLike`x+y`;
  384 |     });
  385 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 388}","  386 |
  387 | describe(""An implicit group parser"", function() {
> 388 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  389 |         expect`\Large x`.toParse();
  390 |         expect`abc {abc \Large xyz} abc`.toParse();
  391 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 450}","  448 |
  449 | describe(""A function parser"", function() {
> 450 |     it(""should parse no argument functions"", function() {
      |    ^ Unknown Test
  451 |         expect`\div`.toParse();
  452 |     });
  453 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 454}","  452 |     });
  453 |
> 454 |     it(""should parse 1 argument functions"", function() {
      |    ^ Unknown Test
  455 |         expect`\blue x`.toParse();
  456 |     });
  457 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 458}","  456 |     });
  457 |
> 458 |     it(""should parse 2 argument functions"", function() {
      |    ^ Unknown Test
  459 |         expect`\frac 1 2`.toParse();
  460 |     });
  461 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 462}","  460 |     });
  461 |
> 462 |     it(""should not parse 1 argument functions with no arguments"", function() {
      |    ^ Unknown Test
  463 |         expect`\blue`.not.toParse();
  464 |     });
  465 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 466}","  464 |     });
  465 |
> 466 |     it(""should not parse 2 argument functions with 0 or 1 arguments"", function() {
      |    ^ Unknown Test
  467 |         expect`\frac`.not.toParse();
  468 |
  469 |         expect`\frac 1`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 472}","  470 |     });
  471 |
> 472 |     it(""should not parse a function with text right after it"", function() {
      |    ^ Unknown Test
  473 |         expect`\redx`.not.toParse();
  474 |     });
  475 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 476}","  474 |     });
  475 |
> 476 |     it(""should parse a function with a number right after it"", function() {
      |    ^ Unknown Test
  477 |         expect`\frac12`.toParse();
  478 |     });
  479 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 480}","  478 |     });
  479 |
> 480 |     it(""should parse some functions with text right after it"", function() {
      |    ^ Unknown Test
  481 |         expect`\;x`.toParse();
  482 |     });
  483 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 644}","  642 |     });
  643 |
> 644 |     it(""should handle \\textstyle correctly"", function() {
      |    ^ Unknown Test
  645 |         expect`\textstyle 1 \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  646 |         expect`{\textstyle 1} \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  647 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 670}","  668 |
  669 | describe(""A genfrac builder"", function() {
> 670 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  671 |         expect`\frac{x}{y}`.toBuild();
  672 |         expect`\dfrac{x}{y}`.toBuild();
  673 |         expect`\tfrac{x}{y}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 683}","  681 |
  682 | describe(""A infix builder"", function() {
> 683 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  684 |         expect`a \over b`.toBuild();
  685 |         expect`a \atop b`.toBuild();
  686 |         expect`a \choose b`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 779}","  777 |     });
  778 |
> 779 |     it(""should parse math within text group"", function() {
      |    ^ Unknown Test
  780 |         expect`\text{graph: $y = mx + b$}`.toParse(strictSettings);
  781 |         expect`\text{graph: \(y = mx + b\)}`.toParse(strictSettings);
  782 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 784}","  782 |     });
  783 |
> 784 |     it(""should parse math within text within math within text"", function() {
      |    ^ Unknown Test
  785 |         expect`\text{hello $x + \text{world $y$} + z$}`.toParse(strictSettings);
  786 |         expect`\text{hello \(x + \text{world $y$} + z\)}`.toParse(strictSettings);
  787 |         expect`\text{hello $x + \text{world \(y\)} + z$}`.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 791}","  789 |     });
  790 |
> 791 |     it(""should forbid \\( within math mode"", function() {
      |    ^ Unknown Test
  792 |         expect`\(`.not.toParse();
  793 |         expect`\text{$\(x\)$}`.not.toParse();
  794 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 796}","  794 |     });
  795 |
> 796 |     it(""should forbid $ within math mode"", function() {
      |    ^ Unknown Test
  797 |         expect`$x$`.not.toParse();
  798 |         expect`\text{\($x$\)}`.not.toParse();
  799 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 801}","  799 |     });
  800 |
> 801 |     it(""should detect unbalanced \\)"", function() {
      |    ^ Unknown Test
  802 |         expect`\)`.not.toParse();
  803 |         expect`\text{\)}`.not.toParse();
  804 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 806}","  804 |     });
  805 |
> 806 |     it(""should detect unbalanced $"", function() {
      |    ^ Unknown Test
  807 |         expect`$`.not.toParse();
  808 |         expect`\text{$}`.not.toParse();
  809 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 811}","  809 |     });
  810 |
> 811 |     it(""should not mix $ and \\(..\\)"", function() {
      |    ^ Unknown Test
  812 |         expect`\text{$x\)}`.not.toParse();
  813 |         expect`\text{\(x$}`.not.toParse();
  814 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 816}","  814 |     });
  815 |
> 816 |     it(""should parse spacing functions"", function() {
      |    ^ Unknown Test
  817 |         expect`a b\, \; \! \: \> ~ \thinspace \medspace \quad \ `.toBuild();
  818 |         expect`\enspace \thickspace \qquad \space \nobreakspace`.toBuild();
  819 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 821}","  819 |     });
  820 |
> 821 |     it(""should omit spaces after commands"", function() {
      |    ^ Unknown Test
  822 |         expect`\text{\textellipsis !}`.toParseLike`\text{\textellipsis!}`;
  823 |     });
  824 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 825}","  823 |     });
  824 |
> 825 |     it(""should handle ⋮ and \\vdots"", function() {
      |    ^ Unknown Test
  826 |         expect`\text{a \vdots b ⋮ d}`.toParse();
  827 |     });
  828 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 831}","  829 |
  830 | describe(""A texvc builder"", function() {
> 831 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  832 |         expect`\lang\N\darr\R\dArr\Z\Darr\alef\rang`.toBuild();
  833 |         expect`\alefsym\uarr\Alpha\uArr\Beta\Uarr\Chi`.toBuild();
  834 |         expect`\clubs\diamonds\hearts\spades\cnums\Complex`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1005}","  1003 |
  1004 | describe(""An lap parser"", function() {
> 1005 |     it(""should not fail on a text argument"", function() {
       |    ^ Unknown Test
  1006 |         expect`\rlap{\,/}{=}`.toParse();
  1007 |         expect`\mathrlap{\,/}{=}`.toParse();
  1008 |         expect`{=}\llap{/\,}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1014}","  1012 |     });
  1013 |
> 1014 |     it(""should not fail if math version is used"", function() {
       |    ^ Unknown Test
  1015 |         expect`\mathrlap{\frac{a}{b}}{=}`.toParse();
  1016 |         expect`{=}\mathllap{\frac{a}{b}}`.toParse();
  1017 |         expect`\sum_{\mathclap{\frac{a}{b}}}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1020}","  1018 |     });
  1019 |
> 1020 |     it(""should fail on math if AMS version is used"", function() {
       |    ^ Unknown Test
  1021 |         expect`\rlap{\frac{a}{b}}{=}`.not.toParse();
  1022 |         expect`{=}\llap{\frac{a}{b}}`.not.toParse();
  1023 |         expect`\sum_{\clap{\frac{a}{b}}}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1276}","  1274 | describe(""A begin/end parser"", function() {
  1275 |
> 1276 |     it(""should parse a simple environment"", function() {
       |    ^ Unknown Test
  1277 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1278 |     });
  1279 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1280}","  1278 |     });
  1279 |
> 1280 |     it(""should parse an environment with argument"", function() {
       |    ^ Unknown Test
  1281 |         expect`\begin{array}{cc}a&b\\c&d\end{array}`.toParse();
  1282 |     });
  1283 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1284}","  1282 |     });
  1283 |
> 1284 |     it(""should parse and build an empty environment"", function() {
       |    ^ Unknown Test
  1285 |         expect`\begin{aligned}\end{aligned}`.toBuild();
  1286 |         expect`\begin{matrix}\end{matrix}`.toBuild();
  1287 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1289}","  1287 |     });
  1288 |
> 1289 |     it(""should parse an environment with hlines"", function() {
       |    ^ Unknown Test
  1290 |         expect`\begin{matrix}\hline a&b\\ \hline c&d\end{matrix}`.toParse();
  1291 |         expect`\begin{matrix}\hline a&b\cr \hline c&d\end{matrix}`.toParse();
  1292 |         expect`\begin{matrix}\hdashline a&b\\ \hdashline c&d\end{matrix}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1295}","  1293 |     });
  1294 |
> 1295 |     it(""should forbid hlines outside array environment"", () => {
       |    ^ Unknown Test
  1296 |         expect`\hline`.not.toParse();
  1297 |     });
  1298 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1299}","  1297 |     });
  1298 |
> 1299 |     it(""should error when name is mismatched"", function() {
       |    ^ Unknown Test
  1300 |         expect`\begin{matrix}a&b\\c&d\end{pmatrix}`.not.toParse();
  1301 |     });
  1302 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1303}","  1301 |     });
  1302 |
> 1303 |     it(""should error when commands are mismatched"", function() {
       |    ^ Unknown Test
  1304 |         expect`\begin{matrix}a&b\\c&d\right{pmatrix}`.not.toParse();
  1305 |     });
  1306 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1307}","  1305 |     });
  1306 |
> 1307 |     it(""should error when end is missing"", function() {
       |    ^ Unknown Test
  1308 |         expect`\begin{matrix}a&b\\c&d`.not.toParse();
  1309 |     });
  1310 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1311}","  1309 |     });
  1310 |
> 1311 |     it(""should error when braces are mismatched"", function() {
       |    ^ Unknown Test
  1312 |         expect`{\begin{matrix}a&b\\c&d}\end{matrix}`.not.toParse();
  1313 |     });
  1314 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1315}","  1313 |     });
  1314 |
> 1315 |     it(""should cooperate with infix notation"", function() {
       |    ^ Unknown Test
  1316 |         expect`\begin{matrix}0&1\over2&3\\4&5&6\end{matrix}`.toParse();
  1317 |     });
  1318 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1325}","  1323 |     });
  1324 |
> 1325 |     it(""should allow \\cr and \\\\ as a line terminator"", function() {
       |    ^ Unknown Test
  1326 |         expect`\begin{matrix}a&b\cr c&d\end{matrix}`.toParse();
  1327 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1328 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1330}","  1328 |     });
  1329 |
> 1330 |     it(""should not allow \\cr to scan for an optional size argument"", function() {
       |    ^ Unknown Test
  1331 |         expect`\begin{matrix}a&b\cr[c]&d\end{matrix}`.toParse();
  1332 |     });
  1333 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1334}","  1332 |     });
  1333 |
> 1334 |     it(""should not treat [ after space as optional argument to \\\\"", function() {
       |    ^ Unknown Test
  1335 |         expect`\begin{matrix}a&b\\ [c]&d\end{matrix}`.toParse();
  1336 |         expect`a\\ [b]`.toParse();
  1337 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1349}","  1347 |     });
  1348 |
> 1349 |     it(""should allow an optional argument in {matrix*} and company."", function() {
       |    ^ Unknown Test
  1350 |         expect`\begin{matrix*}[r] a & -1 \\ -1 & d \end{matrix*}`.toBuild();
  1351 |         expect`\begin{pmatrix*}[r] a & -1 \\ -1 & d \end{pmatrix*}`.toBuild();
  1352 |         expect`\begin{bmatrix*}[r] a & -1 \\ -1 & d \end{bmatrix*}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1386}","  1384 |     });
  1385 |
> 1386 |     it(""should build sized square roots"", function() {
       |    ^ Unknown Test
  1387 |         expect`\Large\sqrt[3]{x}`.toBuild();
  1388 |     });
  1389 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1390}","  1388 |     });
  1389 |
> 1390 |     it(""should expand argument if optional argument doesn't exist"", function() {
       |    ^ Unknown Test
  1391 |         expect`\sqrt\foo`.toParseLike(""\\sqrt123"",
  1392 |             new Settings({macros: {""\\foo"": ""123""}}));
  1393 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1395}","  1393 |     });
  1394 |
> 1395 |     it(""should not expand argument if optional argument exists"", function() {
       |    ^ Unknown Test
  1396 |         expect`\sqrt[2]\foo`.toParseLike(""\\sqrt[2]{123}"",
  1397 |             new Settings({macros: {""\\foo"": ""123""}}));
  1398 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1402}","  1400 |
  1401 | describe(""A TeX-compliant parser"", function() {
> 1402 |     it(""should work"", function() {
       |    ^ Unknown Test
  1403 |         expect`\frac 2 3`.toParse();
  1404 |     });
  1405 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1421}","  1419 |     });
  1420 |
> 1421 |     it(""should fail when there are missing sup/subscripts"", function() {
       |    ^ Unknown Test
  1422 |         expect`x^`.not.toParse();
  1423 |         expect`x_`.not.toParse();
  1424 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1492}","  1490 |     });
  1491 |
> 1492 |     it(""should parse multiple primes correctly"", function() {
       |    ^ Unknown Test
  1493 |         expect`x''''`.toParse();
  1494 |         expect`x_2''`.toParse();
  1495 |         expect`x''_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1498}","  1496 |     });
  1497 |
> 1498 |     it(""should fail when sup/subscripts are interspersed with arguments"", function() {
       |    ^ Unknown Test
  1499 |         expect`\sqrt^23`.not.toParse();
  1500 |         expect`\frac^234`.not.toParse();
  1501 |         expect`\frac2^34`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1504}","  1502 |     });
  1503 |
> 1504 |     it(""should succeed when sup/subscripts come after whole functions"", function() {
       |    ^ Unknown Test
  1505 |         expect`\sqrt2^3`.toParse();
  1506 |         expect`\frac23^4`.toParse();
  1507 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1509}","  1507 |     });
  1508 |
> 1509 |     it(""should succeed with a sqrt around a text/frac"", function() {
       |    ^ Unknown Test
  1510 |         expect`\sqrt \frac x y`.toParse();
  1511 |         expect`\sqrt \text x`.toParse();
  1512 |         expect`x^\frac x y`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1546}","  1544 |
  1545 | describe(""An op symbol builder"", function() {
> 1546 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1547 |         expect`\int_i^n`.toBuild();
  1548 |         expect`\iint_i^n`.toBuild();
  1549 |         expect`\iiint_i^n`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1563}","  1561 |
  1562 | describe(""A style change parser"", function() {
> 1563 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1564 |         expect`\displaystyle x`.toParse();
  1565 |         expect`\textstyle x`.toParse();
  1566 |         expect`\scriptstyle x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1594}","  1592 |
  1593 | describe(""A font parser"", function() {
> 1594 |     it(""should parse \\mathrm, \\mathbb, \\mathit, and \\mathnormal"", function() {
       |    ^ Unknown Test
  1595 |         expect`\mathrm x`.toParse();
  1596 |         expect`\mathbb x`.toParse();
  1597 |         expect`\mathit x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1605}","  1603 |     });
  1604 |
> 1605 |     it(""should parse \\mathcal and \\mathfrak"", function() {
       |    ^ Unknown Test
  1606 |         expect`\mathcal{ABC123}`.toParse();
  1607 |         expect`\mathfrak{abcABC123}`.toParse();
  1608 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1659}","  1657 |     });
  1658 |
> 1659 |     it(""should not parse a series of font commands"", function() {
       |    ^ Unknown Test
  1660 |         expect`\mathbb \mathrm R`.not.toParse();
  1661 |     });
  1662 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1674}","  1672 |     });
  1673 |
> 1674 |     it(""should be allowed in the argument"", function() {
       |    ^ Unknown Test
  1675 |         expect`e^\mathbf{x}`.toParse();
  1676 |     });
  1677 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1683}","  1681 |     });
  1682 |
> 1683 |     it(""old-style fonts work like new-style fonts"", () => {
       |    ^ Unknown Test
  1684 |         expect`\rm xyz`.toParseLike`\mathrm{xyz}`;
  1685 |         expect`\sf xyz`.toParseLike`\mathsf{xyz}`;
  1686 |         expect`\tt xyz`.toParseLike`\mathtt{xyz}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1694}","  1692 |
  1693 | describe(""A \\pmb builder"", function() {
> 1694 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1695 |         expect`\pmb{\mu}`.toBuild();
  1696 |         expect`\pmb{=}`.toBuild();
  1697 |         expect`\pmb{+}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1705}","  1703 |
  1704 | describe(""A raise parser"", function() {
> 1705 |     it(""should parse and build text in \\raisebox"", function() {
       |    ^ Unknown Test
  1706 |         expect`\raisebox{5pt}{text}`.toBuild(strictSettings);
  1707 |         expect`\raisebox{-5pt}{text}`.toBuild(strictSettings);
  1708 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1710}","  1708 |     });
  1709 |
> 1710 |     it(""should parse and build math in non-strict \\vcenter"", function() {
       |    ^ Unknown Test
  1711 |         expect`\vcenter{\frac a b}`.toBuild(nonstrictSettings);
  1712 |     });
  1713 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1714}","  1712 |     });
  1713 |
> 1714 |     it(""should fail to parse math in \\raisebox"", function() {
       |    ^ Unknown Test
  1715 |         expect`\raisebox{5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1716 |         expect`\raisebox{-5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1717 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1719}","  1717 |     });
  1718 |
> 1719 |     it(""should fail to parse math in an \\hbox"", function() {
       |    ^ Unknown Test
  1720 |         expect`\hbox{\frac a b}`.not.toParse(nonstrictSettings);
  1721 |     });
  1722 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1723}","  1721 |     });
  1722 |
> 1723 |     it(""should fail to build, given an unbraced length"", function() {
       |    ^ Unknown Test
  1724 |         expect`\raisebox5pt{text}`.not.toBuild(strictSettings);
  1725 |         expect`\raisebox-5pt{text}`.not.toBuild(strictSettings);
  1726 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1728}","  1726 |     });
  1727 |
> 1728 |     it(""should build math in an hbox when math mode is set"", function() {
       |    ^ Unknown Test
  1729 |         expect`a + \vcenter{\hbox{$\frac{\frac a b}c$}}`
  1730 |             .toBuild(strictSettings);
  1731 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1777}","  1775 |     });
  1776 |
> 1777 |     it(""should not parse a comment without newline in strict mode"", () => {
       |    ^ Unknown Test
  1778 |         expect`x%y`.not.toParse(strictSettings);
  1779 |         expect`x%y`.toParse(nonstrictSettings);
  1780 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2262}","  2260 |
  2261 | describe(""An accent parser"", function() {
> 2262 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2263 |         expect`\vec{x}`.toParse();
  2264 |         expect`\vec{x^2}`.toParse();
  2265 |         expect`\vec{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2282}","  2280 |     });
  2281 |
> 2282 |     it(""should parse stretchy, shifty accents"", function() {
       |    ^ Unknown Test
  2283 |         expect`\widehat{x}`.toParse();
  2284 |         expect`\widecheck{x}`.toParse();
  2285 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2287}","  2285 |     });
  2286 |
> 2287 |     it(""should parse stretchy, non-shifty accents"", function() {
       |    ^ Unknown Test
  2288 |         expect`\overrightarrow{x}`.toParse();
  2289 |     });
  2290 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2293}","  2291 |
  2292 | describe(""An accent builder"", function() {
> 2293 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2294 |         expect`\vec{x}`.toBuild();
  2295 |         expect`\vec{x}^2`.toBuild();
  2296 |         expect`\vec{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2310}","  2308 |
  2309 | describe(""A stretchy and shifty accent builder"", function() {
> 2310 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2311 |         expect`\widehat{AB}`.toBuild();
  2312 |         expect`\widecheck{AB}`.toBuild();
  2313 |         expect`\widehat{AB}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2328}","  2326 |
  2327 | describe(""A stretchy and non-shifty accent builder"", function() {
> 2328 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2329 |         expect`\overrightarrow{AB}`.toBuild();
  2330 |         expect`\overrightarrow{AB}^2`.toBuild();
  2331 |         expect`\overrightarrow{AB}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2354}","  2352 |
  2353 | describe(""An under-accent parser"", function() {
> 2354 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2355 |         expect`\underrightarrow{x}`.toParse();
  2356 |         expect`\underrightarrow{x^2}`.toParse();
  2357 |         expect`\underrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2375}","  2373 |
  2374 | describe(""An under-accent builder"", function() {
> 2375 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2376 |         expect`\underrightarrow{x}`.toBuild();
  2377 |         expect`\underrightarrow{x}^2`.toBuild();
  2378 |         expect`\underrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2393}","  2391 |
  2392 | describe(""An extensible arrow parser"", function() {
> 2393 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2394 |         expect`\xrightarrow{x}`.toParse();
  2395 |         expect`\xrightarrow{x^2}`.toParse();
  2396 |         expect`\xrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2415}","  2413 |
  2414 | describe(""An extensible arrow builder"", function() {
> 2415 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2416 |         expect`\xrightarrow{x}`.toBuild();
  2417 |         expect`\xrightarrow{x}^2`.toBuild();
  2418 |         expect`\xrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2434}","  2432 |
  2433 | describe(""A horizontal brace parser"", function() {
> 2434 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2435 |         expect`\overbrace{x}`.toParse();
  2436 |         expect`\overbrace{x^2}`.toParse();
  2437 |         expect`\overbrace{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2457}","  2455 |
  2456 | describe(""A horizontal brace builder"", function() {
> 2457 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2458 |         expect`\overbrace{x}`.toBuild();
  2459 |         expect`\overbrace{x}^2`.toBuild();
  2460 |         expect`\underbrace{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2475}","  2473 |
  2474 | describe(""A boxed parser"", function() {
> 2475 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2476 |         expect`\boxed{x}`.toParse();
  2477 |         expect`\boxed{x^2}`.toParse();
  2478 |         expect`\boxed{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2490}","  2488 |
  2489 | describe(""A boxed builder"", function() {
> 2490 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2491 |         expect`\boxed{x}`.toBuild();
  2492 |         expect`\boxed{x}^2`.toBuild();
  2493 |         expect`\boxed{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2507}","  2505 |
  2506 | describe(""An fbox parser, unlike a boxed parser,"", function() {
> 2507 |     it(""should fail when given math"", function() {
       |    ^ Unknown Test
  2508 |         expect`\fbox{\frac a b}`.not.toParse();
  2509 |     });
  2510 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2513}","  2511 |
  2512 | describe(""A colorbox parser"", function() {
> 2513 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2514 |         expect`\colorbox{red}{a b}`.toParse();
  2515 |         expect`\colorbox{red}{x}^2`.toParse();
  2516 |         expect`\colorbox{red} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2519}","  2517 |     });
  2518 |
> 2519 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2520 |         expect`\colorbox{red}{\alpha}`.not.toParse();
  2521 |         expect`\colorbox{red}{\frac{a}{b}}`.not.toParse();
  2522 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2524}","  2522 |     });
  2523 |
> 2524 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2525 |         expect`\colorbox{red}{a b}`.toParse();
  2526 |         expect`\colorbox{#197}{a b}`.toParse();
  2527 |         expect`\colorbox{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2537}","  2535 |
  2536 | describe(""A colorbox builder"", function() {
> 2537 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2538 |         expect`\colorbox{red}{a b}`.toBuild();
  2539 |         expect`\colorbox{red}{a b}^2`.toBuild();
  2540 |         expect`\colorbox{red} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2549}","  2547 |
  2548 | describe(""An fcolorbox parser"", function() {
> 2549 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2550 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2551 |         expect`\fcolorbox{blue}{yellow}{x}^2`.toParse();
  2552 |         expect`\fcolorbox{blue}{yellow} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2555}","  2553 |     });
  2554 |
> 2555 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2556 |         expect`\fcolorbox{blue}{yellow}{\alpha}`.not.toParse();
  2557 |         expect`\fcolorbox{blue}{yellow}{\frac{a}{b}}`.not.toParse();
  2558 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2560}","  2558 |     });
  2559 |
> 2560 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2561 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2562 |         expect`\fcolorbox{blue}{#197}{a b}`.toParse();
  2563 |         expect`\fcolorbox{blue}{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2573}","  2571 |
  2572 | describe(""A fcolorbox builder"", function() {
> 2573 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2574 |         expect`\fcolorbox{blue}{yellow}{a b}`.toBuild();
  2575 |         expect`\fcolorbox{blue}{yellow}{a b}^2`.toBuild();
  2576 |         expect`\fcolorbox{blue}{yellow} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2585}","  2583 |
  2584 | describe(""A strike-through parser"", function() {
> 2585 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2586 |         expect`\cancel{x}`.toParse();
  2587 |         expect`\cancel{x^2}`.toParse();
  2588 |         expect`\cancel{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2606}","  2604 |
  2605 | describe(""A strike-through builder"", function() {
> 2606 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2607 |         expect`\cancel{x}`.toBuild();
  2608 |         expect`\cancel{x}^2`.toBuild();
  2609 |         expect`\cancel{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2627}","  2625 |
  2626 | describe(""A actuarial angle parser"", function() {
> 2627 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2628 |         expect`a_{\angl{n}}`.toParse();
  2629 |     });
  2630 |     it(""should fail in text mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2630}","  2628 |         expect`a_{\angl{n}}`.toParse();
  2629 |     });
> 2630 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2631 |         expect`\text{a_{\angl{n}}}`.not.toParse();
  2632 |     });
  2633 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2636}","  2634 |
  2635 | describe(""A actuarial angle builder"", function() {
> 2636 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2637 |         expect`a_{\angl{n}}`.toBuild();
  2638 |         expect`a_{\angl{n}i}`.toBuild();
  2639 |         expect`a_{\angl n}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2645}","  2643 |
  2644 | describe(""\\phase"", function() {
> 2645 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2646 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2647 |     });
  2648 |     it(""should not fail in math mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2648}","  2646 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2647 |     });
> 2648 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2649 |         expect`\phase{-78.2^\circ}`.toBuild();
  2650 |     });
  2651 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2654}","  2652 |
  2653 | describe(""A phantom parser"", function() {
> 2654 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2655 |         expect`\phantom{x}`.toParse();
  2656 |         expect`\phantom{x^2}`.toParse();
  2657 |         expect`\phantom{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2674}","  2672 |
  2673 | describe(""A phantom builder"", function() {
> 2674 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2675 |         expect`\phantom{x}`.toBuild();
  2676 |         expect`\phantom{x^2}`.toBuild();
  2677 |         expect`\phantom{x}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2703}","  2701 |
  2702 | describe(""A smash parser"", function() {
> 2703 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2704 |         expect`\smash{x}`.toParse();
  2705 |         expect`\smash{x^2}`.toParse();
  2706 |         expect`\smash{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2728}","  2726 |
  2727 | describe(""A smash builder"", function() {
> 2728 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2729 |         expect`\smash{x}`.toBuild(nonstrictSettings);
  2730 |         expect`\smash{x^2}`.toBuild(nonstrictSettings);
  2731 |         expect`\smash{x}^2`.toBuild(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2752}","  2750 |
  2751 | describe(""An optional argument parser"", function() {
> 2752 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2753 |         // Note this doesn't actually make an optional argument, but still
  2754 |         // should work
  2755 |         expect`\frac[1]{2}{3}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2760}","  2758 |     });
  2759 |
> 2760 |     it(""should work with sqrts with optional arguments"", function() {
       |    ^ Unknown Test
  2761 |         expect`\sqrt[3]{2}`.toParse();
  2762 |     });
  2763 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2764}","  2762 |     });
  2763 |
> 2764 |     it(""should work when the optional argument is missing"", function() {
       |    ^ Unknown Test
  2765 |         expect`\sqrt{2}`.toParse();
  2766 |         expect`\rule{1em}{2em}`.toParse();
  2767 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2769}","  2767 |     });
  2768 |
> 2769 |     it(""should fail when the optional argument is malformed"", function() {
       |    ^ Unknown Test
  2770 |         expect`\rule[1]{2em}{3em}`.not.toParse();
  2771 |     });
  2772 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2773}","  2771 |     });
  2772 |
> 2773 |     it(""should not work if the optional argument isn't closed"", function() {
       |    ^ Unknown Test
  2774 |         expect`\sqrt[`.not.toParse();
  2775 |     });
  2776 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2823}","  2821 | describe(""A substack function"", function() {
  2822 |
> 2823 |     it(""should build"", function() {
       |    ^ Unknown Test
  2824 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2825 |     });
  2826 |     it(""should accommodate spaces in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2826}","  2824 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2825 |     });
> 2826 |     it(""should accommodate spaces in the argument"", function() {
       |    ^ Unknown Test
  2827 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2828 |     });
  2829 |     it(""should accommodate macros in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2829}","  2827 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2828 |     });
> 2829 |     it(""should accommodate macros in the argument"", function() {
       |    ^ Unknown Test
  2830 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2831 |     });
  2832 |     it(""should accommodate an empty argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2832}","  2830 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2831 |     });
> 2832 |     it(""should accommodate an empty argument"", function() {
       |    ^ Unknown Test
  2833 |         expect`\sum_{\substack{}}  P(i,j)`.toBuild();
  2834 |     });
  2835 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2840}","  2838 | describe(""A smallmatrix environment"", function() {
  2839 |
> 2840 |     it(""should build"", function() {
       |    ^ Unknown Test
  2841 |         expect`\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}`.toBuild();
  2842 |     });
  2843 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2848}","  2846 | describe(""A cases environment"", function() {
  2847 |
> 2848 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2849 |         expect`f(a,b)=\begin{cases}a+1&\text{if }b\text{ is odd}\\a&\text{if }b=0\\a-1&\text{otherwise}\end{cases}`
  2850 |             .toParse();
  2851 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2857}","  2855 | describe(""An rcases environment"", function() {
  2856 |
> 2857 |     it(""should build"", function() {
       |    ^ Unknown Test
  2858 |         expect`\begin{rcases} a &\text{if } b \\ c &\text{if } d \end{rcases}⇒…`
  2859 |             .toBuild();
  2860 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2866}","  2864 | describe(""An aligned environment"", function() {
  2865 |
> 2866 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2867 |         expect`\begin{aligned}a&=b&c&=d\\e&=f\end{aligned}`.toParse();
  2868 |     });
  2869 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2870}","  2868 |     });
  2869 |
> 2870 |     it(""should allow cells in brackets"", function() {
       |    ^ Unknown Test
  2871 |         expect`\begin{aligned}[a]&[b]\\ [c]&[d]\end{aligned}`.toParse();
  2872 |     });
  2873 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2874}","  2872 |     });
  2873 |
> 2874 |     it(""should forbid cells in brackets without space"", function() {
       |    ^ Unknown Test
  2875 |         expect`\begin{aligned}[a]&[b]\\[c]&[d]\end{aligned}`.not.toParse();
  2876 |     });
  2877 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2885}","  2883 |
  2884 | describe(""AMS environments"", function() {
> 2885 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  2886 |         expect`\begin{gather}a+b\\c+d\end{gather}`.not.toParse(nonstrictSettings);
  2887 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.not.toParse(nonstrictSettings);
  2888 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.not.toParse(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2898}","  2896 |
  2897 |     const displayMode = new Settings({displayMode: true});
> 2898 |     it(""should build if in display mode"", () => {
       |    ^ Unknown Test
  2899 |         expect`\begin{gather}a+b\\c+d\end{gather}`.toBuild(displayMode);
  2900 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.toBuild(displayMode);
  2901 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2911}","  2909 |     });
  2910 |
> 2911 |     it(""should build an empty environment"", () => {
       |    ^ Unknown Test
  2912 |         expect`\begin{gather}\end{gather}`.toBuild(displayMode);
  2913 |         expect`\begin{gather*}\end{gather*}`.toBuild(displayMode);
  2914 |         expect`\begin{align}\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2923}","  2921 |     });
  2922 |
> 2923 |     it(""{equation} should fail if argument contains two rows."", () => {
       |    ^ Unknown Test
  2924 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2925 |     });
  2926 |     it(""{equation} should fail if argument contains two columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2926}","  2924 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2925 |     });
> 2926 |     it(""{equation} should fail if argument contains two columns."", () => {
       |    ^ Unknown Test
  2927 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2928 |     });
  2929 |     it(""{split} should fail if argument contains three columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2929}","  2927 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2928 |     });
> 2929 |     it(""{split} should fail if argument contains three columns."", () => {
       |    ^ Unknown Test
  2930 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2931 |     });
  2932 |     it(""{array} should fail if body contains more columns than specification."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2932}","  2930 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2931 |     });
> 2932 |     it(""{array} should fail if body contains more columns than specification."", () => {
       |    ^ Unknown Test
  2933 |         expect`\begin{array}{2}a & b & c\\d & e  f\end{array}`.not.toBuild(displayMode);
  2934 |     });
  2935 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2961}","  2959 |
  2960 | describe(""operatorname support"", function() {
> 2961 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2962 |         expect`\operatorname{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2963 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2964 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}_y x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2972}","  2970 |
  2971 | describe(""href and url commands"", function() {
> 2972 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2973 |         expect`\href{http://example.com/}{\sin}`.toBuild(trustSettings);
  2974 |         expect`\url{http://example.com/}`.toBuild(trustSettings);
  2975 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2977}","  2975 |     });
  2976 |
> 2977 |     it(""should allow empty URLs"", function() {
       |    ^ Unknown Test
  2978 |         expect`\href{}{example here}`.toBuild(trustSettings);
  2979 |         expect`\url{}`.toBuild(trustSettings);
  2980 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2990}","  2988 |     });
  2989 |
> 2990 |     it(""should allow spaces single-character URLs"", () => {
       |    ^ Unknown Test
  2991 |         expect`\href %end`.toParseLike(""\\href{%}end"", trustSettings);
  2992 |         expect`\url %end`.toParseLike(""\\url{%}end"", trustSettings);
  2993 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3011}","  3009 |     });
  3010 |
> 3011 |     it(""should not allow unbalanced brace(s) in url"", function() {
       |    ^ Unknown Test
  3012 |         expect`\href{http://example.com/{a}{bar}`.not.toParse();
  3013 |         expect`\href{http://example.com/}a}{bar}`.not.toParse();
  3014 |         expect`\url{http://example.com/{a}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3102}","  3100 |
  3101 | describe(""A raw text parser"", function() {
> 3102 |     it(""should return null for a omitted optional string"", function() {
       |    ^ Unknown Test
  3103 |         expect`\includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}`.toParse();
  3104 |     });
  3105 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3117}","  3115 |     });
  3116 |
> 3117 |     it(""should still parse on unrecognized control sequences"", function() {
       |    ^ Unknown Test
  3118 |         expect`\error`.toParse(noThrowSettings);
  3119 |     });
  3120 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3122}","  3120 |
  3121 |     describe(""should allow unrecognized controls sequences anywhere, including"", function() {
> 3122 |         it(""in superscripts and subscripts"", function() {
       |        ^ Unknown Test
  3123 |             expect`2_\error`.toBuild(noThrowSettings);
  3124 |             expect`3^{\error}_\error`.toBuild(noThrowSettings);
  3125 |             expect`\int\nolimits^\error_\error`.toBuild(noThrowSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3128}","  3126 |         });
  3127 |
> 3128 |         it(""in fractions"", function() {
       |        ^ Unknown Test
  3129 |             expect`\frac{345}{\error}`.toBuild(noThrowSettings);
  3130 |             expect`\frac\error{\error}`.toBuild(noThrowSettings);
  3131 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3133}","  3131 |         });
  3132 |
> 3133 |         it(""in square roots"", function() {
       |        ^ Unknown Test
  3134 |             expect`\sqrt\error`.toBuild(noThrowSettings);
  3135 |             expect`\sqrt{234\error}`.toBuild(noThrowSettings);
  3136 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3138}","  3136 |         });
  3137 |
> 3138 |         it(""in text boxes"", function() {
       |        ^ Unknown Test
  3139 |             expect`\text{\error}`.toBuild(noThrowSettings);
  3140 |         });
  3141 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3208}","  3206 |
  3207 | describe(""The symbol table integrity"", function() {
> 3208 |     it(""should treat certain symbols as synonyms"", function() {
       |    ^ Unknown Test
  3209 |         expect`<`.toBuildLike`\lt`;
  3210 |         expect`>`.toBuildLike`\gt`;
  3211 |         expect`\left<\frac{1}{x}\right>`.toBuildLike`\left\lt\frac{1}{x}\right\gt`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3226}","  3224 |
  3225 | describe(""A macro expander"", function() {
> 3226 |     it(""should produce individual tokens"", function() {
       |    ^ Unknown Test
  3227 |         expect`e^\foo`.toParseLike(""e^1 23"",
  3228 |             new Settings({macros: {""\\foo"": ""123""}}));
  3229 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3231}","  3229 |     });
  3230 |
> 3231 |     it(""should preserve leading spaces inside macro definition"", function() {
       |    ^ Unknown Test
  3232 |         expect`\text{\foo}`.toParseLike(r`\text{ x}`,
  3233 |             new Settings({macros: {""\\foo"": "" x""}}));
  3234 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3236}","  3234 |     });
  3235 |
> 3236 |     it(""should preserve leading spaces inside macro argument"", function() {
       |    ^ Unknown Test
  3237 |         expect`\text{\foo{ x}}`.toParseLike(r`\text{ x}`,
  3238 |             new Settings({macros: {""\\foo"": ""#1""}}));
  3239 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3241}","  3239 |     });
  3240 |
> 3241 |     it(""should ignore expanded spaces in math mode"", function() {
       |    ^ Unknown Test
  3242 |         expect`\foo`.toParseLike(""x"", new Settings({macros: {""\\foo"": "" x""}}));
  3243 |     });
  3244 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3245}","  3243 |     });
  3244 |
> 3245 |     it(""should consume spaces after control-word macro"", function() {
       |    ^ Unknown Test
  3246 |         expect`\text{\foo }`.toParseLike(r`\text{x}`,
  3247 |             new Settings({macros: {""\\foo"": ""x""}}));
  3248 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3250}","  3248 |     });
  3249 |
> 3250 |     it(""should consume spaces after macro with \\relax"", function() {
       |    ^ Unknown Test
  3251 |         expect`\text{\foo }`.toParseLike(r`\text{}`,
  3252 |             new Settings({macros: {""\\foo"": ""\\relax""}}));
  3253 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3255}","  3253 |     });
  3254 |
> 3255 |     it(""should not consume spaces after control-word expansion"", function() {
       |    ^ Unknown Test
  3256 |         expect`\text{\\ }`.toParseLike(r`\text{ }`,
  3257 |             new Settings({macros: {""\\\\"": ""\\relax""}}));
  3258 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3260}","  3258 |     });
  3259 |
> 3260 |     it(""should consume spaces after \\relax"", function() {
       |    ^ Unknown Test
  3261 |         expect`\text{\relax }`.toParseLike`\text{}`;
  3262 |     });
  3263 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3264}","  3262 |     });
  3263 |
> 3264 |     it(""should consume spaces after control-word function"", function() {
       |    ^ Unknown Test
  3265 |         expect`\text{\KaTeX }`.toParseLike`\text{\KaTeX}`;
  3266 |     });
  3267 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3268}","  3266 |     });
  3267 |
> 3268 |     it(""should preserve spaces after control-symbol macro"", function() {
       |    ^ Unknown Test
  3269 |         expect`\text{\% y}`.toParseLike(r`\text{x y}`,
  3270 |             new Settings({macros: {""\\%"": ""x""}}));
  3271 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3273}","  3271 |     });
  3272 |
> 3273 |     it(""should preserve spaces after control-symbol function"", function() {
       |    ^ Unknown Test
  3274 |         expect`\text{\' }`.toParse();
  3275 |     });
  3276 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3277}","  3275 |     });
  3276 |
> 3277 |     it(""should consume spaces between arguments"", function() {
       |    ^ Unknown Test
  3278 |         expect`\text{\foo 1 2}`.toParseLike(r`\text{12end}`,
  3279 |             new Settings({macros: {""\\foo"": ""#1#2end""}}));
  3280 |         expect`\text{\foo {1} {2}}`.toParseLike(r`\text{12end}`,",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3284}","  3282 |     });
  3283 |
> 3284 |     it(""should allow for multiple expansion"", function() {
       |    ^ Unknown Test
  3285 |         expect`1\foo2`.toParseLike(""1aa2"", new Settings({macros: {
  3286 |             ""\\foo"": ""\\bar\\bar"",
  3287 |             ""\\bar"": ""a"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3291}","  3289 |     });
  3290 |
> 3291 |     it(""should allow for multiple expansion with argument"", function() {
       |    ^ Unknown Test
  3292 |         expect`1\foo2`.toParseLike(""12222"", new Settings({macros: {
  3293 |             ""\\foo"": ""\\bar{#1}\\bar{#1}"",
  3294 |             ""\\bar"": ""#1#1"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3298}","  3296 |     });
  3297 |
> 3298 |     it(""should allow for macro argument"", function() {
       |    ^ Unknown Test
  3299 |         expect`\foo\bar`.toParseLike(""(xyz)"", new Settings({macros: {
  3300 |             ""\\foo"": ""(#1)"",
  3301 |             ""\\bar"": ""xyz"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3305}","  3303 |     });
  3304 |
> 3305 |     it(""should allow properly nested group for macro argument"", function() {
       |    ^ Unknown Test
  3306 |         expect`\foo{e^{x_{12}+3}}`.toParseLike(""(e^{x_{12}+3})"",
  3307 |             new Settings({macros: {""\\foo"": ""(#1)""}}));
  3308 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3310}","  3308 |     });
  3309 |
> 3310 |     it(""should delay expansion if preceded by \\expandafter"", function() {
       |    ^ Unknown Test
  3311 |         expect`\expandafter\foo\bar`.toParseLike(""x+y"", new Settings({macros: {
  3312 |             ""\\foo"": ""#1+#2"",
  3313 |             ""\\bar"": ""xy"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3320}","  3318 |     });
  3319 |
> 3320 |     it(""should not expand if preceded by \\noexpand"", function() {
       |    ^ Unknown Test
  3321 |         // \foo is not expanded and interpreted as if its meaning were \relax
  3322 |         expect`\noexpand\foo y`.toParseLike(""y"",
  3323 |             new Settings({macros: {""\\foo"": ""x""}}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3333}","  3331 |     });
  3332 |
> 3333 |     it(""should allow for space macro argument (text version)"", function() {
       |    ^ Unknown Test
  3334 |         expect`\text{\foo\bar}`.toParseLike(r`\text{( )}`, new Settings({macros: {
  3335 |             ""\\foo"": ""(#1)"",
  3336 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3340}","  3338 |     });
  3339 |
> 3340 |     it(""should allow for space macro argument (math version)"", function() {
       |    ^ Unknown Test
  3341 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3342 |             ""\\foo"": ""(#1)"",
  3343 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3347}","  3345 |     });
  3346 |
> 3347 |     it(""should allow for space second argument (text version)"", function() {
       |    ^ Unknown Test
  3348 |         expect`\text{\foo\bar\bar}`.toParseLike(r`\text{( , )}`, new Settings({macros: {
  3349 |             ""\\foo"": ""(#1,#2)"",
  3350 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3354}","  3352 |     });
  3353 |
> 3354 |     it(""should treat \\relax as empty argument"", function() {
       |    ^ Unknown Test
  3355 |         expect`\text{\foo\relax x}`.toParseLike(r`\text{(,x)}`, new Settings({macros: {
  3356 |             ""\\foo"": ""(#1,#2)"",
  3357 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3360}","  3358 |     });
  3359 |
> 3360 |     it(""should allow for space second argument (math version)"", function() {
       |    ^ Unknown Test
  3361 |         expect`\foo\bar\bar`.toParseLike(""(,)"", new Settings({macros: {
  3362 |             ""\\foo"": ""(#1,#2)"",
  3363 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3367}","  3365 |     });
  3366 |
> 3367 |     it(""should allow for empty macro argument"", function() {
       |    ^ Unknown Test
  3368 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3369 |             ""\\foo"": ""(#1)"",
  3370 |             ""\\bar"": """",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3374}","  3372 |     });
  3373 |
> 3374 |     it(""should allow for space function arguments"", function() {
       |    ^ Unknown Test
  3375 |         expect`\frac\bar\bar`.toParseLike(r`\frac{}{}`, new Settings({macros: {
  3376 |             ""\\bar"": "" "",
  3377 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3380}","  3378 |     });
  3379 |
> 3380 |     it(""should build \\overset and \\underset"", function() {
       |    ^ Unknown Test
  3381 |         expect`\overset{f}{\rightarrow} Y`.toBuild();
  3382 |         expect`\underset{f}{\rightarrow} Y`.toBuild();
  3383 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3385}","  3383 |     });
  3384 |
> 3385 |     it(""should build \\iff, \\implies, \\impliedby"", function() {
       |    ^ Unknown Test
  3386 |         expect`X \iff Y`.toBuild();
  3387 |         expect`X \implies Y`.toBuild();
  3388 |         expect`X \impliedby Y`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3391}","  3389 |     });
  3390 |
> 3391 |     it(""should allow aliasing characters"", function() {
       |    ^ Unknown Test
  3392 |         expect`x’=c`.toParseLike(""x'=c"", new Settings({macros: {
  3393 |             ""’"": ""'"",
  3394 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3397}","  3395 |     });
  3396 |
> 3397 |     it(""\\@firstoftwo should consume both, and avoid errors"", function() {
       |    ^ Unknown Test
  3398 |         expect`\@firstoftwo{yes}{no}`.toParseLike`yes`;
  3399 |         expect`\@firstoftwo{yes}{1'_2^3}`.toParseLike`yes`;
  3400 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3402}","  3400 |     });
  3401 |
> 3402 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3403 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3404 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3405 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3407}","  3405 |     });
  3406 |
> 3407 |     it(""\\@ifnextchar should not consume nonspaces"", function() {
       |    ^ Unknown Test
  3408 |         expect`\@ifnextchar!{yes}{no}!!`.toParseLike`yes!!`;
  3409 |         expect`\@ifnextchar!{yes}{no}?!`.toParseLike`no?!`;
  3410 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3412}","  3410 |     });
  3411 |
> 3412 |     it(""\\@ifnextchar should consume spaces"", function() {
       |    ^ Unknown Test
  3413 |         expect`\def\x#1{\@ifnextchar x{yes}{no}}\x{}x\x{} x`
  3414 |             .toParseLike`yesxyesx`;
  3415 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3417}","  3415 |     });
  3416 |
> 3417 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3418 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3419 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3420 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3422}","  3420 |     });
  3421 |
> 3422 |     it(""\\TextOrMath should work immediately"", function() {
       |    ^ Unknown Test
  3423 |         expect`\TextOrMath{text}{math}`.toParseLike`math`;
  3424 |     });
  3425 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3426}","  3424 |     });
  3425 |
> 3426 |     it(""\\TextOrMath should work after other math"", function() {
       |    ^ Unknown Test
  3427 |         expect`x+\TextOrMath{text}{math}`.toParseLike`x+math`;
  3428 |     });
  3429 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3430}","  3428 |     });
  3429 |
> 3430 |     it(""\\TextOrMath should work immediately after \\text"", function() {
       |    ^ Unknown Test
  3431 |         expect`\text{\TextOrMath{text}{math}}`.toParseLike`\text{text}`;
  3432 |     });
  3433 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3434}","  3432 |     });
  3433 |
> 3434 |     it(""\\TextOrMath should work later after \\text"", function() {
       |    ^ Unknown Test
  3435 |         expect`\text{hello \TextOrMath{text}{math}}`.toParseLike`\text{hello text}`;
  3436 |     });
  3437 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3438}","  3436 |     });
  3437 |
> 3438 |     it(""\\TextOrMath should work immediately after \\text ends"", function() {
       |    ^ Unknown Test
  3439 |         expect`\text{\TextOrMath{text}{math}}\TextOrMath{text}{math}`
  3440 |             .toParseLike`\text{text}math`;
  3441 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3443}","  3441 |     });
  3442 |
> 3443 |     it(""\\TextOrMath should work immediately after $"", function() {
       |    ^ Unknown Test
  3444 |         expect`\text{$\TextOrMath{text}{math}$}`.toParseLike`\text{$math$}`;
  3445 |     });
  3446 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3447}","  3445 |     });
  3446 |
> 3447 |     it(""\\TextOrMath should work later after $"", function() {
       |    ^ Unknown Test
  3448 |         expect`\text{$x+\TextOrMath{text}{math}$}`.toParseLike`\text{$x+math$}`;
  3449 |     });
  3450 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3451}","  3449 |     });
  3450 |
> 3451 |     it(""\\TextOrMath should work immediately after $ ends"", function() {
       |    ^ Unknown Test
  3452 |         expect`\text{$\TextOrMath{text}{math}$\TextOrMath{text}{math}}`
  3453 |             .toParseLike`\text{$math$text}`;
  3454 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3456}","  3454 |     });
  3455 |
> 3456 |     it(""\\TextOrMath should work in a macro"", function() {
       |    ^ Unknown Test
  3457 |         expect`\mode\text{\mode$\mode$\mode}\mode`
  3458 |             .toParseLike(r`math\text{text$math$text}math`, new Settings({macros: {
  3459 |                 ""\\mode"": ""\\TextOrMath{text}{math}"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3463}","  3461 |     });
  3462 |
> 3463 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3464 |         expect`\text\mode`.toParseLike(r`\text t`, new Settings({macros:
  3465 |             {""\\mode"": ""\\TextOrMath{t}{m}""}}));
  3466 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3495}","  3493 |     });
  3494 |
> 3495 |     it(""should build Unicode private area characters"", function() {
       |    ^ Unknown Test
  3496 |         expect`\gvertneqq\lvertneqq\ngeqq\ngeqslant\nleqq`.toBuild();
  3497 |         expect`\nleqslant\nshortmid\nshortparallel\varsubsetneq`.toBuild();
  3498 |         expect`\varsubsetneqq\varsupsetneq\varsupsetneqq`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3501}","  3499 |     });
  3500 |
> 3501 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3502 |         expect`\text\mode`.toParseLike(r`\text{text}`, new Settings({macros:
  3503 |             {""\\mode"": ""\\TextOrMath{text}{math}""}}));
  3504 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3506}","  3504 |     });
  3505 |
> 3506 |     it(""\\gdef defines macros"", function() {
       |    ^ Unknown Test
  3507 |         expect`\gdef\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3508 |         expect`\gdef\foo{hi}\foo+\text\foo`.toParseLike`hi+\text{hi}`;
  3509 |         expect`\gdef\foo#1{hi #1}\text{\foo{Alice}, \foo{Bob}}`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3524}","  3522 |     });
  3523 |
> 3524 |     it(""\\gdef defines macros with delimited parameter"", function() {
       |    ^ Unknown Test
  3525 |         expect`\gdef\foo|#1||{#1}\text{\foo| x y ||}`.toParseLike`\text{ x y }`;
  3526 |         expect`\gdef\foo#1|#2{#1+#2}\foo 1 2 |34`.toParseLike`12+34`;
  3527 |         expect`\gdef\foo#1#{#1}\foo1^{23}`.toParseLike`1^{23}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3533}","  3531 |     });
  3532 |
> 3533 |     it(""\\xdef should expand definition"", function() {
       |    ^ Unknown Test
  3534 |         expect`\def\foo{a}\xdef\bar{\foo}\def\foo{}\bar`.toParseLike`a`;
  3535 |         // \def\noexpand\foo{} expands into \def\foo{}
  3536 |         expect`\def\foo{a}\xdef\bar{\def\noexpand\foo{}}\foo\bar\foo`.toParseLike`a`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3543}","  3541 |     });
  3542 |
> 3543 |     it(""\\def should be handled in Parser"", () => {
       |    ^ Unknown Test
  3544 |         expect`\gdef\foo{1}`.toParse(new Settings({maxExpand: 0}));
  3545 |         expect`2^\def\foo{1}2`.not.toParse();
  3546 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3548}","  3546 |     });
  3547 |
> 3548 |     it(""\\def works locally"", () => {
       |    ^ Unknown Test
  3549 |         expect`\def\x{1}\x{\def\x{2}\x{\def\x{3}\x}\x}\x`
  3550 |             .toParseLike`1{2{3}2}1`;
  3551 |         expect`\def\x{1}\x\def\x{2}\x{\def\x{3}\x\def\x{4}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3555}","  3553 |     });
  3554 |
> 3555 |     it(""\\gdef overrides at all levels"", () => {
       |    ^ Unknown Test
  3556 |         expect`\def\x{1}\x{\def\x{2}\x{\gdef\x{3}\x}\x}\x`
  3557 |             .toParseLike`1{2{3}3}3`;
  3558 |         expect`\def\x{1}\x{\def\x{2}\x{\global\def\x{3}\x}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3564}","  3562 |     });
  3563 |
> 3564 |     it(""\\global needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3565 |         expect`\global\def\foo{}\foo`.toParseLike``;
  3566 |         expect`\global\edef\foo{}\foo`.toParseLike``;
  3567 |         expect`\def\DEF{\def}\global\DEF\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3574}","  3572 |     });
  3573 |
> 3574 |     it(""\\long needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3575 |         expect`\long\def\foo{}\foo`.toParseLike``;
  3576 |         expect`\long\edef\foo{}\foo`.toParseLike``;
  3577 |         expect`\long\global\def\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3581}","  3579 |     });
  3580 |
> 3581 |     it(""Macro arguments do not generate groups"", () => {
       |    ^ Unknown Test
  3582 |         expect`\def\x{1}\x\def\foo#1{#1}\foo{\x\def\x{2}\x}\x`
  3583 |             .toParseLike`1122`;
  3584 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3586}","  3584 |     });
  3585 |
> 3586 |     it(""\\textbf arguments do generate groups"", () => {
       |    ^ Unknown Test
  3587 |         expect`\def\x{1}\x\textbf{\x\def\x{2}\x}\x`.toParseLike`1\textbf{12}1`;
  3588 |     });
  3589 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3590}","  3588 |     });
  3589 |
> 3590 |     it(""\\sqrt optional arguments generate groups"", () => {
       |    ^ Unknown Test
  3591 |         expect`\def\x{1}\def\y{1}\x\y\sqrt[\def\x{2}\x]{\def\y{2}\y}\x\y`
  3592 |             .toParseLike`11\sqrt[2]{2}11`;
  3593 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3595}","  3593 |     });
  3594 |
> 3595 |     it(""array cells generate groups"", () => {
       |    ^ Unknown Test
  3596 |         expect`\def\x{1}\begin{matrix}\x&\def\x{2}\x&\x\end{matrix}\x`
  3597 |             .toParseLike`\begin{matrix}1&2&1\end{matrix}1`;
  3598 |         expect`\def\x{1}\begin{matrix}\def\x{2}\x&\x\end{matrix}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3626}","  3624 |     });
  3625 |
> 3626 |     it(""\\let copies the definition"", () => {
       |    ^ Unknown Test
  3627 |         expect`\let\foo=\frac\def\frac{}\foo12`.toParseLike`\frac12`;
  3628 |         expect`\def\foo{1}\let\bar\foo\def\foo{2}\bar`.toParseLike`1`;
  3629 |         expect`\let\foo=\kern\edef\bar{\foo1em}\let\kern=\relax\bar`.toParseLike`\kern1em`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3646}","  3644 |     });
  3645 |
> 3646 |     it(""\\futurelet should parse correctly"", () => {
       |    ^ Unknown Test
  3647 |         expect`\futurelet\foo\frac1{2+\foo}`.toParseLike`\frac1{2+1}`;
  3648 |     });
  3649 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3650}","  3648 |     });
  3649 |
> 3650 |     it(""macros argument can simulate \\let"", () => {
       |    ^ Unknown Test
  3651 |         expect`\int`.toParseLike(""\\int\\limits"", {macros: {
  3652 |             ""\\Oldint"": {
  3653 |                 tokens: [{text: ""\\int"", noexpand: true}],",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3677}","  3675 |     });
  3676 |
> 3677 |     it(""\\newcommand defines new macros"", () => {
       |    ^ Unknown Test
  3678 |         expect`\newcommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3679 |         expect`\newcommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3680 |         // Function detection",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3692}","  3690 |     });
  3691 |
> 3692 |     it(""\\renewcommand redefines macros"", () => {
       |    ^ Unknown Test
  3693 |         expect`\renewcommand\foo{x^2}\foo+\foo`.not.toParse();
  3694 |         expect`\renewcommand{\foo}{x^2}\foo+\foo`.not.toParse();
  3695 |         expect`\renewcommand\bar{x^2}\bar+\bar`.toParseLike`x^2+x^2`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3700}","  3698 |     });
  3699 |
> 3700 |     it(""\\providecommand defines but does not redefine macros"", () => {
       |    ^ Unknown Test
  3701 |         expect`\providecommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3702 |         expect`\providecommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3703 |         expect`\newcommand{\foo}{1}\foo\providecommand{\foo}{2}\foo`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3711}","  3709 |     });
  3710 |
> 3711 |     it(""\\newcommand is local"", () => {
       |    ^ Unknown Test
  3712 |         expect`\newcommand\foo{1}\foo{\renewcommand\foo{2}\foo}\foo`
  3713 |             .toParseLike`1{2}1`;
  3714 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3716}","  3714 |     });
  3715 |
> 3716 |     it(""\\newcommand accepts number of arguments"", () => {
       |    ^ Unknown Test
  3717 |         expect`\newcommand\foo[1]{#1^2}\foo x+\foo{y}`.toParseLike`x^2+y^2`;
  3718 |         expect`\newcommand\foo[10]{#1^2}\foo 0123456789`.toParseLike`0^2`;
  3719 |         expect`\newcommand\foo[x]{}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3725}","  3723 |     // This may change in the future, if we support the extra features of
  3724 |     // \hspace.
> 3725 |     it(""should treat \\hspace, \\hskip like \\kern"", function() {
       |    ^ Unknown Test
  3726 |         expect`\hspace{1em}`.toParseLike`\kern1em`;
  3727 |         expect`\hskip{1em}`.toParseLike`\kern1em`;
  3728 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3730}","  3728 |     });
  3729 |
> 3730 |     it(""should expand \\limsup as expected"", () => {
       |    ^ Unknown Test
  3731 |         expect`\limsup`.toParseLike`\operatorname*{lim\,sup}`;
  3732 |     });
  3733 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3734}","  3732 |     });
  3733 |
> 3734 |     it(""should expand \\liminf as expected"", () => {
       |    ^ Unknown Test
  3735 |         expect`\liminf`.toParseLike`\operatorname*{lim\,inf}`;
  3736 |     });
  3737 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3738}","  3736 |     });
  3737 |
> 3738 |     it(""should expand AMS log-like symbols as expected"", () => {
       |    ^ Unknown Test
  3739 |         expect`\injlim`.toParseLike`\operatorname*{inj\,lim}`;
  3740 |         expect`\projlim`.toParseLike`\operatorname*{proj\,lim}`;
  3741 |         expect`\varlimsup`.toParseLike`\operatorname*{\overline{lim}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3748}","  3746 |     });
  3747 |
> 3748 |     it(""should expand \\plim as expected"", () => {
       |    ^ Unknown Test
  3749 |         expect`\plim`.toParseLike`\mathop{\operatorname{plim}}\limits`;
  3750 |     });
  3751 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3752}","  3750 |     });
  3751 |
> 3752 |     it(""should expand \\argmin as expected"", () => {
       |    ^ Unknown Test
  3753 |         expect`\argmin`.toParseLike`\operatorname*{arg\,min}`;
  3754 |     });
  3755 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3756}","  3754 |     });
  3755 |
> 3756 |     it(""should expand \\argmax as expected"", () => {
       |    ^ Unknown Test
  3757 |         expect`\argmax`.toParseLike`\operatorname*{arg\,max}`;
  3758 |     });
  3759 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3760}","  3758 |     });
  3759 |
> 3760 |     it(""should expand \\bra as expected"", () => {
       |    ^ Unknown Test
  3761 |         expect`\bra{\phi}`.toParseLike`\mathinner{\langle{\phi}|}`;
  3762 |     });
  3763 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3764}","  3762 |     });
  3763 |
> 3764 |     it(""should expand \\ket as expected"", () => {
       |    ^ Unknown Test
  3765 |         expect`\ket{\psi}`.toParseLike`\mathinner{|{\psi}\rangle}`;
  3766 |     });
  3767 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3768}","  3766 |     });
  3767 |
> 3768 |     it(""should expand \\braket as expected"", () => {
       |    ^ Unknown Test
  3769 |         expect`\braket{\phi|\psi}`.toParseLike`\mathinner{\langle{\phi|\psi}\rangle}`;
  3770 |     });
  3771 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3772}","  3770 |     });
  3771 |
> 3772 |     it(""should expand \\Bra as expected"", () => {
       |    ^ Unknown Test
  3773 |         expect`\Bra{\phi}`.toParseLike`\left\langle\phi\right|`;
  3774 |     });
  3775 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3776}","  3774 |     });
  3775 |
> 3776 |     it(""should expand \\Ket as expected"", () => {
       |    ^ Unknown Test
  3777 |         expect`\Ket{\psi}`.toParseLike`\left|\psi\right\rangle`;
  3778 |     });
  3779 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3780}","  3778 |     });
  3779 |
> 3780 |     it(""should expand \\Braket as expected"", () => {
       |    ^ Unknown Test
  3781 |         expect`\Braket{ ϕ | \frac{∂^2}{∂ t^2} | ψ }`.toParseLike`\left\langle ϕ\,\middle\vert\,\frac{∂^2}{∂ t^2}\,\middle\vert\, ψ\right\rangle`;
  3782 |     });
  3783 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3784}","  3782 |     });
  3783 |
> 3784 |     it(""should expand \\set as expected"", () => {
       |    ^ Unknown Test
  3785 |         expect`\set{x|x<5|S|}`.toParseLike`\{\,x\mid x<5|S|\,\}`;
  3786 |         // \set doesn't support special || or \| handling
  3787 |         expect`\set{x||x<5|S|}`.toParseLike`\{\,x\mid |x<5|S|\,\}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3791}","  3789 |     });
  3790 |
> 3791 |     it(""should expand \\Set as expected"", () => {
       |    ^ Unknown Test
  3792 |         expect`\Set{ x | x<\frac 1 2 |S| }`
  3793 |         .toParseLike`\left\{\: x\;\middle\vert\; x<\frac 1 2 |S| \:\right\}`;
  3794 |         expect`\Set{ x || x<\frac 1 2 |S| }`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3804}","  3802 |     const displayMode = new Settings({displayMode: true});
  3803 |
> 3804 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  3805 |         expect`\tag{hi}x+y`.not.toParse();
  3806 |     });
  3807 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3808}","  3806 |     });
  3807 |
> 3808 |     it(""should fail with multiple tags"", () => {
       |    ^ Unknown Test
  3809 |         expect`\tag{1}\tag{2}x+y`.not.toParse(displayMode);
  3810 |     });
  3811 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3812}","  3810 |     });
  3811 |
> 3812 |     it(""should fail with multiple tags in one row"", () => {
       |    ^ Unknown Test
  3813 |         expect`\begin{align}\tag{1}x+y\tag{2}\end{align}`.not.toParse(displayMode);
  3814 |     });
  3815 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3816}","  3814 |     });
  3815 |
> 3816 |     it(""should work with one tag per row"", () => {
       |    ^ Unknown Test
  3817 |         expect`\begin{align}\tag{1}x\\&+y\tag{2}\end{align}`.toParse(displayMode);
  3818 |     });
  3819 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3820}","  3818 |     });
  3819 |
> 3820 |     it(""should work with \\nonumber/\\notag"", () => {
       |    ^ Unknown Test
  3821 |         expect`\begin{align}\tag{1}\nonumber x\\&+y\notag\end{align}`
  3822 |         .toParseLike(r`\begin{align}\tag{1}x\\&+y\nonumber\end{align}`, displayMode);
  3823 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3825}","  3823 |     });
  3824 |
> 3825 |     it(""should build"", () => {
       |    ^ Unknown Test
  3826 |         expect`\tag{hi}x+y`.toBuild(displayMode);
  3827 |     });
  3828 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3829}","  3827 |     });
  3828 |
> 3829 |     it(""should ignore location of \\tag"", () => {
       |    ^ Unknown Test
  3830 |         expect`\tag{hi}x+y`.toParseLike(r`x+y\tag{hi}`, displayMode);
  3831 |     });
  3832 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3833}","  3831 |     });
  3832 |
> 3833 |     it(""should handle \\tag* like \\tag"", () => {
       |    ^ Unknown Test
  3834 |         expect`\tag{hi}x+y`.toParseLike(r`\tag*{({hi})}x+y`, displayMode);
  3835 |     });
  3836 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3862}","  3860 |
  3861 | describe(""\\@binrel automatic bin/rel/ord"", () => {
> 3862 |     it(""should generate proper class"", () => {
       |    ^ Unknown Test
  3863 |         expect`L\@binrel+xR`.toParseLike`L\mathbin xR`;
  3864 |         expect`L\@binrel=xR`.toParseLike`L\mathrel xR`;
  3865 |         expect`L\@binrel xxR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3871}","  3869 |     });
  3870 |
> 3871 |     it(""should base on just first character in group"", () => {
       |    ^ Unknown Test
  3872 |         expect`L\@binrel{+x}xR`.toParseLike`L\mathbin xR`;
  3873 |         expect`L\@binrel{=x}xR`.toParseLike`L\mathrel xR`;
  3874 |         expect`L\@binrel{xx}xR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3891}","  3889 |
  3890 | describe(""Unicode accents"", function() {
> 3891 |     it(""should parse Latin-1 letters in math mode"", function() {
       |    ^ Unknown Test
  3892 |         // TODO(edemaine): Unsupported Latin-1 letters in math: ÇÐÞçðþ
  3893 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ`
  3894 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3911}","  3909 |     });
  3910 |
> 3911 |     it(""should parse Latin-1 letters in text mode"", function() {
       |    ^ Unknown Test
  3912 |         // TODO(edemaine): Unsupported Latin-1 letters in text: ÇÐÞçðþ
  3913 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}`
  3914 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3931}","  3929 |     });
  3930 |
> 3931 |     it(""should support \\aa in text mode"", function() {
       |    ^ Unknown Test
  3932 |         expect`\text{\aa\AA}`.toParseLike(r`\text{\r a\r A}`, strictSettings);
  3933 |         expect`\aa`.not.toParse(strictSettings);
  3934 |         expect`\Aa`.not.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3942}","  3940 |     });
  3941 |
> 3942 |     it(""should parse multi-accented characters"", function() {
       |    ^ Unknown Test
  3943 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3944 |         // Doesn't parse quite the same as
  3945 |         // ""\\text{\\'{\\^a}\\'{\\=a}\\'{\\u a}}"" because of the ordgroups.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3948}","  3946 |     });
  3947 |
> 3948 |     it(""should parse accented i's and j's"", function() {
       |    ^ Unknown Test
  3949 |         expect`íȷ́`.toParseLike(r`\acute ı\acute ȷ`, nonstrictSettings);
  3950 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3951 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3955}","  3953 |
  3954 | describe(""Unicode"", function() {
> 3955 |     it(""should parse negated relations"", function() {
       |    ^ Unknown Test
  3956 |         expect`∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌`.toParse(strictSettings);
  3957 |     });
  3958 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3959}","  3957 |     });
  3958 |
> 3959 |     it(""should build relations"", function() {
       |    ^ Unknown Test
  3960 |         expect`∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌`.toBuild(strictSettings);
  3961 |     });
  3962 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3963}","  3961 |     });
  3962 |
> 3963 |     it(""should parse relations"", function() {
       |    ^ Unknown Test
  3964 |         // These characters are not in the KaTeX fonts. So they build with an error message.
  3965 |         expect`⊶⊷`.toParse();
  3966 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3968}","  3966 |     });
  3967 |
> 3968 |     it(""should build big operators"", function() {
       |    ^ Unknown Test
  3969 |         expect`∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆`.toBuild(strictSettings);
  3970 |     });
  3971 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3972}","  3970 |     });
  3971 |
> 3972 |     it(""should build more relations"", function() {
       |    ^ Unknown Test
  3973 |         expect`⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋`.toBuild(strictSettings);
  3974 |     });
  3975 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3986}","  3984 |     });
  3985 |
> 3986 |     it(""should build arrows"", function() {
       |    ^ Unknown Test
  3987 |         expect`←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉`.toBuild(strictSettings);
  3988 |     });
  3989 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3990}","  3988 |     });
  3989 |
> 3990 |     it(""should build more arrows"", function() {
       |    ^ Unknown Test
  3991 |         expect`⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼`.toBuild(strictSettings);
  3992 |     });
  3993 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4076}","  4074 |
  4075 | describe(""The maxExpand setting"", () => {
> 4076 |     it(""should prevent expansion"", () => {
       |    ^ Unknown Test
  4077 |         expect`\gdef\foo{1}\foo`.toParse();
  4078 |         expect`\gdef\foo{1}\foo`.toParse(new Settings({maxExpand: 1}));
  4079 |         expect`\gdef\foo{1}\foo`.not.toParse(new Settings({maxExpand: 0}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4082}","  4080 |     });
  4081 |
> 4082 |     it(""should prevent infinite loops"", () => {
       |    ^ Unknown Test
  4083 |         expect`\gdef\foo{\foo}\foo`.not.toParse(
  4084 |             new Settings({maxExpand: 10}));
  4085 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4087}","  4085 |     });
  4086 |
> 4087 |     it(""should prevent exponential blowup via \\edef"", () => {
       |    ^ Unknown Test
  4088 |         expect`\edef0{x}\edef0{00}\edef0{00}\edef0{00}\edef0{00}`.not.toParse(
  4089 |             new Settings({maxExpand: 10}));
  4090 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4138}","  4136 |
  4137 | describe(""Newlines via \\\\ and \\newline"", function() {
> 4138 |     it(""should build \\\\ without the optional argument and \\newline the same"", () => {
       |    ^ Unknown Test
  4139 |         expect`hello \\ world`.toBuildLike`hello \newline world`;
  4140 |     });
  4141 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4142}","  4140 |     });
  4141 |
> 4142 |     it(""should not allow \\newline to scan for an optional size argument"", () => {
       |    ^ Unknown Test
  4143 |         expect`hello \newline[w]orld`.toBuild();
  4144 |     });
  4145 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4146}","  4144 |     });
  4145 |
> 4146 |     it(""should not allow \\cr at top level"", () => {
       |    ^ Unknown Test
  4147 |         expect`hello \cr world`.not.toBuild();
  4148 |     });
  4149 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4161}","  4159 |
  4160 | describe(""Symbols"", function() {
> 4161 |     it(""should parse \\text{\\i\\j}"", () => {
       |    ^ Unknown Test
  4162 |         expect`\text{\i\j}`.toBuild(strictSettings);
  4163 |     });
  4164 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4165}","  4163 |     });
  4164 |
> 4165 |     it(""should parse spacing functions in math or text mode"", () => {
       |    ^ Unknown Test
  4166 |         expect`A\;B\,C\nobreakspace \text{A\;B\,C\nobreakspace}`.toBuild(strictSettings);
  4167 |     });
  4168 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4169}","  4167 |     });
  4168 |
> 4169 |     it(""should build \\minuso"", () => {
       |    ^ Unknown Test
  4170 |         expect`\\minuso`.toBuild(strictSettings);
  4171 |     });
  4172 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4173}","  4171 |     });
  4172 |
> 4173 |     it(""should render ligature commands like their unicode characters"", () => {
       |    ^ Unknown Test
  4174 |         expect`\text{\ae\AE\oe\OE\o\O\ss}`.toBuildLike(r`\text{æÆœŒøØß}`, strictSettings);
  4175 |     });
  4176 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4179}","  4177 |
  4178 | describe(""strict setting"", function() {
> 4179 |     it(""should allow unicode text when not strict"", () => {
       |    ^ Unknown Test
  4180 |         expect`é`.toParse(new Settings(nonstrictSettings));
  4181 |         expect`試`.toParse(new Settings(nonstrictSettings));
  4182 |         expect`é`.toParse(new Settings({strict: ""ignore""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4190}","  4188 |     });
  4189 |
> 4190 |     it(""should forbid unicode text when strict"", () => {
       |    ^ Unknown Test
  4191 |         expect`é`.not.toParse(new Settings({strict: true}));
  4192 |         expect`試`.not.toParse(new Settings({strict: true}));
  4193 |         expect`é`.not.toParse(new Settings({strict: ""error""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4201}","  4199 |     });
  4200 |
> 4201 |     it(""should warn about unicode text when default"", () => {
       |    ^ Unknown Test
  4202 |         expect`é`.toWarn(new Settings());
  4203 |         expect`試`.toWarn(new Settings());
  4204 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4206}","  4204 |     });
  4205 |
> 4206 |     it(""should always allow unicode text in text mode"", () => {
       |    ^ Unknown Test
  4207 |         expect`\text{é試}`.toParse(nonstrictSettings);
  4208 |         expect`\text{é試}`.toParse(strictSettings);
  4209 |         expect`\text{é試}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4212}","  4210 |     });
  4211 |
> 4212 |     it(""should warn about top-level \\newline in display mode"", () => {
       |    ^ Unknown Test
  4213 |         expect`x\\y`.toWarn(new Settings({displayMode: true}));
  4214 |         expect`x\\y`.toParse(new Settings({displayMode: false}));
  4215 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4261}","  4259 |         }).toThrow(errorMessage);
  4260 |     });
> 4261 |     it(""should add font metrics to metrics map and render successfully"", () => {
       |    ^ Unknown Test
  4262 |         const mockMetrics = {};
  4263 |         // mock font metrics for the symbols that we added previously
  4264 |         for (let number = 0; number <= 9; number++) {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4297}","  4295 |
  4296 | describe(""\\relax"", () => {
> 4297 |     it(""should stop the expansion"", () => {
       |    ^ Unknown Test
  4298 |         expect`\kern2\relax em`.not.toParse();
  4299 |     });
  4300 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4303}","  4301 |
  4302 | describe(""\\emph"", () => {
> 4303 |     it(""should toggle italics"", () => {
       |    ^ Unknown Test
  4304 |         expect`\emph{foo \emph{bar}}`.toBuildLike`\textit{foo \textup{bar}}`;
  4305 |     });
  4306 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4307}","  4305 |     });
  4306 |
> 4307 |     it(""should toggle italics within text"", () => {
       |    ^ Unknown Test
  4308 |         expect`\text{\emph{foo \emph{bar}}}`.toBuildLike`\text{\textit{foo \textup{bar}}}`;
  4309 |     });
  4310 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4311}","  4309 |     });
  4310 |
> 4311 |     it(""should toggle italics within textup"", () => {
       |    ^ Unknown Test
  4312 |         expect`\textup{\emph{foo \emph{bar}}}`.toBuildLike`\textup{\textit{foo \textup{bar}}}`;
  4313 |     });
  4314 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4315}","  4313 |     });
  4314 |
> 4315 |     it(""should toggle italics within textit"", () => {
       |    ^ Unknown Test
  4316 |         expect`\textit{\emph{foo \emph{bar}}}`.toBuildLike`\textit{\textup{foo \textit{bar}}}`;
  4317 |     });
  4318 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 132}","  130 |         });
  131 |         it(""complains about mismatched \\verb with end of line"", function() {
> 132 |             expect(""\\verb|hello\nworld|"").toFailWithParseError(
      |            ^ Redundant Assertion
  133 |                 ""\\verb ended by end of line instead of matching delimiter"");
  134 |         });
  135 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 291}","  289 |     describe(""#_innerLex"", function() {
  290 |         it(""rejects lone surrogate char"", function() {
> 291 |             expect(""\udcba "").toFailWithParseError(
      |            ^ Redundant Assertion
  292 |                    ""Unexpected character: '\udcba' at position 1:"" +
  293 |                     "" \udcba\u0332 "");
  294 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 296}","  294 |         });
  295 |         it(""rejects lone backslash at end of input"", function() {
> 296 |             expect(""\\"").toFailWithParseError(
      |            ^ Redundant Assertion
  297 |                    ""Unexpected character: '\\' at position 1: \\̲"");
  298 |         });
  299 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 8, 'line': 328}","  326 | describe(""Unicode accents"", function() {
  327 |     it(""should return error for invalid combining characters"", function() {
> 328 |         expect(""A\u0328"").toFailWithParseError(
      |        ^ Redundant Assertion
  329 |             ""Unknown accent ' ̨' at position 1: Ą̲̲"");
  330 |     });
  331 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 6}","  4 |
  5 |     describe(""#handleInfixNodes"", function() {
> 6 |         it(""rejects repeated infix operators"", function() {
    |        ^ Unknown Test
  7 |             expect`1\over 2\over 3`.toFailWithParseError(
  8 |                    ""only one infix operator per group at position 9: "" +
  9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 11}","   9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");
  10 |         });
> 11 |         it(""rejects conflicting infix operators"", function() {
     |        ^ Unknown Test
  12 |             expect`1\over 2\choose 3`.toFailWithParseError(
  13 |                    ""only one infix operator per group at position 9: "" +
  14 |                    ""1\\over 2\\̲c̲h̲o̲o̲s̲e̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 19}","  17 |
  18 |     describe(""#handleSupSubscript"", function() {
> 19 |         it(""rejects ^ at end of group"", function() {
     |        ^ Unknown Test
  20 |             expect`{1^}`.toFailWithParseError(
  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 23}","  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });
> 23 |         it(""rejects _ at end of input"", function() {
     |        ^ Unknown Test
  24 |             expect`1_`.toFailWithParseError(
  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 27}","  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });
> 27 |         it(""rejects \\sqrt as argument to ^"", function() {
     |        ^ Unknown Test
  28 |             expect`1^\sqrt{2}`.toFailWithParseError(
  29 |                    ""Got function '\\sqrt' with no arguments as superscript"" +
  30 |                    "" at position 3: 1^\\̲s̲q̲r̲t̲{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 35}","  33 |
  34 |     describe(""#parseAtom"", function() {
> 35 |         it(""rejects \\limits without operator"", function() {
     |        ^ Unknown Test
  36 |             expect`\alpha\limits\omega`.toFailWithParseError(
  37 |                    ""Limit controls must follow a math operator"" +
  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 40}","  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");
  39 |         });
> 40 |         it(""rejects \\limits at the beginning of the input"", function() {
     |        ^ Unknown Test
  41 |             expect`\limits\omega`.toFailWithParseError(
  42 |                    ""Limit controls must follow a math operator"" +
  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 45}","  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");
  44 |         });
> 45 |         it(""rejects double superscripts"", function() {
     |        ^ Unknown Test
  46 |             expect`1^2^3`.toFailWithParseError(
  47 |                    ""Double superscript at position 4: 1^2^̲3"");
  48 |             expect`1^{2+3}_4^5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 51}","  49 |                    ""Double superscript at position 10: 1^{2+3}_4^̲5"");
  50 |         });
> 51 |         it(""rejects double superscripts involving primes"", function() {
     |        ^ Unknown Test
  52 |             expect`1'_2^3`.toFailWithParseError(
  53 |                    ""Double superscript at position 5: 1'_2^̲3"");
  54 |             expect`1^2'`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 61}","  59 |                    ""Double superscript at position 5: 1'_2'̲"");
  60 |         });
> 61 |         it(""rejects double subscripts"", function() {
     |        ^ Unknown Test
  62 |             expect`1_2_3`.toFailWithParseError(
  63 |                    ""Double subscript at position 4: 1_2_̲3"");
  64 |             expect`1_{2+3}^4_5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 70}","  68 |
  69 |     describe(""#parseImplicitGroup"", function() {
> 70 |         it(""reports unknown environments"", function() {
     |        ^ Unknown Test
  71 |             expect`\begin{foo}bar\end{foo}`.toFailWithParseError(
  72 |                    ""No such environment: foo at position 7:"" +
  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 75}","  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");
  74 |         });
> 75 |         it(""reports mismatched environments"", function() {
     |        ^ Unknown Test
  76 |             expect`\begin{pmatrix}1&2\\3&4\end{bmatrix}+5`
  77 |                 .toFailWithParseError(
  78 |                    ""Mismatch: \\begin{pmatrix} matched by \\end{bmatrix}"" +",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 84}","  82 |
  83 |     describe(""#parseFunction"", function() {
> 84 |         it(""rejects math-mode functions in text mode"", function() {
     |        ^ Unknown Test
  85 |             expect`\text{\sqrt2 is irrational}`.toFailWithParseError(
  86 |                 ""Can't use function '\\sqrt' in text mode"" +
  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 89}","  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");
  88 |         });
> 89 |         it(""rejects text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  90 |             expect`$`.toFailWithParseError(
  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 93}","  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });
> 93 |         it(""rejects strict-mode text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  94 |             expect`\'echec`.toFailWithParseError(""LaTeX-incompatible input "" +
  95 |                 ""and strict mode is set to 'error': LaTeX's accent \\' works "" +
  96 |                 ""only in text mode [mathVsTextAccents]"", strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 101}","   99 |
  100 |     describe(""#parseArguments"", function() {
> 101 |         it(""complains about missing argument at end of input"", function() {
      |        ^ Unknown Test
  102 |             expect`2\sqrt`.toFailWithParseError(
  103 |                    ""Expected group as argument to '\\sqrt'"" +
  104 |                    "" at end of input: 2\\sqrt"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 106}","  104 |                    "" at end of input: 2\\sqrt"");
  105 |         });
> 106 |         it(""complains about missing argument at end of group"", function() {
      |        ^ Unknown Test
  107 |             expect`1^{2\sqrt}`.toFailWithParseError(
  108 |                    ""Expected group as argument to '\\sqrt'"" +
  109 |                    "" at position 10: 1^{2\\sqrt}̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 111}","  109 |                    "" at position 10: 1^{2\\sqrt}̲"");
  110 |         });
> 111 |         it(""complains about functions as arguments to others"", function() {
      |        ^ Unknown Test
  112 |             expect`\sqrt\over2`.toFailWithParseError(
  113 |                    ""Got function '\\over' with no arguments as argument to"" +
  114 |                    "" '\\sqrt' at position 6: \\sqrt\\̲o̲v̲e̲r̲2"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 119}","  117 |
  118 |     describe(""#parseGroup"", function() {
> 119 |         it(""complains about undefined control sequence"", function() {
      |        ^ Unknown Test
  120 |             expect`\xyz`.toFailWithParseError(
  121 |                    ""Undefined control sequence: \\xyz"" +
  122 |                    "" at position 1: \\̲x̲y̲z̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 127}","  125 |
  126 |     describe(""#verb"", function() {
> 127 |         it(""complains about mismatched \\verb with end of string"", function() {
      |        ^ Unknown Test
  128 |             expect`\verb|hello`.toFailWithParseError(
  129 |                 ""\\verb ended by end of line instead of matching delimiter"");
  130 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 142}","  140 |
  141 |     describe(""#parseInput expecting EOF"", function() {
> 142 |         it(""complains about extra }"", function() {
      |        ^ Unknown Test
  143 |             expect`{1+2}}`.toFailWithParseError(
  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 146}","  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });
> 146 |         it(""complains about extra \\end"", function() {
      |        ^ Unknown Test
  147 |             expect`x\end{matrix}`.toFailWithParseError(
  148 |                    ""Expected 'EOF', got '\\end' at position 2:"" +
  149 |                    "" x\\̲e̲n̲d̲{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 151}","  149 |                    "" x\\̲e̲n̲d̲{matrix}"");
  150 |         });
> 151 |         it(""complains about top-level &"", function() {
      |        ^ Unknown Test
  152 |             expect`1&2`.toFailWithParseError(
  153 |                    ""Expected 'EOF', got '&' at position 2: 1&̲2"");
  154 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 158}","  156 |
  157 |     describe(""#parseImplicitGroup expecting \\right"", function() {
> 158 |         it(""rejects missing \\right"", function() {
      |        ^ Unknown Test
  159 |             expect`\left(1+2)`.toFailWithParseError(
  160 |                    ""Expected '\\right', got 'EOF' at end of input:"" +
  161 |                    "" \\left(1+2)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 163}","  161 |                    "" \\left(1+2)"");
  162 |         });
> 163 |         it(""rejects incorrectly scoped \\right"", function() {
      |        ^ Unknown Test
  164 |             expect`{\left(1+2}\right)`.toFailWithParseError(
  165 |                    ""Expected '\\right', got '}' at position 11:"" +
  166 |                    "" {\\left(1+2}̲\\right)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 174}","  172 |
  173 |     describe(""#parseSpecialGroup expecting braces"", function() {
> 174 |         it(""complains about missing { for color"", function() {
      |        ^ Unknown Test
  175 |             expect`\textcolor#ffffff{text}`.toFailWithParseError(
  176 |                    ""Invalid color: '#' at position 11:"" +
  177 |                    "" \\textcolor#̲ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 179}","  177 |                    "" \\textcolor#̲ffffff{text}"");
  178 |         });
> 179 |         it(""complains about missing { for size"", function() {
      |        ^ Unknown Test
  180 |             expect`\rule{1em}[2em]`.toFailWithParseError(
  181 |                    ""Invalid size: '[' at position 11: \\rule{1em}[̲2em]"");
  182 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 184}","  182 |         });
  183 |         // Can't test for the [ of an optional group since it's optional
> 184 |         it(""complains about missing } for color"", function() {
      |        ^ Unknown Test
  185 |             expect`\textcolor{#ffffff{text}`.toFailWithParseError(
  186 |                    ""Unexpected end of input in a macro argument,"" +
  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 189}","  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");
  188 |         });
> 189 |         it(""complains about missing ] for size"", function() {
      |        ^ Unknown Test
  190 |             expect`\rule[1em{2em}{3em}`.toFailWithParseError(
  191 |                    ""Unexpected end of input in a macro argument,"" +
  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 194}","  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");
  193 |         });
> 194 |         it(""complains about missing ] for size at end of input"", function() {
      |        ^ Unknown Test
  195 |             expect`\rule[1em`.toFailWithParseError(
  196 |                    ""Unexpected end of input in a macro argument,"" +
  197 |                    "" expected ']' at end of input: \\rule[1em"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 199}","  197 |                    "" expected ']' at end of input: \\rule[1em"");
  198 |         });
> 199 |         it(""complains about missing } for color at end of input"", function() {
      |        ^ Unknown Test
  200 |             expect`\textcolor{#123456`.toFailWithParseError(
  201 |                    ""Unexpected end of input in a macro argument,"" +
  202 |                    "" expected '}' at end of input: …xtcolor{#123456"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 207}","  205 |
  206 |     describe(""#parseGroup expecting }"", function() {
> 207 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  208 |             expect`\sqrt{2`.toFailWithParseError(
  209 |                    ""Expected '}', got 'EOF' at end of input: \\sqrt{2"");
  210 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 214}","  212 |
  213 |     describe(""#parseOptionalGroup expecting ]"", function() {
> 214 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  215 |             expect`\sqrt[3`.toFailWithParseError(
  216 |                    ""Unexpected end of input in a macro argument,"" +
  217 |                    "" expected ']' at end of input: \\sqrt[3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 219}","  217 |                    "" expected ']' at end of input: \\sqrt[3"");
  218 |         });
> 219 |         it(""before group"", function() {
      |        ^ Unknown Test
  220 |             expect`\sqrt[3{2}`.toFailWithParseError(
  221 |                    ""Unexpected end of input in a macro argument,"" +
  222 |                    "" expected ']' at end of input: \\sqrt[3{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 231}","  229 |
  230 |     describe(""parseArray"", function() {
> 231 |         it(""rejects missing \\end"", function() {
      |        ^ Unknown Test
  232 |             expect`\begin{matrix}1`.toFailWithParseError(
  233 |                    ""Expected & or \\\\ or \\cr or \\end at end of input:"" +
  234 |                    "" \\begin{matrix}1"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 236}","  234 |                    "" \\begin{matrix}1"");
  235 |         });
> 236 |         it(""rejects incorrectly scoped \\end"", function() {
      |        ^ Unknown Test
  237 |             expect`{\begin{matrix}1}\end{matrix}`.toFailWithParseError(
  238 |                    ""Expected & or \\\\ or \\cr or \\end at position 17:"" +
  239 |                    "" …\\begin{matrix}1}̲\\end{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 244}","  242 |
  243 |     describe(""array environment"", function() {
> 244 |         it(""rejects unknown column types"", function() {
      |        ^ Unknown Test
  245 |             expect`\begin{array}{cba}\end{array}`.toFailWithParseError(
  246 |                    ""Unknown column alignment: b at position 16:"" +
  247 |                    "" \\begin{array}{cb̲a}\\end{array}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 256}","  254 |
  255 |     describe(""delimiter functions"", function() {
> 256 |         it(""reject invalid opening delimiters"", function() {
      |        ^ Unknown Test
  257 |             expect`\bigl 1 + 2 \bigr`.toFailWithParseError(
  258 |                    ""Invalid delimiter '1' after '\\bigl' at position 7:"" +
  259 |                    "" \\bigl 1̲ + 2 \\bigr"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 261}","  259 |                    "" \\bigl 1̲ + 2 \\bigr"");
  260 |         });
> 261 |         it(""reject invalid closing delimiters"", function() {
      |        ^ Unknown Test
  262 |             expect`\bigl(1+2\bigr=3`.toFailWithParseError(
  263 |                    ""Invalid delimiter '=' after '\\bigr' at position 15:"" +
  264 |                    "" \\bigl(1+2\\bigr=̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 266}","  264 |                    "" \\bigl(1+2\\bigr=̲3"");
  265 |         });
> 266 |         it(""reject group opening delimiters"", function() {
      |        ^ Unknown Test
  267 |             expect`\bigl{(}1+2\bigr)3`.toFailWithParseError(
  268 |                    ""Invalid delimiter type 'ordgroup' at position 6:"" +
  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 271}","  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");
  270 |         });
> 271 |         it(""reject group closing delimiters"", function() {
      |        ^ Unknown Test
  272 |             expect`\bigl(1+2\bigr{)}3`.toFailWithParseError(
  273 |                    ""Invalid delimiter type 'ordgroup' at position 15:"" +
  274 |                    "" \\bigl(1+2\\bigr{̲)̲}̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 279}","  277 |
  278 |     describe(""\\begin and \\end"", function() {
> 279 |         it(""reject invalid environment names"", function() {
      |        ^ Unknown Test
  280 |             expect`\begin x\end y`.toFailWithParseError(
  281 |                    ""No such environment: x at position 8: \\begin x̲\\end y"");
  282 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 302}","  300 |
  301 |     describe(""#_innerLexColor"", function() {
> 302 |         it(""reject 3-digit hex notation without #"", function() {
      |        ^ Unknown Test
  303 |             expect`\textcolor{1a2}{foo}`.toFailWithParseError(
  304 |                    ""Invalid color: '1a2'"" +
  305 |                    "" at position 11: \\textcolor{̲1̲a̲2̲}̲{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 310}","  308 |
  309 |     describe(""#_innerLexSize"", function() {
> 310 |         it(""reject size without unit"", function() {
      |        ^ Unknown Test
  311 |             expect`\rule{0}{2em}`.toFailWithParseError(
  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 314}","  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });
> 314 |         it(""reject size with bogus unit"", function() {
      |        ^ Unknown Test
  315 |             expect`\rule{1au}{2em}`.toFailWithParseError(
  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 318}","  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });
> 318 |         it(""reject size without number"", function() {
      |        ^ Unknown Test
  319 |             expect`\rule{em}{2em}`.toFailWithParseError(
  320 |                    ""Invalid size: 'em' at position 6: \\rule{̲e̲m̲}̲{2em}"");
  321 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 5, 'column': 4, 'index': 124}","  3 |
  4 | describe(""Symbols and macros"", () => {
> 5 |     for (const macro in macros) {
    |    ^ Conditional Test Logic
  6 |         if (!macros.hasOwnProperty(macro)) {
  7 |             continue;
  8 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 6, 'column': 8, 'index': 162}","  4 | describe(""Symbols and macros"", () => {
  5 |     for (const macro in macros) {
> 6 |         if (!macros.hasOwnProperty(macro)) {
    |        ^ Conditional Test Logic
  7 |             continue;
  8 |         }
  9 |         it(`macro ${macro} should not shadow a symbol`, () => {",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 10, 'column': 12, 'index': 307}","   8 |         }
   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
> 10 |             for (const kind in symbols) {
     |            ^ Conditional Test Logic
  11 |                 if (!symbols.hasOwnProperty(kind)) {
  12 |                     continue;
  13 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 11, 'column': 16, 'index': 353}","   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
  10 |             for (const kind in symbols) {
> 11 |                 if (!symbols.hasOwnProperty(kind)) {
     |                ^ Conditional Test Logic
  12 |                     continue;
  13 |                 }
  14 |                 expect(symbols[kind][macro]).toBeFalsy();",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 18, 'column': 12, 'index': 481}","  16 |                   splitAtDelimiters(actual, delimiters);
  17 |
> 18 |             if (split.length !== result.length) {
     |            ^ Conditional Test Logic
  19 |                 message.pass = false;
  20 |                 message.message = () => ""Different number of splits: "" +
  21 |                     split.length + "" vs. "" + result.length + "" ("" +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 27, 'column': 12, 'index': 861}","  25 |             }
  26 |
> 27 |             for (let i = 0; i < split.length; i++) {
     |            ^ Conditional Test Logic
  28 |                 const real = split[i];
  29 |                 const correct = result[i];
  30 |",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 34, 'column': 16, 'index': 1061}","  32 |                 let diff;
  33 |
> 34 |                 if (real.type !== correct.type) {
     |                ^ Conditional Test Logic
  35 |                     good = false;
  36 |                     diff = ""type"";
  37 |                 } else if (real.data !== correct.data) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 37, 'column': 23, 'index': 1187}","  35 |                     good = false;
  36 |                     diff = ""type"";
> 37 |                 } else if (real.data !== correct.data) {
     |                       ^ Conditional Test Logic
  38 |                     good = false;
  39 |                     diff = ""data"";
  40 |                 } else if (real.display !== correct.display) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 40, 'column': 23, 'index': 1313}","  38 |                     good = false;
  39 |                     diff = ""data"";
> 40 |                 } else if (real.display !== correct.display) {
     |                       ^ Conditional Test Logic
  41 |                     good = false;
  42 |                     diff = ""display"";
  43 |                 }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 45, 'column': 16, 'index': 1460}","  43 |                 }
  44 |
> 45 |                 if (!good) {
     |                ^ Conditional Test Logic
  46 |                     message.pass = false;
  47 |                     message.message = () => ""Difference at split "" +
  48 |                         (i + 1) + "": "" + JSON.stringify(real) +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 332, 'column': 8, 'index': 11671}","  330 |             '\\]'];
  331 |         const el = document.createElement('div');
> 332 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  333 |             const txt = document.createTextNode(textNodes[i]);
  334 |             el.appendChild(txt);
  335 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 350, 'column': 8, 'index': 12420}","  348 |             'consectetur adipiscing elit'];
  349 |         const el = document.createElement('div');
> 350 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  351 |             const txt = document.createTextNode(textNodes[i]);
  352 |             el.appendChild(txt);
  353 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 355, 'column': 8, 'index': 12630}","  353 |         }
  354 |         const el2 = document.createElement('div');
> 355 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  356 |             const txt = document.createTextNode(textNodes[i]);
  357 |             el2.appendChild(txt);
  358 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 62}","  60 | describe(""A delimiter splitter"", function() {
  61 |     it(""doesn't split when there are no delimiters"", function() {
> 62 |         expect(""hello"").toSplitInto(
     |        ^ Redundant Assertion
  63 |             [
  64 |                 {type: ""text"", data: ""hello""},
  65 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 72}","  70 |
  71 |     it(""doesn't create a math node with only one left delimiter"", function() {
> 72 |         expect(""hello ( world"").toSplitInto(
     |        ^ Redundant Assertion
  73 |             [
  74 |                 {type: ""text"", data: ""hello ""},
  75 |                 {type: ""text"", data: ""( world""},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 83}","  81 |
  82 |     it(""doesn't split when there's only a right delimiter"", function() {
> 83 |         expect(""hello ) world"").toSplitInto(
     |        ^ Redundant Assertion
  84 |             [
  85 |                 {type: ""text"", data: ""hello ) world""},
  86 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 93}","  91 |
  92 |     it(""splits when there are both delimiters"", function() {
> 93 |         expect(""hello ( world ) boo"").toSplitInto(
     |        ^ Redundant Assertion
  94 |             [
  95 |                 {type: ""text"", data: ""hello ""},
  96 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 106}","  104 |
  105 |     it(""splits on multi-character delimiters"", function() {
> 106 |         expect(""hello [[ world ]] boo"").toSplitInto(
      |        ^ Redundant Assertion
  107 |             [
  108 |                 {type: ""text"", data: ""hello ""},
  109 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 116}","  114 |                 {left: ""[["", right: ""]]"", display: false},
  115 |             ]);
> 116 |         expect(""hello \\begin{equation} world \\end{equation} boo"").toSplitInto(
      |        ^ Redundant Assertion
  117 |             [
  118 |                 {type: ""text"", data: ""hello ""},
  119 |                 {type: ""math"", data: ""\\begin{equation} world \\end{equation}"",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 131}","  129 |
  130 |     it(""splits multiple times"", function() {
> 131 |         expect(""hello ( world ) boo ( more ) stuff"").toSplitInto(
      |        ^ Redundant Assertion
  132 |             [
  133 |                 {type: ""text"", data: ""hello ""},
  134 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 147}","  145 |
  146 |     it(""leaves the ending when there's only a left delimiter"", function() {
> 147 |         expect(""hello ( world ) boo ( left"").toSplitInto(
      |        ^ Redundant Assertion
  148 |             [
  149 |                 {type: ""text"", data: ""hello ""},
  150 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 161}","  159 |
  160 |     it(""doesn't split when close delimiters are in {}s"", function() {
> 161 |         expect(""hello ( world { ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  162 |             [
  163 |                 {type: ""text"", data: ""hello ""},
  164 |                 {type: ""math"", data: "" world { ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 172}","  170 |             ]);
  171 |
> 172 |         expect(""hello ( world { { } ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  173 |             [
  174 |                 {type: ""text"", data: ""hello ""},
  175 |                 {type: ""math"", data: "" world { { } ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 185}","  183 |
  184 |     it(""correctly processes sequences of $..$"", function() {
> 185 |         expect(""$hello$$world$$boo$"").toSplitInto(
      |        ^ Redundant Assertion
  186 |             [
  187 |                 {type: ""math"", data: ""hello"",
  188 |                     rawData: ""$hello$"", display: false},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 200}","  198 |
  199 |     it(""doesn't split at escaped delimiters"", function() {
> 200 |         expect(""hello ( world \\) ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  201 |             [
  202 |                 {type: ""text"", data: ""hello ""},
  203 |                 {type: ""math"", data: "" world \\) "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 224}","  222 |
  223 |     it(""splits when the right and left delimiters are the same"", function() {
> 224 |         expect(""hello $ world $ boo"").toSplitInto(
      |        ^ Redundant Assertion
  225 |             [
  226 |                 {type: ""text"", data: ""hello ""},
  227 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 237}","  235 |
  236 |     it(""ignores \\$"", function() {
> 237 |         expect(""$x = \\$5$"").toSplitInto(
      |        ^ Redundant Assertion
  238 |             [
  239 |                 {type: ""math"", data: ""x = \\$5"",
  240 |                     rawData: ""$x = \\$5$"", display: false},",,
test/unicode-spec.js,ConditionalTestLogic,"[{""startLine"":157,""endLine"":160}]",,25.0,2.0
test/unicode-spec.js,SubOptimalAssert,"[{""startLine"":163,""endLine"":163}]",,25.0,2.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1319,""endLine"":1323}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1402,""endLine"":1404}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2823,""endLine"":2825}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2840,""endLine"":2842}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2857,""endLine"":2860}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3128,""endLine"":3131}]",,557.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3825,""endLine"":3827}]",,557.0,117.0
test/katex-spec.js,OvercommentedTest,"[{""startLine"":4015,""endLine"":4050}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":67,""endLine"":69}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":86,""endLine"":89}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":111,""endLine"":114}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":126,""endLine"":128}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":144,""endLine"":146}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":162,""endLine"":164}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":178,""endLine"":180}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":300,""endLine"":305}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":344,""endLine"":346}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":361,""endLine"":363}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":388,""endLine"":391}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":493,""endLine"":495}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":567,""endLine"":572}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":574,""endLine"":604}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":670,""endLine"":679}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":683,""endLine"":689}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":695,""endLine"":697}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":719,""endLine"":721}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":831,""endLine"":841}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":855,""endLine"":857}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":993,""endLine"":995}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1041,""endLine"":1044}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1100,""endLine"":1110}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1112,""endLine"":1115}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1117,""endLine"":1120}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1138,""endLine"":1152}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1170,""endLine"":1173}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1175,""endLine"":1178}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1180,""endLine"":1183}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1199,""endLine"":1201}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1311,""endLine"":1313}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1546,""endLine"":1559}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1563,""endLine"":1568}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1694,""endLine"":1701}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2078,""endLine"":2095}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2116,""endLine"":2118}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2151,""endLine"":2153}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2262,""endLine"":2268}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2293,""endLine"":2298}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2300,""endLine"":2306}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2310,""endLine"":2316}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2318,""endLine"":2324}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2328,""endLine"":2333}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2335,""endLine"":2341}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2354,""endLine"":2359}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2367,""endLine"":2371}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2375,""endLine"":2380}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2382,""endLine"":2389}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2393,""endLine"":2399}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2407,""endLine"":2411}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2415,""endLine"":2421}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2434,""endLine"":2441}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2449,""endLine"":2453}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2457,""endLine"":2462}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2464,""endLine"":2471}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2475,""endLine"":2480}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2490,""endLine"":2495}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2497,""endLine"":2503}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2530,""endLine"":2533}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2537,""endLine"":2541}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2543,""endLine"":2545}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2549,""endLine"":2553}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2555,""endLine"":2558}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2560,""endLine"":2564}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2566,""endLine"":2569}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2573,""endLine"":2577}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2579,""endLine"":2581}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2585,""endLine"":2590}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2592,""endLine"":2596}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2598,""endLine"":2602}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2606,""endLine"":2615}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2617,""endLine"":2623}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2636,""endLine"":2641}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2645,""endLine"":2647}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2648,""endLine"":2650}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2654,""endLine"":2663}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2674,""endLine"":2685}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2703,""endLine"":2718}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2728,""endLine"":2738}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2752,""endLine"":2758}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2840,""endLine"":2842}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2857,""endLine"":2860}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2866,""endLine"":2868}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2961,""endLine"":2968}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2972,""endLine"":2975}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3417,""endLine"":3420}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3501,""endLine"":3504}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3804,""endLine"":3806}]",,557.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3825,""endLine"":3827}]",,557.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":96,""endLine"":99}]",,557.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":100,""endLine"":105}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1764,""endLine"":1766}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1899,""endLine"":1900}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3172,""endLine"":3172}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3187,""endLine"":3187}]",,557.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3982,""endLine"":3983}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":513,""endLine"":539}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":574,""endLine"":604}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":1610,""endLine"":1634}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3083,""endLine"":3098}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3506,""endLine"":3522}]",,557.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":4015,""endLine"":4050}]",,557.0,117.0
test/errors-spec.js,AnonymousTest,"[{""startLine"":219,""endLine"":223}]",,50.0,26.0
test/errors-spec.js,IdenticalTestDescription,"[{""startLine"":214,""endLine"":218}]",,50.0,26.0
