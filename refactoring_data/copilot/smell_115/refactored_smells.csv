file,type,smells,frame,itCount,describeCount
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 20, 'column': 8, 'index': 1016}","  18 |     it(""should not parse Latin-1 outside \\text{} with strict"", function() {
  19 |         const chars = 'ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ';
> 20 |         for (const ch of chars) {
     |        ^ Conditional Test Logic
  21 |             expect(ch).not.toParse(strictSettings);
  22 |         }
  23 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 144, 'column': 8, 'index': 5144}","  142 |
  143 |     it(""supportedCodepoint() should return the correct values"", () => {
> 144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |        ^ Conditional Test Logic
  145 |             expect(supportedCodepoint(codepoint)).toBe(
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 152, 'column': 15, 'index': 5441}","  150 |
  151 |     it(""scriptFromCodepoint() should return correct values"", () => {
> 152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |               ^ Conditional Test Logic
  153 |             const character = String.fromCharCode(codepoint);
  154 |             const script = scriptFromCodepoint(codepoint);
  155 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 156, 'column': 12, 'index': 5635}","  154 |             const script = scriptFromCodepoint(codepoint);
  155 |
> 156 |             for (const scriptName of scriptNames) {
      |            ^ Conditional Test Logic
  157 |                 if (scriptRegExps[scriptName].test(character)) {
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 157, 'column': 16, 'index': 5691}","  155 |
  156 |             for (const scriptName of scriptNames) {
> 157 |                 if (scriptRegExps[scriptName].test(character)) {
      |                ^ Conditional Test Logic
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;
  160 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 158, 'column': 20, 'index': 5760}","  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {
> 158 |                     expect(script).toEqual(scriptName);
      |                    ^ Duplicate Assert
  159 |                     continue outer;
  160 |                 }
  161 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 163, 'column': 12, 'index': 5877}","  161 |             }
  162 |
> 163 |             expect(script).toBe(null);
      |            ^ Duplicate Assert
  164 |             expect(supportedCodepoint(codepoint)).toBe(false);
  165 |         }
  166 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 154, 'column': 27, 'index': 5590}","  152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
  153 |             const character = String.fromCharCode(codepoint);
> 154 |             const script = scriptFromCodepoint(codepoint);
      |                           ^ Eager Test
  155 |
  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Eager Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 145, 'column': 19, 'index': 5223}","  143 |     it(""supportedCodepoint() should return the correct values"", () => {
  144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
> 145 |             expect(supportedCodepoint(codepoint)).toBe(
      |                   ^ Lazy Test
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );
  148 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Lazy Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 7}","   5 |
   6 | describe(""unicode"", function() {
>  7 |     it(""should build Latin-1 inside \\text{}"", function() {
     |    ^ Unknown Test
   8 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}`
   9 |             .toBuild();
  10 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 12}","  10 |     });
  11 |
> 12 |     it(""should build Latin-1 inside \\text{} like accent commands"", function() {
     |    ^ Unknown Test
  13 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}`
  14 |             .toParseLike`\text{\`A\'A\^A\~A\""A\r A\`E\'E\^E\""E\`I\'I\^I\""I\~N\`O\'O\^O\~O\""O\`U\'U\^U\""U\'Y\`a\'a\^a\~a\""a\r a\`e\'e\^e\""e\`ı\'ı\^ı\""ı\~n\`o\'o\^o\~o\""o\`u\'u\^u\""u\'y\""y\c C\c c}`;
  15 |         // TODO(edemaine): A few characters don't have analogs yet.",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 25}","  23 |     });
  24 |
> 25 |     it(""should build Latin-1 outside \\text{}"", function() {
     |    ^ Unknown Test
  26 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ`
  27 |             .toBuild(nonstrictSettings);
  28 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 30}","  28 |     });
  29 |
> 30 |     it(""should build all lower case Greek letters"", function() {
     |    ^ Unknown Test
  31 |         expect`αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω`.toBuild();
  32 |     });
  33 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 34}","  32 |     });
  33 |
> 34 |     it(""should build math upper case Greek letters"", function() {
     |    ^ Unknown Test
  35 |         expect`ΓΔΘΛΞΠΣΥΦΨΩ`.toBuild();
  36 |     });
  37 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 38}","  36 |     });
  37 |
> 38 |     it(""should build Cyrillic inside \\text{}"", function() {
     |    ^ Unknown Test
  39 |         expect`\text{БГДЖЗЙЛФЦШЫЮЯ}`.toBuild();
  40 |     });
  41 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 42}","  40 |     });
  41 |
> 42 |     it(""should build Cyrillic outside \\text{}"", function() {
     |    ^ Unknown Test
  43 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.toBuild(nonstrictSettings);
  44 |     });
  45 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 46}","  44 |     });
  45 |
> 46 |     it(""should not parse Cyrillic outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  47 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.not.toParse(strictSettings);
  48 |     });
  49 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 50}","  48 |     });
  49 |
> 50 |     it(""should build CJK inside \\text{}"", function() {
     |    ^ Unknown Test
  51 |         expect`\text{私はバナナです}`.toBuild();
  52 |         expect`\text{여보세요}`.toBuild();
  53 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 55}","  53 |     });
  54 |
> 55 |     it(""should build CJK outside \\text{}"", function() {
     |    ^ Unknown Test
  56 |         expect`私はバナナです`.toBuild(nonstrictSettings);
  57 |         expect`여보세요`.toBuild(nonstrictSettings);
  58 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 60}","  58 |     });
  59 |
> 60 |     it(""should not parse CJK outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  61 |         expect`私はバナナです。`.not.toParse(strictSettings);
  62 |         expect`여보세요`.not.toParse(strictSettings);
  63 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 65}","  63 |     });
  64 |
> 65 |     it(""should build Devanagari inside \\text{}"", function() {
     |    ^ Unknown Test
  66 |         expect`\text{नमस्ते}`.toBuild();
  67 |     });
  68 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 69}","  67 |     });
  68 |
> 69 |     it(""should build Devanagari outside \\text{}"", function() {
     |    ^ Unknown Test
  70 |         expect`नमस्ते`.toBuild(nonstrictSettings);
  71 |     });
  72 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 73}","  71 |     });
  72 |
> 73 |     it(""should not parse Devanagari outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  74 |         expect`नमस्ते`.not.toParse(strictSettings);
  75 |     });
  76 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 77}","  75 |     });
  76 |
> 77 |     it(""should build Georgian inside \\text{}"", function() {
     |    ^ Unknown Test
  78 |         expect`\text{გამარჯობა}`.toBuild();
  79 |     });
  80 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 81}","  79 |     });
  80 |
> 81 |     it(""should build Georgian outside \\text{}"", function() {
     |    ^ Unknown Test
  82 |         expect`გამარჯობა`.toBuild(nonstrictSettings);
  83 |     });
  84 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 85}","  83 |     });
  84 |
> 85 |     it(""should not parse Georgian outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  86 |         expect`გამარჯობა`.not.toParse(strictSettings);
  87 |     });
  88 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 89}","  87 |     });
  88 |
> 89 |     it(""should build Armenian both inside and outside \\text{}"", function() {
     |    ^ Unknown Test
  90 |         expect`ԱԲԳաբգ`.toBuild(nonstrictSettings);
  91 |         expect`\text{ԱԲԳաբգ}`.toBuild(nonstrictSettings);
  92 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 94}","  92 |     });
  93 |
> 94 |     it(""should build extended Latin characters inside \\text{}"", function() {
     |    ^ Unknown Test
  95 |         expect`\text{ěščřžůřťďňőİı}`.toBuild();
  96 |     });
  97 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 98}","   96 |     });
   97 |
>  98 |     it(""should not parse extended Latin outside \\text{} with strict"", function() {
      |    ^ Unknown Test
   99 |         expect`ěščřžůřťďňőİı`.not.toParse(strictSettings);
  100 |     });
  101 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 102}","  100 |     });
  101 |
> 102 |     it(""should not allow emoji in strict mode"", function() {
      |    ^ Unknown Test
  103 |         expect`✌`.not.toParse(strictSettings);
  104 |         expect`\text{✌}`.not.toParse(strictSettings);
  105 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 113}","  111 |     });
  112 |
> 113 |     it(""should allow emoji outside strict mode"", function() {
      |    ^ Unknown Test
  114 |         expect`✌`.toWarn();
  115 |         expect`\text{✌}`.toWarn();
  116 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 4, 'column': 4, 'index': 98}","  2 |
  3 | describe(""Screenshotter item"", function() {
> 4 |     for (const key in data) {
    |    ^ Conditional Test Logic
  5 |         if (data.hasOwnProperty(key)) {
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 5, 'column': 8, 'index': 132}","  3 | describe(""Screenshotter item"", function() {
  4 |     for (const key in data) {
> 5 |         if (data.hasOwnProperty(key)) {
    |        ^ Conditional Test Logic
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {
  8 |                 expect(item.tex).toBuild({",,
/home/gabriel/Desktop/research/projects/katex/test/mathml-spec.js,Conditional Test Logic,"{'line': 9, 'column': 4, 'index': 300}","   7 | const getMathML = function(expr, settings = new Settings()) {
   8 |     let startStyle = Style.TEXT;
>  9 |     if (settings.displayMode) {
     |    ^ Conditional Test Logic
  10 |         startStyle = Style.DISPLAY;
  11 |     }
  12 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 46, 'column': 8, 'index': 1257}","  44 |         const parse = getParsed(expression);
  45 |
> 46 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  47 |             const group = parse[i];
  48 |             expect(group.type).toMatch(""ord"");
  49 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 69, 'column': 8, 'index': 1848}","  67 |         const parse = getParsed(expression);
  68 |
> 69 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  70 |             const group = parse[i];
  71 |             expect(group.type).toEqual(""atom"");
  72 |             expect(group.family).toEqual(""bin"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 94, 'column': 12, 'index': 2621}","  92 |
  93 |         flattenedGroups.forEach(group => {
> 94 |             if (group.type === ""mclass"") {
     |            ^ Conditional Test Logic
  95 |                 expect(group.mclass).toEqual(""mrel"");
  96 |             } else {
  97 |                 expect(group.type).toEqual(""atom"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 127, 'column': 8, 'index': 3639}","  125 |         const parse = getParsed(expression);
  126 |
> 127 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  128 |             const group = parse[i];
  129 |             expect(group.type).toEqual(""atom"");
  130 |             expect(group.family).toEqual(""punct"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 145, 'column': 8, 'index': 4100}","  143 |         const parse = getParsed(expression);
  144 |
> 145 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  146 |             const group = parse[i];
  147 |             expect(group.type).toEqual(""atom"");
  148 |             expect(group.family).toEqual(""open"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 163, 'column': 8, 'index': 4563}","  161 |         const parse = getParsed(expression);
  162 |
> 163 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  164 |             const group = parse[i];
  165 |             expect(group.type).toEqual(""atom"");
  166 |             expect(group.family).toEqual(""close"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1261, 'column': 4, 'index': 40363}","  1259 |     ];
  1260 |
> 1261 |     for (const [actual, expected] of cases) {
       |    ^ Conditional Test Logic
  1262 |         it(`should build ""${actual}"" like ""${expected}""`, () => {
  1263 |             expect(actual).toBuildLike(expected);
  1264 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1410, 'column': 8, 'index': 45609}","  1408 |         ];
  1409 |
> 1410 |         for (let i = 0; i < missingGroups.length; i++) {
       |        ^ Conditional Test Logic
  1411 |             expect(missingGroups[i]).not.toParse();
  1412 |         }
  1413 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1437, 'column': 8, 'index': 46570}","  1435 |         ];
  1436 |
> 1437 |         for (let i = 0; i < badArguments.length; i++) {
       |        ^ Conditional Test Logic
  1438 |             expect(badArguments[i]).not.toParse();
  1439 |         }
  1440 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1455, 'column': 8, 'index': 47136}","  1453 |         ];
  1454 |
> 1455 |         for (let i = 0; i < goodArguments.length; i++) {
       |        ^ Conditional Test Logic
  1456 |             expect(goodArguments[i]).toParse();
  1457 |         }
  1458 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1468, 'column': 8, 'index': 47492}","  1466 |         ];
  1467 |
> 1468 |         for (let i = 0; i < badSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1469 |             expect(badSupSubscripts[i]).not.toParse();
  1470 |         }
  1471 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1481, 'column': 8, 'index': 47871}","  1479 |         ];
  1480 |
> 1481 |         for (let i = 0; i < goodSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1482 |             expect(goodSupSubscripts[i]).toParse();
  1483 |         }
  1484 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1519, 'column': 8, 'index': 49103}","  1517 |         ];
  1518 |
> 1519 |         for (let i = 0; i < badLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1520 |             expect(badLeftArguments[i]).not.toParse();
  1521 |         }
  1522 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1533, 'column': 8, 'index': 49580}","  1531 |         ];
  1532 |
> 1533 |         for (let i = 0; i < goodLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1534 |             expect(goodLeftArguments[i]).toParse();
  1535 |         }
  1536 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 2171, 'column': 8, 'index': 77530}","  2169 |
  2170 |     it(""should throw Error when HTML attribute name is invalid"", function() {
> 2171 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
       |        ^ Conditional Test Logic
  2172 |             try {
  2173 |                 katex.renderToString(
  2174 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 3834, 'column': 4, 'index': 141467}","  3832 | describe(""leqno and fleqn rendering options"", () => {
  3833 |     const expr = r`\tag{hi}x+y`;
> 3834 |     for (const opt of [""leqno"", ""fleqn""]) {
       |    ^ Conditional Test Logic
  3835 |         it(`should not add ${opt} class by default`, () => {
  3836 |             const settings = new Settings({displayMode: true});
  3837 |             const built = katex.__renderToDomTree(expr, settings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4239, 'column': 8, 'index': 158407}","  4237 |         // add eastern arabic numbers to symbols table
  4238 |         // these symbols are ۰۱۲۳۴۵۶۷۸۹ and ٠١٢٣٤٥٦٧٨٩
> 4239 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4240 |             const persianNum = String.fromCharCode(0x0660 + number);
  4241 |             katex.__defineSymbol(
  4242 |                 ""math"", fontName, ""textord"", persianNum, persianNum);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4258, 'column': 8, 'index': 159353}","  4256 |         const mockMetrics = {};
  4257 |         // mock font metrics for the symbols that we added previously
> 4258 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4259 |             mockMetrics[0x0660 + number] = [-0.00244140625, 0.6875, 0, 0];
  4260 |             mockMetrics[0x06F0 + number] = [-0.00244140625, 0.6875, 0, 0];
  4261 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 573, 'column': 8, 'index': 17029}","  571 |         parse = getParsed(simpleOver)[0];
  572 |
> 573 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  574 |         expect(parse.numer).toBeDefined();
  575 |         expect(parse.denom).toBeDefined();
  576 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 573, 'column': 8, 'index': 17029}","  571 |         parse = getParsed(simpleOver)[0];
  572 |
> 573 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  574 |         expect(parse.numer).toBeDefined();
  575 |         expect(parse.denom).toBeDefined();
  576 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 574, 'column': 8, 'index': 17076}","  572 |
  573 |         expect(parse.type).toEqual(""genfrac"");
> 574 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  575 |         expect(parse.denom).toBeDefined();
  576 |
  577 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 574, 'column': 8, 'index': 17076}","  572 |
  573 |         expect(parse.type).toEqual(""genfrac"");
> 574 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  575 |         expect(parse.denom).toBeDefined();
  576 |
  577 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 575, 'column': 8, 'index': 17119}","  573 |         expect(parse.type).toEqual(""genfrac"");
  574 |         expect(parse.numer).toBeDefined();
> 575 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  576 |
  577 |         parse = getParsed(complexOver)[0];
  578 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 575, 'column': 8, 'index': 17119}","  573 |         expect(parse.type).toEqual(""genfrac"");
  574 |         expect(parse.numer).toBeDefined();
> 575 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  576 |
  577 |         parse = getParsed(complexOver)[0];
  578 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 579, 'column': 8, 'index': 17207}","  577 |         parse = getParsed(complexOver)[0];
  578 |
> 579 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  580 |         expect(parse.numer).toBeDefined();
  581 |         expect(parse.denom).toBeDefined();
  582 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 579, 'column': 8, 'index': 17207}","  577 |         parse = getParsed(complexOver)[0];
  578 |
> 579 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  580 |         expect(parse.numer).toBeDefined();
  581 |         expect(parse.denom).toBeDefined();
  582 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 580, 'column': 8, 'index': 17254}","  578 |
  579 |         expect(parse.type).toEqual(""genfrac"");
> 580 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  581 |         expect(parse.denom).toBeDefined();
  582 |
  583 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 580, 'column': 8, 'index': 17254}","  578 |
  579 |         expect(parse.type).toEqual(""genfrac"");
> 580 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  581 |         expect(parse.denom).toBeDefined();
  582 |
  583 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 581, 'column': 8, 'index': 17297}","  579 |         expect(parse.type).toEqual(""genfrac"");
  580 |         expect(parse.numer).toBeDefined();
> 581 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  582 |
  583 |         const parseBraceFrac = getParsed(braceFrac)[0];
  584 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 581, 'column': 8, 'index': 17297}","  579 |         expect(parse.type).toEqual(""genfrac"");
  580 |         expect(parse.numer).toBeDefined();
> 581 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  582 |
  583 |         const parseBraceFrac = getParsed(braceFrac)[0];
  584 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1638, 'column': 8, 'index': 53349}","  1636 |         expect(bbBody).toHaveLength(3);
  1637 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1638 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1639 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1640 |         expect(bbBody[2].type).toEqual(""font"");
  1641 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1638, 'column': 8, 'index': 53349}","  1636 |         expect(bbBody).toHaveLength(3);
  1637 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1638 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1639 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1640 |         expect(bbBody[2].type).toEqual(""font"");
  1641 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1640, 'column': 8, 'index': 53447}","  1638 |         expect(bbBody[2].type).toEqual(""font"");
  1639 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1640 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1641 |     });
  1642 |
  1643 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1640, 'column': 8, 'index': 53447}","  1638 |         expect(bbBody[2].type).toEqual(""font"");
  1639 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1640 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1641 |     });
  1642 |
  1643 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1833, 'column': 8, 'index': 61002}","  1831 |     it(""should render \\text{R\\textit{S}T} with the correct fonts"", function() {
  1832 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
> 1833 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
       |        ^ Duplicate Assert
  1834 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
  1835 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1836 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1834, 'column': 8, 'index': 61069}","  1832 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
  1833 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
> 1834 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
       |        ^ Duplicate Assert
  1835 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1836 |     });
  1837 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1835, 'column': 8, 'index': 61143}","  1833 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
  1834 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
> 1835 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
       |        ^ Duplicate Assert
  1836 |     });
  1837 |
  1838 |     it(""should render \\textbf{R } with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1859, 'column': 8, 'index': 62334}","  1857 |     it(""should render \\textsf{\\textit{R}G\\textbf{B}} with the correct font"", function() {
  1858 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
> 1859 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
       |        ^ Duplicate Assert
  1860 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
  1861 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1862 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1860, 'column': 8, 'index': 62415}","  1858 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
  1859 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
> 1860 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
       |        ^ Duplicate Assert
  1861 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1862 |     });
  1863 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1861, 'column': 8, 'index': 62489}","  1859 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
  1860 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
> 1861 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
       |        ^ Duplicate Assert
  1862 |     });
  1863 |
  1864 |     it(""should render \\textsf{\\textbf{$\\mathrm{A}$}} with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1882, 'column': 8, 'index': 63564}","  1880 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1881 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1882 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1883 |
  1884 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1885 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1882, 'column': 8, 'index': 63564}","  1880 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1881 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1882 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1883 |
  1884 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1885 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1886, 'column': 8, 'index': 63754}","  1884 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1885 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1886 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1887 |     });
  1888 |
  1889 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1886, 'column': 8, 'index': 63754}","  1884 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1885 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1886 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1887 |     });
  1888 |
  1889 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2079, 'column': 8, 'index': 74027}","  2077 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2078 |             ""</mstyle>"";
> 2079 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2080 |
  2081 |         // reverse the order of the commands
  2082 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2079, 'column': 8, 'index': 74027}","  2077 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2078 |             ""</mstyle>"";
> 2079 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2080 |
  2081 |         // reverse the order of the commands
  2082 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2088, 'column': 8, 'index': 74388}","  2086 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2087 |             ""</mstyle>"";
> 2088 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2089 |     });
  2090 |
  2091 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2088, 'column': 8, 'index': 74388}","  2086 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2087 |             ""</mstyle>"";
> 2088 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2089 |     });
  2090 |
  2091 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2102, 'column': 8, 'index': 74949}","  2100 |         const tree = getParsed(tex);
  2101 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
> 2102 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
       |        ^ Duplicate Assert
  2103 |         expect(markup).toContain(
  2104 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2105 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2103, 'column': 8, 'index': 75020}","  2101 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2102 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
> 2103 |         expect(markup).toContain(
       |        ^ Duplicate Assert
  2104 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2105 |     });
  2106 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2200, 'column': 8, 'index': 78583}","  2198 |         const built = getBuilt`+ x`;
  2199 |
> 2200 |         expect(built[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2201 |         expect(built[0].classes).not.toContain(""mbin"");
  2202 |     });
  2203 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2201, 'column': 8, 'index': 78635}","  2199 |
  2200 |         expect(built[0].classes).toContain(""mord"");
> 2201 |         expect(built[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2202 |     });
  2203 |
  2204 |     it(""should create ords after some other objects"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2235, 'column': 8, 'index': 80151}","  2233 |         const markup = katex.renderToString(r`\sigma^2`);
  2234 |         expect(markup.indexOf(""<span"")).toBe(0);
> 2235 |         expect(markup).toContain(""\u03c3"");  // sigma
       |        ^ Duplicate Assert
  2236 |         expect(markup).toContain(""margin-right"");
  2237 |         expect(markup).not.toContain(""marginRight"");
  2238 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2236, 'column': 8, 'index': 80205}","  2234 |         expect(markup.indexOf(""<span"")).toBe(0);
  2235 |         expect(markup).toContain(""\u03c3"");  // sigma
> 2236 |         expect(markup).toContain(""margin-right"");
       |        ^ Duplicate Assert
  2237 |         expect(markup).not.toContain(""marginRight"");
  2238 |     });
  2239 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2237, 'column': 8, 'index': 80255}","  2235 |         expect(markup).toContain(""\u03c3"");  // sigma
  2236 |         expect(markup).toContain(""margin-right"");
> 2237 |         expect(markup).not.toContain(""marginRight"");
       |        ^ Duplicate Assert
  2238 |     });
  2239 |
  2240 |     it(""generates both MathML and HTML"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2243, 'column': 8, 'index': 80422}","  2241 |         const markup = katex.renderToString(""a"");
  2242 |
> 2243 |         expect(markup).toContain(""<span"");
       |        ^ Duplicate Assert
  2244 |         expect(markup).toContain(""<math"");
  2245 |     });
  2246 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2244, 'column': 8, 'index': 80465}","  2242 |
  2243 |         expect(markup).toContain(""<span"");
> 2244 |         expect(markup).toContain(""<math"");
       |        ^ Duplicate Assert
  2245 |     });
  2246 | });
  2247 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2296, 'column': 8, 'index': 81928}","  2294 |     it(""should produce mords"", function() {
  2295 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
> 2296 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2297 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2298 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2299 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2297, 'column': 8, 'index': 81991}","  2295 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
  2296 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
> 2297 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2298 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2299 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2300 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2298, 'column': 8, 'index': 82058}","  2296 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
  2297 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
> 2298 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2299 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2300 |     });
  2301 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2299, 'column': 8, 'index': 82123}","  2297 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2298 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
> 2299 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2300 |     });
  2301 | });
  2302 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2314, 'column': 8, 'index': 82640}","  2312 |     it(""should produce mords"", function() {
  2313 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
> 2314 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2315 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2316 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2317 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2315, 'column': 8, 'index': 82707}","  2313 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
  2314 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
> 2315 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2316 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2317 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2318 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2316, 'column': 8, 'index': 82778}","  2314 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
  2315 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
> 2316 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2317 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2318 |     });
  2319 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2317, 'column': 8, 'index': 82847}","  2315 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2316 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
> 2317 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2318 |     });
  2319 | });
  2320 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2331, 'column': 8, 'index': 83365}","  2329 |     it(""should produce mords"", function() {
  2330 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
> 2331 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2332 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2333 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2334 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2332, 'column': 8, 'index': 83439}","  2330 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
  2331 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
> 2332 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2333 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2334 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2335 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2333, 'column': 8, 'index': 83517}","  2331 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
  2332 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
> 2333 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2334 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2335 |     });
  2336 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2334, 'column': 8, 'index': 83593}","  2332 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2333 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
> 2334 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2335 |     });
  2336 | });
  2337 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2378, 'column': 8, 'index': 85082}","  2376 |     it(""should produce mords"", function() {
  2377 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
> 2378 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2379 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2380 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2381 |         expect(getBuilt`\underrightarrow )^2`[0].classes)",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2379, 'column': 8, 'index': 85157}","  2377 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
  2378 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
> 2379 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2380 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2381 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2382 |             .not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2380, 'column': 8, 'index': 85236}","  2378 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
  2379 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
> 2380 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2381 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2382 |             .not.toContain(""mclose"");
  2383 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2381, 'column': 8, 'index': 85313}","  2379 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2380 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
> 2381 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
       |        ^ Duplicate Assert
  2382 |             .not.toContain(""mclose"");
  2383 |     });
  2384 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2420, 'column': 8, 'index': 86616}","  2418 |         expect(getBuilt`\xrightarrow x`[0].classes).toContain(""mrel"");
  2419 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
> 2420 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2421 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2422 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2423 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2421, 'column': 8, 'index': 86687}","  2419 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
  2420 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
> 2421 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2422 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2423 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2424 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2422, 'column': 8, 'index': 86762}","  2420 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
  2421 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
> 2422 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2423 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2424 |     });
  2425 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2423, 'column': 8, 'index': 86835}","  2421 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2422 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
> 2423 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2424 |     });
  2425 | });
  2426 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2461, 'column': 8, 'index': 88080}","  2459 |         expect(getBuilt`\overbrace x`[0].classes).toContain(""mord"");
  2460 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
> 2461 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2462 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2463 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2464 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2462, 'column': 8, 'index': 88149}","  2460 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
  2461 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
> 2462 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2463 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2464 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2465 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2463, 'column': 8, 'index': 88222}","  2461 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
  2462 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
> 2463 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2464 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2465 |     });
  2466 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2464, 'column': 8, 'index': 88293}","  2462 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2463 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
> 2464 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2465 |     });
  2466 | });
  2467 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2493, 'column': 8, 'index': 89129}","  2491 |     it(""should produce mords"", function() {
  2492 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
> 2493 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2494 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2495 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2496 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2494, 'column': 8, 'index': 89194}","  2492 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
  2493 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
> 2494 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2495 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2496 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2497 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2495, 'column': 8, 'index': 89263}","  2493 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
  2494 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
> 2495 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2496 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2497 |     });
  2498 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2496, 'column': 8, 'index': 89330}","  2494 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2495 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
> 2496 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2497 |     });
  2498 | });
  2499 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2613, 'column': 8, 'index': 93119}","  2611 |     it(""should produce mords"", function() {
  2612 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
> 2613 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2614 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2615 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2616 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2614, 'column': 8, 'index': 93185}","  2612 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
  2613 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
> 2614 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2615 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2616 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2617 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2615, 'column': 8, 'index': 93255}","  2613 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
  2614 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
> 2615 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2616 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2617 |     });
  2618 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2616, 'column': 8, 'index': 93323}","  2614 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2615 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
> 2616 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2617 |     });
  2618 | });
  2619 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3464, 'column': 8, 'index': 126463}","  3462 |     it(""\\char produces literal characters"", () => {
  3463 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3464 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Duplicate Assert
  3465 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3466 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3467 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3465, 'column': 8, 'index': 126514}","  3463 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3464 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3465 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Duplicate Assert
  3466 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3467 |         expect`\char`.not.toParse();
  3468 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3466, 'column': 8, 'index': 126566}","  3464 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3465 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3466 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Duplicate Assert
  3467 |         expect`\char`.not.toParse();
  3468 |         expect(""\\char`"").not.toParse();
  3469 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4098, 'column': 8, 'index': 152688}","  4096 |         const example = exp32 + r`\a{1}`;
  4097 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
> 4098 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4099 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4100 |     });
  4101 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4099, 'column': 8, 'index': 152755}","  4097 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
  4098 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4099 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4100 |     });
  4101 |
  4102 |     it(""should count correctly with Unicode sub/superscripts"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4105, 'column': 8, 'index': 153024}","  4103 |         const example = exp32 + r`\def+{\a{1}}x⁺x⁺x⁺x⁺`;
  4104 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
> 4105 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4106 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4107 |     });
  4108 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4106, 'column': 8, 'index': 153091}","  4104 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
  4105 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4106 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4107 |     });
  4108 | });
  4109 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4148, 'column': 8, 'index': 154738}","  4146 |         // Ensure newlines appear outside base spans (because, in this regexp,
  4147 |         // base span occurs immediately after each newline span).
> 4148 |         expect(markup).toMatch(
       |        ^ Duplicate Assert
  4149 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
  4150 |         expect(markup).toMatchSnapshot();
  4151 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4150, 'column': 8, 'index': 154878}","  4148 |         expect(markup).toMatch(
  4149 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
> 4150 |         expect(markup).toMatchSnapshot();
       |        ^ Duplicate Assert
  4151 |     });
  4152 | });
  4153 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 508, 'column': 27, 'index': 14914}","  506 |
  507 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 508 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Eager Test
  509 |
  510 |         expect(dfracParse.type).toEqual(""genfrac"");
  511 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 514, 'column': 27, 'index': 15122}","  512 |         expect(dfracParse.denom).toBeDefined();
  513 |
> 514 |         const tfracParse = getParsed(tfracExpression)[0];
      |                           ^ Eager Test
  515 |
  516 |         expect(tfracParse.type).toEqual(""genfrac"");
  517 |         expect(tfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 520, 'column': 27, 'index': 15330}","  518 |         expect(tfracParse.denom).toBeDefined();
  519 |
> 520 |         const cfracParse = getParsed(cfracExpression)[0];
      |                           ^ Eager Test
  521 |
  522 |         expect(cfracParse.type).toEqual(""genfrac"");
  523 |         expect(cfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 526, 'column': 29, 'index': 15540}","  524 |         expect(cfracParse.denom).toBeDefined();
  525 |
> 526 |         const genfracParse = getParsed(genfrac1)[0];
      |                             ^ Eager Test
  527 |
  528 |         expect(genfracParse.type).toEqual(""genfrac"");
  529 |         expect(genfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 571, 'column': 16, 'index': 16994}","  569 |         let parse;
  570 |
> 571 |         parse = getParsed(simpleOver)[0];
      |                ^ Eager Test
  572 |
  573 |         expect(parse.type).toEqual(""genfrac"");
  574 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 577, 'column': 16, 'index': 17171}","  575 |         expect(parse.denom).toBeDefined();
  576 |
> 577 |         parse = getParsed(complexOver)[0];
      |                ^ Eager Test
  578 |
  579 |         expect(parse.type).toEqual(""genfrac"");
  580 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 583, 'column': 31, 'index': 17364}","  581 |         expect(parse.denom).toBeDefined();
  582 |
> 583 |         const parseBraceFrac = getParsed(braceFrac)[0];
      |                               ^ Eager Test
  584 |
  585 |         expect(parseBraceFrac.type).toEqual(""genfrac"");
  586 |         expect(parseBraceFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 591, 'column': 31, 'index': 17695}","  589 |         expect(parseBraceFrac.rightDelim).toBeDefined();
  590 |
> 591 |         const parseBrackFrac = getParsed(brackFrac)[0];
      |                               ^ Eager Test
  592 |
  593 |         expect(parseBrackFrac.type).toEqual(""genfrac"");
  594 |         expect(parseBrackFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 868, 'column': 23, 'index': 27656}","  866 |
  867 |     it(""should correctly extract the custom color"", function() {
> 868 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Eager Test
  869 |         const parse2 = getParsed(customColorExpression2)[0];
  870 |         const parse3 = getParsed(customColorExpression3)[0];
  871 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 869, 'column': 23, 'index': 27717}","  867 |     it(""should correctly extract the custom color"", function() {
  868 |         const parse1 = getParsed(customColorExpression1)[0];
> 869 |         const parse2 = getParsed(customColorExpression2)[0];
      |                       ^ Eager Test
  870 |         const parse3 = getParsed(customColorExpression3)[0];
  871 |
  872 |         expect(parse1.color).toEqual(""#fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 870, 'column': 23, 'index': 27778}","  868 |         const parse1 = getParsed(customColorExpression1)[0];
  869 |         const parse2 = getParsed(customColorExpression2)[0];
> 870 |         const parse3 = getParsed(customColorExpression3)[0];
      |                       ^ Eager Test
  871 |
  872 |         expect(parse1.color).toEqual(""#fA6"");
  873 |         expect(parse2.color).toEqual(""#fA6fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 968, 'column': 26, 'index': 30728}","  966 |
  967 |     it(""should produce the correct direction delimiter"", function() {
> 968 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Eager Test
  969 |         const rightParse = getParsed(bigDelim)[0];
  970 |
  971 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 969, 'column': 27, 'index': 30782}","  967 |     it(""should produce the correct direction delimiter"", function() {
  968 |         const leftParse = getParsed(normalDelim)[0];
> 969 |         const rightParse = getParsed(bigDelim)[0];
      |                           ^ Eager Test
  970 |
  971 |         expect(leftParse.mclass).toEqual(""mopen"");
  972 |         expect(rightParse.mclass).toEqual(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 976, 'column': 27, 'index': 31010}","  974 |
  975 |     it(""should parse the correct size delimiter"", function() {
> 976 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Eager Test
  977 |         const bigParse = getParsed(bigDelim)[0];
  978 |
  979 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 977, 'column': 25, 'index': 31062}","  975 |     it(""should parse the correct size delimiter"", function() {
  976 |         const smallParse = getParsed(normalDelim)[0];
> 977 |         const bigParse = getParsed(bigDelim)[0];
      |                         ^ Eager Test
  978 |
  979 |         expect(smallParse.size).toEqual(1);
  980 |         expect(bigParse.size).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1057, 'column': 24, 'index': 33428}","  1055 |
  1056 |     it(""should list the correct units"", function() {
> 1057 |         const emParse = getParsed(emRule)[0];
       |                        ^ Eager Test
  1058 |         const exParse = getParsed(exRule)[0];
  1059 |
  1060 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1058, 'column': 24, 'index': 33474}","  1056 |     it(""should list the correct units"", function() {
  1057 |         const emParse = getParsed(emRule)[0];
> 1058 |         const exParse = getParsed(exRule)[0];
       |                        ^ Eager Test
  1059 |
  1060 |         expect(emParse.width.unit).toEqual(""em"");
  1061 |         expect(emParse.height.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1095, 'column': 24, 'index': 34644}","  1093 |
  1094 |     it(""should list the correct units"", function() {
> 1095 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1096 |         const exParse = getParsed(exKern)[0];
  1097 |         const muParse = getParsed(muKern)[0];
  1098 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1096, 'column': 24, 'index': 34690}","  1094 |     it(""should list the correct units"", function() {
  1095 |         const emParse = getParsed(emKern)[0];
> 1096 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1097 |         const muParse = getParsed(muKern)[0];
  1098 |         const abParse = getParsed(abKern)[1];
  1099 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1097, 'column': 24, 'index': 34736}","  1095 |         const emParse = getParsed(emKern)[0];
  1096 |         const exParse = getParsed(exKern)[0];
> 1097 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1098 |         const abParse = getParsed(abKern)[1];
  1099 |
  1100 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1098, 'column': 24, 'index': 34782}","  1096 |         const exParse = getParsed(exKern)[0];
  1097 |         const muParse = getParsed(muKern)[0];
> 1098 |         const abParse = getParsed(abKern)[1];
       |                        ^ Eager Test
  1099 |
  1100 |         expect(emParse.dimension.unit).toEqual(""em"");
  1101 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1133, 'column': 24, 'index': 35927}","  1131 |
  1132 |     it(""should list the correct units"", function() {
> 1133 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1134 |         const exParse = getParsed(exKern)[0];
  1135 |         const muParse = getParsed(muKern)[0];
  1136 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1134, 'column': 24, 'index': 35973}","  1132 |     it(""should list the correct units"", function() {
  1133 |         const emParse = getParsed(emKern)[0];
> 1134 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1135 |         const muParse = getParsed(muKern)[0];
  1136 |         const abParse1 = getParsed(abKern1)[1];
  1137 |         const abParse2 = getParsed(abKern2)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1135, 'column': 24, 'index': 36019}","  1133 |         const emParse = getParsed(emKern)[0];
  1134 |         const exParse = getParsed(exKern)[0];
> 1135 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1136 |         const abParse1 = getParsed(abKern1)[1];
  1137 |         const abParse2 = getParsed(abKern2)[1];
  1138 |         const abParse3 = getParsed(abKern3)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1136, 'column': 25, 'index': 36066}","  1134 |         const exParse = getParsed(exKern)[0];
  1135 |         const muParse = getParsed(muKern)[0];
> 1136 |         const abParse1 = getParsed(abKern1)[1];
       |                         ^ Eager Test
  1137 |         const abParse2 = getParsed(abKern2)[1];
  1138 |         const abParse3 = getParsed(abKern3)[1];
  1139 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1137, 'column': 25, 'index': 36114}","  1135 |         const muParse = getParsed(muKern)[0];
  1136 |         const abParse1 = getParsed(abKern1)[1];
> 1137 |         const abParse2 = getParsed(abKern2)[1];
       |                         ^ Eager Test
  1138 |         const abParse3 = getParsed(abKern3)[1];
  1139 |
  1140 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1138, 'column': 25, 'index': 36162}","  1136 |         const abParse1 = getParsed(abKern1)[1];
  1137 |         const abParse2 = getParsed(abKern2)[1];
> 1138 |         const abParse3 = getParsed(abKern3)[1];
       |                         ^ Eager Test
  1139 |
  1140 |         expect(emParse.dimension.unit).toEqual(""em"");
  1141 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1149, 'column': 25, 'index': 36617}","  1147 |
  1148 |     it(""should parse elements on either side of a kern"", function() {
> 1149 |         const abParse1 = getParsed(abKern1);
       |                         ^ Eager Test
  1150 |         const abParse2 = getParsed(abKern2);
  1151 |         const abParse3 = getParsed(abKern3);
  1152 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1150, 'column': 25, 'index': 36662}","  1148 |     it(""should parse elements on either side of a kern"", function() {
  1149 |         const abParse1 = getParsed(abKern1);
> 1150 |         const abParse2 = getParsed(abKern2);
       |                         ^ Eager Test
  1151 |         const abParse3 = getParsed(abKern3);
  1152 |
  1153 |         expect(abParse1).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1151, 'column': 25, 'index': 36707}","  1149 |         const abParse1 = getParsed(abKern1);
  1150 |         const abParse2 = getParsed(abKern2);
> 1151 |         const abParse3 = getParsed(abKern3);
       |                         ^ Eager Test
  1152 |
  1153 |         expect(abParse1).toHaveLength(3);
  1154 |         expect(abParse1[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2074, 'column': 19, 'index': 73798}","  2072 |     it(""should render a combination of font and color changes"", function() {
  2073 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2074 |         let tree = getParsed(tex);
       |                   ^ Eager Test
  2075 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2076 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2077 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2083, 'column': 15, 'index': 74167}","  2081 |         // reverse the order of the commands
  2082 |         tex = r`\mathbb{\textcolor{blue}{R}}`;
> 2083 |         tree = getParsed(tex);
       |               ^ Eager Test
  2084 |         markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2085 |         node = ""<mstyle mathcolor=\""blue\"">"" +
  2086 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2991, 'column': 24, 'index': 108022}","  2989 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2990 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2991 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  2992 |         expect(parsed1.href).toBe(url);
  2993 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2994 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2993, 'column': 24, 'index': 108142}","  2991 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  2992 |         expect(parsed1.href).toBe(url);
> 2993 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  2994 |         expect(parsed2.href).toBe(url);
  2995 |     });
  2996 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2999, 'column': 24, 'index': 108372}","  2997 |     it(""should allow balanced braces in url"", function() {
  2998 |         const url = ""http://example.org/{{}t{oo}}"";
> 2999 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3000 |         expect(parsed1.href).toBe(url);
  3001 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3002 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3001, 'column': 24, 'index': 108492}","  2999 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  3000 |         expect(parsed1.href).toBe(url);
> 3001 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3002 |         expect(parsed2.href).toBe(url);
  3003 |     });
  3004 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3015, 'column': 24, 'index': 109146}","  3013 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3014 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3015 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3016 |         expect(parsed1.href).toBe(url);
  3017 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3018 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3017, 'column': 24, 'index': 109268}","  3015 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
  3016 |         expect(parsed1.href).toBe(url);
> 3017 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
       |                        ^ Eager Test
  3018 |         expect(parsed2.href).toBe(url);
  3019 |     });
  3020 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2172, 'column': 12, 'index': 77609}","  2170 |     it(""should throw Error when HTML attribute name is invalid"", function() {
  2171 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
> 2172 |             try {
       |            ^ Exception Handling
  2173 |                 katex.renderToString(
  2174 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);
  2175 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2737, 'column': 8, 'index': 97240}","  2735 | describe(""A parser error"", function() {
  2736 |     it(""should report the position of an error"", function() {
> 2737 |         try {
       |        ^ Exception Handling
  2738 |             parseTree(r`\sqrt}`, new Settings());
  2739 |         } catch (e) {
  2740 |             expect(e.position).toEqual(5);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3156, 'column': 8, 'index': 114705}","  3154 | describe(""ParseError properties"", function() {
  3155 |     it(""should contain affected position and length information"", function() {
> 3156 |         try {
       |        ^ Exception Handling
  3157 |             katex.renderToString(""1 + \\fraq{}{}"");
  3158 |
  3159 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3171, 'column': 8, 'index': 115368}","  3169 |
  3170 |     it(""should contain position and length information at end of input"", function() {
> 3171 |         try {
       |        ^ Exception Handling
  3172 |             katex.renderToString(""\\frac{}"");
  3173 |
  3174 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3186, 'column': 8, 'index': 116064}","  3184 |
  3185 |     it(""should contain no position and length information if unavailable"", function() {
> 3186 |         try {
       |        ^ Exception Handling
  3187 |             katex.renderToString(""\\verb|hello\nworld|"");
  3188 |
  3189 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 44, 'column': 22, 'index': 1225}","  42 |
  43 |     it(""should build a list of ords"", function() {
> 44 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  45 |
  46 |         for (let i = 0; i < parse.length; i++) {
  47 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 53, 'column': 22, 'index': 1483}","  51 |
  52 |     it(""should parse the right number of ords"", function() {
> 53 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  54 |
  55 |         expect(parse).toHaveLength(expression.length);
  56 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 67, 'column': 22, 'index': 1816}","  65 |
  66 |     it(""should build a list of bins"", function() {
> 67 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  68 |
  69 |         for (let i = 0; i < parse.length; i++) {
  70 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 87, 'column': 22, 'index': 2411}","  85 |
  86 |     it(""should build a list of rels"", function() {
> 87 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  88 |
  89 |         const flattenedGroups = parse.flatMap(group => 
  90 |             group.type === ""htmlmathml"" ? group.html : [group]",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 112, 'column': 32, 'index': 3253}","  110 |     it(""should return one group, not a fragment"", function() {
  111 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
> 112 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
      |                                ^ Lazy Test
  113 |         expect(mml.children.length).toEqual(1);
  114 |     });
  115 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 125, 'column': 22, 'index': 3607}","  123 |
  124 |     it(""should build a list of puncts"", function() {
> 125 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  126 |
  127 |         for (let i = 0; i < parse.length; i++) {
  128 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 143, 'column': 22, 'index': 4068}","  141 |
  142 |     it(""should build a list of opens"", function() {
> 143 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  144 |
  145 |         for (let i = 0; i < parse.length; i++) {
  146 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 161, 'column': 22, 'index': 4531}","  159 |
  160 |     it(""should build a list of closes"", function() {
> 161 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  162 |
  163 |         for (let i = 0; i < parse.length; i++) {
  164 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 492, 'column': 22, 'index': 14356}","  490 |
  491 |     it(""should produce a frac"", function() {
> 492 |         const parse = getParsed(expression)[0];
      |                      ^ Lazy Test
  493 |
  494 |         expect(parse.type).toEqual(""genfrac"");
  495 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 508, 'column': 27, 'index': 14914}","  506 |
  507 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 508 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Lazy Test
  509 |
  510 |         expect(dfracParse.type).toEqual(""genfrac"");
  511 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 571, 'column': 16, 'index': 16994}","  569 |         let parse;
  570 |
> 571 |         parse = getParsed(simpleOver)[0];
      |                ^ Lazy Test
  572 |
  573 |         expect(parse.type).toEqual(""genfrac"");
  574 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 601, 'column': 22, 'index': 18103}","  599 |
  600 |     it(""should create a numerator from the atoms before \\over"", function() {
> 601 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  602 |
  603 |         const numer = parse.numer;
  604 |         expect(numer.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 608, 'column': 22, 'index': 18320}","  606 |
  607 |     it(""should create a denominator from the atoms after \\over"", function() {
> 608 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  609 |
  610 |         const denom = parse.denom;
  611 |         expect(denom.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 616, 'column': 22, 'index': 18555}","  614 |     it(""should handle empty numerators"", function() {
  615 |         const emptyNumerator = r`\over x`;
> 616 |         const parse = getParsed(emptyNumerator)[0];
      |                      ^ Lazy Test
  617 |         expect(parse.type).toEqual(""genfrac"");
  618 |         expect(parse.numer).toBeDefined();
  619 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 624, 'column': 22, 'index': 18850}","  622 |     it(""should handle empty denominators"", function() {
  623 |         const emptyDenominator = r`1 \over`;
> 624 |         const parse = getParsed(emptyDenominator)[0];
      |                      ^ Lazy Test
  625 |         expect(parse.type).toEqual(""genfrac"");
  626 |         expect(parse.numer).toBeDefined();
  627 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 632, 'column': 22, 'index': 19175}","  630 |     it(""should handle \\displaystyle correctly"", function() {
  631 |         const displaystyleExpression = r`\displaystyle 1 \over 2`;
> 632 |         const parse = getParsed(displaystyleExpression)[0];
      |                      ^ Lazy Test
  633 |         expect(parse.type).toEqual(""genfrac"");
  634 |         expect(parse.numer.body[0].type).toEqual(""styling"");
  635 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 645, 'column': 22, 'index': 19727}","  643 |     it(""should handle nested factions"", function() {
  644 |         const nestedOverExpression = r`{1 \over 2} \over 3`;
> 645 |         const parse = getParsed(nestedOverExpression)[0];
      |                      ^ Lazy Test
  646 |         expect(parse.type).toEqual(""genfrac"");
  647 |         expect(parse.numer.body[0].type).toEqual(""genfrac"");
  648 |         expect(parse.numer.body[0].numer.body[0].text).toEqual(""1"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 694, 'column': 22, 'index': 21437}","  692 |
  693 |     it(""should produce a sizing node"", function() {
> 694 |         const parse = getParsed(sizeExpression)[0];
      |                      ^ Lazy Test
  695 |
  696 |         expect(parse.type).toEqual(""sizing"");
  697 |         expect(parse.size).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 718, 'column': 22, 'index': 22246}","  716 |
  717 |     it(""should produce a text"", function() {
> 718 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  719 |
  720 |         expect(parse.type).toEqual(""text"");
  721 |         expect(parse.body).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 725, 'column': 22, 'index': 22461}","  723 |
  724 |     it(""should produce textords instead of mathords"", function() {
> 725 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  726 |         const group = parse.body;
  727 |
  728 |         expect(group[0].type).toEqual(""textord"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 748, 'column': 22, 'index': 23124}","  746 |
  747 |     it(""should contract spaces"", function() {
> 748 |         const parse = getParsed(spaceTextExpression)[0];
      |                      ^ Lazy Test
  749 |         const group = parse.body;
  750 |
  751 |         expect(group.length).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 767, 'column': 22, 'index': 23800}","  765 |
  766 |     it(""should ignore a space before the text group"", function() {
> 767 |         const parse = getParsed(leadingSpaceTextExpression)[0];
      |                      ^ Lazy Test
  768 |         // [m, o, o]
  769 |         expect(parse.body).toHaveLength(3);
  770 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 854, 'column': 22, 'index': 27187}","  852 |
  853 |     it(""should build a color node"", function() {
> 854 |         const parse = getParsed(colorExpression)[0];
      |                      ^ Lazy Test
  855 |
  856 |         expect(parse.type).toEqual(""color"");
  857 |         expect(parse.color).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 868, 'column': 23, 'index': 27656}","  866 |
  867 |     it(""should correctly extract the custom color"", function() {
> 868 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Lazy Test
  869 |         const parse2 = getParsed(customColorExpression2)[0];
  870 |         const parse3 = getParsed(customColorExpression3)[0];
  871 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 927, 'column': 22, 'index': 29582}","  925 |
  926 |     it(""should produce spacing in math mode"", function() {
> 927 |         const parse = getParsed(mathTie);
      |                      ^ Lazy Test
  928 |
  929 |         expect(parse[1].type).toEqual(""spacing"");
  930 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 933, 'column': 21, 'index': 29742}","  931 |
  932 |     it(""should produce spacing in text mode"", function() {
> 933 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  934 |         const parse = text.body;
  935 |
  936 |         expect(parse[1].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 940, 'column': 21, 'index': 29947}","  938 |
  939 |     it(""should not contract with spaces in text mode"", function() {
> 940 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  941 |         const parse = text.body;
  942 |
  943 |         expect(parse[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 962, 'column': 22, 'index': 30544}","  960 |
  961 |     it(""should produce a delimsizing"", function() {
> 962 |         const parse = getParsed(normalDelim)[0];
      |                      ^ Lazy Test
  963 |
  964 |         expect(parse.type).toEqual(""delimsizing"");
  965 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 968, 'column': 26, 'index': 30728}","  966 |
  967 |     it(""should produce the correct direction delimiter"", function() {
> 968 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Lazy Test
  969 |         const rightParse = getParsed(bigDelim)[0];
  970 |
  971 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 976, 'column': 27, 'index': 31010}","  974 |
  975 |     it(""should parse the correct size delimiter"", function() {
> 976 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Lazy Test
  977 |         const bigParse = getParsed(bigDelim)[0];
  978 |
  979 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 992, 'column': 22, 'index': 31425}","  990 |
  991 |     it(""should produce an overline"", function() {
> 992 |         const parse = getParsed(overline)[0];
      |                      ^ Lazy Test
  993 |
  994 |         expect(parse.type).toEqual(""overline"");
  995 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1051, 'column': 22, 'index': 33275}","  1049 |
  1050 |     it(""should produce a rule"", function() {
> 1051 |         const parse = getParsed(emRule)[0];
       |                      ^ Lazy Test
  1052 |
  1053 |         expect(parse.type).toEqual(""rule"");
  1054 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1057, 'column': 24, 'index': 33428}","  1055 |
  1056 |     it(""should list the correct units"", function() {
> 1057 |         const emParse = getParsed(emRule)[0];
       |                        ^ Lazy Test
  1058 |         const exParse = getParsed(exRule)[0];
  1059 |
  1060 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1068, 'column': 32, 'index': 33798}","  1066 |
  1067 |     it(""should parse the number correctly"", function() {
> 1068 |         const hardNumberParse = getParsed(hardNumberRule)[0];
       |                                ^ Lazy Test
  1069 |
  1070 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
  1071 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1095, 'column': 24, 'index': 34644}","  1093 |
  1094 |     it(""should list the correct units"", function() {
> 1095 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1096 |         const exParse = getParsed(exKern)[0];
  1097 |         const muParse = getParsed(muKern)[0];
  1098 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1133, 'column': 24, 'index': 35927}","  1131 |
  1132 |     it(""should list the correct units"", function() {
> 1133 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1134 |         const exParse = getParsed(exKern)[0];
  1135 |         const muParse = getParsed(muKern)[0];
  1136 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1149, 'column': 25, 'index': 36617}","  1147 |
  1148 |     it(""should parse elements on either side of a kern"", function() {
> 1149 |         const abParse1 = getParsed(abKern1);
       |                         ^ Lazy Test
  1150 |         const abParse2 = getParsed(abKern2);
  1151 |         const abParse3 = getParsed(abKern3);
  1152 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1180, 'column': 24, 'index': 37692}","  1178 |
  1179 |     it(""should handle whitespace"", function() {
> 1180 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
       |                        ^ Lazy Test
  1181 |
  1182 |         expect(abParse).toHaveLength(3);
  1183 |         expect(abParse[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1198, 'column': 22, 'index': 38259}","  1196 |
  1197 |     it(""should produce a leftright"", function() {
> 1198 |         const parse = getParsed(normalLeftRight)[0];
       |                      ^ Lazy Test
  1199 |
  1200 |         expect(parse.type).toEqual(""leftright"");
  1201 |         expect(parse.left).toEqual(""("");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1375, 'column': 22, 'index': 44624}","  1373 |
  1374 |     it(""should produce sqrts"", function() {
> 1375 |         const parse = getParsed(sqrt)[0];
       |                      ^ Lazy Test
  1376 |
  1377 |         expect(parse.type).toEqual(""sqrt"");
  1378 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1574, 'column': 22, 'index': 51044}","  1572 |     it(""should only change the style within its group"", function() {
  1573 |         const text = r`a b { c d \displaystyle e f } g h`;
> 1574 |         const parse = getParsed(text);
       |                      ^ Lazy Test
  1575 |
  1576 |         const displayNode = parse[2].body[2];
  1577 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2074, 'column': 19, 'index': 73798}","  2072 |     it(""should render a combination of font and color changes"", function() {
  2073 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2074 |         let tree = getParsed(tex);
       |                   ^ Lazy Test
  2075 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2076 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2077 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2093, 'column': 21, 'index': 74539}","  2091 |     it(""should render text as <mtext>"", function() {
  2092 |         const tex = r`\text{for }`;
> 2093 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2094 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2095 |         expect(markup).toContain(""<mtext>for\u00a0</mtext>"");
  2096 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2100, 'column': 21, 'index': 74851}","  2098 |     it(""should render math within text as side-by-side children"", function() {
  2099 |         const tex = r`\text{graph: $y = mx + b$}`;
> 2100 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2101 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2102 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
  2103 |         expect(markup).toContain(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2115, 'column': 15, 'index': 75511}","  2113 |
  2114 |     it(""should produce mords"", function() {
> 2115 |         expect(getBuilt(img, trustSettings)[0].classes).toContain(""mord"");
       |               ^ Lazy Test
  2116 |     });
  2117 |
  2118 |     it(""should not render without trust setting"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2119, 'column': 22, 'index': 75665}","  2117 |
  2118 |     it(""should not render without trust setting"", function() {
> 2119 |         const built = getBuilt(img);
       |                      ^ Lazy Test
  2120 |         expect(built).toMatchSnapshot();
  2121 |     });
  2122 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2124, 'column': 22, 'index': 75808}","  2122 |
  2123 |     it(""should render with trust setting"", function() {
> 2124 |         const built = getBuilt(img, trustSettings);
       |                      ^ Lazy Test
  2125 |         expect(built).toMatchSnapshot();
  2126 |     });
  2127 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2150, 'column': 22, 'index': 76754}","  2148 |
  2149 |     it(""should set HTML attributes"", function() {
> 2150 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2151 |         expect(built[0].attributes.id).toMatch(""bar"");
  2152 |         expect(built[1].classes).toContain(""foo"");
  2153 |         expect(built[2].attributes.style).toMatch(""color: red"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2161, 'column': 22, 'index': 77161}","  2159 |
  2160 |     it(""should not affect spacing"", function() {
> 2161 |         const built = getBuilt(""\\htmlId{a}{x+}y"", trustNonStrictSettings);
       |                      ^ Lazy Test
  2162 |         expect(built).toMatchSnapshot();
  2163 |     });
  2164 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2166, 'column': 22, 'index': 77354}","  2164 |
  2165 |     it(""should render with trust and strict setting"", function() {
> 2166 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2167 |         expect(built).toMatchSnapshot();
  2168 |     });
  2169 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2341, 'column': 21, 'index': 83856}","  2339 |     it(""should properly render stretchy accents"", function() {
  2340 |         const tex = `\\widetilde{ABCD}`;
> 2341 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2342 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2343 |         expect(markup).toContain('<mo stretchy=""true"">~</mo>');
  2344 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2991, 'column': 24, 'index': 108022}","  2989 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2990 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2991 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  2992 |         expect(parsed1.href).toBe(url);
  2993 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2994 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2999, 'column': 24, 'index': 108372}","  2997 |     it(""should allow balanced braces in url"", function() {
  2998 |         const url = ""http://example.org/{{}t{oo}}"";
> 2999 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3000 |         expect(parsed1.href).toBe(url);
  3001 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3002 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3015, 'column': 24, 'index': 109146}","  3013 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3014 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3015 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3016 |         expect(parsed1.href).toBe(url);
  3017 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3018 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3031, 'column': 22, 'index': 109811}","  3029 |
  3030 |     it(""should not affect spacing around"", function() {
> 3031 |         const built = getBuilt(""a\\href{http://example.com/}{+b}"", trustSettings);
       |                      ^ Lazy Test
  3032 |         expect(built).toMatchSnapshot();
  3033 |     });
  3034 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3041, 'column': 23, 'index': 110185}","  3039 |
  3040 |     it(""should allow explicitly allowed protocols"", () => {
> 3041 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3042 |             ""\\href{ftp://x}{foo}"",
  3043 |             new Settings({trust: (context) => context.protocol === ""ftp""}),
  3044 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3049, 'column': 23, 'index': 110464}","  3047 |
  3048 |     it(""should allow all protocols when trust option is true"", () => {
> 3049 |         const parsed = getParsed(""\\href{ftp://x}{foo}"", trustSettings);
       |                       ^ Lazy Test
  3050 |         expect(parsed).toMatchSnapshot();
  3051 |     });
  3052 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3054, 'column': 23, 'index': 110655}","  3052 |
  3053 |     it(""should not allow explicitly disallowed protocols"", () => {
> 3054 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3055 |             ""\\href{javascript:alert('x')}{foo}"",
  3056 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3057 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3062, 'column': 23, 'index': 110960}","  3060 |
  3061 |     it(""should not allow explicitly uppercased disallowed protocols"", () => {
> 3062 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3063 |             ""\\href{JavaScript:alert('x')}{foo}"",
  3064 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3065 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3138, 'column': 28, 'index': 114041}","  3136 |
  3137 |     it(""should produce color nodes with a color value given by errorColor"", function() {
> 3138 |         const parsedInput = getParsed(r`\error`, noThrowSettings);
       |                            ^ Lazy Test
  3139 |         expect(parsedInput[0].type).toBe(""color"");
  3140 |         expect(parsedInput[0].color).toBe(errorColor);
  3141 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3144, 'column': 22, 'index': 114300}","  3142 |
  3143 |     it(""should build katex-error span for other type of KaTeX error"", function() {
> 3144 |         const built = getBuilt(`2^2^2`, noThrowSettings);
       |                      ^ Lazy Test
  3145 |         expect(built).toMatchSnapshot();
  3146 |     });
  3147 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3479, 'column': 27, 'index': 127058}","  3477 |         const parsedBare = getParsed`~`;
  3478 |         expect(parsedBare[0].type).toEqual(""spacing"");
> 3479 |         const parsedChar = getParsed(""\\char`\\~"");
       |                           ^ Lazy Test
  3480 |         expect(parsedChar[0].type).toEqual(""textord"");
  3481 |     });
  3482 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4051, 'column': 22, 'index': 151019}","  4049 |
  4050 |     it(""should clamp size when set"", function() {
> 4051 |         const built = getBuilt(rule, new Settings({maxSize: 5}))[0];
       |                      ^ Lazy Test
  4052 |         expect(built.style.borderRightWidth).toEqual(""5em"");
  4053 |         expect(built.style.borderTopWidth).toEqual(""5em"");
  4054 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4057, 'column': 22, 'index': 151275}","  4055 |
  4056 |     it(""should not clamp size when not set"", function() {
> 4057 |         const built = getBuilt(rule)[0];
       |                      ^ Lazy Test
  4058 |         expect(built.style.borderRightWidth).toEqual(""999em"");
  4059 |         expect(built.style.borderTopWidth).toEqual(""999em"");
  4060 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4063, 'column': 22, 'index': 151533}","  4061 |
  4062 |     it(""should make zero-width rules if a negative maxSize is passed"", function() {
> 4063 |         const built = getBuilt(rule, new Settings({maxSize: -5}))[0];
       |                      ^ Lazy Test
  4064 |         expect(built.style.borderRightWidth).toEqual(""0em"");
  4065 |         expect(built.style.borderTopWidth).toEqual(""0em"");
  4066 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 113, 'column': 44, 'index': 3345}","  111 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
  112 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
> 113 |         expect(mml.children.length).toEqual(1);
      |                                            ^ Magic Number
  114 |     });
  115 | });
  116 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 345, 'column': 35, 'index': 10015}","  343 |         const parse = getParsed`{xy}`;
  344 |
> 345 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  346 |
  347 |         const ord = parse[0];
  348 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 367, 'column': 35, 'index': 10617}","  365 |         const parse = getParsed`\begingroup xy \endgroup`;
  366 |
> 367 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  368 |
  369 |         const ord = parse[0];
  370 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 390, 'column': 35, 'index': 11244}","  388 |         const parse = getParsed`\Large abc`;
  389 |
> 390 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  391 |
  392 |         const sizing = parse[0];
  393 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 402, 'column': 35, 'index': 11567}","  400 |         const parse = getParsed`a \Large abc`;
  401 |
> 402 |         expect(parse).toHaveLength(2);
      |                                   ^ Magic Number
  403 |
  404 |         const sizing = parse[1];
  405 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 407, 'column': 41, 'index': 11694}","  405 |
  406 |         expect(sizing.type).toEqual(""sizing"");
> 407 |         expect(sizing.body).toHaveLength(3);
      |                                         ^ Magic Number
  408 |     });
  409 |
  410 |     it(""should stop at the ends of groups"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 417, 'column': 41, 'index': 11977}","  415 |
  416 |         expect(sizing.type).toEqual(""sizing"");
> 417 |         expect(sizing.body).toHaveLength(1);
      |                                         ^ Magic Number
  418 |     });
  419 |
  420 |     describe(""within optional groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 604, 'column': 40, 'index': 18206}","  602 |
  603 |         const numer = parse.numer;
> 604 |         expect(numer.body).toHaveLength(4);
      |                                        ^ Magic Number
  605 |     });
  606 |
  607 |     it(""should create a denominator from the atoms after \\over"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 611, 'column': 40, 'index': 18423}","  609 |
  610 |         const denom = parse.denom;
> 611 |         expect(denom.body).toHaveLength(4);
      |                                        ^ Magic Number
  612 |     });
  613 |
  614 |     it(""should handle empty numerators"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 751, 'column': 37, 'index': 23231}","  749 |         const group = parse.body;
  750 |
> 751 |         expect(group.length).toEqual(4);
      |                                     ^ Magic Number
  752 |         expect(group[0].type).toEqual(""spacing"");
  753 |         expect(group[1].type).toEqual(""textord"");
  754 |         expect(group[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 769, 'column': 40, 'index': 23903}","  767 |         const parse = getParsed(leadingSpaceTextExpression)[0];
  768 |         // [m, o, o]
> 769 |         expect(parse.body).toHaveLength(3);
      |                                        ^ Magic Number
  770 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");
  771 |     });
  772 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 979, 'column': 40, 'index': 31127}","  977 |         const bigParse = getParsed(bigDelim)[0];
  978 |
> 979 |         expect(smallParse.size).toEqual(1);
      |                                        ^ Magic Number
  980 |         expect(bigParse.size).toEqual(4);
  981 |     });
  982 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 980, 'column': 38, 'index': 31169}","  978 |
  979 |         expect(smallParse.size).toEqual(1);
> 980 |         expect(bigParse.size).toEqual(4);
      |                                      ^ Magic Number
  981 |     });
  982 | });
  983 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1070, 'column': 57, 'index': 33886}","  1068 |         const hardNumberParse = getParsed(hardNumberRule)[0];
  1069 |
> 1070 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
       |                                                         ^ Magic Number
  1071 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
  1072 |     });
  1073 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1071, 'column': 58, 'index': 33951}","  1069 |
  1070 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
> 1071 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
       |                                                          ^ Magic Number
  1072 |     });
  1073 |
  1074 |     it(""should parse negative sizes"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1118, 'column': 51, 'index': 35496}","  1116 |     it(""should parse positive sizes"", function() {
  1117 |         const parse = getParsed`\kern{+1em}`[0];
> 1118 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1119 |     });
  1120 | });
  1121 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1153, 'column': 38, 'index': 36766}","  1151 |         const abParse3 = getParsed(abKern3);
  1152 |
> 1153 |         expect(abParse1).toHaveLength(3);
       |                                      ^ Magic Number
  1154 |         expect(abParse1[0].text).toEqual(""a"");
  1155 |         expect(abParse1[2].text).toEqual(""b"");
  1156 |         expect(abParse2).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1156, 'column': 38, 'index': 36902}","  1154 |         expect(abParse1[0].text).toEqual(""a"");
  1155 |         expect(abParse1[2].text).toEqual(""b"");
> 1156 |         expect(abParse2).toHaveLength(3);
       |                                      ^ Magic Number
  1157 |         expect(abParse2[0].text).toEqual(""a"");
  1158 |         expect(abParse2[2].text).toEqual(""b"");
  1159 |         expect(abParse3).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1159, 'column': 38, 'index': 37038}","  1157 |         expect(abParse2[0].text).toEqual(""a"");
  1158 |         expect(abParse2[2].text).toEqual(""b"");
> 1159 |         expect(abParse3).toHaveLength(3);
       |                                      ^ Magic Number
  1160 |         expect(abParse3[0].text).toEqual(""a"");
  1161 |         expect(abParse3[2].text).toEqual(""b"");
  1162 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1176, 'column': 51, 'index': 37607}","  1174 |     it(""should parse positive sizes"", function() {
  1175 |         const parse = getParsed`\kern+1em`[0];
> 1176 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1177 |     });
  1178 |
  1179 |     it(""should handle whitespace"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1182, 'column': 37, 'index': 37769}","  1180 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
  1181 |
> 1182 |         expect(abParse).toHaveLength(3);
       |                                     ^ Magic Number
  1183 |         expect(abParse[0].text).toEqual(""a"");
  1184 |         expect(abParse[1].dimension.unit).toEqual(""mu"");
  1185 |         expect(abParse[2].text).toEqual(""b"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1335, 'column': 37, 'index': 43065}","  1333 |     it(""should eat a final newline"", function() {
  1334 |         const m3 = getParsed`\begin{matrix}a&b\\ c&d \\ \end{matrix}`[0];
> 1335 |         expect(m3.body).toHaveLength(2);
       |                                     ^ Magic Number
  1336 |     });
  1337 |
  1338 |     it(""should grab \\arraystretch"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1582, 'column': 41, 'index': 51251}","  1580 |         const displayBody = displayNode.body;
  1581 |
> 1582 |         expect(displayBody).toHaveLength(2);
       |                                         ^ Magic Number
  1583 |         expect(displayBody[0].text).toEqual(""e"");
  1584 |     });
  1585 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1636, 'column': 36, 'index': 53286}","  1634 |
  1635 |         const bbBody = nestedParse.body.body;
> 1636 |         expect(bbBody).toHaveLength(3);
       |                                    ^ Magic Number
  1637 |         expect(bbBody[0].type).toEqual(""mathord"");
  1638 |         expect(bbBody[2].type).toEqual(""font"");
  1639 |         expect(bbBody[2].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1648, 'column': 34, 'index': 53814}","  1646 |         expect(colorMathbbParse.color).toEqual(""blue"");
  1647 |         const body = colorMathbbParse.body;
> 1648 |         expect(body).toHaveLength(1);
       |                                  ^ Magic Number
  1649 |         expect(body[0].type).toEqual(""font"");
  1650 |         expect(body[0].font).toEqual(""mathbb"");
  1651 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1661, 'column': 42, 'index': 54278}","  1659 |         expect(bf.type).toEqual(""font"");
  1660 |         expect(bf.font).toEqual(""mathbf"");
> 1661 |         expect(bf.body.body).toHaveLength(3);
       |                                          ^ Magic Number
  1662 |         expect(bf.body.body[0].text).toEqual(""a"");
  1663 |         expect(bf.body.body[1].type).toEqual(""font"");
  1664 |         expect(bf.body.body[1].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2234, 'column': 45, 'index': 80139}","  2232 |         // Just a few quick sanity checks here...
  2233 |         const markup = katex.renderToString(r`\sigma^2`);
> 2234 |         expect(markup.indexOf(""<span"")).toBe(0);
       |                                             ^ Magic Number
  2235 |         expect(markup).toContain(""\u03c3"");  // sigma
  2236 |         expect(markup).toContain(""margin-right"");
  2237 |         expect(markup).not.toContain(""marginRight"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2740, 'column': 39, 'index': 97357}","  2738 |             parseTree(r`\sqrt}`, new Settings());
  2739 |         } catch (e) {
> 2740 |             expect(e.position).toEqual(5);
       |                                       ^ Magic Number
  2741 |         }
  2742 |     });
  2743 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2874, 'column': 37, 'index': 101652}","  2872 |     it(""should not eat the last row when its first cell is empty"", function() {
  2873 |         const ae = getParsed`\begin{aligned}&E_1 & (1)\\&E_2 & (2)\\&E_3 & (3)\end{aligned}`[0];
> 2874 |         expect(ae.body).toHaveLength(3);
       |                                     ^ Magic Number
  2875 |     });
  2876 | });
  2877 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3165, 'column': 40, 'index': 115209}","  3163 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");
  3164 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
> 3165 |             expect(error.position).toBe(4);
       |                                        ^ Magic Number
  3166 |             expect(error.length).toBe(5);
  3167 |         }
  3168 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3166, 'column': 38, 'index': 115251}","  3164 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
  3165 |             expect(error.position).toBe(4);
> 3166 |             expect(error.length).toBe(5);
       |                                      ^ Magic Number
  3167 |         }
  3168 |     });
  3169 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3180, 'column': 40, 'index': 115903}","  3178 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");
  3179 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
> 3180 |             expect(error.position).toBe(7);
       |                                        ^ Magic Number
  3181 |             expect(error.length).toBe(0);
  3182 |         }
  3183 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3181, 'column': 38, 'index': 115945}","  3179 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
  3180 |             expect(error.position).toBe(7);
> 3181 |             expect(error.length).toBe(0);
       |                                      ^ Magic Number
  3182 |         }
  3183 |     });
  3184 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 759}","  757 |
  758 |     it(""should handle backslash followed by newline"", () => {
> 759 |         expect(""\\text{\\ \t\r \n \t\r  }"").toParseLike`\text{\ }`;
      |        ^ Redundant Assertion
  760 |     });
  761 |
  762 |     it(""should accept math mode tokens after its argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1730}","  1728 | describe(""A comment parser"", function() {
  1729 |     it(""should parse comments at the end of a line"", () => {
> 1730 |         expect(""a^2 + b^2 = c^2 % Pythagoras' Theorem\n"").toParse();
       |        ^ Redundant Assertion
  1731 |     });
  1732 |
  1733 |     it(""should parse comments at the start of a line"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1734}","  1732 |
  1733 |     it(""should parse comments at the start of a line"", () => {
> 1734 |         expect(""% comment\n"").toParse();
       |        ^ Redundant Assertion
  1735 |     });
  1736 |
  1737 |     it(""should parse multiple lines of comments in a row"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1738}","  1736 |
  1737 |     it(""should parse multiple lines of comments in a row"", () => {
> 1738 |         expect(""% comment 1\n% comment 2\n"").toParse();
       |        ^ Redundant Assertion
  1739 |     });
  1740 |
  1741 |     it(""should parse comments between subscript and superscript"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1742}","  1740 |
  1741 |     it(""should parse comments between subscript and superscript"", () => {
> 1742 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
       |        ^ Redundant Assertion
  1743 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
  1744 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1745 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1743}","  1741 |     it(""should parse comments between subscript and superscript"", () => {
  1742 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
> 1743 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
       |        ^ Redundant Assertion
  1744 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1745 |     });
  1746 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1744}","  1742 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
  1743 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
> 1744 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
       |        ^ Redundant Assertion
  1745 |     });
  1746 |
  1747 |     it(""should parse comments in size and color groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1748}","  1746 |
  1747 |     it(""should parse comments in size and color groups"", () => {
> 1748 |         expect(""\\kern{1 %kern\nem}"").toParse();
       |        ^ Redundant Assertion
  1749 |         expect(""\\kern1 %kern\nem"").toParse();
  1750 |         expect(""\\color{#f00%red\n}"").toParse();
  1751 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1749}","  1747 |     it(""should parse comments in size and color groups"", () => {
  1748 |         expect(""\\kern{1 %kern\nem}"").toParse();
> 1749 |         expect(""\\kern1 %kern\nem"").toParse();
       |        ^ Redundant Assertion
  1750 |         expect(""\\color{#f00%red\n}"").toParse();
  1751 |     });
  1752 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1750}","  1748 |         expect(""\\kern{1 %kern\nem}"").toParse();
  1749 |         expect(""\\kern1 %kern\nem"").toParse();
> 1750 |         expect(""\\color{#f00%red\n}"").toParse();
       |        ^ Redundant Assertion
  1751 |     });
  1752 |
  1753 |     it(""should parse comments before an expression"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1754}","  1752 |
  1753 |     it(""should parse comments before an expression"", () => {
> 1754 |         expect(""%comment\n{2}"").toParseLike`{2}`;
       |        ^ Redundant Assertion
  1755 |     });
  1756 |
  1757 |     it(""should parse comments before and between \\hline"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1764}","  1762 |
  1763 |     it(""should parse comments in the macro definition"", () => {
> 1764 |         expect(""\\def\\foo{1 %}\n2}\n\\foo"").toParseLike`12`;
       |        ^ Redundant Assertion
  1765 |     });
  1766 |
  1767 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1768}","  1766 |
  1767 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {
> 1768 |         expect(""\\def\\foo{1\n2}\nx %\\foo\n"").toParseLike`x`;
       |        ^ Redundant Assertion
  1769 |     });
  1770 |
  1771 |     it(""should not parse a comment without newline in strict mode"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1777}","  1775 |
  1776 |     it(""should not produce or consume space"", () => {
> 1777 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
       |        ^ Redundant Assertion
  1778 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
  1779 |     });
  1780 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1778}","  1776 |     it(""should not produce or consume space"", () => {
  1777 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
> 1778 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
       |        ^ Redundant Assertion
  1779 |     });
  1780 |
  1781 |     it(""should not include comments in the output"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1782}","  1780 |
  1781 |     it(""should not include comments in the output"", () => {
> 1782 |         expect(""5 % comment\n"").toParseLike`5`;
       |        ^ Redundant Assertion
  1783 |     });
  1784 | });
  1785 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 16, 'line': 2177}","  2175 |
  2176 |                 // Render is expected to throw, so this should not be called.
> 2177 |                 expect(true).toBe(false);
       |                ^ Redundant Assertion
  2178 |             } catch (error) {
  2179 |                 expect(error).toBeInstanceOf(ParseError);
  2180 |                 const message =",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 2979}","  2977 |         expect`\href%end`.toParseLike(""\\href{%}end"", trustSettings);
  2978 |         expect`\url%end`.toParseLike(""\\url{%}end"", trustSettings);
> 2979 |         expect(""\\url%%end\n"").toParseLike(""\\url{%}"", trustSettings);
       |        ^ Redundant Assertion
  2980 |         expect`\url end`.toParseLike(""\\url{e}nd"", trustSettings);
  2981 |         expect`\url%end`.toParseLike(""\\url {%}end"", trustSettings);
  2982 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3022}","  3020 |
  3021 |     it(""should allow comments after URLs"", function() {
> 3022 |         expect(""\\url{http://example.com/}%comment\n"").toBuild();
       |        ^ Redundant Assertion
  3023 |     });
  3024 |
  3025 |     it(""should be marked up correctly"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3160}","  3158 |
  3159 |             // Render is expected to throw, so this should not be called.
> 3160 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3161 |         } catch (error) {
  3162 |             expect(error).toBeInstanceOf(ParseError);
  3163 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3175}","  3173 |
  3174 |             // Render is expected to throw, so this should not be called.
> 3175 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3176 |         } catch (error) {
  3177 |             expect(error).toBeInstanceOf(ParseError);
  3178 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3190}","  3188 |
  3189 |             // Render is expected to throw, so this should not be called.
> 3190 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3191 |         } catch (error) {
  3192 |             expect(error).toBeInstanceOf(ParseError);
  3193 |             expect(error.message).toBe(""KaTeX parse error: \\verb ended by end of line instead of matching delimiter"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3463}","  3461 |
  3462 |     it(""\\char produces literal characters"", () => {
> 3463 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
       |        ^ Redundant Assertion
  3464 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3465 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3466 |         expect(""\\char`\\%"").toParseLike`\char""25`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3464}","  3462 |     it(""\\char produces literal characters"", () => {
  3463 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3464 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Redundant Assertion
  3465 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3466 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3467 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3465}","  3463 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3464 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3465 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Redundant Assertion
  3466 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3467 |         expect`\char`.not.toParse();
  3468 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3466}","  3464 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3465 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3466 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Redundant Assertion
  3467 |         expect`\char`.not.toParse();
  3468 |         expect(""\\char`"").not.toParse();
  3469 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3468}","  3466 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3467 |         expect`\char`.not.toParse();
> 3468 |         expect(""\\char`"").not.toParse();
       |        ^ Redundant Assertion
  3469 |         expect`\char'`.not.toParse();
  3470 |         expect`\char""`.not.toParse();
  3471 |         expect`\char'a`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3932}","  3930 |
  3931 |     it(""should parse combining characters"", function() {
> 3932 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
       |        ^ Redundant Assertion
  3933 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
  3934 |     });
  3935 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3933}","  3931 |     it(""should parse combining characters"", function() {
  3932 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
> 3933 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
       |        ^ Redundant Assertion
  3934 |     });
  3935 |
  3936 |     it(""should parse multi-accented characters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3971}","  3969 |
  3970 |     it(""should parse symbols"", function() {
> 3971 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3972 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
  3973 |     });
  3974 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3972}","  3970 |     it(""should parse symbols"", function() {
  3971 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
> 3972 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3973 |     });
  3974 |
  3975 |     it(""should build Greek capital letters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3989}","  3987 |
  3988 |     it(""should build binary operators"", function() {
> 3989 |         expect(""±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞\u22C5\u2218\u2216\u2219"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3990 |     });
  3991 |
  3992 |     it(""should build common ords"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3993}","  3991 |
  3992 |     it(""should build common ords"", function() {
> 3993 |         expect(""§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3994 |     });
  3995 |
  3996 |     it(""should build delimiters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3997}","  3995 |
  3996 |     it(""should build delimiters"", function() {
> 3997 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
       |        ^ Redundant Assertion
  3998 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  3999 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4000 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3998}","  3996 |     it(""should build delimiters"", function() {
  3997 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
> 3998 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
       |        ^ Redundant Assertion
  3999 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4000 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4001 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3999}","  3997 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
  3998 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
> 3999 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
       |        ^ Redundant Assertion
  4000 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4001 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4002 |         expect`┌x┐ └x┘`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4000}","  3998 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  3999 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
> 4000 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
       |        ^ Redundant Assertion
  4001 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4002 |         expect`┌x┐ └x┘`.toBuild();
  4003 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4001}","  3999 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4000 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
> 4001 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
       |        ^ Redundant Assertion
  4002 |         expect`┌x┐ └x┘`.toBuild();
  4003 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4004 |         expect(""\u27E6x\u27E7"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4003}","  4001 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4002 |         expect`┌x┐ └x┘`.toBuild();
> 4003 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
       |        ^ Redundant Assertion
  4004 |         expect(""\u27E6x\u27E7"").toBuild();
  4005 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4006 |         expect(""\\lBrace \\rBrace"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4004}","  4002 |         expect`┌x┐ └x┘`.toBuild();
  4003 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
> 4004 |         expect(""\u27E6x\u27E7"").toBuild();
       |        ^ Redundant Assertion
  4005 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4006 |         expect(""\\lBrace \\rBrace"").toBuild();
  4007 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4005}","  4003 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4004 |         expect(""\u27E6x\u27E7"").toBuild();
> 4005 |         expect(""\\llbracket \\rrbracket"").toBuild();
       |        ^ Redundant Assertion
  4006 |         expect(""\\lBrace \\rBrace"").toBuild();
  4007 |     });
  4008 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4006}","  4004 |         expect(""\u27E6x\u27E7"").toBuild();
  4005 |         expect(""\\llbracket \\rrbracket"").toBuild();
> 4006 |         expect(""\\lBrace \\rBrace"").toBuild();
       |        ^ Redundant Assertion
  4007 |     });
  4008 |
  4009 |     it(""should build some surrogate pairs"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4276, 'column': 19, 'index': 160141}","  4274 |             expect`\message{Hello, world}`.toParse();
  4275 |             // eslint-disable-next-line no-console
> 4276 |             expect(console.log).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4277 |         });
  4278 |     });
  4279 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4285, 'column': 19, 'index': 160506}","  4283 |             expect`\errmessage{Hello, world}`.toParse();
  4284 |             // eslint-disable-next-line no-console
> 4285 |             expect(console.error).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4286 |         });
  4287 |     });
  4288 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 23}","  21 |
  22 | describe(""A parser"", function() {
> 23 |     it(""should not fail on an empty string"", function() {
     |    ^ Unknown Test
  24 |         expect``.toParse(strictSettings);
  25 |     });
  26 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 27}","  25 |     });
  26 |
> 27 |     it(""should ignore whitespace"", function() {
     |    ^ Unknown Test
  28 |         expect`    x    y    `.toParseLike(""xy"", strictSettings);
  29 |     });
  30 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 31}","  29 |     });
  30 |
> 31 |     it(""should ignore whitespace in atom"", function() {
     |    ^ Unknown Test
  32 |         expect`    x   ^ y    `.toParseLike(""x^y"", strictSettings);
  33 |     });
  34 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 105}","  103 |
  104 | describe(""A mathinner parser"", function() {
> 105 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  106 |         expect`\mathinner{\langle{\psi}\rangle}`.toParse();
  107 |         expect`\frac 1 {\mathinner{\langle{\psi}\rangle}}`.toParse();
  108 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 172}","  170 |
  171 | describe(""A \\KaTeX parser"", function() {
> 172 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  173 |         expect`\KaTeX`.toParse();
  174 |     });
  175 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 178}","  176 |
  177 | describe(""A subscript and superscript parser"", function() {
> 178 |     it(""should not fail on superscripts"", function() {
      |    ^ Unknown Test
  179 |         expect`x^2`.toParse();
  180 |     });
  181 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 182}","  180 |     });
  181 |
> 182 |     it(""should not fail on subscripts"", function() {
      |    ^ Unknown Test
  183 |         expect`x_3`.toParse();
  184 |     });
  185 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 186}","  184 |     });
  185 |
> 186 |     it(""should not fail on both subscripts and superscripts"", function() {
      |    ^ Unknown Test
  187 |         expect`x^2_3`.toParse();
  188 |
  189 |         expect`x_2^3`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 192}","  190 |     });
  191 |
> 192 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  193 |         expect`^3`.toParse();
  194 |         expect`^3+`.toParse();
  195 |         expect`_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 236}","  234 |     });
  235 |
> 236 |     it(""should produce the same thing regardless of order"", function() {
      |    ^ Unknown Test
  237 |         expect`x^2_3`.toParseLike`x_3^2`;
  238 |     });
  239 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 240}","  238 |     });
  239 |
> 240 |     it(""should not parse double subscripts or superscripts"", function() {
      |    ^ Unknown Test
  241 |         expect`x^x^x`.not.toParse();
  242 |
  243 |         expect`x_x_x`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 254}","  252 |     });
  253 |
> 254 |     it(""should work correctly with {}s"", function() {
      |    ^ Unknown Test
  255 |         expect`x^{2+3}`.toParse();
  256 |
  257 |         expect`x_{3-2}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 272}","  270 |     });
  271 |
> 272 |     it(""should work with nested super/subscripts"", function() {
      |    ^ Unknown Test
  273 |         expect`x^{x^x}`.toParse();
  274 |         expect`x^{x_x}`.toParse();
  275 |         expect`x_{x^x}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 279}","  277 |     });
  278 |
> 279 |     it(""should work with Unicode (sub|super)script characters"", function() {
      |    ^ Unknown Test
  280 |         expect`A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃`.toParseLike`A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}`;
  281 |     });
  282 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 283}","  281 |     });
  282 |
> 283 |     it(""should not fail if \\relax is in an atom"", function() {
      |    ^ Unknown Test
  284 |         expect`\hskip1em\relax^2`.toParse(strictSettings);
  285 |     });
  286 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 287}","  285 |     });
  286 |
> 287 |     it(""should skip \\relax in super/subscripts"", function() {
      |    ^ Unknown Test
  288 |         expect`x^\relax 2`.toParseLike`x^2`;
  289 |         expect`x_\relax 2`.toParseLike`x_2`;
  290 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 294}","  292 |
  293 | describe(""A subscript and superscript tree-builder"", function() {
> 294 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  295 |         expect`^3`.toBuild();
  296 |         expect`_2`.toBuild();
  297 |         expect`^3_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 303}","  301 |
  302 | describe(""A parser with limit controls"", function() {
> 303 |     it(""should fail when the limit control is not preceded by an op node"", function() {
      |    ^ Unknown Test
  304 |         expect`3\nolimits_2^2`.not.toParse();
  305 |         expect`\sqrt\limits_2^2`.not.toParse();
  306 |         expect`45 +\nolimits 45`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 309}","  307 |     });
  308 |
> 309 |     it(""should parse when the limit control directly follows an op node"", function() {
      |    ^ Unknown Test
  310 |         expect`\int\limits_2^2 3`.toParse();
  311 |         expect`\sum\nolimits_3^4 4`.toParse();
  312 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 314}","  312 |     });
  313 |
> 314 |     it(""should parse when the limit control is in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  315 |         expect`\int_2^2\limits`.toParse();
  316 |         expect`\int^2\nolimits_2`.toParse();
  317 |         expect`\int_2\limits^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 320}","  318 |     });
  319 |
> 320 |     it(""should allow multiple limit controls in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  321 |         expect`\int_2\nolimits^2\limits 3`.toParse();
  322 |         expect`\int\nolimits\limits_2^2`.toParse();
  323 |         expect`\int\limits\limits\limits_2^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 338}","  336 |
  337 | describe(""A group parser"", function() {
> 338 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  339 |         expect`{xy}`.toParse();
  340 |     });
  341 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 355}","  353 |
  354 | describe(""A \\begingroup...\\endgroup parser"", function() {
> 355 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  356 |         expect`\begingroup xy \endgroup`.toParse();
  357 |     });
  358 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 359}","  357 |     });
  358 |
> 359 |     it(""should fail when it is mismatched"", function() {
      |    ^ Unknown Test
  360 |         expect`\begingroup xy`.not.toParse();
  361 |         expect`\begingroup xy }`.not.toParse();
  362 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 376}","  374 |     });
  375 |
> 376 |     it(""should not affect spacing in math mode"", function() {
      |    ^ Unknown Test
  377 |         expect`\begingroup x+ \endgroup y`.toBuildLike`x+y`;
  378 |     });
  379 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 382}","  380 |
  381 | describe(""An implicit group parser"", function() {
> 382 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  383 |         expect`\Large x`.toParse();
  384 |         expect`abc {abc \Large xyz} abc`.toParse();
  385 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 444}","  442 |
  443 | describe(""A function parser"", function() {
> 444 |     it(""should parse no argument functions"", function() {
      |    ^ Unknown Test
  445 |         expect`\div`.toParse();
  446 |     });
  447 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 448}","  446 |     });
  447 |
> 448 |     it(""should parse 1 argument functions"", function() {
      |    ^ Unknown Test
  449 |         expect`\blue x`.toParse();
  450 |     });
  451 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 452}","  450 |     });
  451 |
> 452 |     it(""should parse 2 argument functions"", function() {
      |    ^ Unknown Test
  453 |         expect`\frac 1 2`.toParse();
  454 |     });
  455 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 456}","  454 |     });
  455 |
> 456 |     it(""should not parse 1 argument functions with no arguments"", function() {
      |    ^ Unknown Test
  457 |         expect`\blue`.not.toParse();
  458 |     });
  459 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 460}","  458 |     });
  459 |
> 460 |     it(""should not parse 2 argument functions with 0 or 1 arguments"", function() {
      |    ^ Unknown Test
  461 |         expect`\frac`.not.toParse();
  462 |
  463 |         expect`\frac 1`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 466}","  464 |     });
  465 |
> 466 |     it(""should not parse a function with text right after it"", function() {
      |    ^ Unknown Test
  467 |         expect`\redx`.not.toParse();
  468 |     });
  469 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 470}","  468 |     });
  469 |
> 470 |     it(""should parse a function with a number right after it"", function() {
      |    ^ Unknown Test
  471 |         expect`\frac12`.toParse();
  472 |     });
  473 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 474}","  472 |     });
  473 |
> 474 |     it(""should parse some functions with text right after it"", function() {
      |    ^ Unknown Test
  475 |         expect`\;x`.toParse();
  476 |     });
  477 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 638}","  636 |     });
  637 |
> 638 |     it(""should handle \\textstyle correctly"", function() {
      |    ^ Unknown Test
  639 |         expect`\textstyle 1 \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  640 |         expect`{\textstyle 1} \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  641 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 664}","  662 |
  663 | describe(""A genfrac builder"", function() {
> 664 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  665 |         expect`\frac{x}{y}`.toBuild();
  666 |         expect`\dfrac{x}{y}`.toBuild();
  667 |         expect`\tfrac{x}{y}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 677}","  675 |
  676 | describe(""A infix builder"", function() {
> 677 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  678 |         expect`a \over b`.toBuild();
  679 |         expect`a \atop b`.toBuild();
  680 |         expect`a \choose b`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 773}","  771 |     });
  772 |
> 773 |     it(""should parse math within text group"", function() {
      |    ^ Unknown Test
  774 |         expect`\text{graph: $y = mx + b$}`.toParse(strictSettings);
  775 |         expect`\text{graph: \(y = mx + b\)}`.toParse(strictSettings);
  776 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 778}","  776 |     });
  777 |
> 778 |     it(""should parse math within text within math within text"", function() {
      |    ^ Unknown Test
  779 |         expect`\text{hello $x + \text{world $y$} + z$}`.toParse(strictSettings);
  780 |         expect`\text{hello \(x + \text{world $y$} + z\)}`.toParse(strictSettings);
  781 |         expect`\text{hello $x + \text{world \(y\)} + z$}`.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 785}","  783 |     });
  784 |
> 785 |     it(""should forbid \\( within math mode"", function() {
      |    ^ Unknown Test
  786 |         expect`\(`.not.toParse();
  787 |         expect`\text{$\(x\)$}`.not.toParse();
  788 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 790}","  788 |     });
  789 |
> 790 |     it(""should forbid $ within math mode"", function() {
      |    ^ Unknown Test
  791 |         expect`$x$`.not.toParse();
  792 |         expect`\text{\($x$\)}`.not.toParse();
  793 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 795}","  793 |     });
  794 |
> 795 |     it(""should detect unbalanced \\)"", function() {
      |    ^ Unknown Test
  796 |         expect`\)`.not.toParse();
  797 |         expect`\text{\)}`.not.toParse();
  798 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 800}","  798 |     });
  799 |
> 800 |     it(""should detect unbalanced $"", function() {
      |    ^ Unknown Test
  801 |         expect`$`.not.toParse();
  802 |         expect`\text{$}`.not.toParse();
  803 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 805}","  803 |     });
  804 |
> 805 |     it(""should not mix $ and \\(..\\)"", function() {
      |    ^ Unknown Test
  806 |         expect`\text{$x\)}`.not.toParse();
  807 |         expect`\text{\(x$}`.not.toParse();
  808 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 810}","  808 |     });
  809 |
> 810 |     it(""should parse spacing functions"", function() {
      |    ^ Unknown Test
  811 |         expect`a b\, \; \! \: \> ~ \thinspace \medspace \quad \ `.toBuild();
  812 |         expect`\enspace \thickspace \qquad \space \nobreakspace`.toBuild();
  813 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 815}","  813 |     });
  814 |
> 815 |     it(""should omit spaces after commands"", function() {
      |    ^ Unknown Test
  816 |         expect`\text{\textellipsis !}`.toParseLike`\text{\textellipsis!}`;
  817 |     });
  818 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 819}","  817 |     });
  818 |
> 819 |     it(""should handle ⋮ and \\vdots"", function() {
      |    ^ Unknown Test
  820 |         expect`\text{a \vdots b ⋮ d}`.toParse();
  821 |     });
  822 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 825}","  823 |
  824 | describe(""A texvc builder"", function() {
> 825 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  826 |         expect`\lang\N\darr\R\dArr\Z\Darr\alef\rang`.toBuild();
  827 |         expect`\alefsym\uarr\Alpha\uArr\Beta\Uarr\Chi`.toBuild();
  828 |         expect`\clubs\diamonds\hearts\spades\cnums\Complex`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 999}","   997 |
   998 | describe(""An lap parser"", function() {
>  999 |     it(""should not fail on a text argument"", function() {
       |    ^ Unknown Test
  1000 |         expect`\rlap{\,/}{=}`.toParse();
  1001 |         expect`\mathrlap{\,/}{=}`.toParse();
  1002 |         expect`{=}\llap{/\,}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1008}","  1006 |     });
  1007 |
> 1008 |     it(""should not fail if math version is used"", function() {
       |    ^ Unknown Test
  1009 |         expect`\mathrlap{\frac{a}{b}}{=}`.toParse();
  1010 |         expect`{=}\mathllap{\frac{a}{b}}`.toParse();
  1011 |         expect`\sum_{\mathclap{\frac{a}{b}}}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1014}","  1012 |     });
  1013 |
> 1014 |     it(""should fail on math if AMS version is used"", function() {
       |    ^ Unknown Test
  1015 |         expect`\rlap{\frac{a}{b}}{=}`.not.toParse();
  1016 |         expect`{=}\llap{\frac{a}{b}}`.not.toParse();
  1017 |         expect`\sum_{\clap{\frac{a}{b}}}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1270}","  1268 | describe(""A begin/end parser"", function() {
  1269 |
> 1270 |     it(""should parse a simple environment"", function() {
       |    ^ Unknown Test
  1271 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1272 |     });
  1273 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1274}","  1272 |     });
  1273 |
> 1274 |     it(""should parse an environment with argument"", function() {
       |    ^ Unknown Test
  1275 |         expect`\begin{array}{cc}a&b\\c&d\end{array}`.toParse();
  1276 |     });
  1277 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1278}","  1276 |     });
  1277 |
> 1278 |     it(""should parse and build an empty environment"", function() {
       |    ^ Unknown Test
  1279 |         expect`\begin{aligned}\end{aligned}`.toBuild();
  1280 |         expect`\begin{matrix}\end{matrix}`.toBuild();
  1281 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1283}","  1281 |     });
  1282 |
> 1283 |     it(""should parse an environment with hlines"", function() {
       |    ^ Unknown Test
  1284 |         expect`\begin{matrix}\hline a&b\\ \hline c&d\end{matrix}`.toParse();
  1285 |         expect`\begin{matrix}\hline a&b\cr \hline c&d\end{matrix}`.toParse();
  1286 |         expect`\begin{matrix}\hdashline a&b\\ \hdashline c&d\end{matrix}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1289}","  1287 |     });
  1288 |
> 1289 |     it(""should forbid hlines outside array environment"", () => {
       |    ^ Unknown Test
  1290 |         expect`\hline`.not.toParse();
  1291 |     });
  1292 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1293}","  1291 |     });
  1292 |
> 1293 |     it(""should error when name is mismatched"", function() {
       |    ^ Unknown Test
  1294 |         expect`\begin{matrix}a&b\\c&d\end{pmatrix}`.not.toParse();
  1295 |     });
  1296 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1297}","  1295 |     });
  1296 |
> 1297 |     it(""should error when commands are mismatched"", function() {
       |    ^ Unknown Test
  1298 |         expect`\begin{matrix}a&b\\c&d\right{pmatrix}`.not.toParse();
  1299 |     });
  1300 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1301}","  1299 |     });
  1300 |
> 1301 |     it(""should error when end is missing"", function() {
       |    ^ Unknown Test
  1302 |         expect`\begin{matrix}a&b\\c&d`.not.toParse();
  1303 |     });
  1304 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1305}","  1303 |     });
  1304 |
> 1305 |     it(""should error when braces are mismatched"", function() {
       |    ^ Unknown Test
  1306 |         expect`{\begin{matrix}a&b\\c&d}\end{matrix}`.not.toParse();
  1307 |     });
  1308 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1309}","  1307 |     });
  1308 |
> 1309 |     it(""should cooperate with infix notation"", function() {
       |    ^ Unknown Test
  1310 |         expect`\begin{matrix}0&1\over2&3\\4&5&6\end{matrix}`.toParse();
  1311 |     });
  1312 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1319}","  1317 |     });
  1318 |
> 1319 |     it(""should allow \\cr and \\\\ as a line terminator"", function() {
       |    ^ Unknown Test
  1320 |         expect`\begin{matrix}a&b\cr c&d\end{matrix}`.toParse();
  1321 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1322 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1324}","  1322 |     });
  1323 |
> 1324 |     it(""should not allow \\cr to scan for an optional size argument"", function() {
       |    ^ Unknown Test
  1325 |         expect`\begin{matrix}a&b\cr[c]&d\end{matrix}`.toParse();
  1326 |     });
  1327 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1328}","  1326 |     });
  1327 |
> 1328 |     it(""should not treat [ after space as optional argument to \\\\"", function() {
       |    ^ Unknown Test
  1329 |         expect`\begin{matrix}a&b\\ [c]&d\end{matrix}`.toParse();
  1330 |         expect`a\\ [b]`.toParse();
  1331 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1343}","  1341 |     });
  1342 |
> 1343 |     it(""should allow an optional argument in {matrix*} and company."", function() {
       |    ^ Unknown Test
  1344 |         expect`\begin{matrix*}[r] a & -1 \\ -1 & d \end{matrix*}`.toBuild();
  1345 |         expect`\begin{pmatrix*}[r] a & -1 \\ -1 & d \end{pmatrix*}`.toBuild();
  1346 |         expect`\begin{bmatrix*}[r] a & -1 \\ -1 & d \end{bmatrix*}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1380}","  1378 |     });
  1379 |
> 1380 |     it(""should build sized square roots"", function() {
       |    ^ Unknown Test
  1381 |         expect`\Large\sqrt[3]{x}`.toBuild();
  1382 |     });
  1383 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1384}","  1382 |     });
  1383 |
> 1384 |     it(""should expand argument if optional argument doesn't exist"", function() {
       |    ^ Unknown Test
  1385 |         expect`\sqrt\foo`.toParseLike(""\\sqrt123"",
  1386 |             new Settings({macros: {""\\foo"": ""123""}}));
  1387 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1389}","  1387 |     });
  1388 |
> 1389 |     it(""should not expand argument if optional argument exists"", function() {
       |    ^ Unknown Test
  1390 |         expect`\sqrt[2]\foo`.toParseLike(""\\sqrt[2]{123}"",
  1391 |             new Settings({macros: {""\\foo"": ""123""}}));
  1392 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1396}","  1394 |
  1395 | describe(""A TeX-compliant parser"", function() {
> 1396 |     it(""should work"", function() {
       |    ^ Unknown Test
  1397 |         expect`\frac 2 3`.toParse();
  1398 |     });
  1399 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1415}","  1413 |     });
  1414 |
> 1415 |     it(""should fail when there are missing sup/subscripts"", function() {
       |    ^ Unknown Test
  1416 |         expect`x^`.not.toParse();
  1417 |         expect`x_`.not.toParse();
  1418 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1486}","  1484 |     });
  1485 |
> 1486 |     it(""should parse multiple primes correctly"", function() {
       |    ^ Unknown Test
  1487 |         expect`x''''`.toParse();
  1488 |         expect`x_2''`.toParse();
  1489 |         expect`x''_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1492}","  1490 |     });
  1491 |
> 1492 |     it(""should fail when sup/subscripts are interspersed with arguments"", function() {
       |    ^ Unknown Test
  1493 |         expect`\sqrt^23`.not.toParse();
  1494 |         expect`\frac^234`.not.toParse();
  1495 |         expect`\frac2^34`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1498}","  1496 |     });
  1497 |
> 1498 |     it(""should succeed when sup/subscripts come after whole functions"", function() {
       |    ^ Unknown Test
  1499 |         expect`\sqrt2^3`.toParse();
  1500 |         expect`\frac23^4`.toParse();
  1501 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1503}","  1501 |     });
  1502 |
> 1503 |     it(""should succeed with a sqrt around a text/frac"", function() {
       |    ^ Unknown Test
  1504 |         expect`\sqrt \frac x y`.toParse();
  1505 |         expect`\sqrt \text x`.toParse();
  1506 |         expect`x^\frac x y`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1540}","  1538 |
  1539 | describe(""An op symbol builder"", function() {
> 1540 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1541 |         expect`\int_i^n`.toBuild();
  1542 |         expect`\iint_i^n`.toBuild();
  1543 |         expect`\iiint_i^n`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1557}","  1555 |
  1556 | describe(""A style change parser"", function() {
> 1557 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1558 |         expect`\displaystyle x`.toParse();
  1559 |         expect`\textstyle x`.toParse();
  1560 |         expect`\scriptstyle x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1588}","  1586 |
  1587 | describe(""A font parser"", function() {
> 1588 |     it(""should parse \\mathrm, \\mathbb, \\mathit, and \\mathnormal"", function() {
       |    ^ Unknown Test
  1589 |         expect`\mathrm x`.toParse();
  1590 |         expect`\mathbb x`.toParse();
  1591 |         expect`\mathit x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1599}","  1597 |     });
  1598 |
> 1599 |     it(""should parse \\mathcal and \\mathfrak"", function() {
       |    ^ Unknown Test
  1600 |         expect`\mathcal{ABC123}`.toParse();
  1601 |         expect`\mathfrak{abcABC123}`.toParse();
  1602 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1653}","  1651 |     });
  1652 |
> 1653 |     it(""should not parse a series of font commands"", function() {
       |    ^ Unknown Test
  1654 |         expect`\mathbb \mathrm R`.not.toParse();
  1655 |     });
  1656 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1668}","  1666 |     });
  1667 |
> 1668 |     it(""should be allowed in the argument"", function() {
       |    ^ Unknown Test
  1669 |         expect`e^\mathbf{x}`.toParse();
  1670 |     });
  1671 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1677}","  1675 |     });
  1676 |
> 1677 |     it(""old-style fonts work like new-style fonts"", () => {
       |    ^ Unknown Test
  1678 |         expect`\rm xyz`.toParseLike`\mathrm{xyz}`;
  1679 |         expect`\sf xyz`.toParseLike`\mathsf{xyz}`;
  1680 |         expect`\tt xyz`.toParseLike`\mathtt{xyz}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1688}","  1686 |
  1687 | describe(""A \\pmb builder"", function() {
> 1688 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1689 |         expect`\pmb{\mu}`.toBuild();
  1690 |         expect`\pmb{=}`.toBuild();
  1691 |         expect`\pmb{+}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1699}","  1697 |
  1698 | describe(""A raise parser"", function() {
> 1699 |     it(""should parse and build text in \\raisebox"", function() {
       |    ^ Unknown Test
  1700 |         expect`\raisebox{5pt}{text}`.toBuild(strictSettings);
  1701 |         expect`\raisebox{-5pt}{text}`.toBuild(strictSettings);
  1702 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1704}","  1702 |     });
  1703 |
> 1704 |     it(""should parse and build math in non-strict \\vcenter"", function() {
       |    ^ Unknown Test
  1705 |         expect`\vcenter{\frac a b}`.toBuild(nonstrictSettings);
  1706 |     });
  1707 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1708}","  1706 |     });
  1707 |
> 1708 |     it(""should fail to parse math in \\raisebox"", function() {
       |    ^ Unknown Test
  1709 |         expect`\raisebox{5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1710 |         expect`\raisebox{-5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1711 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1713}","  1711 |     });
  1712 |
> 1713 |     it(""should fail to parse math in an \\hbox"", function() {
       |    ^ Unknown Test
  1714 |         expect`\hbox{\frac a b}`.not.toParse(nonstrictSettings);
  1715 |     });
  1716 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1717}","  1715 |     });
  1716 |
> 1717 |     it(""should fail to build, given an unbraced length"", function() {
       |    ^ Unknown Test
  1718 |         expect`\raisebox5pt{text}`.not.toBuild(strictSettings);
  1719 |         expect`\raisebox-5pt{text}`.not.toBuild(strictSettings);
  1720 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1722}","  1720 |     });
  1721 |
> 1722 |     it(""should build math in an hbox when math mode is set"", function() {
       |    ^ Unknown Test
  1723 |         expect`a + \vcenter{\hbox{$\frac{\frac a b}c$}}`
  1724 |             .toBuild(strictSettings);
  1725 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1771}","  1769 |     });
  1770 |
> 1771 |     it(""should not parse a comment without newline in strict mode"", () => {
       |    ^ Unknown Test
  1772 |         expect`x%y`.not.toParse(strictSettings);
  1773 |         expect`x%y`.toParse(nonstrictSettings);
  1774 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2256}","  2254 |
  2255 | describe(""An accent parser"", function() {
> 2256 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2257 |         expect`\vec{x}`.toParse();
  2258 |         expect`\vec{x^2}`.toParse();
  2259 |         expect`\vec{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2276}","  2274 |     });
  2275 |
> 2276 |     it(""should parse stretchy, shifty accents"", function() {
       |    ^ Unknown Test
  2277 |         expect`\widehat{x}`.toParse();
  2278 |         expect`\widecheck{x}`.toParse();
  2279 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2281}","  2279 |     });
  2280 |
> 2281 |     it(""should parse stretchy, non-shifty accents"", function() {
       |    ^ Unknown Test
  2282 |         expect`\overrightarrow{x}`.toParse();
  2283 |     });
  2284 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2287}","  2285 |
  2286 | describe(""An accent builder"", function() {
> 2287 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2288 |         expect`\vec{x}`.toBuild();
  2289 |         expect`\vec{x}^2`.toBuild();
  2290 |         expect`\vec{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2304}","  2302 |
  2303 | describe(""A stretchy and shifty accent builder"", function() {
> 2304 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2305 |         expect`\widehat{AB}`.toBuild();
  2306 |         expect`\widecheck{AB}`.toBuild();
  2307 |         expect`\widehat{AB}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2322}","  2320 |
  2321 | describe(""A stretchy and non-shifty accent builder"", function() {
> 2322 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2323 |         expect`\overrightarrow{AB}`.toBuild();
  2324 |         expect`\overrightarrow{AB}^2`.toBuild();
  2325 |         expect`\overrightarrow{AB}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2348}","  2346 |
  2347 | describe(""An under-accent parser"", function() {
> 2348 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2349 |         expect`\underrightarrow{x}`.toParse();
  2350 |         expect`\underrightarrow{x^2}`.toParse();
  2351 |         expect`\underrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2369}","  2367 |
  2368 | describe(""An under-accent builder"", function() {
> 2369 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2370 |         expect`\underrightarrow{x}`.toBuild();
  2371 |         expect`\underrightarrow{x}^2`.toBuild();
  2372 |         expect`\underrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2387}","  2385 |
  2386 | describe(""An extensible arrow parser"", function() {
> 2387 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2388 |         expect`\xrightarrow{x}`.toParse();
  2389 |         expect`\xrightarrow{x^2}`.toParse();
  2390 |         expect`\xrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2409}","  2407 |
  2408 | describe(""An extensible arrow builder"", function() {
> 2409 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2410 |         expect`\xrightarrow{x}`.toBuild();
  2411 |         expect`\xrightarrow{x}^2`.toBuild();
  2412 |         expect`\xrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2428}","  2426 |
  2427 | describe(""A horizontal brace parser"", function() {
> 2428 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2429 |         expect`\overbrace{x}`.toParse();
  2430 |         expect`\overbrace{x^2}`.toParse();
  2431 |         expect`\overbrace{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2451}","  2449 |
  2450 | describe(""A horizontal brace builder"", function() {
> 2451 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2452 |         expect`\overbrace{x}`.toBuild();
  2453 |         expect`\overbrace{x}^2`.toBuild();
  2454 |         expect`\underbrace{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2469}","  2467 |
  2468 | describe(""A boxed parser"", function() {
> 2469 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2470 |         expect`\boxed{x}`.toParse();
  2471 |         expect`\boxed{x^2}`.toParse();
  2472 |         expect`\boxed{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2484}","  2482 |
  2483 | describe(""A boxed builder"", function() {
> 2484 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2485 |         expect`\boxed{x}`.toBuild();
  2486 |         expect`\boxed{x}^2`.toBuild();
  2487 |         expect`\boxed{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2501}","  2499 |
  2500 | describe(""An fbox parser, unlike a boxed parser,"", function() {
> 2501 |     it(""should fail when given math"", function() {
       |    ^ Unknown Test
  2502 |         expect`\fbox{\frac a b}`.not.toParse();
  2503 |     });
  2504 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2507}","  2505 |
  2506 | describe(""A colorbox parser"", function() {
> 2507 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2508 |         expect`\colorbox{red}{a b}`.toParse();
  2509 |         expect`\colorbox{red}{x}^2`.toParse();
  2510 |         expect`\colorbox{red} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2513}","  2511 |     });
  2512 |
> 2513 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2514 |         expect`\colorbox{red}{\alpha}`.not.toParse();
  2515 |         expect`\colorbox{red}{\frac{a}{b}}`.not.toParse();
  2516 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2518}","  2516 |     });
  2517 |
> 2518 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2519 |         expect`\colorbox{red}{a b}`.toParse();
  2520 |         expect`\colorbox{#197}{a b}`.toParse();
  2521 |         expect`\colorbox{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2531}","  2529 |
  2530 | describe(""A colorbox builder"", function() {
> 2531 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2532 |         expect`\colorbox{red}{a b}`.toBuild();
  2533 |         expect`\colorbox{red}{a b}^2`.toBuild();
  2534 |         expect`\colorbox{red} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2543}","  2541 |
  2542 | describe(""An fcolorbox parser"", function() {
> 2543 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2544 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2545 |         expect`\fcolorbox{blue}{yellow}{x}^2`.toParse();
  2546 |         expect`\fcolorbox{blue}{yellow} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2549}","  2547 |     });
  2548 |
> 2549 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2550 |         expect`\fcolorbox{blue}{yellow}{\alpha}`.not.toParse();
  2551 |         expect`\fcolorbox{blue}{yellow}{\frac{a}{b}}`.not.toParse();
  2552 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2554}","  2552 |     });
  2553 |
> 2554 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2555 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2556 |         expect`\fcolorbox{blue}{#197}{a b}`.toParse();
  2557 |         expect`\fcolorbox{blue}{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2567}","  2565 |
  2566 | describe(""A fcolorbox builder"", function() {
> 2567 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2568 |         expect`\fcolorbox{blue}{yellow}{a b}`.toBuild();
  2569 |         expect`\fcolorbox{blue}{yellow}{a b}^2`.toBuild();
  2570 |         expect`\fcolorbox{blue}{yellow} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2579}","  2577 |
  2578 | describe(""A strike-through parser"", function() {
> 2579 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2580 |         expect`\cancel{x}`.toParse();
  2581 |         expect`\cancel{x^2}`.toParse();
  2582 |         expect`\cancel{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2600}","  2598 |
  2599 | describe(""A strike-through builder"", function() {
> 2600 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2601 |         expect`\cancel{x}`.toBuild();
  2602 |         expect`\cancel{x}^2`.toBuild();
  2603 |         expect`\cancel{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2621}","  2619 |
  2620 | describe(""A actuarial angle parser"", function() {
> 2621 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2622 |         expect`a_{\angl{n}}`.toParse();
  2623 |     });
  2624 |     it(""should fail in text mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2624}","  2622 |         expect`a_{\angl{n}}`.toParse();
  2623 |     });
> 2624 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2625 |         expect`\text{a_{\angl{n}}}`.not.toParse();
  2626 |     });
  2627 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2630}","  2628 |
  2629 | describe(""A actuarial angle builder"", function() {
> 2630 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2631 |         expect`a_{\angl{n}}`.toBuild();
  2632 |         expect`a_{\angl{n}i}`.toBuild();
  2633 |         expect`a_{\angl n}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2639}","  2637 |
  2638 | describe(""\\phase"", function() {
> 2639 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2640 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2641 |     });
  2642 |     it(""should not fail in math mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2642}","  2640 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2641 |     });
> 2642 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2643 |         expect`\phase{-78.2^\circ}`.toBuild();
  2644 |     });
  2645 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2648}","  2646 |
  2647 | describe(""A phantom parser"", function() {
> 2648 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2649 |         expect`\phantom{x}`.toParse();
  2650 |         expect`\phantom{x^2}`.toParse();
  2651 |         expect`\phantom{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2668}","  2666 |
  2667 | describe(""A phantom builder"", function() {
> 2668 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2669 |         expect`\phantom{x}`.toBuild();
  2670 |         expect`\phantom{x^2}`.toBuild();
  2671 |         expect`\phantom{x}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2697}","  2695 |
  2696 | describe(""A smash parser"", function() {
> 2697 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2698 |         expect`\smash{x}`.toParse();
  2699 |         expect`\smash{x^2}`.toParse();
  2700 |         expect`\smash{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2722}","  2720 |
  2721 | describe(""A smash builder"", function() {
> 2722 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2723 |         expect`\smash{x}`.toBuild(nonstrictSettings);
  2724 |         expect`\smash{x^2}`.toBuild(nonstrictSettings);
  2725 |         expect`\smash{x}^2`.toBuild(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2746}","  2744 |
  2745 | describe(""An optional argument parser"", function() {
> 2746 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2747 |         // Note this doesn't actually make an optional argument, but still
  2748 |         // should work
  2749 |         expect`\frac[1]{2}{3}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2754}","  2752 |     });
  2753 |
> 2754 |     it(""should work with sqrts with optional arguments"", function() {
       |    ^ Unknown Test
  2755 |         expect`\sqrt[3]{2}`.toParse();
  2756 |     });
  2757 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2758}","  2756 |     });
  2757 |
> 2758 |     it(""should work when the optional argument is missing"", function() {
       |    ^ Unknown Test
  2759 |         expect`\sqrt{2}`.toParse();
  2760 |         expect`\rule{1em}{2em}`.toParse();
  2761 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2763}","  2761 |     });
  2762 |
> 2763 |     it(""should fail when the optional argument is malformed"", function() {
       |    ^ Unknown Test
  2764 |         expect`\rule[1]{2em}{3em}`.not.toParse();
  2765 |     });
  2766 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2767}","  2765 |     });
  2766 |
> 2767 |     it(""should not work if the optional argument isn't closed"", function() {
       |    ^ Unknown Test
  2768 |         expect`\sqrt[`.not.toParse();
  2769 |     });
  2770 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2817}","  2815 | describe(""A substack function"", function() {
  2816 |
> 2817 |     it(""should build"", function() {
       |    ^ Unknown Test
  2818 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2819 |     });
  2820 |     it(""should accommodate spaces in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2820}","  2818 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2819 |     });
> 2820 |     it(""should accommodate spaces in the argument"", function() {
       |    ^ Unknown Test
  2821 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2822 |     });
  2823 |     it(""should accommodate macros in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2823}","  2821 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2822 |     });
> 2823 |     it(""should accommodate macros in the argument"", function() {
       |    ^ Unknown Test
  2824 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2825 |     });
  2826 |     it(""should accommodate an empty argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2826}","  2824 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2825 |     });
> 2826 |     it(""should accommodate an empty argument"", function() {
       |    ^ Unknown Test
  2827 |         expect`\sum_{\substack{}}  P(i,j)`.toBuild();
  2828 |     });
  2829 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2834}","  2832 | describe(""A smallmatrix environment"", function() {
  2833 |
> 2834 |     it(""should build"", function() {
       |    ^ Unknown Test
  2835 |         expect`\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}`.toBuild();
  2836 |     });
  2837 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2842}","  2840 | describe(""A cases environment"", function() {
  2841 |
> 2842 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2843 |         expect`f(a,b)=\begin{cases}a+1&\text{if }b\text{ is odd}\\a&\text{if }b=0\\a-1&\text{otherwise}\end{cases}`
  2844 |             .toParse();
  2845 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2851}","  2849 | describe(""An rcases environment"", function() {
  2850 |
> 2851 |     it(""should build"", function() {
       |    ^ Unknown Test
  2852 |         expect`\begin{rcases} a &\text{if } b \\ c &\text{if } d \end{rcases}⇒…`
  2853 |             .toBuild();
  2854 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2860}","  2858 | describe(""An aligned environment"", function() {
  2859 |
> 2860 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2861 |         expect`\begin{aligned}a&=b&c&=d\\e&=f\end{aligned}`.toParse();
  2862 |     });
  2863 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2864}","  2862 |     });
  2863 |
> 2864 |     it(""should allow cells in brackets"", function() {
       |    ^ Unknown Test
  2865 |         expect`\begin{aligned}[a]&[b]\\ [c]&[d]\end{aligned}`.toParse();
  2866 |     });
  2867 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2868}","  2866 |     });
  2867 |
> 2868 |     it(""should forbid cells in brackets without space"", function() {
       |    ^ Unknown Test
  2869 |         expect`\begin{aligned}[a]&[b]\\[c]&[d]\end{aligned}`.not.toParse();
  2870 |     });
  2871 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2879}","  2877 |
  2878 | describe(""AMS environments"", function() {
> 2879 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  2880 |         expect`\begin{gather}a+b\\c+d\end{gather}`.not.toParse(nonstrictSettings);
  2881 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.not.toParse(nonstrictSettings);
  2882 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.not.toParse(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2892}","  2890 |
  2891 |     const displayMode = new Settings({displayMode: true});
> 2892 |     it(""should build if in display mode"", () => {
       |    ^ Unknown Test
  2893 |         expect`\begin{gather}a+b\\c+d\end{gather}`.toBuild(displayMode);
  2894 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.toBuild(displayMode);
  2895 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2905}","  2903 |     });
  2904 |
> 2905 |     it(""should build an empty environment"", () => {
       |    ^ Unknown Test
  2906 |         expect`\begin{gather}\end{gather}`.toBuild(displayMode);
  2907 |         expect`\begin{gather*}\end{gather*}`.toBuild(displayMode);
  2908 |         expect`\begin{align}\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2917}","  2915 |     });
  2916 |
> 2917 |     it(""{equation} should fail if argument contains two rows."", () => {
       |    ^ Unknown Test
  2918 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2919 |     });
  2920 |     it(""{equation} should fail if argument contains two columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2920}","  2918 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2919 |     });
> 2920 |     it(""{equation} should fail if argument contains two columns."", () => {
       |    ^ Unknown Test
  2921 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2922 |     });
  2923 |     it(""{split} should fail if argument contains three columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2923}","  2921 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2922 |     });
> 2923 |     it(""{split} should fail if argument contains three columns."", () => {
       |    ^ Unknown Test
  2924 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2925 |     });
  2926 |     it(""{array} should fail if body contains more columns than specification."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2926}","  2924 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2925 |     });
> 2926 |     it(""{array} should fail if body contains more columns than specification."", () => {
       |    ^ Unknown Test
  2927 |         expect`\begin{array}{2}a & b & c\\d & e  f\end{array}`.not.toBuild(displayMode);
  2928 |     });
  2929 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2955}","  2953 |
  2954 | describe(""operatorname support"", function() {
> 2955 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2956 |         expect`\operatorname{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2957 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2958 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}_y x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2966}","  2964 |
  2965 | describe(""href and url commands"", function() {
> 2966 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2967 |         expect`\href{http://example.com/}{\sin}`.toBuild(trustSettings);
  2968 |         expect`\url{http://example.com/}`.toBuild(trustSettings);
  2969 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2971}","  2969 |     });
  2970 |
> 2971 |     it(""should allow empty URLs"", function() {
       |    ^ Unknown Test
  2972 |         expect`\href{}{example here}`.toBuild(trustSettings);
  2973 |         expect`\url{}`.toBuild(trustSettings);
  2974 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2984}","  2982 |     });
  2983 |
> 2984 |     it(""should allow spaces single-character URLs"", () => {
       |    ^ Unknown Test
  2985 |         expect`\href %end`.toParseLike(""\\href{%}end"", trustSettings);
  2986 |         expect`\url %end`.toParseLike(""\\url{%}end"", trustSettings);
  2987 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3005}","  3003 |     });
  3004 |
> 3005 |     it(""should not allow unbalanced brace(s) in url"", function() {
       |    ^ Unknown Test
  3006 |         expect`\href{http://example.com/{a}{bar}`.not.toParse();
  3007 |         expect`\href{http://example.com/}a}{bar}`.not.toParse();
  3008 |         expect`\url{http://example.com/{a}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3096}","  3094 |
  3095 | describe(""A raw text parser"", function() {
> 3096 |     it(""should return null for a omitted optional string"", function() {
       |    ^ Unknown Test
  3097 |         expect`\includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}`.toParse();
  3098 |     });
  3099 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3111}","  3109 |     });
  3110 |
> 3111 |     it(""should still parse on unrecognized control sequences"", function() {
       |    ^ Unknown Test
  3112 |         expect`\error`.toParse(noThrowSettings);
  3113 |     });
  3114 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3116}","  3114 |
  3115 |     describe(""should allow unrecognized controls sequences anywhere, including"", function() {
> 3116 |         it(""in superscripts and subscripts"", function() {
       |        ^ Unknown Test
  3117 |             expect`2_\error`.toBuild(noThrowSettings);
  3118 |             expect`3^{\error}_\error`.toBuild(noThrowSettings);
  3119 |             expect`\int\nolimits^\error_\error`.toBuild(noThrowSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3122}","  3120 |         });
  3121 |
> 3122 |         it(""in fractions"", function() {
       |        ^ Unknown Test
  3123 |             expect`\frac{345}{\error}`.toBuild(noThrowSettings);
  3124 |             expect`\frac\error{\error}`.toBuild(noThrowSettings);
  3125 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3127}","  3125 |         });
  3126 |
> 3127 |         it(""in square roots"", function() {
       |        ^ Unknown Test
  3128 |             expect`\sqrt\error`.toBuild(noThrowSettings);
  3129 |             expect`\sqrt{234\error}`.toBuild(noThrowSettings);
  3130 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3132}","  3130 |         });
  3131 |
> 3132 |         it(""in text boxes"", function() {
       |        ^ Unknown Test
  3133 |             expect`\text{\error}`.toBuild(noThrowSettings);
  3134 |         });
  3135 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3202}","  3200 |
  3201 | describe(""The symbol table integrity"", function() {
> 3202 |     it(""should treat certain symbols as synonyms"", function() {
       |    ^ Unknown Test
  3203 |         expect`<`.toBuildLike`\lt`;
  3204 |         expect`>`.toBuildLike`\gt`;
  3205 |         expect`\left<\frac{1}{x}\right>`.toBuildLike`\left\lt\frac{1}{x}\right\gt`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3220}","  3218 |
  3219 | describe(""A macro expander"", function() {
> 3220 |     it(""should produce individual tokens"", function() {
       |    ^ Unknown Test
  3221 |         expect`e^\foo`.toParseLike(""e^1 23"",
  3222 |             new Settings({macros: {""\\foo"": ""123""}}));
  3223 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3225}","  3223 |     });
  3224 |
> 3225 |     it(""should preserve leading spaces inside macro definition"", function() {
       |    ^ Unknown Test
  3226 |         expect`\text{\foo}`.toParseLike(r`\text{ x}`,
  3227 |             new Settings({macros: {""\\foo"": "" x""}}));
  3228 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3230}","  3228 |     });
  3229 |
> 3230 |     it(""should preserve leading spaces inside macro argument"", function() {
       |    ^ Unknown Test
  3231 |         expect`\text{\foo{ x}}`.toParseLike(r`\text{ x}`,
  3232 |             new Settings({macros: {""\\foo"": ""#1""}}));
  3233 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3235}","  3233 |     });
  3234 |
> 3235 |     it(""should ignore expanded spaces in math mode"", function() {
       |    ^ Unknown Test
  3236 |         expect`\foo`.toParseLike(""x"", new Settings({macros: {""\\foo"": "" x""}}));
  3237 |     });
  3238 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3239}","  3237 |     });
  3238 |
> 3239 |     it(""should consume spaces after control-word macro"", function() {
       |    ^ Unknown Test
  3240 |         expect`\text{\foo }`.toParseLike(r`\text{x}`,
  3241 |             new Settings({macros: {""\\foo"": ""x""}}));
  3242 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3244}","  3242 |     });
  3243 |
> 3244 |     it(""should consume spaces after macro with \\relax"", function() {
       |    ^ Unknown Test
  3245 |         expect`\text{\foo }`.toParseLike(r`\text{}`,
  3246 |             new Settings({macros: {""\\foo"": ""\\relax""}}));
  3247 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3249}","  3247 |     });
  3248 |
> 3249 |     it(""should not consume spaces after control-word expansion"", function() {
       |    ^ Unknown Test
  3250 |         expect`\text{\\ }`.toParseLike(r`\text{ }`,
  3251 |             new Settings({macros: {""\\\\"": ""\\relax""}}));
  3252 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3254}","  3252 |     });
  3253 |
> 3254 |     it(""should consume spaces after \\relax"", function() {
       |    ^ Unknown Test
  3255 |         expect`\text{\relax }`.toParseLike`\text{}`;
  3256 |     });
  3257 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3258}","  3256 |     });
  3257 |
> 3258 |     it(""should consume spaces after control-word function"", function() {
       |    ^ Unknown Test
  3259 |         expect`\text{\KaTeX }`.toParseLike`\text{\KaTeX}`;
  3260 |     });
  3261 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3262}","  3260 |     });
  3261 |
> 3262 |     it(""should preserve spaces after control-symbol macro"", function() {
       |    ^ Unknown Test
  3263 |         expect`\text{\% y}`.toParseLike(r`\text{x y}`,
  3264 |             new Settings({macros: {""\\%"": ""x""}}));
  3265 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3267}","  3265 |     });
  3266 |
> 3267 |     it(""should preserve spaces after control-symbol function"", function() {
       |    ^ Unknown Test
  3268 |         expect`\text{\' }`.toParse();
  3269 |     });
  3270 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3271}","  3269 |     });
  3270 |
> 3271 |     it(""should consume spaces between arguments"", function() {
       |    ^ Unknown Test
  3272 |         expect`\text{\foo 1 2}`.toParseLike(r`\text{12end}`,
  3273 |             new Settings({macros: {""\\foo"": ""#1#2end""}}));
  3274 |         expect`\text{\foo {1} {2}}`.toParseLike(r`\text{12end}`,",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3278}","  3276 |     });
  3277 |
> 3278 |     it(""should allow for multiple expansion"", function() {
       |    ^ Unknown Test
  3279 |         expect`1\foo2`.toParseLike(""1aa2"", new Settings({macros: {
  3280 |             ""\\foo"": ""\\bar\\bar"",
  3281 |             ""\\bar"": ""a"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3285}","  3283 |     });
  3284 |
> 3285 |     it(""should allow for multiple expansion with argument"", function() {
       |    ^ Unknown Test
  3286 |         expect`1\foo2`.toParseLike(""12222"", new Settings({macros: {
  3287 |             ""\\foo"": ""\\bar{#1}\\bar{#1}"",
  3288 |             ""\\bar"": ""#1#1"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3292}","  3290 |     });
  3291 |
> 3292 |     it(""should allow for macro argument"", function() {
       |    ^ Unknown Test
  3293 |         expect`\foo\bar`.toParseLike(""(xyz)"", new Settings({macros: {
  3294 |             ""\\foo"": ""(#1)"",
  3295 |             ""\\bar"": ""xyz"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3299}","  3297 |     });
  3298 |
> 3299 |     it(""should allow properly nested group for macro argument"", function() {
       |    ^ Unknown Test
  3300 |         expect`\foo{e^{x_{12}+3}}`.toParseLike(""(e^{x_{12}+3})"",
  3301 |             new Settings({macros: {""\\foo"": ""(#1)""}}));
  3302 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3304}","  3302 |     });
  3303 |
> 3304 |     it(""should delay expansion if preceded by \\expandafter"", function() {
       |    ^ Unknown Test
  3305 |         expect`\expandafter\foo\bar`.toParseLike(""x+y"", new Settings({macros: {
  3306 |             ""\\foo"": ""#1+#2"",
  3307 |             ""\\bar"": ""xy"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3314}","  3312 |     });
  3313 |
> 3314 |     it(""should not expand if preceded by \\noexpand"", function() {
       |    ^ Unknown Test
  3315 |         // \foo is not expanded and interpreted as if its meaning were \relax
  3316 |         expect`\noexpand\foo y`.toParseLike(""y"",
  3317 |             new Settings({macros: {""\\foo"": ""x""}}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3327}","  3325 |     });
  3326 |
> 3327 |     it(""should allow for space macro argument (text version)"", function() {
       |    ^ Unknown Test
  3328 |         expect`\text{\foo\bar}`.toParseLike(r`\text{( )}`, new Settings({macros: {
  3329 |             ""\\foo"": ""(#1)"",
  3330 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3334}","  3332 |     });
  3333 |
> 3334 |     it(""should allow for space macro argument (math version)"", function() {
       |    ^ Unknown Test
  3335 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3336 |             ""\\foo"": ""(#1)"",
  3337 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3341}","  3339 |     });
  3340 |
> 3341 |     it(""should allow for space second argument (text version)"", function() {
       |    ^ Unknown Test
  3342 |         expect`\text{\foo\bar\bar}`.toParseLike(r`\text{( , )}`, new Settings({macros: {
  3343 |             ""\\foo"": ""(#1,#2)"",
  3344 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3348}","  3346 |     });
  3347 |
> 3348 |     it(""should treat \\relax as empty argument"", function() {
       |    ^ Unknown Test
  3349 |         expect`\text{\foo\relax x}`.toParseLike(r`\text{(,x)}`, new Settings({macros: {
  3350 |             ""\\foo"": ""(#1,#2)"",
  3351 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3354}","  3352 |     });
  3353 |
> 3354 |     it(""should allow for space second argument (math version)"", function() {
       |    ^ Unknown Test
  3355 |         expect`\foo\bar\bar`.toParseLike(""(,)"", new Settings({macros: {
  3356 |             ""\\foo"": ""(#1,#2)"",
  3357 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3361}","  3359 |     });
  3360 |
> 3361 |     it(""should allow for empty macro argument"", function() {
       |    ^ Unknown Test
  3362 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3363 |             ""\\foo"": ""(#1)"",
  3364 |             ""\\bar"": """",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3368}","  3366 |     });
  3367 |
> 3368 |     it(""should allow for space function arguments"", function() {
       |    ^ Unknown Test
  3369 |         expect`\frac\bar\bar`.toParseLike(r`\frac{}{}`, new Settings({macros: {
  3370 |             ""\\bar"": "" "",
  3371 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3374}","  3372 |     });
  3373 |
> 3374 |     it(""should build \\overset and \\underset"", function() {
       |    ^ Unknown Test
  3375 |         expect`\overset{f}{\rightarrow} Y`.toBuild();
  3376 |         expect`\underset{f}{\rightarrow} Y`.toBuild();
  3377 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3379}","  3377 |     });
  3378 |
> 3379 |     it(""should build \\iff, \\implies, \\impliedby"", function() {
       |    ^ Unknown Test
  3380 |         expect`X \iff Y`.toBuild();
  3381 |         expect`X \implies Y`.toBuild();
  3382 |         expect`X \impliedby Y`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3385}","  3383 |     });
  3384 |
> 3385 |     it(""should allow aliasing characters"", function() {
       |    ^ Unknown Test
  3386 |         expect`x’=c`.toParseLike(""x'=c"", new Settings({macros: {
  3387 |             ""’"": ""'"",
  3388 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3391}","  3389 |     });
  3390 |
> 3391 |     it(""\\@firstoftwo should consume both, and avoid errors"", function() {
       |    ^ Unknown Test
  3392 |         expect`\@firstoftwo{yes}{no}`.toParseLike`yes`;
  3393 |         expect`\@firstoftwo{yes}{1'_2^3}`.toParseLike`yes`;
  3394 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3396}","  3394 |     });
  3395 |
> 3396 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3397 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3398 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3399 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3401}","  3399 |     });
  3400 |
> 3401 |     it(""\\@ifnextchar should not consume nonspaces"", function() {
       |    ^ Unknown Test
  3402 |         expect`\@ifnextchar!{yes}{no}!!`.toParseLike`yes!!`;
  3403 |         expect`\@ifnextchar!{yes}{no}?!`.toParseLike`no?!`;
  3404 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3406}","  3404 |     });
  3405 |
> 3406 |     it(""\\@ifnextchar should consume spaces"", function() {
       |    ^ Unknown Test
  3407 |         expect`\def\x#1{\@ifnextchar x{yes}{no}}\x{}x\x{} x`
  3408 |             .toParseLike`yesxyesx`;
  3409 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3411}","  3409 |     });
  3410 |
> 3411 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3412 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3413 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3414 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3416}","  3414 |     });
  3415 |
> 3416 |     it(""\\TextOrMath should work immediately"", function() {
       |    ^ Unknown Test
  3417 |         expect`\TextOrMath{text}{math}`.toParseLike`math`;
  3418 |     });
  3419 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3420}","  3418 |     });
  3419 |
> 3420 |     it(""\\TextOrMath should work after other math"", function() {
       |    ^ Unknown Test
  3421 |         expect`x+\TextOrMath{text}{math}`.toParseLike`x+math`;
  3422 |     });
  3423 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3424}","  3422 |     });
  3423 |
> 3424 |     it(""\\TextOrMath should work immediately after \\text"", function() {
       |    ^ Unknown Test
  3425 |         expect`\text{\TextOrMath{text}{math}}`.toParseLike`\text{text}`;
  3426 |     });
  3427 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3428}","  3426 |     });
  3427 |
> 3428 |     it(""\\TextOrMath should work later after \\text"", function() {
       |    ^ Unknown Test
  3429 |         expect`\text{hello \TextOrMath{text}{math}}`.toParseLike`\text{hello text}`;
  3430 |     });
  3431 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3432}","  3430 |     });
  3431 |
> 3432 |     it(""\\TextOrMath should work immediately after \\text ends"", function() {
       |    ^ Unknown Test
  3433 |         expect`\text{\TextOrMath{text}{math}}\TextOrMath{text}{math}`
  3434 |             .toParseLike`\text{text}math`;
  3435 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3437}","  3435 |     });
  3436 |
> 3437 |     it(""\\TextOrMath should work immediately after $"", function() {
       |    ^ Unknown Test
  3438 |         expect`\text{$\TextOrMath{text}{math}$}`.toParseLike`\text{$math$}`;
  3439 |     });
  3440 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3441}","  3439 |     });
  3440 |
> 3441 |     it(""\\TextOrMath should work later after $"", function() {
       |    ^ Unknown Test
  3442 |         expect`\text{$x+\TextOrMath{text}{math}$}`.toParseLike`\text{$x+math$}`;
  3443 |     });
  3444 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3445}","  3443 |     });
  3444 |
> 3445 |     it(""\\TextOrMath should work immediately after $ ends"", function() {
       |    ^ Unknown Test
  3446 |         expect`\text{$\TextOrMath{text}{math}$\TextOrMath{text}{math}}`
  3447 |             .toParseLike`\text{$math$text}`;
  3448 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3450}","  3448 |     });
  3449 |
> 3450 |     it(""\\TextOrMath should work in a macro"", function() {
       |    ^ Unknown Test
  3451 |         expect`\mode\text{\mode$\mode$\mode}\mode`
  3452 |             .toParseLike(r`math\text{text$math$text}math`, new Settings({macros: {
  3453 |                 ""\\mode"": ""\\TextOrMath{text}{math}"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3457}","  3455 |     });
  3456 |
> 3457 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3458 |         expect`\text\mode`.toParseLike(r`\text t`, new Settings({macros:
  3459 |             {""\\mode"": ""\\TextOrMath{t}{m}""}}));
  3460 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3489}","  3487 |     });
  3488 |
> 3489 |     it(""should build Unicode private area characters"", function() {
       |    ^ Unknown Test
  3490 |         expect`\gvertneqq\lvertneqq\ngeqq\ngeqslant\nleqq`.toBuild();
  3491 |         expect`\nleqslant\nshortmid\nshortparallel\varsubsetneq`.toBuild();
  3492 |         expect`\varsubsetneqq\varsupsetneq\varsupsetneqq`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3495}","  3493 |     });
  3494 |
> 3495 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3496 |         expect`\text\mode`.toParseLike(r`\text{text}`, new Settings({macros:
  3497 |             {""\\mode"": ""\\TextOrMath{text}{math}""}}));
  3498 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3500}","  3498 |     });
  3499 |
> 3500 |     it(""\\gdef defines macros"", function() {
       |    ^ Unknown Test
  3501 |         expect`\gdef\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3502 |         expect`\gdef\foo{hi}\foo+\text\foo`.toParseLike`hi+\text{hi}`;
  3503 |         expect`\gdef\foo#1{hi #1}\text{\foo{Alice}, \foo{Bob}}`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3518}","  3516 |     });
  3517 |
> 3518 |     it(""\\gdef defines macros with delimited parameter"", function() {
       |    ^ Unknown Test
  3519 |         expect`\gdef\foo|#1||{#1}\text{\foo| x y ||}`.toParseLike`\text{ x y }`;
  3520 |         expect`\gdef\foo#1|#2{#1+#2}\foo 1 2 |34`.toParseLike`12+34`;
  3521 |         expect`\gdef\foo#1#{#1}\foo1^{23}`.toParseLike`1^{23}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3527}","  3525 |     });
  3526 |
> 3527 |     it(""\\xdef should expand definition"", function() {
       |    ^ Unknown Test
  3528 |         expect`\def\foo{a}\xdef\bar{\foo}\def\foo{}\bar`.toParseLike`a`;
  3529 |         // \def\noexpand\foo{} expands into \def\foo{}
  3530 |         expect`\def\foo{a}\xdef\bar{\def\noexpand\foo{}}\foo\bar\foo`.toParseLike`a`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3537}","  3535 |     });
  3536 |
> 3537 |     it(""\\def should be handled in Parser"", () => {
       |    ^ Unknown Test
  3538 |         expect`\gdef\foo{1}`.toParse(new Settings({maxExpand: 0}));
  3539 |         expect`2^\def\foo{1}2`.not.toParse();
  3540 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3542}","  3540 |     });
  3541 |
> 3542 |     it(""\\def works locally"", () => {
       |    ^ Unknown Test
  3543 |         expect`\def\x{1}\x{\def\x{2}\x{\def\x{3}\x}\x}\x`
  3544 |             .toParseLike`1{2{3}2}1`;
  3545 |         expect`\def\x{1}\x\def\x{2}\x{\def\x{3}\x\def\x{4}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3549}","  3547 |     });
  3548 |
> 3549 |     it(""\\gdef overrides at all levels"", () => {
       |    ^ Unknown Test
  3550 |         expect`\def\x{1}\x{\def\x{2}\x{\gdef\x{3}\x}\x}\x`
  3551 |             .toParseLike`1{2{3}3}3`;
  3552 |         expect`\def\x{1}\x{\def\x{2}\x{\global\def\x{3}\x}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3558}","  3556 |     });
  3557 |
> 3558 |     it(""\\global needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3559 |         expect`\global\def\foo{}\foo`.toParseLike``;
  3560 |         expect`\global\edef\foo{}\foo`.toParseLike``;
  3561 |         expect`\def\DEF{\def}\global\DEF\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3568}","  3566 |     });
  3567 |
> 3568 |     it(""\\long needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3569 |         expect`\long\def\foo{}\foo`.toParseLike``;
  3570 |         expect`\long\edef\foo{}\foo`.toParseLike``;
  3571 |         expect`\long\global\def\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3575}","  3573 |     });
  3574 |
> 3575 |     it(""Macro arguments do not generate groups"", () => {
       |    ^ Unknown Test
  3576 |         expect`\def\x{1}\x\def\foo#1{#1}\foo{\x\def\x{2}\x}\x`
  3577 |             .toParseLike`1122`;
  3578 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3580}","  3578 |     });
  3579 |
> 3580 |     it(""\\textbf arguments do generate groups"", () => {
       |    ^ Unknown Test
  3581 |         expect`\def\x{1}\x\textbf{\x\def\x{2}\x}\x`.toParseLike`1\textbf{12}1`;
  3582 |     });
  3583 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3584}","  3582 |     });
  3583 |
> 3584 |     it(""\\sqrt optional arguments generate groups"", () => {
       |    ^ Unknown Test
  3585 |         expect`\def\x{1}\def\y{1}\x\y\sqrt[\def\x{2}\x]{\def\y{2}\y}\x\y`
  3586 |             .toParseLike`11\sqrt[2]{2}11`;
  3587 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3589}","  3587 |     });
  3588 |
> 3589 |     it(""array cells generate groups"", () => {
       |    ^ Unknown Test
  3590 |         expect`\def\x{1}\begin{matrix}\x&\def\x{2}\x&\x\end{matrix}\x`
  3591 |             .toParseLike`\begin{matrix}1&2&1\end{matrix}1`;
  3592 |         expect`\def\x{1}\begin{matrix}\def\x{2}\x&\x\end{matrix}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3620}","  3618 |     });
  3619 |
> 3620 |     it(""\\let copies the definition"", () => {
       |    ^ Unknown Test
  3621 |         expect`\let\foo=\frac\def\frac{}\foo12`.toParseLike`\frac12`;
  3622 |         expect`\def\foo{1}\let\bar\foo\def\foo{2}\bar`.toParseLike`1`;
  3623 |         expect`\let\foo=\kern\edef\bar{\foo1em}\let\kern=\relax\bar`.toParseLike`\kern1em`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3640}","  3638 |     });
  3639 |
> 3640 |     it(""\\futurelet should parse correctly"", () => {
       |    ^ Unknown Test
  3641 |         expect`\futurelet\foo\frac1{2+\foo}`.toParseLike`\frac1{2+1}`;
  3642 |     });
  3643 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3644}","  3642 |     });
  3643 |
> 3644 |     it(""macros argument can simulate \\let"", () => {
       |    ^ Unknown Test
  3645 |         expect`\int`.toParseLike(""\\int\\limits"", {macros: {
  3646 |             ""\\Oldint"": {
  3647 |                 tokens: [{text: ""\\int"", noexpand: true}],",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3671}","  3669 |     });
  3670 |
> 3671 |     it(""\\newcommand defines new macros"", () => {
       |    ^ Unknown Test
  3672 |         expect`\newcommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3673 |         expect`\newcommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3674 |         // Function detection",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3686}","  3684 |     });
  3685 |
> 3686 |     it(""\\renewcommand redefines macros"", () => {
       |    ^ Unknown Test
  3687 |         expect`\renewcommand\foo{x^2}\foo+\foo`.not.toParse();
  3688 |         expect`\renewcommand{\foo}{x^2}\foo+\foo`.not.toParse();
  3689 |         expect`\renewcommand\bar{x^2}\bar+\bar`.toParseLike`x^2+x^2`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3694}","  3692 |     });
  3693 |
> 3694 |     it(""\\providecommand defines but does not redefine macros"", () => {
       |    ^ Unknown Test
  3695 |         expect`\providecommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3696 |         expect`\providecommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3697 |         expect`\newcommand{\foo}{1}\foo\providecommand{\foo}{2}\foo`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3705}","  3703 |     });
  3704 |
> 3705 |     it(""\\newcommand is local"", () => {
       |    ^ Unknown Test
  3706 |         expect`\newcommand\foo{1}\foo{\renewcommand\foo{2}\foo}\foo`
  3707 |             .toParseLike`1{2}1`;
  3708 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3710}","  3708 |     });
  3709 |
> 3710 |     it(""\\newcommand accepts number of arguments"", () => {
       |    ^ Unknown Test
  3711 |         expect`\newcommand\foo[1]{#1^2}\foo x+\foo{y}`.toParseLike`x^2+y^2`;
  3712 |         expect`\newcommand\foo[10]{#1^2}\foo 0123456789`.toParseLike`0^2`;
  3713 |         expect`\newcommand\foo[x]{}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3719}","  3717 |     // This may change in the future, if we support the extra features of
  3718 |     // \hspace.
> 3719 |     it(""should treat \\hspace, \\hskip like \\kern"", function() {
       |    ^ Unknown Test
  3720 |         expect`\hspace{1em}`.toParseLike`\kern1em`;
  3721 |         expect`\hskip{1em}`.toParseLike`\kern1em`;
  3722 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3724}","  3722 |     });
  3723 |
> 3724 |     it(""should expand \\limsup as expected"", () => {
       |    ^ Unknown Test
  3725 |         expect`\limsup`.toParseLike`\operatorname*{lim\,sup}`;
  3726 |     });
  3727 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3728}","  3726 |     });
  3727 |
> 3728 |     it(""should expand \\liminf as expected"", () => {
       |    ^ Unknown Test
  3729 |         expect`\liminf`.toParseLike`\operatorname*{lim\,inf}`;
  3730 |     });
  3731 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3732}","  3730 |     });
  3731 |
> 3732 |     it(""should expand AMS log-like symbols as expected"", () => {
       |    ^ Unknown Test
  3733 |         expect`\injlim`.toParseLike`\operatorname*{inj\,lim}`;
  3734 |         expect`\projlim`.toParseLike`\operatorname*{proj\,lim}`;
  3735 |         expect`\varlimsup`.toParseLike`\operatorname*{\overline{lim}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3742}","  3740 |     });
  3741 |
> 3742 |     it(""should expand \\plim as expected"", () => {
       |    ^ Unknown Test
  3743 |         expect`\plim`.toParseLike`\mathop{\operatorname{plim}}\limits`;
  3744 |     });
  3745 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3746}","  3744 |     });
  3745 |
> 3746 |     it(""should expand \\argmin as expected"", () => {
       |    ^ Unknown Test
  3747 |         expect`\argmin`.toParseLike`\operatorname*{arg\,min}`;
  3748 |     });
  3749 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3750}","  3748 |     });
  3749 |
> 3750 |     it(""should expand \\argmax as expected"", () => {
       |    ^ Unknown Test
  3751 |         expect`\argmax`.toParseLike`\operatorname*{arg\,max}`;
  3752 |     });
  3753 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3754}","  3752 |     });
  3753 |
> 3754 |     it(""should expand \\bra as expected"", () => {
       |    ^ Unknown Test
  3755 |         expect`\bra{\phi}`.toParseLike`\mathinner{\langle{\phi}|}`;
  3756 |     });
  3757 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3758}","  3756 |     });
  3757 |
> 3758 |     it(""should expand \\ket as expected"", () => {
       |    ^ Unknown Test
  3759 |         expect`\ket{\psi}`.toParseLike`\mathinner{|{\psi}\rangle}`;
  3760 |     });
  3761 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3762}","  3760 |     });
  3761 |
> 3762 |     it(""should expand \\braket as expected"", () => {
       |    ^ Unknown Test
  3763 |         expect`\braket{\phi|\psi}`.toParseLike`\mathinner{\langle{\phi|\psi}\rangle}`;
  3764 |     });
  3765 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3766}","  3764 |     });
  3765 |
> 3766 |     it(""should expand \\Bra as expected"", () => {
       |    ^ Unknown Test
  3767 |         expect`\Bra{\phi}`.toParseLike`\left\langle\phi\right|`;
  3768 |     });
  3769 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3770}","  3768 |     });
  3769 |
> 3770 |     it(""should expand \\Ket as expected"", () => {
       |    ^ Unknown Test
  3771 |         expect`\Ket{\psi}`.toParseLike`\left|\psi\right\rangle`;
  3772 |     });
  3773 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3774}","  3772 |     });
  3773 |
> 3774 |     it(""should expand \\Braket as expected"", () => {
       |    ^ Unknown Test
  3775 |         expect`\Braket{ ϕ | \frac{∂^2}{∂ t^2} | ψ }`.toParseLike`\left\langle ϕ\,\middle\vert\,\frac{∂^2}{∂ t^2}\,\middle\vert\, ψ\right\rangle`;
  3776 |     });
  3777 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3778}","  3776 |     });
  3777 |
> 3778 |     it(""should expand \\set as expected"", () => {
       |    ^ Unknown Test
  3779 |         expect`\set{x|x<5|S|}`.toParseLike`\{\,x\mid x<5|S|\,\}`;
  3780 |         // \set doesn't support special || or \| handling
  3781 |         expect`\set{x||x<5|S|}`.toParseLike`\{\,x\mid |x<5|S|\,\}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3785}","  3783 |     });
  3784 |
> 3785 |     it(""should expand \\Set as expected"", () => {
       |    ^ Unknown Test
  3786 |         expect`\Set{ x | x<\frac 1 2 |S| }`
  3787 |         .toParseLike`\left\{\: x\;\middle\vert\; x<\frac 1 2 |S| \:\right\}`;
  3788 |         expect`\Set{ x || x<\frac 1 2 |S| }`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3798}","  3796 |     const displayMode = new Settings({displayMode: true});
  3797 |
> 3798 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  3799 |         expect`\tag{hi}x+y`.not.toParse();
  3800 |     });
  3801 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3802}","  3800 |     });
  3801 |
> 3802 |     it(""should fail with multiple tags"", () => {
       |    ^ Unknown Test
  3803 |         expect`\tag{1}\tag{2}x+y`.not.toParse(displayMode);
  3804 |     });
  3805 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3806}","  3804 |     });
  3805 |
> 3806 |     it(""should fail with multiple tags in one row"", () => {
       |    ^ Unknown Test
  3807 |         expect`\begin{align}\tag{1}x+y\tag{2}\end{align}`.not.toParse(displayMode);
  3808 |     });
  3809 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3810}","  3808 |     });
  3809 |
> 3810 |     it(""should work with one tag per row"", () => {
       |    ^ Unknown Test
  3811 |         expect`\begin{align}\tag{1}x\\&+y\tag{2}\end{align}`.toParse(displayMode);
  3812 |     });
  3813 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3814}","  3812 |     });
  3813 |
> 3814 |     it(""should work with \\nonumber/\\notag"", () => {
       |    ^ Unknown Test
  3815 |         expect`\begin{align}\tag{1}\nonumber x\\&+y\notag\end{align}`
  3816 |         .toParseLike(r`\begin{align}\tag{1}x\\&+y\nonumber\end{align}`, displayMode);
  3817 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3819}","  3817 |     });
  3818 |
> 3819 |     it(""should build"", () => {
       |    ^ Unknown Test
  3820 |         expect`\tag{hi}x+y`.toBuild(displayMode);
  3821 |     });
  3822 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3823}","  3821 |     });
  3822 |
> 3823 |     it(""should ignore location of \\tag"", () => {
       |    ^ Unknown Test
  3824 |         expect`\tag{hi}x+y`.toParseLike(r`x+y\tag{hi}`, displayMode);
  3825 |     });
  3826 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3827}","  3825 |     });
  3826 |
> 3827 |     it(""should handle \\tag* like \\tag"", () => {
       |    ^ Unknown Test
  3828 |         expect`\tag{hi}x+y`.toParseLike(r`\tag*{({hi})}x+y`, displayMode);
  3829 |     });
  3830 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3856}","  3854 |
  3855 | describe(""\\@binrel automatic bin/rel/ord"", () => {
> 3856 |     it(""should generate proper class"", () => {
       |    ^ Unknown Test
  3857 |         expect`L\@binrel+xR`.toParseLike`L\mathbin xR`;
  3858 |         expect`L\@binrel=xR`.toParseLike`L\mathrel xR`;
  3859 |         expect`L\@binrel xxR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3865}","  3863 |     });
  3864 |
> 3865 |     it(""should base on just first character in group"", () => {
       |    ^ Unknown Test
  3866 |         expect`L\@binrel{+x}xR`.toParseLike`L\mathbin xR`;
  3867 |         expect`L\@binrel{=x}xR`.toParseLike`L\mathrel xR`;
  3868 |         expect`L\@binrel{xx}xR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3885}","  3883 |
  3884 | describe(""Unicode accents"", function() {
> 3885 |     it(""should parse Latin-1 letters in math mode"", function() {
       |    ^ Unknown Test
  3886 |         // TODO(edemaine): Unsupported Latin-1 letters in math: ÇÐÞçðþ
  3887 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ`
  3888 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3905}","  3903 |     });
  3904 |
> 3905 |     it(""should parse Latin-1 letters in text mode"", function() {
       |    ^ Unknown Test
  3906 |         // TODO(edemaine): Unsupported Latin-1 letters in text: ÇÐÞçðþ
  3907 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}`
  3908 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3925}","  3923 |     });
  3924 |
> 3925 |     it(""should support \\aa in text mode"", function() {
       |    ^ Unknown Test
  3926 |         expect`\text{\aa\AA}`.toParseLike(r`\text{\r a\r A}`, strictSettings);
  3927 |         expect`\aa`.not.toParse(strictSettings);
  3928 |         expect`\Aa`.not.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3936}","  3934 |     });
  3935 |
> 3936 |     it(""should parse multi-accented characters"", function() {
       |    ^ Unknown Test
  3937 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3938 |         // Doesn't parse quite the same as
  3939 |         // ""\\text{\\'{\\^a}\\'{\\=a}\\'{\\u a}}"" because of the ordgroups.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3942}","  3940 |     });
  3941 |
> 3942 |     it(""should parse accented i's and j's"", function() {
       |    ^ Unknown Test
  3943 |         expect`íȷ́`.toParseLike(r`\acute ı\acute ȷ`, nonstrictSettings);
  3944 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3945 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3949}","  3947 |
  3948 | describe(""Unicode"", function() {
> 3949 |     it(""should parse negated relations"", function() {
       |    ^ Unknown Test
  3950 |         expect`∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌`.toParse(strictSettings);
  3951 |     });
  3952 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3953}","  3951 |     });
  3952 |
> 3953 |     it(""should build relations"", function() {
       |    ^ Unknown Test
  3954 |         expect`∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌`.toBuild(strictSettings);
  3955 |     });
  3956 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3957}","  3955 |     });
  3956 |
> 3957 |     it(""should parse relations"", function() {
       |    ^ Unknown Test
  3958 |         // These characters are not in the KaTeX fonts. So they build with an error message.
  3959 |         expect`⊶⊷`.toParse();
  3960 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3962}","  3960 |     });
  3961 |
> 3962 |     it(""should build big operators"", function() {
       |    ^ Unknown Test
  3963 |         expect`∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆`.toBuild(strictSettings);
  3964 |     });
  3965 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3966}","  3964 |     });
  3965 |
> 3966 |     it(""should build more relations"", function() {
       |    ^ Unknown Test
  3967 |         expect`⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋`.toBuild(strictSettings);
  3968 |     });
  3969 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3980}","  3978 |     });
  3979 |
> 3980 |     it(""should build arrows"", function() {
       |    ^ Unknown Test
  3981 |         expect`←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉`.toBuild(strictSettings);
  3982 |     });
  3983 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3984}","  3982 |     });
  3983 |
> 3984 |     it(""should build more arrows"", function() {
       |    ^ Unknown Test
  3985 |         expect`⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼`.toBuild(strictSettings);
  3986 |     });
  3987 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4070}","  4068 |
  4069 | describe(""The maxExpand setting"", () => {
> 4070 |     it(""should prevent expansion"", () => {
       |    ^ Unknown Test
  4071 |         expect`\gdef\foo{1}\foo`.toParse();
  4072 |         expect`\gdef\foo{1}\foo`.toParse(new Settings({maxExpand: 1}));
  4073 |         expect`\gdef\foo{1}\foo`.not.toParse(new Settings({maxExpand: 0}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4076}","  4074 |     });
  4075 |
> 4076 |     it(""should prevent infinite loops"", () => {
       |    ^ Unknown Test
  4077 |         expect`\gdef\foo{\foo}\foo`.not.toParse(
  4078 |             new Settings({maxExpand: 10}));
  4079 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4081}","  4079 |     });
  4080 |
> 4081 |     it(""should prevent exponential blowup via \\edef"", () => {
       |    ^ Unknown Test
  4082 |         expect`\edef0{x}\edef0{00}\edef0{00}\edef0{00}\edef0{00}`.not.toParse(
  4083 |             new Settings({maxExpand: 10}));
  4084 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4132}","  4130 |
  4131 | describe(""Newlines via \\\\ and \\newline"", function() {
> 4132 |     it(""should build \\\\ without the optional argument and \\newline the same"", () => {
       |    ^ Unknown Test
  4133 |         expect`hello \\ world`.toBuildLike`hello \newline world`;
  4134 |     });
  4135 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4136}","  4134 |     });
  4135 |
> 4136 |     it(""should not allow \\newline to scan for an optional size argument"", () => {
       |    ^ Unknown Test
  4137 |         expect`hello \newline[w]orld`.toBuild();
  4138 |     });
  4139 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4140}","  4138 |     });
  4139 |
> 4140 |     it(""should not allow \\cr at top level"", () => {
       |    ^ Unknown Test
  4141 |         expect`hello \cr world`.not.toBuild();
  4142 |     });
  4143 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4155}","  4153 |
  4154 | describe(""Symbols"", function() {
> 4155 |     it(""should parse \\text{\\i\\j}"", () => {
       |    ^ Unknown Test
  4156 |         expect`\text{\i\j}`.toBuild(strictSettings);
  4157 |     });
  4158 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4159}","  4157 |     });
  4158 |
> 4159 |     it(""should parse spacing functions in math or text mode"", () => {
       |    ^ Unknown Test
  4160 |         expect`A\;B\,C\nobreakspace \text{A\;B\,C\nobreakspace}`.toBuild(strictSettings);
  4161 |     });
  4162 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4163}","  4161 |     });
  4162 |
> 4163 |     it(""should build \\minuso"", () => {
       |    ^ Unknown Test
  4164 |         expect`\\minuso`.toBuild(strictSettings);
  4165 |     });
  4166 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4167}","  4165 |     });
  4166 |
> 4167 |     it(""should render ligature commands like their unicode characters"", () => {
       |    ^ Unknown Test
  4168 |         expect`\text{\ae\AE\oe\OE\o\O\ss}`.toBuildLike(r`\text{æÆœŒøØß}`, strictSettings);
  4169 |     });
  4170 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4173}","  4171 |
  4172 | describe(""strict setting"", function() {
> 4173 |     it(""should allow unicode text when not strict"", () => {
       |    ^ Unknown Test
  4174 |         expect`é`.toParse(new Settings(nonstrictSettings));
  4175 |         expect`試`.toParse(new Settings(nonstrictSettings));
  4176 |         expect`é`.toParse(new Settings({strict: ""ignore""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4184}","  4182 |     });
  4183 |
> 4184 |     it(""should forbid unicode text when strict"", () => {
       |    ^ Unknown Test
  4185 |         expect`é`.not.toParse(new Settings({strict: true}));
  4186 |         expect`試`.not.toParse(new Settings({strict: true}));
  4187 |         expect`é`.not.toParse(new Settings({strict: ""error""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4195}","  4193 |     });
  4194 |
> 4195 |     it(""should warn about unicode text when default"", () => {
       |    ^ Unknown Test
  4196 |         expect`é`.toWarn(new Settings());
  4197 |         expect`試`.toWarn(new Settings());
  4198 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4200}","  4198 |     });
  4199 |
> 4200 |     it(""should always allow unicode text in text mode"", () => {
       |    ^ Unknown Test
  4201 |         expect`\text{é試}`.toParse(nonstrictSettings);
  4202 |         expect`\text{é試}`.toParse(strictSettings);
  4203 |         expect`\text{é試}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4206}","  4204 |     });
  4205 |
> 4206 |     it(""should warn about top-level \\newline in display mode"", () => {
       |    ^ Unknown Test
  4207 |         expect`x\\y`.toWarn(new Settings({displayMode: true}));
  4208 |         expect`x\\y`.toParse(new Settings({displayMode: false}));
  4209 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4255}","  4253 |         }).toThrow(errorMessage);
  4254 |     });
> 4255 |     it(""should add font metrics to metrics map and render successfully"", () => {
       |    ^ Unknown Test
  4256 |         const mockMetrics = {};
  4257 |         // mock font metrics for the symbols that we added previously
  4258 |         for (let number = 0; number <= 9; number++) {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4291}","  4289 |
  4290 | describe(""\\relax"", () => {
> 4291 |     it(""should stop the expansion"", () => {
       |    ^ Unknown Test
  4292 |         expect`\kern2\relax em`.not.toParse();
  4293 |     });
  4294 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4297}","  4295 |
  4296 | describe(""\\emph"", () => {
> 4297 |     it(""should toggle italics"", () => {
       |    ^ Unknown Test
  4298 |         expect`\emph{foo \emph{bar}}`.toBuildLike`\textit{foo \textup{bar}}`;
  4299 |     });
  4300 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4301}","  4299 |     });
  4300 |
> 4301 |     it(""should toggle italics within text"", () => {
       |    ^ Unknown Test
  4302 |         expect`\text{\emph{foo \emph{bar}}}`.toBuildLike`\text{\textit{foo \textup{bar}}}`;
  4303 |     });
  4304 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4305}","  4303 |     });
  4304 |
> 4305 |     it(""should toggle italics within textup"", () => {
       |    ^ Unknown Test
  4306 |         expect`\textup{\emph{foo \emph{bar}}}`.toBuildLike`\textup{\textit{foo \textup{bar}}}`;
  4307 |     });
  4308 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4309}","  4307 |     });
  4308 |
> 4309 |     it(""should toggle italics within textit"", () => {
       |    ^ Unknown Test
  4310 |         expect`\textit{\emph{foo \emph{bar}}}`.toBuildLike`\textit{\textup{foo \textit{bar}}}`;
  4311 |     });
  4312 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 132}","  130 |         });
  131 |         it(""complains about mismatched \\verb with end of line"", function() {
> 132 |             expect(""\\verb|hello\nworld|"").toFailWithParseError(
      |            ^ Redundant Assertion
  133 |                 ""\\verb ended by end of line instead of matching delimiter"");
  134 |         });
  135 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 291}","  289 |     describe(""#_innerLex"", function() {
  290 |         it(""rejects lone surrogate char"", function() {
> 291 |             expect(""\udcba "").toFailWithParseError(
      |            ^ Redundant Assertion
  292 |                    ""Unexpected character: '\udcba' at position 1:"" +
  293 |                     "" \udcba\u0332 "");
  294 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 296}","  294 |         });
  295 |         it(""rejects lone backslash at end of input"", function() {
> 296 |             expect(""\\"").toFailWithParseError(
      |            ^ Redundant Assertion
  297 |                    ""Unexpected character: '\\' at position 1: \\̲"");
  298 |         });
  299 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 8, 'line': 328}","  326 | describe(""Unicode accents"", function() {
  327 |     it(""should return error for invalid combining characters"", function() {
> 328 |         expect(""A\u0328"").toFailWithParseError(
      |        ^ Redundant Assertion
  329 |             ""Unknown accent ' ̨' at position 1: Ą̲̲"");
  330 |     });
  331 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 6}","  4 |
  5 |     describe(""#handleInfixNodes"", function() {
> 6 |         it(""rejects repeated infix operators"", function() {
    |        ^ Unknown Test
  7 |             expect`1\over 2\over 3`.toFailWithParseError(
  8 |                    ""only one infix operator per group at position 9: "" +
  9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 11}","   9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");
  10 |         });
> 11 |         it(""rejects conflicting infix operators"", function() {
     |        ^ Unknown Test
  12 |             expect`1\over 2\choose 3`.toFailWithParseError(
  13 |                    ""only one infix operator per group at position 9: "" +
  14 |                    ""1\\over 2\\̲c̲h̲o̲o̲s̲e̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 19}","  17 |
  18 |     describe(""#handleSupSubscript"", function() {
> 19 |         it(""rejects ^ at end of group"", function() {
     |        ^ Unknown Test
  20 |             expect`{1^}`.toFailWithParseError(
  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 23}","  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });
> 23 |         it(""rejects _ at end of input"", function() {
     |        ^ Unknown Test
  24 |             expect`1_`.toFailWithParseError(
  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 27}","  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });
> 27 |         it(""rejects \\sqrt as argument to ^"", function() {
     |        ^ Unknown Test
  28 |             expect`1^\sqrt{2}`.toFailWithParseError(
  29 |                    ""Got function '\\sqrt' with no arguments as superscript"" +
  30 |                    "" at position 3: 1^\\̲s̲q̲r̲t̲{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 35}","  33 |
  34 |     describe(""#parseAtom"", function() {
> 35 |         it(""rejects \\limits without operator"", function() {
     |        ^ Unknown Test
  36 |             expect`\alpha\limits\omega`.toFailWithParseError(
  37 |                    ""Limit controls must follow a math operator"" +
  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 40}","  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");
  39 |         });
> 40 |         it(""rejects \\limits at the beginning of the input"", function() {
     |        ^ Unknown Test
  41 |             expect`\limits\omega`.toFailWithParseError(
  42 |                    ""Limit controls must follow a math operator"" +
  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 45}","  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");
  44 |         });
> 45 |         it(""rejects double superscripts"", function() {
     |        ^ Unknown Test
  46 |             expect`1^2^3`.toFailWithParseError(
  47 |                    ""Double superscript at position 4: 1^2^̲3"");
  48 |             expect`1^{2+3}_4^5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 51}","  49 |                    ""Double superscript at position 10: 1^{2+3}_4^̲5"");
  50 |         });
> 51 |         it(""rejects double superscripts involving primes"", function() {
     |        ^ Unknown Test
  52 |             expect`1'_2^3`.toFailWithParseError(
  53 |                    ""Double superscript at position 5: 1'_2^̲3"");
  54 |             expect`1^2'`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 61}","  59 |                    ""Double superscript at position 5: 1'_2'̲"");
  60 |         });
> 61 |         it(""rejects double subscripts"", function() {
     |        ^ Unknown Test
  62 |             expect`1_2_3`.toFailWithParseError(
  63 |                    ""Double subscript at position 4: 1_2_̲3"");
  64 |             expect`1_{2+3}^4_5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 70}","  68 |
  69 |     describe(""#parseImplicitGroup"", function() {
> 70 |         it(""reports unknown environments"", function() {
     |        ^ Unknown Test
  71 |             expect`\begin{foo}bar\end{foo}`.toFailWithParseError(
  72 |                    ""No such environment: foo at position 7:"" +
  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 75}","  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");
  74 |         });
> 75 |         it(""reports mismatched environments"", function() {
     |        ^ Unknown Test
  76 |             expect`\begin{pmatrix}1&2\\3&4\end{bmatrix}+5`
  77 |                 .toFailWithParseError(
  78 |                    ""Mismatch: \\begin{pmatrix} matched by \\end{bmatrix}"" +",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 84}","  82 |
  83 |     describe(""#parseFunction"", function() {
> 84 |         it(""rejects math-mode functions in text mode"", function() {
     |        ^ Unknown Test
  85 |             expect`\text{\sqrt2 is irrational}`.toFailWithParseError(
  86 |                 ""Can't use function '\\sqrt' in text mode"" +
  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 89}","  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");
  88 |         });
> 89 |         it(""rejects text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  90 |             expect`$`.toFailWithParseError(
  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 93}","  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });
> 93 |         it(""rejects strict-mode text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  94 |             expect`\'echec`.toFailWithParseError(""LaTeX-incompatible input "" +
  95 |                 ""and strict mode is set to 'error': LaTeX's accent \\' works "" +
  96 |                 ""only in text mode [mathVsTextAccents]"", strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 101}","   99 |
  100 |     describe(""#parseArguments"", function() {
> 101 |         it(""complains about missing argument at end of input"", function() {
      |        ^ Unknown Test
  102 |             expect`2\sqrt`.toFailWithParseError(
  103 |                    ""Expected group as argument to '\\sqrt'"" +
  104 |                    "" at end of input: 2\\sqrt"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 106}","  104 |                    "" at end of input: 2\\sqrt"");
  105 |         });
> 106 |         it(""complains about missing argument at end of group"", function() {
      |        ^ Unknown Test
  107 |             expect`1^{2\sqrt}`.toFailWithParseError(
  108 |                    ""Expected group as argument to '\\sqrt'"" +
  109 |                    "" at position 10: 1^{2\\sqrt}̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 111}","  109 |                    "" at position 10: 1^{2\\sqrt}̲"");
  110 |         });
> 111 |         it(""complains about functions as arguments to others"", function() {
      |        ^ Unknown Test
  112 |             expect`\sqrt\over2`.toFailWithParseError(
  113 |                    ""Got function '\\over' with no arguments as argument to"" +
  114 |                    "" '\\sqrt' at position 6: \\sqrt\\̲o̲v̲e̲r̲2"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 119}","  117 |
  118 |     describe(""#parseGroup"", function() {
> 119 |         it(""complains about undefined control sequence"", function() {
      |        ^ Unknown Test
  120 |             expect`\xyz`.toFailWithParseError(
  121 |                    ""Undefined control sequence: \\xyz"" +
  122 |                    "" at position 1: \\̲x̲y̲z̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 127}","  125 |
  126 |     describe(""#verb"", function() {
> 127 |         it(""complains about mismatched \\verb with end of string"", function() {
      |        ^ Unknown Test
  128 |             expect`\verb|hello`.toFailWithParseError(
  129 |                 ""\\verb ended by end of line instead of matching delimiter"");
  130 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 142}","  140 |
  141 |     describe(""#parseInput expecting EOF"", function() {
> 142 |         it(""complains about extra }"", function() {
      |        ^ Unknown Test
  143 |             expect`{1+2}}`.toFailWithParseError(
  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 146}","  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });
> 146 |         it(""complains about extra \\end"", function() {
      |        ^ Unknown Test
  147 |             expect`x\end{matrix}`.toFailWithParseError(
  148 |                    ""Expected 'EOF', got '\\end' at position 2:"" +
  149 |                    "" x\\̲e̲n̲d̲{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 151}","  149 |                    "" x\\̲e̲n̲d̲{matrix}"");
  150 |         });
> 151 |         it(""complains about top-level &"", function() {
      |        ^ Unknown Test
  152 |             expect`1&2`.toFailWithParseError(
  153 |                    ""Expected 'EOF', got '&' at position 2: 1&̲2"");
  154 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 158}","  156 |
  157 |     describe(""#parseImplicitGroup expecting \\right"", function() {
> 158 |         it(""rejects missing \\right"", function() {
      |        ^ Unknown Test
  159 |             expect`\left(1+2)`.toFailWithParseError(
  160 |                    ""Expected '\\right', got 'EOF' at end of input:"" +
  161 |                    "" \\left(1+2)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 163}","  161 |                    "" \\left(1+2)"");
  162 |         });
> 163 |         it(""rejects incorrectly scoped \\right"", function() {
      |        ^ Unknown Test
  164 |             expect`{\left(1+2}\right)`.toFailWithParseError(
  165 |                    ""Expected '\\right', got '}' at position 11:"" +
  166 |                    "" {\\left(1+2}̲\\right)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 174}","  172 |
  173 |     describe(""#parseSpecialGroup expecting braces"", function() {
> 174 |         it(""complains about missing { for color"", function() {
      |        ^ Unknown Test
  175 |             expect`\textcolor#ffffff{text}`.toFailWithParseError(
  176 |                    ""Invalid color: '#' at position 11:"" +
  177 |                    "" \\textcolor#̲ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 179}","  177 |                    "" \\textcolor#̲ffffff{text}"");
  178 |         });
> 179 |         it(""complains about missing { for size"", function() {
      |        ^ Unknown Test
  180 |             expect`\rule{1em}[2em]`.toFailWithParseError(
  181 |                    ""Invalid size: '[' at position 11: \\rule{1em}[̲2em]"");
  182 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 184}","  182 |         });
  183 |         // Can't test for the [ of an optional group since it's optional
> 184 |         it(""complains about missing } for color"", function() {
      |        ^ Unknown Test
  185 |             expect`\textcolor{#ffffff{text}`.toFailWithParseError(
  186 |                    ""Unexpected end of input in a macro argument,"" +
  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 189}","  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");
  188 |         });
> 189 |         it(""complains about missing ] for size"", function() {
      |        ^ Unknown Test
  190 |             expect`\rule[1em{2em}{3em}`.toFailWithParseError(
  191 |                    ""Unexpected end of input in a macro argument,"" +
  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 194}","  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");
  193 |         });
> 194 |         it(""complains about missing ] for size at end of input"", function() {
      |        ^ Unknown Test
  195 |             expect`\rule[1em`.toFailWithParseError(
  196 |                    ""Unexpected end of input in a macro argument,"" +
  197 |                    "" expected ']' at end of input: \\rule[1em"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 199}","  197 |                    "" expected ']' at end of input: \\rule[1em"");
  198 |         });
> 199 |         it(""complains about missing } for color at end of input"", function() {
      |        ^ Unknown Test
  200 |             expect`\textcolor{#123456`.toFailWithParseError(
  201 |                    ""Unexpected end of input in a macro argument,"" +
  202 |                    "" expected '}' at end of input: …xtcolor{#123456"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 207}","  205 |
  206 |     describe(""#parseGroup expecting }"", function() {
> 207 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  208 |             expect`\sqrt{2`.toFailWithParseError(
  209 |                    ""Expected '}', got 'EOF' at end of input: \\sqrt{2"");
  210 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 214}","  212 |
  213 |     describe(""#parseOptionalGroup expecting ]"", function() {
> 214 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  215 |             expect`\sqrt[3`.toFailWithParseError(
  216 |                    ""Unexpected end of input in a macro argument,"" +
  217 |                    "" expected ']' at end of input: \\sqrt[3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 219}","  217 |                    "" expected ']' at end of input: \\sqrt[3"");
  218 |         });
> 219 |         it(""before group"", function() {
      |        ^ Unknown Test
  220 |             expect`\sqrt[3{2}`.toFailWithParseError(
  221 |                    ""Unexpected end of input in a macro argument,"" +
  222 |                    "" expected ']' at end of input: \\sqrt[3{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 231}","  229 |
  230 |     describe(""parseArray"", function() {
> 231 |         it(""rejects missing \\end"", function() {
      |        ^ Unknown Test
  232 |             expect`\begin{matrix}1`.toFailWithParseError(
  233 |                    ""Expected & or \\\\ or \\cr or \\end at end of input:"" +
  234 |                    "" \\begin{matrix}1"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 236}","  234 |                    "" \\begin{matrix}1"");
  235 |         });
> 236 |         it(""rejects incorrectly scoped \\end"", function() {
      |        ^ Unknown Test
  237 |             expect`{\begin{matrix}1}\end{matrix}`.toFailWithParseError(
  238 |                    ""Expected & or \\\\ or \\cr or \\end at position 17:"" +
  239 |                    "" …\\begin{matrix}1}̲\\end{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 244}","  242 |
  243 |     describe(""array environment"", function() {
> 244 |         it(""rejects unknown column types"", function() {
      |        ^ Unknown Test
  245 |             expect`\begin{array}{cba}\end{array}`.toFailWithParseError(
  246 |                    ""Unknown column alignment: b at position 16:"" +
  247 |                    "" \\begin{array}{cb̲a}\\end{array}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 256}","  254 |
  255 |     describe(""delimiter functions"", function() {
> 256 |         it(""reject invalid opening delimiters"", function() {
      |        ^ Unknown Test
  257 |             expect`\bigl 1 + 2 \bigr`.toFailWithParseError(
  258 |                    ""Invalid delimiter '1' after '\\bigl' at position 7:"" +
  259 |                    "" \\bigl 1̲ + 2 \\bigr"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 261}","  259 |                    "" \\bigl 1̲ + 2 \\bigr"");
  260 |         });
> 261 |         it(""reject invalid closing delimiters"", function() {
      |        ^ Unknown Test
  262 |             expect`\bigl(1+2\bigr=3`.toFailWithParseError(
  263 |                    ""Invalid delimiter '=' after '\\bigr' at position 15:"" +
  264 |                    "" \\bigl(1+2\\bigr=̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 266}","  264 |                    "" \\bigl(1+2\\bigr=̲3"");
  265 |         });
> 266 |         it(""reject group opening delimiters"", function() {
      |        ^ Unknown Test
  267 |             expect`\bigl{(}1+2\bigr)3`.toFailWithParseError(
  268 |                    ""Invalid delimiter type 'ordgroup' at position 6:"" +
  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 271}","  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");
  270 |         });
> 271 |         it(""reject group closing delimiters"", function() {
      |        ^ Unknown Test
  272 |             expect`\bigl(1+2\bigr{)}3`.toFailWithParseError(
  273 |                    ""Invalid delimiter type 'ordgroup' at position 15:"" +
  274 |                    "" \\bigl(1+2\\bigr{̲)̲}̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 279}","  277 |
  278 |     describe(""\\begin and \\end"", function() {
> 279 |         it(""reject invalid environment names"", function() {
      |        ^ Unknown Test
  280 |             expect`\begin x\end y`.toFailWithParseError(
  281 |                    ""No such environment: x at position 8: \\begin x̲\\end y"");
  282 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 302}","  300 |
  301 |     describe(""#_innerLexColor"", function() {
> 302 |         it(""reject 3-digit hex notation without #"", function() {
      |        ^ Unknown Test
  303 |             expect`\textcolor{1a2}{foo}`.toFailWithParseError(
  304 |                    ""Invalid color: '1a2'"" +
  305 |                    "" at position 11: \\textcolor{̲1̲a̲2̲}̲{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 310}","  308 |
  309 |     describe(""#_innerLexSize"", function() {
> 310 |         it(""reject size without unit"", function() {
      |        ^ Unknown Test
  311 |             expect`\rule{0}{2em}`.toFailWithParseError(
  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 314}","  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });
> 314 |         it(""reject size with bogus unit"", function() {
      |        ^ Unknown Test
  315 |             expect`\rule{1au}{2em}`.toFailWithParseError(
  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 318}","  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });
> 318 |         it(""reject size without number"", function() {
      |        ^ Unknown Test
  319 |             expect`\rule{em}{2em}`.toFailWithParseError(
  320 |                    ""Invalid size: 'em' at position 6: \\rule{̲e̲m̲}̲{2em}"");
  321 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 5, 'column': 4, 'index': 124}","  3 |
  4 | describe(""Symbols and macros"", () => {
> 5 |     for (const macro in macros) {
    |    ^ Conditional Test Logic
  6 |         if (!macros.hasOwnProperty(macro)) {
  7 |             continue;
  8 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 6, 'column': 8, 'index': 162}","  4 | describe(""Symbols and macros"", () => {
  5 |     for (const macro in macros) {
> 6 |         if (!macros.hasOwnProperty(macro)) {
    |        ^ Conditional Test Logic
  7 |             continue;
  8 |         }
  9 |         it(`macro ${macro} should not shadow a symbol`, () => {",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 10, 'column': 12, 'index': 307}","   8 |         }
   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
> 10 |             for (const kind in symbols) {
     |            ^ Conditional Test Logic
  11 |                 if (!symbols.hasOwnProperty(kind)) {
  12 |                     continue;
  13 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 11, 'column': 16, 'index': 353}","   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
  10 |             for (const kind in symbols) {
> 11 |                 if (!symbols.hasOwnProperty(kind)) {
     |                ^ Conditional Test Logic
  12 |                     continue;
  13 |                 }
  14 |                 expect(symbols[kind][macro]).toBeFalsy();",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 18, 'column': 12, 'index': 481}","  16 |                   splitAtDelimiters(actual, delimiters);
  17 |
> 18 |             if (split.length !== result.length) {
     |            ^ Conditional Test Logic
  19 |                 message.pass = false;
  20 |                 message.message = () => ""Different number of splits: "" +
  21 |                     split.length + "" vs. "" + result.length + "" ("" +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 27, 'column': 12, 'index': 861}","  25 |             }
  26 |
> 27 |             for (let i = 0; i < split.length; i++) {
     |            ^ Conditional Test Logic
  28 |                 const real = split[i];
  29 |                 const correct = result[i];
  30 |",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 34, 'column': 16, 'index': 1061}","  32 |                 let diff;
  33 |
> 34 |                 if (real.type !== correct.type) {
     |                ^ Conditional Test Logic
  35 |                     good = false;
  36 |                     diff = ""type"";
  37 |                 } else if (real.data !== correct.data) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 37, 'column': 23, 'index': 1187}","  35 |                     good = false;
  36 |                     diff = ""type"";
> 37 |                 } else if (real.data !== correct.data) {
     |                       ^ Conditional Test Logic
  38 |                     good = false;
  39 |                     diff = ""data"";
  40 |                 } else if (real.display !== correct.display) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 40, 'column': 23, 'index': 1313}","  38 |                     good = false;
  39 |                     diff = ""data"";
> 40 |                 } else if (real.display !== correct.display) {
     |                       ^ Conditional Test Logic
  41 |                     good = false;
  42 |                     diff = ""display"";
  43 |                 }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 45, 'column': 16, 'index': 1460}","  43 |                 }
  44 |
> 45 |                 if (!good) {
     |                ^ Conditional Test Logic
  46 |                     message.pass = false;
  47 |                     message.message = () => ""Difference at split "" +
  48 |                         (i + 1) + "": "" + JSON.stringify(real) +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 332, 'column': 8, 'index': 11671}","  330 |             '\\]'];
  331 |         const el = document.createElement('div');
> 332 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  333 |             const txt = document.createTextNode(textNodes[i]);
  334 |             el.appendChild(txt);
  335 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 350, 'column': 8, 'index': 12420}","  348 |             'consectetur adipiscing elit'];
  349 |         const el = document.createElement('div');
> 350 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  351 |             const txt = document.createTextNode(textNodes[i]);
  352 |             el.appendChild(txt);
  353 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 355, 'column': 8, 'index': 12630}","  353 |         }
  354 |         const el2 = document.createElement('div');
> 355 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  356 |             const txt = document.createTextNode(textNodes[i]);
  357 |             el2.appendChild(txt);
  358 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 62}","  60 | describe(""A delimiter splitter"", function() {
  61 |     it(""doesn't split when there are no delimiters"", function() {
> 62 |         expect(""hello"").toSplitInto(
     |        ^ Redundant Assertion
  63 |             [
  64 |                 {type: ""text"", data: ""hello""},
  65 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 72}","  70 |
  71 |     it(""doesn't create a math node with only one left delimiter"", function() {
> 72 |         expect(""hello ( world"").toSplitInto(
     |        ^ Redundant Assertion
  73 |             [
  74 |                 {type: ""text"", data: ""hello ""},
  75 |                 {type: ""text"", data: ""( world""},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 83}","  81 |
  82 |     it(""doesn't split when there's only a right delimiter"", function() {
> 83 |         expect(""hello ) world"").toSplitInto(
     |        ^ Redundant Assertion
  84 |             [
  85 |                 {type: ""text"", data: ""hello ) world""},
  86 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 93}","  91 |
  92 |     it(""splits when there are both delimiters"", function() {
> 93 |         expect(""hello ( world ) boo"").toSplitInto(
     |        ^ Redundant Assertion
  94 |             [
  95 |                 {type: ""text"", data: ""hello ""},
  96 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 106}","  104 |
  105 |     it(""splits on multi-character delimiters"", function() {
> 106 |         expect(""hello [[ world ]] boo"").toSplitInto(
      |        ^ Redundant Assertion
  107 |             [
  108 |                 {type: ""text"", data: ""hello ""},
  109 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 116}","  114 |                 {left: ""[["", right: ""]]"", display: false},
  115 |             ]);
> 116 |         expect(""hello \\begin{equation} world \\end{equation} boo"").toSplitInto(
      |        ^ Redundant Assertion
  117 |             [
  118 |                 {type: ""text"", data: ""hello ""},
  119 |                 {type: ""math"", data: ""\\begin{equation} world \\end{equation}"",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 131}","  129 |
  130 |     it(""splits multiple times"", function() {
> 131 |         expect(""hello ( world ) boo ( more ) stuff"").toSplitInto(
      |        ^ Redundant Assertion
  132 |             [
  133 |                 {type: ""text"", data: ""hello ""},
  134 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 147}","  145 |
  146 |     it(""leaves the ending when there's only a left delimiter"", function() {
> 147 |         expect(""hello ( world ) boo ( left"").toSplitInto(
      |        ^ Redundant Assertion
  148 |             [
  149 |                 {type: ""text"", data: ""hello ""},
  150 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 161}","  159 |
  160 |     it(""doesn't split when close delimiters are in {}s"", function() {
> 161 |         expect(""hello ( world { ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  162 |             [
  163 |                 {type: ""text"", data: ""hello ""},
  164 |                 {type: ""math"", data: "" world { ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 172}","  170 |             ]);
  171 |
> 172 |         expect(""hello ( world { { } ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  173 |             [
  174 |                 {type: ""text"", data: ""hello ""},
  175 |                 {type: ""math"", data: "" world { { } ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 185}","  183 |
  184 |     it(""correctly processes sequences of $..$"", function() {
> 185 |         expect(""$hello$$world$$boo$"").toSplitInto(
      |        ^ Redundant Assertion
  186 |             [
  187 |                 {type: ""math"", data: ""hello"",
  188 |                     rawData: ""$hello$"", display: false},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 200}","  198 |
  199 |     it(""doesn't split at escaped delimiters"", function() {
> 200 |         expect(""hello ( world \\) ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  201 |             [
  202 |                 {type: ""text"", data: ""hello ""},
  203 |                 {type: ""math"", data: "" world \\) "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 224}","  222 |
  223 |     it(""splits when the right and left delimiters are the same"", function() {
> 224 |         expect(""hello $ world $ boo"").toSplitInto(
      |        ^ Redundant Assertion
  225 |             [
  226 |                 {type: ""text"", data: ""hello ""},
  227 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 237}","  235 |
  236 |     it(""ignores \\$"", function() {
> 237 |         expect(""$x = \\$5$"").toSplitInto(
      |        ^ Redundant Assertion
  238 |             [
  239 |                 {type: ""math"", data: ""x = \\$5"",
  240 |                     rawData: ""$x = \\$5$"", display: false},",,
test/unicode-spec.js,ConditionalTestLogic,"[{""startLine"":157,""endLine"":160}]",,25.0,2.0
test/unicode-spec.js,SubOptimalAssert,"[{""startLine"":163,""endLine"":163}]",,25.0,2.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1313,""endLine"":1317}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1396,""endLine"":1398}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2817,""endLine"":2819}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2834,""endLine"":2836}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2851,""endLine"":2854}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3122,""endLine"":3125}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3819,""endLine"":3821}]",,556.0,117.0
test/katex-spec.js,OvercommentedTest,"[{""startLine"":4009,""endLine"":4044}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":62,""endLine"":64}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":81,""endLine"":84}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":105,""endLine"":108}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":120,""endLine"":122}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":138,""endLine"":140}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":156,""endLine"":158}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":172,""endLine"":174}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":294,""endLine"":299}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":338,""endLine"":340}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":355,""endLine"":357}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":382,""endLine"":385}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":487,""endLine"":489}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":561,""endLine"":566}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":568,""endLine"":598}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":664,""endLine"":673}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":677,""endLine"":683}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":689,""endLine"":691}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":713,""endLine"":715}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":825,""endLine"":835}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":849,""endLine"":851}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":987,""endLine"":989}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1035,""endLine"":1038}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1094,""endLine"":1104}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1106,""endLine"":1109}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1111,""endLine"":1114}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1132,""endLine"":1146}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1164,""endLine"":1167}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1169,""endLine"":1172}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1174,""endLine"":1177}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1193,""endLine"":1195}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1305,""endLine"":1307}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1540,""endLine"":1553}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1557,""endLine"":1562}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1688,""endLine"":1695}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2072,""endLine"":2089}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2110,""endLine"":2112}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2145,""endLine"":2147}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2256,""endLine"":2262}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2287,""endLine"":2292}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2294,""endLine"":2300}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2304,""endLine"":2310}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2312,""endLine"":2318}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2322,""endLine"":2327}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2329,""endLine"":2335}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2348,""endLine"":2353}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2361,""endLine"":2365}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2369,""endLine"":2374}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2376,""endLine"":2383}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2387,""endLine"":2393}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2401,""endLine"":2405}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2409,""endLine"":2415}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2428,""endLine"":2435}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2443,""endLine"":2447}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2451,""endLine"":2456}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2458,""endLine"":2465}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2469,""endLine"":2474}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2484,""endLine"":2489}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2491,""endLine"":2497}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2524,""endLine"":2527}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2531,""endLine"":2535}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2537,""endLine"":2539}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2543,""endLine"":2547}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2549,""endLine"":2552}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2554,""endLine"":2558}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2560,""endLine"":2563}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2567,""endLine"":2571}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2573,""endLine"":2575}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2579,""endLine"":2584}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2586,""endLine"":2590}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2592,""endLine"":2596}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2600,""endLine"":2609}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2611,""endLine"":2617}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2630,""endLine"":2635}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2639,""endLine"":2641}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2642,""endLine"":2644}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2648,""endLine"":2657}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2668,""endLine"":2679}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2697,""endLine"":2712}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2722,""endLine"":2732}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2746,""endLine"":2752}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2834,""endLine"":2836}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2851,""endLine"":2854}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2860,""endLine"":2862}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2955,""endLine"":2962}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2966,""endLine"":2969}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3411,""endLine"":3414}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3495,""endLine"":3498}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3798,""endLine"":3800}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3819,""endLine"":3821}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":94,""endLine"":99}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1758,""endLine"":1760}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1893,""endLine"":1894}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3166,""endLine"":3166}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3181,""endLine"":3181}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3976,""endLine"":3977}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":507,""endLine"":533}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":568,""endLine"":598}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":1604,""endLine"":1628}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3077,""endLine"":3092}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3500,""endLine"":3516}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":4009,""endLine"":4044}]",,556.0,117.0
test/errors-spec.js,AnonymousTest,"[{""startLine"":219,""endLine"":223}]",,50.0,26.0
test/errors-spec.js,IdenticalTestDescription,"[{""startLine"":214,""endLine"":218}]",,50.0,26.0
