file,type,smells,frame,itCount,describeCount
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 20, 'column': 8, 'index': 1016}","  18 |     it(""should not parse Latin-1 outside \\text{} with strict"", function() {
  19 |         const chars = 'ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ';
> 20 |         for (const ch of chars) {
     |        ^ Conditional Test Logic
  21 |             expect(ch).not.toParse(strictSettings);
  22 |         }
  23 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 144, 'column': 8, 'index': 5144}","  142 |
  143 |     it(""supportedCodepoint() should return the correct values"", () => {
> 144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |        ^ Conditional Test Logic
  145 |             expect(supportedCodepoint(codepoint)).toBe(
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 152, 'column': 15, 'index': 5441}","  150 |
  151 |     it(""scriptFromCodepoint() should return correct values"", () => {
> 152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |               ^ Conditional Test Logic
  153 |             const character = String.fromCharCode(codepoint);
  154 |             const script = scriptFromCodepoint(codepoint);
  155 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 156, 'column': 12, 'index': 5635}","  154 |             const script = scriptFromCodepoint(codepoint);
  155 |
> 156 |             for (const scriptName of scriptNames) {
      |            ^ Conditional Test Logic
  157 |                 if (scriptRegExps[scriptName].test(character)) {
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 157, 'column': 16, 'index': 5691}","  155 |
  156 |             for (const scriptName of scriptNames) {
> 157 |                 if (scriptRegExps[scriptName].test(character)) {
      |                ^ Conditional Test Logic
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;
  160 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 158, 'column': 20, 'index': 5760}","  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {
> 158 |                     expect(script).toEqual(scriptName);
      |                    ^ Duplicate Assert
  159 |                     continue outer;
  160 |                 }
  161 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 163, 'column': 12, 'index': 5877}","  161 |             }
  162 |
> 163 |             expect(script).toBe(null);
      |            ^ Duplicate Assert
  164 |             expect(supportedCodepoint(codepoint)).toBe(false);
  165 |         }
  166 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 154, 'column': 27, 'index': 5590}","  152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
  153 |             const character = String.fromCharCode(codepoint);
> 154 |             const script = scriptFromCodepoint(codepoint);
      |                           ^ Eager Test
  155 |
  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Eager Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 145, 'column': 19, 'index': 5223}","  143 |     it(""supportedCodepoint() should return the correct values"", () => {
  144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
> 145 |             expect(supportedCodepoint(codepoint)).toBe(
      |                   ^ Lazy Test
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );
  148 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Lazy Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 7}","   5 |
   6 | describe(""unicode"", function() {
>  7 |     it(""should build Latin-1 inside \\text{}"", function() {
     |    ^ Unknown Test
   8 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}`
   9 |             .toBuild();
  10 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 12}","  10 |     });
  11 |
> 12 |     it(""should build Latin-1 inside \\text{} like accent commands"", function() {
     |    ^ Unknown Test
  13 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}`
  14 |             .toParseLike`\text{\`A\'A\^A\~A\""A\r A\`E\'E\^E\""E\`I\'I\^I\""I\~N\`O\'O\^O\~O\""O\`U\'U\^U\""U\'Y\`a\'a\^a\~a\""a\r a\`e\'e\^e\""e\`ı\'ı\^ı\""ı\~n\`o\'o\^o\~o\""o\`u\'u\^u\""u\'y\""y\c C\c c}`;
  15 |         // TODO(edemaine): A few characters don't have analogs yet.",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 25}","  23 |     });
  24 |
> 25 |     it(""should build Latin-1 outside \\text{}"", function() {
     |    ^ Unknown Test
  26 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ`
  27 |             .toBuild(nonstrictSettings);
  28 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 30}","  28 |     });
  29 |
> 30 |     it(""should build all lower case Greek letters"", function() {
     |    ^ Unknown Test
  31 |         expect`αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω`.toBuild();
  32 |     });
  33 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 34}","  32 |     });
  33 |
> 34 |     it(""should build math upper case Greek letters"", function() {
     |    ^ Unknown Test
  35 |         expect`ΓΔΘΛΞΠΣΥΦΨΩ`.toBuild();
  36 |     });
  37 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 38}","  36 |     });
  37 |
> 38 |     it(""should build Cyrillic inside \\text{}"", function() {
     |    ^ Unknown Test
  39 |         expect`\text{БГДЖЗЙЛФЦШЫЮЯ}`.toBuild();
  40 |     });
  41 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 42}","  40 |     });
  41 |
> 42 |     it(""should build Cyrillic outside \\text{}"", function() {
     |    ^ Unknown Test
  43 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.toBuild(nonstrictSettings);
  44 |     });
  45 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 46}","  44 |     });
  45 |
> 46 |     it(""should not parse Cyrillic outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  47 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.not.toParse(strictSettings);
  48 |     });
  49 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 50}","  48 |     });
  49 |
> 50 |     it(""should build CJK inside \\text{}"", function() {
     |    ^ Unknown Test
  51 |         expect`\text{私はバナナです}`.toBuild();
  52 |         expect`\text{여보세요}`.toBuild();
  53 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 55}","  53 |     });
  54 |
> 55 |     it(""should build CJK outside \\text{}"", function() {
     |    ^ Unknown Test
  56 |         expect`私はバナナです`.toBuild(nonstrictSettings);
  57 |         expect`여보세요`.toBuild(nonstrictSettings);
  58 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 60}","  58 |     });
  59 |
> 60 |     it(""should not parse CJK outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  61 |         expect`私はバナナです。`.not.toParse(strictSettings);
  62 |         expect`여보세요`.not.toParse(strictSettings);
  63 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 65}","  63 |     });
  64 |
> 65 |     it(""should build Devanagari inside \\text{}"", function() {
     |    ^ Unknown Test
  66 |         expect`\text{नमस्ते}`.toBuild();
  67 |     });
  68 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 69}","  67 |     });
  68 |
> 69 |     it(""should build Devanagari outside \\text{}"", function() {
     |    ^ Unknown Test
  70 |         expect`नमस्ते`.toBuild(nonstrictSettings);
  71 |     });
  72 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 73}","  71 |     });
  72 |
> 73 |     it(""should not parse Devanagari outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  74 |         expect`नमस्ते`.not.toParse(strictSettings);
  75 |     });
  76 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 77}","  75 |     });
  76 |
> 77 |     it(""should build Georgian inside \\text{}"", function() {
     |    ^ Unknown Test
  78 |         expect`\text{გამარჯობა}`.toBuild();
  79 |     });
  80 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 81}","  79 |     });
  80 |
> 81 |     it(""should build Georgian outside \\text{}"", function() {
     |    ^ Unknown Test
  82 |         expect`გამარჯობა`.toBuild(nonstrictSettings);
  83 |     });
  84 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 85}","  83 |     });
  84 |
> 85 |     it(""should not parse Georgian outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  86 |         expect`გამარჯობა`.not.toParse(strictSettings);
  87 |     });
  88 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 89}","  87 |     });
  88 |
> 89 |     it(""should build Armenian both inside and outside \\text{}"", function() {
     |    ^ Unknown Test
  90 |         expect`ԱԲԳաբգ`.toBuild(nonstrictSettings);
  91 |         expect`\text{ԱԲԳաբգ}`.toBuild(nonstrictSettings);
  92 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 94}","  92 |     });
  93 |
> 94 |     it(""should build extended Latin characters inside \\text{}"", function() {
     |    ^ Unknown Test
  95 |         expect`\text{ěščřžůřťďňőİı}`.toBuild();
  96 |     });
  97 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 98}","   96 |     });
   97 |
>  98 |     it(""should not parse extended Latin outside \\text{} with strict"", function() {
      |    ^ Unknown Test
   99 |         expect`ěščřžůřťďňőİı`.not.toParse(strictSettings);
  100 |     });
  101 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 102}","  100 |     });
  101 |
> 102 |     it(""should not allow emoji in strict mode"", function() {
      |    ^ Unknown Test
  103 |         expect`✌`.not.toParse(strictSettings);
  104 |         expect`\text{✌}`.not.toParse(strictSettings);
  105 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 113}","  111 |     });
  112 |
> 113 |     it(""should allow emoji outside strict mode"", function() {
      |    ^ Unknown Test
  114 |         expect`✌`.toWarn();
  115 |         expect`\text{✌}`.toWarn();
  116 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 4, 'column': 4, 'index': 98}","  2 |
  3 | describe(""Screenshotter item"", function() {
> 4 |     for (const key in data) {
    |    ^ Conditional Test Logic
  5 |         if (data.hasOwnProperty(key)) {
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 5, 'column': 8, 'index': 132}","  3 | describe(""Screenshotter item"", function() {
  4 |     for (const key in data) {
> 5 |         if (data.hasOwnProperty(key)) {
    |        ^ Conditional Test Logic
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {
  8 |                 expect(item.tex).toBuild({",,
/home/gabriel/Desktop/research/projects/katex/test/mathml-spec.js,Conditional Test Logic,"{'line': 9, 'column': 4, 'index': 300}","   7 | const getMathML = function(expr, settings = new Settings()) {
   8 |     let startStyle = Style.TEXT;
>  9 |     if (settings.displayMode) {
     |    ^ Conditional Test Logic
  10 |         startStyle = Style.DISPLAY;
  11 |     }
  12 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 46, 'column': 8, 'index': 1257}","  44 |         const parse = getParsed(expression);
  45 |
> 46 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  47 |             const group = parse[i];
  48 |             expect(group.type).toMatch(""ord"");
  49 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 69, 'column': 8, 'index': 1848}","  67 |         const parse = getParsed(expression);
  68 |
> 69 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  70 |             const group = parse[i];
  71 |             expect(group.type).toEqual(""atom"");
  72 |             expect(group.family).toEqual(""bin"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 89, 'column': 8, 'index': 2443}","  87 |         const parse = getParsed(expression);
  88 |
> 89 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  90 |             let group = parse[i];
  91 |             if (group.type === ""htmlmathml"") {
  92 |                 expect(group.html).toHaveLength(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 91, 'column': 12, 'index': 2530}","  89 |         for (let i = 0; i < parse.length; i++) {
  90 |             let group = parse[i];
> 91 |             if (group.type === ""htmlmathml"") {
     |            ^ Conditional Test Logic
  92 |                 expect(group.html).toHaveLength(1);
  93 |                 group = group.html[0];
  94 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 95, 'column': 12, 'index': 2682}","  93 |                 group = group.html[0];
  94 |             }
> 95 |             if (group.type === ""mclass"") {
     |            ^ Conditional Test Logic
  96 |                 expect(group.mclass).toEqual(""mrel"");
  97 |             } else {
  98 |                 expect(group.type).toEqual(""atom"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 128, 'column': 8, 'index': 3698}","  126 |         const parse = getParsed(expression);
  127 |
> 128 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  129 |             const group = parse[i];
  130 |             expect(group.type).toEqual(""atom"");
  131 |             expect(group.family).toEqual(""punct"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 146, 'column': 8, 'index': 4159}","  144 |         const parse = getParsed(expression);
  145 |
> 146 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  147 |             const group = parse[i];
  148 |             expect(group.type).toEqual(""atom"");
  149 |             expect(group.family).toEqual(""open"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 164, 'column': 8, 'index': 4622}","  162 |         const parse = getParsed(expression);
  163 |
> 164 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  165 |             const group = parse[i];
  166 |             expect(group.type).toEqual(""atom"");
  167 |             expect(group.family).toEqual(""close"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1251, 'column': 4, 'index': 40113}","  1249 |     ];
  1250 |
> 1251 |     for (const [actual, expected] of cases) {
       |    ^ Conditional Test Logic
  1252 |         it(`should build ""${actual}"" like ""${expected}""`, () => {
  1253 |             expect(actual).toBuildLike(expected);
  1254 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1400, 'column': 8, 'index': 45359}","  1398 |         ];
  1399 |
> 1400 |         for (let i = 0; i < missingGroups.length; i++) {
       |        ^ Conditional Test Logic
  1401 |             expect(missingGroups[i]).not.toParse();
  1402 |         }
  1403 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1427, 'column': 8, 'index': 46320}","  1425 |         ];
  1426 |
> 1427 |         for (let i = 0; i < badArguments.length; i++) {
       |        ^ Conditional Test Logic
  1428 |             expect(badArguments[i]).not.toParse();
  1429 |         }
  1430 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1445, 'column': 8, 'index': 46886}","  1443 |         ];
  1444 |
> 1445 |         for (let i = 0; i < goodArguments.length; i++) {
       |        ^ Conditional Test Logic
  1446 |             expect(goodArguments[i]).toParse();
  1447 |         }
  1448 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1458, 'column': 8, 'index': 47242}","  1456 |         ];
  1457 |
> 1458 |         for (let i = 0; i < badSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1459 |             expect(badSupSubscripts[i]).not.toParse();
  1460 |         }
  1461 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1471, 'column': 8, 'index': 47621}","  1469 |         ];
  1470 |
> 1471 |         for (let i = 0; i < goodSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1472 |             expect(goodSupSubscripts[i]).toParse();
  1473 |         }
  1474 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1509, 'column': 8, 'index': 48853}","  1507 |         ];
  1508 |
> 1509 |         for (let i = 0; i < badLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1510 |             expect(badLeftArguments[i]).not.toParse();
  1511 |         }
  1512 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1523, 'column': 8, 'index': 49330}","  1521 |         ];
  1522 |
> 1523 |         for (let i = 0; i < goodLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1524 |             expect(goodLeftArguments[i]).toParse();
  1525 |         }
  1526 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 2161, 'column': 8, 'index': 77280}","  2159 |
  2160 |     it(""should throw Error when HTML attribute name is invalid"", function() {
> 2161 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
       |        ^ Conditional Test Logic
  2162 |             try {
  2163 |                 katex.renderToString(
  2164 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 3824, 'column': 4, 'index': 141217}","  3822 | describe(""leqno and fleqn rendering options"", () => {
  3823 |     const expr = r`\tag{hi}x+y`;
> 3824 |     for (const opt of [""leqno"", ""fleqn""]) {
       |    ^ Conditional Test Logic
  3825 |         it(`should not add ${opt} class by default`, () => {
  3826 |             const settings = new Settings({displayMode: true});
  3827 |             const built = katex.__renderToDomTree(expr, settings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4229, 'column': 8, 'index': 158157}","  4227 |         // add eastern arabic numbers to symbols table
  4228 |         // these symbols are ۰۱۲۳۴۵۶۷۸۹ and ٠١٢٣٤٥٦٧٨٩
> 4229 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4230 |             const persianNum = String.fromCharCode(0x0660 + number);
  4231 |             katex.__defineSymbol(
  4232 |                 ""math"", fontName, ""textord"", persianNum, persianNum);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4248, 'column': 8, 'index': 159103}","  4246 |         const mockMetrics = {};
  4247 |         // mock font metrics for the symbols that we added previously
> 4248 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4249 |             mockMetrics[0x0660 + number] = [-0.00244140625, 0.6875, 0, 0];
  4250 |             mockMetrics[0x06F0 + number] = [-0.00244140625, 0.6875, 0, 0];
  4251 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1628, 'column': 8, 'index': 53099}","  1626 |         expect(bbBody).toHaveLength(3);
  1627 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1628 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1629 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1630 |         expect(bbBody[2].type).toEqual(""font"");
  1631 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1628, 'column': 8, 'index': 53099}","  1626 |         expect(bbBody).toHaveLength(3);
  1627 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1628 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1629 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1630 |         expect(bbBody[2].type).toEqual(""font"");
  1631 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1630, 'column': 8, 'index': 53197}","  1628 |         expect(bbBody[2].type).toEqual(""font"");
  1629 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1630 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1631 |     });
  1632 |
  1633 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1630, 'column': 8, 'index': 53197}","  1628 |         expect(bbBody[2].type).toEqual(""font"");
  1629 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1630 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1631 |     });
  1632 |
  1633 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1823, 'column': 8, 'index': 60752}","  1821 |     it(""should render \\text{R\\textit{S}T} with the correct fonts"", function() {
  1822 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
> 1823 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
       |        ^ Duplicate Assert
  1824 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
  1825 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1826 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1824, 'column': 8, 'index': 60819}","  1822 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
  1823 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
> 1824 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
       |        ^ Duplicate Assert
  1825 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1826 |     });
  1827 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1825, 'column': 8, 'index': 60893}","  1823 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
  1824 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
> 1825 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
       |        ^ Duplicate Assert
  1826 |     });
  1827 |
  1828 |     it(""should render \\textbf{R } with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1849, 'column': 8, 'index': 62084}","  1847 |     it(""should render \\textsf{\\textit{R}G\\textbf{B}} with the correct font"", function() {
  1848 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
> 1849 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
       |        ^ Duplicate Assert
  1850 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
  1851 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1852 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1850, 'column': 8, 'index': 62165}","  1848 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
  1849 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
> 1850 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
       |        ^ Duplicate Assert
  1851 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1852 |     });
  1853 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1851, 'column': 8, 'index': 62239}","  1849 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
  1850 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
> 1851 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
       |        ^ Duplicate Assert
  1852 |     });
  1853 |
  1854 |     it(""should render \\textsf{\\textbf{$\\mathrm{A}$}} with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1872, 'column': 8, 'index': 63314}","  1870 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1871 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1872 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1873 |
  1874 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1875 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1872, 'column': 8, 'index': 63314}","  1870 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1871 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1872 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1873 |
  1874 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1875 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1876, 'column': 8, 'index': 63504}","  1874 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1875 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1876 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1877 |     });
  1878 |
  1879 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1876, 'column': 8, 'index': 63504}","  1874 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1875 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1876 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1877 |     });
  1878 |
  1879 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2069, 'column': 8, 'index': 73777}","  2067 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2068 |             ""</mstyle>"";
> 2069 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2070 |
  2071 |         // reverse the order of the commands
  2072 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2069, 'column': 8, 'index': 73777}","  2067 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2068 |             ""</mstyle>"";
> 2069 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2070 |
  2071 |         // reverse the order of the commands
  2072 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2078, 'column': 8, 'index': 74138}","  2076 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2077 |             ""</mstyle>"";
> 2078 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2079 |     });
  2080 |
  2081 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2078, 'column': 8, 'index': 74138}","  2076 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2077 |             ""</mstyle>"";
> 2078 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2079 |     });
  2080 |
  2081 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2092, 'column': 8, 'index': 74699}","  2090 |         const tree = getParsed(tex);
  2091 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
> 2092 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
       |        ^ Duplicate Assert
  2093 |         expect(markup).toContain(
  2094 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2095 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2093, 'column': 8, 'index': 74770}","  2091 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2092 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
> 2093 |         expect(markup).toContain(
       |        ^ Duplicate Assert
  2094 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2095 |     });
  2096 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2190, 'column': 8, 'index': 78333}","  2188 |         const built = getBuilt`+ x`;
  2189 |
> 2190 |         expect(built[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2191 |         expect(built[0].classes).not.toContain(""mbin"");
  2192 |     });
  2193 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2191, 'column': 8, 'index': 78385}","  2189 |
  2190 |         expect(built[0].classes).toContain(""mord"");
> 2191 |         expect(built[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2192 |     });
  2193 |
  2194 |     it(""should create ords after some other objects"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2225, 'column': 8, 'index': 79901}","  2223 |         const markup = katex.renderToString(r`\sigma^2`);
  2224 |         expect(markup.indexOf(""<span"")).toBe(0);
> 2225 |         expect(markup).toContain(""\u03c3"");  // sigma
       |        ^ Duplicate Assert
  2226 |         expect(markup).toContain(""margin-right"");
  2227 |         expect(markup).not.toContain(""marginRight"");
  2228 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2226, 'column': 8, 'index': 79955}","  2224 |         expect(markup.indexOf(""<span"")).toBe(0);
  2225 |         expect(markup).toContain(""\u03c3"");  // sigma
> 2226 |         expect(markup).toContain(""margin-right"");
       |        ^ Duplicate Assert
  2227 |         expect(markup).not.toContain(""marginRight"");
  2228 |     });
  2229 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2227, 'column': 8, 'index': 80005}","  2225 |         expect(markup).toContain(""\u03c3"");  // sigma
  2226 |         expect(markup).toContain(""margin-right"");
> 2227 |         expect(markup).not.toContain(""marginRight"");
       |        ^ Duplicate Assert
  2228 |     });
  2229 |
  2230 |     it(""generates both MathML and HTML"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2233, 'column': 8, 'index': 80172}","  2231 |         const markup = katex.renderToString(""a"");
  2232 |
> 2233 |         expect(markup).toContain(""<span"");
       |        ^ Duplicate Assert
  2234 |         expect(markup).toContain(""<math"");
  2235 |     });
  2236 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2234, 'column': 8, 'index': 80215}","  2232 |
  2233 |         expect(markup).toContain(""<span"");
> 2234 |         expect(markup).toContain(""<math"");
       |        ^ Duplicate Assert
  2235 |     });
  2236 | });
  2237 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2286, 'column': 8, 'index': 81678}","  2284 |     it(""should produce mords"", function() {
  2285 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
> 2286 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2287 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2288 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2289 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2287, 'column': 8, 'index': 81741}","  2285 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
  2286 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
> 2287 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2288 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2289 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2290 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2288, 'column': 8, 'index': 81808}","  2286 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
  2287 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
> 2288 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2289 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2290 |     });
  2291 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2289, 'column': 8, 'index': 81873}","  2287 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2288 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
> 2289 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2290 |     });
  2291 | });
  2292 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2304, 'column': 8, 'index': 82390}","  2302 |     it(""should produce mords"", function() {
  2303 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
> 2304 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2305 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2306 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2307 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2305, 'column': 8, 'index': 82457}","  2303 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
  2304 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
> 2305 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2306 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2307 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2308 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2306, 'column': 8, 'index': 82528}","  2304 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
  2305 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
> 2306 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2307 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2308 |     });
  2309 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2307, 'column': 8, 'index': 82597}","  2305 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2306 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
> 2307 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2308 |     });
  2309 | });
  2310 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2321, 'column': 8, 'index': 83115}","  2319 |     it(""should produce mords"", function() {
  2320 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
> 2321 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2322 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2323 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2324 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2322, 'column': 8, 'index': 83189}","  2320 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
  2321 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
> 2322 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2323 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2324 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2325 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2323, 'column': 8, 'index': 83267}","  2321 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
  2322 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
> 2323 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2324 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2325 |     });
  2326 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2324, 'column': 8, 'index': 83343}","  2322 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2323 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
> 2324 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2325 |     });
  2326 | });
  2327 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2368, 'column': 8, 'index': 84832}","  2366 |     it(""should produce mords"", function() {
  2367 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
> 2368 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2369 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2370 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2371 |         expect(getBuilt`\underrightarrow )^2`[0].classes)",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2369, 'column': 8, 'index': 84907}","  2367 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
  2368 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
> 2369 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2370 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2371 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2372 |             .not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2370, 'column': 8, 'index': 84986}","  2368 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
  2369 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
> 2370 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2371 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2372 |             .not.toContain(""mclose"");
  2373 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2371, 'column': 8, 'index': 85063}","  2369 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2370 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
> 2371 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
       |        ^ Duplicate Assert
  2372 |             .not.toContain(""mclose"");
  2373 |     });
  2374 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2410, 'column': 8, 'index': 86366}","  2408 |         expect(getBuilt`\xrightarrow x`[0].classes).toContain(""mrel"");
  2409 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
> 2410 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2411 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2412 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2413 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2411, 'column': 8, 'index': 86437}","  2409 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
  2410 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
> 2411 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2412 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2413 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2414 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2412, 'column': 8, 'index': 86512}","  2410 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
  2411 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
> 2412 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2413 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2414 |     });
  2415 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2413, 'column': 8, 'index': 86585}","  2411 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2412 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
> 2413 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2414 |     });
  2415 | });
  2416 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2451, 'column': 8, 'index': 87830}","  2449 |         expect(getBuilt`\overbrace x`[0].classes).toContain(""mord"");
  2450 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
> 2451 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2452 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2453 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2454 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2452, 'column': 8, 'index': 87899}","  2450 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
  2451 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
> 2452 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2453 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2454 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2455 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2453, 'column': 8, 'index': 87972}","  2451 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
  2452 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
> 2453 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2454 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2455 |     });
  2456 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2454, 'column': 8, 'index': 88043}","  2452 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2453 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
> 2454 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2455 |     });
  2456 | });
  2457 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2483, 'column': 8, 'index': 88879}","  2481 |     it(""should produce mords"", function() {
  2482 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
> 2483 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2484 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2485 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2486 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2484, 'column': 8, 'index': 88944}","  2482 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
  2483 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
> 2484 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2485 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2486 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2487 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2485, 'column': 8, 'index': 89013}","  2483 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
  2484 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
> 2485 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2486 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2487 |     });
  2488 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2486, 'column': 8, 'index': 89080}","  2484 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2485 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
> 2486 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2487 |     });
  2488 | });
  2489 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2603, 'column': 8, 'index': 92869}","  2601 |     it(""should produce mords"", function() {
  2602 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
> 2603 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2604 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2605 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2606 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2604, 'column': 8, 'index': 92935}","  2602 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
  2603 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
> 2604 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2605 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2606 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2607 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2605, 'column': 8, 'index': 93005}","  2603 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
  2604 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
> 2605 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2606 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2607 |     });
  2608 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2606, 'column': 8, 'index': 93073}","  2604 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2605 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
> 2606 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2607 |     });
  2608 | });
  2609 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3454, 'column': 8, 'index': 126213}","  3452 |     it(""\\char produces literal characters"", () => {
  3453 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3454 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Duplicate Assert
  3455 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3456 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3457 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3455, 'column': 8, 'index': 126264}","  3453 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3454 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3455 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Duplicate Assert
  3456 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3457 |         expect`\char`.not.toParse();
  3458 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3456, 'column': 8, 'index': 126316}","  3454 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3455 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3456 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Duplicate Assert
  3457 |         expect`\char`.not.toParse();
  3458 |         expect(""\\char`"").not.toParse();
  3459 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4088, 'column': 8, 'index': 152438}","  4086 |         const example = exp32 + r`\a{1}`;
  4087 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
> 4088 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4089 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4090 |     });
  4091 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4089, 'column': 8, 'index': 152505}","  4087 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
  4088 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4089 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4090 |     });
  4091 |
  4092 |     it(""should count correctly with Unicode sub/superscripts"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4095, 'column': 8, 'index': 152774}","  4093 |         const example = exp32 + r`\def+{\a{1}}x⁺x⁺x⁺x⁺`;
  4094 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
> 4095 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4096 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4097 |     });
  4098 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4096, 'column': 8, 'index': 152841}","  4094 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
  4095 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4096 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4097 |     });
  4098 | });
  4099 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4138, 'column': 8, 'index': 154488}","  4136 |         // Ensure newlines appear outside base spans (because, in this regexp,
  4137 |         // base span occurs immediately after each newline span).
> 4138 |         expect(markup).toMatch(
       |        ^ Duplicate Assert
  4139 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
  4140 |         expect(markup).toMatchSnapshot();
  4141 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4140, 'column': 8, 'index': 154628}","  4138 |         expect(markup).toMatch(
  4139 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
> 4140 |         expect(markup).toMatchSnapshot();
       |        ^ Duplicate Assert
  4141 |     });
  4142 | });
  4143 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 509, 'column': 27, 'index': 14973}","  507 |
  508 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 509 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Eager Test
  510 |
  511 |         expect(dfracParse.type).toEqual(""genfrac"");
  512 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 515, 'column': 27, 'index': 15181}","  513 |         expect(dfracParse.denom).toBeDefined();
  514 |
> 515 |         const tfracParse = getParsed(tfracExpression)[0];
      |                           ^ Eager Test
  516 |
  517 |         expect(tfracParse.type).toEqual(""genfrac"");
  518 |         expect(tfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 521, 'column': 27, 'index': 15389}","  519 |         expect(tfracParse.denom).toBeDefined();
  520 |
> 521 |         const cfracParse = getParsed(cfracExpression)[0];
      |                           ^ Eager Test
  522 |
  523 |         expect(cfracParse.type).toEqual(""genfrac"");
  524 |         expect(cfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 527, 'column': 29, 'index': 15599}","  525 |         expect(cfracParse.denom).toBeDefined();
  526 |
> 527 |         const genfracParse = getParsed(genfrac1)[0];
      |                             ^ Eager Test
  528 |
  529 |         expect(genfracParse.type).toEqual(""genfrac"");
  530 |         expect(genfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 576, 'column': 20, 'index': 17255}","  574 |         };
  575 |
> 576 |         testGenfrac(getParsed(simpleOver)[0]);
      |                    ^ Eager Test
  577 |         testGenfrac(getParsed(complexOver)[0]);
  578 |
  579 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 577, 'column': 20, 'index': 17302}","  575 |
  576 |         testGenfrac(getParsed(simpleOver)[0]);
> 577 |         testGenfrac(getParsed(complexOver)[0]);
      |                    ^ Eager Test
  578 |
  579 |         const parseBraceFrac = getParsed(braceFrac)[0];
  580 |         testGenfrac(parseBraceFrac);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 579, 'column': 31, 'index': 17362}","  577 |         testGenfrac(getParsed(complexOver)[0]);
  578 |
> 579 |         const parseBraceFrac = getParsed(braceFrac)[0];
      |                               ^ Eager Test
  580 |         testGenfrac(parseBraceFrac);
  581 |         expect(parseBraceFrac.leftDelim).toBeDefined();
  582 |         expect(parseBraceFrac.rightDelim).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 584, 'column': 31, 'index': 17569}","  582 |         expect(parseBraceFrac.rightDelim).toBeDefined();
  583 |
> 584 |         const parseBrackFrac = getParsed(brackFrac)[0];
      |                               ^ Eager Test
  585 |         testGenfrac(parseBrackFrac);
  586 |         expect(parseBrackFrac.leftDelim).toBeDefined();
  587 |         expect(parseBrackFrac.rightDelim).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 858, 'column': 23, 'index': 27406}","  856 |
  857 |     it(""should correctly extract the custom color"", function() {
> 858 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Eager Test
  859 |         const parse2 = getParsed(customColorExpression2)[0];
  860 |         const parse3 = getParsed(customColorExpression3)[0];
  861 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 859, 'column': 23, 'index': 27467}","  857 |     it(""should correctly extract the custom color"", function() {
  858 |         const parse1 = getParsed(customColorExpression1)[0];
> 859 |         const parse2 = getParsed(customColorExpression2)[0];
      |                       ^ Eager Test
  860 |         const parse3 = getParsed(customColorExpression3)[0];
  861 |
  862 |         expect(parse1.color).toEqual(""#fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 860, 'column': 23, 'index': 27528}","  858 |         const parse1 = getParsed(customColorExpression1)[0];
  859 |         const parse2 = getParsed(customColorExpression2)[0];
> 860 |         const parse3 = getParsed(customColorExpression3)[0];
      |                       ^ Eager Test
  861 |
  862 |         expect(parse1.color).toEqual(""#fA6"");
  863 |         expect(parse2.color).toEqual(""#fA6fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 958, 'column': 26, 'index': 30478}","  956 |
  957 |     it(""should produce the correct direction delimiter"", function() {
> 958 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Eager Test
  959 |         const rightParse = getParsed(bigDelim)[0];
  960 |
  961 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 959, 'column': 27, 'index': 30532}","  957 |     it(""should produce the correct direction delimiter"", function() {
  958 |         const leftParse = getParsed(normalDelim)[0];
> 959 |         const rightParse = getParsed(bigDelim)[0];
      |                           ^ Eager Test
  960 |
  961 |         expect(leftParse.mclass).toEqual(""mopen"");
  962 |         expect(rightParse.mclass).toEqual(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 966, 'column': 27, 'index': 30760}","  964 |
  965 |     it(""should parse the correct size delimiter"", function() {
> 966 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Eager Test
  967 |         const bigParse = getParsed(bigDelim)[0];
  968 |
  969 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 967, 'column': 25, 'index': 30812}","  965 |     it(""should parse the correct size delimiter"", function() {
  966 |         const smallParse = getParsed(normalDelim)[0];
> 967 |         const bigParse = getParsed(bigDelim)[0];
      |                         ^ Eager Test
  968 |
  969 |         expect(smallParse.size).toEqual(1);
  970 |         expect(bigParse.size).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1047, 'column': 24, 'index': 33178}","  1045 |
  1046 |     it(""should list the correct units"", function() {
> 1047 |         const emParse = getParsed(emRule)[0];
       |                        ^ Eager Test
  1048 |         const exParse = getParsed(exRule)[0];
  1049 |
  1050 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1048, 'column': 24, 'index': 33224}","  1046 |     it(""should list the correct units"", function() {
  1047 |         const emParse = getParsed(emRule)[0];
> 1048 |         const exParse = getParsed(exRule)[0];
       |                        ^ Eager Test
  1049 |
  1050 |         expect(emParse.width.unit).toEqual(""em"");
  1051 |         expect(emParse.height.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1085, 'column': 24, 'index': 34394}","  1083 |
  1084 |     it(""should list the correct units"", function() {
> 1085 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1086 |         const exParse = getParsed(exKern)[0];
  1087 |         const muParse = getParsed(muKern)[0];
  1088 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1086, 'column': 24, 'index': 34440}","  1084 |     it(""should list the correct units"", function() {
  1085 |         const emParse = getParsed(emKern)[0];
> 1086 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1087 |         const muParse = getParsed(muKern)[0];
  1088 |         const abParse = getParsed(abKern)[1];
  1089 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1087, 'column': 24, 'index': 34486}","  1085 |         const emParse = getParsed(emKern)[0];
  1086 |         const exParse = getParsed(exKern)[0];
> 1087 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1088 |         const abParse = getParsed(abKern)[1];
  1089 |
  1090 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1088, 'column': 24, 'index': 34532}","  1086 |         const exParse = getParsed(exKern)[0];
  1087 |         const muParse = getParsed(muKern)[0];
> 1088 |         const abParse = getParsed(abKern)[1];
       |                        ^ Eager Test
  1089 |
  1090 |         expect(emParse.dimension.unit).toEqual(""em"");
  1091 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1123, 'column': 24, 'index': 35677}","  1121 |
  1122 |     it(""should list the correct units"", function() {
> 1123 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1124 |         const exParse = getParsed(exKern)[0];
  1125 |         const muParse = getParsed(muKern)[0];
  1126 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1124, 'column': 24, 'index': 35723}","  1122 |     it(""should list the correct units"", function() {
  1123 |         const emParse = getParsed(emKern)[0];
> 1124 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1125 |         const muParse = getParsed(muKern)[0];
  1126 |         const abParse1 = getParsed(abKern1)[1];
  1127 |         const abParse2 = getParsed(abKern2)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1125, 'column': 24, 'index': 35769}","  1123 |         const emParse = getParsed(emKern)[0];
  1124 |         const exParse = getParsed(exKern)[0];
> 1125 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1126 |         const abParse1 = getParsed(abKern1)[1];
  1127 |         const abParse2 = getParsed(abKern2)[1];
  1128 |         const abParse3 = getParsed(abKern3)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1126, 'column': 25, 'index': 35816}","  1124 |         const exParse = getParsed(exKern)[0];
  1125 |         const muParse = getParsed(muKern)[0];
> 1126 |         const abParse1 = getParsed(abKern1)[1];
       |                         ^ Eager Test
  1127 |         const abParse2 = getParsed(abKern2)[1];
  1128 |         const abParse3 = getParsed(abKern3)[1];
  1129 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1127, 'column': 25, 'index': 35864}","  1125 |         const muParse = getParsed(muKern)[0];
  1126 |         const abParse1 = getParsed(abKern1)[1];
> 1127 |         const abParse2 = getParsed(abKern2)[1];
       |                         ^ Eager Test
  1128 |         const abParse3 = getParsed(abKern3)[1];
  1129 |
  1130 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1128, 'column': 25, 'index': 35912}","  1126 |         const abParse1 = getParsed(abKern1)[1];
  1127 |         const abParse2 = getParsed(abKern2)[1];
> 1128 |         const abParse3 = getParsed(abKern3)[1];
       |                         ^ Eager Test
  1129 |
  1130 |         expect(emParse.dimension.unit).toEqual(""em"");
  1131 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1139, 'column': 25, 'index': 36367}","  1137 |
  1138 |     it(""should parse elements on either side of a kern"", function() {
> 1139 |         const abParse1 = getParsed(abKern1);
       |                         ^ Eager Test
  1140 |         const abParse2 = getParsed(abKern2);
  1141 |         const abParse3 = getParsed(abKern3);
  1142 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1140, 'column': 25, 'index': 36412}","  1138 |     it(""should parse elements on either side of a kern"", function() {
  1139 |         const abParse1 = getParsed(abKern1);
> 1140 |         const abParse2 = getParsed(abKern2);
       |                         ^ Eager Test
  1141 |         const abParse3 = getParsed(abKern3);
  1142 |
  1143 |         expect(abParse1).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1141, 'column': 25, 'index': 36457}","  1139 |         const abParse1 = getParsed(abKern1);
  1140 |         const abParse2 = getParsed(abKern2);
> 1141 |         const abParse3 = getParsed(abKern3);
       |                         ^ Eager Test
  1142 |
  1143 |         expect(abParse1).toHaveLength(3);
  1144 |         expect(abParse1[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2064, 'column': 19, 'index': 73548}","  2062 |     it(""should render a combination of font and color changes"", function() {
  2063 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2064 |         let tree = getParsed(tex);
       |                   ^ Eager Test
  2065 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2066 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2067 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2073, 'column': 15, 'index': 73917}","  2071 |         // reverse the order of the commands
  2072 |         tex = r`\mathbb{\textcolor{blue}{R}}`;
> 2073 |         tree = getParsed(tex);
       |               ^ Eager Test
  2074 |         markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2075 |         node = ""<mstyle mathcolor=\""blue\"">"" +
  2076 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2981, 'column': 24, 'index': 107772}","  2979 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2980 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2981 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  2982 |         expect(parsed1.href).toBe(url);
  2983 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2984 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2983, 'column': 24, 'index': 107892}","  2981 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  2982 |         expect(parsed1.href).toBe(url);
> 2983 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  2984 |         expect(parsed2.href).toBe(url);
  2985 |     });
  2986 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2989, 'column': 24, 'index': 108122}","  2987 |     it(""should allow balanced braces in url"", function() {
  2988 |         const url = ""http://example.org/{{}t{oo}}"";
> 2989 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  2990 |         expect(parsed1.href).toBe(url);
  2991 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2992 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2991, 'column': 24, 'index': 108242}","  2989 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  2990 |         expect(parsed1.href).toBe(url);
> 2991 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  2992 |         expect(parsed2.href).toBe(url);
  2993 |     });
  2994 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3005, 'column': 24, 'index': 108896}","  3003 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3004 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3005 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3006 |         expect(parsed1.href).toBe(url);
  3007 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3008 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3007, 'column': 24, 'index': 109018}","  3005 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
  3006 |         expect(parsed1.href).toBe(url);
> 3007 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
       |                        ^ Eager Test
  3008 |         expect(parsed2.href).toBe(url);
  3009 |     });
  3010 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2162, 'column': 12, 'index': 77359}","  2160 |     it(""should throw Error when HTML attribute name is invalid"", function() {
  2161 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
> 2162 |             try {
       |            ^ Exception Handling
  2163 |                 katex.renderToString(
  2164 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);
  2165 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2727, 'column': 8, 'index': 96990}","  2725 | describe(""A parser error"", function() {
  2726 |     it(""should report the position of an error"", function() {
> 2727 |         try {
       |        ^ Exception Handling
  2728 |             parseTree(r`\sqrt}`, new Settings());
  2729 |         } catch (e) {
  2730 |             expect(e.position).toEqual(5);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3146, 'column': 8, 'index': 114455}","  3144 | describe(""ParseError properties"", function() {
  3145 |     it(""should contain affected position and length information"", function() {
> 3146 |         try {
       |        ^ Exception Handling
  3147 |             katex.renderToString(""1 + \\fraq{}{}"");
  3148 |
  3149 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3161, 'column': 8, 'index': 115118}","  3159 |
  3160 |     it(""should contain position and length information at end of input"", function() {
> 3161 |         try {
       |        ^ Exception Handling
  3162 |             katex.renderToString(""\\frac{}"");
  3163 |
  3164 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3176, 'column': 8, 'index': 115814}","  3174 |
  3175 |     it(""should contain no position and length information if unavailable"", function() {
> 3176 |         try {
       |        ^ Exception Handling
  3177 |             katex.renderToString(""\\verb|hello\nworld|"");
  3178 |
  3179 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 44, 'column': 22, 'index': 1225}","  42 |
  43 |     it(""should build a list of ords"", function() {
> 44 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  45 |
  46 |         for (let i = 0; i < parse.length; i++) {
  47 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 53, 'column': 22, 'index': 1483}","  51 |
  52 |     it(""should parse the right number of ords"", function() {
> 53 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  54 |
  55 |         expect(parse).toHaveLength(expression.length);
  56 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 67, 'column': 22, 'index': 1816}","  65 |
  66 |     it(""should build a list of bins"", function() {
> 67 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  68 |
  69 |         for (let i = 0; i < parse.length; i++) {
  70 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 87, 'column': 22, 'index': 2411}","  85 |
  86 |     it(""should build a list of rels"", function() {
> 87 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  88 |
  89 |         for (let i = 0; i < parse.length; i++) {
  90 |             let group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 113, 'column': 32, 'index': 3312}","  111 |     it(""should return one group, not a fragment"", function() {
  112 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
> 113 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
      |                                ^ Lazy Test
  114 |         expect(mml.children.length).toEqual(1);
  115 |     });
  116 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 126, 'column': 22, 'index': 3666}","  124 |
  125 |     it(""should build a list of puncts"", function() {
> 126 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  127 |
  128 |         for (let i = 0; i < parse.length; i++) {
  129 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 144, 'column': 22, 'index': 4127}","  142 |
  143 |     it(""should build a list of opens"", function() {
> 144 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  145 |
  146 |         for (let i = 0; i < parse.length; i++) {
  147 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 162, 'column': 22, 'index': 4590}","  160 |
  161 |     it(""should build a list of closes"", function() {
> 162 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  163 |
  164 |         for (let i = 0; i < parse.length; i++) {
  165 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 493, 'column': 22, 'index': 14415}","  491 |
  492 |     it(""should produce a frac"", function() {
> 493 |         const parse = getParsed(expression)[0];
      |                      ^ Lazy Test
  494 |
  495 |         expect(parse.type).toEqual(""genfrac"");
  496 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 509, 'column': 27, 'index': 14973}","  507 |
  508 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 509 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Lazy Test
  510 |
  511 |         expect(dfracParse.type).toEqual(""genfrac"");
  512 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 576, 'column': 20, 'index': 17255}","  574 |         };
  575 |
> 576 |         testGenfrac(getParsed(simpleOver)[0]);
      |                    ^ Lazy Test
  577 |         testGenfrac(getParsed(complexOver)[0]);
  578 |
  579 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 591, 'column': 22, 'index': 17853}","  589 |
  590 |     it(""should create a numerator from the atoms before \\over"", function() {
> 591 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  592 |
  593 |         const numer = parse.numer;
  594 |         expect(numer.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 598, 'column': 22, 'index': 18070}","  596 |
  597 |     it(""should create a denominator from the atoms after \\over"", function() {
> 598 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  599 |
  600 |         const denom = parse.denom;
  601 |         expect(denom.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 606, 'column': 22, 'index': 18305}","  604 |     it(""should handle empty numerators"", function() {
  605 |         const emptyNumerator = r`\over x`;
> 606 |         const parse = getParsed(emptyNumerator)[0];
      |                      ^ Lazy Test
  607 |         expect(parse.type).toEqual(""genfrac"");
  608 |         expect(parse.numer).toBeDefined();
  609 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 614, 'column': 22, 'index': 18600}","  612 |     it(""should handle empty denominators"", function() {
  613 |         const emptyDenominator = r`1 \over`;
> 614 |         const parse = getParsed(emptyDenominator)[0];
      |                      ^ Lazy Test
  615 |         expect(parse.type).toEqual(""genfrac"");
  616 |         expect(parse.numer).toBeDefined();
  617 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 622, 'column': 22, 'index': 18925}","  620 |     it(""should handle \\displaystyle correctly"", function() {
  621 |         const displaystyleExpression = r`\displaystyle 1 \over 2`;
> 622 |         const parse = getParsed(displaystyleExpression)[0];
      |                      ^ Lazy Test
  623 |         expect(parse.type).toEqual(""genfrac"");
  624 |         expect(parse.numer.body[0].type).toEqual(""styling"");
  625 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 635, 'column': 22, 'index': 19477}","  633 |     it(""should handle nested factions"", function() {
  634 |         const nestedOverExpression = r`{1 \over 2} \over 3`;
> 635 |         const parse = getParsed(nestedOverExpression)[0];
      |                      ^ Lazy Test
  636 |         expect(parse.type).toEqual(""genfrac"");
  637 |         expect(parse.numer.body[0].type).toEqual(""genfrac"");
  638 |         expect(parse.numer.body[0].numer.body[0].text).toEqual(""1"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 684, 'column': 22, 'index': 21187}","  682 |
  683 |     it(""should produce a sizing node"", function() {
> 684 |         const parse = getParsed(sizeExpression)[0];
      |                      ^ Lazy Test
  685 |
  686 |         expect(parse.type).toEqual(""sizing"");
  687 |         expect(parse.size).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 708, 'column': 22, 'index': 21996}","  706 |
  707 |     it(""should produce a text"", function() {
> 708 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  709 |
  710 |         expect(parse.type).toEqual(""text"");
  711 |         expect(parse.body).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 715, 'column': 22, 'index': 22211}","  713 |
  714 |     it(""should produce textords instead of mathords"", function() {
> 715 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  716 |         const group = parse.body;
  717 |
  718 |         expect(group[0].type).toEqual(""textord"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 738, 'column': 22, 'index': 22874}","  736 |
  737 |     it(""should contract spaces"", function() {
> 738 |         const parse = getParsed(spaceTextExpression)[0];
      |                      ^ Lazy Test
  739 |         const group = parse.body;
  740 |
  741 |         expect(group.length).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 757, 'column': 22, 'index': 23550}","  755 |
  756 |     it(""should ignore a space before the text group"", function() {
> 757 |         const parse = getParsed(leadingSpaceTextExpression)[0];
      |                      ^ Lazy Test
  758 |         // [m, o, o]
  759 |         expect(parse.body).toHaveLength(3);
  760 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 844, 'column': 22, 'index': 26937}","  842 |
  843 |     it(""should build a color node"", function() {
> 844 |         const parse = getParsed(colorExpression)[0];
      |                      ^ Lazy Test
  845 |
  846 |         expect(parse.type).toEqual(""color"");
  847 |         expect(parse.color).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 858, 'column': 23, 'index': 27406}","  856 |
  857 |     it(""should correctly extract the custom color"", function() {
> 858 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Lazy Test
  859 |         const parse2 = getParsed(customColorExpression2)[0];
  860 |         const parse3 = getParsed(customColorExpression3)[0];
  861 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 917, 'column': 22, 'index': 29332}","  915 |
  916 |     it(""should produce spacing in math mode"", function() {
> 917 |         const parse = getParsed(mathTie);
      |                      ^ Lazy Test
  918 |
  919 |         expect(parse[1].type).toEqual(""spacing"");
  920 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 923, 'column': 21, 'index': 29492}","  921 |
  922 |     it(""should produce spacing in text mode"", function() {
> 923 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  924 |         const parse = text.body;
  925 |
  926 |         expect(parse[1].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 930, 'column': 21, 'index': 29697}","  928 |
  929 |     it(""should not contract with spaces in text mode"", function() {
> 930 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  931 |         const parse = text.body;
  932 |
  933 |         expect(parse[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 952, 'column': 22, 'index': 30294}","  950 |
  951 |     it(""should produce a delimsizing"", function() {
> 952 |         const parse = getParsed(normalDelim)[0];
      |                      ^ Lazy Test
  953 |
  954 |         expect(parse.type).toEqual(""delimsizing"");
  955 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 958, 'column': 26, 'index': 30478}","  956 |
  957 |     it(""should produce the correct direction delimiter"", function() {
> 958 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Lazy Test
  959 |         const rightParse = getParsed(bigDelim)[0];
  960 |
  961 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 966, 'column': 27, 'index': 30760}","  964 |
  965 |     it(""should parse the correct size delimiter"", function() {
> 966 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Lazy Test
  967 |         const bigParse = getParsed(bigDelim)[0];
  968 |
  969 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 982, 'column': 22, 'index': 31175}","  980 |
  981 |     it(""should produce an overline"", function() {
> 982 |         const parse = getParsed(overline)[0];
      |                      ^ Lazy Test
  983 |
  984 |         expect(parse.type).toEqual(""overline"");
  985 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1041, 'column': 22, 'index': 33025}","  1039 |
  1040 |     it(""should produce a rule"", function() {
> 1041 |         const parse = getParsed(emRule)[0];
       |                      ^ Lazy Test
  1042 |
  1043 |         expect(parse.type).toEqual(""rule"");
  1044 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1047, 'column': 24, 'index': 33178}","  1045 |
  1046 |     it(""should list the correct units"", function() {
> 1047 |         const emParse = getParsed(emRule)[0];
       |                        ^ Lazy Test
  1048 |         const exParse = getParsed(exRule)[0];
  1049 |
  1050 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1058, 'column': 32, 'index': 33548}","  1056 |
  1057 |     it(""should parse the number correctly"", function() {
> 1058 |         const hardNumberParse = getParsed(hardNumberRule)[0];
       |                                ^ Lazy Test
  1059 |
  1060 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
  1061 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1085, 'column': 24, 'index': 34394}","  1083 |
  1084 |     it(""should list the correct units"", function() {
> 1085 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1086 |         const exParse = getParsed(exKern)[0];
  1087 |         const muParse = getParsed(muKern)[0];
  1088 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1123, 'column': 24, 'index': 35677}","  1121 |
  1122 |     it(""should list the correct units"", function() {
> 1123 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1124 |         const exParse = getParsed(exKern)[0];
  1125 |         const muParse = getParsed(muKern)[0];
  1126 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1139, 'column': 25, 'index': 36367}","  1137 |
  1138 |     it(""should parse elements on either side of a kern"", function() {
> 1139 |         const abParse1 = getParsed(abKern1);
       |                         ^ Lazy Test
  1140 |         const abParse2 = getParsed(abKern2);
  1141 |         const abParse3 = getParsed(abKern3);
  1142 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1170, 'column': 24, 'index': 37442}","  1168 |
  1169 |     it(""should handle whitespace"", function() {
> 1170 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
       |                        ^ Lazy Test
  1171 |
  1172 |         expect(abParse).toHaveLength(3);
  1173 |         expect(abParse[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1188, 'column': 22, 'index': 38009}","  1186 |
  1187 |     it(""should produce a leftright"", function() {
> 1188 |         const parse = getParsed(normalLeftRight)[0];
       |                      ^ Lazy Test
  1189 |
  1190 |         expect(parse.type).toEqual(""leftright"");
  1191 |         expect(parse.left).toEqual(""("");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1365, 'column': 22, 'index': 44374}","  1363 |
  1364 |     it(""should produce sqrts"", function() {
> 1365 |         const parse = getParsed(sqrt)[0];
       |                      ^ Lazy Test
  1366 |
  1367 |         expect(parse.type).toEqual(""sqrt"");
  1368 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1564, 'column': 22, 'index': 50794}","  1562 |     it(""should only change the style within its group"", function() {
  1563 |         const text = r`a b { c d \displaystyle e f } g h`;
> 1564 |         const parse = getParsed(text);
       |                      ^ Lazy Test
  1565 |
  1566 |         const displayNode = parse[2].body[2];
  1567 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2064, 'column': 19, 'index': 73548}","  2062 |     it(""should render a combination of font and color changes"", function() {
  2063 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2064 |         let tree = getParsed(tex);
       |                   ^ Lazy Test
  2065 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2066 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2067 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2083, 'column': 21, 'index': 74289}","  2081 |     it(""should render text as <mtext>"", function() {
  2082 |         const tex = r`\text{for }`;
> 2083 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2084 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2085 |         expect(markup).toContain(""<mtext>for\u00a0</mtext>"");
  2086 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2090, 'column': 21, 'index': 74601}","  2088 |     it(""should render math within text as side-by-side children"", function() {
  2089 |         const tex = r`\text{graph: $y = mx + b$}`;
> 2090 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2091 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2092 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
  2093 |         expect(markup).toContain(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2105, 'column': 15, 'index': 75261}","  2103 |
  2104 |     it(""should produce mords"", function() {
> 2105 |         expect(getBuilt(img, trustSettings)[0].classes).toContain(""mord"");
       |               ^ Lazy Test
  2106 |     });
  2107 |
  2108 |     it(""should not render without trust setting"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2109, 'column': 22, 'index': 75415}","  2107 |
  2108 |     it(""should not render without trust setting"", function() {
> 2109 |         const built = getBuilt(img);
       |                      ^ Lazy Test
  2110 |         expect(built).toMatchSnapshot();
  2111 |     });
  2112 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2114, 'column': 22, 'index': 75558}","  2112 |
  2113 |     it(""should render with trust setting"", function() {
> 2114 |         const built = getBuilt(img, trustSettings);
       |                      ^ Lazy Test
  2115 |         expect(built).toMatchSnapshot();
  2116 |     });
  2117 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2140, 'column': 22, 'index': 76504}","  2138 |
  2139 |     it(""should set HTML attributes"", function() {
> 2140 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2141 |         expect(built[0].attributes.id).toMatch(""bar"");
  2142 |         expect(built[1].classes).toContain(""foo"");
  2143 |         expect(built[2].attributes.style).toMatch(""color: red"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2151, 'column': 22, 'index': 76911}","  2149 |
  2150 |     it(""should not affect spacing"", function() {
> 2151 |         const built = getBuilt(""\\htmlId{a}{x+}y"", trustNonStrictSettings);
       |                      ^ Lazy Test
  2152 |         expect(built).toMatchSnapshot();
  2153 |     });
  2154 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2156, 'column': 22, 'index': 77104}","  2154 |
  2155 |     it(""should render with trust and strict setting"", function() {
> 2156 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2157 |         expect(built).toMatchSnapshot();
  2158 |     });
  2159 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2331, 'column': 21, 'index': 83606}","  2329 |     it(""should properly render stretchy accents"", function() {
  2330 |         const tex = `\\widetilde{ABCD}`;
> 2331 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2332 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2333 |         expect(markup).toContain('<mo stretchy=""true"">~</mo>');
  2334 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2981, 'column': 24, 'index': 107772}","  2979 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  2980 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 2981 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  2982 |         expect(parsed1.href).toBe(url);
  2983 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2984 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2989, 'column': 24, 'index': 108122}","  2987 |     it(""should allow balanced braces in url"", function() {
  2988 |         const url = ""http://example.org/{{}t{oo}}"";
> 2989 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  2990 |         expect(parsed1.href).toBe(url);
  2991 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  2992 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3005, 'column': 24, 'index': 108896}","  3003 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3004 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3005 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3006 |         expect(parsed1.href).toBe(url);
  3007 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3008 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3021, 'column': 22, 'index': 109561}","  3019 |
  3020 |     it(""should not affect spacing around"", function() {
> 3021 |         const built = getBuilt(""a\\href{http://example.com/}{+b}"", trustSettings);
       |                      ^ Lazy Test
  3022 |         expect(built).toMatchSnapshot();
  3023 |     });
  3024 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3031, 'column': 23, 'index': 109935}","  3029 |
  3030 |     it(""should allow explicitly allowed protocols"", () => {
> 3031 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3032 |             ""\\href{ftp://x}{foo}"",
  3033 |             new Settings({trust: (context) => context.protocol === ""ftp""}),
  3034 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3039, 'column': 23, 'index': 110214}","  3037 |
  3038 |     it(""should allow all protocols when trust option is true"", () => {
> 3039 |         const parsed = getParsed(""\\href{ftp://x}{foo}"", trustSettings);
       |                       ^ Lazy Test
  3040 |         expect(parsed).toMatchSnapshot();
  3041 |     });
  3042 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3044, 'column': 23, 'index': 110405}","  3042 |
  3043 |     it(""should not allow explicitly disallowed protocols"", () => {
> 3044 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3045 |             ""\\href{javascript:alert('x')}{foo}"",
  3046 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3047 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3052, 'column': 23, 'index': 110710}","  3050 |
  3051 |     it(""should not allow explicitly uppercased disallowed protocols"", () => {
> 3052 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3053 |             ""\\href{JavaScript:alert('x')}{foo}"",
  3054 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3055 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3128, 'column': 28, 'index': 113791}","  3126 |
  3127 |     it(""should produce color nodes with a color value given by errorColor"", function() {
> 3128 |         const parsedInput = getParsed(r`\error`, noThrowSettings);
       |                            ^ Lazy Test
  3129 |         expect(parsedInput[0].type).toBe(""color"");
  3130 |         expect(parsedInput[0].color).toBe(errorColor);
  3131 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3134, 'column': 22, 'index': 114050}","  3132 |
  3133 |     it(""should build katex-error span for other type of KaTeX error"", function() {
> 3134 |         const built = getBuilt(`2^2^2`, noThrowSettings);
       |                      ^ Lazy Test
  3135 |         expect(built).toMatchSnapshot();
  3136 |     });
  3137 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3469, 'column': 27, 'index': 126808}","  3467 |         const parsedBare = getParsed`~`;
  3468 |         expect(parsedBare[0].type).toEqual(""spacing"");
> 3469 |         const parsedChar = getParsed(""\\char`\\~"");
       |                           ^ Lazy Test
  3470 |         expect(parsedChar[0].type).toEqual(""textord"");
  3471 |     });
  3472 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4041, 'column': 22, 'index': 150769}","  4039 |
  4040 |     it(""should clamp size when set"", function() {
> 4041 |         const built = getBuilt(rule, new Settings({maxSize: 5}))[0];
       |                      ^ Lazy Test
  4042 |         expect(built.style.borderRightWidth).toEqual(""5em"");
  4043 |         expect(built.style.borderTopWidth).toEqual(""5em"");
  4044 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4047, 'column': 22, 'index': 151025}","  4045 |
  4046 |     it(""should not clamp size when not set"", function() {
> 4047 |         const built = getBuilt(rule)[0];
       |                      ^ Lazy Test
  4048 |         expect(built.style.borderRightWidth).toEqual(""999em"");
  4049 |         expect(built.style.borderTopWidth).toEqual(""999em"");
  4050 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4053, 'column': 22, 'index': 151283}","  4051 |
  4052 |     it(""should make zero-width rules if a negative maxSize is passed"", function() {
> 4053 |         const built = getBuilt(rule, new Settings({maxSize: -5}))[0];
       |                      ^ Lazy Test
  4054 |         expect(built.style.borderRightWidth).toEqual(""0em"");
  4055 |         expect(built.style.borderTopWidth).toEqual(""0em"");
  4056 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 92, 'column': 48, 'index': 2613}","  90 |             let group = parse[i];
  91 |             if (group.type === ""htmlmathml"") {
> 92 |                 expect(group.html).toHaveLength(1);
     |                                                ^ Magic Number
  93 |                 group = group.html[0];
  94 |             }
  95 |             if (group.type === ""mclass"") {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 114, 'column': 44, 'index': 3404}","  112 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
  113 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
> 114 |         expect(mml.children.length).toEqual(1);
      |                                            ^ Magic Number
  115 |     });
  116 | });
  117 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 346, 'column': 35, 'index': 10074}","  344 |         const parse = getParsed`{xy}`;
  345 |
> 346 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  347 |
  348 |         const ord = parse[0];
  349 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 368, 'column': 35, 'index': 10676}","  366 |         const parse = getParsed`\begingroup xy \endgroup`;
  367 |
> 368 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  369 |
  370 |         const ord = parse[0];
  371 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 391, 'column': 35, 'index': 11303}","  389 |         const parse = getParsed`\Large abc`;
  390 |
> 391 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  392 |
  393 |         const sizing = parse[0];
  394 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 403, 'column': 35, 'index': 11626}","  401 |         const parse = getParsed`a \Large abc`;
  402 |
> 403 |         expect(parse).toHaveLength(2);
      |                                   ^ Magic Number
  404 |
  405 |         const sizing = parse[1];
  406 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 408, 'column': 41, 'index': 11753}","  406 |
  407 |         expect(sizing.type).toEqual(""sizing"");
> 408 |         expect(sizing.body).toHaveLength(3);
      |                                         ^ Magic Number
  409 |     });
  410 |
  411 |     it(""should stop at the ends of groups"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 418, 'column': 41, 'index': 12036}","  416 |
  417 |         expect(sizing.type).toEqual(""sizing"");
> 418 |         expect(sizing.body).toHaveLength(1);
      |                                         ^ Magic Number
  419 |     });
  420 |
  421 |     describe(""within optional groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 594, 'column': 40, 'index': 17956}","  592 |
  593 |         const numer = parse.numer;
> 594 |         expect(numer.body).toHaveLength(4);
      |                                        ^ Magic Number
  595 |     });
  596 |
  597 |     it(""should create a denominator from the atoms after \\over"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 601, 'column': 40, 'index': 18173}","  599 |
  600 |         const denom = parse.denom;
> 601 |         expect(denom.body).toHaveLength(4);
      |                                        ^ Magic Number
  602 |     });
  603 |
  604 |     it(""should handle empty numerators"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 741, 'column': 37, 'index': 22981}","  739 |         const group = parse.body;
  740 |
> 741 |         expect(group.length).toEqual(4);
      |                                     ^ Magic Number
  742 |         expect(group[0].type).toEqual(""spacing"");
  743 |         expect(group[1].type).toEqual(""textord"");
  744 |         expect(group[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 759, 'column': 40, 'index': 23653}","  757 |         const parse = getParsed(leadingSpaceTextExpression)[0];
  758 |         // [m, o, o]
> 759 |         expect(parse.body).toHaveLength(3);
      |                                        ^ Magic Number
  760 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");
  761 |     });
  762 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 969, 'column': 40, 'index': 30877}","  967 |         const bigParse = getParsed(bigDelim)[0];
  968 |
> 969 |         expect(smallParse.size).toEqual(1);
      |                                        ^ Magic Number
  970 |         expect(bigParse.size).toEqual(4);
  971 |     });
  972 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 970, 'column': 38, 'index': 30919}","  968 |
  969 |         expect(smallParse.size).toEqual(1);
> 970 |         expect(bigParse.size).toEqual(4);
      |                                      ^ Magic Number
  971 |     });
  972 | });
  973 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1060, 'column': 57, 'index': 33636}","  1058 |         const hardNumberParse = getParsed(hardNumberRule)[0];
  1059 |
> 1060 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
       |                                                         ^ Magic Number
  1061 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
  1062 |     });
  1063 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1061, 'column': 58, 'index': 33701}","  1059 |
  1060 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
> 1061 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
       |                                                          ^ Magic Number
  1062 |     });
  1063 |
  1064 |     it(""should parse negative sizes"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1108, 'column': 51, 'index': 35246}","  1106 |     it(""should parse positive sizes"", function() {
  1107 |         const parse = getParsed`\kern{+1em}`[0];
> 1108 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1109 |     });
  1110 | });
  1111 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1143, 'column': 38, 'index': 36516}","  1141 |         const abParse3 = getParsed(abKern3);
  1142 |
> 1143 |         expect(abParse1).toHaveLength(3);
       |                                      ^ Magic Number
  1144 |         expect(abParse1[0].text).toEqual(""a"");
  1145 |         expect(abParse1[2].text).toEqual(""b"");
  1146 |         expect(abParse2).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1146, 'column': 38, 'index': 36652}","  1144 |         expect(abParse1[0].text).toEqual(""a"");
  1145 |         expect(abParse1[2].text).toEqual(""b"");
> 1146 |         expect(abParse2).toHaveLength(3);
       |                                      ^ Magic Number
  1147 |         expect(abParse2[0].text).toEqual(""a"");
  1148 |         expect(abParse2[2].text).toEqual(""b"");
  1149 |         expect(abParse3).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1149, 'column': 38, 'index': 36788}","  1147 |         expect(abParse2[0].text).toEqual(""a"");
  1148 |         expect(abParse2[2].text).toEqual(""b"");
> 1149 |         expect(abParse3).toHaveLength(3);
       |                                      ^ Magic Number
  1150 |         expect(abParse3[0].text).toEqual(""a"");
  1151 |         expect(abParse3[2].text).toEqual(""b"");
  1152 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1166, 'column': 51, 'index': 37357}","  1164 |     it(""should parse positive sizes"", function() {
  1165 |         const parse = getParsed`\kern+1em`[0];
> 1166 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1167 |     });
  1168 |
  1169 |     it(""should handle whitespace"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1172, 'column': 37, 'index': 37519}","  1170 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
  1171 |
> 1172 |         expect(abParse).toHaveLength(3);
       |                                     ^ Magic Number
  1173 |         expect(abParse[0].text).toEqual(""a"");
  1174 |         expect(abParse[1].dimension.unit).toEqual(""mu"");
  1175 |         expect(abParse[2].text).toEqual(""b"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1325, 'column': 37, 'index': 42815}","  1323 |     it(""should eat a final newline"", function() {
  1324 |         const m3 = getParsed`\begin{matrix}a&b\\ c&d \\ \end{matrix}`[0];
> 1325 |         expect(m3.body).toHaveLength(2);
       |                                     ^ Magic Number
  1326 |     });
  1327 |
  1328 |     it(""should grab \\arraystretch"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1572, 'column': 41, 'index': 51001}","  1570 |         const displayBody = displayNode.body;
  1571 |
> 1572 |         expect(displayBody).toHaveLength(2);
       |                                         ^ Magic Number
  1573 |         expect(displayBody[0].text).toEqual(""e"");
  1574 |     });
  1575 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1626, 'column': 36, 'index': 53036}","  1624 |
  1625 |         const bbBody = nestedParse.body.body;
> 1626 |         expect(bbBody).toHaveLength(3);
       |                                    ^ Magic Number
  1627 |         expect(bbBody[0].type).toEqual(""mathord"");
  1628 |         expect(bbBody[2].type).toEqual(""font"");
  1629 |         expect(bbBody[2].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1638, 'column': 34, 'index': 53564}","  1636 |         expect(colorMathbbParse.color).toEqual(""blue"");
  1637 |         const body = colorMathbbParse.body;
> 1638 |         expect(body).toHaveLength(1);
       |                                  ^ Magic Number
  1639 |         expect(body[0].type).toEqual(""font"");
  1640 |         expect(body[0].font).toEqual(""mathbb"");
  1641 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1651, 'column': 42, 'index': 54028}","  1649 |         expect(bf.type).toEqual(""font"");
  1650 |         expect(bf.font).toEqual(""mathbf"");
> 1651 |         expect(bf.body.body).toHaveLength(3);
       |                                          ^ Magic Number
  1652 |         expect(bf.body.body[0].text).toEqual(""a"");
  1653 |         expect(bf.body.body[1].type).toEqual(""font"");
  1654 |         expect(bf.body.body[1].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2224, 'column': 45, 'index': 79889}","  2222 |         // Just a few quick sanity checks here...
  2223 |         const markup = katex.renderToString(r`\sigma^2`);
> 2224 |         expect(markup.indexOf(""<span"")).toBe(0);
       |                                             ^ Magic Number
  2225 |         expect(markup).toContain(""\u03c3"");  // sigma
  2226 |         expect(markup).toContain(""margin-right"");
  2227 |         expect(markup).not.toContain(""marginRight"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2730, 'column': 39, 'index': 97107}","  2728 |             parseTree(r`\sqrt}`, new Settings());
  2729 |         } catch (e) {
> 2730 |             expect(e.position).toEqual(5);
       |                                       ^ Magic Number
  2731 |         }
  2732 |     });
  2733 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2864, 'column': 37, 'index': 101402}","  2862 |     it(""should not eat the last row when its first cell is empty"", function() {
  2863 |         const ae = getParsed`\begin{aligned}&E_1 & (1)\\&E_2 & (2)\\&E_3 & (3)\end{aligned}`[0];
> 2864 |         expect(ae.body).toHaveLength(3);
       |                                     ^ Magic Number
  2865 |     });
  2866 | });
  2867 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3155, 'column': 40, 'index': 114959}","  3153 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");
  3154 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
> 3155 |             expect(error.position).toBe(4);
       |                                        ^ Magic Number
  3156 |             expect(error.length).toBe(5);
  3157 |         }
  3158 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3156, 'column': 38, 'index': 115001}","  3154 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
  3155 |             expect(error.position).toBe(4);
> 3156 |             expect(error.length).toBe(5);
       |                                      ^ Magic Number
  3157 |         }
  3158 |     });
  3159 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3170, 'column': 40, 'index': 115653}","  3168 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");
  3169 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
> 3170 |             expect(error.position).toBe(7);
       |                                        ^ Magic Number
  3171 |             expect(error.length).toBe(0);
  3172 |         }
  3173 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3171, 'column': 38, 'index': 115695}","  3169 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
  3170 |             expect(error.position).toBe(7);
> 3171 |             expect(error.length).toBe(0);
       |                                      ^ Magic Number
  3172 |         }
  3173 |     });
  3174 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 749}","  747 |
  748 |     it(""should handle backslash followed by newline"", () => {
> 749 |         expect(""\\text{\\ \t\r \n \t\r  }"").toParseLike`\text{\ }`;
      |        ^ Redundant Assertion
  750 |     });
  751 |
  752 |     it(""should accept math mode tokens after its argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1720}","  1718 | describe(""A comment parser"", function() {
  1719 |     it(""should parse comments at the end of a line"", () => {
> 1720 |         expect(""a^2 + b^2 = c^2 % Pythagoras' Theorem\n"").toParse();
       |        ^ Redundant Assertion
  1721 |     });
  1722 |
  1723 |     it(""should parse comments at the start of a line"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1724}","  1722 |
  1723 |     it(""should parse comments at the start of a line"", () => {
> 1724 |         expect(""% comment\n"").toParse();
       |        ^ Redundant Assertion
  1725 |     });
  1726 |
  1727 |     it(""should parse multiple lines of comments in a row"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1728}","  1726 |
  1727 |     it(""should parse multiple lines of comments in a row"", () => {
> 1728 |         expect(""% comment 1\n% comment 2\n"").toParse();
       |        ^ Redundant Assertion
  1729 |     });
  1730 |
  1731 |     it(""should parse comments between subscript and superscript"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1732}","  1730 |
  1731 |     it(""should parse comments between subscript and superscript"", () => {
> 1732 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
       |        ^ Redundant Assertion
  1733 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
  1734 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1735 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1733}","  1731 |     it(""should parse comments between subscript and superscript"", () => {
  1732 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
> 1733 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
       |        ^ Redundant Assertion
  1734 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1735 |     });
  1736 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1734}","  1732 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
  1733 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
> 1734 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
       |        ^ Redundant Assertion
  1735 |     });
  1736 |
  1737 |     it(""should parse comments in size and color groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1738}","  1736 |
  1737 |     it(""should parse comments in size and color groups"", () => {
> 1738 |         expect(""\\kern{1 %kern\nem}"").toParse();
       |        ^ Redundant Assertion
  1739 |         expect(""\\kern1 %kern\nem"").toParse();
  1740 |         expect(""\\color{#f00%red\n}"").toParse();
  1741 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1739}","  1737 |     it(""should parse comments in size and color groups"", () => {
  1738 |         expect(""\\kern{1 %kern\nem}"").toParse();
> 1739 |         expect(""\\kern1 %kern\nem"").toParse();
       |        ^ Redundant Assertion
  1740 |         expect(""\\color{#f00%red\n}"").toParse();
  1741 |     });
  1742 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1740}","  1738 |         expect(""\\kern{1 %kern\nem}"").toParse();
  1739 |         expect(""\\kern1 %kern\nem"").toParse();
> 1740 |         expect(""\\color{#f00%red\n}"").toParse();
       |        ^ Redundant Assertion
  1741 |     });
  1742 |
  1743 |     it(""should parse comments before an expression"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1744}","  1742 |
  1743 |     it(""should parse comments before an expression"", () => {
> 1744 |         expect(""%comment\n{2}"").toParseLike`{2}`;
       |        ^ Redundant Assertion
  1745 |     });
  1746 |
  1747 |     it(""should parse comments before and between \\hline"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1754}","  1752 |
  1753 |     it(""should parse comments in the macro definition"", () => {
> 1754 |         expect(""\\def\\foo{1 %}\n2}\n\\foo"").toParseLike`12`;
       |        ^ Redundant Assertion
  1755 |     });
  1756 |
  1757 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1758}","  1756 |
  1757 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {
> 1758 |         expect(""\\def\\foo{1\n2}\nx %\\foo\n"").toParseLike`x`;
       |        ^ Redundant Assertion
  1759 |     });
  1760 |
  1761 |     it(""should not parse a comment without newline in strict mode"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1767}","  1765 |
  1766 |     it(""should not produce or consume space"", () => {
> 1767 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
       |        ^ Redundant Assertion
  1768 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
  1769 |     });
  1770 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1768}","  1766 |     it(""should not produce or consume space"", () => {
  1767 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
> 1768 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
       |        ^ Redundant Assertion
  1769 |     });
  1770 |
  1771 |     it(""should not include comments in the output"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1772}","  1770 |
  1771 |     it(""should not include comments in the output"", () => {
> 1772 |         expect(""5 % comment\n"").toParseLike`5`;
       |        ^ Redundant Assertion
  1773 |     });
  1774 | });
  1775 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 16, 'line': 2167}","  2165 |
  2166 |                 // Render is expected to throw, so this should not be called.
> 2167 |                 expect(true).toBe(false);
       |                ^ Redundant Assertion
  2168 |             } catch (error) {
  2169 |                 expect(error).toBeInstanceOf(ParseError);
  2170 |                 const message =",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 2969}","  2967 |         expect`\href%end`.toParseLike(""\\href{%}end"", trustSettings);
  2968 |         expect`\url%end`.toParseLike(""\\url{%}end"", trustSettings);
> 2969 |         expect(""\\url%%end\n"").toParseLike(""\\url{%}"", trustSettings);
       |        ^ Redundant Assertion
  2970 |         expect`\url end`.toParseLike(""\\url{e}nd"", trustSettings);
  2971 |         expect`\url%end`.toParseLike(""\\url {%}end"", trustSettings);
  2972 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3012}","  3010 |
  3011 |     it(""should allow comments after URLs"", function() {
> 3012 |         expect(""\\url{http://example.com/}%comment\n"").toBuild();
       |        ^ Redundant Assertion
  3013 |     });
  3014 |
  3015 |     it(""should be marked up correctly"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3150}","  3148 |
  3149 |             // Render is expected to throw, so this should not be called.
> 3150 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3151 |         } catch (error) {
  3152 |             expect(error).toBeInstanceOf(ParseError);
  3153 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3165}","  3163 |
  3164 |             // Render is expected to throw, so this should not be called.
> 3165 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3166 |         } catch (error) {
  3167 |             expect(error).toBeInstanceOf(ParseError);
  3168 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3180}","  3178 |
  3179 |             // Render is expected to throw, so this should not be called.
> 3180 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3181 |         } catch (error) {
  3182 |             expect(error).toBeInstanceOf(ParseError);
  3183 |             expect(error.message).toBe(""KaTeX parse error: \\verb ended by end of line instead of matching delimiter"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3453}","  3451 |
  3452 |     it(""\\char produces literal characters"", () => {
> 3453 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
       |        ^ Redundant Assertion
  3454 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3455 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3456 |         expect(""\\char`\\%"").toParseLike`\char""25`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3454}","  3452 |     it(""\\char produces literal characters"", () => {
  3453 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3454 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Redundant Assertion
  3455 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3456 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3457 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3455}","  3453 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3454 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3455 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Redundant Assertion
  3456 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3457 |         expect`\char`.not.toParse();
  3458 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3456}","  3454 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3455 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3456 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Redundant Assertion
  3457 |         expect`\char`.not.toParse();
  3458 |         expect(""\\char`"").not.toParse();
  3459 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3458}","  3456 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3457 |         expect`\char`.not.toParse();
> 3458 |         expect(""\\char`"").not.toParse();
       |        ^ Redundant Assertion
  3459 |         expect`\char'`.not.toParse();
  3460 |         expect`\char""`.not.toParse();
  3461 |         expect`\char'a`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3922}","  3920 |
  3921 |     it(""should parse combining characters"", function() {
> 3922 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
       |        ^ Redundant Assertion
  3923 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
  3924 |     });
  3925 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3923}","  3921 |     it(""should parse combining characters"", function() {
  3922 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
> 3923 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
       |        ^ Redundant Assertion
  3924 |     });
  3925 |
  3926 |     it(""should parse multi-accented characters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3961}","  3959 |
  3960 |     it(""should parse symbols"", function() {
> 3961 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3962 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
  3963 |     });
  3964 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3962}","  3960 |     it(""should parse symbols"", function() {
  3961 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
> 3962 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3963 |     });
  3964 |
  3965 |     it(""should build Greek capital letters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3979}","  3977 |
  3978 |     it(""should build binary operators"", function() {
> 3979 |         expect(""±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞\u22C5\u2218\u2216\u2219"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3980 |     });
  3981 |
  3982 |     it(""should build common ords"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3983}","  3981 |
  3982 |     it(""should build common ords"", function() {
> 3983 |         expect(""§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3984 |     });
  3985 |
  3986 |     it(""should build delimiters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3987}","  3985 |
  3986 |     it(""should build delimiters"", function() {
> 3987 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
       |        ^ Redundant Assertion
  3988 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  3989 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  3990 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3988}","  3986 |     it(""should build delimiters"", function() {
  3987 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
> 3988 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
       |        ^ Redundant Assertion
  3989 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  3990 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  3991 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3989}","  3987 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
  3988 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
> 3989 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
       |        ^ Redundant Assertion
  3990 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  3991 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  3992 |         expect`┌x┐ └x┘`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3990}","  3988 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  3989 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
> 3990 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
       |        ^ Redundant Assertion
  3991 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  3992 |         expect`┌x┐ └x┘`.toBuild();
  3993 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3991}","  3989 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  3990 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
> 3991 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
       |        ^ Redundant Assertion
  3992 |         expect`┌x┐ └x┘`.toBuild();
  3993 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  3994 |         expect(""\u27E6x\u27E7"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3993}","  3991 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  3992 |         expect`┌x┐ └x┘`.toBuild();
> 3993 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
       |        ^ Redundant Assertion
  3994 |         expect(""\u27E6x\u27E7"").toBuild();
  3995 |         expect(""\\llbracket \\rrbracket"").toBuild();
  3996 |         expect(""\\lBrace \\rBrace"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3994}","  3992 |         expect`┌x┐ └x┘`.toBuild();
  3993 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
> 3994 |         expect(""\u27E6x\u27E7"").toBuild();
       |        ^ Redundant Assertion
  3995 |         expect(""\\llbracket \\rrbracket"").toBuild();
  3996 |         expect(""\\lBrace \\rBrace"").toBuild();
  3997 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3995}","  3993 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  3994 |         expect(""\u27E6x\u27E7"").toBuild();
> 3995 |         expect(""\\llbracket \\rrbracket"").toBuild();
       |        ^ Redundant Assertion
  3996 |         expect(""\\lBrace \\rBrace"").toBuild();
  3997 |     });
  3998 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3996}","  3994 |         expect(""\u27E6x\u27E7"").toBuild();
  3995 |         expect(""\\llbracket \\rrbracket"").toBuild();
> 3996 |         expect(""\\lBrace \\rBrace"").toBuild();
       |        ^ Redundant Assertion
  3997 |     });
  3998 |
  3999 |     it(""should build some surrogate pairs"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4266, 'column': 19, 'index': 159891}","  4264 |             expect`\message{Hello, world}`.toParse();
  4265 |             // eslint-disable-next-line no-console
> 4266 |             expect(console.log).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4267 |         });
  4268 |     });
  4269 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4275, 'column': 19, 'index': 160256}","  4273 |             expect`\errmessage{Hello, world}`.toParse();
  4274 |             // eslint-disable-next-line no-console
> 4275 |             expect(console.error).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4276 |         });
  4277 |     });
  4278 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 23}","  21 |
  22 | describe(""A parser"", function() {
> 23 |     it(""should not fail on an empty string"", function() {
     |    ^ Unknown Test
  24 |         expect``.toParse(strictSettings);
  25 |     });
  26 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 27}","  25 |     });
  26 |
> 27 |     it(""should ignore whitespace"", function() {
     |    ^ Unknown Test
  28 |         expect`    x    y    `.toParseLike(""xy"", strictSettings);
  29 |     });
  30 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 31}","  29 |     });
  30 |
> 31 |     it(""should ignore whitespace in atom"", function() {
     |    ^ Unknown Test
  32 |         expect`    x   ^ y    `.toParseLike(""x^y"", strictSettings);
  33 |     });
  34 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 106}","  104 |
  105 | describe(""A mathinner parser"", function() {
> 106 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  107 |         expect`\mathinner{\langle{\psi}\rangle}`.toParse();
  108 |         expect`\frac 1 {\mathinner{\langle{\psi}\rangle}}`.toParse();
  109 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 173}","  171 |
  172 | describe(""A \\KaTeX parser"", function() {
> 173 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  174 |         expect`\KaTeX`.toParse();
  175 |     });
  176 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 179}","  177 |
  178 | describe(""A subscript and superscript parser"", function() {
> 179 |     it(""should not fail on superscripts"", function() {
      |    ^ Unknown Test
  180 |         expect`x^2`.toParse();
  181 |     });
  182 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 183}","  181 |     });
  182 |
> 183 |     it(""should not fail on subscripts"", function() {
      |    ^ Unknown Test
  184 |         expect`x_3`.toParse();
  185 |     });
  186 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 187}","  185 |     });
  186 |
> 187 |     it(""should not fail on both subscripts and superscripts"", function() {
      |    ^ Unknown Test
  188 |         expect`x^2_3`.toParse();
  189 |
  190 |         expect`x_2^3`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 193}","  191 |     });
  192 |
> 193 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  194 |         expect`^3`.toParse();
  195 |         expect`^3+`.toParse();
  196 |         expect`_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 237}","  235 |     });
  236 |
> 237 |     it(""should produce the same thing regardless of order"", function() {
      |    ^ Unknown Test
  238 |         expect`x^2_3`.toParseLike`x_3^2`;
  239 |     });
  240 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 241}","  239 |     });
  240 |
> 241 |     it(""should not parse double subscripts or superscripts"", function() {
      |    ^ Unknown Test
  242 |         expect`x^x^x`.not.toParse();
  243 |
  244 |         expect`x_x_x`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 255}","  253 |     });
  254 |
> 255 |     it(""should work correctly with {}s"", function() {
      |    ^ Unknown Test
  256 |         expect`x^{2+3}`.toParse();
  257 |
  258 |         expect`x_{3-2}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 273}","  271 |     });
  272 |
> 273 |     it(""should work with nested super/subscripts"", function() {
      |    ^ Unknown Test
  274 |         expect`x^{x^x}`.toParse();
  275 |         expect`x^{x_x}`.toParse();
  276 |         expect`x_{x^x}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 280}","  278 |     });
  279 |
> 280 |     it(""should work with Unicode (sub|super)script characters"", function() {
      |    ^ Unknown Test
  281 |         expect`A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃`.toParseLike`A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}`;
  282 |     });
  283 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 284}","  282 |     });
  283 |
> 284 |     it(""should not fail if \\relax is in an atom"", function() {
      |    ^ Unknown Test
  285 |         expect`\hskip1em\relax^2`.toParse(strictSettings);
  286 |     });
  287 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 288}","  286 |     });
  287 |
> 288 |     it(""should skip \\relax in super/subscripts"", function() {
      |    ^ Unknown Test
  289 |         expect`x^\relax 2`.toParseLike`x^2`;
  290 |         expect`x_\relax 2`.toParseLike`x_2`;
  291 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 295}","  293 |
  294 | describe(""A subscript and superscript tree-builder"", function() {
> 295 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  296 |         expect`^3`.toBuild();
  297 |         expect`_2`.toBuild();
  298 |         expect`^3_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 304}","  302 |
  303 | describe(""A parser with limit controls"", function() {
> 304 |     it(""should fail when the limit control is not preceded by an op node"", function() {
      |    ^ Unknown Test
  305 |         expect`3\nolimits_2^2`.not.toParse();
  306 |         expect`\sqrt\limits_2^2`.not.toParse();
  307 |         expect`45 +\nolimits 45`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 310}","  308 |     });
  309 |
> 310 |     it(""should parse when the limit control directly follows an op node"", function() {
      |    ^ Unknown Test
  311 |         expect`\int\limits_2^2 3`.toParse();
  312 |         expect`\sum\nolimits_3^4 4`.toParse();
  313 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 315}","  313 |     });
  314 |
> 315 |     it(""should parse when the limit control is in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  316 |         expect`\int_2^2\limits`.toParse();
  317 |         expect`\int^2\nolimits_2`.toParse();
  318 |         expect`\int_2\limits^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 321}","  319 |     });
  320 |
> 321 |     it(""should allow multiple limit controls in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  322 |         expect`\int_2\nolimits^2\limits 3`.toParse();
  323 |         expect`\int\nolimits\limits_2^2`.toParse();
  324 |         expect`\int\limits\limits\limits_2^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 339}","  337 |
  338 | describe(""A group parser"", function() {
> 339 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  340 |         expect`{xy}`.toParse();
  341 |     });
  342 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 356}","  354 |
  355 | describe(""A \\begingroup...\\endgroup parser"", function() {
> 356 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  357 |         expect`\begingroup xy \endgroup`.toParse();
  358 |     });
  359 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 360}","  358 |     });
  359 |
> 360 |     it(""should fail when it is mismatched"", function() {
      |    ^ Unknown Test
  361 |         expect`\begingroup xy`.not.toParse();
  362 |         expect`\begingroup xy }`.not.toParse();
  363 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 377}","  375 |     });
  376 |
> 377 |     it(""should not affect spacing in math mode"", function() {
      |    ^ Unknown Test
  378 |         expect`\begingroup x+ \endgroup y`.toBuildLike`x+y`;
  379 |     });
  380 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 383}","  381 |
  382 | describe(""An implicit group parser"", function() {
> 383 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  384 |         expect`\Large x`.toParse();
  385 |         expect`abc {abc \Large xyz} abc`.toParse();
  386 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 445}","  443 |
  444 | describe(""A function parser"", function() {
> 445 |     it(""should parse no argument functions"", function() {
      |    ^ Unknown Test
  446 |         expect`\div`.toParse();
  447 |     });
  448 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 449}","  447 |     });
  448 |
> 449 |     it(""should parse 1 argument functions"", function() {
      |    ^ Unknown Test
  450 |         expect`\blue x`.toParse();
  451 |     });
  452 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 453}","  451 |     });
  452 |
> 453 |     it(""should parse 2 argument functions"", function() {
      |    ^ Unknown Test
  454 |         expect`\frac 1 2`.toParse();
  455 |     });
  456 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 457}","  455 |     });
  456 |
> 457 |     it(""should not parse 1 argument functions with no arguments"", function() {
      |    ^ Unknown Test
  458 |         expect`\blue`.not.toParse();
  459 |     });
  460 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 461}","  459 |     });
  460 |
> 461 |     it(""should not parse 2 argument functions with 0 or 1 arguments"", function() {
      |    ^ Unknown Test
  462 |         expect`\frac`.not.toParse();
  463 |
  464 |         expect`\frac 1`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 467}","  465 |     });
  466 |
> 467 |     it(""should not parse a function with text right after it"", function() {
      |    ^ Unknown Test
  468 |         expect`\redx`.not.toParse();
  469 |     });
  470 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 471}","  469 |     });
  470 |
> 471 |     it(""should parse a function with a number right after it"", function() {
      |    ^ Unknown Test
  472 |         expect`\frac12`.toParse();
  473 |     });
  474 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 475}","  473 |     });
  474 |
> 475 |     it(""should parse some functions with text right after it"", function() {
      |    ^ Unknown Test
  476 |         expect`\;x`.toParse();
  477 |     });
  478 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 628}","  626 |     });
  627 |
> 628 |     it(""should handle \\textstyle correctly"", function() {
      |    ^ Unknown Test
  629 |         expect`\textstyle 1 \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  630 |         expect`{\textstyle 1} \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  631 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 654}","  652 |
  653 | describe(""A genfrac builder"", function() {
> 654 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  655 |         expect`\frac{x}{y}`.toBuild();
  656 |         expect`\dfrac{x}{y}`.toBuild();
  657 |         expect`\tfrac{x}{y}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 667}","  665 |
  666 | describe(""A infix builder"", function() {
> 667 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  668 |         expect`a \over b`.toBuild();
  669 |         expect`a \atop b`.toBuild();
  670 |         expect`a \choose b`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 763}","  761 |     });
  762 |
> 763 |     it(""should parse math within text group"", function() {
      |    ^ Unknown Test
  764 |         expect`\text{graph: $y = mx + b$}`.toParse(strictSettings);
  765 |         expect`\text{graph: \(y = mx + b\)}`.toParse(strictSettings);
  766 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 768}","  766 |     });
  767 |
> 768 |     it(""should parse math within text within math within text"", function() {
      |    ^ Unknown Test
  769 |         expect`\text{hello $x + \text{world $y$} + z$}`.toParse(strictSettings);
  770 |         expect`\text{hello \(x + \text{world $y$} + z\)}`.toParse(strictSettings);
  771 |         expect`\text{hello $x + \text{world \(y\)} + z$}`.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 775}","  773 |     });
  774 |
> 775 |     it(""should forbid \\( within math mode"", function() {
      |    ^ Unknown Test
  776 |         expect`\(`.not.toParse();
  777 |         expect`\text{$\(x\)$}`.not.toParse();
  778 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 780}","  778 |     });
  779 |
> 780 |     it(""should forbid $ within math mode"", function() {
      |    ^ Unknown Test
  781 |         expect`$x$`.not.toParse();
  782 |         expect`\text{\($x$\)}`.not.toParse();
  783 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 785}","  783 |     });
  784 |
> 785 |     it(""should detect unbalanced \\)"", function() {
      |    ^ Unknown Test
  786 |         expect`\)`.not.toParse();
  787 |         expect`\text{\)}`.not.toParse();
  788 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 790}","  788 |     });
  789 |
> 790 |     it(""should detect unbalanced $"", function() {
      |    ^ Unknown Test
  791 |         expect`$`.not.toParse();
  792 |         expect`\text{$}`.not.toParse();
  793 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 795}","  793 |     });
  794 |
> 795 |     it(""should not mix $ and \\(..\\)"", function() {
      |    ^ Unknown Test
  796 |         expect`\text{$x\)}`.not.toParse();
  797 |         expect`\text{\(x$}`.not.toParse();
  798 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 800}","  798 |     });
  799 |
> 800 |     it(""should parse spacing functions"", function() {
      |    ^ Unknown Test
  801 |         expect`a b\, \; \! \: \> ~ \thinspace \medspace \quad \ `.toBuild();
  802 |         expect`\enspace \thickspace \qquad \space \nobreakspace`.toBuild();
  803 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 805}","  803 |     });
  804 |
> 805 |     it(""should omit spaces after commands"", function() {
      |    ^ Unknown Test
  806 |         expect`\text{\textellipsis !}`.toParseLike`\text{\textellipsis!}`;
  807 |     });
  808 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 809}","  807 |     });
  808 |
> 809 |     it(""should handle ⋮ and \\vdots"", function() {
      |    ^ Unknown Test
  810 |         expect`\text{a \vdots b ⋮ d}`.toParse();
  811 |     });
  812 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 815}","  813 |
  814 | describe(""A texvc builder"", function() {
> 815 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  816 |         expect`\lang\N\darr\R\dArr\Z\Darr\alef\rang`.toBuild();
  817 |         expect`\alefsym\uarr\Alpha\uArr\Beta\Uarr\Chi`.toBuild();
  818 |         expect`\clubs\diamonds\hearts\spades\cnums\Complex`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 989}","  987 |
  988 | describe(""An lap parser"", function() {
> 989 |     it(""should not fail on a text argument"", function() {
      |    ^ Unknown Test
  990 |         expect`\rlap{\,/}{=}`.toParse();
  991 |         expect`\mathrlap{\,/}{=}`.toParse();
  992 |         expect`{=}\llap{/\,}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 998}","   996 |     });
   997 |
>  998 |     it(""should not fail if math version is used"", function() {
       |    ^ Unknown Test
   999 |         expect`\mathrlap{\frac{a}{b}}{=}`.toParse();
  1000 |         expect`{=}\mathllap{\frac{a}{b}}`.toParse();
  1001 |         expect`\sum_{\mathclap{\frac{a}{b}}}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1004}","  1002 |     });
  1003 |
> 1004 |     it(""should fail on math if AMS version is used"", function() {
       |    ^ Unknown Test
  1005 |         expect`\rlap{\frac{a}{b}}{=}`.not.toParse();
  1006 |         expect`{=}\llap{\frac{a}{b}}`.not.toParse();
  1007 |         expect`\sum_{\clap{\frac{a}{b}}}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1260}","  1258 | describe(""A begin/end parser"", function() {
  1259 |
> 1260 |     it(""should parse a simple environment"", function() {
       |    ^ Unknown Test
  1261 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1262 |     });
  1263 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1264}","  1262 |     });
  1263 |
> 1264 |     it(""should parse an environment with argument"", function() {
       |    ^ Unknown Test
  1265 |         expect`\begin{array}{cc}a&b\\c&d\end{array}`.toParse();
  1266 |     });
  1267 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1268}","  1266 |     });
  1267 |
> 1268 |     it(""should parse and build an empty environment"", function() {
       |    ^ Unknown Test
  1269 |         expect`\begin{aligned}\end{aligned}`.toBuild();
  1270 |         expect`\begin{matrix}\end{matrix}`.toBuild();
  1271 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1273}","  1271 |     });
  1272 |
> 1273 |     it(""should parse an environment with hlines"", function() {
       |    ^ Unknown Test
  1274 |         expect`\begin{matrix}\hline a&b\\ \hline c&d\end{matrix}`.toParse();
  1275 |         expect`\begin{matrix}\hline a&b\cr \hline c&d\end{matrix}`.toParse();
  1276 |         expect`\begin{matrix}\hdashline a&b\\ \hdashline c&d\end{matrix}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1279}","  1277 |     });
  1278 |
> 1279 |     it(""should forbid hlines outside array environment"", () => {
       |    ^ Unknown Test
  1280 |         expect`\hline`.not.toParse();
  1281 |     });
  1282 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1283}","  1281 |     });
  1282 |
> 1283 |     it(""should error when name is mismatched"", function() {
       |    ^ Unknown Test
  1284 |         expect`\begin{matrix}a&b\\c&d\end{pmatrix}`.not.toParse();
  1285 |     });
  1286 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1287}","  1285 |     });
  1286 |
> 1287 |     it(""should error when commands are mismatched"", function() {
       |    ^ Unknown Test
  1288 |         expect`\begin{matrix}a&b\\c&d\right{pmatrix}`.not.toParse();
  1289 |     });
  1290 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1291}","  1289 |     });
  1290 |
> 1291 |     it(""should error when end is missing"", function() {
       |    ^ Unknown Test
  1292 |         expect`\begin{matrix}a&b\\c&d`.not.toParse();
  1293 |     });
  1294 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1295}","  1293 |     });
  1294 |
> 1295 |     it(""should error when braces are mismatched"", function() {
       |    ^ Unknown Test
  1296 |         expect`{\begin{matrix}a&b\\c&d}\end{matrix}`.not.toParse();
  1297 |     });
  1298 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1299}","  1297 |     });
  1298 |
> 1299 |     it(""should cooperate with infix notation"", function() {
       |    ^ Unknown Test
  1300 |         expect`\begin{matrix}0&1\over2&3\\4&5&6\end{matrix}`.toParse();
  1301 |     });
  1302 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1309}","  1307 |     });
  1308 |
> 1309 |     it(""should allow \\cr and \\\\ as a line terminator"", function() {
       |    ^ Unknown Test
  1310 |         expect`\begin{matrix}a&b\cr c&d\end{matrix}`.toParse();
  1311 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1312 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1314}","  1312 |     });
  1313 |
> 1314 |     it(""should not allow \\cr to scan for an optional size argument"", function() {
       |    ^ Unknown Test
  1315 |         expect`\begin{matrix}a&b\cr[c]&d\end{matrix}`.toParse();
  1316 |     });
  1317 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1318}","  1316 |     });
  1317 |
> 1318 |     it(""should not treat [ after space as optional argument to \\\\"", function() {
       |    ^ Unknown Test
  1319 |         expect`\begin{matrix}a&b\\ [c]&d\end{matrix}`.toParse();
  1320 |         expect`a\\ [b]`.toParse();
  1321 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1333}","  1331 |     });
  1332 |
> 1333 |     it(""should allow an optional argument in {matrix*} and company."", function() {
       |    ^ Unknown Test
  1334 |         expect`\begin{matrix*}[r] a & -1 \\ -1 & d \end{matrix*}`.toBuild();
  1335 |         expect`\begin{pmatrix*}[r] a & -1 \\ -1 & d \end{pmatrix*}`.toBuild();
  1336 |         expect`\begin{bmatrix*}[r] a & -1 \\ -1 & d \end{bmatrix*}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1370}","  1368 |     });
  1369 |
> 1370 |     it(""should build sized square roots"", function() {
       |    ^ Unknown Test
  1371 |         expect`\Large\sqrt[3]{x}`.toBuild();
  1372 |     });
  1373 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1374}","  1372 |     });
  1373 |
> 1374 |     it(""should expand argument if optional argument doesn't exist"", function() {
       |    ^ Unknown Test
  1375 |         expect`\sqrt\foo`.toParseLike(""\\sqrt123"",
  1376 |             new Settings({macros: {""\\foo"": ""123""}}));
  1377 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1379}","  1377 |     });
  1378 |
> 1379 |     it(""should not expand argument if optional argument exists"", function() {
       |    ^ Unknown Test
  1380 |         expect`\sqrt[2]\foo`.toParseLike(""\\sqrt[2]{123}"",
  1381 |             new Settings({macros: {""\\foo"": ""123""}}));
  1382 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1386}","  1384 |
  1385 | describe(""A TeX-compliant parser"", function() {
> 1386 |     it(""should work"", function() {
       |    ^ Unknown Test
  1387 |         expect`\frac 2 3`.toParse();
  1388 |     });
  1389 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1405}","  1403 |     });
  1404 |
> 1405 |     it(""should fail when there are missing sup/subscripts"", function() {
       |    ^ Unknown Test
  1406 |         expect`x^`.not.toParse();
  1407 |         expect`x_`.not.toParse();
  1408 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1476}","  1474 |     });
  1475 |
> 1476 |     it(""should parse multiple primes correctly"", function() {
       |    ^ Unknown Test
  1477 |         expect`x''''`.toParse();
  1478 |         expect`x_2''`.toParse();
  1479 |         expect`x''_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1482}","  1480 |     });
  1481 |
> 1482 |     it(""should fail when sup/subscripts are interspersed with arguments"", function() {
       |    ^ Unknown Test
  1483 |         expect`\sqrt^23`.not.toParse();
  1484 |         expect`\frac^234`.not.toParse();
  1485 |         expect`\frac2^34`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1488}","  1486 |     });
  1487 |
> 1488 |     it(""should succeed when sup/subscripts come after whole functions"", function() {
       |    ^ Unknown Test
  1489 |         expect`\sqrt2^3`.toParse();
  1490 |         expect`\frac23^4`.toParse();
  1491 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1493}","  1491 |     });
  1492 |
> 1493 |     it(""should succeed with a sqrt around a text/frac"", function() {
       |    ^ Unknown Test
  1494 |         expect`\sqrt \frac x y`.toParse();
  1495 |         expect`\sqrt \text x`.toParse();
  1496 |         expect`x^\frac x y`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1530}","  1528 |
  1529 | describe(""An op symbol builder"", function() {
> 1530 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1531 |         expect`\int_i^n`.toBuild();
  1532 |         expect`\iint_i^n`.toBuild();
  1533 |         expect`\iiint_i^n`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1547}","  1545 |
  1546 | describe(""A style change parser"", function() {
> 1547 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1548 |         expect`\displaystyle x`.toParse();
  1549 |         expect`\textstyle x`.toParse();
  1550 |         expect`\scriptstyle x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1578}","  1576 |
  1577 | describe(""A font parser"", function() {
> 1578 |     it(""should parse \\mathrm, \\mathbb, \\mathit, and \\mathnormal"", function() {
       |    ^ Unknown Test
  1579 |         expect`\mathrm x`.toParse();
  1580 |         expect`\mathbb x`.toParse();
  1581 |         expect`\mathit x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1589}","  1587 |     });
  1588 |
> 1589 |     it(""should parse \\mathcal and \\mathfrak"", function() {
       |    ^ Unknown Test
  1590 |         expect`\mathcal{ABC123}`.toParse();
  1591 |         expect`\mathfrak{abcABC123}`.toParse();
  1592 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1643}","  1641 |     });
  1642 |
> 1643 |     it(""should not parse a series of font commands"", function() {
       |    ^ Unknown Test
  1644 |         expect`\mathbb \mathrm R`.not.toParse();
  1645 |     });
  1646 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1658}","  1656 |     });
  1657 |
> 1658 |     it(""should be allowed in the argument"", function() {
       |    ^ Unknown Test
  1659 |         expect`e^\mathbf{x}`.toParse();
  1660 |     });
  1661 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1667}","  1665 |     });
  1666 |
> 1667 |     it(""old-style fonts work like new-style fonts"", () => {
       |    ^ Unknown Test
  1668 |         expect`\rm xyz`.toParseLike`\mathrm{xyz}`;
  1669 |         expect`\sf xyz`.toParseLike`\mathsf{xyz}`;
  1670 |         expect`\tt xyz`.toParseLike`\mathtt{xyz}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1678}","  1676 |
  1677 | describe(""A \\pmb builder"", function() {
> 1678 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1679 |         expect`\pmb{\mu}`.toBuild();
  1680 |         expect`\pmb{=}`.toBuild();
  1681 |         expect`\pmb{+}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1689}","  1687 |
  1688 | describe(""A raise parser"", function() {
> 1689 |     it(""should parse and build text in \\raisebox"", function() {
       |    ^ Unknown Test
  1690 |         expect`\raisebox{5pt}{text}`.toBuild(strictSettings);
  1691 |         expect`\raisebox{-5pt}{text}`.toBuild(strictSettings);
  1692 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1694}","  1692 |     });
  1693 |
> 1694 |     it(""should parse and build math in non-strict \\vcenter"", function() {
       |    ^ Unknown Test
  1695 |         expect`\vcenter{\frac a b}`.toBuild(nonstrictSettings);
  1696 |     });
  1697 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1698}","  1696 |     });
  1697 |
> 1698 |     it(""should fail to parse math in \\raisebox"", function() {
       |    ^ Unknown Test
  1699 |         expect`\raisebox{5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1700 |         expect`\raisebox{-5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1701 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1703}","  1701 |     });
  1702 |
> 1703 |     it(""should fail to parse math in an \\hbox"", function() {
       |    ^ Unknown Test
  1704 |         expect`\hbox{\frac a b}`.not.toParse(nonstrictSettings);
  1705 |     });
  1706 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1707}","  1705 |     });
  1706 |
> 1707 |     it(""should fail to build, given an unbraced length"", function() {
       |    ^ Unknown Test
  1708 |         expect`\raisebox5pt{text}`.not.toBuild(strictSettings);
  1709 |         expect`\raisebox-5pt{text}`.not.toBuild(strictSettings);
  1710 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1712}","  1710 |     });
  1711 |
> 1712 |     it(""should build math in an hbox when math mode is set"", function() {
       |    ^ Unknown Test
  1713 |         expect`a + \vcenter{\hbox{$\frac{\frac a b}c$}}`
  1714 |             .toBuild(strictSettings);
  1715 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1761}","  1759 |     });
  1760 |
> 1761 |     it(""should not parse a comment without newline in strict mode"", () => {
       |    ^ Unknown Test
  1762 |         expect`x%y`.not.toParse(strictSettings);
  1763 |         expect`x%y`.toParse(nonstrictSettings);
  1764 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2246}","  2244 |
  2245 | describe(""An accent parser"", function() {
> 2246 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2247 |         expect`\vec{x}`.toParse();
  2248 |         expect`\vec{x^2}`.toParse();
  2249 |         expect`\vec{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2266}","  2264 |     });
  2265 |
> 2266 |     it(""should parse stretchy, shifty accents"", function() {
       |    ^ Unknown Test
  2267 |         expect`\widehat{x}`.toParse();
  2268 |         expect`\widecheck{x}`.toParse();
  2269 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2271}","  2269 |     });
  2270 |
> 2271 |     it(""should parse stretchy, non-shifty accents"", function() {
       |    ^ Unknown Test
  2272 |         expect`\overrightarrow{x}`.toParse();
  2273 |     });
  2274 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2277}","  2275 |
  2276 | describe(""An accent builder"", function() {
> 2277 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2278 |         expect`\vec{x}`.toBuild();
  2279 |         expect`\vec{x}^2`.toBuild();
  2280 |         expect`\vec{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2294}","  2292 |
  2293 | describe(""A stretchy and shifty accent builder"", function() {
> 2294 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2295 |         expect`\widehat{AB}`.toBuild();
  2296 |         expect`\widecheck{AB}`.toBuild();
  2297 |         expect`\widehat{AB}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2312}","  2310 |
  2311 | describe(""A stretchy and non-shifty accent builder"", function() {
> 2312 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2313 |         expect`\overrightarrow{AB}`.toBuild();
  2314 |         expect`\overrightarrow{AB}^2`.toBuild();
  2315 |         expect`\overrightarrow{AB}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2338}","  2336 |
  2337 | describe(""An under-accent parser"", function() {
> 2338 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2339 |         expect`\underrightarrow{x}`.toParse();
  2340 |         expect`\underrightarrow{x^2}`.toParse();
  2341 |         expect`\underrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2359}","  2357 |
  2358 | describe(""An under-accent builder"", function() {
> 2359 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2360 |         expect`\underrightarrow{x}`.toBuild();
  2361 |         expect`\underrightarrow{x}^2`.toBuild();
  2362 |         expect`\underrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2377}","  2375 |
  2376 | describe(""An extensible arrow parser"", function() {
> 2377 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2378 |         expect`\xrightarrow{x}`.toParse();
  2379 |         expect`\xrightarrow{x^2}`.toParse();
  2380 |         expect`\xrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2399}","  2397 |
  2398 | describe(""An extensible arrow builder"", function() {
> 2399 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2400 |         expect`\xrightarrow{x}`.toBuild();
  2401 |         expect`\xrightarrow{x}^2`.toBuild();
  2402 |         expect`\xrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2418}","  2416 |
  2417 | describe(""A horizontal brace parser"", function() {
> 2418 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2419 |         expect`\overbrace{x}`.toParse();
  2420 |         expect`\overbrace{x^2}`.toParse();
  2421 |         expect`\overbrace{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2441}","  2439 |
  2440 | describe(""A horizontal brace builder"", function() {
> 2441 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2442 |         expect`\overbrace{x}`.toBuild();
  2443 |         expect`\overbrace{x}^2`.toBuild();
  2444 |         expect`\underbrace{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2459}","  2457 |
  2458 | describe(""A boxed parser"", function() {
> 2459 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2460 |         expect`\boxed{x}`.toParse();
  2461 |         expect`\boxed{x^2}`.toParse();
  2462 |         expect`\boxed{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2474}","  2472 |
  2473 | describe(""A boxed builder"", function() {
> 2474 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2475 |         expect`\boxed{x}`.toBuild();
  2476 |         expect`\boxed{x}^2`.toBuild();
  2477 |         expect`\boxed{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2491}","  2489 |
  2490 | describe(""An fbox parser, unlike a boxed parser,"", function() {
> 2491 |     it(""should fail when given math"", function() {
       |    ^ Unknown Test
  2492 |         expect`\fbox{\frac a b}`.not.toParse();
  2493 |     });
  2494 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2497}","  2495 |
  2496 | describe(""A colorbox parser"", function() {
> 2497 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2498 |         expect`\colorbox{red}{a b}`.toParse();
  2499 |         expect`\colorbox{red}{x}^2`.toParse();
  2500 |         expect`\colorbox{red} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2503}","  2501 |     });
  2502 |
> 2503 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2504 |         expect`\colorbox{red}{\alpha}`.not.toParse();
  2505 |         expect`\colorbox{red}{\frac{a}{b}}`.not.toParse();
  2506 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2508}","  2506 |     });
  2507 |
> 2508 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2509 |         expect`\colorbox{red}{a b}`.toParse();
  2510 |         expect`\colorbox{#197}{a b}`.toParse();
  2511 |         expect`\colorbox{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2521}","  2519 |
  2520 | describe(""A colorbox builder"", function() {
> 2521 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2522 |         expect`\colorbox{red}{a b}`.toBuild();
  2523 |         expect`\colorbox{red}{a b}^2`.toBuild();
  2524 |         expect`\colorbox{red} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2533}","  2531 |
  2532 | describe(""An fcolorbox parser"", function() {
> 2533 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2534 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2535 |         expect`\fcolorbox{blue}{yellow}{x}^2`.toParse();
  2536 |         expect`\fcolorbox{blue}{yellow} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2539}","  2537 |     });
  2538 |
> 2539 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2540 |         expect`\fcolorbox{blue}{yellow}{\alpha}`.not.toParse();
  2541 |         expect`\fcolorbox{blue}{yellow}{\frac{a}{b}}`.not.toParse();
  2542 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2544}","  2542 |     });
  2543 |
> 2544 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2545 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2546 |         expect`\fcolorbox{blue}{#197}{a b}`.toParse();
  2547 |         expect`\fcolorbox{blue}{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2557}","  2555 |
  2556 | describe(""A fcolorbox builder"", function() {
> 2557 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2558 |         expect`\fcolorbox{blue}{yellow}{a b}`.toBuild();
  2559 |         expect`\fcolorbox{blue}{yellow}{a b}^2`.toBuild();
  2560 |         expect`\fcolorbox{blue}{yellow} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2569}","  2567 |
  2568 | describe(""A strike-through parser"", function() {
> 2569 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2570 |         expect`\cancel{x}`.toParse();
  2571 |         expect`\cancel{x^2}`.toParse();
  2572 |         expect`\cancel{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2590}","  2588 |
  2589 | describe(""A strike-through builder"", function() {
> 2590 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2591 |         expect`\cancel{x}`.toBuild();
  2592 |         expect`\cancel{x}^2`.toBuild();
  2593 |         expect`\cancel{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2611}","  2609 |
  2610 | describe(""A actuarial angle parser"", function() {
> 2611 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2612 |         expect`a_{\angl{n}}`.toParse();
  2613 |     });
  2614 |     it(""should fail in text mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2614}","  2612 |         expect`a_{\angl{n}}`.toParse();
  2613 |     });
> 2614 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2615 |         expect`\text{a_{\angl{n}}}`.not.toParse();
  2616 |     });
  2617 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2620}","  2618 |
  2619 | describe(""A actuarial angle builder"", function() {
> 2620 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2621 |         expect`a_{\angl{n}}`.toBuild();
  2622 |         expect`a_{\angl{n}i}`.toBuild();
  2623 |         expect`a_{\angl n}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2629}","  2627 |
  2628 | describe(""\\phase"", function() {
> 2629 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2630 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2631 |     });
  2632 |     it(""should not fail in math mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2632}","  2630 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2631 |     });
> 2632 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2633 |         expect`\phase{-78.2^\circ}`.toBuild();
  2634 |     });
  2635 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2638}","  2636 |
  2637 | describe(""A phantom parser"", function() {
> 2638 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2639 |         expect`\phantom{x}`.toParse();
  2640 |         expect`\phantom{x^2}`.toParse();
  2641 |         expect`\phantom{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2658}","  2656 |
  2657 | describe(""A phantom builder"", function() {
> 2658 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2659 |         expect`\phantom{x}`.toBuild();
  2660 |         expect`\phantom{x^2}`.toBuild();
  2661 |         expect`\phantom{x}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2687}","  2685 |
  2686 | describe(""A smash parser"", function() {
> 2687 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2688 |         expect`\smash{x}`.toParse();
  2689 |         expect`\smash{x^2}`.toParse();
  2690 |         expect`\smash{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2712}","  2710 |
  2711 | describe(""A smash builder"", function() {
> 2712 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2713 |         expect`\smash{x}`.toBuild(nonstrictSettings);
  2714 |         expect`\smash{x^2}`.toBuild(nonstrictSettings);
  2715 |         expect`\smash{x}^2`.toBuild(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2736}","  2734 |
  2735 | describe(""An optional argument parser"", function() {
> 2736 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2737 |         // Note this doesn't actually make an optional argument, but still
  2738 |         // should work
  2739 |         expect`\frac[1]{2}{3}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2744}","  2742 |     });
  2743 |
> 2744 |     it(""should work with sqrts with optional arguments"", function() {
       |    ^ Unknown Test
  2745 |         expect`\sqrt[3]{2}`.toParse();
  2746 |     });
  2747 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2748}","  2746 |     });
  2747 |
> 2748 |     it(""should work when the optional argument is missing"", function() {
       |    ^ Unknown Test
  2749 |         expect`\sqrt{2}`.toParse();
  2750 |         expect`\rule{1em}{2em}`.toParse();
  2751 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2753}","  2751 |     });
  2752 |
> 2753 |     it(""should fail when the optional argument is malformed"", function() {
       |    ^ Unknown Test
  2754 |         expect`\rule[1]{2em}{3em}`.not.toParse();
  2755 |     });
  2756 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2757}","  2755 |     });
  2756 |
> 2757 |     it(""should not work if the optional argument isn't closed"", function() {
       |    ^ Unknown Test
  2758 |         expect`\sqrt[`.not.toParse();
  2759 |     });
  2760 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2807}","  2805 | describe(""A substack function"", function() {
  2806 |
> 2807 |     it(""should build"", function() {
       |    ^ Unknown Test
  2808 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2809 |     });
  2810 |     it(""should accommodate spaces in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2810}","  2808 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2809 |     });
> 2810 |     it(""should accommodate spaces in the argument"", function() {
       |    ^ Unknown Test
  2811 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2812 |     });
  2813 |     it(""should accommodate macros in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2813}","  2811 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2812 |     });
> 2813 |     it(""should accommodate macros in the argument"", function() {
       |    ^ Unknown Test
  2814 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2815 |     });
  2816 |     it(""should accommodate an empty argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2816}","  2814 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2815 |     });
> 2816 |     it(""should accommodate an empty argument"", function() {
       |    ^ Unknown Test
  2817 |         expect`\sum_{\substack{}}  P(i,j)`.toBuild();
  2818 |     });
  2819 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2824}","  2822 | describe(""A smallmatrix environment"", function() {
  2823 |
> 2824 |     it(""should build"", function() {
       |    ^ Unknown Test
  2825 |         expect`\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}`.toBuild();
  2826 |     });
  2827 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2832}","  2830 | describe(""A cases environment"", function() {
  2831 |
> 2832 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2833 |         expect`f(a,b)=\begin{cases}a+1&\text{if }b\text{ is odd}\\a&\text{if }b=0\\a-1&\text{otherwise}\end{cases}`
  2834 |             .toParse();
  2835 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2841}","  2839 | describe(""An rcases environment"", function() {
  2840 |
> 2841 |     it(""should build"", function() {
       |    ^ Unknown Test
  2842 |         expect`\begin{rcases} a &\text{if } b \\ c &\text{if } d \end{rcases}⇒…`
  2843 |             .toBuild();
  2844 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2850}","  2848 | describe(""An aligned environment"", function() {
  2849 |
> 2850 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2851 |         expect`\begin{aligned}a&=b&c&=d\\e&=f\end{aligned}`.toParse();
  2852 |     });
  2853 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2854}","  2852 |     });
  2853 |
> 2854 |     it(""should allow cells in brackets"", function() {
       |    ^ Unknown Test
  2855 |         expect`\begin{aligned}[a]&[b]\\ [c]&[d]\end{aligned}`.toParse();
  2856 |     });
  2857 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2858}","  2856 |     });
  2857 |
> 2858 |     it(""should forbid cells in brackets without space"", function() {
       |    ^ Unknown Test
  2859 |         expect`\begin{aligned}[a]&[b]\\[c]&[d]\end{aligned}`.not.toParse();
  2860 |     });
  2861 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2869}","  2867 |
  2868 | describe(""AMS environments"", function() {
> 2869 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  2870 |         expect`\begin{gather}a+b\\c+d\end{gather}`.not.toParse(nonstrictSettings);
  2871 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.not.toParse(nonstrictSettings);
  2872 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.not.toParse(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2882}","  2880 |
  2881 |     const displayMode = new Settings({displayMode: true});
> 2882 |     it(""should build if in display mode"", () => {
       |    ^ Unknown Test
  2883 |         expect`\begin{gather}a+b\\c+d\end{gather}`.toBuild(displayMode);
  2884 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.toBuild(displayMode);
  2885 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2895}","  2893 |     });
  2894 |
> 2895 |     it(""should build an empty environment"", () => {
       |    ^ Unknown Test
  2896 |         expect`\begin{gather}\end{gather}`.toBuild(displayMode);
  2897 |         expect`\begin{gather*}\end{gather*}`.toBuild(displayMode);
  2898 |         expect`\begin{align}\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2907}","  2905 |     });
  2906 |
> 2907 |     it(""{equation} should fail if argument contains two rows."", () => {
       |    ^ Unknown Test
  2908 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2909 |     });
  2910 |     it(""{equation} should fail if argument contains two columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2910}","  2908 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2909 |     });
> 2910 |     it(""{equation} should fail if argument contains two columns."", () => {
       |    ^ Unknown Test
  2911 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2912 |     });
  2913 |     it(""{split} should fail if argument contains three columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2913}","  2911 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2912 |     });
> 2913 |     it(""{split} should fail if argument contains three columns."", () => {
       |    ^ Unknown Test
  2914 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2915 |     });
  2916 |     it(""{array} should fail if body contains more columns than specification."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2916}","  2914 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2915 |     });
> 2916 |     it(""{array} should fail if body contains more columns than specification."", () => {
       |    ^ Unknown Test
  2917 |         expect`\begin{array}{2}a & b & c\\d & e  f\end{array}`.not.toBuild(displayMode);
  2918 |     });
  2919 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2945}","  2943 |
  2944 | describe(""operatorname support"", function() {
> 2945 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2946 |         expect`\operatorname{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2947 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2948 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}_y x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2956}","  2954 |
  2955 | describe(""href and url commands"", function() {
> 2956 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2957 |         expect`\href{http://example.com/}{\sin}`.toBuild(trustSettings);
  2958 |         expect`\url{http://example.com/}`.toBuild(trustSettings);
  2959 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2961}","  2959 |     });
  2960 |
> 2961 |     it(""should allow empty URLs"", function() {
       |    ^ Unknown Test
  2962 |         expect`\href{}{example here}`.toBuild(trustSettings);
  2963 |         expect`\url{}`.toBuild(trustSettings);
  2964 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2974}","  2972 |     });
  2973 |
> 2974 |     it(""should allow spaces single-character URLs"", () => {
       |    ^ Unknown Test
  2975 |         expect`\href %end`.toParseLike(""\\href{%}end"", trustSettings);
  2976 |         expect`\url %end`.toParseLike(""\\url{%}end"", trustSettings);
  2977 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2995}","  2993 |     });
  2994 |
> 2995 |     it(""should not allow unbalanced brace(s) in url"", function() {
       |    ^ Unknown Test
  2996 |         expect`\href{http://example.com/{a}{bar}`.not.toParse();
  2997 |         expect`\href{http://example.com/}a}{bar}`.not.toParse();
  2998 |         expect`\url{http://example.com/{a}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3086}","  3084 |
  3085 | describe(""A raw text parser"", function() {
> 3086 |     it(""should return null for a omitted optional string"", function() {
       |    ^ Unknown Test
  3087 |         expect`\includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}`.toParse();
  3088 |     });
  3089 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3101}","  3099 |     });
  3100 |
> 3101 |     it(""should still parse on unrecognized control sequences"", function() {
       |    ^ Unknown Test
  3102 |         expect`\error`.toParse(noThrowSettings);
  3103 |     });
  3104 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3106}","  3104 |
  3105 |     describe(""should allow unrecognized controls sequences anywhere, including"", function() {
> 3106 |         it(""in superscripts and subscripts"", function() {
       |        ^ Unknown Test
  3107 |             expect`2_\error`.toBuild(noThrowSettings);
  3108 |             expect`3^{\error}_\error`.toBuild(noThrowSettings);
  3109 |             expect`\int\nolimits^\error_\error`.toBuild(noThrowSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3112}","  3110 |         });
  3111 |
> 3112 |         it(""in fractions"", function() {
       |        ^ Unknown Test
  3113 |             expect`\frac{345}{\error}`.toBuild(noThrowSettings);
  3114 |             expect`\frac\error{\error}`.toBuild(noThrowSettings);
  3115 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3117}","  3115 |         });
  3116 |
> 3117 |         it(""in square roots"", function() {
       |        ^ Unknown Test
  3118 |             expect`\sqrt\error`.toBuild(noThrowSettings);
  3119 |             expect`\sqrt{234\error}`.toBuild(noThrowSettings);
  3120 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3122}","  3120 |         });
  3121 |
> 3122 |         it(""in text boxes"", function() {
       |        ^ Unknown Test
  3123 |             expect`\text{\error}`.toBuild(noThrowSettings);
  3124 |         });
  3125 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3192}","  3190 |
  3191 | describe(""The symbol table integrity"", function() {
> 3192 |     it(""should treat certain symbols as synonyms"", function() {
       |    ^ Unknown Test
  3193 |         expect`<`.toBuildLike`\lt`;
  3194 |         expect`>`.toBuildLike`\gt`;
  3195 |         expect`\left<\frac{1}{x}\right>`.toBuildLike`\left\lt\frac{1}{x}\right\gt`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3210}","  3208 |
  3209 | describe(""A macro expander"", function() {
> 3210 |     it(""should produce individual tokens"", function() {
       |    ^ Unknown Test
  3211 |         expect`e^\foo`.toParseLike(""e^1 23"",
  3212 |             new Settings({macros: {""\\foo"": ""123""}}));
  3213 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3215}","  3213 |     });
  3214 |
> 3215 |     it(""should preserve leading spaces inside macro definition"", function() {
       |    ^ Unknown Test
  3216 |         expect`\text{\foo}`.toParseLike(r`\text{ x}`,
  3217 |             new Settings({macros: {""\\foo"": "" x""}}));
  3218 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3220}","  3218 |     });
  3219 |
> 3220 |     it(""should preserve leading spaces inside macro argument"", function() {
       |    ^ Unknown Test
  3221 |         expect`\text{\foo{ x}}`.toParseLike(r`\text{ x}`,
  3222 |             new Settings({macros: {""\\foo"": ""#1""}}));
  3223 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3225}","  3223 |     });
  3224 |
> 3225 |     it(""should ignore expanded spaces in math mode"", function() {
       |    ^ Unknown Test
  3226 |         expect`\foo`.toParseLike(""x"", new Settings({macros: {""\\foo"": "" x""}}));
  3227 |     });
  3228 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3229}","  3227 |     });
  3228 |
> 3229 |     it(""should consume spaces after control-word macro"", function() {
       |    ^ Unknown Test
  3230 |         expect`\text{\foo }`.toParseLike(r`\text{x}`,
  3231 |             new Settings({macros: {""\\foo"": ""x""}}));
  3232 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3234}","  3232 |     });
  3233 |
> 3234 |     it(""should consume spaces after macro with \\relax"", function() {
       |    ^ Unknown Test
  3235 |         expect`\text{\foo }`.toParseLike(r`\text{}`,
  3236 |             new Settings({macros: {""\\foo"": ""\\relax""}}));
  3237 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3239}","  3237 |     });
  3238 |
> 3239 |     it(""should not consume spaces after control-word expansion"", function() {
       |    ^ Unknown Test
  3240 |         expect`\text{\\ }`.toParseLike(r`\text{ }`,
  3241 |             new Settings({macros: {""\\\\"": ""\\relax""}}));
  3242 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3244}","  3242 |     });
  3243 |
> 3244 |     it(""should consume spaces after \\relax"", function() {
       |    ^ Unknown Test
  3245 |         expect`\text{\relax }`.toParseLike`\text{}`;
  3246 |     });
  3247 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3248}","  3246 |     });
  3247 |
> 3248 |     it(""should consume spaces after control-word function"", function() {
       |    ^ Unknown Test
  3249 |         expect`\text{\KaTeX }`.toParseLike`\text{\KaTeX}`;
  3250 |     });
  3251 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3252}","  3250 |     });
  3251 |
> 3252 |     it(""should preserve spaces after control-symbol macro"", function() {
       |    ^ Unknown Test
  3253 |         expect`\text{\% y}`.toParseLike(r`\text{x y}`,
  3254 |             new Settings({macros: {""\\%"": ""x""}}));
  3255 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3257}","  3255 |     });
  3256 |
> 3257 |     it(""should preserve spaces after control-symbol function"", function() {
       |    ^ Unknown Test
  3258 |         expect`\text{\' }`.toParse();
  3259 |     });
  3260 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3261}","  3259 |     });
  3260 |
> 3261 |     it(""should consume spaces between arguments"", function() {
       |    ^ Unknown Test
  3262 |         expect`\text{\foo 1 2}`.toParseLike(r`\text{12end}`,
  3263 |             new Settings({macros: {""\\foo"": ""#1#2end""}}));
  3264 |         expect`\text{\foo {1} {2}}`.toParseLike(r`\text{12end}`,",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3268}","  3266 |     });
  3267 |
> 3268 |     it(""should allow for multiple expansion"", function() {
       |    ^ Unknown Test
  3269 |         expect`1\foo2`.toParseLike(""1aa2"", new Settings({macros: {
  3270 |             ""\\foo"": ""\\bar\\bar"",
  3271 |             ""\\bar"": ""a"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3275}","  3273 |     });
  3274 |
> 3275 |     it(""should allow for multiple expansion with argument"", function() {
       |    ^ Unknown Test
  3276 |         expect`1\foo2`.toParseLike(""12222"", new Settings({macros: {
  3277 |             ""\\foo"": ""\\bar{#1}\\bar{#1}"",
  3278 |             ""\\bar"": ""#1#1"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3282}","  3280 |     });
  3281 |
> 3282 |     it(""should allow for macro argument"", function() {
       |    ^ Unknown Test
  3283 |         expect`\foo\bar`.toParseLike(""(xyz)"", new Settings({macros: {
  3284 |             ""\\foo"": ""(#1)"",
  3285 |             ""\\bar"": ""xyz"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3289}","  3287 |     });
  3288 |
> 3289 |     it(""should allow properly nested group for macro argument"", function() {
       |    ^ Unknown Test
  3290 |         expect`\foo{e^{x_{12}+3}}`.toParseLike(""(e^{x_{12}+3})"",
  3291 |             new Settings({macros: {""\\foo"": ""(#1)""}}));
  3292 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3294}","  3292 |     });
  3293 |
> 3294 |     it(""should delay expansion if preceded by \\expandafter"", function() {
       |    ^ Unknown Test
  3295 |         expect`\expandafter\foo\bar`.toParseLike(""x+y"", new Settings({macros: {
  3296 |             ""\\foo"": ""#1+#2"",
  3297 |             ""\\bar"": ""xy"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3304}","  3302 |     });
  3303 |
> 3304 |     it(""should not expand if preceded by \\noexpand"", function() {
       |    ^ Unknown Test
  3305 |         // \foo is not expanded and interpreted as if its meaning were \relax
  3306 |         expect`\noexpand\foo y`.toParseLike(""y"",
  3307 |             new Settings({macros: {""\\foo"": ""x""}}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3317}","  3315 |     });
  3316 |
> 3317 |     it(""should allow for space macro argument (text version)"", function() {
       |    ^ Unknown Test
  3318 |         expect`\text{\foo\bar}`.toParseLike(r`\text{( )}`, new Settings({macros: {
  3319 |             ""\\foo"": ""(#1)"",
  3320 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3324}","  3322 |     });
  3323 |
> 3324 |     it(""should allow for space macro argument (math version)"", function() {
       |    ^ Unknown Test
  3325 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3326 |             ""\\foo"": ""(#1)"",
  3327 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3331}","  3329 |     });
  3330 |
> 3331 |     it(""should allow for space second argument (text version)"", function() {
       |    ^ Unknown Test
  3332 |         expect`\text{\foo\bar\bar}`.toParseLike(r`\text{( , )}`, new Settings({macros: {
  3333 |             ""\\foo"": ""(#1,#2)"",
  3334 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3338}","  3336 |     });
  3337 |
> 3338 |     it(""should treat \\relax as empty argument"", function() {
       |    ^ Unknown Test
  3339 |         expect`\text{\foo\relax x}`.toParseLike(r`\text{(,x)}`, new Settings({macros: {
  3340 |             ""\\foo"": ""(#1,#2)"",
  3341 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3344}","  3342 |     });
  3343 |
> 3344 |     it(""should allow for space second argument (math version)"", function() {
       |    ^ Unknown Test
  3345 |         expect`\foo\bar\bar`.toParseLike(""(,)"", new Settings({macros: {
  3346 |             ""\\foo"": ""(#1,#2)"",
  3347 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3351}","  3349 |     });
  3350 |
> 3351 |     it(""should allow for empty macro argument"", function() {
       |    ^ Unknown Test
  3352 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3353 |             ""\\foo"": ""(#1)"",
  3354 |             ""\\bar"": """",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3358}","  3356 |     });
  3357 |
> 3358 |     it(""should allow for space function arguments"", function() {
       |    ^ Unknown Test
  3359 |         expect`\frac\bar\bar`.toParseLike(r`\frac{}{}`, new Settings({macros: {
  3360 |             ""\\bar"": "" "",
  3361 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3364}","  3362 |     });
  3363 |
> 3364 |     it(""should build \\overset and \\underset"", function() {
       |    ^ Unknown Test
  3365 |         expect`\overset{f}{\rightarrow} Y`.toBuild();
  3366 |         expect`\underset{f}{\rightarrow} Y`.toBuild();
  3367 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3369}","  3367 |     });
  3368 |
> 3369 |     it(""should build \\iff, \\implies, \\impliedby"", function() {
       |    ^ Unknown Test
  3370 |         expect`X \iff Y`.toBuild();
  3371 |         expect`X \implies Y`.toBuild();
  3372 |         expect`X \impliedby Y`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3375}","  3373 |     });
  3374 |
> 3375 |     it(""should allow aliasing characters"", function() {
       |    ^ Unknown Test
  3376 |         expect`x’=c`.toParseLike(""x'=c"", new Settings({macros: {
  3377 |             ""’"": ""'"",
  3378 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3381}","  3379 |     });
  3380 |
> 3381 |     it(""\\@firstoftwo should consume both, and avoid errors"", function() {
       |    ^ Unknown Test
  3382 |         expect`\@firstoftwo{yes}{no}`.toParseLike`yes`;
  3383 |         expect`\@firstoftwo{yes}{1'_2^3}`.toParseLike`yes`;
  3384 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3386}","  3384 |     });
  3385 |
> 3386 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3387 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3388 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3389 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3391}","  3389 |     });
  3390 |
> 3391 |     it(""\\@ifnextchar should not consume nonspaces"", function() {
       |    ^ Unknown Test
  3392 |         expect`\@ifnextchar!{yes}{no}!!`.toParseLike`yes!!`;
  3393 |         expect`\@ifnextchar!{yes}{no}?!`.toParseLike`no?!`;
  3394 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3396}","  3394 |     });
  3395 |
> 3396 |     it(""\\@ifnextchar should consume spaces"", function() {
       |    ^ Unknown Test
  3397 |         expect`\def\x#1{\@ifnextchar x{yes}{no}}\x{}x\x{} x`
  3398 |             .toParseLike`yesxyesx`;
  3399 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3401}","  3399 |     });
  3400 |
> 3401 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3402 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3403 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3404 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3406}","  3404 |     });
  3405 |
> 3406 |     it(""\\TextOrMath should work immediately"", function() {
       |    ^ Unknown Test
  3407 |         expect`\TextOrMath{text}{math}`.toParseLike`math`;
  3408 |     });
  3409 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3410}","  3408 |     });
  3409 |
> 3410 |     it(""\\TextOrMath should work after other math"", function() {
       |    ^ Unknown Test
  3411 |         expect`x+\TextOrMath{text}{math}`.toParseLike`x+math`;
  3412 |     });
  3413 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3414}","  3412 |     });
  3413 |
> 3414 |     it(""\\TextOrMath should work immediately after \\text"", function() {
       |    ^ Unknown Test
  3415 |         expect`\text{\TextOrMath{text}{math}}`.toParseLike`\text{text}`;
  3416 |     });
  3417 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3418}","  3416 |     });
  3417 |
> 3418 |     it(""\\TextOrMath should work later after \\text"", function() {
       |    ^ Unknown Test
  3419 |         expect`\text{hello \TextOrMath{text}{math}}`.toParseLike`\text{hello text}`;
  3420 |     });
  3421 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3422}","  3420 |     });
  3421 |
> 3422 |     it(""\\TextOrMath should work immediately after \\text ends"", function() {
       |    ^ Unknown Test
  3423 |         expect`\text{\TextOrMath{text}{math}}\TextOrMath{text}{math}`
  3424 |             .toParseLike`\text{text}math`;
  3425 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3427}","  3425 |     });
  3426 |
> 3427 |     it(""\\TextOrMath should work immediately after $"", function() {
       |    ^ Unknown Test
  3428 |         expect`\text{$\TextOrMath{text}{math}$}`.toParseLike`\text{$math$}`;
  3429 |     });
  3430 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3431}","  3429 |     });
  3430 |
> 3431 |     it(""\\TextOrMath should work later after $"", function() {
       |    ^ Unknown Test
  3432 |         expect`\text{$x+\TextOrMath{text}{math}$}`.toParseLike`\text{$x+math$}`;
  3433 |     });
  3434 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3435}","  3433 |     });
  3434 |
> 3435 |     it(""\\TextOrMath should work immediately after $ ends"", function() {
       |    ^ Unknown Test
  3436 |         expect`\text{$\TextOrMath{text}{math}$\TextOrMath{text}{math}}`
  3437 |             .toParseLike`\text{$math$text}`;
  3438 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3440}","  3438 |     });
  3439 |
> 3440 |     it(""\\TextOrMath should work in a macro"", function() {
       |    ^ Unknown Test
  3441 |         expect`\mode\text{\mode$\mode$\mode}\mode`
  3442 |             .toParseLike(r`math\text{text$math$text}math`, new Settings({macros: {
  3443 |                 ""\\mode"": ""\\TextOrMath{text}{math}"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3447}","  3445 |     });
  3446 |
> 3447 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3448 |         expect`\text\mode`.toParseLike(r`\text t`, new Settings({macros:
  3449 |             {""\\mode"": ""\\TextOrMath{t}{m}""}}));
  3450 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3479}","  3477 |     });
  3478 |
> 3479 |     it(""should build Unicode private area characters"", function() {
       |    ^ Unknown Test
  3480 |         expect`\gvertneqq\lvertneqq\ngeqq\ngeqslant\nleqq`.toBuild();
  3481 |         expect`\nleqslant\nshortmid\nshortparallel\varsubsetneq`.toBuild();
  3482 |         expect`\varsubsetneqq\varsupsetneq\varsupsetneqq`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3485}","  3483 |     });
  3484 |
> 3485 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3486 |         expect`\text\mode`.toParseLike(r`\text{text}`, new Settings({macros:
  3487 |             {""\\mode"": ""\\TextOrMath{text}{math}""}}));
  3488 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3490}","  3488 |     });
  3489 |
> 3490 |     it(""\\gdef defines macros"", function() {
       |    ^ Unknown Test
  3491 |         expect`\gdef\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3492 |         expect`\gdef\foo{hi}\foo+\text\foo`.toParseLike`hi+\text{hi}`;
  3493 |         expect`\gdef\foo#1{hi #1}\text{\foo{Alice}, \foo{Bob}}`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3508}","  3506 |     });
  3507 |
> 3508 |     it(""\\gdef defines macros with delimited parameter"", function() {
       |    ^ Unknown Test
  3509 |         expect`\gdef\foo|#1||{#1}\text{\foo| x y ||}`.toParseLike`\text{ x y }`;
  3510 |         expect`\gdef\foo#1|#2{#1+#2}\foo 1 2 |34`.toParseLike`12+34`;
  3511 |         expect`\gdef\foo#1#{#1}\foo1^{23}`.toParseLike`1^{23}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3517}","  3515 |     });
  3516 |
> 3517 |     it(""\\xdef should expand definition"", function() {
       |    ^ Unknown Test
  3518 |         expect`\def\foo{a}\xdef\bar{\foo}\def\foo{}\bar`.toParseLike`a`;
  3519 |         // \def\noexpand\foo{} expands into \def\foo{}
  3520 |         expect`\def\foo{a}\xdef\bar{\def\noexpand\foo{}}\foo\bar\foo`.toParseLike`a`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3527}","  3525 |     });
  3526 |
> 3527 |     it(""\\def should be handled in Parser"", () => {
       |    ^ Unknown Test
  3528 |         expect`\gdef\foo{1}`.toParse(new Settings({maxExpand: 0}));
  3529 |         expect`2^\def\foo{1}2`.not.toParse();
  3530 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3532}","  3530 |     });
  3531 |
> 3532 |     it(""\\def works locally"", () => {
       |    ^ Unknown Test
  3533 |         expect`\def\x{1}\x{\def\x{2}\x{\def\x{3}\x}\x}\x`
  3534 |             .toParseLike`1{2{3}2}1`;
  3535 |         expect`\def\x{1}\x\def\x{2}\x{\def\x{3}\x\def\x{4}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3539}","  3537 |     });
  3538 |
> 3539 |     it(""\\gdef overrides at all levels"", () => {
       |    ^ Unknown Test
  3540 |         expect`\def\x{1}\x{\def\x{2}\x{\gdef\x{3}\x}\x}\x`
  3541 |             .toParseLike`1{2{3}3}3`;
  3542 |         expect`\def\x{1}\x{\def\x{2}\x{\global\def\x{3}\x}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3548}","  3546 |     });
  3547 |
> 3548 |     it(""\\global needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3549 |         expect`\global\def\foo{}\foo`.toParseLike``;
  3550 |         expect`\global\edef\foo{}\foo`.toParseLike``;
  3551 |         expect`\def\DEF{\def}\global\DEF\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3558}","  3556 |     });
  3557 |
> 3558 |     it(""\\long needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3559 |         expect`\long\def\foo{}\foo`.toParseLike``;
  3560 |         expect`\long\edef\foo{}\foo`.toParseLike``;
  3561 |         expect`\long\global\def\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3565}","  3563 |     });
  3564 |
> 3565 |     it(""Macro arguments do not generate groups"", () => {
       |    ^ Unknown Test
  3566 |         expect`\def\x{1}\x\def\foo#1{#1}\foo{\x\def\x{2}\x}\x`
  3567 |             .toParseLike`1122`;
  3568 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3570}","  3568 |     });
  3569 |
> 3570 |     it(""\\textbf arguments do generate groups"", () => {
       |    ^ Unknown Test
  3571 |         expect`\def\x{1}\x\textbf{\x\def\x{2}\x}\x`.toParseLike`1\textbf{12}1`;
  3572 |     });
  3573 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3574}","  3572 |     });
  3573 |
> 3574 |     it(""\\sqrt optional arguments generate groups"", () => {
       |    ^ Unknown Test
  3575 |         expect`\def\x{1}\def\y{1}\x\y\sqrt[\def\x{2}\x]{\def\y{2}\y}\x\y`
  3576 |             .toParseLike`11\sqrt[2]{2}11`;
  3577 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3579}","  3577 |     });
  3578 |
> 3579 |     it(""array cells generate groups"", () => {
       |    ^ Unknown Test
  3580 |         expect`\def\x{1}\begin{matrix}\x&\def\x{2}\x&\x\end{matrix}\x`
  3581 |             .toParseLike`\begin{matrix}1&2&1\end{matrix}1`;
  3582 |         expect`\def\x{1}\begin{matrix}\def\x{2}\x&\x\end{matrix}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3610}","  3608 |     });
  3609 |
> 3610 |     it(""\\let copies the definition"", () => {
       |    ^ Unknown Test
  3611 |         expect`\let\foo=\frac\def\frac{}\foo12`.toParseLike`\frac12`;
  3612 |         expect`\def\foo{1}\let\bar\foo\def\foo{2}\bar`.toParseLike`1`;
  3613 |         expect`\let\foo=\kern\edef\bar{\foo1em}\let\kern=\relax\bar`.toParseLike`\kern1em`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3630}","  3628 |     });
  3629 |
> 3630 |     it(""\\futurelet should parse correctly"", () => {
       |    ^ Unknown Test
  3631 |         expect`\futurelet\foo\frac1{2+\foo}`.toParseLike`\frac1{2+1}`;
  3632 |     });
  3633 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3634}","  3632 |     });
  3633 |
> 3634 |     it(""macros argument can simulate \\let"", () => {
       |    ^ Unknown Test
  3635 |         expect`\int`.toParseLike(""\\int\\limits"", {macros: {
  3636 |             ""\\Oldint"": {
  3637 |                 tokens: [{text: ""\\int"", noexpand: true}],",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3661}","  3659 |     });
  3660 |
> 3661 |     it(""\\newcommand defines new macros"", () => {
       |    ^ Unknown Test
  3662 |         expect`\newcommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3663 |         expect`\newcommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3664 |         // Function detection",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3676}","  3674 |     });
  3675 |
> 3676 |     it(""\\renewcommand redefines macros"", () => {
       |    ^ Unknown Test
  3677 |         expect`\renewcommand\foo{x^2}\foo+\foo`.not.toParse();
  3678 |         expect`\renewcommand{\foo}{x^2}\foo+\foo`.not.toParse();
  3679 |         expect`\renewcommand\bar{x^2}\bar+\bar`.toParseLike`x^2+x^2`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3684}","  3682 |     });
  3683 |
> 3684 |     it(""\\providecommand defines but does not redefine macros"", () => {
       |    ^ Unknown Test
  3685 |         expect`\providecommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3686 |         expect`\providecommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3687 |         expect`\newcommand{\foo}{1}\foo\providecommand{\foo}{2}\foo`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3695}","  3693 |     });
  3694 |
> 3695 |     it(""\\newcommand is local"", () => {
       |    ^ Unknown Test
  3696 |         expect`\newcommand\foo{1}\foo{\renewcommand\foo{2}\foo}\foo`
  3697 |             .toParseLike`1{2}1`;
  3698 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3700}","  3698 |     });
  3699 |
> 3700 |     it(""\\newcommand accepts number of arguments"", () => {
       |    ^ Unknown Test
  3701 |         expect`\newcommand\foo[1]{#1^2}\foo x+\foo{y}`.toParseLike`x^2+y^2`;
  3702 |         expect`\newcommand\foo[10]{#1^2}\foo 0123456789`.toParseLike`0^2`;
  3703 |         expect`\newcommand\foo[x]{}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3709}","  3707 |     // This may change in the future, if we support the extra features of
  3708 |     // \hspace.
> 3709 |     it(""should treat \\hspace, \\hskip like \\kern"", function() {
       |    ^ Unknown Test
  3710 |         expect`\hspace{1em}`.toParseLike`\kern1em`;
  3711 |         expect`\hskip{1em}`.toParseLike`\kern1em`;
  3712 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3714}","  3712 |     });
  3713 |
> 3714 |     it(""should expand \\limsup as expected"", () => {
       |    ^ Unknown Test
  3715 |         expect`\limsup`.toParseLike`\operatorname*{lim\,sup}`;
  3716 |     });
  3717 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3718}","  3716 |     });
  3717 |
> 3718 |     it(""should expand \\liminf as expected"", () => {
       |    ^ Unknown Test
  3719 |         expect`\liminf`.toParseLike`\operatorname*{lim\,inf}`;
  3720 |     });
  3721 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3722}","  3720 |     });
  3721 |
> 3722 |     it(""should expand AMS log-like symbols as expected"", () => {
       |    ^ Unknown Test
  3723 |         expect`\injlim`.toParseLike`\operatorname*{inj\,lim}`;
  3724 |         expect`\projlim`.toParseLike`\operatorname*{proj\,lim}`;
  3725 |         expect`\varlimsup`.toParseLike`\operatorname*{\overline{lim}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3732}","  3730 |     });
  3731 |
> 3732 |     it(""should expand \\plim as expected"", () => {
       |    ^ Unknown Test
  3733 |         expect`\plim`.toParseLike`\mathop{\operatorname{plim}}\limits`;
  3734 |     });
  3735 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3736}","  3734 |     });
  3735 |
> 3736 |     it(""should expand \\argmin as expected"", () => {
       |    ^ Unknown Test
  3737 |         expect`\argmin`.toParseLike`\operatorname*{arg\,min}`;
  3738 |     });
  3739 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3740}","  3738 |     });
  3739 |
> 3740 |     it(""should expand \\argmax as expected"", () => {
       |    ^ Unknown Test
  3741 |         expect`\argmax`.toParseLike`\operatorname*{arg\,max}`;
  3742 |     });
  3743 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3744}","  3742 |     });
  3743 |
> 3744 |     it(""should expand \\bra as expected"", () => {
       |    ^ Unknown Test
  3745 |         expect`\bra{\phi}`.toParseLike`\mathinner{\langle{\phi}|}`;
  3746 |     });
  3747 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3748}","  3746 |     });
  3747 |
> 3748 |     it(""should expand \\ket as expected"", () => {
       |    ^ Unknown Test
  3749 |         expect`\ket{\psi}`.toParseLike`\mathinner{|{\psi}\rangle}`;
  3750 |     });
  3751 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3752}","  3750 |     });
  3751 |
> 3752 |     it(""should expand \\braket as expected"", () => {
       |    ^ Unknown Test
  3753 |         expect`\braket{\phi|\psi}`.toParseLike`\mathinner{\langle{\phi|\psi}\rangle}`;
  3754 |     });
  3755 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3756}","  3754 |     });
  3755 |
> 3756 |     it(""should expand \\Bra as expected"", () => {
       |    ^ Unknown Test
  3757 |         expect`\Bra{\phi}`.toParseLike`\left\langle\phi\right|`;
  3758 |     });
  3759 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3760}","  3758 |     });
  3759 |
> 3760 |     it(""should expand \\Ket as expected"", () => {
       |    ^ Unknown Test
  3761 |         expect`\Ket{\psi}`.toParseLike`\left|\psi\right\rangle`;
  3762 |     });
  3763 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3764}","  3762 |     });
  3763 |
> 3764 |     it(""should expand \\Braket as expected"", () => {
       |    ^ Unknown Test
  3765 |         expect`\Braket{ ϕ | \frac{∂^2}{∂ t^2} | ψ }`.toParseLike`\left\langle ϕ\,\middle\vert\,\frac{∂^2}{∂ t^2}\,\middle\vert\, ψ\right\rangle`;
  3766 |     });
  3767 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3768}","  3766 |     });
  3767 |
> 3768 |     it(""should expand \\set as expected"", () => {
       |    ^ Unknown Test
  3769 |         expect`\set{x|x<5|S|}`.toParseLike`\{\,x\mid x<5|S|\,\}`;
  3770 |         // \set doesn't support special || or \| handling
  3771 |         expect`\set{x||x<5|S|}`.toParseLike`\{\,x\mid |x<5|S|\,\}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3775}","  3773 |     });
  3774 |
> 3775 |     it(""should expand \\Set as expected"", () => {
       |    ^ Unknown Test
  3776 |         expect`\Set{ x | x<\frac 1 2 |S| }`
  3777 |         .toParseLike`\left\{\: x\;\middle\vert\; x<\frac 1 2 |S| \:\right\}`;
  3778 |         expect`\Set{ x || x<\frac 1 2 |S| }`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3788}","  3786 |     const displayMode = new Settings({displayMode: true});
  3787 |
> 3788 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  3789 |         expect`\tag{hi}x+y`.not.toParse();
  3790 |     });
  3791 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3792}","  3790 |     });
  3791 |
> 3792 |     it(""should fail with multiple tags"", () => {
       |    ^ Unknown Test
  3793 |         expect`\tag{1}\tag{2}x+y`.not.toParse(displayMode);
  3794 |     });
  3795 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3796}","  3794 |     });
  3795 |
> 3796 |     it(""should fail with multiple tags in one row"", () => {
       |    ^ Unknown Test
  3797 |         expect`\begin{align}\tag{1}x+y\tag{2}\end{align}`.not.toParse(displayMode);
  3798 |     });
  3799 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3800}","  3798 |     });
  3799 |
> 3800 |     it(""should work with one tag per row"", () => {
       |    ^ Unknown Test
  3801 |         expect`\begin{align}\tag{1}x\\&+y\tag{2}\end{align}`.toParse(displayMode);
  3802 |     });
  3803 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3804}","  3802 |     });
  3803 |
> 3804 |     it(""should work with \\nonumber/\\notag"", () => {
       |    ^ Unknown Test
  3805 |         expect`\begin{align}\tag{1}\nonumber x\\&+y\notag\end{align}`
  3806 |         .toParseLike(r`\begin{align}\tag{1}x\\&+y\nonumber\end{align}`, displayMode);
  3807 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3809}","  3807 |     });
  3808 |
> 3809 |     it(""should build"", () => {
       |    ^ Unknown Test
  3810 |         expect`\tag{hi}x+y`.toBuild(displayMode);
  3811 |     });
  3812 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3813}","  3811 |     });
  3812 |
> 3813 |     it(""should ignore location of \\tag"", () => {
       |    ^ Unknown Test
  3814 |         expect`\tag{hi}x+y`.toParseLike(r`x+y\tag{hi}`, displayMode);
  3815 |     });
  3816 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3817}","  3815 |     });
  3816 |
> 3817 |     it(""should handle \\tag* like \\tag"", () => {
       |    ^ Unknown Test
  3818 |         expect`\tag{hi}x+y`.toParseLike(r`\tag*{({hi})}x+y`, displayMode);
  3819 |     });
  3820 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3846}","  3844 |
  3845 | describe(""\\@binrel automatic bin/rel/ord"", () => {
> 3846 |     it(""should generate proper class"", () => {
       |    ^ Unknown Test
  3847 |         expect`L\@binrel+xR`.toParseLike`L\mathbin xR`;
  3848 |         expect`L\@binrel=xR`.toParseLike`L\mathrel xR`;
  3849 |         expect`L\@binrel xxR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3855}","  3853 |     });
  3854 |
> 3855 |     it(""should base on just first character in group"", () => {
       |    ^ Unknown Test
  3856 |         expect`L\@binrel{+x}xR`.toParseLike`L\mathbin xR`;
  3857 |         expect`L\@binrel{=x}xR`.toParseLike`L\mathrel xR`;
  3858 |         expect`L\@binrel{xx}xR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3875}","  3873 |
  3874 | describe(""Unicode accents"", function() {
> 3875 |     it(""should parse Latin-1 letters in math mode"", function() {
       |    ^ Unknown Test
  3876 |         // TODO(edemaine): Unsupported Latin-1 letters in math: ÇÐÞçðþ
  3877 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ`
  3878 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3895}","  3893 |     });
  3894 |
> 3895 |     it(""should parse Latin-1 letters in text mode"", function() {
       |    ^ Unknown Test
  3896 |         // TODO(edemaine): Unsupported Latin-1 letters in text: ÇÐÞçðþ
  3897 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}`
  3898 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3915}","  3913 |     });
  3914 |
> 3915 |     it(""should support \\aa in text mode"", function() {
       |    ^ Unknown Test
  3916 |         expect`\text{\aa\AA}`.toParseLike(r`\text{\r a\r A}`, strictSettings);
  3917 |         expect`\aa`.not.toParse(strictSettings);
  3918 |         expect`\Aa`.not.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3926}","  3924 |     });
  3925 |
> 3926 |     it(""should parse multi-accented characters"", function() {
       |    ^ Unknown Test
  3927 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3928 |         // Doesn't parse quite the same as
  3929 |         // ""\\text{\\'{\\^a}\\'{\\=a}\\'{\\u a}}"" because of the ordgroups.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3932}","  3930 |     });
  3931 |
> 3932 |     it(""should parse accented i's and j's"", function() {
       |    ^ Unknown Test
  3933 |         expect`íȷ́`.toParseLike(r`\acute ı\acute ȷ`, nonstrictSettings);
  3934 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3935 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3939}","  3937 |
  3938 | describe(""Unicode"", function() {
> 3939 |     it(""should parse negated relations"", function() {
       |    ^ Unknown Test
  3940 |         expect`∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌`.toParse(strictSettings);
  3941 |     });
  3942 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3943}","  3941 |     });
  3942 |
> 3943 |     it(""should build relations"", function() {
       |    ^ Unknown Test
  3944 |         expect`∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌`.toBuild(strictSettings);
  3945 |     });
  3946 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3947}","  3945 |     });
  3946 |
> 3947 |     it(""should parse relations"", function() {
       |    ^ Unknown Test
  3948 |         // These characters are not in the KaTeX fonts. So they build with an error message.
  3949 |         expect`⊶⊷`.toParse();
  3950 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3952}","  3950 |     });
  3951 |
> 3952 |     it(""should build big operators"", function() {
       |    ^ Unknown Test
  3953 |         expect`∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆`.toBuild(strictSettings);
  3954 |     });
  3955 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3956}","  3954 |     });
  3955 |
> 3956 |     it(""should build more relations"", function() {
       |    ^ Unknown Test
  3957 |         expect`⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋`.toBuild(strictSettings);
  3958 |     });
  3959 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3970}","  3968 |     });
  3969 |
> 3970 |     it(""should build arrows"", function() {
       |    ^ Unknown Test
  3971 |         expect`←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉`.toBuild(strictSettings);
  3972 |     });
  3973 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3974}","  3972 |     });
  3973 |
> 3974 |     it(""should build more arrows"", function() {
       |    ^ Unknown Test
  3975 |         expect`⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼`.toBuild(strictSettings);
  3976 |     });
  3977 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4060}","  4058 |
  4059 | describe(""The maxExpand setting"", () => {
> 4060 |     it(""should prevent expansion"", () => {
       |    ^ Unknown Test
  4061 |         expect`\gdef\foo{1}\foo`.toParse();
  4062 |         expect`\gdef\foo{1}\foo`.toParse(new Settings({maxExpand: 1}));
  4063 |         expect`\gdef\foo{1}\foo`.not.toParse(new Settings({maxExpand: 0}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4066}","  4064 |     });
  4065 |
> 4066 |     it(""should prevent infinite loops"", () => {
       |    ^ Unknown Test
  4067 |         expect`\gdef\foo{\foo}\foo`.not.toParse(
  4068 |             new Settings({maxExpand: 10}));
  4069 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4071}","  4069 |     });
  4070 |
> 4071 |     it(""should prevent exponential blowup via \\edef"", () => {
       |    ^ Unknown Test
  4072 |         expect`\edef0{x}\edef0{00}\edef0{00}\edef0{00}\edef0{00}`.not.toParse(
  4073 |             new Settings({maxExpand: 10}));
  4074 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4122}","  4120 |
  4121 | describe(""Newlines via \\\\ and \\newline"", function() {
> 4122 |     it(""should build \\\\ without the optional argument and \\newline the same"", () => {
       |    ^ Unknown Test
  4123 |         expect`hello \\ world`.toBuildLike`hello \newline world`;
  4124 |     });
  4125 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4126}","  4124 |     });
  4125 |
> 4126 |     it(""should not allow \\newline to scan for an optional size argument"", () => {
       |    ^ Unknown Test
  4127 |         expect`hello \newline[w]orld`.toBuild();
  4128 |     });
  4129 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4130}","  4128 |     });
  4129 |
> 4130 |     it(""should not allow \\cr at top level"", () => {
       |    ^ Unknown Test
  4131 |         expect`hello \cr world`.not.toBuild();
  4132 |     });
  4133 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4145}","  4143 |
  4144 | describe(""Symbols"", function() {
> 4145 |     it(""should parse \\text{\\i\\j}"", () => {
       |    ^ Unknown Test
  4146 |         expect`\text{\i\j}`.toBuild(strictSettings);
  4147 |     });
  4148 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4149}","  4147 |     });
  4148 |
> 4149 |     it(""should parse spacing functions in math or text mode"", () => {
       |    ^ Unknown Test
  4150 |         expect`A\;B\,C\nobreakspace \text{A\;B\,C\nobreakspace}`.toBuild(strictSettings);
  4151 |     });
  4152 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4153}","  4151 |     });
  4152 |
> 4153 |     it(""should build \\minuso"", () => {
       |    ^ Unknown Test
  4154 |         expect`\\minuso`.toBuild(strictSettings);
  4155 |     });
  4156 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4157}","  4155 |     });
  4156 |
> 4157 |     it(""should render ligature commands like their unicode characters"", () => {
       |    ^ Unknown Test
  4158 |         expect`\text{\ae\AE\oe\OE\o\O\ss}`.toBuildLike(r`\text{æÆœŒøØß}`, strictSettings);
  4159 |     });
  4160 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4163}","  4161 |
  4162 | describe(""strict setting"", function() {
> 4163 |     it(""should allow unicode text when not strict"", () => {
       |    ^ Unknown Test
  4164 |         expect`é`.toParse(new Settings(nonstrictSettings));
  4165 |         expect`試`.toParse(new Settings(nonstrictSettings));
  4166 |         expect`é`.toParse(new Settings({strict: ""ignore""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4174}","  4172 |     });
  4173 |
> 4174 |     it(""should forbid unicode text when strict"", () => {
       |    ^ Unknown Test
  4175 |         expect`é`.not.toParse(new Settings({strict: true}));
  4176 |         expect`試`.not.toParse(new Settings({strict: true}));
  4177 |         expect`é`.not.toParse(new Settings({strict: ""error""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4185}","  4183 |     });
  4184 |
> 4185 |     it(""should warn about unicode text when default"", () => {
       |    ^ Unknown Test
  4186 |         expect`é`.toWarn(new Settings());
  4187 |         expect`試`.toWarn(new Settings());
  4188 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4190}","  4188 |     });
  4189 |
> 4190 |     it(""should always allow unicode text in text mode"", () => {
       |    ^ Unknown Test
  4191 |         expect`\text{é試}`.toParse(nonstrictSettings);
  4192 |         expect`\text{é試}`.toParse(strictSettings);
  4193 |         expect`\text{é試}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4196}","  4194 |     });
  4195 |
> 4196 |     it(""should warn about top-level \\newline in display mode"", () => {
       |    ^ Unknown Test
  4197 |         expect`x\\y`.toWarn(new Settings({displayMode: true}));
  4198 |         expect`x\\y`.toParse(new Settings({displayMode: false}));
  4199 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4245}","  4243 |         }).toThrow(errorMessage);
  4244 |     });
> 4245 |     it(""should add font metrics to metrics map and render successfully"", () => {
       |    ^ Unknown Test
  4246 |         const mockMetrics = {};
  4247 |         // mock font metrics for the symbols that we added previously
  4248 |         for (let number = 0; number <= 9; number++) {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4281}","  4279 |
  4280 | describe(""\\relax"", () => {
> 4281 |     it(""should stop the expansion"", () => {
       |    ^ Unknown Test
  4282 |         expect`\kern2\relax em`.not.toParse();
  4283 |     });
  4284 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4287}","  4285 |
  4286 | describe(""\\emph"", () => {
> 4287 |     it(""should toggle italics"", () => {
       |    ^ Unknown Test
  4288 |         expect`\emph{foo \emph{bar}}`.toBuildLike`\textit{foo \textup{bar}}`;
  4289 |     });
  4290 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4291}","  4289 |     });
  4290 |
> 4291 |     it(""should toggle italics within text"", () => {
       |    ^ Unknown Test
  4292 |         expect`\text{\emph{foo \emph{bar}}}`.toBuildLike`\text{\textit{foo \textup{bar}}}`;
  4293 |     });
  4294 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4295}","  4293 |     });
  4294 |
> 4295 |     it(""should toggle italics within textup"", () => {
       |    ^ Unknown Test
  4296 |         expect`\textup{\emph{foo \emph{bar}}}`.toBuildLike`\textup{\textit{foo \textup{bar}}}`;
  4297 |     });
  4298 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4299}","  4297 |     });
  4298 |
> 4299 |     it(""should toggle italics within textit"", () => {
       |    ^ Unknown Test
  4300 |         expect`\textit{\emph{foo \emph{bar}}}`.toBuildLike`\textit{\textup{foo \textit{bar}}}`;
  4301 |     });
  4302 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 132}","  130 |         });
  131 |         it(""complains about mismatched \\verb with end of line"", function() {
> 132 |             expect(""\\verb|hello\nworld|"").toFailWithParseError(
      |            ^ Redundant Assertion
  133 |                 ""\\verb ended by end of line instead of matching delimiter"");
  134 |         });
  135 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 291}","  289 |     describe(""#_innerLex"", function() {
  290 |         it(""rejects lone surrogate char"", function() {
> 291 |             expect(""\udcba "").toFailWithParseError(
      |            ^ Redundant Assertion
  292 |                    ""Unexpected character: '\udcba' at position 1:"" +
  293 |                     "" \udcba\u0332 "");
  294 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 296}","  294 |         });
  295 |         it(""rejects lone backslash at end of input"", function() {
> 296 |             expect(""\\"").toFailWithParseError(
      |            ^ Redundant Assertion
  297 |                    ""Unexpected character: '\\' at position 1: \\̲"");
  298 |         });
  299 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 8, 'line': 328}","  326 | describe(""Unicode accents"", function() {
  327 |     it(""should return error for invalid combining characters"", function() {
> 328 |         expect(""A\u0328"").toFailWithParseError(
      |        ^ Redundant Assertion
  329 |             ""Unknown accent ' ̨' at position 1: Ą̲̲"");
  330 |     });
  331 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 6}","  4 |
  5 |     describe(""#handleInfixNodes"", function() {
> 6 |         it(""rejects repeated infix operators"", function() {
    |        ^ Unknown Test
  7 |             expect`1\over 2\over 3`.toFailWithParseError(
  8 |                    ""only one infix operator per group at position 9: "" +
  9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 11}","   9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");
  10 |         });
> 11 |         it(""rejects conflicting infix operators"", function() {
     |        ^ Unknown Test
  12 |             expect`1\over 2\choose 3`.toFailWithParseError(
  13 |                    ""only one infix operator per group at position 9: "" +
  14 |                    ""1\\over 2\\̲c̲h̲o̲o̲s̲e̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 19}","  17 |
  18 |     describe(""#handleSupSubscript"", function() {
> 19 |         it(""rejects ^ at end of group"", function() {
     |        ^ Unknown Test
  20 |             expect`{1^}`.toFailWithParseError(
  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 23}","  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });
> 23 |         it(""rejects _ at end of input"", function() {
     |        ^ Unknown Test
  24 |             expect`1_`.toFailWithParseError(
  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 27}","  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });
> 27 |         it(""rejects \\sqrt as argument to ^"", function() {
     |        ^ Unknown Test
  28 |             expect`1^\sqrt{2}`.toFailWithParseError(
  29 |                    ""Got function '\\sqrt' with no arguments as superscript"" +
  30 |                    "" at position 3: 1^\\̲s̲q̲r̲t̲{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 35}","  33 |
  34 |     describe(""#parseAtom"", function() {
> 35 |         it(""rejects \\limits without operator"", function() {
     |        ^ Unknown Test
  36 |             expect`\alpha\limits\omega`.toFailWithParseError(
  37 |                    ""Limit controls must follow a math operator"" +
  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 40}","  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");
  39 |         });
> 40 |         it(""rejects \\limits at the beginning of the input"", function() {
     |        ^ Unknown Test
  41 |             expect`\limits\omega`.toFailWithParseError(
  42 |                    ""Limit controls must follow a math operator"" +
  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 45}","  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");
  44 |         });
> 45 |         it(""rejects double superscripts"", function() {
     |        ^ Unknown Test
  46 |             expect`1^2^3`.toFailWithParseError(
  47 |                    ""Double superscript at position 4: 1^2^̲3"");
  48 |             expect`1^{2+3}_4^5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 51}","  49 |                    ""Double superscript at position 10: 1^{2+3}_4^̲5"");
  50 |         });
> 51 |         it(""rejects double superscripts involving primes"", function() {
     |        ^ Unknown Test
  52 |             expect`1'_2^3`.toFailWithParseError(
  53 |                    ""Double superscript at position 5: 1'_2^̲3"");
  54 |             expect`1^2'`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 61}","  59 |                    ""Double superscript at position 5: 1'_2'̲"");
  60 |         });
> 61 |         it(""rejects double subscripts"", function() {
     |        ^ Unknown Test
  62 |             expect`1_2_3`.toFailWithParseError(
  63 |                    ""Double subscript at position 4: 1_2_̲3"");
  64 |             expect`1_{2+3}^4_5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 70}","  68 |
  69 |     describe(""#parseImplicitGroup"", function() {
> 70 |         it(""reports unknown environments"", function() {
     |        ^ Unknown Test
  71 |             expect`\begin{foo}bar\end{foo}`.toFailWithParseError(
  72 |                    ""No such environment: foo at position 7:"" +
  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 75}","  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");
  74 |         });
> 75 |         it(""reports mismatched environments"", function() {
     |        ^ Unknown Test
  76 |             expect`\begin{pmatrix}1&2\\3&4\end{bmatrix}+5`
  77 |                 .toFailWithParseError(
  78 |                    ""Mismatch: \\begin{pmatrix} matched by \\end{bmatrix}"" +",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 84}","  82 |
  83 |     describe(""#parseFunction"", function() {
> 84 |         it(""rejects math-mode functions in text mode"", function() {
     |        ^ Unknown Test
  85 |             expect`\text{\sqrt2 is irrational}`.toFailWithParseError(
  86 |                 ""Can't use function '\\sqrt' in text mode"" +
  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 89}","  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");
  88 |         });
> 89 |         it(""rejects text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  90 |             expect`$`.toFailWithParseError(
  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 93}","  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });
> 93 |         it(""rejects strict-mode text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  94 |             expect`\'echec`.toFailWithParseError(""LaTeX-incompatible input "" +
  95 |                 ""and strict mode is set to 'error': LaTeX's accent \\' works "" +
  96 |                 ""only in text mode [mathVsTextAccents]"", strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 101}","   99 |
  100 |     describe(""#parseArguments"", function() {
> 101 |         it(""complains about missing argument at end of input"", function() {
      |        ^ Unknown Test
  102 |             expect`2\sqrt`.toFailWithParseError(
  103 |                    ""Expected group as argument to '\\sqrt'"" +
  104 |                    "" at end of input: 2\\sqrt"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 106}","  104 |                    "" at end of input: 2\\sqrt"");
  105 |         });
> 106 |         it(""complains about missing argument at end of group"", function() {
      |        ^ Unknown Test
  107 |             expect`1^{2\sqrt}`.toFailWithParseError(
  108 |                    ""Expected group as argument to '\\sqrt'"" +
  109 |                    "" at position 10: 1^{2\\sqrt}̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 111}","  109 |                    "" at position 10: 1^{2\\sqrt}̲"");
  110 |         });
> 111 |         it(""complains about functions as arguments to others"", function() {
      |        ^ Unknown Test
  112 |             expect`\sqrt\over2`.toFailWithParseError(
  113 |                    ""Got function '\\over' with no arguments as argument to"" +
  114 |                    "" '\\sqrt' at position 6: \\sqrt\\̲o̲v̲e̲r̲2"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 119}","  117 |
  118 |     describe(""#parseGroup"", function() {
> 119 |         it(""complains about undefined control sequence"", function() {
      |        ^ Unknown Test
  120 |             expect`\xyz`.toFailWithParseError(
  121 |                    ""Undefined control sequence: \\xyz"" +
  122 |                    "" at position 1: \\̲x̲y̲z̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 127}","  125 |
  126 |     describe(""#verb"", function() {
> 127 |         it(""complains about mismatched \\verb with end of string"", function() {
      |        ^ Unknown Test
  128 |             expect`\verb|hello`.toFailWithParseError(
  129 |                 ""\\verb ended by end of line instead of matching delimiter"");
  130 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 142}","  140 |
  141 |     describe(""#parseInput expecting EOF"", function() {
> 142 |         it(""complains about extra }"", function() {
      |        ^ Unknown Test
  143 |             expect`{1+2}}`.toFailWithParseError(
  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 146}","  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });
> 146 |         it(""complains about extra \\end"", function() {
      |        ^ Unknown Test
  147 |             expect`x\end{matrix}`.toFailWithParseError(
  148 |                    ""Expected 'EOF', got '\\end' at position 2:"" +
  149 |                    "" x\\̲e̲n̲d̲{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 151}","  149 |                    "" x\\̲e̲n̲d̲{matrix}"");
  150 |         });
> 151 |         it(""complains about top-level &"", function() {
      |        ^ Unknown Test
  152 |             expect`1&2`.toFailWithParseError(
  153 |                    ""Expected 'EOF', got '&' at position 2: 1&̲2"");
  154 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 158}","  156 |
  157 |     describe(""#parseImplicitGroup expecting \\right"", function() {
> 158 |         it(""rejects missing \\right"", function() {
      |        ^ Unknown Test
  159 |             expect`\left(1+2)`.toFailWithParseError(
  160 |                    ""Expected '\\right', got 'EOF' at end of input:"" +
  161 |                    "" \\left(1+2)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 163}","  161 |                    "" \\left(1+2)"");
  162 |         });
> 163 |         it(""rejects incorrectly scoped \\right"", function() {
      |        ^ Unknown Test
  164 |             expect`{\left(1+2}\right)`.toFailWithParseError(
  165 |                    ""Expected '\\right', got '}' at position 11:"" +
  166 |                    "" {\\left(1+2}̲\\right)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 174}","  172 |
  173 |     describe(""#parseSpecialGroup expecting braces"", function() {
> 174 |         it(""complains about missing { for color"", function() {
      |        ^ Unknown Test
  175 |             expect`\textcolor#ffffff{text}`.toFailWithParseError(
  176 |                    ""Invalid color: '#' at position 11:"" +
  177 |                    "" \\textcolor#̲ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 179}","  177 |                    "" \\textcolor#̲ffffff{text}"");
  178 |         });
> 179 |         it(""complains about missing { for size"", function() {
      |        ^ Unknown Test
  180 |             expect`\rule{1em}[2em]`.toFailWithParseError(
  181 |                    ""Invalid size: '[' at position 11: \\rule{1em}[̲2em]"");
  182 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 184}","  182 |         });
  183 |         // Can't test for the [ of an optional group since it's optional
> 184 |         it(""complains about missing } for color"", function() {
      |        ^ Unknown Test
  185 |             expect`\textcolor{#ffffff{text}`.toFailWithParseError(
  186 |                    ""Unexpected end of input in a macro argument,"" +
  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 189}","  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");
  188 |         });
> 189 |         it(""complains about missing ] for size"", function() {
      |        ^ Unknown Test
  190 |             expect`\rule[1em{2em}{3em}`.toFailWithParseError(
  191 |                    ""Unexpected end of input in a macro argument,"" +
  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 194}","  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");
  193 |         });
> 194 |         it(""complains about missing ] for size at end of input"", function() {
      |        ^ Unknown Test
  195 |             expect`\rule[1em`.toFailWithParseError(
  196 |                    ""Unexpected end of input in a macro argument,"" +
  197 |                    "" expected ']' at end of input: \\rule[1em"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 199}","  197 |                    "" expected ']' at end of input: \\rule[1em"");
  198 |         });
> 199 |         it(""complains about missing } for color at end of input"", function() {
      |        ^ Unknown Test
  200 |             expect`\textcolor{#123456`.toFailWithParseError(
  201 |                    ""Unexpected end of input in a macro argument,"" +
  202 |                    "" expected '}' at end of input: …xtcolor{#123456"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 207}","  205 |
  206 |     describe(""#parseGroup expecting }"", function() {
> 207 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  208 |             expect`\sqrt{2`.toFailWithParseError(
  209 |                    ""Expected '}', got 'EOF' at end of input: \\sqrt{2"");
  210 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 214}","  212 |
  213 |     describe(""#parseOptionalGroup expecting ]"", function() {
> 214 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  215 |             expect`\sqrt[3`.toFailWithParseError(
  216 |                    ""Unexpected end of input in a macro argument,"" +
  217 |                    "" expected ']' at end of input: \\sqrt[3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 219}","  217 |                    "" expected ']' at end of input: \\sqrt[3"");
  218 |         });
> 219 |         it(""before group"", function() {
      |        ^ Unknown Test
  220 |             expect`\sqrt[3{2}`.toFailWithParseError(
  221 |                    ""Unexpected end of input in a macro argument,"" +
  222 |                    "" expected ']' at end of input: \\sqrt[3{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 231}","  229 |
  230 |     describe(""parseArray"", function() {
> 231 |         it(""rejects missing \\end"", function() {
      |        ^ Unknown Test
  232 |             expect`\begin{matrix}1`.toFailWithParseError(
  233 |                    ""Expected & or \\\\ or \\cr or \\end at end of input:"" +
  234 |                    "" \\begin{matrix}1"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 236}","  234 |                    "" \\begin{matrix}1"");
  235 |         });
> 236 |         it(""rejects incorrectly scoped \\end"", function() {
      |        ^ Unknown Test
  237 |             expect`{\begin{matrix}1}\end{matrix}`.toFailWithParseError(
  238 |                    ""Expected & or \\\\ or \\cr or \\end at position 17:"" +
  239 |                    "" …\\begin{matrix}1}̲\\end{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 244}","  242 |
  243 |     describe(""array environment"", function() {
> 244 |         it(""rejects unknown column types"", function() {
      |        ^ Unknown Test
  245 |             expect`\begin{array}{cba}\end{array}`.toFailWithParseError(
  246 |                    ""Unknown column alignment: b at position 16:"" +
  247 |                    "" \\begin{array}{cb̲a}\\end{array}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 256}","  254 |
  255 |     describe(""delimiter functions"", function() {
> 256 |         it(""reject invalid opening delimiters"", function() {
      |        ^ Unknown Test
  257 |             expect`\bigl 1 + 2 \bigr`.toFailWithParseError(
  258 |                    ""Invalid delimiter '1' after '\\bigl' at position 7:"" +
  259 |                    "" \\bigl 1̲ + 2 \\bigr"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 261}","  259 |                    "" \\bigl 1̲ + 2 \\bigr"");
  260 |         });
> 261 |         it(""reject invalid closing delimiters"", function() {
      |        ^ Unknown Test
  262 |             expect`\bigl(1+2\bigr=3`.toFailWithParseError(
  263 |                    ""Invalid delimiter '=' after '\\bigr' at position 15:"" +
  264 |                    "" \\bigl(1+2\\bigr=̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 266}","  264 |                    "" \\bigl(1+2\\bigr=̲3"");
  265 |         });
> 266 |         it(""reject group opening delimiters"", function() {
      |        ^ Unknown Test
  267 |             expect`\bigl{(}1+2\bigr)3`.toFailWithParseError(
  268 |                    ""Invalid delimiter type 'ordgroup' at position 6:"" +
  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 271}","  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");
  270 |         });
> 271 |         it(""reject group closing delimiters"", function() {
      |        ^ Unknown Test
  272 |             expect`\bigl(1+2\bigr{)}3`.toFailWithParseError(
  273 |                    ""Invalid delimiter type 'ordgroup' at position 15:"" +
  274 |                    "" \\bigl(1+2\\bigr{̲)̲}̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 279}","  277 |
  278 |     describe(""\\begin and \\end"", function() {
> 279 |         it(""reject invalid environment names"", function() {
      |        ^ Unknown Test
  280 |             expect`\begin x\end y`.toFailWithParseError(
  281 |                    ""No such environment: x at position 8: \\begin x̲\\end y"");
  282 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 302}","  300 |
  301 |     describe(""#_innerLexColor"", function() {
> 302 |         it(""reject 3-digit hex notation without #"", function() {
      |        ^ Unknown Test
  303 |             expect`\textcolor{1a2}{foo}`.toFailWithParseError(
  304 |                    ""Invalid color: '1a2'"" +
  305 |                    "" at position 11: \\textcolor{̲1̲a̲2̲}̲{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 310}","  308 |
  309 |     describe(""#_innerLexSize"", function() {
> 310 |         it(""reject size without unit"", function() {
      |        ^ Unknown Test
  311 |             expect`\rule{0}{2em}`.toFailWithParseError(
  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 314}","  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });
> 314 |         it(""reject size with bogus unit"", function() {
      |        ^ Unknown Test
  315 |             expect`\rule{1au}{2em}`.toFailWithParseError(
  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 318}","  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });
> 318 |         it(""reject size without number"", function() {
      |        ^ Unknown Test
  319 |             expect`\rule{em}{2em}`.toFailWithParseError(
  320 |                    ""Invalid size: 'em' at position 6: \\rule{̲e̲m̲}̲{2em}"");
  321 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 5, 'column': 4, 'index': 124}","  3 |
  4 | describe(""Symbols and macros"", () => {
> 5 |     for (const macro in macros) {
    |    ^ Conditional Test Logic
  6 |         if (!macros.hasOwnProperty(macro)) {
  7 |             continue;
  8 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 6, 'column': 8, 'index': 162}","  4 | describe(""Symbols and macros"", () => {
  5 |     for (const macro in macros) {
> 6 |         if (!macros.hasOwnProperty(macro)) {
    |        ^ Conditional Test Logic
  7 |             continue;
  8 |         }
  9 |         it(`macro ${macro} should not shadow a symbol`, () => {",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 10, 'column': 12, 'index': 307}","   8 |         }
   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
> 10 |             for (const kind in symbols) {
     |            ^ Conditional Test Logic
  11 |                 if (!symbols.hasOwnProperty(kind)) {
  12 |                     continue;
  13 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 11, 'column': 16, 'index': 353}","   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
  10 |             for (const kind in symbols) {
> 11 |                 if (!symbols.hasOwnProperty(kind)) {
     |                ^ Conditional Test Logic
  12 |                     continue;
  13 |                 }
  14 |                 expect(symbols[kind][macro]).toBeFalsy();",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 18, 'column': 12, 'index': 481}","  16 |                   splitAtDelimiters(actual, delimiters);
  17 |
> 18 |             if (split.length !== result.length) {
     |            ^ Conditional Test Logic
  19 |                 message.pass = false;
  20 |                 message.message = () => ""Different number of splits: "" +
  21 |                     split.length + "" vs. "" + result.length + "" ("" +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 27, 'column': 12, 'index': 861}","  25 |             }
  26 |
> 27 |             for (let i = 0; i < split.length; i++) {
     |            ^ Conditional Test Logic
  28 |                 const real = split[i];
  29 |                 const correct = result[i];
  30 |",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 34, 'column': 16, 'index': 1061}","  32 |                 let diff;
  33 |
> 34 |                 if (real.type !== correct.type) {
     |                ^ Conditional Test Logic
  35 |                     good = false;
  36 |                     diff = ""type"";
  37 |                 } else if (real.data !== correct.data) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 37, 'column': 23, 'index': 1187}","  35 |                     good = false;
  36 |                     diff = ""type"";
> 37 |                 } else if (real.data !== correct.data) {
     |                       ^ Conditional Test Logic
  38 |                     good = false;
  39 |                     diff = ""data"";
  40 |                 } else if (real.display !== correct.display) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 40, 'column': 23, 'index': 1313}","  38 |                     good = false;
  39 |                     diff = ""data"";
> 40 |                 } else if (real.display !== correct.display) {
     |                       ^ Conditional Test Logic
  41 |                     good = false;
  42 |                     diff = ""display"";
  43 |                 }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 45, 'column': 16, 'index': 1460}","  43 |                 }
  44 |
> 45 |                 if (!good) {
     |                ^ Conditional Test Logic
  46 |                     message.pass = false;
  47 |                     message.message = () => ""Difference at split "" +
  48 |                         (i + 1) + "": "" + JSON.stringify(real) +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 332, 'column': 8, 'index': 11671}","  330 |             '\\]'];
  331 |         const el = document.createElement('div');
> 332 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  333 |             const txt = document.createTextNode(textNodes[i]);
  334 |             el.appendChild(txt);
  335 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 350, 'column': 8, 'index': 12420}","  348 |             'consectetur adipiscing elit'];
  349 |         const el = document.createElement('div');
> 350 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  351 |             const txt = document.createTextNode(textNodes[i]);
  352 |             el.appendChild(txt);
  353 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 355, 'column': 8, 'index': 12630}","  353 |         }
  354 |         const el2 = document.createElement('div');
> 355 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  356 |             const txt = document.createTextNode(textNodes[i]);
  357 |             el2.appendChild(txt);
  358 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 62}","  60 | describe(""A delimiter splitter"", function() {
  61 |     it(""doesn't split when there are no delimiters"", function() {
> 62 |         expect(""hello"").toSplitInto(
     |        ^ Redundant Assertion
  63 |             [
  64 |                 {type: ""text"", data: ""hello""},
  65 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 72}","  70 |
  71 |     it(""doesn't create a math node with only one left delimiter"", function() {
> 72 |         expect(""hello ( world"").toSplitInto(
     |        ^ Redundant Assertion
  73 |             [
  74 |                 {type: ""text"", data: ""hello ""},
  75 |                 {type: ""text"", data: ""( world""},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 83}","  81 |
  82 |     it(""doesn't split when there's only a right delimiter"", function() {
> 83 |         expect(""hello ) world"").toSplitInto(
     |        ^ Redundant Assertion
  84 |             [
  85 |                 {type: ""text"", data: ""hello ) world""},
  86 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 93}","  91 |
  92 |     it(""splits when there are both delimiters"", function() {
> 93 |         expect(""hello ( world ) boo"").toSplitInto(
     |        ^ Redundant Assertion
  94 |             [
  95 |                 {type: ""text"", data: ""hello ""},
  96 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 106}","  104 |
  105 |     it(""splits on multi-character delimiters"", function() {
> 106 |         expect(""hello [[ world ]] boo"").toSplitInto(
      |        ^ Redundant Assertion
  107 |             [
  108 |                 {type: ""text"", data: ""hello ""},
  109 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 116}","  114 |                 {left: ""[["", right: ""]]"", display: false},
  115 |             ]);
> 116 |         expect(""hello \\begin{equation} world \\end{equation} boo"").toSplitInto(
      |        ^ Redundant Assertion
  117 |             [
  118 |                 {type: ""text"", data: ""hello ""},
  119 |                 {type: ""math"", data: ""\\begin{equation} world \\end{equation}"",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 131}","  129 |
  130 |     it(""splits multiple times"", function() {
> 131 |         expect(""hello ( world ) boo ( more ) stuff"").toSplitInto(
      |        ^ Redundant Assertion
  132 |             [
  133 |                 {type: ""text"", data: ""hello ""},
  134 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 147}","  145 |
  146 |     it(""leaves the ending when there's only a left delimiter"", function() {
> 147 |         expect(""hello ( world ) boo ( left"").toSplitInto(
      |        ^ Redundant Assertion
  148 |             [
  149 |                 {type: ""text"", data: ""hello ""},
  150 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 161}","  159 |
  160 |     it(""doesn't split when close delimiters are in {}s"", function() {
> 161 |         expect(""hello ( world { ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  162 |             [
  163 |                 {type: ""text"", data: ""hello ""},
  164 |                 {type: ""math"", data: "" world { ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 172}","  170 |             ]);
  171 |
> 172 |         expect(""hello ( world { { } ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  173 |             [
  174 |                 {type: ""text"", data: ""hello ""},
  175 |                 {type: ""math"", data: "" world { { } ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 185}","  183 |
  184 |     it(""correctly processes sequences of $..$"", function() {
> 185 |         expect(""$hello$$world$$boo$"").toSplitInto(
      |        ^ Redundant Assertion
  186 |             [
  187 |                 {type: ""math"", data: ""hello"",
  188 |                     rawData: ""$hello$"", display: false},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 200}","  198 |
  199 |     it(""doesn't split at escaped delimiters"", function() {
> 200 |         expect(""hello ( world \\) ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  201 |             [
  202 |                 {type: ""text"", data: ""hello ""},
  203 |                 {type: ""math"", data: "" world \\) "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 224}","  222 |
  223 |     it(""splits when the right and left delimiters are the same"", function() {
> 224 |         expect(""hello $ world $ boo"").toSplitInto(
      |        ^ Redundant Assertion
  225 |             [
  226 |                 {type: ""text"", data: ""hello ""},
  227 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 237}","  235 |
  236 |     it(""ignores \\$"", function() {
> 237 |         expect(""$x = \\$5$"").toSplitInto(
      |        ^ Redundant Assertion
  238 |             [
  239 |                 {type: ""math"", data: ""x = \\$5"",
  240 |                     rawData: ""$x = \\$5$"", display: false},",,
test/unicode-spec.js,ConditionalTestLogic,"[{""startLine"":157,""endLine"":160}]",,25.0,2.0
test/unicode-spec.js,SubOptimalAssert,"[{""startLine"":163,""endLine"":163}]",,25.0,2.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1303,""endLine"":1307}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1386,""endLine"":1388}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2807,""endLine"":2809}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2824,""endLine"":2826}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2841,""endLine"":2844}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3112,""endLine"":3115}]",,556.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3809,""endLine"":3811}]",,556.0,117.0
test/katex-spec.js,OvercommentedTest,"[{""startLine"":3999,""endLine"":4034}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":62,""endLine"":64}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":81,""endLine"":84}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":106,""endLine"":109}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":121,""endLine"":123}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":139,""endLine"":141}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":157,""endLine"":159}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":173,""endLine"":175}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":295,""endLine"":300}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":339,""endLine"":341}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":356,""endLine"":358}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":383,""endLine"":386}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":488,""endLine"":490}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":562,""endLine"":567}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":569,""endLine"":588}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":654,""endLine"":663}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":667,""endLine"":673}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":679,""endLine"":681}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":703,""endLine"":705}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":815,""endLine"":825}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":839,""endLine"":841}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":977,""endLine"":979}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1025,""endLine"":1028}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1084,""endLine"":1094}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1096,""endLine"":1099}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1101,""endLine"":1104}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1122,""endLine"":1136}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1154,""endLine"":1157}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1159,""endLine"":1162}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1164,""endLine"":1167}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1183,""endLine"":1185}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1295,""endLine"":1297}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1530,""endLine"":1543}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1547,""endLine"":1552}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1678,""endLine"":1685}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2062,""endLine"":2079}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2100,""endLine"":2102}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2135,""endLine"":2137}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2246,""endLine"":2252}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2277,""endLine"":2282}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2284,""endLine"":2290}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2294,""endLine"":2300}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2302,""endLine"":2308}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2312,""endLine"":2317}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2319,""endLine"":2325}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2338,""endLine"":2343}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2351,""endLine"":2355}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2359,""endLine"":2364}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2366,""endLine"":2373}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2377,""endLine"":2383}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2391,""endLine"":2395}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2399,""endLine"":2405}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2418,""endLine"":2425}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2433,""endLine"":2437}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2441,""endLine"":2446}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2448,""endLine"":2455}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2459,""endLine"":2464}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2474,""endLine"":2479}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2481,""endLine"":2487}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2514,""endLine"":2517}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2521,""endLine"":2525}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2527,""endLine"":2529}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2533,""endLine"":2537}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2539,""endLine"":2542}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2544,""endLine"":2548}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2550,""endLine"":2553}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2557,""endLine"":2561}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2563,""endLine"":2565}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2569,""endLine"":2574}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2576,""endLine"":2580}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2582,""endLine"":2586}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2590,""endLine"":2599}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2601,""endLine"":2607}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2620,""endLine"":2625}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2629,""endLine"":2631}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2632,""endLine"":2634}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2638,""endLine"":2647}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2658,""endLine"":2669}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2687,""endLine"":2702}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2712,""endLine"":2722}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2736,""endLine"":2742}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2824,""endLine"":2826}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2841,""endLine"":2844}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2850,""endLine"":2852}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2945,""endLine"":2952}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2956,""endLine"":2959}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3401,""endLine"":3404}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3485,""endLine"":3488}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3788,""endLine"":3790}]",,556.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3809,""endLine"":3811}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":91,""endLine"":94}]",,556.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":95,""endLine"":100}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1748,""endLine"":1750}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1883,""endLine"":1884}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3156,""endLine"":3156}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3171,""endLine"":3171}]",,556.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3966,""endLine"":3967}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":508,""endLine"":534}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":1594,""endLine"":1618}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3067,""endLine"":3082}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3490,""endLine"":3506}]",,556.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3999,""endLine"":4034}]",,556.0,117.0
test/errors-spec.js,AnonymousTest,"[{""startLine"":219,""endLine"":223}]",,50.0,26.0
test/errors-spec.js,IdenticalTestDescription,"[{""startLine"":214,""endLine"":218}]",,50.0,26.0
