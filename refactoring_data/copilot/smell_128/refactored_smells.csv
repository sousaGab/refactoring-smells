file,type,smells,frame,itCount,describeCount
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 20, 'column': 8, 'index': 1016}","  18 |     it(""should not parse Latin-1 outside \\text{} with strict"", function() {
  19 |         const chars = 'ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ';
> 20 |         for (const ch of chars) {
     |        ^ Conditional Test Logic
  21 |             expect(ch).not.toParse(strictSettings);
  22 |         }
  23 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 144, 'column': 8, 'index': 5144}","  142 |
  143 |     it(""supportedCodepoint() should return the correct values"", () => {
> 144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |        ^ Conditional Test Logic
  145 |             expect(supportedCodepoint(codepoint)).toBe(
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 152, 'column': 15, 'index': 5441}","  150 |
  151 |     it(""scriptFromCodepoint() should return correct values"", () => {
> 152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
      |               ^ Conditional Test Logic
  153 |             const character = String.fromCharCode(codepoint);
  154 |             const script = scriptFromCodepoint(codepoint);
  155 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 156, 'column': 12, 'index': 5635}","  154 |             const script = scriptFromCodepoint(codepoint);
  155 |
> 156 |             for (const scriptName of scriptNames) {
      |            ^ Conditional Test Logic
  157 |                 if (scriptRegExps[scriptName].test(character)) {
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Conditional Test Logic,"{'line': 157, 'column': 16, 'index': 5691}","  155 |
  156 |             for (const scriptName of scriptNames) {
> 157 |                 if (scriptRegExps[scriptName].test(character)) {
      |                ^ Conditional Test Logic
  158 |                     expect(script).toEqual(scriptName);
  159 |                     continue outer;
  160 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 158, 'column': 20, 'index': 5760}","  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {
> 158 |                     expect(script).toEqual(scriptName);
      |                    ^ Duplicate Assert
  159 |                     continue outer;
  160 |                 }
  161 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Duplicate Assert,"{'line': 163, 'column': 12, 'index': 5877}","  161 |             }
  162 |
> 163 |             expect(script).toBe(null);
      |            ^ Duplicate Assert
  164 |             expect(supportedCodepoint(codepoint)).toBe(false);
  165 |         }
  166 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 154, 'column': 27, 'index': 5590}","  152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
  153 |             const character = String.fromCharCode(codepoint);
> 154 |             const script = scriptFromCodepoint(codepoint);
      |                           ^ Eager Test
  155 |
  156 |             for (const scriptName of scriptNames) {
  157 |                 if (scriptRegExps[scriptName].test(character)) {",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Eager Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Eager Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 145, 'column': 19, 'index': 5223}","  143 |     it(""supportedCodepoint() should return the correct values"", () => {
  144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {
> 145 |             expect(supportedCodepoint(codepoint)).toBe(
      |                   ^ Lazy Test
  146 |                 allRegExp.test(String.fromCharCode(codepoint))
  147 |             );
  148 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Lazy Test,"{'line': 164, 'column': 19, 'index': 5923}","  162 |
  163 |             expect(script).toBe(null);
> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);
      |                   ^ Lazy Test
  165 |         }
  166 |     });
  167 | });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 7}","   5 |
   6 | describe(""unicode"", function() {
>  7 |     it(""should build Latin-1 inside \\text{}"", function() {
     |    ^ Unknown Test
   8 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}`
   9 |             .toBuild();
  10 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 12}","  10 |     });
  11 |
> 12 |     it(""should build Latin-1 inside \\text{} like accent commands"", function() {
     |    ^ Unknown Test
  13 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}`
  14 |             .toParseLike`\text{\`A\'A\^A\~A\""A\r A\`E\'E\^E\""E\`I\'I\^I\""I\~N\`O\'O\^O\~O\""O\`U\'U\^U\""U\'Y\`a\'a\^a\~a\""a\r a\`e\'e\^e\""e\`ı\'ı\^ı\""ı\~n\`o\'o\^o\~o\""o\`u\'u\^u\""u\'y\""y\c C\c c}`;
  15 |         // TODO(edemaine): A few characters don't have analogs yet.",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 25}","  23 |     });
  24 |
> 25 |     it(""should build Latin-1 outside \\text{}"", function() {
     |    ^ Unknown Test
  26 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ`
  27 |             .toBuild(nonstrictSettings);
  28 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 30}","  28 |     });
  29 |
> 30 |     it(""should build all lower case Greek letters"", function() {
     |    ^ Unknown Test
  31 |         expect`αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω`.toBuild();
  32 |     });
  33 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 34}","  32 |     });
  33 |
> 34 |     it(""should build math upper case Greek letters"", function() {
     |    ^ Unknown Test
  35 |         expect`ΓΔΘΛΞΠΣΥΦΨΩ`.toBuild();
  36 |     });
  37 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 38}","  36 |     });
  37 |
> 38 |     it(""should build Cyrillic inside \\text{}"", function() {
     |    ^ Unknown Test
  39 |         expect`\text{БГДЖЗЙЛФЦШЫЮЯ}`.toBuild();
  40 |     });
  41 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 42}","  40 |     });
  41 |
> 42 |     it(""should build Cyrillic outside \\text{}"", function() {
     |    ^ Unknown Test
  43 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.toBuild(nonstrictSettings);
  44 |     });
  45 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 46}","  44 |     });
  45 |
> 46 |     it(""should not parse Cyrillic outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  47 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.not.toParse(strictSettings);
  48 |     });
  49 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 50}","  48 |     });
  49 |
> 50 |     it(""should build CJK inside \\text{}"", function() {
     |    ^ Unknown Test
  51 |         expect`\text{私はバナナです}`.toBuild();
  52 |         expect`\text{여보세요}`.toBuild();
  53 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 55}","  53 |     });
  54 |
> 55 |     it(""should build CJK outside \\text{}"", function() {
     |    ^ Unknown Test
  56 |         expect`私はバナナです`.toBuild(nonstrictSettings);
  57 |         expect`여보세요`.toBuild(nonstrictSettings);
  58 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 60}","  58 |     });
  59 |
> 60 |     it(""should not parse CJK outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  61 |         expect`私はバナナです。`.not.toParse(strictSettings);
  62 |         expect`여보세요`.not.toParse(strictSettings);
  63 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 65}","  63 |     });
  64 |
> 65 |     it(""should build Devanagari inside \\text{}"", function() {
     |    ^ Unknown Test
  66 |         expect`\text{नमस्ते}`.toBuild();
  67 |     });
  68 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 69}","  67 |     });
  68 |
> 69 |     it(""should build Devanagari outside \\text{}"", function() {
     |    ^ Unknown Test
  70 |         expect`नमस्ते`.toBuild(nonstrictSettings);
  71 |     });
  72 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 73}","  71 |     });
  72 |
> 73 |     it(""should not parse Devanagari outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  74 |         expect`नमस्ते`.not.toParse(strictSettings);
  75 |     });
  76 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 77}","  75 |     });
  76 |
> 77 |     it(""should build Georgian inside \\text{}"", function() {
     |    ^ Unknown Test
  78 |         expect`\text{გამარჯობა}`.toBuild();
  79 |     });
  80 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 81}","  79 |     });
  80 |
> 81 |     it(""should build Georgian outside \\text{}"", function() {
     |    ^ Unknown Test
  82 |         expect`გამარჯობა`.toBuild(nonstrictSettings);
  83 |     });
  84 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 85}","  83 |     });
  84 |
> 85 |     it(""should not parse Georgian outside \\text{} with strict"", function() {
     |    ^ Unknown Test
  86 |         expect`გამარჯობა`.not.toParse(strictSettings);
  87 |     });
  88 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 89}","  87 |     });
  88 |
> 89 |     it(""should build Armenian both inside and outside \\text{}"", function() {
     |    ^ Unknown Test
  90 |         expect`ԱԲԳաբգ`.toBuild(nonstrictSettings);
  91 |         expect`\text{ԱԲԳաբգ}`.toBuild(nonstrictSettings);
  92 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 94}","  92 |     });
  93 |
> 94 |     it(""should build extended Latin characters inside \\text{}"", function() {
     |    ^ Unknown Test
  95 |         expect`\text{ěščřžůřťďňőİı}`.toBuild();
  96 |     });
  97 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 98}","   96 |     });
   97 |
>  98 |     it(""should not parse extended Latin outside \\text{} with strict"", function() {
      |    ^ Unknown Test
   99 |         expect`ěščřžůřťďňőİı`.not.toParse(strictSettings);
  100 |     });
  101 |",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 102}","  100 |     });
  101 |
> 102 |     it(""should not allow emoji in strict mode"", function() {
      |    ^ Unknown Test
  103 |         expect`✌`.not.toParse(strictSettings);
  104 |         expect`\text{✌}`.not.toParse(strictSettings);
  105 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js,Unknown Test,"{'column': 4, 'line': 113}","  111 |     });
  112 |
> 113 |     it(""should allow emoji outside strict mode"", function() {
      |    ^ Unknown Test
  114 |         expect`✌`.toWarn();
  115 |         expect`\text{✌}`.toWarn();
  116 |         const settings = new Settings({",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 4, 'column': 4, 'index': 98}","  2 |
  3 | describe(""Screenshotter item"", function() {
> 4 |     for (const key in data) {
    |    ^ Conditional Test Logic
  5 |         if (data.hasOwnProperty(key)) {
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {",,
/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js,Conditional Test Logic,"{'line': 5, 'column': 8, 'index': 132}","  3 | describe(""Screenshotter item"", function() {
  4 |     for (const key in data) {
> 5 |         if (data.hasOwnProperty(key)) {
    |        ^ Conditional Test Logic
  6 |             const item = data[key];
  7 |             it(`""${item.tex}"" should build successfully`, function() {
  8 |                 expect(item.tex).toBuild({",,
/home/gabriel/Desktop/research/projects/katex/test/mathml-spec.js,Conditional Test Logic,"{'line': 9, 'column': 4, 'index': 300}","   7 | const getMathML = function(expr, settings = new Settings()) {
   8 |     let startStyle = Style.TEXT;
>  9 |     if (settings.displayMode) {
     |    ^ Conditional Test Logic
  10 |         startStyle = Style.DISPLAY;
  11 |     }
  12 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 46, 'column': 8, 'index': 1257}","  44 |         const parse = getParsed(expression);
  45 |
> 46 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  47 |             const group = parse[i];
  48 |             expect(group.type).toMatch(""ord"");
  49 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 74, 'column': 8, 'index': 2009}","  72 |         const parse = getParsed(expression);
  73 |
> 74 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  75 |             const group = parse[i];
  76 |             expect(group.type).toEqual(""atom"");
  77 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 83, 'column': 8, 'index': 2278}","  81 |         const parse = getParsed(expression);
  82 |
> 83 |         for (let i = 0; i < parse.length; i++) {
     |        ^ Conditional Test Logic
  84 |             const group = parse[i];
  85 |             expect(group.family).toEqual(""bin"");
  86 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 102, 'column': 8, 'index': 2825}","  100 |         const parse = getParsed(expression);
  101 |
> 102 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  103 |             let group = parse[i];
  104 |             if (group.type === ""htmlmathml"") {
  105 |                 expect(group.html).toHaveLength(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 104, 'column': 12, 'index': 2912}","  102 |         for (let i = 0; i < parse.length; i++) {
  103 |             let group = parse[i];
> 104 |             if (group.type === ""htmlmathml"") {
      |            ^ Conditional Test Logic
  105 |                 expect(group.html).toHaveLength(1);
  106 |                 group = group.html[0];
  107 |             }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 108, 'column': 12, 'index': 3064}","  106 |                 group = group.html[0];
  107 |             }
> 108 |             if (group.type === ""mclass"") {
      |            ^ Conditional Test Logic
  109 |                 expect(group.mclass).toEqual(""mrel"");
  110 |             } else {
  111 |                 expect(group.type).toEqual(""atom"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 141, 'column': 8, 'index': 4080}","  139 |         const parse = getParsed(expression);
  140 |
> 141 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  142 |             const group = parse[i];
  143 |             expect(group.type).toEqual(""atom"");
  144 |             expect(group.family).toEqual(""punct"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 159, 'column': 8, 'index': 4541}","  157 |         const parse = getParsed(expression);
  158 |
> 159 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  160 |             const group = parse[i];
  161 |             expect(group.type).toEqual(""atom"");
  162 |             expect(group.family).toEqual(""open"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 177, 'column': 8, 'index': 5004}","  175 |         const parse = getParsed(expression);
  176 |
> 177 |         for (let i = 0; i < parse.length; i++) {
      |        ^ Conditional Test Logic
  178 |             const group = parse[i];
  179 |             expect(group.type).toEqual(""atom"");
  180 |             expect(group.family).toEqual(""close"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1275, 'column': 4, 'index': 40804}","  1273 |     ];
  1274 |
> 1275 |     for (const [actual, expected] of cases) {
       |    ^ Conditional Test Logic
  1276 |         it(`should build ""${actual}"" like ""${expected}""`, () => {
  1277 |             expect(actual).toBuildLike(expected);
  1278 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1424, 'column': 8, 'index': 46050}","  1422 |         ];
  1423 |
> 1424 |         for (let i = 0; i < missingGroups.length; i++) {
       |        ^ Conditional Test Logic
  1425 |             expect(missingGroups[i]).not.toParse();
  1426 |         }
  1427 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1451, 'column': 8, 'index': 47011}","  1449 |         ];
  1450 |
> 1451 |         for (let i = 0; i < badArguments.length; i++) {
       |        ^ Conditional Test Logic
  1452 |             expect(badArguments[i]).not.toParse();
  1453 |         }
  1454 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1469, 'column': 8, 'index': 47577}","  1467 |         ];
  1468 |
> 1469 |         for (let i = 0; i < goodArguments.length; i++) {
       |        ^ Conditional Test Logic
  1470 |             expect(goodArguments[i]).toParse();
  1471 |         }
  1472 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1482, 'column': 8, 'index': 47933}","  1480 |         ];
  1481 |
> 1482 |         for (let i = 0; i < badSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1483 |             expect(badSupSubscripts[i]).not.toParse();
  1484 |         }
  1485 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1495, 'column': 8, 'index': 48312}","  1493 |         ];
  1494 |
> 1495 |         for (let i = 0; i < goodSupSubscripts.length; i++) {
       |        ^ Conditional Test Logic
  1496 |             expect(goodSupSubscripts[i]).toParse();
  1497 |         }
  1498 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1533, 'column': 8, 'index': 49544}","  1531 |         ];
  1532 |
> 1533 |         for (let i = 0; i < badLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1534 |             expect(badLeftArguments[i]).not.toParse();
  1535 |         }
  1536 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 1547, 'column': 8, 'index': 50021}","  1545 |         ];
  1546 |
> 1547 |         for (let i = 0; i < goodLeftArguments.length; i++) {
       |        ^ Conditional Test Logic
  1548 |             expect(goodLeftArguments[i]).toParse();
  1549 |         }
  1550 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 2185, 'column': 8, 'index': 77971}","  2183 |
  2184 |     it(""should throw Error when HTML attribute name is invalid"", function() {
> 2185 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
       |        ^ Conditional Test Logic
  2186 |             try {
  2187 |                 katex.renderToString(
  2188 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 3848, 'column': 4, 'index': 141908}","  3846 | describe(""leqno and fleqn rendering options"", () => {
  3847 |     const expr = r`\tag{hi}x+y`;
> 3848 |     for (const opt of [""leqno"", ""fleqn""]) {
       |    ^ Conditional Test Logic
  3849 |         it(`should not add ${opt} class by default`, () => {
  3850 |             const settings = new Settings({displayMode: true});
  3851 |             const built = katex.__renderToDomTree(expr, settings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4253, 'column': 8, 'index': 158848}","  4251 |         // add eastern arabic numbers to symbols table
  4252 |         // these symbols are ۰۱۲۳۴۵۶۷۸۹ and ٠١٢٣٤٥٦٧٨٩
> 4253 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4254 |             const persianNum = String.fromCharCode(0x0660 + number);
  4255 |             katex.__defineSymbol(
  4256 |                 ""math"", fontName, ""textord"", persianNum, persianNum);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Conditional Test Logic,"{'line': 4272, 'column': 8, 'index': 159794}","  4270 |         const mockMetrics = {};
  4271 |         // mock font metrics for the symbols that we added previously
> 4272 |         for (let number = 0; number <= 9; number++) {
       |        ^ Conditional Test Logic
  4273 |             mockMetrics[0x0660 + number] = [-0.00244140625, 0.6875, 0, 0];
  4274 |             mockMetrics[0x06F0 + number] = [-0.00244140625, 0.6875, 0, 0];
  4275 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 587, 'column': 8, 'index': 17470}","  585 |         parse = getParsed(simpleOver)[0];
  586 |
> 587 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  588 |         expect(parse.numer).toBeDefined();
  589 |         expect(parse.denom).toBeDefined();
  590 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 587, 'column': 8, 'index': 17470}","  585 |         parse = getParsed(simpleOver)[0];
  586 |
> 587 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  588 |         expect(parse.numer).toBeDefined();
  589 |         expect(parse.denom).toBeDefined();
  590 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 588, 'column': 8, 'index': 17517}","  586 |
  587 |         expect(parse.type).toEqual(""genfrac"");
> 588 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  589 |         expect(parse.denom).toBeDefined();
  590 |
  591 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 588, 'column': 8, 'index': 17517}","  586 |
  587 |         expect(parse.type).toEqual(""genfrac"");
> 588 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  589 |         expect(parse.denom).toBeDefined();
  590 |
  591 |         parse = getParsed(complexOver)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 589, 'column': 8, 'index': 17560}","  587 |         expect(parse.type).toEqual(""genfrac"");
  588 |         expect(parse.numer).toBeDefined();
> 589 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  590 |
  591 |         parse = getParsed(complexOver)[0];
  592 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 589, 'column': 8, 'index': 17560}","  587 |         expect(parse.type).toEqual(""genfrac"");
  588 |         expect(parse.numer).toBeDefined();
> 589 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  590 |
  591 |         parse = getParsed(complexOver)[0];
  592 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 593, 'column': 8, 'index': 17648}","  591 |         parse = getParsed(complexOver)[0];
  592 |
> 593 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  594 |         expect(parse.numer).toBeDefined();
  595 |         expect(parse.denom).toBeDefined();
  596 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 593, 'column': 8, 'index': 17648}","  591 |         parse = getParsed(complexOver)[0];
  592 |
> 593 |         expect(parse.type).toEqual(""genfrac"");
      |        ^ Duplicate Assert
  594 |         expect(parse.numer).toBeDefined();
  595 |         expect(parse.denom).toBeDefined();
  596 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 594, 'column': 8, 'index': 17695}","  592 |
  593 |         expect(parse.type).toEqual(""genfrac"");
> 594 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  595 |         expect(parse.denom).toBeDefined();
  596 |
  597 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 594, 'column': 8, 'index': 17695}","  592 |
  593 |         expect(parse.type).toEqual(""genfrac"");
> 594 |         expect(parse.numer).toBeDefined();
      |        ^ Duplicate Assert
  595 |         expect(parse.denom).toBeDefined();
  596 |
  597 |         const parseBraceFrac = getParsed(braceFrac)[0];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 595, 'column': 8, 'index': 17738}","  593 |         expect(parse.type).toEqual(""genfrac"");
  594 |         expect(parse.numer).toBeDefined();
> 595 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  596 |
  597 |         const parseBraceFrac = getParsed(braceFrac)[0];
  598 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 595, 'column': 8, 'index': 17738}","  593 |         expect(parse.type).toEqual(""genfrac"");
  594 |         expect(parse.numer).toBeDefined();
> 595 |         expect(parse.denom).toBeDefined();
      |        ^ Duplicate Assert
  596 |
  597 |         const parseBraceFrac = getParsed(braceFrac)[0];
  598 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1652, 'column': 8, 'index': 53790}","  1650 |         expect(bbBody).toHaveLength(3);
  1651 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1652 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1653 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1654 |         expect(bbBody[2].type).toEqual(""font"");
  1655 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1652, 'column': 8, 'index': 53790}","  1650 |         expect(bbBody).toHaveLength(3);
  1651 |         expect(bbBody[0].type).toEqual(""mathord"");
> 1652 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1653 |         expect(bbBody[2].font).toEqual(""mathrm"");
  1654 |         expect(bbBody[2].type).toEqual(""font"");
  1655 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1654, 'column': 8, 'index': 53888}","  1652 |         expect(bbBody[2].type).toEqual(""font"");
  1653 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1654 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1655 |     });
  1656 |
  1657 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1654, 'column': 8, 'index': 53888}","  1652 |         expect(bbBody[2].type).toEqual(""font"");
  1653 |         expect(bbBody[2].font).toEqual(""mathrm"");
> 1654 |         expect(bbBody[2].type).toEqual(""font"");
       |        ^ Duplicate Assert
  1655 |     });
  1656 |
  1657 |     it(""should work with \\textcolor"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1847, 'column': 8, 'index': 61443}","  1845 |     it(""should render \\text{R\\textit{S}T} with the correct fonts"", function() {
  1846 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
> 1847 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
       |        ^ Duplicate Assert
  1848 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
  1849 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1850 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1848, 'column': 8, 'index': 61510}","  1846 |         const markup = katex.renderToString(r`\text{R\textit{S}T}`);
  1847 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
> 1848 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
       |        ^ Duplicate Assert
  1849 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
  1850 |     });
  1851 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1849, 'column': 8, 'index': 61584}","  1847 |         expect(markup).toContain(""<span class=\""mord\"">R</span>"");
  1848 |         expect(markup).toContain(""<span class=\""mord textit\"">S</span>"");
> 1849 |         expect(markup).toContain(""<span class=\""mord\"">T</span>"");
       |        ^ Duplicate Assert
  1850 |     });
  1851 |
  1852 |     it(""should render \\textbf{R } with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1873, 'column': 8, 'index': 62775}","  1871 |     it(""should render \\textsf{\\textit{R}G\\textbf{B}} with the correct font"", function() {
  1872 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
> 1873 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
       |        ^ Duplicate Assert
  1874 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
  1875 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1876 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1874, 'column': 8, 'index': 62856}","  1872 |         const markup = katex.renderToString(r`\textsf{\textit{R}G\textbf{B}}`);
  1873 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
> 1874 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
       |        ^ Duplicate Assert
  1875 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
  1876 |     });
  1877 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1875, 'column': 8, 'index': 62930}","  1873 |         expect(markup).toContain(""<span class=\""mord textsf textit\"">R</span>"");
  1874 |         expect(markup).toContain(""<span class=\""mord textsf\"">G</span>"");
> 1875 |         expect(markup).toContain(""<span class=\""mord textsf textbf\"">B</span>"");
       |        ^ Duplicate Assert
  1876 |     });
  1877 |
  1878 |     it(""should render \\textsf{\\textbf{$\\mathrm{A}$}} with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1896, 'column': 8, 'index': 64005}","  1894 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1895 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1896 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1897 |
  1898 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1899 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1896, 'column': 8, 'index': 64005}","  1894 |         let markup = katex.renderToString(r`\textcolor{blue}{\mathbb R}`);
  1895 |         let span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1896 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1897 |
  1898 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1899 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1900, 'column': 8, 'index': 64195}","  1898 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1899 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1900 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1901 |     });
  1902 |
  1903 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 1900, 'column': 8, 'index': 64195}","  1898 |         markup = katex.renderToString(r`\mathbb{\textcolor{blue}{R}}`);
  1899 |         span = ""<span class=\""mord mathbb\"" style=\""color:blue;\"">R</span>"";
> 1900 |         expect(markup).toContain(span);
       |        ^ Duplicate Assert
  1901 |     });
  1902 |
  1903 |     it(""should render wide characters with mord and with the correct font"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2093, 'column': 8, 'index': 74468}","  2091 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2092 |             ""</mstyle>"";
> 2093 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2094 |
  2095 |         // reverse the order of the commands
  2096 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2093, 'column': 8, 'index': 74468}","  2091 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2092 |             ""</mstyle>"";
> 2093 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2094 |
  2095 |         // reverse the order of the commands
  2096 |         tex = r`\mathbb{\textcolor{blue}{R}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2102, 'column': 8, 'index': 74829}","  2100 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2101 |             ""</mstyle>"";
> 2102 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2103 |     });
  2104 |
  2105 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2102, 'column': 8, 'index': 74829}","  2100 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +
  2101 |             ""</mstyle>"";
> 2102 |         expect(markup).toContain(node);
       |        ^ Duplicate Assert
  2103 |     });
  2104 |
  2105 |     it(""should render text as <mtext>"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2116, 'column': 8, 'index': 75390}","  2114 |         const tree = getParsed(tex);
  2115 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
> 2116 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
       |        ^ Duplicate Assert
  2117 |         expect(markup).toContain(
  2118 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2119 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2117, 'column': 8, 'index': 75461}","  2115 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2116 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
> 2117 |         expect(markup).toContain(
       |        ^ Duplicate Assert
  2118 |             ""<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>"");
  2119 |     });
  2120 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2214, 'column': 8, 'index': 79024}","  2212 |         const built = getBuilt`+ x`;
  2213 |
> 2214 |         expect(built[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2215 |         expect(built[0].classes).not.toContain(""mbin"");
  2216 |     });
  2217 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2215, 'column': 8, 'index': 79076}","  2213 |
  2214 |         expect(built[0].classes).toContain(""mord"");
> 2215 |         expect(built[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2216 |     });
  2217 |
  2218 |     it(""should create ords after some other objects"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2249, 'column': 8, 'index': 80592}","  2247 |         const markup = katex.renderToString(r`\sigma^2`);
  2248 |         expect(markup.indexOf(""<span"")).toBe(0);
> 2249 |         expect(markup).toContain(""\u03c3"");  // sigma
       |        ^ Duplicate Assert
  2250 |         expect(markup).toContain(""margin-right"");
  2251 |         expect(markup).not.toContain(""marginRight"");
  2252 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2250, 'column': 8, 'index': 80646}","  2248 |         expect(markup.indexOf(""<span"")).toBe(0);
  2249 |         expect(markup).toContain(""\u03c3"");  // sigma
> 2250 |         expect(markup).toContain(""margin-right"");
       |        ^ Duplicate Assert
  2251 |         expect(markup).not.toContain(""marginRight"");
  2252 |     });
  2253 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2251, 'column': 8, 'index': 80696}","  2249 |         expect(markup).toContain(""\u03c3"");  // sigma
  2250 |         expect(markup).toContain(""margin-right"");
> 2251 |         expect(markup).not.toContain(""marginRight"");
       |        ^ Duplicate Assert
  2252 |     });
  2253 |
  2254 |     it(""generates both MathML and HTML"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2257, 'column': 8, 'index': 80863}","  2255 |         const markup = katex.renderToString(""a"");
  2256 |
> 2257 |         expect(markup).toContain(""<span"");
       |        ^ Duplicate Assert
  2258 |         expect(markup).toContain(""<math"");
  2259 |     });
  2260 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2258, 'column': 8, 'index': 80906}","  2256 |
  2257 |         expect(markup).toContain(""<span"");
> 2258 |         expect(markup).toContain(""<math"");
       |        ^ Duplicate Assert
  2259 |     });
  2260 | });
  2261 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2310, 'column': 8, 'index': 82369}","  2308 |     it(""should produce mords"", function() {
  2309 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
> 2310 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2311 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2312 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2313 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2311, 'column': 8, 'index': 82432}","  2309 |         expect(getBuilt`\vec x`[0].classes).toContain(""mord"");
  2310 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
> 2311 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2312 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
  2313 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2314 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2312, 'column': 8, 'index': 82499}","  2310 |         expect(getBuilt`\vec +`[0].classes).toContain(""mord"");
  2311 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
> 2312 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2313 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
  2314 |     });
  2315 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2313, 'column': 8, 'index': 82564}","  2311 |         expect(getBuilt`\vec +`[0].classes).not.toContain(""mbin"");
  2312 |         expect(getBuilt`\vec )^2`[0].classes).toContain(""mord"");
> 2313 |         expect(getBuilt`\vec )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2314 |     });
  2315 | });
  2316 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2328, 'column': 8, 'index': 83081}","  2326 |     it(""should produce mords"", function() {
  2327 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
> 2328 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2329 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2330 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2331 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2329, 'column': 8, 'index': 83148}","  2327 |         expect(getBuilt`\widehat{AB}`[0].classes).toContain(""mord"");
  2328 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
> 2329 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2330 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
  2331 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2332 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2330, 'column': 8, 'index': 83219}","  2328 |         expect(getBuilt`\widehat +`[0].classes).toContain(""mord"");
  2329 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
> 2330 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2331 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
  2332 |     });
  2333 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2331, 'column': 8, 'index': 83288}","  2329 |         expect(getBuilt`\widehat +`[0].classes).not.toContain(""mbin"");
  2330 |         expect(getBuilt`\widehat )^2`[0].classes).toContain(""mord"");
> 2331 |         expect(getBuilt`\widehat )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2332 |     });
  2333 | });
  2334 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2345, 'column': 8, 'index': 83806}","  2343 |     it(""should produce mords"", function() {
  2344 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
> 2345 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2346 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2347 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2348 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2346, 'column': 8, 'index': 83880}","  2344 |         expect(getBuilt`\overrightarrow{AB}`[0].classes).toContain(""mord"");
  2345 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
> 2346 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2347 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
  2348 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2349 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2347, 'column': 8, 'index': 83958}","  2345 |         expect(getBuilt`\overrightarrow +`[0].classes).toContain(""mord"");
  2346 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
> 2347 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2348 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2349 |     });
  2350 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2348, 'column': 8, 'index': 84034}","  2346 |         expect(getBuilt`\overrightarrow +`[0].classes).not.toContain(""mbin"");
  2347 |         expect(getBuilt`\overrightarrow )^2`[0].classes).toContain(""mord"");
> 2348 |         expect(getBuilt`\overrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2349 |     });
  2350 | });
  2351 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2392, 'column': 8, 'index': 85523}","  2390 |     it(""should produce mords"", function() {
  2391 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
> 2392 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2393 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2394 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2395 |         expect(getBuilt`\underrightarrow )^2`[0].classes)",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2393, 'column': 8, 'index': 85598}","  2391 |         expect(getBuilt`\underrightarrow x`[0].classes).toContain(""mord"");
  2392 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
> 2393 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2394 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
  2395 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2396 |             .not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2394, 'column': 8, 'index': 85677}","  2392 |         expect(getBuilt`\underrightarrow +`[0].classes).toContain(""mord"");
  2393 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
> 2394 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2395 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
  2396 |             .not.toContain(""mclose"");
  2397 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2395, 'column': 8, 'index': 85754}","  2393 |         expect(getBuilt`\underrightarrow +`[0].classes).not.toContain(""mbin"");
  2394 |         expect(getBuilt`\underrightarrow )^2`[0].classes).toContain(""mord"");
> 2395 |         expect(getBuilt`\underrightarrow )^2`[0].classes)
       |        ^ Duplicate Assert
  2396 |             .not.toContain(""mclose"");
  2397 |     });
  2398 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2434, 'column': 8, 'index': 87057}","  2432 |         expect(getBuilt`\xrightarrow x`[0].classes).toContain(""mrel"");
  2433 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
> 2434 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2435 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2436 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2437 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2435, 'column': 8, 'index': 87128}","  2433 |         expect(getBuilt`\xrightarrow [under]{over}`[0].classes).toContain(""mrel"");
  2434 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
> 2435 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2436 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
  2437 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2438 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2436, 'column': 8, 'index': 87203}","  2434 |         expect(getBuilt`\xrightarrow +`[0].classes).toContain(""mrel"");
  2435 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
> 2436 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
       |        ^ Duplicate Assert
  2437 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
  2438 |     });
  2439 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2437, 'column': 8, 'index': 87276}","  2435 |         expect(getBuilt`\xrightarrow +`[0].classes).not.toContain(""mbin"");
  2436 |         expect(getBuilt`\xrightarrow )^2`[0].classes).toContain(""mrel"");
> 2437 |         expect(getBuilt`\xrightarrow )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2438 |     });
  2439 | });
  2440 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2475, 'column': 8, 'index': 88521}","  2473 |         expect(getBuilt`\overbrace x`[0].classes).toContain(""mord"");
  2474 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
> 2475 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2476 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2477 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2478 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2476, 'column': 8, 'index': 88590}","  2474 |         expect(getBuilt`\overbrace{x}^2`[0].classes).toContain(""mord"");
  2475 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
> 2476 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2477 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
  2478 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2479 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2477, 'column': 8, 'index': 88663}","  2475 |         expect(getBuilt`\overbrace +`[0].classes).toContain(""mord"");
  2476 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
> 2477 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2478 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
  2479 |     });
  2480 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2478, 'column': 8, 'index': 88734}","  2476 |         expect(getBuilt`\overbrace +`[0].classes).not.toContain(""mbin"");
  2477 |         expect(getBuilt`\overbrace )^2`[0].classes).toContain(""mord"");
> 2478 |         expect(getBuilt`\overbrace )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2479 |     });
  2480 | });
  2481 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2507, 'column': 8, 'index': 89570}","  2505 |     it(""should produce mords"", function() {
  2506 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
> 2507 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2508 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2509 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2510 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2508, 'column': 8, 'index': 89635}","  2506 |         expect(getBuilt`\boxed x`[0].classes).toContain(""mord"");
  2507 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
> 2508 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2509 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
  2510 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2511 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2509, 'column': 8, 'index': 89704}","  2507 |         expect(getBuilt`\boxed +`[0].classes).toContain(""mord"");
  2508 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
> 2509 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2510 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
  2511 |     });
  2512 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2510, 'column': 8, 'index': 89771}","  2508 |         expect(getBuilt`\boxed +`[0].classes).not.toContain(""mbin"");
  2509 |         expect(getBuilt`\boxed )^2`[0].classes).toContain(""mord"");
> 2510 |         expect(getBuilt`\boxed )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2511 |     });
  2512 | });
  2513 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2627, 'column': 8, 'index': 93560}","  2625 |     it(""should produce mords"", function() {
  2626 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
> 2627 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2628 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2629 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2630 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2628, 'column': 8, 'index': 93626}","  2626 |         expect(getBuilt`\cancel x`[0].classes).toContain(""mord"");
  2627 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
> 2628 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
       |        ^ Duplicate Assert
  2629 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
  2630 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2631 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2629, 'column': 8, 'index': 93696}","  2627 |         expect(getBuilt`\cancel +`[0].classes).toContain(""mord"");
  2628 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
> 2629 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
       |        ^ Duplicate Assert
  2630 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
  2631 |     });
  2632 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 2630, 'column': 8, 'index': 93764}","  2628 |         expect(getBuilt`\cancel +`[0].classes).not.toContain(""mbin"");
  2629 |         expect(getBuilt`\cancel )^2`[0].classes).toContain(""mord"");
> 2630 |         expect(getBuilt`\cancel )^2`[0].classes).not.toContain(""mclose"");
       |        ^ Duplicate Assert
  2631 |     });
  2632 | });
  2633 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3478, 'column': 8, 'index': 126904}","  3476 |     it(""\\char produces literal characters"", () => {
  3477 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3478 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Duplicate Assert
  3479 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3480 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3481 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3479, 'column': 8, 'index': 126955}","  3477 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3478 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3479 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Duplicate Assert
  3480 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3481 |         expect`\char`.not.toParse();
  3482 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 3480, 'column': 8, 'index': 127007}","  3478 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3479 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3480 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Duplicate Assert
  3481 |         expect`\char`.not.toParse();
  3482 |         expect(""\\char`"").not.toParse();
  3483 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4112, 'column': 8, 'index': 153129}","  4110 |         const example = exp32 + r`\a{1}`;
  4111 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
> 4112 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4113 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4114 |     });
  4115 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4113, 'column': 8, 'index': 153196}","  4111 |         const count = 1 + 2 + 4 + 8 + 16 + 32;
  4112 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4113 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4114 |     });
  4115 |
  4116 |     it(""should count correctly with Unicode sub/superscripts"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4119, 'column': 8, 'index': 153465}","  4117 |         const example = exp32 + r`\def+{\a{1}}x⁺x⁺x⁺x⁺`;
  4118 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
> 4119 |         expect(example).toParse(new Settings({maxExpand: count}));
       |        ^ Duplicate Assert
  4120 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
  4121 |     });
  4122 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4120, 'column': 8, 'index': 153532}","  4118 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;
  4119 |         expect(example).toParse(new Settings({maxExpand: count}));
> 4120 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));
       |        ^ Duplicate Assert
  4121 |     });
  4122 | });
  4123 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4162, 'column': 8, 'index': 155179}","  4160 |         // Ensure newlines appear outside base spans (because, in this regexp,
  4161 |         // base span occurs immediately after each newline span).
> 4162 |         expect(markup).toMatch(
       |        ^ Duplicate Assert
  4163 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
  4164 |         expect(markup).toMatchSnapshot();
  4165 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Duplicate Assert,"{'line': 4164, 'column': 8, 'index': 155319}","  4162 |         expect(markup).toMatch(
  4163 |             /(<span class=""base"">.*?<\/span><span class=""mspace newline""><\/span>){3}<span class=""base"">/);
> 4164 |         expect(markup).toMatchSnapshot();
       |        ^ Duplicate Assert
  4165 |     });
  4166 | });
  4167 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 522, 'column': 27, 'index': 15355}","  520 |
  521 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 522 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Eager Test
  523 |
  524 |         expect(dfracParse.type).toEqual(""genfrac"");
  525 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 528, 'column': 27, 'index': 15563}","  526 |         expect(dfracParse.denom).toBeDefined();
  527 |
> 528 |         const tfracParse = getParsed(tfracExpression)[0];
      |                           ^ Eager Test
  529 |
  530 |         expect(tfracParse.type).toEqual(""genfrac"");
  531 |         expect(tfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 534, 'column': 27, 'index': 15771}","  532 |         expect(tfracParse.denom).toBeDefined();
  533 |
> 534 |         const cfracParse = getParsed(cfracExpression)[0];
      |                           ^ Eager Test
  535 |
  536 |         expect(cfracParse.type).toEqual(""genfrac"");
  537 |         expect(cfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 540, 'column': 29, 'index': 15981}","  538 |         expect(cfracParse.denom).toBeDefined();
  539 |
> 540 |         const genfracParse = getParsed(genfrac1)[0];
      |                             ^ Eager Test
  541 |
  542 |         expect(genfracParse.type).toEqual(""genfrac"");
  543 |         expect(genfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 585, 'column': 16, 'index': 17435}","  583 |         let parse;
  584 |
> 585 |         parse = getParsed(simpleOver)[0];
      |                ^ Eager Test
  586 |
  587 |         expect(parse.type).toEqual(""genfrac"");
  588 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 591, 'column': 16, 'index': 17612}","  589 |         expect(parse.denom).toBeDefined();
  590 |
> 591 |         parse = getParsed(complexOver)[0];
      |                ^ Eager Test
  592 |
  593 |         expect(parse.type).toEqual(""genfrac"");
  594 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 597, 'column': 31, 'index': 17805}","  595 |         expect(parse.denom).toBeDefined();
  596 |
> 597 |         const parseBraceFrac = getParsed(braceFrac)[0];
      |                               ^ Eager Test
  598 |
  599 |         expect(parseBraceFrac.type).toEqual(""genfrac"");
  600 |         expect(parseBraceFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 605, 'column': 31, 'index': 18136}","  603 |         expect(parseBraceFrac.rightDelim).toBeDefined();
  604 |
> 605 |         const parseBrackFrac = getParsed(brackFrac)[0];
      |                               ^ Eager Test
  606 |
  607 |         expect(parseBrackFrac.type).toEqual(""genfrac"");
  608 |         expect(parseBrackFrac.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 882, 'column': 23, 'index': 28097}","  880 |
  881 |     it(""should correctly extract the custom color"", function() {
> 882 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Eager Test
  883 |         const parse2 = getParsed(customColorExpression2)[0];
  884 |         const parse3 = getParsed(customColorExpression3)[0];
  885 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 883, 'column': 23, 'index': 28158}","  881 |     it(""should correctly extract the custom color"", function() {
  882 |         const parse1 = getParsed(customColorExpression1)[0];
> 883 |         const parse2 = getParsed(customColorExpression2)[0];
      |                       ^ Eager Test
  884 |         const parse3 = getParsed(customColorExpression3)[0];
  885 |
  886 |         expect(parse1.color).toEqual(""#fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 884, 'column': 23, 'index': 28219}","  882 |         const parse1 = getParsed(customColorExpression1)[0];
  883 |         const parse2 = getParsed(customColorExpression2)[0];
> 884 |         const parse3 = getParsed(customColorExpression3)[0];
      |                       ^ Eager Test
  885 |
  886 |         expect(parse1.color).toEqual(""#fA6"");
  887 |         expect(parse2.color).toEqual(""#fA6fA6"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 982, 'column': 26, 'index': 31169}","  980 |
  981 |     it(""should produce the correct direction delimiter"", function() {
> 982 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Eager Test
  983 |         const rightParse = getParsed(bigDelim)[0];
  984 |
  985 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 983, 'column': 27, 'index': 31223}","  981 |     it(""should produce the correct direction delimiter"", function() {
  982 |         const leftParse = getParsed(normalDelim)[0];
> 983 |         const rightParse = getParsed(bigDelim)[0];
      |                           ^ Eager Test
  984 |
  985 |         expect(leftParse.mclass).toEqual(""mopen"");
  986 |         expect(rightParse.mclass).toEqual(""mclose"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 990, 'column': 27, 'index': 31451}","  988 |
  989 |     it(""should parse the correct size delimiter"", function() {
> 990 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Eager Test
  991 |         const bigParse = getParsed(bigDelim)[0];
  992 |
  993 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 991, 'column': 25, 'index': 31503}","  989 |     it(""should parse the correct size delimiter"", function() {
  990 |         const smallParse = getParsed(normalDelim)[0];
> 991 |         const bigParse = getParsed(bigDelim)[0];
      |                         ^ Eager Test
  992 |
  993 |         expect(smallParse.size).toEqual(1);
  994 |         expect(bigParse.size).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1071, 'column': 24, 'index': 33869}","  1069 |
  1070 |     it(""should list the correct units"", function() {
> 1071 |         const emParse = getParsed(emRule)[0];
       |                        ^ Eager Test
  1072 |         const exParse = getParsed(exRule)[0];
  1073 |
  1074 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1072, 'column': 24, 'index': 33915}","  1070 |     it(""should list the correct units"", function() {
  1071 |         const emParse = getParsed(emRule)[0];
> 1072 |         const exParse = getParsed(exRule)[0];
       |                        ^ Eager Test
  1073 |
  1074 |         expect(emParse.width.unit).toEqual(""em"");
  1075 |         expect(emParse.height.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1109, 'column': 24, 'index': 35085}","  1107 |
  1108 |     it(""should list the correct units"", function() {
> 1109 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1110 |         const exParse = getParsed(exKern)[0];
  1111 |         const muParse = getParsed(muKern)[0];
  1112 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1110, 'column': 24, 'index': 35131}","  1108 |     it(""should list the correct units"", function() {
  1109 |         const emParse = getParsed(emKern)[0];
> 1110 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1111 |         const muParse = getParsed(muKern)[0];
  1112 |         const abParse = getParsed(abKern)[1];
  1113 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1111, 'column': 24, 'index': 35177}","  1109 |         const emParse = getParsed(emKern)[0];
  1110 |         const exParse = getParsed(exKern)[0];
> 1111 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1112 |         const abParse = getParsed(abKern)[1];
  1113 |
  1114 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1112, 'column': 24, 'index': 35223}","  1110 |         const exParse = getParsed(exKern)[0];
  1111 |         const muParse = getParsed(muKern)[0];
> 1112 |         const abParse = getParsed(abKern)[1];
       |                        ^ Eager Test
  1113 |
  1114 |         expect(emParse.dimension.unit).toEqual(""em"");
  1115 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1147, 'column': 24, 'index': 36368}","  1145 |
  1146 |     it(""should list the correct units"", function() {
> 1147 |         const emParse = getParsed(emKern)[0];
       |                        ^ Eager Test
  1148 |         const exParse = getParsed(exKern)[0];
  1149 |         const muParse = getParsed(muKern)[0];
  1150 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1148, 'column': 24, 'index': 36414}","  1146 |     it(""should list the correct units"", function() {
  1147 |         const emParse = getParsed(emKern)[0];
> 1148 |         const exParse = getParsed(exKern)[0];
       |                        ^ Eager Test
  1149 |         const muParse = getParsed(muKern)[0];
  1150 |         const abParse1 = getParsed(abKern1)[1];
  1151 |         const abParse2 = getParsed(abKern2)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1149, 'column': 24, 'index': 36460}","  1147 |         const emParse = getParsed(emKern)[0];
  1148 |         const exParse = getParsed(exKern)[0];
> 1149 |         const muParse = getParsed(muKern)[0];
       |                        ^ Eager Test
  1150 |         const abParse1 = getParsed(abKern1)[1];
  1151 |         const abParse2 = getParsed(abKern2)[1];
  1152 |         const abParse3 = getParsed(abKern3)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1150, 'column': 25, 'index': 36507}","  1148 |         const exParse = getParsed(exKern)[0];
  1149 |         const muParse = getParsed(muKern)[0];
> 1150 |         const abParse1 = getParsed(abKern1)[1];
       |                         ^ Eager Test
  1151 |         const abParse2 = getParsed(abKern2)[1];
  1152 |         const abParse3 = getParsed(abKern3)[1];
  1153 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1151, 'column': 25, 'index': 36555}","  1149 |         const muParse = getParsed(muKern)[0];
  1150 |         const abParse1 = getParsed(abKern1)[1];
> 1151 |         const abParse2 = getParsed(abKern2)[1];
       |                         ^ Eager Test
  1152 |         const abParse3 = getParsed(abKern3)[1];
  1153 |
  1154 |         expect(emParse.dimension.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1152, 'column': 25, 'index': 36603}","  1150 |         const abParse1 = getParsed(abKern1)[1];
  1151 |         const abParse2 = getParsed(abKern2)[1];
> 1152 |         const abParse3 = getParsed(abKern3)[1];
       |                         ^ Eager Test
  1153 |
  1154 |         expect(emParse.dimension.unit).toEqual(""em"");
  1155 |         expect(exParse.dimension.unit).toEqual(""ex"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1163, 'column': 25, 'index': 37058}","  1161 |
  1162 |     it(""should parse elements on either side of a kern"", function() {
> 1163 |         const abParse1 = getParsed(abKern1);
       |                         ^ Eager Test
  1164 |         const abParse2 = getParsed(abKern2);
  1165 |         const abParse3 = getParsed(abKern3);
  1166 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1164, 'column': 25, 'index': 37103}","  1162 |     it(""should parse elements on either side of a kern"", function() {
  1163 |         const abParse1 = getParsed(abKern1);
> 1164 |         const abParse2 = getParsed(abKern2);
       |                         ^ Eager Test
  1165 |         const abParse3 = getParsed(abKern3);
  1166 |
  1167 |         expect(abParse1).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 1165, 'column': 25, 'index': 37148}","  1163 |         const abParse1 = getParsed(abKern1);
  1164 |         const abParse2 = getParsed(abKern2);
> 1165 |         const abParse3 = getParsed(abKern3);
       |                         ^ Eager Test
  1166 |
  1167 |         expect(abParse1).toHaveLength(3);
  1168 |         expect(abParse1[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2088, 'column': 19, 'index': 74239}","  2086 |     it(""should render a combination of font and color changes"", function() {
  2087 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2088 |         let tree = getParsed(tex);
       |                   ^ Eager Test
  2089 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2090 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2091 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 2097, 'column': 15, 'index': 74608}","  2095 |         // reverse the order of the commands
  2096 |         tex = r`\mathbb{\textcolor{blue}{R}}`;
> 2097 |         tree = getParsed(tex);
       |               ^ Eager Test
  2098 |         markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2099 |         node = ""<mstyle mathcolor=\""blue\"">"" +
  2100 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3005, 'column': 24, 'index': 108463}","  3003 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  3004 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 3005 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3006 |         expect(parsed1.href).toBe(url);
  3007 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3008 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3007, 'column': 24, 'index': 108583}","  3005 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  3006 |         expect(parsed1.href).toBe(url);
> 3007 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3008 |         expect(parsed2.href).toBe(url);
  3009 |     });
  3010 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3013, 'column': 24, 'index': 108813}","  3011 |     it(""should allow balanced braces in url"", function() {
  3012 |         const url = ""http://example.org/{{}t{oo}}"";
> 3013 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3014 |         expect(parsed1.href).toBe(url);
  3015 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3016 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3015, 'column': 24, 'index': 108933}","  3013 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
  3014 |         expect(parsed1.href).toBe(url);
> 3015 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
       |                        ^ Eager Test
  3016 |         expect(parsed2.href).toBe(url);
  3017 |     });
  3018 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3029, 'column': 24, 'index': 109587}","  3027 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3028 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3029 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Eager Test
  3030 |         expect(parsed1.href).toBe(url);
  3031 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3032 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Eager Test,"{'line': 3031, 'column': 24, 'index': 109709}","  3029 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
  3030 |         expect(parsed1.href).toBe(url);
> 3031 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
       |                        ^ Eager Test
  3032 |         expect(parsed2.href).toBe(url);
  3033 |     });
  3034 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2186, 'column': 12, 'index': 78050}","  2184 |     it(""should throw Error when HTML attribute name is invalid"", function() {
  2185 |         for (const char of ["">"", "" "", ""\t"", ""\n"", ""\r"", ""\"""", ""'"", ""/""]) {
> 2186 |             try {
       |            ^ Exception Handling
  2187 |                 katex.renderToString(
  2188 |                     `\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);
  2189 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 2751, 'column': 8, 'index': 97681}","  2749 | describe(""A parser error"", function() {
  2750 |     it(""should report the position of an error"", function() {
> 2751 |         try {
       |        ^ Exception Handling
  2752 |             parseTree(r`\sqrt}`, new Settings());
  2753 |         } catch (e) {
  2754 |             expect(e.position).toEqual(5);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3170, 'column': 8, 'index': 115146}","  3168 | describe(""ParseError properties"", function() {
  3169 |     it(""should contain affected position and length information"", function() {
> 3170 |         try {
       |        ^ Exception Handling
  3171 |             katex.renderToString(""1 + \\fraq{}{}"");
  3172 |
  3173 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3185, 'column': 8, 'index': 115809}","  3183 |
  3184 |     it(""should contain position and length information at end of input"", function() {
> 3185 |         try {
       |        ^ Exception Handling
  3186 |             katex.renderToString(""\\frac{}"");
  3187 |
  3188 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Exception Handling,"{'line': 3200, 'column': 8, 'index': 116505}","  3198 |
  3199 |     it(""should contain no position and length information if unavailable"", function() {
> 3200 |         try {
       |        ^ Exception Handling
  3201 |             katex.renderToString(""\\verb|hello\nworld|"");
  3202 |
  3203 |             // Render is expected to throw, so this should not be called.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 44, 'column': 22, 'index': 1225}","  42 |
  43 |     it(""should build a list of ords"", function() {
> 44 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  45 |
  46 |         for (let i = 0; i < parse.length; i++) {
  47 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 53, 'column': 22, 'index': 1483}","  51 |
  52 |     it(""should parse the right number of ords"", function() {
> 53 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  54 |
  55 |         expect(parse).toHaveLength(expression.length);
  56 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 67, 'column': 22, 'index': 1817}","  65 |
  66 |     it(""should parse without failing"", function() {
> 67 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  68 |         expect(parse).toBeDefined();
  69 |     });
  70 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 72, 'column': 22, 'index': 1977}","  70 |
  71 |     it(""should build a list of bins with correct type"", function() {
> 72 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  73 |
  74 |         for (let i = 0; i < parse.length; i++) {
  75 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 81, 'column': 22, 'index': 2246}","  79 |
  80 |     it(""should build a list of bins with correct family"", function() {
> 81 |         const parse = getParsed(expression);
     |                      ^ Lazy Test
  82 |
  83 |         for (let i = 0; i < parse.length; i++) {
  84 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 100, 'column': 22, 'index': 2793}","   98 |
   99 |     it(""should build a list of rels"", function() {
> 100 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  101 |
  102 |         for (let i = 0; i < parse.length; i++) {
  103 |             let group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 126, 'column': 32, 'index': 3694}","  124 |     it(""should return one group, not a fragment"", function() {
  125 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
> 126 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
      |                                ^ Lazy Test
  127 |         expect(mml.children.length).toEqual(1);
  128 |     });
  129 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 139, 'column': 22, 'index': 4048}","  137 |
  138 |     it(""should build a list of puncts"", function() {
> 139 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  140 |
  141 |         for (let i = 0; i < parse.length; i++) {
  142 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 157, 'column': 22, 'index': 4509}","  155 |
  156 |     it(""should build a list of opens"", function() {
> 157 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  158 |
  159 |         for (let i = 0; i < parse.length; i++) {
  160 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 175, 'column': 22, 'index': 4972}","  173 |
  174 |     it(""should build a list of closes"", function() {
> 175 |         const parse = getParsed(expression);
      |                      ^ Lazy Test
  176 |
  177 |         for (let i = 0; i < parse.length; i++) {
  178 |             const group = parse[i];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 506, 'column': 22, 'index': 14797}","  504 |
  505 |     it(""should produce a frac"", function() {
> 506 |         const parse = getParsed(expression)[0];
      |                      ^ Lazy Test
  507 |
  508 |         expect(parse.type).toEqual(""genfrac"");
  509 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 522, 'column': 27, 'index': 15355}","  520 |
  521 |     it(""should parse cfrac, dfrac, tfrac, and genfrac as fracs"", function() {
> 522 |         const dfracParse = getParsed(dfracExpression)[0];
      |                           ^ Lazy Test
  523 |
  524 |         expect(dfracParse.type).toEqual(""genfrac"");
  525 |         expect(dfracParse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 585, 'column': 16, 'index': 17435}","  583 |         let parse;
  584 |
> 585 |         parse = getParsed(simpleOver)[0];
      |                ^ Lazy Test
  586 |
  587 |         expect(parse.type).toEqual(""genfrac"");
  588 |         expect(parse.numer).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 615, 'column': 22, 'index': 18544}","  613 |
  614 |     it(""should create a numerator from the atoms before \\over"", function() {
> 615 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  616 |
  617 |         const numer = parse.numer;
  618 |         expect(numer.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 622, 'column': 22, 'index': 18761}","  620 |
  621 |     it(""should create a denominator from the atoms after \\over"", function() {
> 622 |         const parse = getParsed(complexOver)[0];
      |                      ^ Lazy Test
  623 |
  624 |         const denom = parse.denom;
  625 |         expect(denom.body).toHaveLength(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 630, 'column': 22, 'index': 18996}","  628 |     it(""should handle empty numerators"", function() {
  629 |         const emptyNumerator = r`\over x`;
> 630 |         const parse = getParsed(emptyNumerator)[0];
      |                      ^ Lazy Test
  631 |         expect(parse.type).toEqual(""genfrac"");
  632 |         expect(parse.numer).toBeDefined();
  633 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 638, 'column': 22, 'index': 19291}","  636 |     it(""should handle empty denominators"", function() {
  637 |         const emptyDenominator = r`1 \over`;
> 638 |         const parse = getParsed(emptyDenominator)[0];
      |                      ^ Lazy Test
  639 |         expect(parse.type).toEqual(""genfrac"");
  640 |         expect(parse.numer).toBeDefined();
  641 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 646, 'column': 22, 'index': 19616}","  644 |     it(""should handle \\displaystyle correctly"", function() {
  645 |         const displaystyleExpression = r`\displaystyle 1 \over 2`;
> 646 |         const parse = getParsed(displaystyleExpression)[0];
      |                      ^ Lazy Test
  647 |         expect(parse.type).toEqual(""genfrac"");
  648 |         expect(parse.numer.body[0].type).toEqual(""styling"");
  649 |         expect(parse.denom).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 659, 'column': 22, 'index': 20168}","  657 |     it(""should handle nested factions"", function() {
  658 |         const nestedOverExpression = r`{1 \over 2} \over 3`;
> 659 |         const parse = getParsed(nestedOverExpression)[0];
      |                      ^ Lazy Test
  660 |         expect(parse.type).toEqual(""genfrac"");
  661 |         expect(parse.numer.body[0].type).toEqual(""genfrac"");
  662 |         expect(parse.numer.body[0].numer.body[0].text).toEqual(""1"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 708, 'column': 22, 'index': 21878}","  706 |
  707 |     it(""should produce a sizing node"", function() {
> 708 |         const parse = getParsed(sizeExpression)[0];
      |                      ^ Lazy Test
  709 |
  710 |         expect(parse.type).toEqual(""sizing"");
  711 |         expect(parse.size).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 732, 'column': 22, 'index': 22687}","  730 |
  731 |     it(""should produce a text"", function() {
> 732 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  733 |
  734 |         expect(parse.type).toEqual(""text"");
  735 |         expect(parse.body).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 739, 'column': 22, 'index': 22902}","  737 |
  738 |     it(""should produce textords instead of mathords"", function() {
> 739 |         const parse = getParsed(textExpression)[0];
      |                      ^ Lazy Test
  740 |         const group = parse.body;
  741 |
  742 |         expect(group[0].type).toEqual(""textord"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 762, 'column': 22, 'index': 23565}","  760 |
  761 |     it(""should contract spaces"", function() {
> 762 |         const parse = getParsed(spaceTextExpression)[0];
      |                      ^ Lazy Test
  763 |         const group = parse.body;
  764 |
  765 |         expect(group.length).toEqual(4);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 781, 'column': 22, 'index': 24241}","  779 |
  780 |     it(""should ignore a space before the text group"", function() {
> 781 |         const parse = getParsed(leadingSpaceTextExpression)[0];
      |                      ^ Lazy Test
  782 |         // [m, o, o]
  783 |         expect(parse.body).toHaveLength(3);
  784 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 868, 'column': 22, 'index': 27628}","  866 |
  867 |     it(""should build a color node"", function() {
> 868 |         const parse = getParsed(colorExpression)[0];
      |                      ^ Lazy Test
  869 |
  870 |         expect(parse.type).toEqual(""color"");
  871 |         expect(parse.color).toBeDefined();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 882, 'column': 23, 'index': 28097}","  880 |
  881 |     it(""should correctly extract the custom color"", function() {
> 882 |         const parse1 = getParsed(customColorExpression1)[0];
      |                       ^ Lazy Test
  883 |         const parse2 = getParsed(customColorExpression2)[0];
  884 |         const parse3 = getParsed(customColorExpression3)[0];
  885 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 941, 'column': 22, 'index': 30023}","  939 |
  940 |     it(""should produce spacing in math mode"", function() {
> 941 |         const parse = getParsed(mathTie);
      |                      ^ Lazy Test
  942 |
  943 |         expect(parse[1].type).toEqual(""spacing"");
  944 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 947, 'column': 21, 'index': 30183}","  945 |
  946 |     it(""should produce spacing in text mode"", function() {
> 947 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  948 |         const parse = text.body;
  949 |
  950 |         expect(parse[1].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 954, 'column': 21, 'index': 30388}","  952 |
  953 |     it(""should not contract with spaces in text mode"", function() {
> 954 |         const text = getParsed(textTie)[0];
      |                     ^ Lazy Test
  955 |         const parse = text.body;
  956 |
  957 |         expect(parse[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 976, 'column': 22, 'index': 30985}","  974 |
  975 |     it(""should produce a delimsizing"", function() {
> 976 |         const parse = getParsed(normalDelim)[0];
      |                      ^ Lazy Test
  977 |
  978 |         expect(parse.type).toEqual(""delimsizing"");
  979 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 982, 'column': 26, 'index': 31169}","  980 |
  981 |     it(""should produce the correct direction delimiter"", function() {
> 982 |         const leftParse = getParsed(normalDelim)[0];
      |                          ^ Lazy Test
  983 |         const rightParse = getParsed(bigDelim)[0];
  984 |
  985 |         expect(leftParse.mclass).toEqual(""mopen"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 990, 'column': 27, 'index': 31451}","  988 |
  989 |     it(""should parse the correct size delimiter"", function() {
> 990 |         const smallParse = getParsed(normalDelim)[0];
      |                           ^ Lazy Test
  991 |         const bigParse = getParsed(bigDelim)[0];
  992 |
  993 |         expect(smallParse.size).toEqual(1);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1006, 'column': 22, 'index': 31866}","  1004 |
  1005 |     it(""should produce an overline"", function() {
> 1006 |         const parse = getParsed(overline)[0];
       |                      ^ Lazy Test
  1007 |
  1008 |         expect(parse.type).toEqual(""overline"");
  1009 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1065, 'column': 22, 'index': 33716}","  1063 |
  1064 |     it(""should produce a rule"", function() {
> 1065 |         const parse = getParsed(emRule)[0];
       |                      ^ Lazy Test
  1066 |
  1067 |         expect(parse.type).toEqual(""rule"");
  1068 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1071, 'column': 24, 'index': 33869}","  1069 |
  1070 |     it(""should list the correct units"", function() {
> 1071 |         const emParse = getParsed(emRule)[0];
       |                        ^ Lazy Test
  1072 |         const exParse = getParsed(exRule)[0];
  1073 |
  1074 |         expect(emParse.width.unit).toEqual(""em"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1082, 'column': 32, 'index': 34239}","  1080 |
  1081 |     it(""should parse the number correctly"", function() {
> 1082 |         const hardNumberParse = getParsed(hardNumberRule)[0];
       |                                ^ Lazy Test
  1083 |
  1084 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
  1085 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1109, 'column': 24, 'index': 35085}","  1107 |
  1108 |     it(""should list the correct units"", function() {
> 1109 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1110 |         const exParse = getParsed(exKern)[0];
  1111 |         const muParse = getParsed(muKern)[0];
  1112 |         const abParse = getParsed(abKern)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1147, 'column': 24, 'index': 36368}","  1145 |
  1146 |     it(""should list the correct units"", function() {
> 1147 |         const emParse = getParsed(emKern)[0];
       |                        ^ Lazy Test
  1148 |         const exParse = getParsed(exKern)[0];
  1149 |         const muParse = getParsed(muKern)[0];
  1150 |         const abParse1 = getParsed(abKern1)[1];",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1163, 'column': 25, 'index': 37058}","  1161 |
  1162 |     it(""should parse elements on either side of a kern"", function() {
> 1163 |         const abParse1 = getParsed(abKern1);
       |                         ^ Lazy Test
  1164 |         const abParse2 = getParsed(abKern2);
  1165 |         const abParse3 = getParsed(abKern3);
  1166 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1194, 'column': 24, 'index': 38133}","  1192 |
  1193 |     it(""should handle whitespace"", function() {
> 1194 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
       |                        ^ Lazy Test
  1195 |
  1196 |         expect(abParse).toHaveLength(3);
  1197 |         expect(abParse[0].text).toEqual(""a"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1212, 'column': 22, 'index': 38700}","  1210 |
  1211 |     it(""should produce a leftright"", function() {
> 1212 |         const parse = getParsed(normalLeftRight)[0];
       |                      ^ Lazy Test
  1213 |
  1214 |         expect(parse.type).toEqual(""leftright"");
  1215 |         expect(parse.left).toEqual(""("");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1389, 'column': 22, 'index': 45065}","  1387 |
  1388 |     it(""should produce sqrts"", function() {
> 1389 |         const parse = getParsed(sqrt)[0];
       |                      ^ Lazy Test
  1390 |
  1391 |         expect(parse.type).toEqual(""sqrt"");
  1392 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 1588, 'column': 22, 'index': 51485}","  1586 |     it(""should only change the style within its group"", function() {
  1587 |         const text = r`a b { c d \displaystyle e f } g h`;
> 1588 |         const parse = getParsed(text);
       |                      ^ Lazy Test
  1589 |
  1590 |         const displayNode = parse[2].body[2];
  1591 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2088, 'column': 19, 'index': 74239}","  2086 |     it(""should render a combination of font and color changes"", function() {
  2087 |         let tex = r`\textcolor{blue}{\mathbb R}`;
> 2088 |         let tree = getParsed(tex);
       |                   ^ Lazy Test
  2089 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2090 |         let node = ""<mstyle mathcolor=\""blue\"">"" +
  2091 |             ""<mi mathvariant=\""double-struck\"">R</mi>"" +",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2107, 'column': 21, 'index': 74980}","  2105 |     it(""should render text as <mtext>"", function() {
  2106 |         const tex = r`\text{for }`;
> 2107 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2108 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2109 |         expect(markup).toContain(""<mtext>for\u00a0</mtext>"");
  2110 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2114, 'column': 21, 'index': 75292}","  2112 |     it(""should render math within text as side-by-side children"", function() {
  2113 |         const tex = r`\text{graph: $y = mx + b$}`;
> 2114 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2115 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2116 |         expect(markup).toContain(""<mrow><mtext>graph:\u00a0</mtext>"");
  2117 |         expect(markup).toContain(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2129, 'column': 15, 'index': 75952}","  2127 |
  2128 |     it(""should produce mords"", function() {
> 2129 |         expect(getBuilt(img, trustSettings)[0].classes).toContain(""mord"");
       |               ^ Lazy Test
  2130 |     });
  2131 |
  2132 |     it(""should not render without trust setting"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2133, 'column': 22, 'index': 76106}","  2131 |
  2132 |     it(""should not render without trust setting"", function() {
> 2133 |         const built = getBuilt(img);
       |                      ^ Lazy Test
  2134 |         expect(built).toMatchSnapshot();
  2135 |     });
  2136 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2138, 'column': 22, 'index': 76249}","  2136 |
  2137 |     it(""should render with trust setting"", function() {
> 2138 |         const built = getBuilt(img, trustSettings);
       |                      ^ Lazy Test
  2139 |         expect(built).toMatchSnapshot();
  2140 |     });
  2141 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2164, 'column': 22, 'index': 77195}","  2162 |
  2163 |     it(""should set HTML attributes"", function() {
> 2164 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2165 |         expect(built[0].attributes.id).toMatch(""bar"");
  2166 |         expect(built[1].classes).toContain(""foo"");
  2167 |         expect(built[2].attributes.style).toMatch(""color: red"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2175, 'column': 22, 'index': 77602}","  2173 |
  2174 |     it(""should not affect spacing"", function() {
> 2175 |         const built = getBuilt(""\\htmlId{a}{x+}y"", trustNonStrictSettings);
       |                      ^ Lazy Test
  2176 |         expect(built).toMatchSnapshot();
  2177 |     });
  2178 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2180, 'column': 22, 'index': 77795}","  2178 |
  2179 |     it(""should render with trust and strict setting"", function() {
> 2180 |         const built = getBuilt(html, trustNonStrictSettings);
       |                      ^ Lazy Test
  2181 |         expect(built).toMatchSnapshot();
  2182 |     });
  2183 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 2355, 'column': 21, 'index': 84297}","  2353 |     it(""should properly render stretchy accents"", function() {
  2354 |         const tex = `\\widetilde{ABCD}`;
> 2355 |         const tree = getParsed(tex);
       |                     ^ Lazy Test
  2356 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();
  2357 |         expect(markup).toContain('<mo stretchy=""true"">~</mo>');
  2358 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3005, 'column': 24, 'index': 108463}","  3003 |     it(""should allow letters [#$%&~_^] without escaping"", function() {
  3004 |         const url = ""http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz"";
> 3005 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3006 |         expect(parsed1.href).toBe(url);
  3007 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3008 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3013, 'column': 24, 'index': 108813}","  3011 |     it(""should allow balanced braces in url"", function() {
  3012 |         const url = ""http://example.org/{{}t{oo}}"";
> 3013 |         const parsed1 = getParsed(`\\href{${url}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3014 |         expect(parsed1.href).toBe(url);
  3015 |         const parsed2 = getParsed(`\\url{${url}}`, trustSettings)[0];
  3016 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3029, 'column': 24, 'index': 109587}","  3027 |         const url = ""http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz"";
  3028 |         const input = url.replace(/([#$%&~_^{}])/g, '\\$1');
> 3029 |         const parsed1 = getParsed(`\\href{${input}}{\\alpha}`, trustSettings)[0];
       |                        ^ Lazy Test
  3030 |         expect(parsed1.href).toBe(url);
  3031 |         const parsed2 = getParsed(`\\url{${input}}`, trustSettings)[0];
  3032 |         expect(parsed2.href).toBe(url);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3045, 'column': 22, 'index': 110252}","  3043 |
  3044 |     it(""should not affect spacing around"", function() {
> 3045 |         const built = getBuilt(""a\\href{http://example.com/}{+b}"", trustSettings);
       |                      ^ Lazy Test
  3046 |         expect(built).toMatchSnapshot();
  3047 |     });
  3048 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3055, 'column': 23, 'index': 110626}","  3053 |
  3054 |     it(""should allow explicitly allowed protocols"", () => {
> 3055 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3056 |             ""\\href{ftp://x}{foo}"",
  3057 |             new Settings({trust: (context) => context.protocol === ""ftp""}),
  3058 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3063, 'column': 23, 'index': 110905}","  3061 |
  3062 |     it(""should allow all protocols when trust option is true"", () => {
> 3063 |         const parsed = getParsed(""\\href{ftp://x}{foo}"", trustSettings);
       |                       ^ Lazy Test
  3064 |         expect(parsed).toMatchSnapshot();
  3065 |     });
  3066 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3068, 'column': 23, 'index': 111096}","  3066 |
  3067 |     it(""should not allow explicitly disallowed protocols"", () => {
> 3068 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3069 |             ""\\href{javascript:alert('x')}{foo}"",
  3070 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3071 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3076, 'column': 23, 'index': 111401}","  3074 |
  3075 |     it(""should not allow explicitly uppercased disallowed protocols"", () => {
> 3076 |         const parsed = getParsed(
       |                       ^ Lazy Test
  3077 |             ""\\href{JavaScript:alert('x')}{foo}"",
  3078 |             new Settings({trust: context => context.protocol !== ""javascript""}),
  3079 |         );",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3152, 'column': 28, 'index': 114482}","  3150 |
  3151 |     it(""should produce color nodes with a color value given by errorColor"", function() {
> 3152 |         const parsedInput = getParsed(r`\error`, noThrowSettings);
       |                            ^ Lazy Test
  3153 |         expect(parsedInput[0].type).toBe(""color"");
  3154 |         expect(parsedInput[0].color).toBe(errorColor);
  3155 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3158, 'column': 22, 'index': 114741}","  3156 |
  3157 |     it(""should build katex-error span for other type of KaTeX error"", function() {
> 3158 |         const built = getBuilt(`2^2^2`, noThrowSettings);
       |                      ^ Lazy Test
  3159 |         expect(built).toMatchSnapshot();
  3160 |     });
  3161 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 3493, 'column': 27, 'index': 127499}","  3491 |         const parsedBare = getParsed`~`;
  3492 |         expect(parsedBare[0].type).toEqual(""spacing"");
> 3493 |         const parsedChar = getParsed(""\\char`\\~"");
       |                           ^ Lazy Test
  3494 |         expect(parsedChar[0].type).toEqual(""textord"");
  3495 |     });
  3496 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4065, 'column': 22, 'index': 151460}","  4063 |
  4064 |     it(""should clamp size when set"", function() {
> 4065 |         const built = getBuilt(rule, new Settings({maxSize: 5}))[0];
       |                      ^ Lazy Test
  4066 |         expect(built.style.borderRightWidth).toEqual(""5em"");
  4067 |         expect(built.style.borderTopWidth).toEqual(""5em"");
  4068 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4071, 'column': 22, 'index': 151716}","  4069 |
  4070 |     it(""should not clamp size when not set"", function() {
> 4071 |         const built = getBuilt(rule)[0];
       |                      ^ Lazy Test
  4072 |         expect(built.style.borderRightWidth).toEqual(""999em"");
  4073 |         expect(built.style.borderTopWidth).toEqual(""999em"");
  4074 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Lazy Test,"{'line': 4077, 'column': 22, 'index': 151974}","  4075 |
  4076 |     it(""should make zero-width rules if a negative maxSize is passed"", function() {
> 4077 |         const built = getBuilt(rule, new Settings({maxSize: -5}))[0];
       |                      ^ Lazy Test
  4078 |         expect(built.style.borderRightWidth).toEqual(""0em"");
  4079 |         expect(built.style.borderTopWidth).toEqual(""0em"");
  4080 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 105, 'column': 48, 'index': 2995}","  103 |             let group = parse[i];
  104 |             if (group.type === ""htmlmathml"") {
> 105 |                 expect(group.html).toHaveLength(1);
      |                                                ^ Magic Number
  106 |                 group = group.html[0];
  107 |             }
  108 |             if (group.type === ""mclass"") {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 127, 'column': 44, 'index': 3786}","  125 |         const contents = ""\\mathinner{\\langle{\\psi}\\rangle}"";
  126 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);
> 127 |         expect(mml.children.length).toEqual(1);
      |                                            ^ Magic Number
  128 |     });
  129 | });
  130 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 359, 'column': 35, 'index': 10456}","  357 |         const parse = getParsed`{xy}`;
  358 |
> 359 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  360 |
  361 |         const ord = parse[0];
  362 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 381, 'column': 35, 'index': 11058}","  379 |         const parse = getParsed`\begingroup xy \endgroup`;
  380 |
> 381 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  382 |
  383 |         const ord = parse[0];
  384 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 404, 'column': 35, 'index': 11685}","  402 |         const parse = getParsed`\Large abc`;
  403 |
> 404 |         expect(parse).toHaveLength(1);
      |                                   ^ Magic Number
  405 |
  406 |         const sizing = parse[0];
  407 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 416, 'column': 35, 'index': 12008}","  414 |         const parse = getParsed`a \Large abc`;
  415 |
> 416 |         expect(parse).toHaveLength(2);
      |                                   ^ Magic Number
  417 |
  418 |         const sizing = parse[1];
  419 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 421, 'column': 41, 'index': 12135}","  419 |
  420 |         expect(sizing.type).toEqual(""sizing"");
> 421 |         expect(sizing.body).toHaveLength(3);
      |                                         ^ Magic Number
  422 |     });
  423 |
  424 |     it(""should stop at the ends of groups"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 431, 'column': 41, 'index': 12418}","  429 |
  430 |         expect(sizing.type).toEqual(""sizing"");
> 431 |         expect(sizing.body).toHaveLength(1);
      |                                         ^ Magic Number
  432 |     });
  433 |
  434 |     describe(""within optional groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 618, 'column': 40, 'index': 18647}","  616 |
  617 |         const numer = parse.numer;
> 618 |         expect(numer.body).toHaveLength(4);
      |                                        ^ Magic Number
  619 |     });
  620 |
  621 |     it(""should create a denominator from the atoms after \\over"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 625, 'column': 40, 'index': 18864}","  623 |
  624 |         const denom = parse.denom;
> 625 |         expect(denom.body).toHaveLength(4);
      |                                        ^ Magic Number
  626 |     });
  627 |
  628 |     it(""should handle empty numerators"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 765, 'column': 37, 'index': 23672}","  763 |         const group = parse.body;
  764 |
> 765 |         expect(group.length).toEqual(4);
      |                                     ^ Magic Number
  766 |         expect(group[0].type).toEqual(""spacing"");
  767 |         expect(group[1].type).toEqual(""textord"");
  768 |         expect(group[2].type).toEqual(""spacing"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 783, 'column': 40, 'index': 24344}","  781 |         const parse = getParsed(leadingSpaceTextExpression)[0];
  782 |         // [m, o, o]
> 783 |         expect(parse.body).toHaveLength(3);
      |                                        ^ Magic Number
  784 |         expect(parse.body.map(n => n.text).join("""")).toBe(""moo"");
  785 |     });
  786 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 993, 'column': 40, 'index': 31568}","  991 |         const bigParse = getParsed(bigDelim)[0];
  992 |
> 993 |         expect(smallParse.size).toEqual(1);
      |                                        ^ Magic Number
  994 |         expect(bigParse.size).toEqual(4);
  995 |     });
  996 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 994, 'column': 38, 'index': 31610}","  992 |
  993 |         expect(smallParse.size).toEqual(1);
> 994 |         expect(bigParse.size).toEqual(4);
      |                                      ^ Magic Number
  995 |     });
  996 | });
  997 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1084, 'column': 57, 'index': 34327}","  1082 |         const hardNumberParse = getParsed(hardNumberRule)[0];
  1083 |
> 1084 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
       |                                                         ^ Magic Number
  1085 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
  1086 |     });
  1087 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1085, 'column': 58, 'index': 34392}","  1083 |
  1084 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);
> 1085 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);
       |                                                          ^ Magic Number
  1086 |     });
  1087 |
  1088 |     it(""should parse negative sizes"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1132, 'column': 51, 'index': 35937}","  1130 |     it(""should parse positive sizes"", function() {
  1131 |         const parse = getParsed`\kern{+1em}`[0];
> 1132 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1133 |     });
  1134 | });
  1135 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1167, 'column': 38, 'index': 37207}","  1165 |         const abParse3 = getParsed(abKern3);
  1166 |
> 1167 |         expect(abParse1).toHaveLength(3);
       |                                      ^ Magic Number
  1168 |         expect(abParse1[0].text).toEqual(""a"");
  1169 |         expect(abParse1[2].text).toEqual(""b"");
  1170 |         expect(abParse2).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1170, 'column': 38, 'index': 37343}","  1168 |         expect(abParse1[0].text).toEqual(""a"");
  1169 |         expect(abParse1[2].text).toEqual(""b"");
> 1170 |         expect(abParse2).toHaveLength(3);
       |                                      ^ Magic Number
  1171 |         expect(abParse2[0].text).toEqual(""a"");
  1172 |         expect(abParse2[2].text).toEqual(""b"");
  1173 |         expect(abParse3).toHaveLength(3);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1173, 'column': 38, 'index': 37479}","  1171 |         expect(abParse2[0].text).toEqual(""a"");
  1172 |         expect(abParse2[2].text).toEqual(""b"");
> 1173 |         expect(abParse3).toHaveLength(3);
       |                                      ^ Magic Number
  1174 |         expect(abParse3[0].text).toEqual(""a"");
  1175 |         expect(abParse3[2].text).toEqual(""b"");
  1176 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1190, 'column': 51, 'index': 38048}","  1188 |     it(""should parse positive sizes"", function() {
  1189 |         const parse = getParsed`\kern+1em`[0];
> 1190 |         expect(parse.dimension.number).toBeCloseTo(1);
       |                                                   ^ Magic Number
  1191 |     });
  1192 |
  1193 |     it(""should handle whitespace"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1196, 'column': 37, 'index': 38210}","  1194 |         const abParse = getParsed(""a\\mkern\t-\r1  \n mu\nb"");
  1195 |
> 1196 |         expect(abParse).toHaveLength(3);
       |                                     ^ Magic Number
  1197 |         expect(abParse[0].text).toEqual(""a"");
  1198 |         expect(abParse[1].dimension.unit).toEqual(""mu"");
  1199 |         expect(abParse[2].text).toEqual(""b"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1349, 'column': 37, 'index': 43506}","  1347 |     it(""should eat a final newline"", function() {
  1348 |         const m3 = getParsed`\begin{matrix}a&b\\ c&d \\ \end{matrix}`[0];
> 1349 |         expect(m3.body).toHaveLength(2);
       |                                     ^ Magic Number
  1350 |     });
  1351 |
  1352 |     it(""should grab \\arraystretch"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1596, 'column': 41, 'index': 51692}","  1594 |         const displayBody = displayNode.body;
  1595 |
> 1596 |         expect(displayBody).toHaveLength(2);
       |                                         ^ Magic Number
  1597 |         expect(displayBody[0].text).toEqual(""e"");
  1598 |     });
  1599 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1650, 'column': 36, 'index': 53727}","  1648 |
  1649 |         const bbBody = nestedParse.body.body;
> 1650 |         expect(bbBody).toHaveLength(3);
       |                                    ^ Magic Number
  1651 |         expect(bbBody[0].type).toEqual(""mathord"");
  1652 |         expect(bbBody[2].type).toEqual(""font"");
  1653 |         expect(bbBody[2].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1662, 'column': 34, 'index': 54255}","  1660 |         expect(colorMathbbParse.color).toEqual(""blue"");
  1661 |         const body = colorMathbbParse.body;
> 1662 |         expect(body).toHaveLength(1);
       |                                  ^ Magic Number
  1663 |         expect(body[0].type).toEqual(""font"");
  1664 |         expect(body[0].font).toEqual(""mathbb"");
  1665 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 1675, 'column': 42, 'index': 54719}","  1673 |         expect(bf.type).toEqual(""font"");
  1674 |         expect(bf.font).toEqual(""mathbf"");
> 1675 |         expect(bf.body.body).toHaveLength(3);
       |                                          ^ Magic Number
  1676 |         expect(bf.body.body[0].text).toEqual(""a"");
  1677 |         expect(bf.body.body[1].type).toEqual(""font"");
  1678 |         expect(bf.body.body[1].font).toEqual(""mathrm"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2248, 'column': 45, 'index': 80580}","  2246 |         // Just a few quick sanity checks here...
  2247 |         const markup = katex.renderToString(r`\sigma^2`);
> 2248 |         expect(markup.indexOf(""<span"")).toBe(0);
       |                                             ^ Magic Number
  2249 |         expect(markup).toContain(""\u03c3"");  // sigma
  2250 |         expect(markup).toContain(""margin-right"");
  2251 |         expect(markup).not.toContain(""marginRight"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2754, 'column': 39, 'index': 97798}","  2752 |             parseTree(r`\sqrt}`, new Settings());
  2753 |         } catch (e) {
> 2754 |             expect(e.position).toEqual(5);
       |                                       ^ Magic Number
  2755 |         }
  2756 |     });
  2757 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 2888, 'column': 37, 'index': 102093}","  2886 |     it(""should not eat the last row when its first cell is empty"", function() {
  2887 |         const ae = getParsed`\begin{aligned}&E_1 & (1)\\&E_2 & (2)\\&E_3 & (3)\end{aligned}`[0];
> 2888 |         expect(ae.body).toHaveLength(3);
       |                                     ^ Magic Number
  2889 |     });
  2890 | });
  2891 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3179, 'column': 40, 'index': 115650}","  3177 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");
  3178 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
> 3179 |             expect(error.position).toBe(4);
       |                                        ^ Magic Number
  3180 |             expect(error.length).toBe(5);
  3181 |         }
  3182 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3180, 'column': 38, 'index': 115692}","  3178 |             expect(error.rawMessage).toBe(""Undefined control sequence: \\fraq"");
  3179 |             expect(error.position).toBe(4);
> 3180 |             expect(error.length).toBe(5);
       |                                      ^ Magic Number
  3181 |         }
  3182 |     });
  3183 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3194, 'column': 40, 'index': 116344}","  3192 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");
  3193 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
> 3194 |             expect(error.position).toBe(7);
       |                                        ^ Magic Number
  3195 |             expect(error.length).toBe(0);
  3196 |         }
  3197 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Magic Number,"{'line': 3195, 'column': 38, 'index': 116386}","  3193 |             expect(error.rawMessage).toBe(""Unexpected end of input in a macro argument, expected '}'"");
  3194 |             expect(error.position).toBe(7);
> 3195 |             expect(error.length).toBe(0);
       |                                      ^ Magic Number
  3196 |         }
  3197 |     });
  3198 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 773}","  771 |
  772 |     it(""should handle backslash followed by newline"", () => {
> 773 |         expect(""\\text{\\ \t\r \n \t\r  }"").toParseLike`\text{\ }`;
      |        ^ Redundant Assertion
  774 |     });
  775 |
  776 |     it(""should accept math mode tokens after its argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1744}","  1742 | describe(""A comment parser"", function() {
  1743 |     it(""should parse comments at the end of a line"", () => {
> 1744 |         expect(""a^2 + b^2 = c^2 % Pythagoras' Theorem\n"").toParse();
       |        ^ Redundant Assertion
  1745 |     });
  1746 |
  1747 |     it(""should parse comments at the start of a line"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1748}","  1746 |
  1747 |     it(""should parse comments at the start of a line"", () => {
> 1748 |         expect(""% comment\n"").toParse();
       |        ^ Redundant Assertion
  1749 |     });
  1750 |
  1751 |     it(""should parse multiple lines of comments in a row"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1752}","  1750 |
  1751 |     it(""should parse multiple lines of comments in a row"", () => {
> 1752 |         expect(""% comment 1\n% comment 2\n"").toParse();
       |        ^ Redundant Assertion
  1753 |     });
  1754 |
  1755 |     it(""should parse comments between subscript and superscript"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1756}","  1754 |
  1755 |     it(""should parse comments between subscript and superscript"", () => {
> 1756 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
       |        ^ Redundant Assertion
  1757 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
  1758 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1759 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1757}","  1755 |     it(""should parse comments between subscript and superscript"", () => {
  1756 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
> 1757 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
       |        ^ Redundant Assertion
  1758 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
  1759 |     });
  1760 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1758}","  1756 |         expect(""x_3 %comment\n^2"").toParseLike`x_3^2`;
  1757 |         expect(""x^ %comment\n{2}"").toParseLike`x^{2}`;
> 1758 |         expect(""x^ %comment\n\\frac{1}{2}"").toParseLike`x^\frac{1}{2}`;
       |        ^ Redundant Assertion
  1759 |     });
  1760 |
  1761 |     it(""should parse comments in size and color groups"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1762}","  1760 |
  1761 |     it(""should parse comments in size and color groups"", () => {
> 1762 |         expect(""\\kern{1 %kern\nem}"").toParse();
       |        ^ Redundant Assertion
  1763 |         expect(""\\kern1 %kern\nem"").toParse();
  1764 |         expect(""\\color{#f00%red\n}"").toParse();
  1765 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1763}","  1761 |     it(""should parse comments in size and color groups"", () => {
  1762 |         expect(""\\kern{1 %kern\nem}"").toParse();
> 1763 |         expect(""\\kern1 %kern\nem"").toParse();
       |        ^ Redundant Assertion
  1764 |         expect(""\\color{#f00%red\n}"").toParse();
  1765 |     });
  1766 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1764}","  1762 |         expect(""\\kern{1 %kern\nem}"").toParse();
  1763 |         expect(""\\kern1 %kern\nem"").toParse();
> 1764 |         expect(""\\color{#f00%red\n}"").toParse();
       |        ^ Redundant Assertion
  1765 |     });
  1766 |
  1767 |     it(""should parse comments before an expression"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1768}","  1766 |
  1767 |     it(""should parse comments before an expression"", () => {
> 1768 |         expect(""%comment\n{2}"").toParseLike`{2}`;
       |        ^ Redundant Assertion
  1769 |     });
  1770 |
  1771 |     it(""should parse comments before and between \\hline"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1778}","  1776 |
  1777 |     it(""should parse comments in the macro definition"", () => {
> 1778 |         expect(""\\def\\foo{1 %}\n2}\n\\foo"").toParseLike`12`;
       |        ^ Redundant Assertion
  1779 |     });
  1780 |
  1781 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1782}","  1780 |
  1781 |     it(""should not expand nor ignore spaces after a command sequence in a comment"", () => {
> 1782 |         expect(""\\def\\foo{1\n2}\nx %\\foo\n"").toParseLike`x`;
       |        ^ Redundant Assertion
  1783 |     });
  1784 |
  1785 |     it(""should not parse a comment without newline in strict mode"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1791}","  1789 |
  1790 |     it(""should not produce or consume space"", () => {
> 1791 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
       |        ^ Redundant Assertion
  1792 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
  1793 |     });
  1794 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1792}","  1790 |     it(""should not produce or consume space"", () => {
  1791 |         expect(""\\text{hello% comment 1\nworld}"").toParseLike`\text{helloworld}`;
> 1792 |         expect(""\\text{hello% comment\n\nworld}"").toParseLike`\text{hello world}`;
       |        ^ Redundant Assertion
  1793 |     });
  1794 |
  1795 |     it(""should not include comments in the output"", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 1796}","  1794 |
  1795 |     it(""should not include comments in the output"", () => {
> 1796 |         expect(""5 % comment\n"").toParseLike`5`;
       |        ^ Redundant Assertion
  1797 |     });
  1798 | });
  1799 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 16, 'line': 2191}","  2189 |
  2190 |                 // Render is expected to throw, so this should not be called.
> 2191 |                 expect(true).toBe(false);
       |                ^ Redundant Assertion
  2192 |             } catch (error) {
  2193 |                 expect(error).toBeInstanceOf(ParseError);
  2194 |                 const message =",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 2993}","  2991 |         expect`\href%end`.toParseLike(""\\href{%}end"", trustSettings);
  2992 |         expect`\url%end`.toParseLike(""\\url{%}end"", trustSettings);
> 2993 |         expect(""\\url%%end\n"").toParseLike(""\\url{%}"", trustSettings);
       |        ^ Redundant Assertion
  2994 |         expect`\url end`.toParseLike(""\\url{e}nd"", trustSettings);
  2995 |         expect`\url%end`.toParseLike(""\\url {%}end"", trustSettings);
  2996 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3036}","  3034 |
  3035 |     it(""should allow comments after URLs"", function() {
> 3036 |         expect(""\\url{http://example.com/}%comment\n"").toBuild();
       |        ^ Redundant Assertion
  3037 |     });
  3038 |
  3039 |     it(""should be marked up correctly"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3174}","  3172 |
  3173 |             // Render is expected to throw, so this should not be called.
> 3174 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3175 |         } catch (error) {
  3176 |             expect(error).toBeInstanceOf(ParseError);
  3177 |             expect(error.message).toBe(""KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3189}","  3187 |
  3188 |             // Render is expected to throw, so this should not be called.
> 3189 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3190 |         } catch (error) {
  3191 |             expect(error).toBeInstanceOf(ParseError);
  3192 |             expect(error.message).toBe(""KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 12, 'line': 3204}","  3202 |
  3203 |             // Render is expected to throw, so this should not be called.
> 3204 |             expect(true).toBe(false);
       |            ^ Redundant Assertion
  3205 |         } catch (error) {
  3206 |             expect(error).toBeInstanceOf(ParseError);
  3207 |             expect(error.message).toBe(""KaTeX parse error: \\verb ended by end of line instead of matching delimiter"");",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3477}","  3475 |
  3476 |     it(""\\char produces literal characters"", () => {
> 3477 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
       |        ^ Redundant Assertion
  3478 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3479 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3480 |         expect(""\\char`\\%"").toParseLike`\char""25`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3478}","  3476 |     it(""\\char produces literal characters"", () => {
  3477 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
> 3478 |         expect(""\\char`\\%"").toParseLike`\char37`;
       |        ^ Redundant Assertion
  3479 |         expect(""\\char`\\%"").toParseLike`\char'45`;
  3480 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3481 |         expect`\char`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3479}","  3477 |         expect(""\\char`a"").toParseLike(""\\char`\\a"");
  3478 |         expect(""\\char`\\%"").toParseLike`\char37`;
> 3479 |         expect(""\\char`\\%"").toParseLike`\char'45`;
       |        ^ Redundant Assertion
  3480 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3481 |         expect`\char`.not.toParse();
  3482 |         expect(""\\char`"").not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3480}","  3478 |         expect(""\\char`\\%"").toParseLike`\char37`;
  3479 |         expect(""\\char`\\%"").toParseLike`\char'45`;
> 3480 |         expect(""\\char`\\%"").toParseLike`\char""25`;
       |        ^ Redundant Assertion
  3481 |         expect`\char`.not.toParse();
  3482 |         expect(""\\char`"").not.toParse();
  3483 |         expect`\char'`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3482}","  3480 |         expect(""\\char`\\%"").toParseLike`\char""25`;
  3481 |         expect`\char`.not.toParse();
> 3482 |         expect(""\\char`"").not.toParse();
       |        ^ Redundant Assertion
  3483 |         expect`\char'`.not.toParse();
  3484 |         expect`\char""`.not.toParse();
  3485 |         expect`\char'a`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3946}","  3944 |
  3945 |     it(""should parse combining characters"", function() {
> 3946 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
       |        ^ Redundant Assertion
  3947 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
  3948 |     });
  3949 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3947}","  3945 |     it(""should parse combining characters"", function() {
  3946 |         expect(""A\u0301C\u0301"").toParseLike(r`Á\acute C`, nonstrictSettings);
> 3947 |         expect(""\\text{A\u0301C\u0301}"").toParseLike(r`\text{Á\'C}`, strictSettings);
       |        ^ Redundant Assertion
  3948 |     });
  3949 |
  3950 |     it(""should parse multi-accented characters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3985}","  3983 |
  3984 |     it(""should parse symbols"", function() {
> 3985 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3986 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
  3987 |     });
  3988 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 3986}","  3984 |     it(""should parse symbols"", function() {
  3985 |         expect(""£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\u00B7\u00A9"").toBuild(strictSettings);
> 3986 |         expect(""\\text{£¥ℂℍℎ\u00A9\u00AE\uFE0F}"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  3987 |     });
  3988 |
  3989 |     it(""should build Greek capital letters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4003}","  4001 |
  4002 |     it(""should build binary operators"", function() {
> 4003 |         expect(""±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞\u22C5\u2218\u2216\u2219"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  4004 |     });
  4005 |
  4006 |     it(""should build common ords"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4007}","  4005 |
  4006 |     it(""should build common ords"", function() {
> 4007 |         expect(""§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵"").toBuild(strictSettings);
       |        ^ Redundant Assertion
  4008 |     });
  4009 |
  4010 |     it(""should build delimiters"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4011}","  4009 |
  4010 |     it(""should build delimiters"", function() {
> 4011 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
       |        ^ Redundant Assertion
  4012 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4013 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4014 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4012}","  4010 |     it(""should build delimiters"", function() {
  4011 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
> 4012 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
       |        ^ Redundant Assertion
  4013 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4014 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4015 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4013}","  4011 |         expect(""\\left\u230A\\frac{a}{b}\\right\u230B"").toBuild();
  4012 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
> 4013 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
       |        ^ Redundant Assertion
  4014 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
  4015 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4016 |         expect`┌x┐ └x┘`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4014}","  4012 |         expect(""\\left\u2308\\frac{a}{b}\\right\u2308"").toBuild();
  4013 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
> 4014 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
       |        ^ Redundant Assertion
  4015 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4016 |         expect`┌x┐ └x┘`.toBuild();
  4017 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4015}","  4013 |         expect(""\\left\u27ee\\frac{a}{b}\\right\u27ef"").toBuild();
  4014 |         expect(""\\left\u27e8\\frac{a}{b}\\right\u27e9"").toBuild();
> 4015 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
       |        ^ Redundant Assertion
  4016 |         expect`┌x┐ └x┘`.toBuild();
  4017 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4018 |         expect(""\u27E6x\u27E7"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4017}","  4015 |         expect(""\\left\u23b0\\frac{a}{b}\\right\u23b1"").toBuild();
  4016 |         expect`┌x┐ └x┘`.toBuild();
> 4017 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
       |        ^ Redundant Assertion
  4018 |         expect(""\u27E6x\u27E7"").toBuild();
  4019 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4020 |         expect(""\\lBrace \\rBrace"").toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4018}","  4016 |         expect`┌x┐ └x┘`.toBuild();
  4017 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
> 4018 |         expect(""\u27E6x\u27E7"").toBuild();
       |        ^ Redundant Assertion
  4019 |         expect(""\\llbracket \\rrbracket"").toBuild();
  4020 |         expect(""\\lBrace \\rBrace"").toBuild();
  4021 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4019}","  4017 |         expect(""\u231Cx\u231D \u231Ex\u231F"").toBuild();
  4018 |         expect(""\u27E6x\u27E7"").toBuild();
> 4019 |         expect(""\\llbracket \\rrbracket"").toBuild();
       |        ^ Redundant Assertion
  4020 |         expect(""\\lBrace \\rBrace"").toBuild();
  4021 |     });
  4022 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Assertion,"{'column': 8, 'line': 4020}","  4018 |         expect(""\u27E6x\u27E7"").toBuild();
  4019 |         expect(""\\llbracket \\rrbracket"").toBuild();
> 4020 |         expect(""\\lBrace \\rBrace"").toBuild();
       |        ^ Redundant Assertion
  4021 |     });
  4022 |
  4023 |     it(""should build some surrogate pairs"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4290, 'column': 19, 'index': 160582}","  4288 |             expect`\message{Hello, world}`.toParse();
  4289 |             // eslint-disable-next-line no-console
> 4290 |             expect(console.log).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4291 |         });
  4292 |     });
  4293 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Redundant Print,"{'line': 4299, 'column': 19, 'index': 160947}","  4297 |             expect`\errmessage{Hello, world}`.toParse();
  4298 |             // eslint-disable-next-line no-console
> 4299 |             expect(console.error).toHaveBeenCalledWith(""Hello, world"");
       |                   ^ Redundant Print
  4300 |         });
  4301 |     });
  4302 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 23}","  21 |
  22 | describe(""A parser"", function() {
> 23 |     it(""should not fail on an empty string"", function() {
     |    ^ Unknown Test
  24 |         expect``.toParse(strictSettings);
  25 |     });
  26 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 27}","  25 |     });
  26 |
> 27 |     it(""should ignore whitespace"", function() {
     |    ^ Unknown Test
  28 |         expect`    x    y    `.toParseLike(""xy"", strictSettings);
  29 |     });
  30 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 31}","  29 |     });
  30 |
> 31 |     it(""should ignore whitespace in atom"", function() {
     |    ^ Unknown Test
  32 |         expect`    x   ^ y    `.toParseLike(""x^y"", strictSettings);
  33 |     });
  34 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 119}","  117 |
  118 | describe(""A mathinner parser"", function() {
> 119 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  120 |         expect`\mathinner{\langle{\psi}\rangle}`.toParse();
  121 |         expect`\frac 1 {\mathinner{\langle{\psi}\rangle}}`.toParse();
  122 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 186}","  184 |
  185 | describe(""A \\KaTeX parser"", function() {
> 186 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  187 |         expect`\KaTeX`.toParse();
  188 |     });
  189 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 192}","  190 |
  191 | describe(""A subscript and superscript parser"", function() {
> 192 |     it(""should not fail on superscripts"", function() {
      |    ^ Unknown Test
  193 |         expect`x^2`.toParse();
  194 |     });
  195 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 196}","  194 |     });
  195 |
> 196 |     it(""should not fail on subscripts"", function() {
      |    ^ Unknown Test
  197 |         expect`x_3`.toParse();
  198 |     });
  199 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 200}","  198 |     });
  199 |
> 200 |     it(""should not fail on both subscripts and superscripts"", function() {
      |    ^ Unknown Test
  201 |         expect`x^2_3`.toParse();
  202 |
  203 |         expect`x_2^3`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 206}","  204 |     });
  205 |
> 206 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  207 |         expect`^3`.toParse();
  208 |         expect`^3+`.toParse();
  209 |         expect`_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 250}","  248 |     });
  249 |
> 250 |     it(""should produce the same thing regardless of order"", function() {
      |    ^ Unknown Test
  251 |         expect`x^2_3`.toParseLike`x_3^2`;
  252 |     });
  253 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 254}","  252 |     });
  253 |
> 254 |     it(""should not parse double subscripts or superscripts"", function() {
      |    ^ Unknown Test
  255 |         expect`x^x^x`.not.toParse();
  256 |
  257 |         expect`x_x_x`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 268}","  266 |     });
  267 |
> 268 |     it(""should work correctly with {}s"", function() {
      |    ^ Unknown Test
  269 |         expect`x^{2+3}`.toParse();
  270 |
  271 |         expect`x_{3-2}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 286}","  284 |     });
  285 |
> 286 |     it(""should work with nested super/subscripts"", function() {
      |    ^ Unknown Test
  287 |         expect`x^{x^x}`.toParse();
  288 |         expect`x^{x_x}`.toParse();
  289 |         expect`x_{x^x}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 293}","  291 |     });
  292 |
> 293 |     it(""should work with Unicode (sub|super)script characters"", function() {
      |    ^ Unknown Test
  294 |         expect`A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃`.toParseLike`A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}`;
  295 |     });
  296 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 297}","  295 |     });
  296 |
> 297 |     it(""should not fail if \\relax is in an atom"", function() {
      |    ^ Unknown Test
  298 |         expect`\hskip1em\relax^2`.toParse(strictSettings);
  299 |     });
  300 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 301}","  299 |     });
  300 |
> 301 |     it(""should skip \\relax in super/subscripts"", function() {
      |    ^ Unknown Test
  302 |         expect`x^\relax 2`.toParseLike`x^2`;
  303 |         expect`x_\relax 2`.toParseLike`x_2`;
  304 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 308}","  306 |
  307 | describe(""A subscript and superscript tree-builder"", function() {
> 308 |     it(""should not fail when there is no nucleus"", function() {
      |    ^ Unknown Test
  309 |         expect`^3`.toBuild();
  310 |         expect`_2`.toBuild();
  311 |         expect`^3_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 317}","  315 |
  316 | describe(""A parser with limit controls"", function() {
> 317 |     it(""should fail when the limit control is not preceded by an op node"", function() {
      |    ^ Unknown Test
  318 |         expect`3\nolimits_2^2`.not.toParse();
  319 |         expect`\sqrt\limits_2^2`.not.toParse();
  320 |         expect`45 +\nolimits 45`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 323}","  321 |     });
  322 |
> 323 |     it(""should parse when the limit control directly follows an op node"", function() {
      |    ^ Unknown Test
  324 |         expect`\int\limits_2^2 3`.toParse();
  325 |         expect`\sum\nolimits_3^4 4`.toParse();
  326 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 328}","  326 |     });
  327 |
> 328 |     it(""should parse when the limit control is in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  329 |         expect`\int_2^2\limits`.toParse();
  330 |         expect`\int^2\nolimits_2`.toParse();
  331 |         expect`\int_2\limits^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 334}","  332 |     });
  333 |
> 334 |     it(""should allow multiple limit controls in the sup/sub area of an op node"", function() {
      |    ^ Unknown Test
  335 |         expect`\int_2\nolimits^2\limits 3`.toParse();
  336 |         expect`\int\nolimits\limits_2^2`.toParse();
  337 |         expect`\int\limits\limits\limits_2^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 352}","  350 |
  351 | describe(""A group parser"", function() {
> 352 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  353 |         expect`{xy}`.toParse();
  354 |     });
  355 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 369}","  367 |
  368 | describe(""A \\begingroup...\\endgroup parser"", function() {
> 369 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  370 |         expect`\begingroup xy \endgroup`.toParse();
  371 |     });
  372 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 373}","  371 |     });
  372 |
> 373 |     it(""should fail when it is mismatched"", function() {
      |    ^ Unknown Test
  374 |         expect`\begingroup xy`.not.toParse();
  375 |         expect`\begingroup xy }`.not.toParse();
  376 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 390}","  388 |     });
  389 |
> 390 |     it(""should not affect spacing in math mode"", function() {
      |    ^ Unknown Test
  391 |         expect`\begingroup x+ \endgroup y`.toBuildLike`x+y`;
  392 |     });
  393 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 396}","  394 |
  395 | describe(""An implicit group parser"", function() {
> 396 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  397 |         expect`\Large x`.toParse();
  398 |         expect`abc {abc \Large xyz} abc`.toParse();
  399 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 458}","  456 |
  457 | describe(""A function parser"", function() {
> 458 |     it(""should parse no argument functions"", function() {
      |    ^ Unknown Test
  459 |         expect`\div`.toParse();
  460 |     });
  461 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 462}","  460 |     });
  461 |
> 462 |     it(""should parse 1 argument functions"", function() {
      |    ^ Unknown Test
  463 |         expect`\blue x`.toParse();
  464 |     });
  465 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 466}","  464 |     });
  465 |
> 466 |     it(""should parse 2 argument functions"", function() {
      |    ^ Unknown Test
  467 |         expect`\frac 1 2`.toParse();
  468 |     });
  469 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 470}","  468 |     });
  469 |
> 470 |     it(""should not parse 1 argument functions with no arguments"", function() {
      |    ^ Unknown Test
  471 |         expect`\blue`.not.toParse();
  472 |     });
  473 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 474}","  472 |     });
  473 |
> 474 |     it(""should not parse 2 argument functions with 0 or 1 arguments"", function() {
      |    ^ Unknown Test
  475 |         expect`\frac`.not.toParse();
  476 |
  477 |         expect`\frac 1`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 480}","  478 |     });
  479 |
> 480 |     it(""should not parse a function with text right after it"", function() {
      |    ^ Unknown Test
  481 |         expect`\redx`.not.toParse();
  482 |     });
  483 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 484}","  482 |     });
  483 |
> 484 |     it(""should parse a function with a number right after it"", function() {
      |    ^ Unknown Test
  485 |         expect`\frac12`.toParse();
  486 |     });
  487 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 488}","  486 |     });
  487 |
> 488 |     it(""should parse some functions with text right after it"", function() {
      |    ^ Unknown Test
  489 |         expect`\;x`.toParse();
  490 |     });
  491 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 652}","  650 |     });
  651 |
> 652 |     it(""should handle \\textstyle correctly"", function() {
      |    ^ Unknown Test
  653 |         expect`\textstyle 1 \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  654 |         expect`{\textstyle 1} \over 2`.toParseLike`\frac{\textstyle 1}{2}`;
  655 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 678}","  676 |
  677 | describe(""A genfrac builder"", function() {
> 678 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  679 |         expect`\frac{x}{y}`.toBuild();
  680 |         expect`\dfrac{x}{y}`.toBuild();
  681 |         expect`\tfrac{x}{y}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 691}","  689 |
  690 | describe(""A infix builder"", function() {
> 691 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  692 |         expect`a \over b`.toBuild();
  693 |         expect`a \atop b`.toBuild();
  694 |         expect`a \choose b`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 787}","  785 |     });
  786 |
> 787 |     it(""should parse math within text group"", function() {
      |    ^ Unknown Test
  788 |         expect`\text{graph: $y = mx + b$}`.toParse(strictSettings);
  789 |         expect`\text{graph: \(y = mx + b\)}`.toParse(strictSettings);
  790 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 792}","  790 |     });
  791 |
> 792 |     it(""should parse math within text within math within text"", function() {
      |    ^ Unknown Test
  793 |         expect`\text{hello $x + \text{world $y$} + z$}`.toParse(strictSettings);
  794 |         expect`\text{hello \(x + \text{world $y$} + z\)}`.toParse(strictSettings);
  795 |         expect`\text{hello $x + \text{world \(y\)} + z$}`.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 799}","  797 |     });
  798 |
> 799 |     it(""should forbid \\( within math mode"", function() {
      |    ^ Unknown Test
  800 |         expect`\(`.not.toParse();
  801 |         expect`\text{$\(x\)$}`.not.toParse();
  802 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 804}","  802 |     });
  803 |
> 804 |     it(""should forbid $ within math mode"", function() {
      |    ^ Unknown Test
  805 |         expect`$x$`.not.toParse();
  806 |         expect`\text{\($x$\)}`.not.toParse();
  807 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 809}","  807 |     });
  808 |
> 809 |     it(""should detect unbalanced \\)"", function() {
      |    ^ Unknown Test
  810 |         expect`\)`.not.toParse();
  811 |         expect`\text{\)}`.not.toParse();
  812 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 814}","  812 |     });
  813 |
> 814 |     it(""should detect unbalanced $"", function() {
      |    ^ Unknown Test
  815 |         expect`$`.not.toParse();
  816 |         expect`\text{$}`.not.toParse();
  817 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 819}","  817 |     });
  818 |
> 819 |     it(""should not mix $ and \\(..\\)"", function() {
      |    ^ Unknown Test
  820 |         expect`\text{$x\)}`.not.toParse();
  821 |         expect`\text{\(x$}`.not.toParse();
  822 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 824}","  822 |     });
  823 |
> 824 |     it(""should parse spacing functions"", function() {
      |    ^ Unknown Test
  825 |         expect`a b\, \; \! \: \> ~ \thinspace \medspace \quad \ `.toBuild();
  826 |         expect`\enspace \thickspace \qquad \space \nobreakspace`.toBuild();
  827 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 829}","  827 |     });
  828 |
> 829 |     it(""should omit spaces after commands"", function() {
      |    ^ Unknown Test
  830 |         expect`\text{\textellipsis !}`.toParseLike`\text{\textellipsis!}`;
  831 |     });
  832 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 833}","  831 |     });
  832 |
> 833 |     it(""should handle ⋮ and \\vdots"", function() {
      |    ^ Unknown Test
  834 |         expect`\text{a \vdots b ⋮ d}`.toParse();
  835 |     });
  836 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 839}","  837 |
  838 | describe(""A texvc builder"", function() {
> 839 |     it(""should not fail"", function() {
      |    ^ Unknown Test
  840 |         expect`\lang\N\darr\R\dArr\Z\Darr\alef\rang`.toBuild();
  841 |         expect`\alefsym\uarr\Alpha\uArr\Beta\Uarr\Chi`.toBuild();
  842 |         expect`\clubs\diamonds\hearts\spades\cnums\Complex`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1013}","  1011 |
  1012 | describe(""An lap parser"", function() {
> 1013 |     it(""should not fail on a text argument"", function() {
       |    ^ Unknown Test
  1014 |         expect`\rlap{\,/}{=}`.toParse();
  1015 |         expect`\mathrlap{\,/}{=}`.toParse();
  1016 |         expect`{=}\llap{/\,}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1022}","  1020 |     });
  1021 |
> 1022 |     it(""should not fail if math version is used"", function() {
       |    ^ Unknown Test
  1023 |         expect`\mathrlap{\frac{a}{b}}{=}`.toParse();
  1024 |         expect`{=}\mathllap{\frac{a}{b}}`.toParse();
  1025 |         expect`\sum_{\mathclap{\frac{a}{b}}}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1028}","  1026 |     });
  1027 |
> 1028 |     it(""should fail on math if AMS version is used"", function() {
       |    ^ Unknown Test
  1029 |         expect`\rlap{\frac{a}{b}}{=}`.not.toParse();
  1030 |         expect`{=}\llap{\frac{a}{b}}`.not.toParse();
  1031 |         expect`\sum_{\clap{\frac{a}{b}}}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1284}","  1282 | describe(""A begin/end parser"", function() {
  1283 |
> 1284 |     it(""should parse a simple environment"", function() {
       |    ^ Unknown Test
  1285 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1286 |     });
  1287 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1288}","  1286 |     });
  1287 |
> 1288 |     it(""should parse an environment with argument"", function() {
       |    ^ Unknown Test
  1289 |         expect`\begin{array}{cc}a&b\\c&d\end{array}`.toParse();
  1290 |     });
  1291 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1292}","  1290 |     });
  1291 |
> 1292 |     it(""should parse and build an empty environment"", function() {
       |    ^ Unknown Test
  1293 |         expect`\begin{aligned}\end{aligned}`.toBuild();
  1294 |         expect`\begin{matrix}\end{matrix}`.toBuild();
  1295 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1297}","  1295 |     });
  1296 |
> 1297 |     it(""should parse an environment with hlines"", function() {
       |    ^ Unknown Test
  1298 |         expect`\begin{matrix}\hline a&b\\ \hline c&d\end{matrix}`.toParse();
  1299 |         expect`\begin{matrix}\hline a&b\cr \hline c&d\end{matrix}`.toParse();
  1300 |         expect`\begin{matrix}\hdashline a&b\\ \hdashline c&d\end{matrix}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1303}","  1301 |     });
  1302 |
> 1303 |     it(""should forbid hlines outside array environment"", () => {
       |    ^ Unknown Test
  1304 |         expect`\hline`.not.toParse();
  1305 |     });
  1306 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1307}","  1305 |     });
  1306 |
> 1307 |     it(""should error when name is mismatched"", function() {
       |    ^ Unknown Test
  1308 |         expect`\begin{matrix}a&b\\c&d\end{pmatrix}`.not.toParse();
  1309 |     });
  1310 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1311}","  1309 |     });
  1310 |
> 1311 |     it(""should error when commands are mismatched"", function() {
       |    ^ Unknown Test
  1312 |         expect`\begin{matrix}a&b\\c&d\right{pmatrix}`.not.toParse();
  1313 |     });
  1314 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1315}","  1313 |     });
  1314 |
> 1315 |     it(""should error when end is missing"", function() {
       |    ^ Unknown Test
  1316 |         expect`\begin{matrix}a&b\\c&d`.not.toParse();
  1317 |     });
  1318 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1319}","  1317 |     });
  1318 |
> 1319 |     it(""should error when braces are mismatched"", function() {
       |    ^ Unknown Test
  1320 |         expect`{\begin{matrix}a&b\\c&d}\end{matrix}`.not.toParse();
  1321 |     });
  1322 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1323}","  1321 |     });
  1322 |
> 1323 |     it(""should cooperate with infix notation"", function() {
       |    ^ Unknown Test
  1324 |         expect`\begin{matrix}0&1\over2&3\\4&5&6\end{matrix}`.toParse();
  1325 |     });
  1326 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1333}","  1331 |     });
  1332 |
> 1333 |     it(""should allow \\cr and \\\\ as a line terminator"", function() {
       |    ^ Unknown Test
  1334 |         expect`\begin{matrix}a&b\cr c&d\end{matrix}`.toParse();
  1335 |         expect`\begin{matrix}a&b\\c&d\end{matrix}`.toParse();
  1336 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1338}","  1336 |     });
  1337 |
> 1338 |     it(""should not allow \\cr to scan for an optional size argument"", function() {
       |    ^ Unknown Test
  1339 |         expect`\begin{matrix}a&b\cr[c]&d\end{matrix}`.toParse();
  1340 |     });
  1341 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1342}","  1340 |     });
  1341 |
> 1342 |     it(""should not treat [ after space as optional argument to \\\\"", function() {
       |    ^ Unknown Test
  1343 |         expect`\begin{matrix}a&b\\ [c]&d\end{matrix}`.toParse();
  1344 |         expect`a\\ [b]`.toParse();
  1345 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1357}","  1355 |     });
  1356 |
> 1357 |     it(""should allow an optional argument in {matrix*} and company."", function() {
       |    ^ Unknown Test
  1358 |         expect`\begin{matrix*}[r] a & -1 \\ -1 & d \end{matrix*}`.toBuild();
  1359 |         expect`\begin{pmatrix*}[r] a & -1 \\ -1 & d \end{pmatrix*}`.toBuild();
  1360 |         expect`\begin{bmatrix*}[r] a & -1 \\ -1 & d \end{bmatrix*}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1394}","  1392 |     });
  1393 |
> 1394 |     it(""should build sized square roots"", function() {
       |    ^ Unknown Test
  1395 |         expect`\Large\sqrt[3]{x}`.toBuild();
  1396 |     });
  1397 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1398}","  1396 |     });
  1397 |
> 1398 |     it(""should expand argument if optional argument doesn't exist"", function() {
       |    ^ Unknown Test
  1399 |         expect`\sqrt\foo`.toParseLike(""\\sqrt123"",
  1400 |             new Settings({macros: {""\\foo"": ""123""}}));
  1401 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1403}","  1401 |     });
  1402 |
> 1403 |     it(""should not expand argument if optional argument exists"", function() {
       |    ^ Unknown Test
  1404 |         expect`\sqrt[2]\foo`.toParseLike(""\\sqrt[2]{123}"",
  1405 |             new Settings({macros: {""\\foo"": ""123""}}));
  1406 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1410}","  1408 |
  1409 | describe(""A TeX-compliant parser"", function() {
> 1410 |     it(""should work"", function() {
       |    ^ Unknown Test
  1411 |         expect`\frac 2 3`.toParse();
  1412 |     });
  1413 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1429}","  1427 |     });
  1428 |
> 1429 |     it(""should fail when there are missing sup/subscripts"", function() {
       |    ^ Unknown Test
  1430 |         expect`x^`.not.toParse();
  1431 |         expect`x_`.not.toParse();
  1432 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1500}","  1498 |     });
  1499 |
> 1500 |     it(""should parse multiple primes correctly"", function() {
       |    ^ Unknown Test
  1501 |         expect`x''''`.toParse();
  1502 |         expect`x_2''`.toParse();
  1503 |         expect`x''_2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1506}","  1504 |     });
  1505 |
> 1506 |     it(""should fail when sup/subscripts are interspersed with arguments"", function() {
       |    ^ Unknown Test
  1507 |         expect`\sqrt^23`.not.toParse();
  1508 |         expect`\frac^234`.not.toParse();
  1509 |         expect`\frac2^34`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1512}","  1510 |     });
  1511 |
> 1512 |     it(""should succeed when sup/subscripts come after whole functions"", function() {
       |    ^ Unknown Test
  1513 |         expect`\sqrt2^3`.toParse();
  1514 |         expect`\frac23^4`.toParse();
  1515 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1517}","  1515 |     });
  1516 |
> 1517 |     it(""should succeed with a sqrt around a text/frac"", function() {
       |    ^ Unknown Test
  1518 |         expect`\sqrt \frac x y`.toParse();
  1519 |         expect`\sqrt \text x`.toParse();
  1520 |         expect`x^\frac x y`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1554}","  1552 |
  1553 | describe(""An op symbol builder"", function() {
> 1554 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1555 |         expect`\int_i^n`.toBuild();
  1556 |         expect`\iint_i^n`.toBuild();
  1557 |         expect`\iiint_i^n`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1571}","  1569 |
  1570 | describe(""A style change parser"", function() {
> 1571 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1572 |         expect`\displaystyle x`.toParse();
  1573 |         expect`\textstyle x`.toParse();
  1574 |         expect`\scriptstyle x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1602}","  1600 |
  1601 | describe(""A font parser"", function() {
> 1602 |     it(""should parse \\mathrm, \\mathbb, \\mathit, and \\mathnormal"", function() {
       |    ^ Unknown Test
  1603 |         expect`\mathrm x`.toParse();
  1604 |         expect`\mathbb x`.toParse();
  1605 |         expect`\mathit x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1613}","  1611 |     });
  1612 |
> 1613 |     it(""should parse \\mathcal and \\mathfrak"", function() {
       |    ^ Unknown Test
  1614 |         expect`\mathcal{ABC123}`.toParse();
  1615 |         expect`\mathfrak{abcABC123}`.toParse();
  1616 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1667}","  1665 |     });
  1666 |
> 1667 |     it(""should not parse a series of font commands"", function() {
       |    ^ Unknown Test
  1668 |         expect`\mathbb \mathrm R`.not.toParse();
  1669 |     });
  1670 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1682}","  1680 |     });
  1681 |
> 1682 |     it(""should be allowed in the argument"", function() {
       |    ^ Unknown Test
  1683 |         expect`e^\mathbf{x}`.toParse();
  1684 |     });
  1685 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1691}","  1689 |     });
  1690 |
> 1691 |     it(""old-style fonts work like new-style fonts"", () => {
       |    ^ Unknown Test
  1692 |         expect`\rm xyz`.toParseLike`\mathrm{xyz}`;
  1693 |         expect`\sf xyz`.toParseLike`\mathsf{xyz}`;
  1694 |         expect`\tt xyz`.toParseLike`\mathtt{xyz}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1702}","  1700 |
  1701 | describe(""A \\pmb builder"", function() {
> 1702 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  1703 |         expect`\pmb{\mu}`.toBuild();
  1704 |         expect`\pmb{=}`.toBuild();
  1705 |         expect`\pmb{+}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1713}","  1711 |
  1712 | describe(""A raise parser"", function() {
> 1713 |     it(""should parse and build text in \\raisebox"", function() {
       |    ^ Unknown Test
  1714 |         expect`\raisebox{5pt}{text}`.toBuild(strictSettings);
  1715 |         expect`\raisebox{-5pt}{text}`.toBuild(strictSettings);
  1716 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1718}","  1716 |     });
  1717 |
> 1718 |     it(""should parse and build math in non-strict \\vcenter"", function() {
       |    ^ Unknown Test
  1719 |         expect`\vcenter{\frac a b}`.toBuild(nonstrictSettings);
  1720 |     });
  1721 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1722}","  1720 |     });
  1721 |
> 1722 |     it(""should fail to parse math in \\raisebox"", function() {
       |    ^ Unknown Test
  1723 |         expect`\raisebox{5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1724 |         expect`\raisebox{-5pt}{\frac a b}`.not.toParse(nonstrictSettings);
  1725 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1727}","  1725 |     });
  1726 |
> 1727 |     it(""should fail to parse math in an \\hbox"", function() {
       |    ^ Unknown Test
  1728 |         expect`\hbox{\frac a b}`.not.toParse(nonstrictSettings);
  1729 |     });
  1730 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1731}","  1729 |     });
  1730 |
> 1731 |     it(""should fail to build, given an unbraced length"", function() {
       |    ^ Unknown Test
  1732 |         expect`\raisebox5pt{text}`.not.toBuild(strictSettings);
  1733 |         expect`\raisebox-5pt{text}`.not.toBuild(strictSettings);
  1734 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1736}","  1734 |     });
  1735 |
> 1736 |     it(""should build math in an hbox when math mode is set"", function() {
       |    ^ Unknown Test
  1737 |         expect`a + \vcenter{\hbox{$\frac{\frac a b}c$}}`
  1738 |             .toBuild(strictSettings);
  1739 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 1785}","  1783 |     });
  1784 |
> 1785 |     it(""should not parse a comment without newline in strict mode"", () => {
       |    ^ Unknown Test
  1786 |         expect`x%y`.not.toParse(strictSettings);
  1787 |         expect`x%y`.toParse(nonstrictSettings);
  1788 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2270}","  2268 |
  2269 | describe(""An accent parser"", function() {
> 2270 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2271 |         expect`\vec{x}`.toParse();
  2272 |         expect`\vec{x^2}`.toParse();
  2273 |         expect`\vec{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2290}","  2288 |     });
  2289 |
> 2290 |     it(""should parse stretchy, shifty accents"", function() {
       |    ^ Unknown Test
  2291 |         expect`\widehat{x}`.toParse();
  2292 |         expect`\widecheck{x}`.toParse();
  2293 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2295}","  2293 |     });
  2294 |
> 2295 |     it(""should parse stretchy, non-shifty accents"", function() {
       |    ^ Unknown Test
  2296 |         expect`\overrightarrow{x}`.toParse();
  2297 |     });
  2298 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2301}","  2299 |
  2300 | describe(""An accent builder"", function() {
> 2301 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2302 |         expect`\vec{x}`.toBuild();
  2303 |         expect`\vec{x}^2`.toBuild();
  2304 |         expect`\vec{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2318}","  2316 |
  2317 | describe(""A stretchy and shifty accent builder"", function() {
> 2318 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2319 |         expect`\widehat{AB}`.toBuild();
  2320 |         expect`\widecheck{AB}`.toBuild();
  2321 |         expect`\widehat{AB}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2336}","  2334 |
  2335 | describe(""A stretchy and non-shifty accent builder"", function() {
> 2336 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2337 |         expect`\overrightarrow{AB}`.toBuild();
  2338 |         expect`\overrightarrow{AB}^2`.toBuild();
  2339 |         expect`\overrightarrow{AB}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2362}","  2360 |
  2361 | describe(""An under-accent parser"", function() {
> 2362 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2363 |         expect`\underrightarrow{x}`.toParse();
  2364 |         expect`\underrightarrow{x^2}`.toParse();
  2365 |         expect`\underrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2383}","  2381 |
  2382 | describe(""An under-accent builder"", function() {
> 2383 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2384 |         expect`\underrightarrow{x}`.toBuild();
  2385 |         expect`\underrightarrow{x}^2`.toBuild();
  2386 |         expect`\underrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2401}","  2399 |
  2400 | describe(""An extensible arrow parser"", function() {
> 2401 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2402 |         expect`\xrightarrow{x}`.toParse();
  2403 |         expect`\xrightarrow{x^2}`.toParse();
  2404 |         expect`\xrightarrow{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2423}","  2421 |
  2422 | describe(""An extensible arrow builder"", function() {
> 2423 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2424 |         expect`\xrightarrow{x}`.toBuild();
  2425 |         expect`\xrightarrow{x}^2`.toBuild();
  2426 |         expect`\xrightarrow{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2442}","  2440 |
  2441 | describe(""A horizontal brace parser"", function() {
> 2442 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2443 |         expect`\overbrace{x}`.toParse();
  2444 |         expect`\overbrace{x^2}`.toParse();
  2445 |         expect`\overbrace{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2465}","  2463 |
  2464 | describe(""A horizontal brace builder"", function() {
> 2465 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2466 |         expect`\overbrace{x}`.toBuild();
  2467 |         expect`\overbrace{x}^2`.toBuild();
  2468 |         expect`\underbrace{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2483}","  2481 |
  2482 | describe(""A boxed parser"", function() {
> 2483 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2484 |         expect`\boxed{x}`.toParse();
  2485 |         expect`\boxed{x^2}`.toParse();
  2486 |         expect`\boxed{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2498}","  2496 |
  2497 | describe(""A boxed builder"", function() {
> 2498 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2499 |         expect`\boxed{x}`.toBuild();
  2500 |         expect`\boxed{x}^2`.toBuild();
  2501 |         expect`\boxed{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2515}","  2513 |
  2514 | describe(""An fbox parser, unlike a boxed parser,"", function() {
> 2515 |     it(""should fail when given math"", function() {
       |    ^ Unknown Test
  2516 |         expect`\fbox{\frac a b}`.not.toParse();
  2517 |     });
  2518 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2521}","  2519 |
  2520 | describe(""A colorbox parser"", function() {
> 2521 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2522 |         expect`\colorbox{red}{a b}`.toParse();
  2523 |         expect`\colorbox{red}{x}^2`.toParse();
  2524 |         expect`\colorbox{red} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2527}","  2525 |     });
  2526 |
> 2527 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2528 |         expect`\colorbox{red}{\alpha}`.not.toParse();
  2529 |         expect`\colorbox{red}{\frac{a}{b}}`.not.toParse();
  2530 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2532}","  2530 |     });
  2531 |
> 2532 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2533 |         expect`\colorbox{red}{a b}`.toParse();
  2534 |         expect`\colorbox{#197}{a b}`.toParse();
  2535 |         expect`\colorbox{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2545}","  2543 |
  2544 | describe(""A colorbox builder"", function() {
> 2545 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2546 |         expect`\colorbox{red}{a b}`.toBuild();
  2547 |         expect`\colorbox{red}{a b}^2`.toBuild();
  2548 |         expect`\colorbox{red} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2557}","  2555 |
  2556 | describe(""An fcolorbox parser"", function() {
> 2557 |     it(""should not fail, given a text argument"", function() {
       |    ^ Unknown Test
  2558 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2559 |         expect`\fcolorbox{blue}{yellow}{x}^2`.toParse();
  2560 |         expect`\fcolorbox{blue}{yellow} x`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2563}","  2561 |     });
  2562 |
> 2563 |     it(""should fail, given a math argument"", function() {
       |    ^ Unknown Test
  2564 |         expect`\fcolorbox{blue}{yellow}{\alpha}`.not.toParse();
  2565 |         expect`\fcolorbox{blue}{yellow}{\frac{a}{b}}`.not.toParse();
  2566 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2568}","  2566 |     });
  2567 |
> 2568 |     it(""should parse a color"", function() {
       |    ^ Unknown Test
  2569 |         expect`\fcolorbox{blue}{yellow}{a b}`.toParse();
  2570 |         expect`\fcolorbox{blue}{#197}{a b}`.toParse();
  2571 |         expect`\fcolorbox{blue}{#1a9b7c}{a b}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2581}","  2579 |
  2580 | describe(""A fcolorbox builder"", function() {
> 2581 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2582 |         expect`\fcolorbox{blue}{yellow}{a b}`.toBuild();
  2583 |         expect`\fcolorbox{blue}{yellow}{a b}^2`.toBuild();
  2584 |         expect`\fcolorbox{blue}{yellow} x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2593}","  2591 |
  2592 | describe(""A strike-through parser"", function() {
> 2593 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2594 |         expect`\cancel{x}`.toParse();
  2595 |         expect`\cancel{x^2}`.toParse();
  2596 |         expect`\cancel{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2614}","  2612 |
  2613 | describe(""A strike-through builder"", function() {
> 2614 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2615 |         expect`\cancel{x}`.toBuild();
  2616 |         expect`\cancel{x}^2`.toBuild();
  2617 |         expect`\cancel{x}_2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2635}","  2633 |
  2634 | describe(""A actuarial angle parser"", function() {
> 2635 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2636 |         expect`a_{\angl{n}}`.toParse();
  2637 |     });
  2638 |     it(""should fail in text mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2638}","  2636 |         expect`a_{\angl{n}}`.toParse();
  2637 |     });
> 2638 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2639 |         expect`\text{a_{\angl{n}}}`.not.toParse();
  2640 |     });
  2641 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2644}","  2642 |
  2643 | describe(""A actuarial angle builder"", function() {
> 2644 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2645 |         expect`a_{\angl{n}}`.toBuild();
  2646 |         expect`a_{\angl{n}i}`.toBuild();
  2647 |         expect`a_{\angl n}`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2653}","  2651 |
  2652 | describe(""\\phase"", function() {
> 2653 |     it(""should fail in text mode"", function() {
       |    ^ Unknown Test
  2654 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2655 |     });
  2656 |     it(""should not fail in math mode"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2656}","  2654 |         expect`\text{\phase{-78.2^\circ}}`.not.toParse();
  2655 |     });
> 2656 |     it(""should not fail in math mode"", function() {
       |    ^ Unknown Test
  2657 |         expect`\phase{-78.2^\circ}`.toBuild();
  2658 |     });
  2659 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2662}","  2660 |
  2661 | describe(""A phantom parser"", function() {
> 2662 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2663 |         expect`\phantom{x}`.toParse();
  2664 |         expect`\phantom{x^2}`.toParse();
  2665 |         expect`\phantom{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2682}","  2680 |
  2681 | describe(""A phantom builder"", function() {
> 2682 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2683 |         expect`\phantom{x}`.toBuild();
  2684 |         expect`\phantom{x^2}`.toBuild();
  2685 |         expect`\phantom{x}^2`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2711}","  2709 |
  2710 | describe(""A smash parser"", function() {
> 2711 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2712 |         expect`\smash{x}`.toParse();
  2713 |         expect`\smash{x^2}`.toParse();
  2714 |         expect`\smash{x}^2`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2736}","  2734 |
  2735 | describe(""A smash builder"", function() {
> 2736 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2737 |         expect`\smash{x}`.toBuild(nonstrictSettings);
  2738 |         expect`\smash{x^2}`.toBuild(nonstrictSettings);
  2739 |         expect`\smash{x}^2`.toBuild(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2760}","  2758 |
  2759 | describe(""An optional argument parser"", function() {
> 2760 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2761 |         // Note this doesn't actually make an optional argument, but still
  2762 |         // should work
  2763 |         expect`\frac[1]{2}{3}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2768}","  2766 |     });
  2767 |
> 2768 |     it(""should work with sqrts with optional arguments"", function() {
       |    ^ Unknown Test
  2769 |         expect`\sqrt[3]{2}`.toParse();
  2770 |     });
  2771 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2772}","  2770 |     });
  2771 |
> 2772 |     it(""should work when the optional argument is missing"", function() {
       |    ^ Unknown Test
  2773 |         expect`\sqrt{2}`.toParse();
  2774 |         expect`\rule{1em}{2em}`.toParse();
  2775 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2777}","  2775 |     });
  2776 |
> 2777 |     it(""should fail when the optional argument is malformed"", function() {
       |    ^ Unknown Test
  2778 |         expect`\rule[1]{2em}{3em}`.not.toParse();
  2779 |     });
  2780 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2781}","  2779 |     });
  2780 |
> 2781 |     it(""should not work if the optional argument isn't closed"", function() {
       |    ^ Unknown Test
  2782 |         expect`\sqrt[`.not.toParse();
  2783 |     });
  2784 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2831}","  2829 | describe(""A substack function"", function() {
  2830 |
> 2831 |     it(""should build"", function() {
       |    ^ Unknown Test
  2832 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2833 |     });
  2834 |     it(""should accommodate spaces in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2834}","  2832 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2833 |     });
> 2834 |     it(""should accommodate spaces in the argument"", function() {
       |    ^ Unknown Test
  2835 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2836 |     });
  2837 |     it(""should accommodate macros in the argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2837}","  2835 |         expect`\sum_{\substack{ 0<i<m \\ 0<j<n }}  P(i,j)`.toBuild();
  2836 |     });
> 2837 |     it(""should accommodate macros in the argument"", function() {
       |    ^ Unknown Test
  2838 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2839 |     });
  2840 |     it(""should accommodate an empty argument"", function() {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2840}","  2838 |         expect`\sum_{\substack{ 0<i<\varPi \\ 0<j<\pi }}  P(i,j)`.toBuild();
  2839 |     });
> 2840 |     it(""should accommodate an empty argument"", function() {
       |    ^ Unknown Test
  2841 |         expect`\sum_{\substack{}}  P(i,j)`.toBuild();
  2842 |     });
  2843 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2848}","  2846 | describe(""A smallmatrix environment"", function() {
  2847 |
> 2848 |     it(""should build"", function() {
       |    ^ Unknown Test
  2849 |         expect`\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}`.toBuild();
  2850 |     });
  2851 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2856}","  2854 | describe(""A cases environment"", function() {
  2855 |
> 2856 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2857 |         expect`f(a,b)=\begin{cases}a+1&\text{if }b\text{ is odd}\\a&\text{if }b=0\\a-1&\text{otherwise}\end{cases}`
  2858 |             .toParse();
  2859 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2865}","  2863 | describe(""An rcases environment"", function() {
  2864 |
> 2865 |     it(""should build"", function() {
       |    ^ Unknown Test
  2866 |         expect`\begin{rcases} a &\text{if } b \\ c &\text{if } d \end{rcases}⇒…`
  2867 |             .toBuild();
  2868 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2874}","  2872 | describe(""An aligned environment"", function() {
  2873 |
> 2874 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2875 |         expect`\begin{aligned}a&=b&c&=d\\e&=f\end{aligned}`.toParse();
  2876 |     });
  2877 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2878}","  2876 |     });
  2877 |
> 2878 |     it(""should allow cells in brackets"", function() {
       |    ^ Unknown Test
  2879 |         expect`\begin{aligned}[a]&[b]\\ [c]&[d]\end{aligned}`.toParse();
  2880 |     });
  2881 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2882}","  2880 |     });
  2881 |
> 2882 |     it(""should forbid cells in brackets without space"", function() {
       |    ^ Unknown Test
  2883 |         expect`\begin{aligned}[a]&[b]\\[c]&[d]\end{aligned}`.not.toParse();
  2884 |     });
  2885 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2893}","  2891 |
  2892 | describe(""AMS environments"", function() {
> 2893 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  2894 |         expect`\begin{gather}a+b\\c+d\end{gather}`.not.toParse(nonstrictSettings);
  2895 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.not.toParse(nonstrictSettings);
  2896 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.not.toParse(nonstrictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2906}","  2904 |
  2905 |     const displayMode = new Settings({displayMode: true});
> 2906 |     it(""should build if in display mode"", () => {
       |    ^ Unknown Test
  2907 |         expect`\begin{gather}a+b\\c+d\end{gather}`.toBuild(displayMode);
  2908 |         expect`\begin{gather*}a+b\\c+d\end{gather*}`.toBuild(displayMode);
  2909 |         expect`\begin{align}a&=b+c\\d+e&=f\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2919}","  2917 |     });
  2918 |
> 2919 |     it(""should build an empty environment"", () => {
       |    ^ Unknown Test
  2920 |         expect`\begin{gather}\end{gather}`.toBuild(displayMode);
  2921 |         expect`\begin{gather*}\end{gather*}`.toBuild(displayMode);
  2922 |         expect`\begin{align}\end{align}`.toBuild(displayMode);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2931}","  2929 |     });
  2930 |
> 2931 |     it(""{equation} should fail if argument contains two rows."", () => {
       |    ^ Unknown Test
  2932 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2933 |     });
  2934 |     it(""{equation} should fail if argument contains two columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2934}","  2932 |         expect`\begin{equation}a=\cr b+c\end{equation}`.not.toParse(displayMode);
  2933 |     });
> 2934 |     it(""{equation} should fail if argument contains two columns."", () => {
       |    ^ Unknown Test
  2935 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2936 |     });
  2937 |     it(""{split} should fail if argument contains three columns."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2937}","  2935 |         expect`\begin{equation}a &=b+c\end{equation}`.not.toBuild(displayMode);
  2936 |     });
> 2937 |     it(""{split} should fail if argument contains three columns."", () => {
       |    ^ Unknown Test
  2938 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2939 |     });
  2940 |     it(""{array} should fail if body contains more columns than specification."", () => {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2940}","  2938 |         expect`\begin{equation}\begin{split}a &=b &+c\\&=e &+f\end{split}\end{equation}`.not.toBuild(displayMode);
  2939 |     });
> 2940 |     it(""{array} should fail if body contains more columns than specification."", () => {
       |    ^ Unknown Test
  2941 |         expect`\begin{array}{2}a & b & c\\d & e  f\end{array}`.not.toBuild(displayMode);
  2942 |     });
  2943 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2969}","  2967 |
  2968 | describe(""operatorname support"", function() {
> 2969 |     it(""should not fail"", function() {
       |    ^ Unknown Test
  2970 |         expect`\operatorname{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2971 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}`.toBuild();
  2972 |         expect`\operatorname*{x*Π∑\Pi\sum\frac a b}_y x`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2980}","  2978 |
  2979 | describe(""href and url commands"", function() {
> 2980 |     it(""should parse its input"", function() {
       |    ^ Unknown Test
  2981 |         expect`\href{http://example.com/}{\sin}`.toBuild(trustSettings);
  2982 |         expect`\url{http://example.com/}`.toBuild(trustSettings);
  2983 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2985}","  2983 |     });
  2984 |
> 2985 |     it(""should allow empty URLs"", function() {
       |    ^ Unknown Test
  2986 |         expect`\href{}{example here}`.toBuild(trustSettings);
  2987 |         expect`\url{}`.toBuild(trustSettings);
  2988 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 2998}","  2996 |     });
  2997 |
> 2998 |     it(""should allow spaces single-character URLs"", () => {
       |    ^ Unknown Test
  2999 |         expect`\href %end`.toParseLike(""\\href{%}end"", trustSettings);
  3000 |         expect`\url %end`.toParseLike(""\\url{%}end"", trustSettings);
  3001 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3019}","  3017 |     });
  3018 |
> 3019 |     it(""should not allow unbalanced brace(s) in url"", function() {
       |    ^ Unknown Test
  3020 |         expect`\href{http://example.com/{a}{bar}`.not.toParse();
  3021 |         expect`\href{http://example.com/}a}{bar}`.not.toParse();
  3022 |         expect`\url{http://example.com/{a}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3110}","  3108 |
  3109 | describe(""A raw text parser"", function() {
> 3110 |     it(""should return null for a omitted optional string"", function() {
       |    ^ Unknown Test
  3111 |         expect`\includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}`.toParse();
  3112 |     });
  3113 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3125}","  3123 |     });
  3124 |
> 3125 |     it(""should still parse on unrecognized control sequences"", function() {
       |    ^ Unknown Test
  3126 |         expect`\error`.toParse(noThrowSettings);
  3127 |     });
  3128 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3130}","  3128 |
  3129 |     describe(""should allow unrecognized controls sequences anywhere, including"", function() {
> 3130 |         it(""in superscripts and subscripts"", function() {
       |        ^ Unknown Test
  3131 |             expect`2_\error`.toBuild(noThrowSettings);
  3132 |             expect`3^{\error}_\error`.toBuild(noThrowSettings);
  3133 |             expect`\int\nolimits^\error_\error`.toBuild(noThrowSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3136}","  3134 |         });
  3135 |
> 3136 |         it(""in fractions"", function() {
       |        ^ Unknown Test
  3137 |             expect`\frac{345}{\error}`.toBuild(noThrowSettings);
  3138 |             expect`\frac\error{\error}`.toBuild(noThrowSettings);
  3139 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3141}","  3139 |         });
  3140 |
> 3141 |         it(""in square roots"", function() {
       |        ^ Unknown Test
  3142 |             expect`\sqrt\error`.toBuild(noThrowSettings);
  3143 |             expect`\sqrt{234\error}`.toBuild(noThrowSettings);
  3144 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 8, 'line': 3146}","  3144 |         });
  3145 |
> 3146 |         it(""in text boxes"", function() {
       |        ^ Unknown Test
  3147 |             expect`\text{\error}`.toBuild(noThrowSettings);
  3148 |         });
  3149 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3216}","  3214 |
  3215 | describe(""The symbol table integrity"", function() {
> 3216 |     it(""should treat certain symbols as synonyms"", function() {
       |    ^ Unknown Test
  3217 |         expect`<`.toBuildLike`\lt`;
  3218 |         expect`>`.toBuildLike`\gt`;
  3219 |         expect`\left<\frac{1}{x}\right>`.toBuildLike`\left\lt\frac{1}{x}\right\gt`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3234}","  3232 |
  3233 | describe(""A macro expander"", function() {
> 3234 |     it(""should produce individual tokens"", function() {
       |    ^ Unknown Test
  3235 |         expect`e^\foo`.toParseLike(""e^1 23"",
  3236 |             new Settings({macros: {""\\foo"": ""123""}}));
  3237 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3239}","  3237 |     });
  3238 |
> 3239 |     it(""should preserve leading spaces inside macro definition"", function() {
       |    ^ Unknown Test
  3240 |         expect`\text{\foo}`.toParseLike(r`\text{ x}`,
  3241 |             new Settings({macros: {""\\foo"": "" x""}}));
  3242 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3244}","  3242 |     });
  3243 |
> 3244 |     it(""should preserve leading spaces inside macro argument"", function() {
       |    ^ Unknown Test
  3245 |         expect`\text{\foo{ x}}`.toParseLike(r`\text{ x}`,
  3246 |             new Settings({macros: {""\\foo"": ""#1""}}));
  3247 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3249}","  3247 |     });
  3248 |
> 3249 |     it(""should ignore expanded spaces in math mode"", function() {
       |    ^ Unknown Test
  3250 |         expect`\foo`.toParseLike(""x"", new Settings({macros: {""\\foo"": "" x""}}));
  3251 |     });
  3252 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3253}","  3251 |     });
  3252 |
> 3253 |     it(""should consume spaces after control-word macro"", function() {
       |    ^ Unknown Test
  3254 |         expect`\text{\foo }`.toParseLike(r`\text{x}`,
  3255 |             new Settings({macros: {""\\foo"": ""x""}}));
  3256 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3258}","  3256 |     });
  3257 |
> 3258 |     it(""should consume spaces after macro with \\relax"", function() {
       |    ^ Unknown Test
  3259 |         expect`\text{\foo }`.toParseLike(r`\text{}`,
  3260 |             new Settings({macros: {""\\foo"": ""\\relax""}}));
  3261 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3263}","  3261 |     });
  3262 |
> 3263 |     it(""should not consume spaces after control-word expansion"", function() {
       |    ^ Unknown Test
  3264 |         expect`\text{\\ }`.toParseLike(r`\text{ }`,
  3265 |             new Settings({macros: {""\\\\"": ""\\relax""}}));
  3266 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3268}","  3266 |     });
  3267 |
> 3268 |     it(""should consume spaces after \\relax"", function() {
       |    ^ Unknown Test
  3269 |         expect`\text{\relax }`.toParseLike`\text{}`;
  3270 |     });
  3271 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3272}","  3270 |     });
  3271 |
> 3272 |     it(""should consume spaces after control-word function"", function() {
       |    ^ Unknown Test
  3273 |         expect`\text{\KaTeX }`.toParseLike`\text{\KaTeX}`;
  3274 |     });
  3275 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3276}","  3274 |     });
  3275 |
> 3276 |     it(""should preserve spaces after control-symbol macro"", function() {
       |    ^ Unknown Test
  3277 |         expect`\text{\% y}`.toParseLike(r`\text{x y}`,
  3278 |             new Settings({macros: {""\\%"": ""x""}}));
  3279 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3281}","  3279 |     });
  3280 |
> 3281 |     it(""should preserve spaces after control-symbol function"", function() {
       |    ^ Unknown Test
  3282 |         expect`\text{\' }`.toParse();
  3283 |     });
  3284 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3285}","  3283 |     });
  3284 |
> 3285 |     it(""should consume spaces between arguments"", function() {
       |    ^ Unknown Test
  3286 |         expect`\text{\foo 1 2}`.toParseLike(r`\text{12end}`,
  3287 |             new Settings({macros: {""\\foo"": ""#1#2end""}}));
  3288 |         expect`\text{\foo {1} {2}}`.toParseLike(r`\text{12end}`,",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3292}","  3290 |     });
  3291 |
> 3292 |     it(""should allow for multiple expansion"", function() {
       |    ^ Unknown Test
  3293 |         expect`1\foo2`.toParseLike(""1aa2"", new Settings({macros: {
  3294 |             ""\\foo"": ""\\bar\\bar"",
  3295 |             ""\\bar"": ""a"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3299}","  3297 |     });
  3298 |
> 3299 |     it(""should allow for multiple expansion with argument"", function() {
       |    ^ Unknown Test
  3300 |         expect`1\foo2`.toParseLike(""12222"", new Settings({macros: {
  3301 |             ""\\foo"": ""\\bar{#1}\\bar{#1}"",
  3302 |             ""\\bar"": ""#1#1"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3306}","  3304 |     });
  3305 |
> 3306 |     it(""should allow for macro argument"", function() {
       |    ^ Unknown Test
  3307 |         expect`\foo\bar`.toParseLike(""(xyz)"", new Settings({macros: {
  3308 |             ""\\foo"": ""(#1)"",
  3309 |             ""\\bar"": ""xyz"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3313}","  3311 |     });
  3312 |
> 3313 |     it(""should allow properly nested group for macro argument"", function() {
       |    ^ Unknown Test
  3314 |         expect`\foo{e^{x_{12}+3}}`.toParseLike(""(e^{x_{12}+3})"",
  3315 |             new Settings({macros: {""\\foo"": ""(#1)""}}));
  3316 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3318}","  3316 |     });
  3317 |
> 3318 |     it(""should delay expansion if preceded by \\expandafter"", function() {
       |    ^ Unknown Test
  3319 |         expect`\expandafter\foo\bar`.toParseLike(""x+y"", new Settings({macros: {
  3320 |             ""\\foo"": ""#1+#2"",
  3321 |             ""\\bar"": ""xy"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3328}","  3326 |     });
  3327 |
> 3328 |     it(""should not expand if preceded by \\noexpand"", function() {
       |    ^ Unknown Test
  3329 |         // \foo is not expanded and interpreted as if its meaning were \relax
  3330 |         expect`\noexpand\foo y`.toParseLike(""y"",
  3331 |             new Settings({macros: {""\\foo"": ""x""}}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3341}","  3339 |     });
  3340 |
> 3341 |     it(""should allow for space macro argument (text version)"", function() {
       |    ^ Unknown Test
  3342 |         expect`\text{\foo\bar}`.toParseLike(r`\text{( )}`, new Settings({macros: {
  3343 |             ""\\foo"": ""(#1)"",
  3344 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3348}","  3346 |     });
  3347 |
> 3348 |     it(""should allow for space macro argument (math version)"", function() {
       |    ^ Unknown Test
  3349 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3350 |             ""\\foo"": ""(#1)"",
  3351 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3355}","  3353 |     });
  3354 |
> 3355 |     it(""should allow for space second argument (text version)"", function() {
       |    ^ Unknown Test
  3356 |         expect`\text{\foo\bar\bar}`.toParseLike(r`\text{( , )}`, new Settings({macros: {
  3357 |             ""\\foo"": ""(#1,#2)"",
  3358 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3362}","  3360 |     });
  3361 |
> 3362 |     it(""should treat \\relax as empty argument"", function() {
       |    ^ Unknown Test
  3363 |         expect`\text{\foo\relax x}`.toParseLike(r`\text{(,x)}`, new Settings({macros: {
  3364 |             ""\\foo"": ""(#1,#2)"",
  3365 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3368}","  3366 |     });
  3367 |
> 3368 |     it(""should allow for space second argument (math version)"", function() {
       |    ^ Unknown Test
  3369 |         expect`\foo\bar\bar`.toParseLike(""(,)"", new Settings({macros: {
  3370 |             ""\\foo"": ""(#1,#2)"",
  3371 |             ""\\bar"": "" "",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3375}","  3373 |     });
  3374 |
> 3375 |     it(""should allow for empty macro argument"", function() {
       |    ^ Unknown Test
  3376 |         expect`\foo\bar`.toParseLike(""()"", new Settings({macros: {
  3377 |             ""\\foo"": ""(#1)"",
  3378 |             ""\\bar"": """",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3382}","  3380 |     });
  3381 |
> 3382 |     it(""should allow for space function arguments"", function() {
       |    ^ Unknown Test
  3383 |         expect`\frac\bar\bar`.toParseLike(r`\frac{}{}`, new Settings({macros: {
  3384 |             ""\\bar"": "" "",
  3385 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3388}","  3386 |     });
  3387 |
> 3388 |     it(""should build \\overset and \\underset"", function() {
       |    ^ Unknown Test
  3389 |         expect`\overset{f}{\rightarrow} Y`.toBuild();
  3390 |         expect`\underset{f}{\rightarrow} Y`.toBuild();
  3391 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3393}","  3391 |     });
  3392 |
> 3393 |     it(""should build \\iff, \\implies, \\impliedby"", function() {
       |    ^ Unknown Test
  3394 |         expect`X \iff Y`.toBuild();
  3395 |         expect`X \implies Y`.toBuild();
  3396 |         expect`X \impliedby Y`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3399}","  3397 |     });
  3398 |
> 3399 |     it(""should allow aliasing characters"", function() {
       |    ^ Unknown Test
  3400 |         expect`x’=c`.toParseLike(""x'=c"", new Settings({macros: {
  3401 |             ""’"": ""'"",
  3402 |         }}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3405}","  3403 |     });
  3404 |
> 3405 |     it(""\\@firstoftwo should consume both, and avoid errors"", function() {
       |    ^ Unknown Test
  3406 |         expect`\@firstoftwo{yes}{no}`.toParseLike`yes`;
  3407 |         expect`\@firstoftwo{yes}{1'_2^3}`.toParseLike`yes`;
  3408 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3410}","  3408 |     });
  3409 |
> 3410 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3411 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3412 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3413 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3415}","  3413 |     });
  3414 |
> 3415 |     it(""\\@ifnextchar should not consume nonspaces"", function() {
       |    ^ Unknown Test
  3416 |         expect`\@ifnextchar!{yes}{no}!!`.toParseLike`yes!!`;
  3417 |         expect`\@ifnextchar!{yes}{no}?!`.toParseLike`no?!`;
  3418 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3420}","  3418 |     });
  3419 |
> 3420 |     it(""\\@ifnextchar should consume spaces"", function() {
       |    ^ Unknown Test
  3421 |         expect`\def\x#1{\@ifnextchar x{yes}{no}}\x{}x\x{} x`
  3422 |             .toParseLike`yesxyesx`;
  3423 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3425}","  3423 |     });
  3424 |
> 3425 |     it(""\\@ifstar should consume star but nothing else"", function() {
       |    ^ Unknown Test
  3426 |         expect`\@ifstar{yes}{no}*!`.toParseLike`yes!`;
  3427 |         expect`\@ifstar{yes}{no}?!`.toParseLike`no?!`;
  3428 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3430}","  3428 |     });
  3429 |
> 3430 |     it(""\\TextOrMath should work immediately"", function() {
       |    ^ Unknown Test
  3431 |         expect`\TextOrMath{text}{math}`.toParseLike`math`;
  3432 |     });
  3433 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3434}","  3432 |     });
  3433 |
> 3434 |     it(""\\TextOrMath should work after other math"", function() {
       |    ^ Unknown Test
  3435 |         expect`x+\TextOrMath{text}{math}`.toParseLike`x+math`;
  3436 |     });
  3437 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3438}","  3436 |     });
  3437 |
> 3438 |     it(""\\TextOrMath should work immediately after \\text"", function() {
       |    ^ Unknown Test
  3439 |         expect`\text{\TextOrMath{text}{math}}`.toParseLike`\text{text}`;
  3440 |     });
  3441 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3442}","  3440 |     });
  3441 |
> 3442 |     it(""\\TextOrMath should work later after \\text"", function() {
       |    ^ Unknown Test
  3443 |         expect`\text{hello \TextOrMath{text}{math}}`.toParseLike`\text{hello text}`;
  3444 |     });
  3445 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3446}","  3444 |     });
  3445 |
> 3446 |     it(""\\TextOrMath should work immediately after \\text ends"", function() {
       |    ^ Unknown Test
  3447 |         expect`\text{\TextOrMath{text}{math}}\TextOrMath{text}{math}`
  3448 |             .toParseLike`\text{text}math`;
  3449 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3451}","  3449 |     });
  3450 |
> 3451 |     it(""\\TextOrMath should work immediately after $"", function() {
       |    ^ Unknown Test
  3452 |         expect`\text{$\TextOrMath{text}{math}$}`.toParseLike`\text{$math$}`;
  3453 |     });
  3454 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3455}","  3453 |     });
  3454 |
> 3455 |     it(""\\TextOrMath should work later after $"", function() {
       |    ^ Unknown Test
  3456 |         expect`\text{$x+\TextOrMath{text}{math}$}`.toParseLike`\text{$x+math$}`;
  3457 |     });
  3458 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3459}","  3457 |     });
  3458 |
> 3459 |     it(""\\TextOrMath should work immediately after $ ends"", function() {
       |    ^ Unknown Test
  3460 |         expect`\text{$\TextOrMath{text}{math}$\TextOrMath{text}{math}}`
  3461 |             .toParseLike`\text{$math$text}`;
  3462 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3464}","  3462 |     });
  3463 |
> 3464 |     it(""\\TextOrMath should work in a macro"", function() {
       |    ^ Unknown Test
  3465 |         expect`\mode\text{\mode$\mode$\mode}\mode`
  3466 |             .toParseLike(r`math\text{text$math$text}math`, new Settings({macros: {
  3467 |                 ""\\mode"": ""\\TextOrMath{text}{math}"",",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3471}","  3469 |     });
  3470 |
> 3471 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3472 |         expect`\text\mode`.toParseLike(r`\text t`, new Settings({macros:
  3473 |             {""\\mode"": ""\\TextOrMath{t}{m}""}}));
  3474 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3503}","  3501 |     });
  3502 |
> 3503 |     it(""should build Unicode private area characters"", function() {
       |    ^ Unknown Test
  3504 |         expect`\gvertneqq\lvertneqq\ngeqq\ngeqslant\nleqq`.toBuild();
  3505 |         expect`\nleqslant\nshortmid\nshortparallel\varsubsetneq`.toBuild();
  3506 |         expect`\varsubsetneqq\varsupsetneq\varsupsetneqq`.toBuild();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3509}","  3507 |     });
  3508 |
> 3509 |     it(""\\TextOrMath should work in a macro passed to \\text"", function() {
       |    ^ Unknown Test
  3510 |         expect`\text\mode`.toParseLike(r`\text{text}`, new Settings({macros:
  3511 |             {""\\mode"": ""\\TextOrMath{text}{math}""}}));
  3512 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3514}","  3512 |     });
  3513 |
> 3514 |     it(""\\gdef defines macros"", function() {
       |    ^ Unknown Test
  3515 |         expect`\gdef\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3516 |         expect`\gdef\foo{hi}\foo+\text\foo`.toParseLike`hi+\text{hi}`;
  3517 |         expect`\gdef\foo#1{hi #1}\text{\foo{Alice}, \foo{Bob}}`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3532}","  3530 |     });
  3531 |
> 3532 |     it(""\\gdef defines macros with delimited parameter"", function() {
       |    ^ Unknown Test
  3533 |         expect`\gdef\foo|#1||{#1}\text{\foo| x y ||}`.toParseLike`\text{ x y }`;
  3534 |         expect`\gdef\foo#1|#2{#1+#2}\foo 1 2 |34`.toParseLike`12+34`;
  3535 |         expect`\gdef\foo#1#{#1}\foo1^{23}`.toParseLike`1^{23}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3541}","  3539 |     });
  3540 |
> 3541 |     it(""\\xdef should expand definition"", function() {
       |    ^ Unknown Test
  3542 |         expect`\def\foo{a}\xdef\bar{\foo}\def\foo{}\bar`.toParseLike`a`;
  3543 |         // \def\noexpand\foo{} expands into \def\foo{}
  3544 |         expect`\def\foo{a}\xdef\bar{\def\noexpand\foo{}}\foo\bar\foo`.toParseLike`a`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3551}","  3549 |     });
  3550 |
> 3551 |     it(""\\def should be handled in Parser"", () => {
       |    ^ Unknown Test
  3552 |         expect`\gdef\foo{1}`.toParse(new Settings({maxExpand: 0}));
  3553 |         expect`2^\def\foo{1}2`.not.toParse();
  3554 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3556}","  3554 |     });
  3555 |
> 3556 |     it(""\\def works locally"", () => {
       |    ^ Unknown Test
  3557 |         expect`\def\x{1}\x{\def\x{2}\x{\def\x{3}\x}\x}\x`
  3558 |             .toParseLike`1{2{3}2}1`;
  3559 |         expect`\def\x{1}\x\def\x{2}\x{\def\x{3}\x\def\x{4}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3563}","  3561 |     });
  3562 |
> 3563 |     it(""\\gdef overrides at all levels"", () => {
       |    ^ Unknown Test
  3564 |         expect`\def\x{1}\x{\def\x{2}\x{\gdef\x{3}\x}\x}\x`
  3565 |             .toParseLike`1{2{3}3}3`;
  3566 |         expect`\def\x{1}\x{\def\x{2}\x{\global\def\x{3}\x}\x}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3572}","  3570 |     });
  3571 |
> 3572 |     it(""\\global needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3573 |         expect`\global\def\foo{}\foo`.toParseLike``;
  3574 |         expect`\global\edef\foo{}\foo`.toParseLike``;
  3575 |         expect`\def\DEF{\def}\global\DEF\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3582}","  3580 |     });
  3581 |
> 3582 |     it(""\\long needs to followed by macro prefixes, \\def or \\edef"", () => {
       |    ^ Unknown Test
  3583 |         expect`\long\def\foo{}\foo`.toParseLike``;
  3584 |         expect`\long\edef\foo{}\foo`.toParseLike``;
  3585 |         expect`\long\global\def\foo{}\foo`.toParseLike``;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3589}","  3587 |     });
  3588 |
> 3589 |     it(""Macro arguments do not generate groups"", () => {
       |    ^ Unknown Test
  3590 |         expect`\def\x{1}\x\def\foo#1{#1}\foo{\x\def\x{2}\x}\x`
  3591 |             .toParseLike`1122`;
  3592 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3594}","  3592 |     });
  3593 |
> 3594 |     it(""\\textbf arguments do generate groups"", () => {
       |    ^ Unknown Test
  3595 |         expect`\def\x{1}\x\textbf{\x\def\x{2}\x}\x`.toParseLike`1\textbf{12}1`;
  3596 |     });
  3597 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3598}","  3596 |     });
  3597 |
> 3598 |     it(""\\sqrt optional arguments generate groups"", () => {
       |    ^ Unknown Test
  3599 |         expect`\def\x{1}\def\y{1}\x\y\sqrt[\def\x{2}\x]{\def\y{2}\y}\x\y`
  3600 |             .toParseLike`11\sqrt[2]{2}11`;
  3601 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3603}","  3601 |     });
  3602 |
> 3603 |     it(""array cells generate groups"", () => {
       |    ^ Unknown Test
  3604 |         expect`\def\x{1}\begin{matrix}\x&\def\x{2}\x&\x\end{matrix}\x`
  3605 |             .toParseLike`\begin{matrix}1&2&1\end{matrix}1`;
  3606 |         expect`\def\x{1}\begin{matrix}\def\x{2}\x&\x\end{matrix}\x`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3634}","  3632 |     });
  3633 |
> 3634 |     it(""\\let copies the definition"", () => {
       |    ^ Unknown Test
  3635 |         expect`\let\foo=\frac\def\frac{}\foo12`.toParseLike`\frac12`;
  3636 |         expect`\def\foo{1}\let\bar\foo\def\foo{2}\bar`.toParseLike`1`;
  3637 |         expect`\let\foo=\kern\edef\bar{\foo1em}\let\kern=\relax\bar`.toParseLike`\kern1em`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3654}","  3652 |     });
  3653 |
> 3654 |     it(""\\futurelet should parse correctly"", () => {
       |    ^ Unknown Test
  3655 |         expect`\futurelet\foo\frac1{2+\foo}`.toParseLike`\frac1{2+1}`;
  3656 |     });
  3657 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3658}","  3656 |     });
  3657 |
> 3658 |     it(""macros argument can simulate \\let"", () => {
       |    ^ Unknown Test
  3659 |         expect`\int`.toParseLike(""\\int\\limits"", {macros: {
  3660 |             ""\\Oldint"": {
  3661 |                 tokens: [{text: ""\\int"", noexpand: true}],",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3685}","  3683 |     });
  3684 |
> 3685 |     it(""\\newcommand defines new macros"", () => {
       |    ^ Unknown Test
  3686 |         expect`\newcommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3687 |         expect`\newcommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3688 |         // Function detection",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3700}","  3698 |     });
  3699 |
> 3700 |     it(""\\renewcommand redefines macros"", () => {
       |    ^ Unknown Test
  3701 |         expect`\renewcommand\foo{x^2}\foo+\foo`.not.toParse();
  3702 |         expect`\renewcommand{\foo}{x^2}\foo+\foo`.not.toParse();
  3703 |         expect`\renewcommand\bar{x^2}\bar+\bar`.toParseLike`x^2+x^2`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3708}","  3706 |     });
  3707 |
> 3708 |     it(""\\providecommand defines but does not redefine macros"", () => {
       |    ^ Unknown Test
  3709 |         expect`\providecommand\foo{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3710 |         expect`\providecommand{\foo}{x^2}\foo+\foo`.toParseLike`x^2+x^2`;
  3711 |         expect`\newcommand{\foo}{1}\foo\providecommand{\foo}{2}\foo`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3719}","  3717 |     });
  3718 |
> 3719 |     it(""\\newcommand is local"", () => {
       |    ^ Unknown Test
  3720 |         expect`\newcommand\foo{1}\foo{\renewcommand\foo{2}\foo}\foo`
  3721 |             .toParseLike`1{2}1`;
  3722 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3724}","  3722 |     });
  3723 |
> 3724 |     it(""\\newcommand accepts number of arguments"", () => {
       |    ^ Unknown Test
  3725 |         expect`\newcommand\foo[1]{#1^2}\foo x+\foo{y}`.toParseLike`x^2+y^2`;
  3726 |         expect`\newcommand\foo[10]{#1^2}\foo 0123456789`.toParseLike`0^2`;
  3727 |         expect`\newcommand\foo[x]{}`.not.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3733}","  3731 |     // This may change in the future, if we support the extra features of
  3732 |     // \hspace.
> 3733 |     it(""should treat \\hspace, \\hskip like \\kern"", function() {
       |    ^ Unknown Test
  3734 |         expect`\hspace{1em}`.toParseLike`\kern1em`;
  3735 |         expect`\hskip{1em}`.toParseLike`\kern1em`;
  3736 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3738}","  3736 |     });
  3737 |
> 3738 |     it(""should expand \\limsup as expected"", () => {
       |    ^ Unknown Test
  3739 |         expect`\limsup`.toParseLike`\operatorname*{lim\,sup}`;
  3740 |     });
  3741 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3742}","  3740 |     });
  3741 |
> 3742 |     it(""should expand \\liminf as expected"", () => {
       |    ^ Unknown Test
  3743 |         expect`\liminf`.toParseLike`\operatorname*{lim\,inf}`;
  3744 |     });
  3745 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3746}","  3744 |     });
  3745 |
> 3746 |     it(""should expand AMS log-like symbols as expected"", () => {
       |    ^ Unknown Test
  3747 |         expect`\injlim`.toParseLike`\operatorname*{inj\,lim}`;
  3748 |         expect`\projlim`.toParseLike`\operatorname*{proj\,lim}`;
  3749 |         expect`\varlimsup`.toParseLike`\operatorname*{\overline{lim}}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3756}","  3754 |     });
  3755 |
> 3756 |     it(""should expand \\plim as expected"", () => {
       |    ^ Unknown Test
  3757 |         expect`\plim`.toParseLike`\mathop{\operatorname{plim}}\limits`;
  3758 |     });
  3759 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3760}","  3758 |     });
  3759 |
> 3760 |     it(""should expand \\argmin as expected"", () => {
       |    ^ Unknown Test
  3761 |         expect`\argmin`.toParseLike`\operatorname*{arg\,min}`;
  3762 |     });
  3763 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3764}","  3762 |     });
  3763 |
> 3764 |     it(""should expand \\argmax as expected"", () => {
       |    ^ Unknown Test
  3765 |         expect`\argmax`.toParseLike`\operatorname*{arg\,max}`;
  3766 |     });
  3767 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3768}","  3766 |     });
  3767 |
> 3768 |     it(""should expand \\bra as expected"", () => {
       |    ^ Unknown Test
  3769 |         expect`\bra{\phi}`.toParseLike`\mathinner{\langle{\phi}|}`;
  3770 |     });
  3771 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3772}","  3770 |     });
  3771 |
> 3772 |     it(""should expand \\ket as expected"", () => {
       |    ^ Unknown Test
  3773 |         expect`\ket{\psi}`.toParseLike`\mathinner{|{\psi}\rangle}`;
  3774 |     });
  3775 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3776}","  3774 |     });
  3775 |
> 3776 |     it(""should expand \\braket as expected"", () => {
       |    ^ Unknown Test
  3777 |         expect`\braket{\phi|\psi}`.toParseLike`\mathinner{\langle{\phi|\psi}\rangle}`;
  3778 |     });
  3779 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3780}","  3778 |     });
  3779 |
> 3780 |     it(""should expand \\Bra as expected"", () => {
       |    ^ Unknown Test
  3781 |         expect`\Bra{\phi}`.toParseLike`\left\langle\phi\right|`;
  3782 |     });
  3783 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3784}","  3782 |     });
  3783 |
> 3784 |     it(""should expand \\Ket as expected"", () => {
       |    ^ Unknown Test
  3785 |         expect`\Ket{\psi}`.toParseLike`\left|\psi\right\rangle`;
  3786 |     });
  3787 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3788}","  3786 |     });
  3787 |
> 3788 |     it(""should expand \\Braket as expected"", () => {
       |    ^ Unknown Test
  3789 |         expect`\Braket{ ϕ | \frac{∂^2}{∂ t^2} | ψ }`.toParseLike`\left\langle ϕ\,\middle\vert\,\frac{∂^2}{∂ t^2}\,\middle\vert\, ψ\right\rangle`;
  3790 |     });
  3791 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3792}","  3790 |     });
  3791 |
> 3792 |     it(""should expand \\set as expected"", () => {
       |    ^ Unknown Test
  3793 |         expect`\set{x|x<5|S|}`.toParseLike`\{\,x\mid x<5|S|\,\}`;
  3794 |         // \set doesn't support special || or \| handling
  3795 |         expect`\set{x||x<5|S|}`.toParseLike`\{\,x\mid |x<5|S|\,\}`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3799}","  3797 |     });
  3798 |
> 3799 |     it(""should expand \\Set as expected"", () => {
       |    ^ Unknown Test
  3800 |         expect`\Set{ x | x<\frac 1 2 |S| }`
  3801 |         .toParseLike`\left\{\: x\;\middle\vert\; x<\frac 1 2 |S| \:\right\}`;
  3802 |         expect`\Set{ x || x<\frac 1 2 |S| }`",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3812}","  3810 |     const displayMode = new Settings({displayMode: true});
  3811 |
> 3812 |     it(""should fail outside display mode"", () => {
       |    ^ Unknown Test
  3813 |         expect`\tag{hi}x+y`.not.toParse();
  3814 |     });
  3815 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3816}","  3814 |     });
  3815 |
> 3816 |     it(""should fail with multiple tags"", () => {
       |    ^ Unknown Test
  3817 |         expect`\tag{1}\tag{2}x+y`.not.toParse(displayMode);
  3818 |     });
  3819 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3820}","  3818 |     });
  3819 |
> 3820 |     it(""should fail with multiple tags in one row"", () => {
       |    ^ Unknown Test
  3821 |         expect`\begin{align}\tag{1}x+y\tag{2}\end{align}`.not.toParse(displayMode);
  3822 |     });
  3823 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3824}","  3822 |     });
  3823 |
> 3824 |     it(""should work with one tag per row"", () => {
       |    ^ Unknown Test
  3825 |         expect`\begin{align}\tag{1}x\\&+y\tag{2}\end{align}`.toParse(displayMode);
  3826 |     });
  3827 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3828}","  3826 |     });
  3827 |
> 3828 |     it(""should work with \\nonumber/\\notag"", () => {
       |    ^ Unknown Test
  3829 |         expect`\begin{align}\tag{1}\nonumber x\\&+y\notag\end{align}`
  3830 |         .toParseLike(r`\begin{align}\tag{1}x\\&+y\nonumber\end{align}`, displayMode);
  3831 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3833}","  3831 |     });
  3832 |
> 3833 |     it(""should build"", () => {
       |    ^ Unknown Test
  3834 |         expect`\tag{hi}x+y`.toBuild(displayMode);
  3835 |     });
  3836 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3837}","  3835 |     });
  3836 |
> 3837 |     it(""should ignore location of \\tag"", () => {
       |    ^ Unknown Test
  3838 |         expect`\tag{hi}x+y`.toParseLike(r`x+y\tag{hi}`, displayMode);
  3839 |     });
  3840 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3841}","  3839 |     });
  3840 |
> 3841 |     it(""should handle \\tag* like \\tag"", () => {
       |    ^ Unknown Test
  3842 |         expect`\tag{hi}x+y`.toParseLike(r`\tag*{({hi})}x+y`, displayMode);
  3843 |     });
  3844 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3870}","  3868 |
  3869 | describe(""\\@binrel automatic bin/rel/ord"", () => {
> 3870 |     it(""should generate proper class"", () => {
       |    ^ Unknown Test
  3871 |         expect`L\@binrel+xR`.toParseLike`L\mathbin xR`;
  3872 |         expect`L\@binrel=xR`.toParseLike`L\mathrel xR`;
  3873 |         expect`L\@binrel xxR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3879}","  3877 |     });
  3878 |
> 3879 |     it(""should base on just first character in group"", () => {
       |    ^ Unknown Test
  3880 |         expect`L\@binrel{+x}xR`.toParseLike`L\mathbin xR`;
  3881 |         expect`L\@binrel{=x}xR`.toParseLike`L\mathrel xR`;
  3882 |         expect`L\@binrel{xx}xR`.toParseLike`L\mathord xR`;",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3899}","  3897 |
  3898 | describe(""Unicode accents"", function() {
> 3899 |     it(""should parse Latin-1 letters in math mode"", function() {
       |    ^ Unknown Test
  3900 |         // TODO(edemaine): Unsupported Latin-1 letters in math: ÇÐÞçðþ
  3901 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ`
  3902 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3919}","  3917 |     });
  3918 |
> 3919 |     it(""should parse Latin-1 letters in text mode"", function() {
       |    ^ Unknown Test
  3920 |         // TODO(edemaine): Unsupported Latin-1 letters in text: ÇÐÞçðþ
  3921 |         expect`\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}`
  3922 |         .toParseLike(",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3939}","  3937 |     });
  3938 |
> 3939 |     it(""should support \\aa in text mode"", function() {
       |    ^ Unknown Test
  3940 |         expect`\text{\aa\AA}`.toParseLike(r`\text{\r a\r A}`, strictSettings);
  3941 |         expect`\aa`.not.toParse(strictSettings);
  3942 |         expect`\Aa`.not.toParse(strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3950}","  3948 |     });
  3949 |
> 3950 |     it(""should parse multi-accented characters"", function() {
       |    ^ Unknown Test
  3951 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3952 |         // Doesn't parse quite the same as
  3953 |         // ""\\text{\\'{\\^a}\\'{\\=a}\\'{\\u a}}"" because of the ordgroups.",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3956}","  3954 |     });
  3955 |
> 3956 |     it(""should parse accented i's and j's"", function() {
       |    ^ Unknown Test
  3957 |         expect`íȷ́`.toParseLike(r`\acute ı\acute ȷ`, nonstrictSettings);
  3958 |         expect`ấā́ắ\text{ấā́ắ}`.toParse(nonstrictSettings);
  3959 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3963}","  3961 |
  3962 | describe(""Unicode"", function() {
> 3963 |     it(""should parse negated relations"", function() {
       |    ^ Unknown Test
  3964 |         expect`∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌`.toParse(strictSettings);
  3965 |     });
  3966 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3967}","  3965 |     });
  3966 |
> 3967 |     it(""should build relations"", function() {
       |    ^ Unknown Test
  3968 |         expect`∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌`.toBuild(strictSettings);
  3969 |     });
  3970 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3971}","  3969 |     });
  3970 |
> 3971 |     it(""should parse relations"", function() {
       |    ^ Unknown Test
  3972 |         // These characters are not in the KaTeX fonts. So they build with an error message.
  3973 |         expect`⊶⊷`.toParse();
  3974 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3976}","  3974 |     });
  3975 |
> 3976 |     it(""should build big operators"", function() {
       |    ^ Unknown Test
  3977 |         expect`∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆`.toBuild(strictSettings);
  3978 |     });
  3979 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3980}","  3978 |     });
  3979 |
> 3980 |     it(""should build more relations"", function() {
       |    ^ Unknown Test
  3981 |         expect`⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋`.toBuild(strictSettings);
  3982 |     });
  3983 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3994}","  3992 |     });
  3993 |
> 3994 |     it(""should build arrows"", function() {
       |    ^ Unknown Test
  3995 |         expect`←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉`.toBuild(strictSettings);
  3996 |     });
  3997 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 3998}","  3996 |     });
  3997 |
> 3998 |     it(""should build more arrows"", function() {
       |    ^ Unknown Test
  3999 |         expect`⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼`.toBuild(strictSettings);
  4000 |     });
  4001 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4084}","  4082 |
  4083 | describe(""The maxExpand setting"", () => {
> 4084 |     it(""should prevent expansion"", () => {
       |    ^ Unknown Test
  4085 |         expect`\gdef\foo{1}\foo`.toParse();
  4086 |         expect`\gdef\foo{1}\foo`.toParse(new Settings({maxExpand: 1}));
  4087 |         expect`\gdef\foo{1}\foo`.not.toParse(new Settings({maxExpand: 0}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4090}","  4088 |     });
  4089 |
> 4090 |     it(""should prevent infinite loops"", () => {
       |    ^ Unknown Test
  4091 |         expect`\gdef\foo{\foo}\foo`.not.toParse(
  4092 |             new Settings({maxExpand: 10}));
  4093 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4095}","  4093 |     });
  4094 |
> 4095 |     it(""should prevent exponential blowup via \\edef"", () => {
       |    ^ Unknown Test
  4096 |         expect`\edef0{x}\edef0{00}\edef0{00}\edef0{00}\edef0{00}`.not.toParse(
  4097 |             new Settings({maxExpand: 10}));
  4098 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4146}","  4144 |
  4145 | describe(""Newlines via \\\\ and \\newline"", function() {
> 4146 |     it(""should build \\\\ without the optional argument and \\newline the same"", () => {
       |    ^ Unknown Test
  4147 |         expect`hello \\ world`.toBuildLike`hello \newline world`;
  4148 |     });
  4149 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4150}","  4148 |     });
  4149 |
> 4150 |     it(""should not allow \\newline to scan for an optional size argument"", () => {
       |    ^ Unknown Test
  4151 |         expect`hello \newline[w]orld`.toBuild();
  4152 |     });
  4153 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4154}","  4152 |     });
  4153 |
> 4154 |     it(""should not allow \\cr at top level"", () => {
       |    ^ Unknown Test
  4155 |         expect`hello \cr world`.not.toBuild();
  4156 |     });
  4157 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4169}","  4167 |
  4168 | describe(""Symbols"", function() {
> 4169 |     it(""should parse \\text{\\i\\j}"", () => {
       |    ^ Unknown Test
  4170 |         expect`\text{\i\j}`.toBuild(strictSettings);
  4171 |     });
  4172 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4173}","  4171 |     });
  4172 |
> 4173 |     it(""should parse spacing functions in math or text mode"", () => {
       |    ^ Unknown Test
  4174 |         expect`A\;B\,C\nobreakspace \text{A\;B\,C\nobreakspace}`.toBuild(strictSettings);
  4175 |     });
  4176 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4177}","  4175 |     });
  4176 |
> 4177 |     it(""should build \\minuso"", () => {
       |    ^ Unknown Test
  4178 |         expect`\\minuso`.toBuild(strictSettings);
  4179 |     });
  4180 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4181}","  4179 |     });
  4180 |
> 4181 |     it(""should render ligature commands like their unicode characters"", () => {
       |    ^ Unknown Test
  4182 |         expect`\text{\ae\AE\oe\OE\o\O\ss}`.toBuildLike(r`\text{æÆœŒøØß}`, strictSettings);
  4183 |     });
  4184 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4187}","  4185 |
  4186 | describe(""strict setting"", function() {
> 4187 |     it(""should allow unicode text when not strict"", () => {
       |    ^ Unknown Test
  4188 |         expect`é`.toParse(new Settings(nonstrictSettings));
  4189 |         expect`試`.toParse(new Settings(nonstrictSettings));
  4190 |         expect`é`.toParse(new Settings({strict: ""ignore""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4198}","  4196 |     });
  4197 |
> 4198 |     it(""should forbid unicode text when strict"", () => {
       |    ^ Unknown Test
  4199 |         expect`é`.not.toParse(new Settings({strict: true}));
  4200 |         expect`試`.not.toParse(new Settings({strict: true}));
  4201 |         expect`é`.not.toParse(new Settings({strict: ""error""}));",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4209}","  4207 |     });
  4208 |
> 4209 |     it(""should warn about unicode text when default"", () => {
       |    ^ Unknown Test
  4210 |         expect`é`.toWarn(new Settings());
  4211 |         expect`試`.toWarn(new Settings());
  4212 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4214}","  4212 |     });
  4213 |
> 4214 |     it(""should always allow unicode text in text mode"", () => {
       |    ^ Unknown Test
  4215 |         expect`\text{é試}`.toParse(nonstrictSettings);
  4216 |         expect`\text{é試}`.toParse(strictSettings);
  4217 |         expect`\text{é試}`.toParse();",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4220}","  4218 |     });
  4219 |
> 4220 |     it(""should warn about top-level \\newline in display mode"", () => {
       |    ^ Unknown Test
  4221 |         expect`x\\y`.toWarn(new Settings({displayMode: true}));
  4222 |         expect`x\\y`.toParse(new Settings({displayMode: false}));
  4223 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4269}","  4267 |         }).toThrow(errorMessage);
  4268 |     });
> 4269 |     it(""should add font metrics to metrics map and render successfully"", () => {
       |    ^ Unknown Test
  4270 |         const mockMetrics = {};
  4271 |         // mock font metrics for the symbols that we added previously
  4272 |         for (let number = 0; number <= 9; number++) {",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4305}","  4303 |
  4304 | describe(""\\relax"", () => {
> 4305 |     it(""should stop the expansion"", () => {
       |    ^ Unknown Test
  4306 |         expect`\kern2\relax em`.not.toParse();
  4307 |     });
  4308 | });",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4311}","  4309 |
  4310 | describe(""\\emph"", () => {
> 4311 |     it(""should toggle italics"", () => {
       |    ^ Unknown Test
  4312 |         expect`\emph{foo \emph{bar}}`.toBuildLike`\textit{foo \textup{bar}}`;
  4313 |     });
  4314 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4315}","  4313 |     });
  4314 |
> 4315 |     it(""should toggle italics within text"", () => {
       |    ^ Unknown Test
  4316 |         expect`\text{\emph{foo \emph{bar}}}`.toBuildLike`\text{\textit{foo \textup{bar}}}`;
  4317 |     });
  4318 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4319}","  4317 |     });
  4318 |
> 4319 |     it(""should toggle italics within textup"", () => {
       |    ^ Unknown Test
  4320 |         expect`\textup{\emph{foo \emph{bar}}}`.toBuildLike`\textup{\textit{foo \textup{bar}}}`;
  4321 |     });
  4322 |",,
/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js,Unknown Test,"{'column': 4, 'line': 4323}","  4321 |     });
  4322 |
> 4323 |     it(""should toggle italics within textit"", () => {
       |    ^ Unknown Test
  4324 |         expect`\textit{\emph{foo \emph{bar}}}`.toBuildLike`\textit{\textup{foo \textit{bar}}}`;
  4325 |     });
  4326 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 132}","  130 |         });
  131 |         it(""complains about mismatched \\verb with end of line"", function() {
> 132 |             expect(""\\verb|hello\nworld|"").toFailWithParseError(
      |            ^ Redundant Assertion
  133 |                 ""\\verb ended by end of line instead of matching delimiter"");
  134 |         });
  135 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 291}","  289 |     describe(""#_innerLex"", function() {
  290 |         it(""rejects lone surrogate char"", function() {
> 291 |             expect(""\udcba "").toFailWithParseError(
      |            ^ Redundant Assertion
  292 |                    ""Unexpected character: '\udcba' at position 1:"" +
  293 |                     "" \udcba\u0332 "");
  294 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 12, 'line': 296}","  294 |         });
  295 |         it(""rejects lone backslash at end of input"", function() {
> 296 |             expect(""\\"").toFailWithParseError(
      |            ^ Redundant Assertion
  297 |                    ""Unexpected character: '\\' at position 1: \\̲"");
  298 |         });
  299 |     });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Redundant Assertion,"{'column': 8, 'line': 328}","  326 | describe(""Unicode accents"", function() {
  327 |     it(""should return error for invalid combining characters"", function() {
> 328 |         expect(""A\u0328"").toFailWithParseError(
      |        ^ Redundant Assertion
  329 |             ""Unknown accent ' ̨' at position 1: Ą̲̲"");
  330 |     });
  331 | });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 6}","  4 |
  5 |     describe(""#handleInfixNodes"", function() {
> 6 |         it(""rejects repeated infix operators"", function() {
    |        ^ Unknown Test
  7 |             expect`1\over 2\over 3`.toFailWithParseError(
  8 |                    ""only one infix operator per group at position 9: "" +
  9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 11}","   9 |                    ""1\\over 2\\̲o̲v̲e̲r̲ ̲3"");
  10 |         });
> 11 |         it(""rejects conflicting infix operators"", function() {
     |        ^ Unknown Test
  12 |             expect`1\over 2\choose 3`.toFailWithParseError(
  13 |                    ""only one infix operator per group at position 9: "" +
  14 |                    ""1\\over 2\\̲c̲h̲o̲o̲s̲e̲ ̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 19}","  17 |
  18 |     describe(""#handleSupSubscript"", function() {
> 19 |         it(""rejects ^ at end of group"", function() {
     |        ^ Unknown Test
  20 |             expect`{1^}`.toFailWithParseError(
  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 23}","  21 |                    ""Expected group after '^' at position 3: {1^̲}"");
  22 |         });
> 23 |         it(""rejects _ at end of input"", function() {
     |        ^ Unknown Test
  24 |             expect`1_`.toFailWithParseError(
  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 27}","  25 |                    ""Expected group after '_' at position 2: 1_̲"");
  26 |         });
> 27 |         it(""rejects \\sqrt as argument to ^"", function() {
     |        ^ Unknown Test
  28 |             expect`1^\sqrt{2}`.toFailWithParseError(
  29 |                    ""Got function '\\sqrt' with no arguments as superscript"" +
  30 |                    "" at position 3: 1^\\̲s̲q̲r̲t̲{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 35}","  33 |
  34 |     describe(""#parseAtom"", function() {
> 35 |         it(""rejects \\limits without operator"", function() {
     |        ^ Unknown Test
  36 |             expect`\alpha\limits\omega`.toFailWithParseError(
  37 |                    ""Limit controls must follow a math operator"" +
  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 40}","  38 |                    "" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega"");
  39 |         });
> 40 |         it(""rejects \\limits at the beginning of the input"", function() {
     |        ^ Unknown Test
  41 |             expect`\limits\omega`.toFailWithParseError(
  42 |                    ""Limit controls must follow a math operator"" +
  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 45}","  43 |                    "" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega"");
  44 |         });
> 45 |         it(""rejects double superscripts"", function() {
     |        ^ Unknown Test
  46 |             expect`1^2^3`.toFailWithParseError(
  47 |                    ""Double superscript at position 4: 1^2^̲3"");
  48 |             expect`1^{2+3}_4^5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 51}","  49 |                    ""Double superscript at position 10: 1^{2+3}_4^̲5"");
  50 |         });
> 51 |         it(""rejects double superscripts involving primes"", function() {
     |        ^ Unknown Test
  52 |             expect`1'_2^3`.toFailWithParseError(
  53 |                    ""Double superscript at position 5: 1'_2^̲3"");
  54 |             expect`1^2'`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 61}","  59 |                    ""Double superscript at position 5: 1'_2'̲"");
  60 |         });
> 61 |         it(""rejects double subscripts"", function() {
     |        ^ Unknown Test
  62 |             expect`1_2_3`.toFailWithParseError(
  63 |                    ""Double subscript at position 4: 1_2_̲3"");
  64 |             expect`1_{2+3}^4_5`.toFailWithParseError(",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 70}","  68 |
  69 |     describe(""#parseImplicitGroup"", function() {
> 70 |         it(""reports unknown environments"", function() {
     |        ^ Unknown Test
  71 |             expect`\begin{foo}bar\end{foo}`.toFailWithParseError(
  72 |                    ""No such environment: foo at position 7:"" +
  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 75}","  73 |                    "" \\begin{̲f̲o̲o̲}̲bar\\end{foo}"");
  74 |         });
> 75 |         it(""reports mismatched environments"", function() {
     |        ^ Unknown Test
  76 |             expect`\begin{pmatrix}1&2\\3&4\end{bmatrix}+5`
  77 |                 .toFailWithParseError(
  78 |                    ""Mismatch: \\begin{pmatrix} matched by \\end{bmatrix}"" +",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 84}","  82 |
  83 |     describe(""#parseFunction"", function() {
> 84 |         it(""rejects math-mode functions in text mode"", function() {
     |        ^ Unknown Test
  85 |             expect`\text{\sqrt2 is irrational}`.toFailWithParseError(
  86 |                 ""Can't use function '\\sqrt' in text mode"" +
  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 89}","  87 |                 "" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…"");
  88 |         });
> 89 |         it(""rejects text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  90 |             expect`$`.toFailWithParseError(
  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 93}","  91 |                 ""Can't use function '$' in math mode at position 1: $̲"");
  92 |         });
> 93 |         it(""rejects strict-mode text-mode-only functions in math mode"", () => {
     |        ^ Unknown Test
  94 |             expect`\'echec`.toFailWithParseError(""LaTeX-incompatible input "" +
  95 |                 ""and strict mode is set to 'error': LaTeX's accent \\' works "" +
  96 |                 ""only in text mode [mathVsTextAccents]"", strictSettings);",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 101}","   99 |
  100 |     describe(""#parseArguments"", function() {
> 101 |         it(""complains about missing argument at end of input"", function() {
      |        ^ Unknown Test
  102 |             expect`2\sqrt`.toFailWithParseError(
  103 |                    ""Expected group as argument to '\\sqrt'"" +
  104 |                    "" at end of input: 2\\sqrt"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 106}","  104 |                    "" at end of input: 2\\sqrt"");
  105 |         });
> 106 |         it(""complains about missing argument at end of group"", function() {
      |        ^ Unknown Test
  107 |             expect`1^{2\sqrt}`.toFailWithParseError(
  108 |                    ""Expected group as argument to '\\sqrt'"" +
  109 |                    "" at position 10: 1^{2\\sqrt}̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 111}","  109 |                    "" at position 10: 1^{2\\sqrt}̲"");
  110 |         });
> 111 |         it(""complains about functions as arguments to others"", function() {
      |        ^ Unknown Test
  112 |             expect`\sqrt\over2`.toFailWithParseError(
  113 |                    ""Got function '\\over' with no arguments as argument to"" +
  114 |                    "" '\\sqrt' at position 6: \\sqrt\\̲o̲v̲e̲r̲2"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 119}","  117 |
  118 |     describe(""#parseGroup"", function() {
> 119 |         it(""complains about undefined control sequence"", function() {
      |        ^ Unknown Test
  120 |             expect`\xyz`.toFailWithParseError(
  121 |                    ""Undefined control sequence: \\xyz"" +
  122 |                    "" at position 1: \\̲x̲y̲z̲"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 127}","  125 |
  126 |     describe(""#verb"", function() {
> 127 |         it(""complains about mismatched \\verb with end of string"", function() {
      |        ^ Unknown Test
  128 |             expect`\verb|hello`.toFailWithParseError(
  129 |                 ""\\verb ended by end of line instead of matching delimiter"");
  130 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 142}","  140 |
  141 |     describe(""#parseInput expecting EOF"", function() {
> 142 |         it(""complains about extra }"", function() {
      |        ^ Unknown Test
  143 |             expect`{1+2}}`.toFailWithParseError(
  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 146}","  144 |                    ""Expected 'EOF', got '}' at position 6: {1+2}}̲"");
  145 |         });
> 146 |         it(""complains about extra \\end"", function() {
      |        ^ Unknown Test
  147 |             expect`x\end{matrix}`.toFailWithParseError(
  148 |                    ""Expected 'EOF', got '\\end' at position 2:"" +
  149 |                    "" x\\̲e̲n̲d̲{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 151}","  149 |                    "" x\\̲e̲n̲d̲{matrix}"");
  150 |         });
> 151 |         it(""complains about top-level &"", function() {
      |        ^ Unknown Test
  152 |             expect`1&2`.toFailWithParseError(
  153 |                    ""Expected 'EOF', got '&' at position 2: 1&̲2"");
  154 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 158}","  156 |
  157 |     describe(""#parseImplicitGroup expecting \\right"", function() {
> 158 |         it(""rejects missing \\right"", function() {
      |        ^ Unknown Test
  159 |             expect`\left(1+2)`.toFailWithParseError(
  160 |                    ""Expected '\\right', got 'EOF' at end of input:"" +
  161 |                    "" \\left(1+2)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 163}","  161 |                    "" \\left(1+2)"");
  162 |         });
> 163 |         it(""rejects incorrectly scoped \\right"", function() {
      |        ^ Unknown Test
  164 |             expect`{\left(1+2}\right)`.toFailWithParseError(
  165 |                    ""Expected '\\right', got '}' at position 11:"" +
  166 |                    "" {\\left(1+2}̲\\right)"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 174}","  172 |
  173 |     describe(""#parseSpecialGroup expecting braces"", function() {
> 174 |         it(""complains about missing { for color"", function() {
      |        ^ Unknown Test
  175 |             expect`\textcolor#ffffff{text}`.toFailWithParseError(
  176 |                    ""Invalid color: '#' at position 11:"" +
  177 |                    "" \\textcolor#̲ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 179}","  177 |                    "" \\textcolor#̲ffffff{text}"");
  178 |         });
> 179 |         it(""complains about missing { for size"", function() {
      |        ^ Unknown Test
  180 |             expect`\rule{1em}[2em]`.toFailWithParseError(
  181 |                    ""Invalid size: '[' at position 11: \\rule{1em}[̲2em]"");
  182 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 184}","  182 |         });
  183 |         // Can't test for the [ of an optional group since it's optional
> 184 |         it(""complains about missing } for color"", function() {
      |        ^ Unknown Test
  185 |             expect`\textcolor{#ffffff{text}`.toFailWithParseError(
  186 |                    ""Unexpected end of input in a macro argument,"" +
  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 189}","  187 |                    "" expected '}' at end of input: …r{#ffffff{text}"");
  188 |         });
> 189 |         it(""complains about missing ] for size"", function() {
      |        ^ Unknown Test
  190 |             expect`\rule[1em{2em}{3em}`.toFailWithParseError(
  191 |                    ""Unexpected end of input in a macro argument,"" +
  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 194}","  192 |                    "" expected ']' at end of input: …e[1em{2em}{3em}"");
  193 |         });
> 194 |         it(""complains about missing ] for size at end of input"", function() {
      |        ^ Unknown Test
  195 |             expect`\rule[1em`.toFailWithParseError(
  196 |                    ""Unexpected end of input in a macro argument,"" +
  197 |                    "" expected ']' at end of input: \\rule[1em"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 199}","  197 |                    "" expected ']' at end of input: \\rule[1em"");
  198 |         });
> 199 |         it(""complains about missing } for color at end of input"", function() {
      |        ^ Unknown Test
  200 |             expect`\textcolor{#123456`.toFailWithParseError(
  201 |                    ""Unexpected end of input in a macro argument,"" +
  202 |                    "" expected '}' at end of input: …xtcolor{#123456"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 207}","  205 |
  206 |     describe(""#parseGroup expecting }"", function() {
> 207 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  208 |             expect`\sqrt{2`.toFailWithParseError(
  209 |                    ""Expected '}', got 'EOF' at end of input: \\sqrt{2"");
  210 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 214}","  212 |
  213 |     describe(""#parseOptionalGroup expecting ]"", function() {
> 214 |         it(""at end of file"", function() {
      |        ^ Unknown Test
  215 |             expect`\sqrt[3`.toFailWithParseError(
  216 |                    ""Unexpected end of input in a macro argument,"" +
  217 |                    "" expected ']' at end of input: \\sqrt[3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 219}","  217 |                    "" expected ']' at end of input: \\sqrt[3"");
  218 |         });
> 219 |         it(""before group"", function() {
      |        ^ Unknown Test
  220 |             expect`\sqrt[3{2}`.toFailWithParseError(
  221 |                    ""Unexpected end of input in a macro argument,"" +
  222 |                    "" expected ']' at end of input: \\sqrt[3{2}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 231}","  229 |
  230 |     describe(""parseArray"", function() {
> 231 |         it(""rejects missing \\end"", function() {
      |        ^ Unknown Test
  232 |             expect`\begin{matrix}1`.toFailWithParseError(
  233 |                    ""Expected & or \\\\ or \\cr or \\end at end of input:"" +
  234 |                    "" \\begin{matrix}1"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 236}","  234 |                    "" \\begin{matrix}1"");
  235 |         });
> 236 |         it(""rejects incorrectly scoped \\end"", function() {
      |        ^ Unknown Test
  237 |             expect`{\begin{matrix}1}\end{matrix}`.toFailWithParseError(
  238 |                    ""Expected & or \\\\ or \\cr or \\end at position 17:"" +
  239 |                    "" …\\begin{matrix}1}̲\\end{matrix}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 244}","  242 |
  243 |     describe(""array environment"", function() {
> 244 |         it(""rejects unknown column types"", function() {
      |        ^ Unknown Test
  245 |             expect`\begin{array}{cba}\end{array}`.toFailWithParseError(
  246 |                    ""Unknown column alignment: b at position 16:"" +
  247 |                    "" \\begin{array}{cb̲a}\\end{array}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 256}","  254 |
  255 |     describe(""delimiter functions"", function() {
> 256 |         it(""reject invalid opening delimiters"", function() {
      |        ^ Unknown Test
  257 |             expect`\bigl 1 + 2 \bigr`.toFailWithParseError(
  258 |                    ""Invalid delimiter '1' after '\\bigl' at position 7:"" +
  259 |                    "" \\bigl 1̲ + 2 \\bigr"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 261}","  259 |                    "" \\bigl 1̲ + 2 \\bigr"");
  260 |         });
> 261 |         it(""reject invalid closing delimiters"", function() {
      |        ^ Unknown Test
  262 |             expect`\bigl(1+2\bigr=3`.toFailWithParseError(
  263 |                    ""Invalid delimiter '=' after '\\bigr' at position 15:"" +
  264 |                    "" \\bigl(1+2\\bigr=̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 266}","  264 |                    "" \\bigl(1+2\\bigr=̲3"");
  265 |         });
> 266 |         it(""reject group opening delimiters"", function() {
      |        ^ Unknown Test
  267 |             expect`\bigl{(}1+2\bigr)3`.toFailWithParseError(
  268 |                    ""Invalid delimiter type 'ordgroup' at position 6:"" +
  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 271}","  269 |                    "" \\bigl{̲(̲}̲1+2\\bigr)3"");
  270 |         });
> 271 |         it(""reject group closing delimiters"", function() {
      |        ^ Unknown Test
  272 |             expect`\bigl(1+2\bigr{)}3`.toFailWithParseError(
  273 |                    ""Invalid delimiter type 'ordgroup' at position 15:"" +
  274 |                    "" \\bigl(1+2\\bigr{̲)̲}̲3"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 279}","  277 |
  278 |     describe(""\\begin and \\end"", function() {
> 279 |         it(""reject invalid environment names"", function() {
      |        ^ Unknown Test
  280 |             expect`\begin x\end y`.toFailWithParseError(
  281 |                    ""No such environment: x at position 8: \\begin x̲\\end y"");
  282 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 302}","  300 |
  301 |     describe(""#_innerLexColor"", function() {
> 302 |         it(""reject 3-digit hex notation without #"", function() {
      |        ^ Unknown Test
  303 |             expect`\textcolor{1a2}{foo}`.toFailWithParseError(
  304 |                    ""Invalid color: '1a2'"" +
  305 |                    "" at position 11: \\textcolor{̲1̲a̲2̲}̲{foo}"");",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 310}","  308 |
  309 |     describe(""#_innerLexSize"", function() {
> 310 |         it(""reject size without unit"", function() {
      |        ^ Unknown Test
  311 |             expect`\rule{0}{2em}`.toFailWithParseError(
  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 314}","  312 |                    ""Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}"");
  313 |         });
> 314 |         it(""reject size with bogus unit"", function() {
      |        ^ Unknown Test
  315 |             expect`\rule{1au}{2em}`.toFailWithParseError(
  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js,Unknown Test,"{'column': 8, 'line': 318}","  316 |                    ""Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}"");
  317 |         });
> 318 |         it(""reject size without number"", function() {
      |        ^ Unknown Test
  319 |             expect`\rule{em}{2em}`.toFailWithParseError(
  320 |                    ""Invalid size: 'em' at position 6: \\rule{̲e̲m̲}̲{2em}"");
  321 |         });",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 5, 'column': 4, 'index': 124}","  3 |
  4 | describe(""Symbols and macros"", () => {
> 5 |     for (const macro in macros) {
    |    ^ Conditional Test Logic
  6 |         if (!macros.hasOwnProperty(macro)) {
  7 |             continue;
  8 |         }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 6, 'column': 8, 'index': 162}","  4 | describe(""Symbols and macros"", () => {
  5 |     for (const macro in macros) {
> 6 |         if (!macros.hasOwnProperty(macro)) {
    |        ^ Conditional Test Logic
  7 |             continue;
  8 |         }
  9 |         it(`macro ${macro} should not shadow a symbol`, () => {",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 10, 'column': 12, 'index': 307}","   8 |         }
   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
> 10 |             for (const kind in symbols) {
     |            ^ Conditional Test Logic
  11 |                 if (!symbols.hasOwnProperty(kind)) {
  12 |                     continue;
  13 |                 }",,
/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js,Conditional Test Logic,"{'line': 11, 'column': 16, 'index': 353}","   9 |         it(`macro ${macro} should not shadow a symbol`, () => {
  10 |             for (const kind in symbols) {
> 11 |                 if (!symbols.hasOwnProperty(kind)) {
     |                ^ Conditional Test Logic
  12 |                     continue;
  13 |                 }
  14 |                 expect(symbols[kind][macro]).toBeFalsy();",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 18, 'column': 12, 'index': 481}","  16 |                   splitAtDelimiters(actual, delimiters);
  17 |
> 18 |             if (split.length !== result.length) {
     |            ^ Conditional Test Logic
  19 |                 message.pass = false;
  20 |                 message.message = () => ""Different number of splits: "" +
  21 |                     split.length + "" vs. "" + result.length + "" ("" +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 27, 'column': 12, 'index': 861}","  25 |             }
  26 |
> 27 |             for (let i = 0; i < split.length; i++) {
     |            ^ Conditional Test Logic
  28 |                 const real = split[i];
  29 |                 const correct = result[i];
  30 |",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 34, 'column': 16, 'index': 1061}","  32 |                 let diff;
  33 |
> 34 |                 if (real.type !== correct.type) {
     |                ^ Conditional Test Logic
  35 |                     good = false;
  36 |                     diff = ""type"";
  37 |                 } else if (real.data !== correct.data) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 37, 'column': 23, 'index': 1187}","  35 |                     good = false;
  36 |                     diff = ""type"";
> 37 |                 } else if (real.data !== correct.data) {
     |                       ^ Conditional Test Logic
  38 |                     good = false;
  39 |                     diff = ""data"";
  40 |                 } else if (real.display !== correct.display) {",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 40, 'column': 23, 'index': 1313}","  38 |                     good = false;
  39 |                     diff = ""data"";
> 40 |                 } else if (real.display !== correct.display) {
     |                       ^ Conditional Test Logic
  41 |                     good = false;
  42 |                     diff = ""display"";
  43 |                 }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 45, 'column': 16, 'index': 1460}","  43 |                 }
  44 |
> 45 |                 if (!good) {
     |                ^ Conditional Test Logic
  46 |                     message.pass = false;
  47 |                     message.message = () => ""Difference at split "" +
  48 |                         (i + 1) + "": "" + JSON.stringify(real) +",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 332, 'column': 8, 'index': 11671}","  330 |             '\\]'];
  331 |         const el = document.createElement('div');
> 332 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  333 |             const txt = document.createTextNode(textNodes[i]);
  334 |             el.appendChild(txt);
  335 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 350, 'column': 8, 'index': 12420}","  348 |             'consectetur adipiscing elit'];
  349 |         const el = document.createElement('div');
> 350 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  351 |             const txt = document.createTextNode(textNodes[i]);
  352 |             el.appendChild(txt);
  353 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Conditional Test Logic,"{'line': 355, 'column': 8, 'index': 12630}","  353 |         }
  354 |         const el2 = document.createElement('div');
> 355 |         for (let i = 0; i < textNodes.length; i++) {
      |        ^ Conditional Test Logic
  356 |             const txt = document.createTextNode(textNodes[i]);
  357 |             el2.appendChild(txt);
  358 |         }",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 62}","  60 | describe(""A delimiter splitter"", function() {
  61 |     it(""doesn't split when there are no delimiters"", function() {
> 62 |         expect(""hello"").toSplitInto(
     |        ^ Redundant Assertion
  63 |             [
  64 |                 {type: ""text"", data: ""hello""},
  65 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 72}","  70 |
  71 |     it(""doesn't create a math node with only one left delimiter"", function() {
> 72 |         expect(""hello ( world"").toSplitInto(
     |        ^ Redundant Assertion
  73 |             [
  74 |                 {type: ""text"", data: ""hello ""},
  75 |                 {type: ""text"", data: ""( world""},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 83}","  81 |
  82 |     it(""doesn't split when there's only a right delimiter"", function() {
> 83 |         expect(""hello ) world"").toSplitInto(
     |        ^ Redundant Assertion
  84 |             [
  85 |                 {type: ""text"", data: ""hello ) world""},
  86 |             ],",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 93}","  91 |
  92 |     it(""splits when there are both delimiters"", function() {
> 93 |         expect(""hello ( world ) boo"").toSplitInto(
     |        ^ Redundant Assertion
  94 |             [
  95 |                 {type: ""text"", data: ""hello ""},
  96 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 106}","  104 |
  105 |     it(""splits on multi-character delimiters"", function() {
> 106 |         expect(""hello [[ world ]] boo"").toSplitInto(
      |        ^ Redundant Assertion
  107 |             [
  108 |                 {type: ""text"", data: ""hello ""},
  109 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 116}","  114 |                 {left: ""[["", right: ""]]"", display: false},
  115 |             ]);
> 116 |         expect(""hello \\begin{equation} world \\end{equation} boo"").toSplitInto(
      |        ^ Redundant Assertion
  117 |             [
  118 |                 {type: ""text"", data: ""hello ""},
  119 |                 {type: ""math"", data: ""\\begin{equation} world \\end{equation}"",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 131}","  129 |
  130 |     it(""splits multiple times"", function() {
> 131 |         expect(""hello ( world ) boo ( more ) stuff"").toSplitInto(
      |        ^ Redundant Assertion
  132 |             [
  133 |                 {type: ""text"", data: ""hello ""},
  134 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 147}","  145 |
  146 |     it(""leaves the ending when there's only a left delimiter"", function() {
> 147 |         expect(""hello ( world ) boo ( left"").toSplitInto(
      |        ^ Redundant Assertion
  148 |             [
  149 |                 {type: ""text"", data: ""hello ""},
  150 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 161}","  159 |
  160 |     it(""doesn't split when close delimiters are in {}s"", function() {
> 161 |         expect(""hello ( world { ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  162 |             [
  163 |                 {type: ""text"", data: ""hello ""},
  164 |                 {type: ""math"", data: "" world { ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 172}","  170 |             ]);
  171 |
> 172 |         expect(""hello ( world { { } ) } ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  173 |             [
  174 |                 {type: ""text"", data: ""hello ""},
  175 |                 {type: ""math"", data: "" world { { } ) } "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 185}","  183 |
  184 |     it(""correctly processes sequences of $..$"", function() {
> 185 |         expect(""$hello$$world$$boo$"").toSplitInto(
      |        ^ Redundant Assertion
  186 |             [
  187 |                 {type: ""math"", data: ""hello"",
  188 |                     rawData: ""$hello$"", display: false},",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 200}","  198 |
  199 |     it(""doesn't split at escaped delimiters"", function() {
> 200 |         expect(""hello ( world \\) ) boo"").toSplitInto(
      |        ^ Redundant Assertion
  201 |             [
  202 |                 {type: ""text"", data: ""hello ""},
  203 |                 {type: ""math"", data: "" world \\) "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 224}","  222 |
  223 |     it(""splits when the right and left delimiters are the same"", function() {
> 224 |         expect(""hello $ world $ boo"").toSplitInto(
      |        ^ Redundant Assertion
  225 |             [
  226 |                 {type: ""text"", data: ""hello ""},
  227 |                 {type: ""math"", data: "" world "",",,
/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js,Redundant Assertion,"{'column': 8, 'line': 237}","  235 |
  236 |     it(""ignores \\$"", function() {
> 237 |         expect(""$x = \\$5$"").toSplitInto(
      |        ^ Redundant Assertion
  238 |             [
  239 |                 {type: ""math"", data: ""x = \\$5"",
  240 |                     rawData: ""$x = \\$5$"", display: false},",,
test/unicode-spec.js,ConditionalTestLogic,"[{""startLine"":157,""endLine"":160}]",,25.0,2.0
test/unicode-spec.js,SubOptimalAssert,"[{""startLine"":163,""endLine"":163}]",,25.0,2.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1327,""endLine"":1331}]",,558.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":1410,""endLine"":1412}]",,558.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2831,""endLine"":2833}]",,558.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2848,""endLine"":2850}]",,558.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":2865,""endLine"":2868}]",,558.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3136,""endLine"":3139}]",,558.0,117.0
test/katex-spec.js,AnonymousTest,"[{""startLine"":3833,""endLine"":3835}]",,558.0,117.0
test/katex-spec.js,OvercommentedTest,"[{""startLine"":4023,""endLine"":4058}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":62,""endLine"":64}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":94,""endLine"":97}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":119,""endLine"":122}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":134,""endLine"":136}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":152,""endLine"":154}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":170,""endLine"":172}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":186,""endLine"":188}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":308,""endLine"":313}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":352,""endLine"":354}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":369,""endLine"":371}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":396,""endLine"":399}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":501,""endLine"":503}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":575,""endLine"":580}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":582,""endLine"":612}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":678,""endLine"":687}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":691,""endLine"":697}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":703,""endLine"":705}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":727,""endLine"":729}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":839,""endLine"":849}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":863,""endLine"":865}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1001,""endLine"":1003}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1049,""endLine"":1052}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1108,""endLine"":1118}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1120,""endLine"":1123}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1125,""endLine"":1128}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1146,""endLine"":1160}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1178,""endLine"":1181}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1183,""endLine"":1186}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1188,""endLine"":1191}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1207,""endLine"":1209}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1319,""endLine"":1321}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1554,""endLine"":1567}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1571,""endLine"":1576}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":1702,""endLine"":1709}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2086,""endLine"":2103}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2124,""endLine"":2126}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2159,""endLine"":2161}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2270,""endLine"":2276}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2301,""endLine"":2306}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2308,""endLine"":2314}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2318,""endLine"":2324}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2326,""endLine"":2332}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2336,""endLine"":2341}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2343,""endLine"":2349}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2362,""endLine"":2367}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2375,""endLine"":2379}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2383,""endLine"":2388}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2390,""endLine"":2397}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2401,""endLine"":2407}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2415,""endLine"":2419}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2423,""endLine"":2429}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2442,""endLine"":2449}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2457,""endLine"":2461}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2465,""endLine"":2470}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2472,""endLine"":2479}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2483,""endLine"":2488}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2498,""endLine"":2503}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2505,""endLine"":2511}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2538,""endLine"":2541}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2545,""endLine"":2549}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2551,""endLine"":2553}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2557,""endLine"":2561}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2563,""endLine"":2566}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2568,""endLine"":2572}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2574,""endLine"":2577}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2581,""endLine"":2585}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2587,""endLine"":2589}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2593,""endLine"":2598}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2600,""endLine"":2604}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2606,""endLine"":2610}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2614,""endLine"":2623}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2625,""endLine"":2631}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2644,""endLine"":2649}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2653,""endLine"":2655}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2656,""endLine"":2658}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2662,""endLine"":2671}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2682,""endLine"":2693}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2711,""endLine"":2726}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2736,""endLine"":2746}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2760,""endLine"":2766}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2848,""endLine"":2850}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2865,""endLine"":2868}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2874,""endLine"":2876}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2969,""endLine"":2976}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":2980,""endLine"":2983}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3425,""endLine"":3428}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3509,""endLine"":3512}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3812,""endLine"":3814}]",,558.0,117.0
test/katex-spec.js,IdenticalTestDescription,"[{""startLine"":3833,""endLine"":3835}]",,558.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":104,""endLine"":107}]",,558.0,117.0
test/katex-spec.js,ConditionalTestLogic,"[{""startLine"":108,""endLine"":113}]",,558.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1772,""endLine"":1774}]",,558.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":1907,""endLine"":1908}]",,558.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3180,""endLine"":3180}]",,558.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3195,""endLine"":3195}]",,558.0,117.0
test/katex-spec.js,SubOptimalAssert,"[{""startLine"":3990,""endLine"":3991}]",,558.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":521,""endLine"":547}]",,558.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":582,""endLine"":612}]",,558.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":1618,""endLine"":1642}]",,558.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3091,""endLine"":3106}]",,558.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":3514,""endLine"":3530}]",,558.0,117.0
test/katex-spec.js,VerboseStatement,"[{""startLine"":4023,""endLine"":4058}]",,558.0,117.0
test/errors-spec.js,AnonymousTest,"[{""startLine"":219,""endLine"":223}]",,50.0,26.0
test/errors-spec.js,IdenticalTestDescription,"[{""startLine"":214,""endLine"":218}]",,50.0,26.0
