{"project":"steel","version":"","testSuites":13,"testCases":66,"smelledTestSuites":6,"smelledTestCases":0,"smells":126,"smelledFiles":[{"path":"/home/gabriel/Desktop/research/projects/tether/test/unit/tether.spec.js","testCases":5,"smells":47,"smellInfo":[{"name":"Duplicate Assert","packageName":"duplicateAssert","items":[{"frame":"  57 |\n  58 |       expect(element.classList.length, 'element - tether classes added').toEqual(12);\n> 59 |       expect(element).toHaveClass('tether-element');\n     |      ^ Duplicate Assert\n  60 |       expect(element).not.toHaveClass('tether-target');\n  61 |\n  62 |       expect(target.classList.length, 'target - tether classes added').toEqual(12);","start":{"line":59,"column":6,"index":1898}},{"frame":"  58 |       expect(element.classList.length, 'element - tether classes added').toEqual(12);\n  59 |       expect(element).toHaveClass('tether-element');\n> 60 |       expect(element).not.toHaveClass('tether-target');\n     |      ^ Duplicate Assert\n  61 |\n  62 |       expect(target.classList.length, 'target - tether classes added').toEqual(12);\n  63 |       expect(target).toHaveClass('tether-target');","start":{"line":60,"column":6,"index":1951}},{"frame":"  61 |\n  62 |       expect(target.classList.length, 'target - tether classes added').toEqual(12);\n> 63 |       expect(target).toHaveClass('tether-target');\n     |      ^ Duplicate Assert\n  64 |       expect(target).not.toHaveClass('tether-element');\n  65 |\n  66 |       tether.destroy();","start":{"line":63,"column":6,"index":2092}},{"frame":"  62 |       expect(target.classList.length, 'target - tether classes added').toEqual(12);\n  63 |       expect(target).toHaveClass('tether-target');\n> 64 |       expect(target).not.toHaveClass('tether-element');\n     |      ^ Duplicate Assert\n  65 |\n  66 |       tether.destroy();\n  67 |","start":{"line":64,"column":6,"index":2143}},{"frame":"  84 |\n  85 |       expect(element.classList.length, 'element - foo classes added').toEqual(12);\n> 86 |       expect(element).toHaveClass('foo-element');\n     |      ^ Duplicate Assert\n  87 |       expect(element).not.toHaveClass('foo-target');\n  88 |\n  89 |       expect(target.classList.length, 'target - foo classes added').toEqual(12);","start":{"line":86,"column":6,"index":2969}},{"frame":"  85 |       expect(element.classList.length, 'element - foo classes added').toEqual(12);\n  86 |       expect(element).toHaveClass('foo-element');\n> 87 |       expect(element).not.toHaveClass('foo-target');\n     |      ^ Duplicate Assert\n  88 |\n  89 |       expect(target.classList.length, 'target - foo classes added').toEqual(12);\n  90 |       expect(target).toHaveClass('foo-target');","start":{"line":87,"column":6,"index":3019}},{"frame":"  88 |\n  89 |       expect(target.classList.length, 'target - foo classes added').toEqual(12);\n> 90 |       expect(target).toHaveClass('foo-target');\n     |      ^ Duplicate Assert\n  91 |       expect(target).not.toHaveClass('foo-element');\n  92 |\n  93 |       tether.destroy();","start":{"line":90,"column":6,"index":3154}},{"frame":"  89 |       expect(target.classList.length, 'target - foo classes added').toEqual(12);\n  90 |       expect(target).toHaveClass('foo-target');\n> 91 |       expect(target).not.toHaveClass('foo-element');\n     |      ^ Duplicate Assert\n  92 |\n  93 |       tether.destroy();\n  94 |","start":{"line":91,"column":6,"index":3202}},{"frame":"  114 |\n  115 |       expect(element.classList.length, 'element - custom classes added').toEqual(12);\n> 116 |       expect(element).toHaveClass('my-custom-class');\n      |      ^ Duplicate Assert\n  117 |       expect(element).not.toHaveClass('another-one');\n  118 |       expect(element).not.toHaveClass('tether-element');\n  119 |","start":{"line":116,"column":6,"index":4081}},{"frame":"  115 |       expect(element.classList.length, 'element - custom classes added').toEqual(12);\n  116 |       expect(element).toHaveClass('my-custom-class');\n> 117 |       expect(element).not.toHaveClass('another-one');\n      |      ^ Duplicate Assert\n  118 |       expect(element).not.toHaveClass('tether-element');\n  119 |\n  120 |       expect(target.classList.length, 'target - custom classes added').toEqual(12);","start":{"line":117,"column":6,"index":4135}},{"frame":"  116 |       expect(element).toHaveClass('my-custom-class');\n  117 |       expect(element).not.toHaveClass('another-one');\n> 118 |       expect(element).not.toHaveClass('tether-element');\n      |      ^ Duplicate Assert\n  119 |\n  120 |       expect(target.classList.length, 'target - custom classes added').toEqual(12);\n  121 |       expect(target).toHaveClass('another-one');","start":{"line":118,"column":6,"index":4189}},{"frame":"  119 |\n  120 |       expect(target.classList.length, 'target - custom classes added').toEqual(12);\n> 121 |       expect(target).toHaveClass('another-one');\n      |      ^ Duplicate Assert\n  122 |       expect(target).not.toHaveClass('my-custom-class');\n  123 |       expect(target).not.toHaveClass('tether-target');\n  124 |","start":{"line":121,"column":6,"index":4331}},{"frame":"  120 |       expect(target.classList.length, 'target - custom classes added').toEqual(12);\n  121 |       expect(target).toHaveClass('another-one');\n> 122 |       expect(target).not.toHaveClass('my-custom-class');\n      |      ^ Duplicate Assert\n  123 |       expect(target).not.toHaveClass('tether-target');\n  124 |\n  125 |       tether.destroy();","start":{"line":122,"column":6,"index":4380}},{"frame":"  121 |       expect(target).toHaveClass('another-one');\n  122 |       expect(target).not.toHaveClass('my-custom-class');\n> 123 |       expect(target).not.toHaveClass('tether-target');\n      |      ^ Duplicate Assert\n  124 |\n  125 |       tether.destroy();\n  126 |","start":{"line":123,"column":6,"index":4437}},{"frame":"  147 |\n  148 |       expect(element.classList.length, 'element - classes added').toEqual(10);\n> 149 |       expect(element).not.toHaveClass('tether-element');\n      |      ^ Duplicate Assert\n  150 |       expect(element).not.toHaveClass('tether-enabled');\n  151 |\n  152 |       expect(target.classList.length, 'target - classes added').toEqual(10);","start":{"line":149,"column":6,"index":5320}},{"frame":"  148 |       expect(element.classList.length, 'element - classes added').toEqual(10);\n  149 |       expect(element).not.toHaveClass('tether-element');\n> 150 |       expect(element).not.toHaveClass('tether-enabled');\n      |      ^ Duplicate Assert\n  151 |\n  152 |       expect(target.classList.length, 'target - classes added').toEqual(10);\n  153 |       expect(target).not.toHaveClass('tether-target');","start":{"line":150,"column":6,"index":5377}},{"frame":"  152 |       expect(target.classList.length, 'target - classes added').toEqual(10);\n  153 |       expect(target).not.toHaveClass('tether-target');\n> 154 |       expect(element).not.toHaveClass('tether-enabled');\n      |      ^ Duplicate Assert\n  155 |\n  156 |       tether.destroy();\n  157 |","start":{"line":154,"column":6,"index":5567}}]},{"name":"Magic Number","packageName":"magicNumberRule","items":[{"frame":"  22 |   describe('destroy()', () => {\n  23 |     it('removes classes on destroy', () => {\n> 24 |       expect(element.classList.length, 'element - only one class').toEqual(1);\n     |                                                                           ^ Magic Number\n  25 |       expect(target.classList.length, 'target - only one class').toEqual(1);\n  26 |       const tether = new Tether({\n  27 |         element: '.element',","start":{"line":24,"column":75,"index":664}},{"frame":"  23 |     it('removes classes on destroy', () => {\n  24 |       expect(element.classList.length, 'element - only one class').toEqual(1);\n> 25 |       expect(target.classList.length, 'target - only one class').toEqual(1);\n     |                                                                         ^ Magic Number\n  26 |       const tether = new Tether({\n  27 |         element: '.element',\n  28 |         target: '.target',","start":{"line":25,"column":73,"index":741}},{"frame":"  33 |       tether.enable();\n  34 |\n> 35 |       expect(element.classList.length, 'element - tether classes added').toEqual(12);\n     |                                                                                 ^ Magic Number\n  36 |       expect(target.classList.length, 'target - tether classes added').toEqual(12);\n  37 |\n  38 |       tether.destroy();","start":{"line":35,"column":81,"index":1021}},{"frame":"  34 |\n  35 |       expect(element.classList.length, 'element - tether classes added').toEqual(12);\n> 36 |       expect(target.classList.length, 'target - tether classes added').toEqual(12);\n     |                                                                               ^ Magic Number\n  37 |\n  38 |       tether.destroy();\n  39 |","start":{"line":36,"column":79,"index":1105}},{"frame":"  38 |       tether.destroy();\n  39 |\n> 40 |       expect(element.classList.length, 'element - destroy sets classes back to initial state').toEqual(1);\n     |                                                                                                       ^ Magic Number\n  41 |       expect(target.classList.length, 'target - destroy sets classes back to initial state').toEqual(1);\n  42 |     });\n  43 |   });","start":{"line":40,"column":103,"index":1239}},{"frame":"  39 |\n  40 |       expect(element.classList.length, 'element - destroy sets classes back to initial state').toEqual(1);\n> 41 |       expect(target.classList.length, 'target - destroy sets classes back to initial state').toEqual(1);\n     |                                                                                                     ^ Magic Number\n  42 |     });\n  43 |   });\n  44 |","start":{"line":41,"column":101,"index":1344}},{"frame":"  45 |   describe('getClass()', () => {\n  46 |     it('gets default classes when no options set', () => {\n> 47 |       expect(element.classList.length, 'element - only one class').toEqual(1);\n     |                                                                           ^ Magic Number\n  48 |       expect(target.classList.length, 'target - only one class').toEqual(1);\n  49 |       const tether = new Tether({\n  50 |         element: '.element',","start":{"line":47,"column":75,"index":1530}},{"frame":"  46 |     it('gets default classes when no options set', () => {\n  47 |       expect(element.classList.length, 'element - only one class').toEqual(1);\n> 48 |       expect(target.classList.length, 'target - only one class').toEqual(1);\n     |                                                                         ^ Magic Number\n  49 |       const tether = new Tether({\n  50 |         element: '.element',\n  51 |         target: '.target',","start":{"line":48,"column":73,"index":1607}},{"frame":"  56 |       tether.enable();\n  57 |\n> 58 |       expect(element.classList.length, 'element - tether classes added').toEqual(12);\n     |                                                                                 ^ Magic Number\n  59 |       expect(element).toHaveClass('tether-element');\n  60 |       expect(element).not.toHaveClass('tether-target');\n  61 |","start":{"line":58,"column":81,"index":1887}},{"frame":"  60 |       expect(element).not.toHaveClass('tether-target');\n  61 |\n> 62 |       expect(target.classList.length, 'target - tether classes added').toEqual(12);\n     |                                                                               ^ Magic Number\n  63 |       expect(target).toHaveClass('tether-target');\n  64 |       expect(target).not.toHaveClass('tether-element');\n  65 |","start":{"line":62,"column":79,"index":2081}},{"frame":"  66 |       tether.destroy();\n  67 |\n> 68 |       expect(element.classList.length, 'element - destroy sets classes back to initial state').toEqual(1);\n     |                                                                                                       ^ Magic Number\n  69 |       expect(target.classList.length, 'target - destroy sets classes back to initial state').toEqual(1);\n  70 |     });\n  71 |","start":{"line":68,"column":103,"index":2322}},{"frame":"  67 |\n  68 |       expect(element.classList.length, 'element - destroy sets classes back to initial state').toEqual(1);\n> 69 |       expect(target.classList.length, 'target - destroy sets classes back to initial state').toEqual(1);\n     |                                                                                                     ^ Magic Number\n  70 |     });\n  71 |\n  72 |     it('gets prefixed classes when classPrefix set', () => {","start":{"line":69,"column":101,"index":2427}},{"frame":"  71 |\n  72 |     it('gets prefixed classes when classPrefix set', () => {\n> 73 |       expect(element.classList.length, 'element - only one class').toEqual(1);\n     |                                                                           ^ Magic Number\n  74 |       expect(target.classList.length, 'target - only one class').toEqual(1);\n  75 |       const tether = new Tether({\n  76 |         element: '.element',","start":{"line":73,"column":75,"index":2576}},{"frame":"  72 |     it('gets prefixed classes when classPrefix set', () => {\n  73 |       expect(element.classList.length, 'element - only one class').toEqual(1);\n> 74 |       expect(target.classList.length, 'target - only one class').toEqual(1);\n     |                                                                         ^ Magic Number\n  75 |       const tether = new Tether({\n  76 |         element: '.element',\n  77 |         target: '.target',","start":{"line":74,"column":73,"index":2653}},{"frame":"  83 |       tether.enable();\n  84 |\n> 85 |       expect(element.classList.length, 'element - foo classes added').toEqual(12);\n     |                                                                              ^ Magic Number\n  86 |       expect(element).toHaveClass('foo-element');\n  87 |       expect(element).not.toHaveClass('foo-target');\n  88 |","start":{"line":85,"column":78,"index":2958}},{"frame":"  87 |       expect(element).not.toHaveClass('foo-target');\n  88 |\n> 89 |       expect(target.classList.length, 'target - foo classes added').toEqual(12);\n     |                                                                            ^ Magic Number\n  90 |       expect(target).toHaveClass('foo-target');\n  91 |       expect(target).not.toHaveClass('foo-element');\n  92 |","start":{"line":89,"column":76,"index":3143}},{"frame":"  93 |       tether.destroy();\n  94 |\n> 95 |       expect(element.classList.length, 'element - destroy sets classes back to initial state').toEqual(1);\n     |                                                                                                       ^ Magic Number\n  96 |       expect(target.classList.length, 'target - destroy sets classes back to initial state').toEqual(1);\n  97 |     });\n  98 |","start":{"line":95,"column":103,"index":3378}},{"frame":"  94 |\n  95 |       expect(element.classList.length, 'element - destroy sets classes back to initial state').toEqual(1);\n> 96 |       expect(target.classList.length, 'target - destroy sets classes back to initial state').toEqual(1);\n     |                                                                                                     ^ Magic Number\n  97 |     });\n  98 |\n  99 |     it('gets overridden classes', () => {","start":{"line":96,"column":101,"index":3483}},{"frame":"   98 |\n   99 |     it('gets overridden classes', () => {\n> 100 |       expect(element.classList.length, 'element - only one class').toEqual(1);\n      |                                                                           ^ Magic Number\n  101 |       expect(target.classList.length, 'target - only one class').toEqual(1);\n  102 |       const tether = new Tether({\n  103 |         element: '.element',","start":{"line":100,"column":75,"index":3613}},{"frame":"   99 |     it('gets overridden classes', () => {\n  100 |       expect(element.classList.length, 'element - only one class').toEqual(1);\n> 101 |       expect(target.classList.length, 'target - only one class').toEqual(1);\n      |                                                                         ^ Magic Number\n  102 |       const tether = new Tether({\n  103 |         element: '.element',\n  104 |         target: '.target',","start":{"line":101,"column":73,"index":3690}},{"frame":"  113 |       tether.enable();\n  114 |\n> 115 |       expect(element.classList.length, 'element - custom classes added').toEqual(12);\n      |                                                                                 ^ Magic Number\n  116 |       expect(element).toHaveClass('my-custom-class');\n  117 |       expect(element).not.toHaveClass('another-one');\n  118 |       expect(element).not.toHaveClass('tether-element');","start":{"line":115,"column":81,"index":4070}},{"frame":"  118 |       expect(element).not.toHaveClass('tether-element');\n  119 |\n> 120 |       expect(target.classList.length, 'target - custom classes added').toEqual(12);\n      |                                                                               ^ Magic Number\n  121 |       expect(target).toHaveClass('another-one');\n  122 |       expect(target).not.toHaveClass('my-custom-class');\n  123 |       expect(target).not.toHaveClass('tether-target');","start":{"line":120,"column":79,"index":4320}},{"frame":"  125 |       tether.destroy();\n  126 |\n> 127 |       expect(element.classList.length, 'element - destroy sets classes back to initial state').toEqual(1);\n      |                                                                                                       ^ Magic Number\n  128 |       expect(target.classList.length, 'target - destroy sets classes back to initial state').toEqual(1);\n  129 |     });\n  130 |","start":{"line":127,"column":103,"index":4615}},{"frame":"  126 |\n  127 |       expect(element.classList.length, 'element - destroy sets classes back to initial state').toEqual(1);\n> 128 |       expect(target.classList.length, 'target - destroy sets classes back to initial state').toEqual(1);\n      |                                                                                                     ^ Magic Number\n  129 |     });\n  130 |\n  131 |     it('removes classes when false', () => {","start":{"line":128,"column":101,"index":4720}},{"frame":"  130 |\n  131 |     it('removes classes when false', () => {\n> 132 |       expect(element.classList.length, 'element - only one class').toEqual(1);\n      |                                                                           ^ Magic Number\n  133 |       expect(target.classList.length, 'target - only one class').toEqual(1);\n  134 |       const tether = new Tether({\n  135 |         element: '.element',","start":{"line":132,"column":75,"index":4853}},{"frame":"  131 |     it('removes classes when false', () => {\n  132 |       expect(element.classList.length, 'element - only one class').toEqual(1);\n> 133 |       expect(target.classList.length, 'target - only one class').toEqual(1);\n      |                                                                         ^ Magic Number\n  134 |       const tether = new Tether({\n  135 |         element: '.element',\n  136 |         target: '.target',","start":{"line":133,"column":73,"index":4930}},{"frame":"  146 |       tether.enable();\n  147 |\n> 148 |       expect(element.classList.length, 'element - classes added').toEqual(10);\n      |                                                                          ^ Magic Number\n  149 |       expect(element).not.toHaveClass('tether-element');\n  150 |       expect(element).not.toHaveClass('tether-enabled');\n  151 |","start":{"line":148,"column":74,"index":5309}},{"frame":"  150 |       expect(element).not.toHaveClass('tether-enabled');\n  151 |\n> 152 |       expect(target.classList.length, 'target - classes added').toEqual(10);\n      |                                                                        ^ Magic Number\n  153 |       expect(target).not.toHaveClass('tether-target');\n  154 |       expect(element).not.toHaveClass('tether-enabled');\n  155 |","start":{"line":152,"column":72,"index":5501}},{"frame":"  156 |       tether.destroy();\n  157 |\n> 158 |       expect(element.classList.length, 'element - destroy sets classes back to initial state').toEqual(1);\n      |                                                                                                       ^ Magic Number\n  159 |       expect(target.classList.length, 'target - destroy sets classes back to initial state').toEqual(1);\n  160 |     });\n  161 |   });","start":{"line":158,"column":103,"index":5747}},{"frame":"  157 |\n  158 |       expect(element.classList.length, 'element - destroy sets classes back to initial state').toEqual(1);\n> 159 |       expect(target.classList.length, 'target - destroy sets classes back to initial state').toEqual(1);\n      |                                                                                                     ^ Magic Number\n  160 |     });\n  161 |   });\n  162 | });","start":{"line":159,"column":101,"index":5852}}]}],"metrics":{"aggregate":{"cyclomatic":11,"cyclomaticDensity":6.358,"halstead":{"bugs":1.597,"difficulty":29.149,"effort":139687.9,"length":767,"time":7760.439,"vocabulary":76,"volume":4792.16,"operands":{"distinct":67,"total":434,"identifiers":["describe","\"Tether\"","element","target","beforeEach","document","createElement","\"div\"","classList","add","\"element\"","body","appendChild","\"target\"","afterEach","removeChild","null","\"destroy()\"","it","\"removes classes on destroy\"","expect","length","\"element - only one class\"","toEqual","1","\"target - only one class\"","tether","Tether","\".element\"","\".target\"","attachment","\"top left\"","targetAttachment","\"top right\"","enable","\"element - tether classes added\"","12","\"target - tether classes added\"","destroy","\"element - destroy sets classes back to initial state\"","\"target - destroy sets classes back to initial state\"","\"getClass()\"","\"gets default classes when no options set\"","toHaveClass","\"tether-element\"","not","\"tether-target\"","\"gets prefixed classes when classPrefix set\"","classPrefix","\"foo\"","\"element - foo classes added\"","\"foo-element\"","\"foo-target\"","\"target - foo classes added\"","\"gets overridden classes\"","classes","\"my-custom-class\"","\"another-one\"","\"element - custom classes added\"","\"target - custom classes added\"","\"removes classes when false\"","false","enabled","\"element - classes added\"","10","\"tether-enabled\"","\"target - classes added\""]},"operators":{"distinct":9,"total":333,"identifiers":["()","function=>","let","=",".","const","new","{}",":"]}},"paramCount":0,"sloc":{"logical":173,"physical":163}},"settings":{"commonjs":false,"esmImportExport":{"halstead":false,"lloc":false},"forin":false,"logicalor":true,"switchcase":true,"templateExpression":{"halstead":true,"lloc":true},"trycatch":false,"newmi":false},"classes":[],"dependencies":[{"line":1,"path":"../../src/js/tether.js","type":"esm"}],"errors":[],"lineEnd":163,"lineStart":1,"maintainability":94.046,"methods":[{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.019,"difficulty":1.714,"effort":96.81,"length":17,"time":5.378,"vocabulary":10,"volume":56.473,"operands":{"distinct":7,"total":8,"identifiers":["element","target","beforeEach","afterEach","describe","\"destroy()\"","\"getClass()\""]},"operators":{"distinct":3,"total":9,"identifiers":["let","()","function=>"]}},"paramCount":0,"sloc":{"logical":10,"physical":160},"errors":[],"lineEnd":162,"lineStart":3,"name":"<anon method-1>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.053,"difficulty":3.273,"effort":523.338,"length":42,"time":29.074,"vocabulary":14,"volume":159.909,"operands":{"distinct":11,"total":24,"identifiers":["element","document","createElement","\"div\"","classList","add","\"element\"","body","appendChild","target","\"target\""]},"operators":{"distinct":3,"total":18,"identifiers":["=","()","."]}},"paramCount":0,"sloc":{"logical":8,"physical":8},"errors":[],"lineEnd":13,"lineStart":6,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.021,"difficulty":3,"effort":190.196,"length":20,"time":10.566,"vocabulary":9,"volume":63.399,"operands":{"distinct":6,"total":12,"identifiers":["document","body","removeChild","element","target","null"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","="]}},"paramCount":0,"sloc":{"logical":4,"physical":6},"errors":[],"lineEnd":20,"lineStart":15,"name":"<anon method-3>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"removes classes on destroy\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":2,"physical":22},"errors":[],"lineEnd":43,"lineStart":22,"name":"<anon method-4>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.263,"halstead":{"bugs":0.162,"difficulty":8.167,"effort":3965.008,"length":98,"time":220.278,"vocabulary":31,"volume":485.511,"operands":{"distinct":24,"total":56,"identifiers":["expect","element","classList","length","\"element - only one class\"","toEqual","1","target","\"target - only one class\"","tether","Tether","\".element\"","\".target\"","attachment","\"top left\"","targetAttachment","\"top right\"","enable","\"element - tether classes added\"","12","\"target - tether classes added\"","destroy","\"element - destroy sets classes back to initial state\"","\"target - destroy sets classes back to initial state\""]},"operators":{"distinct":7,"total":42,"identifiers":["()",".","const","=","new","{}",":"]}},"paramCount":0,"sloc":{"logical":19,"physical":20},"errors":[],"lineEnd":42,"lineStart":23,"name":"<anon method-5>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["it","\"gets default classes when no options set\"","\"gets prefixed classes when classPrefix set\"","\"gets overridden classes\"","\"removes classes when false\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":8,"physical":117},"errors":[],"lineEnd":161,"lineStart":45,"name":"<anon method-6>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.704,"halstead":{"bugs":0.222,"difficulty":9.25,"effort":6167.963,"length":130,"time":342.665,"vocabulary":35,"volume":666.807,"operands":{"distinct":28,"total":74,"identifiers":["expect","element","classList","length","\"element - only one class\"","toEqual","1","target","\"target - only one class\"","tether","Tether","\".element\"","\".target\"","attachment","\"top left\"","targetAttachment","\"top right\"","enable","\"element - tether classes added\"","12","toHaveClass","\"tether-element\"","not","\"tether-target\"","\"target - tether classes added\"","destroy","\"element - destroy sets classes back to initial state\"","\"target - destroy sets classes back to initial state\""]},"operators":{"distinct":7,"total":56,"identifiers":["()",".","const","=","new","{}",":"]}},"paramCount":0,"sloc":{"logical":27,"physical":25},"errors":[],"lineEnd":70,"lineStart":46,"name":"<anon method-7>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.571,"halstead":{"bugs":0.231,"difficulty":8.867,"effort":6143.335,"length":133,"time":341.296,"vocabulary":37,"volume":692.857,"operands":{"distinct":30,"total":76,"identifiers":["expect","element","classList","length","\"element - only one class\"","toEqual","1","target","\"target - only one class\"","tether","Tether","\".element\"","\".target\"","attachment","\"top left\"","targetAttachment","\"top right\"","classPrefix","\"foo\"","enable","\"element - foo classes added\"","12","toHaveClass","\"foo-element\"","not","\"foo-target\"","\"target - foo classes added\"","destroy","\"element - destroy sets classes back to initial state\"","\"target - destroy sets classes back to initial state\""]},"operators":{"distinct":7,"total":57,"identifiers":["()",".","const","=","new","{}",":"]}},"paramCount":0,"sloc":{"logical":28,"physical":26},"errors":[],"lineEnd":97,"lineStart":72,"name":"<anon method-8>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":2.941,"halstead":{"bugs":0.275,"difficulty":10.048,"effort":8279.114,"length":157,"time":459.951,"vocabulary":38,"volume":823.925,"operands":{"distinct":31,"total":89,"identifiers":["expect","element","classList","length","\"element - only one class\"","toEqual","1","target","\"target - only one class\"","tether","Tether","\".element\"","\".target\"","attachment","\"top left\"","targetAttachment","\"top right\"","classes","\"my-custom-class\"","\"another-one\"","enable","\"element - custom classes added\"","12","toHaveClass","not","\"tether-element\"","\"target - custom classes added\"","\"tether-target\"","destroy","\"element - destroy sets classes back to initial state\"","\"target - destroy sets classes back to initial state\""]},"operators":{"distinct":7,"total":68,"identifiers":["()",".","const","=","new","{}",":"]}},"paramCount":0,"sloc":{"logical":34,"physical":31},"errors":[],"lineEnd":129,"lineStart":99,"name":"<anon method-9>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.226,"halstead":{"bugs":0.257,"difficulty":9.078,"effort":7005.305,"length":146,"time":389.184,"vocabulary":39,"volume":771.669,"operands":{"distinct":32,"total":83,"identifiers":["expect","element","classList","length","\"element - only one class\"","toEqual","1","target","\"target - only one class\"","tether","Tether","\".element\"","\".target\"","attachment","\"top left\"","targetAttachment","\"top right\"","classes","false","enabled","enable","\"element - classes added\"","10","not","toHaveClass","\"tether-element\"","\"tether-enabled\"","\"target - classes added\"","\"tether-target\"","destroy","\"element - destroy sets classes back to initial state\"","\"target - destroy sets classes back to initial state\""]},"operators":{"distinct":7,"total":63,"identifiers":["()",".","const","=","new","{}",":"]}},"paramCount":0,"sloc":{"logical":31,"physical":30},"errors":[],"lineEnd":160,"lineStart":131,"name":"<anon method-10>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}],"aggregateAverage":{"cyclomatic":1,"cyclomaticDensity":0.578,"halstead":{"bugs":0.145,"difficulty":2.65,"effort":12698.9,"length":69.727,"time":705.494,"vocabulary":6.909,"volume":435.651,"operands":{"distinct":6.091,"total":39.455},"operators":{"distinct":0.818,"total":30.273}},"paramCount":0,"sloc":{"logical":15.727,"physical":14.818}},"methodAverage":{"cyclomatic":1,"cyclomaticDensity":12.871,"halstead":{"bugs":0.126,"difficulty":5.6,"effort":3245.094,"length":76.3,"time":180.283,"vocabulary":22.4,"volume":377.347,"operands":{"distinct":17.6,"total":43.2},"operators":{"distinct":4.8,"total":33.1}},"paramCount":0,"sloc":{"logical":17.1,"physical":44.5}}}},{"path":"/home/gabriel/Desktop/research/projects/tether/test/unit/evented.spec.js","testCases":8,"smells":2,"smellInfo":[{"name":"Magic Number","packageName":"magicNumberRule","items":[{"frame":"  50 |       const handler = () => {};\n  51 |       testEvent.on('testOn', handler);\n> 52 |       expect(testEvent.bindings.testOn.length, '2 event listeners for testOn').toBe(2);\n     |                                                                                    ^ Magic Number\n  53 |       testEvent.off('testOn', handler);\n  54 |       expect(testEvent.bindings.testOn.length, '1 event listener for testOn').toBe(1);\n  55 |     });","start":{"line":52,"column":84,"index":1698}},{"frame":"  52 |       expect(testEvent.bindings.testOn.length, '2 event listeners for testOn').toBe(2);\n  53 |       testEvent.off('testOn', handler);\n> 54 |       expect(testEvent.bindings.testOn.length, '1 event listener for testOn').toBe(1);\n     |                                                                                   ^ Magic Number\n  55 |     });\n  56 |\n  57 |     it('does not remove uncreated events', () => {","start":{"line":54,"column":83,"index":1825}}]}],"metrics":{"aggregate":{"cyclomatic":19,"cyclomaticDensity":22.892,"halstead":{"bugs":0.566,"difficulty":11.136,"effort":18925.54,"length":272,"time":1051.419,"vocabulary":76,"volume":1699.436,"operands":{"distinct":66,"total":147,"identifiers":["describe","\"Evented\"","testEvent","testOnTriggered","beforeEach","Evented","on","\"testOn\"","true","false","\"chaining\"","it","\"allows chaining\"","chain","\"foo\"","off","trigger","expect","\"chaining returns evented reference\"","toEqual","\"on()\"","\"adds a new event binding\"","bindings","testOn","\"custom event added\"","toBeTruthy","\"trigger()\"","\"triggers a created event\"","\"true is returned from event trigger\"","\"passes arguments to handler functions\"","handlerSpy","spy","\"myEvent\"","step","id","\"test\"","text","\"A step\"","previous","null","args","\"previous\"","\"step\"","\"id\"","\"text\"","\"off()\"","\"removes a generic event binding when no handler passed\"","\"custom event removed\"","toBeUndefined","\"removes a specific event binding when handler is passed\"","handler","length","\"2 event listeners for testOn\"","toBe","2","\"1 event listener for testOn\"","1","\"does not remove uncreated events\"","\"testBlank\"","\"returns evented reference for non created events\"","\"once()\"","\"adds a new event binding that only triggers once\"","once","\"testOnce\"","testOnce","\"custom event removed after one trigger\""]},"operators":{"distinct":10,"total":125,"identifiers":["()","function=>","let","=","new",".","const","{}",":","[]"]}},"paramCount":0,"sloc":{"logical":83,"physical":70}},"settings":{"commonjs":false,"esmImportExport":{"halstead":false,"lloc":false},"forin":false,"logicalor":true,"switchcase":true,"templateExpression":{"halstead":true,"lloc":true},"trycatch":false,"newmi":false},"classes":[],"dependencies":[{"line":1,"path":"../../src/js/evented.js","type":"esm"},{"line":2,"path":"sinon","type":"esm"}],"errors":[],"lineEnd":70,"lineStart":1,"maintainability":123.504,"methods":[{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.031,"difficulty":2.167,"effort":201.953,"length":26,"time":11.22,"vocabulary":12,"volume":93.209,"operands":{"distinct":9,"total":13,"identifiers":["testEvent","testOnTriggered","beforeEach","describe","\"chaining\"","\"on()\"","\"trigger()\"","\"off()\"","\"once()\""]},"operators":{"distinct":3,"total":13,"identifiers":["let","()","function=>"]}},"paramCount":0,"sloc":{"logical":14,"physical":66},"errors":[],"lineEnd":69,"lineStart":4,"name":"<anon method-1>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.015,"difficulty":2.917,"effort":131.17,"length":13,"time":7.287,"vocabulary":11,"volume":44.973,"operands":{"distinct":6,"total":7,"identifiers":["testEvent","Evented","on","\"testOn\"","testOnTriggered","false"]},"operators":{"distinct":5,"total":6,"identifiers":["=","new","()",".","function=>"]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":11,"lineStart":7,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.002,"difficulty":0.5,"effort":2.377,"length":3,"time":0.132,"vocabulary":3,"volume":4.755,"operands":{"distinct":2,"total":2,"identifiers":["testOnTriggered","true"]},"operators":{"distinct":1,"total":1,"identifiers":["="]}},"paramCount":0,"sloc":{"logical":2,"physical":1},"errors":[],"lineEnd":9,"lineStart":9,"name":"<anon method-3>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"allows chaining\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":2,"physical":6},"errors":[],"lineEnd":18,"lineStart":13,"name":"<anon method-4>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.03,"difficulty":2.889,"effort":256.564,"length":24,"time":14.254,"vocabulary":13,"volume":88.811,"operands":{"distinct":9,"total":13,"identifiers":["chain","testEvent","on","\"foo\"","off","trigger","expect","\"chaining returns evented reference\"","toEqual"]},"operators":{"distinct":4,"total":11,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":4},"errors":[],"lineEnd":17,"lineStart":14,"name":"<anon method-5>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"adds a new event binding\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":24,"lineStart":20,"name":"<anon method-6>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.011,"difficulty":1,"effort":33,"length":11,"time":1.833,"vocabulary":8,"volume":33,"operands":{"distinct":6,"total":6,"identifiers":["expect","testEvent","bindings","testOn","\"custom event added\"","toBeTruthy"]},"operators":{"distinct":2,"total":5,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":23,"lineStart":21,"name":"<anon method-7>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"triggers a created event\"","\"passes arguments to handler functions\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":4,"physical":16},"errors":[],"lineEnd":41,"lineStart":26,"name":"<anon method-8>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.013,"difficulty":1,"effort":38.039,"length":12,"time":2.113,"vocabulary":9,"volume":38.039,"operands":{"distinct":7,"total":7,"identifiers":["testEvent","trigger","\"testOn\"","expect","testOnTriggered","\"true is returned from event trigger\"","toBeTruthy"]},"operators":{"distinct":2,"total":5,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":30,"lineStart":27,"name":"<anon method-9>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.082,"difficulty":4.725,"effort":1168.276,"length":52,"time":64.904,"vocabulary":27,"volume":247.254,"operands":{"distinct":20,"total":27,"identifiers":["handlerSpy","spy","testEvent","on","\"myEvent\"","trigger","step","id","\"test\"","text","\"A step\"","previous","null","expect","args","toEqual","\"previous\"","\"step\"","\"id\"","\"text\""]},"operators":{"distinct":7,"total":25,"identifiers":["const","=","()",".","{}",":","[]"]}},"paramCount":0,"sloc":{"logical":14,"physical":9},"errors":[],"lineEnd":40,"lineStart":32,"name":"<anon method-10>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["it","\"removes a generic event binding when no handler passed\"","\"removes a specific event binding when handler is passed\"","\"does not remove uncreated events\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":6,"physical":18},"errors":[],"lineEnd":60,"lineStart":43,"name":"<anon method-11>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.018,"difficulty":1.125,"effort":59.795,"length":16,"time":3.322,"vocabulary":10,"volume":53.151,"operands":{"distinct":8,"total":9,"identifiers":["testEvent","off","\"testOn\"","expect","bindings","testOn","\"custom event removed\"","toBeUndefined"]},"operators":{"distinct":2,"total":7,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":47,"lineStart":44,"name":"<anon method-12>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.062,"difficulty":4.464,"effort":834.414,"length":44,"time":46.356,"vocabulary":19,"volume":186.909,"operands":{"distinct":14,"total":25,"identifiers":["handler","testEvent","on","\"testOn\"","expect","bindings","testOn","length","\"2 event listeners for testOn\"","toBe","2","off","\"1 event listener for testOn\"","1"]},"operators":{"distinct":5,"total":19,"identifiers":["const","=","function=>","()","."]}},"paramCount":0,"sloc":{"logical":8,"physical":7},"errors":[],"lineEnd":55,"lineStart":49,"name":"<anon method-13>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":0,"halstead":{"bugs":0,"difficulty":0,"effort":0,"length":0,"time":0,"vocabulary":0,"volume":0,"operands":{"distinct":0,"total":0,"identifiers":[]},"operators":{"distinct":0,"total":0,"identifiers":[]}},"paramCount":0,"sloc":{"logical":0,"physical":1},"errors":[],"lineEnd":50,"lineStart":50,"name":"<anon method-14>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.012,"difficulty":1.167,"effort":42,"length":12,"time":2.333,"vocabulary":8,"volume":36,"operands":{"distinct":6,"total":7,"identifiers":["expect","testEvent","off","\"testBlank\"","\"returns evented reference for non created events\"","toEqual"]},"operators":{"distinct":2,"total":5,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":59,"lineStart":57,"name":"<anon method-15>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"adds a new event binding that only triggers once\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":2,"physical":7},"errors":[],"lineEnd":68,"lineStart":62,"name":"<anon method-16>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.026,"difficulty":2,"effort":157.738,"length":22,"time":8.763,"vocabulary":12,"volume":78.869,"operands":{"distinct":9,"total":12,"identifiers":["testEvent","once","\"testOnce\"","trigger","expect","bindings","testOnce","\"custom event removed after one trigger\"","toBeTruthy"]},"operators":{"distinct":3,"total":10,"identifiers":["()",".","function=>"]}},"paramCount":0,"sloc":{"logical":5,"physical":5},"errors":[],"lineEnd":67,"lineStart":63,"name":"<anon method-17>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0,"difficulty":0,"effort":0,"length":1,"time":0,"vocabulary":1,"volume":0,"operands":{"distinct":1,"total":1,"identifiers":["true"]},"operators":{"distinct":0,"total":0,"identifiers":[]}},"paramCount":0,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":64,"lineStart":64,"name":"<anon method-18>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}],"aggregateAverage":{"cyclomatic":1,"cyclomaticDensity":1.205,"halstead":{"bugs":0.03,"difficulty":0.586,"effort":996.081,"length":14.316,"time":55.338,"vocabulary":4,"volume":89.444,"operands":{"distinct":3.474,"total":7.737},"operators":{"distinct":0.526,"total":6.579}},"paramCount":0,"sloc":{"logical":4.368,"physical":3.684}},"methodAverage":{"cyclomatic":1,"cyclomaticDensity":32.229,"halstead":{"bugs":0.018,"difficulty":1.655,"effort":167.812,"length":14.889,"time":9.323,"vocabulary":8.667,"volume":54.365,"operands":{"distinct":6.111,"total":8.056},"operators":{"distinct":2.556,"total":6.833}},"paramCount":0,"sloc":{"logical":4.5,"physical":9.167}}}},{"path":"/home/gabriel/Desktop/research/projects/tether/test/unit/constraint.spec.js","testCases":33,"smells":46,"smellInfo":[{"name":"Duplicate Assert","packageName":"duplicateAssert","items":[{"frame":"  25 |       const scrollParentBounds = getBoundingRect(document.body, { scrollParents: [element] }, 'scrollParent');\n  26 |\n> 27 |       expect(scrollParentBounds).toHaveLength(4);\n     |      ^ Duplicate Assert\n  28 |       expect(scrollParentBounds).toEqual(expect.arrayContaining([4, 4, -4, -4]));\n  29 |     });\n  30 |","start":{"line":27,"column":6,"index":804}},{"frame":"  26 |\n  27 |       expect(scrollParentBounds).toHaveLength(4);\n> 28 |       expect(scrollParentBounds).toEqual(expect.arrayContaining([4, 4, -4, -4]));\n     |      ^ Duplicate Assert\n  29 |     });\n  30 |\n  31 |     it('return bounds from current window when constraint is window', () => {","start":{"line":28,"column":6,"index":854}},{"frame":"  32 |       const windowBounds = getBoundingRect(document.body, { scrollParents: [element] }, 'window');\n  33 |\n> 34 |       expect(windowBounds).toHaveLength(4);\n     |      ^ Duplicate Assert\n  35 |       expect(windowBounds).toEqual(expect.arrayContaining([0, 0, 1024, 768]));\n  36 |     });\n  37 |","start":{"line":34,"column":6,"index":1123}},{"frame":"  33 |\n  34 |       expect(windowBounds).toHaveLength(4);\n> 35 |       expect(windowBounds).toEqual(expect.arrayContaining([0, 0, 1024, 768]));\n     |      ^ Duplicate Assert\n  36 |     });\n  37 |\n  38 |     it('return bounds from document window when constraint is document', () => {","start":{"line":35,"column":6,"index":1167}},{"frame":"  40 |       const windowBounds = getBoundingRect(document.body, { scrollParents: [] }, document);\n  41 |\n> 42 |       expect(windowBounds).toHaveLength(4);\n     |      ^ Duplicate Assert\n  43 |       expect(windowBounds).toEqual(expect.arrayContaining([0, 0, 0, 0]));\n  44 |     });\n  45 |   });","start":{"line":42,"column":6,"index":1485}},{"frame":"  41 |\n  42 |       expect(windowBounds).toHaveLength(4);\n> 43 |       expect(windowBounds).toEqual(expect.arrayContaining([0, 0, 0, 0]));\n     |      ^ Duplicate Assert\n  44 |     });\n  45 |   });\n  46 |","start":{"line":43,"column":6,"index":1529}},{"frame":"  67 |       });\n  68 |\n> 69 |       expect(addClasses).toHaveLength(2);\n     |      ^ Duplicate Assert\n  70 |       expect(addClasses).toEqual(expect.arrayContaining(['', '-top']));\n  71 |     });\n  72 |     it('adds classes for oob prefix and options classes', () => {","start":{"line":69,"column":6,"index":2168}},{"frame":"  68 |\n  69 |       expect(addClasses).toHaveLength(2);\n> 70 |       expect(addClasses).toEqual(expect.arrayContaining(['', '-top']));\n     |      ^ Duplicate Assert\n  71 |     });\n  72 |     it('adds classes for oob prefix and options classes', () => {\n  73 |       oob.push('top');","start":{"line":70,"column":6,"index":2210}},{"frame":"  77 |       });\n  78 |\n> 79 |       expect(addClasses).toHaveLength(2);\n     |      ^ Duplicate Assert\n  80 |       expect(addClasses).toEqual(expect.arrayContaining(['added', 'added-top']));\n  81 |     });\n  82 |","start":{"line":79,"column":6,"index":2498}},{"frame":"  78 |\n  79 |       expect(addClasses).toHaveLength(2);\n> 80 |       expect(addClasses).toEqual(expect.arrayContaining(['added', 'added-top']));\n     |      ^ Duplicate Assert\n  81 |     });\n  82 |\n  83 |     it('uses extra prefix for outOfBoundsClass', () => {","start":{"line":80,"column":6,"index":2540}},{"frame":"  88 |       }, '', 'extra');\n  89 |\n> 90 |       expect(addClasses).toHaveLength(2);\n     |      ^ Duplicate Assert\n  91 |       expect(addClasses).toEqual(expect.arrayContaining(['extra', 'extra-top']));\n  92 |     });\n  93 |   });","start":{"line":90,"column":6,"index":2843}},{"frame":"  89 |\n  90 |       expect(addClasses).toHaveLength(2);\n> 91 |       expect(addClasses).toEqual(expect.arrayContaining(['extra', 'extra-top']));\n     |      ^ Duplicate Assert\n  92 |     });\n  93 |   });\n  94 |","start":{"line":91,"column":6,"index":2885}},{"frame":"  392 |       const baseClasses = _getAllClasses({}, '', []);\n  393 |\n> 394 |       expect(baseClasses).toHaveLength(10);\n      |      ^ Duplicate Assert\n  395 |       expect(baseClasses).toEqual(expect.arrayContaining(['pinned',\n  396 |         'out-of-bounds',\n  397 |         'pinned-left',","start":{"line":394,"column":6,"index":15195}},{"frame":"  393 |\n  394 |       expect(baseClasses).toHaveLength(10);\n> 395 |       expect(baseClasses).toEqual(expect.arrayContaining(['pinned',\n      |      ^ Duplicate Assert\n  396 |         'out-of-bounds',\n  397 |         'pinned-left',\n  398 |         'pinned-top',","start":{"line":395,"column":6,"index":15239}},{"frame":"  408 |       const prefixClasses = _getAllClasses({}, 'prefix', []);\n  409 |\n> 410 |       expect(prefixClasses).toHaveLength(10);\n      |      ^ Duplicate Assert\n  411 |       expect(prefixClasses).toEqual(expect.arrayContaining([\n  412 |         'prefix-pinned',\n  413 |         'prefix-out-of-bounds',","start":{"line":410,"column":6,"index":15693}},{"frame":"  409 |\n  410 |       expect(prefixClasses).toHaveLength(10);\n> 411 |       expect(prefixClasses).toEqual(expect.arrayContaining([\n      |      ^ Duplicate Assert\n  412 |         'prefix-pinned',\n  413 |         'prefix-out-of-bounds',\n  414 |         'prefix-pinned-left',","start":{"line":411,"column":6,"index":15739}},{"frame":"  427 |       }, '', []);\n  428 |\n> 429 |       expect(replaceClass).toHaveLength(10);\n      |      ^ Duplicate Assert\n  430 |       expect(replaceClass).toEqual(expect.arrayContaining([\n  431 |         'stuck',\n  432 |         'out-of-bounds',","start":{"line":429,"column":6,"index":16299}},{"frame":"  428 |\n  429 |       expect(replaceClass).toHaveLength(10);\n> 430 |       expect(replaceClass).toEqual(expect.arrayContaining([\n      |      ^ Duplicate Assert\n  431 |         'stuck',\n  432 |         'out-of-bounds',\n  433 |         'stuck-left',","start":{"line":430,"column":6,"index":16344}},{"frame":"  444 |       const constraintClasses = _getAllClasses({}, '', [{ outOfBoundsClass: 'constraintOob' }]);\n  445 |\n> 446 |       expect(constraintClasses).toHaveLength(15);\n      |      ^ Duplicate Assert\n  447 |       expect(constraintClasses).toContain('constraintOob');\n  448 |       expect(constraintClasses).toContain('constraintOob-top');\n  449 |     });","start":{"line":446,"column":6,"index":16835}},{"frame":"  445 |\n  446 |       expect(constraintClasses).toHaveLength(15);\n> 447 |       expect(constraintClasses).toContain('constraintOob');\n      |      ^ Duplicate Assert\n  448 |       expect(constraintClasses).toContain('constraintOob-top');\n  449 |     });\n  450 |   });","start":{"line":447,"column":6,"index":16885}},{"frame":"  446 |       expect(constraintClasses).toHaveLength(15);\n  447 |       expect(constraintClasses).toContain('constraintOob');\n> 448 |       expect(constraintClasses).toContain('constraintOob-top');\n      |      ^ Duplicate Assert\n  449 |     });\n  450 |   });\n  451 | });","start":{"line":448,"column":6,"index":16945}}]},{"name":"Magic Number","packageName":"magicNumberRule","items":[{"frame":"  25 |       const scrollParentBounds = getBoundingRect(document.body, { scrollParents: [element] }, 'scrollParent');\n  26 |\n> 27 |       expect(scrollParentBounds).toHaveLength(4);\n     |                                              ^ Magic Number\n  28 |       expect(scrollParentBounds).toEqual(expect.arrayContaining([4, 4, -4, -4]));\n  29 |     });\n  30 |","start":{"line":27,"column":46,"index":844}},{"frame":"  32 |       const windowBounds = getBoundingRect(document.body, { scrollParents: [element] }, 'window');\n  33 |\n> 34 |       expect(windowBounds).toHaveLength(4);\n     |                                        ^ Magic Number\n  35 |       expect(windowBounds).toEqual(expect.arrayContaining([0, 0, 1024, 768]));\n  36 |     });\n  37 |","start":{"line":34,"column":40,"index":1157}},{"frame":"  40 |       const windowBounds = getBoundingRect(document.body, { scrollParents: [] }, document);\n  41 |\n> 42 |       expect(windowBounds).toHaveLength(4);\n     |                                        ^ Magic Number\n  43 |       expect(windowBounds).toEqual(expect.arrayContaining([0, 0, 0, 0]));\n  44 |     });\n  45 |   });","start":{"line":42,"column":40,"index":1519}},{"frame":"  57 |       _addOutOfBoundsClass(oob, [], [], '', '');\n  58 |\n> 59 |       expect(oob).toHaveLength(0);\n     |                               ^ Magic Number\n  60 |     });\n  61 |\n  62 |     it('does not add a class if oob class option is false', () => {","start":{"line":59,"column":31,"index":1941}},{"frame":"  67 |       });\n  68 |\n> 69 |       expect(addClasses).toHaveLength(2);\n     |                                      ^ Magic Number\n  70 |       expect(addClasses).toEqual(expect.arrayContaining(['', '-top']));\n  71 |     });\n  72 |     it('adds classes for oob prefix and options classes', () => {","start":{"line":69,"column":38,"index":2200}},{"frame":"  77 |       });\n  78 |\n> 79 |       expect(addClasses).toHaveLength(2);\n     |                                      ^ Magic Number\n  80 |       expect(addClasses).toEqual(expect.arrayContaining(['added', 'added-top']));\n  81 |     });\n  82 |","start":{"line":79,"column":38,"index":2530}},{"frame":"  88 |       }, '', 'extra');\n  89 |\n> 90 |       expect(addClasses).toHaveLength(2);\n     |                                      ^ Magic Number\n  91 |       expect(addClasses).toEqual(expect.arrayContaining(['extra', 'extra-top']));\n  92 |     });\n  93 |   });","start":{"line":90,"column":38,"index":2875}},{"frame":"  111 |       expect(pinned.includes('left'), 'pinned does not include \"left\"').toBe(false);\n  112 |       expect(oob.includes('left'), 'oob includes \"left\"').toBe(true);\n> 113 |       expect(left, 'left remains the same').toEqual(0);\n      |                                                    ^ Magic Number\n  114 |     });\n  115 |\n  116 |     it('left < leftBound: pin left', () => {","start":{"line":113,"column":52,"index":3631}},{"frame":"  121 |       expect(pinned.includes('left'), 'pinned includes \"left\"').toBe(true);\n  122 |       expect(oob.includes('left'), 'oob does not include \"left\"').toBe(false);\n> 123 |       expect(left, 'left set to leftBound').toEqual(10);\n      |                                                    ^ Magic Number\n  124 |     });\n  125 |\n  126 |     it('left + width > rightBound', () => {","start":{"line":123,"column":52,"index":4029}},{"frame":"  131 |       expect(pinned.includes('right'), 'pinned does not include \"right\"').toBe(false);\n  132 |       expect(oob.includes('right'), 'oob includes \"right\"').toBe(true);\n> 133 |       expect(left, 'left remains the same').toEqual(0);\n      |                                                    ^ Magic Number\n  134 |     });\n  135 |\n  136 |     it('left + width > rightBound: pin right', () => {","start":{"line":133,"column":52,"index":4426}},{"frame":"  163 |       expect(pinned.includes('top'), 'pinned does not include \"top\"').toBe(false);\n  164 |       expect(oob.includes('top'), 'oob includes \"top\"').toBe(true);\n> 165 |       expect(top, 'top remains the same').toEqual(0);\n      |                                                  ^ Magic Number\n  166 |     });\n  167 |\n  168 |     it('top < topBound: pin top', () => {","start":{"line":165,"column":50,"index":5511}},{"frame":"  173 |       expect(pinned.includes('top'), 'pinned includes \"top\"').toBe(true);\n  174 |       expect(oob.includes('top'), 'oob does not include \"top\"').toBe(false);\n> 175 |       expect(top, 'top set to topBound').toEqual(10);\n      |                                                 ^ Magic Number\n  176 |     });\n  177 |\n  178 |     it('top + height > bottomBound', () => {","start":{"line":175,"column":49,"index":5897}},{"frame":"  183 |       expect(pinned.includes('bottom'), 'pinned does not include \"bottom\"').toBe(false);\n  184 |       expect(oob.includes('bottom'), 'oob includes \"bottom\"').toBe(true);\n> 185 |       expect(top, 'top remains the same').toEqual(0);\n      |                                                  ^ Magic Number\n  186 |     });\n  187 |\n  188 |     it('top + height > bottomBound: pin bottom', () => {","start":{"line":185,"column":50,"index":6296}},{"frame":"  213 |         eAttachment = { left: 'right' };\n  214 |         left = _flipXTogether(tAttachment, eAttachment, bounds, width, targetWidth, left);\n> 215 |         expect(left, 'targetWidth and width added to left').toEqual(17);\n      |                                                                    ^ Magic Number\n  216 |         expect(tAttachment.left, 'target attachment flipped to right').toBe('right');\n  217 |         expect(eAttachment.left, 'element attachment flipped to left').toBe('left');\n  218 |       });","start":{"line":215,"column":68,"index":7405}},{"frame":"  221 |         eAttachment = { left: 'left' };\n  222 |         left = _flipXTogether(tAttachment, eAttachment, bounds, width, targetWidth, left);\n> 223 |         expect(left, 'targetWidth added and width subtracted from left').toEqual(3);\n      |                                                                                 ^ Magic Number\n  224 |         expect(tAttachment.left, 'target attachment flipped to right').toBe('right');\n  225 |         expect(eAttachment.left, 'element attachment flipped to right').toBe('right');\n  226 |       });","start":{"line":223,"column":81,"index":7852}},{"frame":"  273 |         eAttachment = { left: 'right' };\n  274 |         left = _flipXTogether(tAttachment, eAttachment, bounds, width, targetWidth, left);\n> 275 |         expect(left, 'width added to left').toEqual(50);\n      |                                                    ^ Magic Number\n  276 |         expect(tAttachment.left, 'target attachment kept as center').toBe('center');\n  277 |         expect(eAttachment.left, 'element attachment flipped to left').toBe('left');\n  278 |       });","start":{"line":275,"column":52,"index":10148}},{"frame":"  296 |         let top = 0;\n  297 |         top = _flipYTogether(tAttachment, eAttachment, bounds, height, targetHeight, top);\n> 298 |         expect(top, 'targetHeight added to top').toEqual(60);\n      |                                                         ^ Magic Number\n  299 |         expect(tAttachment.top, 'target attachment flipped to bottom').toBe('bottom');\n  300 |         expect(eAttachment.top, 'element attachment flipped to top').toBe('top');\n  301 |       });","start":{"line":298,"column":57,"index":10988}},{"frame":"  309 |         let top = 0;\n  310 |         top = _flipYTogether(tAttachment, eAttachment, bounds, height, targetHeight, top);\n> 311 |         expect(top, 'targetHeight added to top').toEqual(0);\n      |                                                         ^ Magic Number\n  312 |         expect(tAttachment.top, 'target attachment kept as top').toBe('top');\n  313 |         expect(eAttachment.top, 'element attachment kept as bottom').toBe('bottom');\n  314 |       });","start":{"line":311,"column":57,"index":11635}},{"frame":"  321 |         let top = 100;\n  322 |         top = _flipYTogether(tAttachment, eAttachment, bounds, height, targetHeight, top);\n> 323 |         expect(top, 'top -= height - targetHeight').toEqual(25);\n      |                                                            ^ Magic Number\n  324 |         expect(tAttachment.top, 'target attachment flipped to bottom').toBe('bottom');\n  325 |         expect(eAttachment.top, 'element attachment kept as bottom').toBe('bottom');\n  326 |       });","start":{"line":323,"column":60,"index":12253}},{"frame":"  351 |         let top = 0;\n  352 |         top = _flipYTogether(tAttachment, eAttachment, bounds, height, targetHeight, top);\n> 353 |         expect(top, 'targetHeight added to top').toEqual(50);\n      |                                                         ^ Magic Number\n  354 |         expect(tAttachment.top, 'target attachment flipped to top').toBe('top');\n  355 |         expect(eAttachment.top, 'element attachment flipped to top').toBe('top');\n  356 |       });","start":{"line":353,"column":57,"index":13587}},{"frame":"  379 |         eAttachment = { top: 'bottom' };\n  380 |         top = _flipYTogether(tAttachment, eAttachment, bounds, height, targetHeight, top);\n> 381 |         expect(top, 'targetHeight added to top').toEqual(100);\n      |                                                         ^ Magic Number\n  382 |         expect(tAttachment.top, 'target attachment flipped to middle').toBe('middle');\n  383 |         expect(eAttachment.top, 'element attachment flipped to top').toBe('top');\n  384 |       });","start":{"line":381,"column":57,"index":14761}},{"frame":"  392 |       const baseClasses = _getAllClasses({}, '', []);\n  393 |\n> 394 |       expect(baseClasses).toHaveLength(10);\n      |                                       ^ Magic Number\n  395 |       expect(baseClasses).toEqual(expect.arrayContaining(['pinned',\n  396 |         'out-of-bounds',\n  397 |         'pinned-left',","start":{"line":394,"column":39,"index":15228}},{"frame":"  408 |       const prefixClasses = _getAllClasses({}, 'prefix', []);\n  409 |\n> 410 |       expect(prefixClasses).toHaveLength(10);\n      |                                         ^ Magic Number\n  411 |       expect(prefixClasses).toEqual(expect.arrayContaining([\n  412 |         'prefix-pinned',\n  413 |         'prefix-out-of-bounds',","start":{"line":410,"column":41,"index":15728}},{"frame":"  427 |       }, '', []);\n  428 |\n> 429 |       expect(replaceClass).toHaveLength(10);\n      |                                        ^ Magic Number\n  430 |       expect(replaceClass).toEqual(expect.arrayContaining([\n  431 |         'stuck',\n  432 |         'out-of-bounds',","start":{"line":429,"column":40,"index":16333}},{"frame":"  444 |       const constraintClasses = _getAllClasses({}, '', [{ outOfBoundsClass: 'constraintOob' }]);\n  445 |\n> 446 |       expect(constraintClasses).toHaveLength(15);\n      |                                             ^ Magic Number\n  447 |       expect(constraintClasses).toContain('constraintOob');\n  448 |       expect(constraintClasses).toContain('constraintOob-top');\n  449 |     });","start":{"line":446,"column":45,"index":16874}}]}],"metrics":{"aggregate":{"cyclomatic":59,"cyclomaticDensity":11.153,"halstead":{"bugs":5.279,"difficulty":29.601,"effort":468762.882,"length":2030,"time":26042.382,"vocabulary":223,"volume":15835.827,"operands":{"distinct":212,"total":1141,"identifiers":["describe","\"Constraint\"","\"getBoundingRect()\"","getBoundingRect","Constraint","__get__","\"getBoundingRect\"","element","beforeEach","document","createElement","\"div\"","classList","add","\"element\"","body","appendChild","afterEach","removeChild","null","it","\"returns null with no args\"","expect","toBeNull","\"return bounds from border width when constraint is scrollParent\"","style","borderWidth","\"4px\"","scrollParentBounds","scrollParents","\"scrollParent\"","toHaveLength","4","toEqual","arrayContaining","\"return bounds from current window when constraint is window\"","windowBounds","\"window\"","0","1024","768","\"return bounds from document window when constraint is document\"","documentElement","\"0\"","\"_addOutOfBoundsClass()\"","_addOutOfBoundsClass","\"_addOutOfBoundsClass\"","oob","\"adds nothing if out of bounds array is empty\"","\"\"","\"does not add a class if oob class option is false\"","push","\"top\"","addClasses","\"out-of-bounds\"","false","2","\"-top\"","\"adds classes for oob prefix and options classes\"","\"added\"","\"added-top\"","\"uses extra prefix for outOfBoundsClass\"","\"extra\"","\"extra-top\"","\"_calculateOOBAndPinnedLeft\"","_calculateOOBAndPinnedLeft","bounds","10","20","left","pinned","\"left < leftBound\"","pin","width","includes","\"left\"","\"pinned does not include \"left\"\"","toBe","\"oob includes \"left\"\"","true","\"left remains the same\"","\"left < leftBound: pin left\"","\"pinned includes \"left\"\"","\"oob does not include \"left\"\"","\"left set to leftBound\"","\"left + width > rightBound\"","100","\"right\"","\"pinned does not include \"right\"\"","\"oob includes \"right\"\"","\"left + width > rightBound: pin right\"","\"pinned includes \"right\"\"","\"oob does not include \"right\"\"","\"left set to rightBound - width\"","80","\"_calculateOOBAndPinnedTop\"","_calculateOOBAndPinnedTop","top","\"top < topBound\"","height","\"pinned does not include \"top\"\"","\"oob includes \"top\"\"","\"top remains the same\"","\"top < topBound: pin top\"","\"pinned includes \"top\"\"","\"oob does not include \"top\"\"","\"top set to topBound\"","\"top + height > bottomBound\"","\"bottom\"","\"pinned does not include \"bottom\"\"","\"oob includes \"bottom\"\"","\"top + height > bottomBound: pin bottom\"","\"pinned includes \"bottom\"\"","\"oob does not \"bottom\"\"","\"top set to bottomBound - height\"","\"_flipXTogether\"","_flipXTogether","eAttachment","targetWidth","tAttachment","\"left < leftBounds && tAttachment.left === \"left\"\"","7","\"eAttachment.left === \"right\"\"","\"targetWidth and width added to left\"","17","\"target attachment flipped to right\"","\"element attachment flipped to left\"","\"eAttachment.left === \"left\"\"","\"targetWidth added and width subtracted from left\"","3","\"element attachment flipped to right\"","\"left + width > rightBounds && tAttachment.left === \"right\"\"","50","\"targetWidth and width subtracted from left\"","150","\"target attachment flipped to left\"","\"targetWidth subtracted and width added to left\"","\"tAttachment.left === \"center\"\"","\"center\"","\"left + width > rightBounds && eAttachment.left === \"left\"\"","\"width subtracted from left\"","\"target attachment kept as center\"","\"left < leftBounds && eAttachment.left === \"right\"\"","\"width added to left\"","\"_flipYTogether\"","_flipYTogether","\"tAttachment.top === \"top\"\"","\"eAttachment.top === \"bottom\" && top < topBounds\"","75","targetHeight","\"targetHeight added to top\"","60","\"target attachment flipped to bottom\"","\"element attachment flipped to top\"","\"eAttachment.top === \"bottom\" && top < topBounds: and then hits second if too\"","\"target attachment kept as top\"","\"element attachment kept as bottom\"","\"eAttachment.top === \"top\" && top + height > bottomBounds && top - (height - targetHeight) >= topBounds\"","200","175","\"top -= height - targetHeight\"","25","\"tAttachment.top === \"bottom\"\"","\"eAttachment.top === \"top\" && top + height > bottomBounds\"","\"target attachment flipped to top\"","\"element attachment flipped to bottom\"","\"eAttachment.top === \"bottom\" && top < topBounds && top + (height * 2 - targetHeight) <= bottomBounds\"","\"tAttachment.top === \"middle\"\"","\"middle\"","\"top + height > bottomBounds && eAttachment.top === \"top\"\"","\"target attachment flipped to middle\"","\"top < topBounds && eAttachment.top === \"bottom\"\"","\"_getAllClasses\"","_getAllClasses","\"returns all the base classes when no changes passed\"","baseClasses","\"pinned\"","\"pinned-left\"","\"pinned-top\"","\"pinned-right\"","\"pinned-bottom\"","\"out-of-bounds-left\"","\"out-of-bounds-top\"","\"out-of-bounds-right\"","\"out-of-bounds-bottom\"","\"returns all the base classes with the passed prefix\"","prefixClasses","\"prefix\"","\"prefix-pinned\"","\"prefix-out-of-bounds\"","\"prefix-pinned-left\"","\"prefix-pinned-top\"","\"prefix-pinned-right\"","\"prefix-pinned-bottom\"","\"prefix-out-of-bounds-left\"","\"prefix-out-of-bounds-top\"","\"prefix-out-of-bounds-right\"","\"prefix-out-of-bounds-bottom\"","\"replaces a class when a replacement name is passed\"","replaceClass","\"stuck\"","\"stuck-left\"","\"stuck-top\"","\"stuck-right\"","\"stuck-bottom\"","\"adds a constraint class and variations for sides\"","constraintClasses","outOfBoundsClass","\"constraintOob\"","15","toContain","\"constraintOob-top\""]},"operators":{"distinct":11,"total":889,"identifiers":["()","function=>","const","=",".","let","{}",":","[]",",","- (prefix)"]}},"paramCount":0,"sloc":{"logical":529,"physical":452}},"settings":{"commonjs":false,"esmImportExport":{"halstead":false,"lloc":false},"forin":false,"logicalor":true,"switchcase":true,"templateExpression":{"halstead":true,"lloc":true},"trycatch":false,"newmi":false},"classes":[],"dependencies":[{"line":1,"path":"../../src/js/constraint.js","type":"esm"}],"errors":[],"lineEnd":452,"lineStart":1,"maintainability":104.753,"methods":[{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.031,"difficulty":1.75,"effort":162.774,"length":28,"time":9.043,"vocabulary":10,"volume":93.014,"operands":{"distinct":8,"total":14,"identifiers":["describe","\"getBoundingRect()\"","\"_addOutOfBoundsClass()\"","\"_calculateOOBAndPinnedLeft\"","\"_calculateOOBAndPinnedTop\"","\"_flipXTogether\"","\"_flipYTogether\"","\"_getAllClasses\""]},"operators":{"distinct":2,"total":14,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":14,"physical":449},"errors":[],"lineEnd":451,"lineStart":3,"name":"<anon method-1>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.044,"difficulty":3.75,"effort":500.391,"length":32,"time":27.8,"vocabulary":18,"volume":133.438,"operands":{"distinct":12,"total":15,"identifiers":["getBoundingRect","Constraint","__get__","\"getBoundingRect\"","element","beforeEach","afterEach","it","\"returns null with no args\"","\"return bounds from border width when constraint is scrollParent\"","\"return bounds from current window when constraint is window\"","\"return bounds from document window when constraint is document\""]},"operators":{"distinct":6,"total":17,"identifiers":["const","=","()",".","let","function=>"]}},"paramCount":0,"sloc":{"logical":15,"physical":42},"errors":[],"lineEnd":45,"lineStart":4,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.025,"difficulty":2,"effort":150.568,"length":21,"time":8.365,"vocabulary":12,"volume":75.284,"operands":{"distinct":9,"total":12,"identifiers":["element","document","createElement","\"div\"","classList","add","\"element\"","body","appendChild"]},"operators":{"distinct":3,"total":9,"identifiers":["=","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":12,"lineStart":8,"name":"<anon method-3>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":1.8,"effort":54,"length":10,"time":3,"vocabulary":8,"volume":30,"operands":{"distinct":5,"total":6,"identifiers":["document","body","removeChild","element","null"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","="]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":17,"lineStart":14,"name":"<anon method-4>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.005,"difficulty":1,"effort":16.253,"length":7,"time":0.903,"vocabulary":5,"volume":16.253,"operands":{"distinct":3,"total":3,"identifiers":["expect","getBoundingRect","toBeNull"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":21,"lineStart":19,"name":"<anon method-5>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.073,"difficulty":7.2,"effort":1584.563,"length":48,"time":88.031,"vocabulary":24,"volume":220.078,"operands":{"distinct":15,"total":24,"identifiers":["element","style","borderWidth","\"4px\"","scrollParentBounds","getBoundingRect","document","body","scrollParents","\"scrollParent\"","expect","toHaveLength","4","toEqual","arrayContaining"]},"operators":{"distinct":9,"total":24,"identifiers":["=",".","const","()","{}",":","[]",",","- (prefix)"]}},"paramCount":0,"sloc":{"logical":9,"physical":7},"errors":[],"lineEnd":29,"lineStart":23,"name":"<anon method-6>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.059,"difficulty":5.333,"effort":940.901,"length":39,"time":52.272,"vocabulary":23,"volume":176.419,"operands":{"distinct":15,"total":20,"identifiers":["windowBounds","getBoundingRect","document","body","scrollParents","element","\"window\"","expect","toHaveLength","4","toEqual","arrayContaining","0","1024","768"]},"operators":{"distinct":8,"total":19,"identifiers":["const","=","()",".","{}",":","[]",","]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":36,"lineStart":31,"name":"<anon method-7>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.071,"difficulty":6.4,"effort":1360.687,"length":47,"time":75.594,"vocabulary":23,"volume":212.607,"operands":{"distinct":15,"total":24,"identifiers":["document","documentElement","style","borderWidth","\"0\"","windowBounds","getBoundingRect","body","scrollParents","expect","toHaveLength","4","toEqual","arrayContaining","0"]},"operators":{"distinct":8,"total":23,"identifiers":["=",".","const","()","{}",":","[]",","]}},"paramCount":0,"sloc":{"logical":9,"physical":7},"errors":[],"lineEnd":44,"lineStart":38,"name":"<anon method-8>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.692,"halstead":{"bugs":0.04,"difficulty":3.818,"effort":452.594,"length":29,"time":25.144,"vocabulary":17,"volume":118.536,"operands":{"distinct":11,"total":14,"identifiers":["_addOutOfBoundsClass","Constraint","__get__","\"_addOutOfBoundsClass\"","oob","beforeEach","it","\"adds nothing if out of bounds array is empty\"","\"does not add a class if oob class option is false\"","\"adds classes for oob prefix and options classes\"","\"uses extra prefix for outOfBoundsClass\""]},"operators":{"distinct":6,"total":15,"identifiers":["const","=","()",".","let","function=>"]}},"paramCount":0,"sloc":{"logical":13,"physical":47},"errors":[],"lineEnd":93,"lineStart":47,"name":"<anon method-9>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0.002,"difficulty":1,"effort":4.755,"length":3,"time":0.264,"vocabulary":3,"volume":4.755,"operands":{"distinct":1,"total":1,"identifiers":["oob"]},"operators":{"distinct":2,"total":2,"identifiers":["=","[]"]}},"paramCount":0,"sloc":{"logical":1,"physical":3},"errors":[],"lineEnd":53,"lineStart":51,"name":"<anon method-10>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.015,"difficulty":2,"effort":88.758,"length":14,"time":4.931,"vocabulary":9,"volume":44.379,"operands":{"distinct":6,"total":8,"identifiers":["_addOutOfBoundsClass","oob","\"\"","expect","toHaveLength","0"]},"operators":{"distinct":3,"total":6,"identifiers":["()","[]","."]}},"paramCount":0,"sloc":{"logical":3,"physical":5},"errors":[],"lineEnd":60,"lineStart":56,"name":"<anon method-11>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.056,"difficulty":5.714,"effort":968.334,"length":38,"time":53.796,"vocabulary":22,"volume":169.458,"operands":{"distinct":14,"total":20,"identifiers":["oob","push","\"top\"","addClasses","_addOutOfBoundsClass","\"out-of-bounds\"","false","expect","toHaveLength","2","toEqual","arrayContaining","\"\"","\"-top\""]},"operators":{"distinct":8,"total":18,"identifiers":["()",".","const","=","[]","{}",":",","]}},"paramCount":0,"sloc":{"logical":9,"physical":10},"errors":[],"lineEnd":71,"lineStart":62,"name":"<anon method-12>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.056,"difficulty":6.154,"effort":1027.127,"length":38,"time":57.063,"vocabulary":21,"volume":166.908,"operands":{"distinct":13,"total":20,"identifiers":["oob","push","\"top\"","addClasses","_addOutOfBoundsClass","\"out-of-bounds\"","\"added\"","expect","toHaveLength","2","toEqual","arrayContaining","\"added-top\""]},"operators":{"distinct":8,"total":18,"identifiers":["()",".","const","=","[]","{}",":",","]}},"paramCount":0,"sloc":{"logical":9,"physical":10},"errors":[],"lineEnd":81,"lineStart":72,"name":"<anon method-13>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.06,"difficulty":5.867,"effort":1061.529,"length":40,"time":58.974,"vocabulary":23,"volume":180.942,"operands":{"distinct":15,"total":22,"identifiers":["oob","push","\"top\"","addClasses","_addOutOfBoundsClass","\"out-of-bounds\"","\"added\"","\"\"","\"extra\"","expect","toHaveLength","2","toEqual","arrayContaining","\"extra-top\""]},"operators":{"distinct":8,"total":18,"identifiers":["()",".","const","=","[]","{}",":",","]}},"paramCount":0,"sloc":{"logical":9,"physical":10},"errors":[],"lineEnd":92,"lineStart":83,"name":"<anon method-14>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.064,"difficulty":5.25,"effort":1010.984,"length":42,"time":56.166,"vocabulary":24,"volume":192.568,"operands":{"distinct":16,"total":21,"identifiers":["_calculateOOBAndPinnedLeft","Constraint","__get__","\"_calculateOOBAndPinnedLeft\"","bounds","10","20","left","oob","pinned","beforeEach","it","\"left < leftBound\"","\"left < leftBound: pin left\"","\"left + width > rightBound\"","\"left + width > rightBound: pin right\""]},"operators":{"distinct":8,"total":21,"identifiers":["const","=","()",".","[]",",","let","function=>"]}},"paramCount":0,"sloc":{"logical":16,"physical":51},"errors":[],"lineEnd":145,"lineStart":95,"name":"<anon method-15>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.008,"difficulty":1,"effort":23.265,"length":9,"time":1.292,"vocabulary":6,"volume":23.265,"operands":{"distinct":4,"total":4,"identifiers":["left","0","oob","pinned"]},"operators":{"distinct":2,"total":5,"identifiers":["=","[]"]}},"paramCount":0,"sloc":{"logical":3,"physical":5},"errors":[],"lineEnd":104,"lineStart":100,"name":"<anon method-16>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.076,"difficulty":3.947,"effort":904.927,"length":50,"time":50.274,"vocabulary":24,"volume":229.248,"operands":{"distinct":19,"total":30,"identifiers":["pin","width","10","left","_calculateOOBAndPinnedLeft","bounds","pinned","oob","expect","includes","\"left\"","\"pinned does not include \"left\"\"","toBe","false","\"oob includes \"left\"\"","true","\"left remains the same\"","toEqual","0"]},"operators":{"distinct":5,"total":20,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":12,"physical":9},"errors":[],"lineEnd":114,"lineStart":106,"name":"<anon method-17>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.077,"difficulty":4.306,"effort":993.299,"length":51,"time":55.183,"vocabulary":23,"volume":230.702,"operands":{"distinct":18,"total":31,"identifiers":["pin","\"left\"","width","10","left","_calculateOOBAndPinnedLeft","bounds","pinned","oob","expect","includes","\"pinned includes \"left\"\"","toBe","true","\"oob does not include \"left\"\"","false","\"left set to leftBound\"","toEqual"]},"operators":{"distinct":5,"total":20,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":12,"physical":9},"errors":[],"lineEnd":124,"lineStart":116,"name":"<anon method-18>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.076,"difficulty":3.947,"effort":904.927,"length":50,"time":50.274,"vocabulary":24,"volume":229.248,"operands":{"distinct":19,"total":30,"identifiers":["pin","width","100","left","_calculateOOBAndPinnedLeft","bounds","pinned","oob","expect","includes","\"right\"","\"pinned does not include \"right\"\"","toBe","false","\"oob includes \"right\"\"","true","\"left remains the same\"","toEqual","0"]},"operators":{"distinct":5,"total":20,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":12,"physical":9},"errors":[],"lineEnd":134,"lineStart":126,"name":"<anon method-19>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.08,"difficulty":4.895,"effort":1181.984,"length":52,"time":65.666,"vocabulary":25,"volume":241.481,"operands":{"distinct":19,"total":31,"identifiers":["pin","\"right\"","width","100","left","_calculateOOBAndPinnedLeft","bounds","pinned","oob","expect","includes","\"pinned includes \"right\"\"","toBe","true","\"oob does not include \"right\"\"","false","\"left set to rightBound - width\"","toEqual","80"]},"operators":{"distinct":6,"total":21,"identifiers":["const","=","[]","()",".","- (prefix)"]}},"paramCount":0,"sloc":{"logical":12,"physical":9},"errors":[],"lineEnd":144,"lineStart":136,"name":"<anon method-20>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.064,"difficulty":5.25,"effort":1010.984,"length":42,"time":56.166,"vocabulary":24,"volume":192.568,"operands":{"distinct":16,"total":21,"identifiers":["_calculateOOBAndPinnedTop","Constraint","__get__","\"_calculateOOBAndPinnedTop\"","bounds","10","20","oob","pinned","top","beforeEach","it","\"top < topBound\"","\"top < topBound: pin top\"","\"top + height > bottomBound\"","\"top + height > bottomBound: pin bottom\""]},"operators":{"distinct":8,"total":21,"identifiers":["const","=","()",".","[]",",","let","function=>"]}},"paramCount":0,"sloc":{"logical":16,"physical":51},"errors":[],"lineEnd":197,"lineStart":147,"name":"<anon method-21>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.008,"difficulty":1,"effort":23.265,"length":9,"time":1.292,"vocabulary":6,"volume":23.265,"operands":{"distinct":4,"total":4,"identifiers":["top","0","oob","pinned"]},"operators":{"distinct":2,"total":5,"identifiers":["=","[]"]}},"paramCount":0,"sloc":{"logical":3,"physical":5},"errors":[],"lineEnd":156,"lineStart":152,"name":"<anon method-22>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.076,"difficulty":3.947,"effort":904.927,"length":50,"time":50.274,"vocabulary":24,"volume":229.248,"operands":{"distinct":19,"total":30,"identifiers":["pin","height","10","top","_calculateOOBAndPinnedTop","bounds","pinned","oob","expect","includes","\"top\"","\"pinned does not include \"top\"\"","toBe","false","\"oob includes \"top\"\"","true","\"top remains the same\"","toEqual","0"]},"operators":{"distinct":5,"total":20,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":12,"physical":9},"errors":[],"lineEnd":166,"lineStart":158,"name":"<anon method-23>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.077,"difficulty":4.306,"effort":993.299,"length":51,"time":55.183,"vocabulary":23,"volume":230.702,"operands":{"distinct":18,"total":31,"identifiers":["pin","\"top\"","height","10","top","_calculateOOBAndPinnedTop","bounds","pinned","oob","expect","includes","\"pinned includes \"top\"\"","toBe","true","\"oob does not include \"top\"\"","false","\"top set to topBound\"","toEqual"]},"operators":{"distinct":5,"total":20,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":12,"physical":9},"errors":[],"lineEnd":176,"lineStart":168,"name":"<anon method-24>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.076,"difficulty":3.947,"effort":904.927,"length":50,"time":50.274,"vocabulary":24,"volume":229.248,"operands":{"distinct":19,"total":30,"identifiers":["pin","height","100","top","_calculateOOBAndPinnedTop","bounds","pinned","oob","expect","includes","\"bottom\"","\"pinned does not include \"bottom\"\"","toBe","false","\"oob includes \"bottom\"\"","true","\"top remains the same\"","toEqual","0"]},"operators":{"distinct":5,"total":20,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":12,"physical":9},"errors":[],"lineEnd":186,"lineStart":178,"name":"<anon method-25>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.08,"difficulty":4.895,"effort":1181.984,"length":52,"time":65.666,"vocabulary":25,"volume":241.481,"operands":{"distinct":19,"total":31,"identifiers":["pin","\"bottom\"","height","100","top","_calculateOOBAndPinnedTop","bounds","pinned","oob","expect","includes","\"pinned includes \"bottom\"\"","toBe","true","\"oob does not \"bottom\"\"","false","\"top set to bottomBound - height\"","toEqual","80"]},"operators":{"distinct":6,"total":21,"identifiers":["const","=","[]","()",".","- (prefix)"]}},"paramCount":0,"sloc":{"logical":12,"physical":9},"errors":[],"lineEnd":196,"lineStart":188,"name":"<anon method-26>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.039,"difficulty":3.429,"effort":400.087,"length":27,"time":22.227,"vocabulary":20,"volume":116.692,"operands":{"distinct":14,"total":16,"identifiers":["_flipXTogether","Constraint","__get__","\"_flipXTogether\"","bounds","eAttachment","left","targetWidth","tAttachment","width","describe","\"left < leftBounds && tAttachment.left === \"left\"\"","\"left + width > rightBounds && tAttachment.left === \"right\"\"","\"tAttachment.left === \"center\"\""]},"operators":{"distinct":6,"total":11,"identifiers":["const","=","()",".","let","function=>"]}},"paramCount":0,"sloc":{"logical":14,"physical":82},"errors":[],"lineEnd":280,"lineStart":199,"name":"<anon method-27>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.009,"difficulty":1.25,"effort":35.543,"length":11,"time":1.975,"vocabulary":6,"volume":28.435,"operands":{"distinct":4,"total":5,"identifiers":["beforeEach","it","\"eAttachment.left === \"right\"\"","\"eAttachment.left === \"left\"\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":6,"physical":25},"errors":[],"lineEnd":227,"lineStart":203,"name":"<anon method-28>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.033,"difficulty":3.5,"effort":341.853,"length":25,"time":18.992,"vocabulary":15,"volume":97.672,"operands":{"distinct":10,"total":14,"identifiers":["bounds","10","20","left","0","tAttachment","\"left\"","targetWidth","width","7"]},"operators":{"distinct":5,"total":11,"identifiers":["=","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":6,"physical":7},"errors":[],"lineEnd":210,"lineStart":204,"name":"<anon method-29>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.064,"difficulty":4.375,"effort":845.521,"length":44,"time":46.973,"vocabulary":21,"volume":193.262,"operands":{"distinct":16,"total":28,"identifiers":["eAttachment","left","\"right\"","_flipXTogether","tAttachment","bounds","width","targetWidth","expect","\"targetWidth and width added to left\"","toEqual","17","\"target attachment flipped to right\"","toBe","\"element attachment flipped to left\"","\"left\""]},"operators":{"distinct":5,"total":16,"identifiers":["=","{}",":","()","."]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":218,"lineStart":212,"name":"<anon method-30>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.064,"difficulty":4.375,"effort":845.521,"length":44,"time":46.973,"vocabulary":21,"volume":193.262,"operands":{"distinct":16,"total":28,"identifiers":["eAttachment","left","\"left\"","_flipXTogether","tAttachment","bounds","width","targetWidth","expect","\"targetWidth added and width subtracted from left\"","toEqual","3","\"target attachment flipped to right\"","toBe","\"right\"","\"element attachment flipped to right\""]},"operators":{"distinct":5,"total":16,"identifiers":["=","{}",":","()","."]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":226,"lineStart":220,"name":"<anon method-31>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.009,"difficulty":1.25,"effort":35.543,"length":11,"time":1.975,"vocabulary":6,"volume":28.435,"operands":{"distinct":4,"total":5,"identifiers":["beforeEach","it","\"eAttachment.left === \"left\"\"","\"eAttachment.left === \"right\"\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":6,"physical":25},"errors":[],"lineEnd":253,"lineStart":229,"name":"<anon method-32>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.033,"difficulty":3.182,"effort":318.182,"length":25,"time":17.677,"vocabulary":16,"volume":100,"operands":{"distinct":11,"total":14,"identifiers":["bounds","10","20","left","0","tAttachment","\"right\"","targetWidth","100","width","50"]},"operators":{"distinct":5,"total":11,"identifiers":["=","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":6,"physical":7},"errors":[],"lineEnd":236,"lineStart":230,"name":"<anon method-33>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.067,"difficulty":5.25,"effort":1053.541,"length":45,"time":58.53,"vocabulary":22,"volume":200.674,"operands":{"distinct":16,"total":28,"identifiers":["eAttachment","left","\"left\"","_flipXTogether","tAttachment","bounds","width","targetWidth","expect","\"targetWidth and width subtracted from left\"","toEqual","150","\"target attachment flipped to left\"","toBe","\"element attachment flipped to right\"","\"right\""]},"operators":{"distinct":6,"total":17,"identifiers":["=","{}",":","()",".","- (prefix)"]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":244,"lineStart":238,"name":"<anon method-34>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.067,"difficulty":5.25,"effort":1053.541,"length":45,"time":58.53,"vocabulary":22,"volume":200.674,"operands":{"distinct":16,"total":28,"identifiers":["eAttachment","left","\"right\"","_flipXTogether","tAttachment","bounds","width","targetWidth","expect","\"targetWidth subtracted and width added to left\"","toEqual","50","\"target attachment flipped to left\"","toBe","\"left\"","\"element attachment flipped to left\""]},"operators":{"distinct":6,"total":17,"identifiers":["=","{}",":","()",".","- (prefix)"]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":252,"lineStart":246,"name":"<anon method-35>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.009,"difficulty":1.25,"effort":35.543,"length":11,"time":1.975,"vocabulary":6,"volume":28.435,"operands":{"distinct":4,"total":5,"identifiers":["beforeEach","it","\"left + width > rightBounds && eAttachment.left === \"left\"\"","\"left < leftBounds && eAttachment.left === \"right\"\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":6,"physical":25},"errors":[],"lineEnd":279,"lineStart":255,"name":"<anon method-36>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.033,"difficulty":3.182,"effort":318.182,"length":25,"time":17.677,"vocabulary":16,"volume":100,"operands":{"distinct":11,"total":14,"identifiers":["bounds","10","20","left","0","tAttachment","\"center\"","targetWidth","100","width","50"]},"operators":{"distinct":5,"total":11,"identifiers":["=","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":6,"physical":7},"errors":[],"lineEnd":262,"lineStart":256,"name":"<anon method-37>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.068,"difficulty":4.941,"effort":1005.827,"length":45,"time":55.879,"vocabulary":23,"volume":203.56,"operands":{"distinct":17,"total":28,"identifiers":["eAttachment","left","\"left\"","_flipXTogether","tAttachment","bounds","width","targetWidth","expect","\"width subtracted from left\"","toEqual","50","\"target attachment kept as center\"","toBe","\"center\"","\"element attachment flipped to right\"","\"right\""]},"operators":{"distinct":6,"total":17,"identifiers":["=","{}",":","()",".","- (prefix)"]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":270,"lineStart":264,"name":"<anon method-38>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.065,"difficulty":4.118,"effort":807.944,"length":44,"time":44.886,"vocabulary":22,"volume":196.215,"operands":{"distinct":17,"total":28,"identifiers":["eAttachment","left","\"right\"","_flipXTogether","tAttachment","bounds","width","targetWidth","expect","\"width added to left\"","toEqual","50","\"target attachment kept as center\"","toBe","\"center\"","\"element attachment flipped to left\"","\"left\""]},"operators":{"distinct":5,"total":16,"identifiers":["=","{}",":","()","."]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":278,"lineStart":272,"name":"<anon method-39>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.031,"difficulty":3.6,"effort":331.2,"length":23,"time":18.4,"vocabulary":16,"volume":92,"operands":{"distinct":10,"total":12,"identifiers":["_flipYTogether","Constraint","__get__","\"_flipYTogether\"","eAttachment","tAttachment","describe","\"tAttachment.top === \"top\"\"","\"tAttachment.top === \"bottom\"\"","\"tAttachment.top === \"middle\"\""]},"operators":{"distinct":6,"total":11,"identifiers":["const","=","()",".","let","function=>"]}},"paramCount":0,"sloc":{"logical":10,"physical":105},"errors":[],"lineEnd":386,"lineStart":282,"name":"<anon method-40>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.014,"difficulty":1.4,"effort":58.954,"length":15,"time":3.275,"vocabulary":7,"volume":42.11,"operands":{"distinct":5,"total":7,"identifiers":["beforeEach","it","\"eAttachment.top === \"bottom\" && top < topBounds\"","\"eAttachment.top === \"bottom\" && top < topBounds: and then hits second if too\"","\"eAttachment.top === \"top\" && top + height > bottomBounds && top - (height - targetHeight) >= topBounds\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":8,"physical":42},"errors":[],"lineEnd":327,"lineStart":286,"name":"<anon method-41>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["tAttachment","top","\"top\""]},"operators":{"distinct":3,"total":3,"identifiers":["=","{}",":"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":289,"lineStart":287,"name":"<anon method-42>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.108,"difficulty":8.775,"effort":2856.128,"length":67,"time":158.674,"vocabulary":29,"volume":325.485,"operands":{"distinct":20,"total":39,"identifiers":["eAttachment","top","\"bottom\"","bounds","10","75","height","targetHeight","50","0","_flipYTogether","tAttachment","expect","\"targetHeight added to top\"","toEqual","60","\"target attachment flipped to bottom\"","toBe","\"element attachment flipped to top\"","\"top\""]},"operators":{"distinct":9,"total":28,"identifiers":["=","{}",":","const","[]",",","let","()","."]}},"paramCount":0,"sloc":{"logical":14,"physical":11},"errors":[],"lineEnd":301,"lineStart":291,"name":"<anon method-43>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.107,"difficulty":9.237,"effort":2975.12,"length":67,"time":165.284,"vocabulary":28,"volume":322.093,"operands":{"distinct":19,"total":39,"identifiers":["eAttachment","top","\"bottom\"","bounds","10","20","height","targetHeight","50","0","_flipYTogether","tAttachment","expect","\"targetHeight added to top\"","toEqual","\"target attachment kept as top\"","toBe","\"top\"","\"element attachment kept as bottom\""]},"operators":{"distinct":9,"total":28,"identifiers":["=","{}",":","const","[]",",","let","()","."]}},"paramCount":0,"sloc":{"logical":14,"physical":11},"errors":[],"lineEnd":314,"lineStart":304,"name":"<anon method-44>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.108,"difficulty":8.775,"effort":2856.128,"length":67,"time":158.674,"vocabulary":29,"volume":325.485,"operands":{"distinct":20,"total":39,"identifiers":["eAttachment","top","\"top\"","bounds","10","200","height","175","targetHeight","100","_flipYTogether","tAttachment","expect","\"top -= height - targetHeight\"","toEqual","25","\"target attachment flipped to bottom\"","toBe","\"bottom\"","\"element attachment kept as bottom\""]},"operators":{"distinct":9,"total":28,"identifiers":["=","{}",":","const","[]",",","let","()","."]}},"paramCount":0,"sloc":{"logical":14,"physical":11},"errors":[],"lineEnd":326,"lineStart":316,"name":"<anon method-45>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.009,"difficulty":1.25,"effort":35.543,"length":11,"time":1.975,"vocabulary":6,"volume":28.435,"operands":{"distinct":4,"total":5,"identifiers":["beforeEach","it","\"eAttachment.top === \"top\" && top + height > bottomBounds\"","\"eAttachment.top === \"bottom\" && top < topBounds && top + (height * 2 - targetHeight) <= bottomBounds\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":6,"physical":29},"errors":[],"lineEnd":357,"lineStart":329,"name":"<anon method-46>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["tAttachment","top","\"bottom\""]},"operators":{"distinct":3,"total":3,"identifiers":["=","{}",":"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":332,"lineStart":330,"name":"<anon method-47>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.112,"difficulty":9.286,"effort":3128.221,"length":68,"time":173.79,"vocabulary":31,"volume":336.885,"operands":{"distinct":21,"total":39,"identifiers":["eAttachment","top","\"top\"","bounds","10","75","height","100","targetHeight","50","0","_flipYTogether","tAttachment","expect","\"targetHeight added to top\"","toEqual","150","\"target attachment flipped to top\"","toBe","\"element attachment flipped to bottom\"","\"bottom\""]},"operators":{"distinct":10,"total":29,"identifiers":["=","{}",":","const","[]",",","let","()",".","- (prefix)"]}},"paramCount":0,"sloc":{"logical":14,"physical":11},"errors":[],"lineEnd":344,"lineStart":334,"name":"<anon method-48>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.108,"difficulty":8.775,"effort":2856.128,"length":67,"time":158.674,"vocabulary":29,"volume":325.485,"operands":{"distinct":20,"total":39,"identifiers":["eAttachment","top","\"bottom\"","bounds","10","200","height","100","targetHeight","50","0","_flipYTogether","tAttachment","expect","\"targetHeight added to top\"","toEqual","\"target attachment flipped to top\"","toBe","\"top\"","\"element attachment flipped to top\""]},"operators":{"distinct":9,"total":28,"identifiers":["=","{}",":","const","[]",",","let","()","."]}},"paramCount":0,"sloc":{"logical":14,"physical":11},"errors":[],"lineEnd":356,"lineStart":346,"name":"<anon method-49>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.018,"difficulty":1.688,"effort":93.405,"length":16,"time":5.189,"vocabulary":11,"volume":55.351,"operands":{"distinct":8,"total":9,"identifiers":["bounds","height","targetHeight","top","beforeEach","it","\"top + height > bottomBounds && eAttachment.top === \"top\"\"","\"top < topBounds && eAttachment.top === \"bottom\"\""]},"operators":{"distinct":3,"total":7,"identifiers":["let","()","function=>"]}},"paramCount":0,"sloc":{"logical":10,"physical":27},"errors":[],"lineEnd":385,"lineStart":359,"name":"<anon method-50>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.033,"difficulty":3.182,"effort":318.182,"length":25,"time":17.677,"vocabulary":16,"volume":100,"operands":{"distinct":11,"total":14,"identifiers":["bounds","10","75","height","100","targetHeight","50","top","0","tAttachment","\"middle\""]},"operators":{"distinct":5,"total":11,"identifiers":["=","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":6,"physical":7},"errors":[],"lineEnd":368,"lineStart":362,"name":"<anon method-51>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.068,"difficulty":4.941,"effort":1005.827,"length":45,"time":55.879,"vocabulary":23,"volume":203.56,"operands":{"distinct":17,"total":28,"identifiers":["eAttachment","top","\"top\"","_flipYTogether","tAttachment","bounds","height","targetHeight","expect","\"targetHeight added to top\"","toEqual","100","\"target attachment flipped to middle\"","toBe","\"middle\"","\"element attachment kept as bottom\"","\"bottom\""]},"operators":{"distinct":6,"total":17,"identifiers":["=","{}",":","()",".","- (prefix)"]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":376,"lineStart":370,"name":"<anon method-52>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.065,"difficulty":4.118,"effort":807.944,"length":44,"time":44.886,"vocabulary":22,"volume":196.215,"operands":{"distinct":17,"total":28,"identifiers":["eAttachment","top","\"bottom\"","_flipYTogether","tAttachment","bounds","height","targetHeight","expect","\"targetHeight added to top\"","toEqual","100","\"target attachment flipped to middle\"","toBe","\"middle\"","\"element attachment flipped to top\"","\"top\""]},"operators":{"distinct":5,"total":16,"identifiers":["=","{}",":","()","."]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":384,"lineStart":378,"name":"<anon method-53>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.03,"difficulty":3.333,"effort":304.588,"length":24,"time":16.922,"vocabulary":14,"volume":91.377,"operands":{"distinct":9,"total":12,"identifiers":["_getAllClasses","Constraint","__get__","\"_getAllClasses\"","it","\"returns all the base classes when no changes passed\"","\"returns all the base classes with the passed prefix\"","\"replaces a class when a replacement name is passed\"","\"adds a constraint class and variations for sides\""]},"operators":{"distinct":5,"total":12,"identifiers":["const","=","()",".","function=>"]}},"paramCount":0,"sloc":{"logical":10,"physical":63},"errors":[],"lineEnd":450,"lineStart":388,"name":"<anon method-54>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.07,"difficulty":4.278,"effort":893.942,"length":45,"time":49.663,"vocabulary":25,"volume":208.974,"operands":{"distinct":18,"total":22,"identifiers":["baseClasses","_getAllClasses","\"\"","expect","toHaveLength","10","toEqual","arrayContaining","\"pinned\"","\"out-of-bounds\"","\"pinned-left\"","\"pinned-top\"","\"pinned-right\"","\"pinned-bottom\"","\"out-of-bounds-left\"","\"out-of-bounds-top\"","\"out-of-bounds-right\"","\"out-of-bounds-bottom\""]},"operators":{"distinct":7,"total":23,"identifiers":["const","=","()","{}","[]",".",","]}},"paramCount":0,"sloc":{"logical":7,"physical":15},"errors":[],"lineEnd":405,"lineStart":391,"name":"<anon method-55>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.07,"difficulty":4.278,"effort":893.942,"length":45,"time":49.663,"vocabulary":25,"volume":208.974,"operands":{"distinct":18,"total":22,"identifiers":["prefixClasses","_getAllClasses","\"prefix\"","expect","toHaveLength","10","toEqual","arrayContaining","\"prefix-pinned\"","\"prefix-out-of-bounds\"","\"prefix-pinned-left\"","\"prefix-pinned-top\"","\"prefix-pinned-right\"","\"prefix-pinned-bottom\"","\"prefix-out-of-bounds-left\"","\"prefix-out-of-bounds-top\"","\"prefix-out-of-bounds-right\"","\"prefix-out-of-bounds-bottom\""]},"operators":{"distinct":7,"total":23,"identifiers":["const","=","()","{}","[]",".",","]}},"paramCount":0,"sloc":{"logical":7,"physical":16},"errors":[],"lineEnd":422,"lineStart":407,"name":"<anon method-56>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.076,"difficulty":5.053,"effort":1153.185,"length":48,"time":64.066,"vocabulary":27,"volume":228.235,"operands":{"distinct":19,"total":24,"identifiers":["replaceClass","_getAllClasses","\"pinned\"","\"stuck\"","\"\"","expect","toHaveLength","10","toEqual","arrayContaining","\"out-of-bounds\"","\"stuck-left\"","\"stuck-top\"","\"stuck-right\"","\"stuck-bottom\"","\"out-of-bounds-left\"","\"out-of-bounds-top\"","\"out-of-bounds-right\"","\"out-of-bounds-bottom\""]},"operators":{"distinct":8,"total":24,"identifiers":["const","=","()","{}",":","[]",".",","]}},"paramCount":0,"sloc":{"logical":8,"physical":18},"errors":[],"lineEnd":441,"lineStart":424,"name":"<anon method-57>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.045,"difficulty":5.95,"effort":802.573,"length":33,"time":44.587,"vocabulary":17,"volume":134.886,"operands":{"distinct":10,"total":17,"identifiers":["constraintClasses","_getAllClasses","\"\"","outOfBoundsClass","\"constraintOob\"","expect","toHaveLength","15","toContain","\"constraintOob-top\""]},"operators":{"distinct":7,"total":16,"identifiers":["const","=","()","{}","[]",":","."]}},"paramCount":0,"sloc":{"logical":9,"physical":7},"errors":[],"lineEnd":449,"lineStart":443,"name":"<anon method-58>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}],"aggregateAverage":{"cyclomatic":1,"cyclomaticDensity":0.189,"halstead":{"bugs":0.089,"difficulty":0.502,"effort":7945.134,"length":34.407,"time":441.396,"vocabulary":3.78,"volume":268.404,"operands":{"distinct":3.593,"total":19.339},"operators":{"distinct":0.186,"total":15.068}},"paramCount":0,"sloc":{"logical":8.966,"physical":7.661}},"methodAverage":{"cyclomatic":1,"cyclomaticDensity":15.999,"halstead":{"bugs":0.051,"difficulty":4.082,"effort":809.075,"length":34.931,"time":44.949,"vocabulary":18.155,"volume":153.086,"operands":{"distinct":12.759,"total":19.638},"operators":{"distinct":5.397,"total":15.293}},"paramCount":0,"sloc":{"logical":9.086,"physical":24.414}}}},{"path":"/home/gabriel/Desktop/research/projects/tether/test/unit/utils/offset.spec.js","testCases":12,"smells":9,"smellInfo":[{"name":"Lazy Test","packageName":"lazyTest","items":[{"frame":"  12 |   describe('attachmentToOffset', () => {\n  13 |     it('top left', () => {\n> 14 |       expect(attachmentToOffset({ left: 'left', top: 'top' })).toStrictEqual({ left: 0, top: 0 });\n     |             ^ Lazy Test\n  15 |     });\n  16 |\n  17 |     it('middle center', () => {","start":{"line":14,"column":13,"index":502}},{"frame":"  16 |\n  17 |     it('middle center', () => {\n> 18 |       expect(attachmentToOffset({ left: 'center', top: 'middle' })).toStrictEqual({ left: '50%', top: '50%' });\n     |             ^ Lazy Test\n  19 |     });\n  20 |\n  21 |     it('bottom right', () => {","start":{"line":18,"column":13,"index":642}},{"frame":"  20 |\n  21 |     it('bottom right', () => {\n> 22 |       expect(attachmentToOffset({ left: 'right', top: 'bottom' })).toStrictEqual({ left: '100%', top: '100%' });\n     |             ^ Lazy Test\n  23 |     });\n  24 |   });\n  25 |","start":{"line":22,"column":13,"index":794}},{"frame":"  26 |   describe('autoToFixedAttachment', () => {\n  27 |     it('mirror left', () => {\n> 28 |       expect(autoToFixedAttachment(\n     |             ^ Lazy Test\n  29 |         { left: 'auto', top: 'top' },\n  30 |         { left: 'left', top: 'top' }\n  31 |       )).toStrictEqual({ left: 'right', top: 'top' });","start":{"line":28,"column":13,"index":996}},{"frame":"  34 |     describe('when left is auto and top is top', () => {\n  35 |       it('returns center for left and top remains top', () => {\n> 36 |       expect(autoToFixedAttachment(\n     |             ^ Lazy Test\n  37 |         { left: 'auto', top: 'top' },\n  38 |         { left: 'center', top: 'top' }\n  39 |       )).toStrictEqual({ left: 'center', top: 'top' });","start":{"line":36,"column":13,"index":1292}},{"frame":"  42 |\n  43 |     it('mirror right', () => {\n> 44 |       expect(autoToFixedAttachment(\n     |             ^ Lazy Test\n  45 |         { left: 'auto', top: 'top' },\n  46 |         { left: 'right', top: 'top' }\n  47 |       )).toStrictEqual({ left: 'left', top: 'top' });","start":{"line":44,"column":13,"index":1511}},{"frame":"  49 |\n  50 |     it('mirror top', () => {\n> 51 |       expect(autoToFixedAttachment(\n     |             ^ Lazy Test\n  52 |         { left: 'left', top: 'auto' },\n  53 |         { left: 'left', top: 'top' }\n  54 |       )).toStrictEqual({ left: 'left', top: 'bottom' });","start":{"line":51,"column":13,"index":1715}},{"frame":"  56 |\n  57 |     it('mirror middle', () => {\n> 58 |       expect(autoToFixedAttachment(\n     |             ^ Lazy Test\n  59 |         { left: 'left', top: 'auto' },\n  60 |         { left: 'left', top: 'middle' }\n  61 |       )).toStrictEqual({ left: 'left', top: 'middle' });","start":{"line":58,"column":13,"index":1925}},{"frame":"  63 |\n  64 |     it('mirror bottom', () => {\n> 65 |       expect(autoToFixedAttachment(\n     |             ^ Lazy Test\n  66 |         { left: 'left', top: 'auto' },\n  67 |         { left: 'left', top: 'bottom' }\n  68 |       )).toStrictEqual({ left: 'left', top: 'top' });","start":{"line":65,"column":13,"index":2138}}]}],"metrics":{"aggregate":{"cyclomatic":20,"cyclomaticDensity":14.286,"halstead":{"bugs":0.797,"difficulty":12.075,"effort":28859.723,"length":394,"time":1603.318,"vocabulary":67,"volume":2390.039,"operands":{"distinct":60,"total":207,"identifiers":["describe","\"Utils - offset\"","\"addOffset\"","it","\"offsets added together\"","offset1","top","20","left","50","offset2","15","10","expect","addOffset","toStrictEqual","60","35","\"attachmentToOffset\"","\"top left\"","attachmentToOffset","\"left\"","\"top\"","0","\"middle center\"","\"center\"","\"middle\"","\"50%\"","\"bottom right\"","\"right\"","\"bottom\"","\"100%\"","\"autoToFixedAttachment\"","\"mirror left\"","autoToFixedAttachment","\"auto\"","\"when left is auto and top is top\"","\"returns center for left and top remains top\"","\"mirror right\"","\"mirror top\"","\"mirror middle\"","\"mirror bottom\"","\"offsetToPx\"","\"calculates px from %\"","offset","\"30%\"","\"20%\"","size","height","1000","width","offsetToPx","300","200","\"parseTopLeft\"","\"splits string to get top/left\"","parseTopLeft","\"50 100\"","\"100\"","\"50\""]},"operators":{"distinct":7,"total":187,"identifiers":["()","function=>","const","=","{}",":","."]}},"paramCount":0,"sloc":{"logical":140,"physical":86}},"settings":{"commonjs":false,"esmImportExport":{"halstead":false,"lloc":false},"forin":false,"logicalor":true,"switchcase":true,"templateExpression":{"halstead":true,"lloc":true},"trycatch":false,"newmi":false},"classes":[],"dependencies":[{"line":1,"path":"../../../src/js/utils/offset","type":"esm"}],"errors":[],"lineEnd":86,"lineStart":1,"maintainability":114.598,"methods":[{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.02,"difficulty":1.667,"effort":100,"length":20,"time":5.556,"vocabulary":8,"volume":60,"operands":{"distinct":6,"total":10,"identifiers":["describe","\"addOffset\"","\"attachmentToOffset\"","\"autoToFixedAttachment\"","\"offsetToPx\"","\"parseTopLeft\""]},"operators":{"distinct":2,"total":10,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":10,"physical":83},"errors":[],"lineEnd":85,"lineStart":3,"name":"<anon method-1>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"offsets added together\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":2,"physical":7},"errors":[],"lineEnd":10,"lineStart":4,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":9.091,"halstead":{"bugs":0.051,"difficulty":4.385,"effort":670.519,"length":36,"time":37.251,"vocabulary":19,"volume":152.925,"operands":{"distinct":13,"total":19,"identifiers":["offset1","top","20","left","50","offset2","15","10","expect","addOffset","toStrictEqual","60","35"]},"operators":{"distinct":6,"total":17,"identifiers":["const","=","{}",":","()","."]}},"paramCount":0,"sloc":{"logical":11,"physical":5},"errors":[],"lineEnd":9,"lineStart":5,"name":"<anon method-3>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["it","\"top left\"","\"middle center\"","\"bottom right\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":6,"physical":13},"errors":[],"lineEnd":24,"lineStart":12,"name":"<anon method-4>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.025,"difficulty":2.75,"effort":207.032,"length":21,"time":11.502,"vocabulary":12,"volume":75.284,"operands":{"distinct":8,"total":11,"identifiers":["expect","attachmentToOffset","left","\"left\"","top","\"top\"","toStrictEqual","0"]},"operators":{"distinct":4,"total":10,"identifiers":["()",".","{}",":"]}},"paramCount":0,"sloc":{"logical":7,"physical":3},"errors":[],"lineEnd":15,"lineStart":13,"name":"<anon method-5>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.025,"difficulty":2.75,"effort":207.032,"length":21,"time":11.502,"vocabulary":12,"volume":75.284,"operands":{"distinct":8,"total":11,"identifiers":["expect","attachmentToOffset","left","\"center\"","top","\"middle\"","toStrictEqual","\"50%\""]},"operators":{"distinct":4,"total":10,"identifiers":["()",".","{}",":"]}},"paramCount":0,"sloc":{"logical":7,"physical":3},"errors":[],"lineEnd":19,"lineStart":17,"name":"<anon method-6>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.025,"difficulty":2.75,"effort":207.032,"length":21,"time":11.502,"vocabulary":12,"volume":75.284,"operands":{"distinct":8,"total":11,"identifiers":["expect","attachmentToOffset","left","\"right\"","top","\"bottom\"","toStrictEqual","\"100%\""]},"operators":{"distinct":4,"total":10,"identifiers":["()",".","{}",":"]}},"paramCount":0,"sloc":{"logical":7,"physical":3},"errors":[],"lineEnd":23,"lineStart":21,"name":"<anon method-7>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.027,"difficulty":1.5,"effort":119.589,"length":24,"time":6.644,"vocabulary":10,"volume":79.726,"operands":{"distinct":8,"total":12,"identifiers":["it","\"mirror left\"","describe","\"when left is auto and top is top\"","\"mirror right\"","\"mirror top\"","\"mirror middle\"","\"mirror bottom\""]},"operators":{"distinct":2,"total":12,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":12,"physical":45},"errors":[],"lineEnd":70,"lineStart":26,"name":"<anon method-8>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.035,"difficulty":3.333,"effort":345.374,"length":28,"time":19.187,"vocabulary":13,"volume":103.612,"operands":{"distinct":9,"total":15,"identifiers":["expect","autoToFixedAttachment","left","\"auto\"","top","\"top\"","\"left\"","toStrictEqual","\"right\""]},"operators":{"distinct":4,"total":13,"identifiers":["()",".","{}",":"]}},"paramCount":0,"sloc":{"logical":9,"physical":6},"errors":[],"lineEnd":32,"lineStart":27,"name":"<anon method-9>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"returns center for left and top remains top\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":2,"physical":8},"errors":[],"lineEnd":41,"lineStart":34,"name":"<anon method-10>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.033,"difficulty":3.75,"effort":376.421,"length":28,"time":20.912,"vocabulary":12,"volume":100.379,"operands":{"distinct":8,"total":15,"identifiers":["expect","autoToFixedAttachment","left","\"auto\"","top","\"top\"","\"center\"","toStrictEqual"]},"operators":{"distinct":4,"total":13,"identifiers":["()",".","{}",":"]}},"paramCount":0,"sloc":{"logical":9,"physical":6},"errors":[],"lineEnd":40,"lineStart":35,"name":"<anon method-11>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.035,"difficulty":3.333,"effort":345.374,"length":28,"time":19.187,"vocabulary":13,"volume":103.612,"operands":{"distinct":9,"total":15,"identifiers":["expect","autoToFixedAttachment","left","\"auto\"","top","\"top\"","\"right\"","toStrictEqual","\"left\""]},"operators":{"distinct":4,"total":13,"identifiers":["()",".","{}",":"]}},"paramCount":0,"sloc":{"logical":9,"physical":6},"errors":[],"lineEnd":48,"lineStart":43,"name":"<anon method-12>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.035,"difficulty":3.333,"effort":345.374,"length":28,"time":19.187,"vocabulary":13,"volume":103.612,"operands":{"distinct":9,"total":15,"identifiers":["expect","autoToFixedAttachment","left","\"left\"","top","\"auto\"","\"top\"","toStrictEqual","\"bottom\""]},"operators":{"distinct":4,"total":13,"identifiers":["()",".","{}",":"]}},"paramCount":0,"sloc":{"logical":9,"physical":6},"errors":[],"lineEnd":55,"lineStart":50,"name":"<anon method-13>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.033,"difficulty":3.75,"effort":376.421,"length":28,"time":20.912,"vocabulary":12,"volume":100.379,"operands":{"distinct":8,"total":15,"identifiers":["expect","autoToFixedAttachment","left","\"left\"","top","\"auto\"","\"middle\"","toStrictEqual"]},"operators":{"distinct":4,"total":13,"identifiers":["()",".","{}",":"]}},"paramCount":0,"sloc":{"logical":9,"physical":6},"errors":[],"lineEnd":62,"lineStart":57,"name":"<anon method-14>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.035,"difficulty":3.333,"effort":345.374,"length":28,"time":19.187,"vocabulary":13,"volume":103.612,"operands":{"distinct":9,"total":15,"identifiers":["expect","autoToFixedAttachment","left","\"left\"","top","\"auto\"","\"bottom\"","toStrictEqual","\"top\""]},"operators":{"distinct":4,"total":13,"identifiers":["()",".","{}",":"]}},"paramCount":0,"sloc":{"logical":9,"physical":6},"errors":[],"lineEnd":69,"lineStart":64,"name":"<anon method-15>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"calculates px from %\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":2,"physical":7},"errors":[],"lineEnd":78,"lineStart":72,"name":"<anon method-16>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":9.091,"halstead":{"bugs":0.052,"difficulty":4.071,"effort":633.471,"length":36,"time":35.193,"vocabulary":20,"volume":155.589,"operands":{"distinct":14,"total":19,"identifiers":["offset","left","\"30%\"","top","\"20%\"","size","height","1000","width","expect","offsetToPx","toStrictEqual","300","200"]},"operators":{"distinct":6,"total":17,"identifiers":["const","=","{}",":","()","."]}},"paramCount":0,"sloc":{"logical":11,"physical":5},"errors":[],"lineEnd":77,"lineStart":73,"name":"<anon method-17>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"splits string to get top/left\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":84,"lineStart":80,"name":"<anon method-18>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.018,"difficulty":2,"effort":107.549,"length":15,"time":5.975,"vocabulary":12,"volume":53.774,"operands":{"distinct":8,"total":8,"identifiers":["expect","parseTopLeft","\"50 100\"","toStrictEqual","left","\"100\"","top","\"50\""]},"operators":{"distinct":4,"total":7,"identifiers":["()",".","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":3},"errors":[],"lineEnd":83,"lineStart":81,"name":"<anon method-19>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}],"aggregateAverage":{"cyclomatic":1,"cyclomaticDensity":0.714,"halstead":{"bugs":0.04,"difficulty":0.604,"effort":1442.986,"length":19.7,"time":80.166,"vocabulary":3.35,"volume":119.502,"operands":{"distinct":3,"total":10.35},"operators":{"distinct":0.35,"total":9.35}},"paramCount":0,"sloc":{"logical":7,"physical":4.3}},"methodAverage":{"cyclomatic":1,"cyclomaticDensity":20.142,"halstead":{"bugs":0.025,"difficulty":2.537,"effort":235.005,"length":20.526,"time":13.056,"vocabulary":10.684,"volume":74.005,"operands":{"distinct":7.211,"total":10.789},"operators":{"distinct":3.474,"total":9.737}},"paramCount":0,"sloc":{"logical":7.263,"physical":11.895}}}},{"path":"/home/gabriel/Desktop/research/projects/tether/test/unit/utils/deferred.spec.js","testCases":1,"smells":7,"smellInfo":[{"name":"Duplicate Assert","packageName":"duplicateAssert","items":[{"frame":"   9 |       defer(stub1);\n  10 |       defer(stub2);\n> 11 |       expect(stub1.called).toBe(false);\n     |      ^ Duplicate Assert\n  12 |       expect(stub2.called).toBe(false);\n  13 |       flush();\n  14 |       expect(stub1.called).toBe(true);","start":{"line":11,"column":6,"index":331}},{"frame":"  10 |       defer(stub2);\n  11 |       expect(stub1.called).toBe(false);\n> 12 |       expect(stub2.called).toBe(false);\n     |      ^ Duplicate Assert\n  13 |       flush();\n  14 |       expect(stub1.called).toBe(true);\n  15 |       expect(stub2.called).toBe(true);","start":{"line":12,"column":6,"index":371}},{"frame":"  12 |       expect(stub2.called).toBe(false);\n  13 |       flush();\n> 14 |       expect(stub1.called).toBe(true);\n     |      ^ Duplicate Assert\n  15 |       expect(stub2.called).toBe(true);\n  16 |     });\n  17 |   });","start":{"line":14,"column":6,"index":426}},{"frame":"  13 |       flush();\n  14 |       expect(stub1.called).toBe(true);\n> 15 |       expect(stub2.called).toBe(true);\n     |      ^ Duplicate Assert\n  16 |     });\n  17 |   });\n  18 | });","start":{"line":15,"column":6,"index":465}}]},{"name":"Eager Test","packageName":"eagerTest","items":[{"frame":"   7 |       const stub1 = stub();\n   8 |       const stub2 = stub();\n>  9 |       defer(stub1);\n     |      ^ Eager Test\n  10 |       defer(stub2);\n  11 |       expect(stub1.called).toBe(false);\n  12 |       expect(stub2.called).toBe(false);","start":{"line":9,"column":6,"index":291}},{"frame":"   8 |       const stub2 = stub();\n   9 |       defer(stub1);\n> 10 |       defer(stub2);\n     |      ^ Eager Test\n  11 |       expect(stub1.called).toBe(false);\n  12 |       expect(stub2.called).toBe(false);\n  13 |       flush();","start":{"line":10,"column":6,"index":311}},{"frame":"  11 |       expect(stub1.called).toBe(false);\n  12 |       expect(stub2.called).toBe(false);\n> 13 |       flush();\n     |      ^ Eager Test\n  14 |       expect(stub1.called).toBe(true);\n  15 |       expect(stub2.called).toBe(true);\n  16 |     });","start":{"line":13,"column":6,"index":411}}]}],"metrics":{"aggregate":{"cyclomatic":4,"cyclomaticDensity":19.048,"halstead":{"bugs":0.095,"difficulty":5.833,"effort":1663.942,"length":66,"time":92.441,"vocabulary":20,"volume":285.247,"operands":{"distinct":15,"total":35,"identifiers":["describe","\"Utils - deferred\"","\"defer/flush\"","it","\"calls deferred functions when flush is called\"","stub1","stub","stub2","defer","expect","called","toBe","false","flush","true"]},"operators":{"distinct":5,"total":31,"identifiers":["()","function=>","const","=","."]}},"paramCount":0,"sloc":{"logical":21,"physical":19}},"settings":{"commonjs":false,"esmImportExport":{"halstead":false,"lloc":false},"forin":false,"logicalor":true,"switchcase":true,"templateExpression":{"halstead":true,"lloc":true},"trycatch":false,"newmi":false},"classes":[],"dependencies":[{"line":1,"path":"../../../src/js/utils/deferred","type":"esm"},{"line":2,"path":"sinon","type":"esm"}],"errors":[],"lineEnd":19,"lineStart":1,"maintainability":123.512,"methods":[{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["describe","\"defer/flush\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":2,"physical":15},"errors":[],"lineEnd":18,"lineStart":4,"name":"<anon method-1>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"calls deferred functions when flush is called\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":2,"physical":13},"errors":[],"lineEnd":17,"lineStart":5,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.069,"difficulty":5.8,"effort":1192.464,"length":54,"time":66.248,"vocabulary":14,"volume":205.597,"operands":{"distinct":10,"total":29,"identifiers":["stub1","stub","stub2","defer","expect","called","toBe","false","flush","true"]},"operators":{"distinct":4,"total":25,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":15,"physical":11},"errors":[],"lineEnd":16,"lineStart":6,"name":"<anon method-3>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}],"aggregateAverage":{"cyclomatic":1,"cyclomaticDensity":4.762,"halstead":{"bugs":0.024,"difficulty":1.458,"effort":415.986,"length":16.5,"time":23.11,"vocabulary":5,"volume":71.312,"operands":{"distinct":3.75,"total":8.75},"operators":{"distinct":1.25,"total":7.75}},"paramCount":0,"sloc":{"logical":5.25,"physical":4.75}},"methodAverage":{"cyclomatic":1,"cyclomaticDensity":35.556,"halstead":{"bugs":0.025,"difficulty":2.6,"effort":402.821,"length":20.667,"time":22.379,"vocabulary":7.333,"volume":73.866,"operands":{"distinct":4.667,"total":11},"operators":{"distinct":2.667,"total":9.667}},"paramCount":0,"sloc":{"logical":6.333,"physical":13}}}},{"path":"/home/gabriel/Desktop/research/projects/tether/test/unit/utils/classes.spec.js","testCases":7,"smells":15,"smellInfo":[{"name":"Duplicate Assert","packageName":"duplicateAssert","items":[{"frame":"  11 |       expect(element.classList.length, 'classes added').toEqual(3);\n  12 |       expect(element.classList.contains('foo'), 'has foo class').toBe(true);\n> 13 |       expect(element.classList.contains('bar'), 'has bar class').toBe(true);\n     |      ^ Duplicate Assert\n  14 |       expect(element.classList.contains('baz'), 'has baz class').toBe(true);\n  15 |\n  16 |       removeClass(element, 'foo baz');","start":{"line":13,"column":6,"index":524}},{"frame":"  11 |       expect(element.classList.length, 'classes added').toEqual(3);\n  12 |       expect(element.classList.contains('foo'), 'has foo class').toBe(true);\n> 13 |       expect(element.classList.contains('bar'), 'has bar class').toBe(true);\n     |      ^ Duplicate Assert\n  14 |       expect(element.classList.contains('baz'), 'has baz class').toBe(true);\n  15 |\n  16 |       removeClass(element, 'foo baz');","start":{"line":13,"column":6,"index":524}},{"frame":"  18 |       expect(element.classList.length, 'classes removed').toEqual(1);\n  19 |       expect(element.classList.contains('foo'), 'does not have foo class').toBe(false);\n> 20 |       expect(element.classList.contains('bar'), 'has bar class').toBe(true);\n     |      ^ Duplicate Assert\n  21 |       expect(element.classList.contains('baz'), 'does not have baz class').toBe(false);\n  22 |     });\n  23 |   });","start":{"line":20,"column":6,"index":877}},{"frame":"  18 |       expect(element.classList.length, 'classes removed').toEqual(1);\n  19 |       expect(element.classList.contains('foo'), 'does not have foo class').toBe(false);\n> 20 |       expect(element.classList.contains('bar'), 'has bar class').toBe(true);\n     |      ^ Duplicate Assert\n  21 |       expect(element.classList.contains('baz'), 'does not have baz class').toBe(false);\n  22 |     });\n  23 |   });","start":{"line":20,"column":6,"index":877}}]},{"name":"Eager Test","packageName":"eagerTest","items":[{"frame":"   7 |       expect(element.classList.length, 'no classes').toEqual(0);\n   8 |\n>  9 |       addClass(element, 'foo bar baz');\n     |      ^ Eager Test\n  10 |\n  11 |       expect(element.classList.length, 'classes added').toEqual(3);\n  12 |       expect(element.classList.contains('foo'), 'has foo class').toBe(true);","start":{"line":9,"column":6,"index":338}},{"frame":"  14 |       expect(element.classList.contains('baz'), 'has baz class').toBe(true);\n  15 |\n> 16 |       removeClass(element, 'foo baz');\n     |      ^ Eager Test\n  17 |\n  18 |       expect(element.classList.length, 'classes removed').toEqual(1);\n  19 |       expect(element.classList.contains('foo'), 'does not have foo class').toBe(false);","start":{"line":16,"column":6,"index":679}}]},{"name":"Lazy Test","packageName":"lazyTest","items":[{"frame":"  25 |   describe('getClass', () => {\n  26 |     it('returns the key if no other args passed', () => {\n> 27 |       const keyClass = getClass('justKey');\n     |                       ^ Lazy Test\n  28 |\n  29 |       expect(keyClass).toBe('justKey');\n  30 |     });","start":{"line":27,"column":23,"index":1163}},{"frame":"  32 |     it('returns the key as the class, if no class by key', () => {\n  33 |       const classes = { noKey: 'aClassKey' };\n> 34 |       const keyClass = getClass('justKey', classes);\n     |                       ^ Lazy Test\n  35 |\n  36 |       expect(keyClass).toBe('justKey');\n  37 |     });","start":{"line":34,"column":23,"index":1370}},{"frame":"  39 |     it('returns the existing declared class by key', () => {\n  40 |       const classes = { justKey: 'aClassKey' };\n> 41 |       const keyClass = getClass('justKey', classes);\n     |                       ^ Lazy Test\n  42 |\n  43 |       expect(keyClass).toBe('aClassKey');\n  44 |     });","start":{"line":41,"column":23,"index":1582}},{"frame":"  46 |     it('returns the value if classes has the key as a truthy value', () => {\n  47 |       const classes = { justKey: 'otherValue' };\n> 48 |       const keyClass = getClass('justKey', classes);\n     |                       ^ Lazy Test\n  49 |\n  50 |       expect(keyClass).toBe('otherValue');\n  51 |     });","start":{"line":48,"column":23,"index":1813}},{"frame":"  53 |     it('returns the empty string if classes has the key as a boolean false', () => {\n  54 |       const classes = { justKey: false };\n> 55 |       const keyClass = getClass('justKey', classes);\n     |                       ^ Lazy Test\n  56 |\n  57 |       expect(keyClass).toBe('');\n  58 |     });","start":{"line":55,"column":23,"index":2046}},{"frame":"  59 |\n  60 |     it('returns the key with a classPrefix if no classes value for the key', () => {\n> 61 |       const keyClass = getClass('justKey', {}, 'testPrefix');\n     |                       ^ Lazy Test\n  62 |\n  63 |       expect(keyClass).toBe('testPrefix-justKey');\n  64 |     });","start":{"line":61,"column":23,"index":2227}}]},{"name":"Magic Number","packageName":"magicNumberRule","items":[{"frame":"   5 |     it('adds/removes classes from element', () => {\n   6 |       const element = document.createElement('div');\n>  7 |       expect(element.classList.length, 'no classes').toEqual(0);\n     |                                                             ^ Magic Number\n   8 |\n   9 |       addClass(element, 'foo bar baz');\n  10 |","start":{"line":7,"column":61,"index":327}},{"frame":"   9 |       addClass(element, 'foo bar baz');\n  10 |\n> 11 |       expect(element.classList.length, 'classes added').toEqual(3);\n     |                                                                ^ Magic Number\n  12 |       expect(element.classList.contains('foo'), 'has foo class').toBe(true);\n  13 |       expect(element.classList.contains('bar'), 'has bar class').toBe(true);\n  14 |       expect(element.classList.contains('baz'), 'has baz class').toBe(true);","start":{"line":11,"column":64,"index":437}},{"frame":"  16 |       removeClass(element, 'foo baz');\n  17 |\n> 18 |       expect(element.classList.length, 'classes removed').toEqual(1);\n     |                                                                  ^ Magic Number\n  19 |       expect(element.classList.contains('foo'), 'does not have foo class').toBe(false);\n  20 |       expect(element.classList.contains('bar'), 'has bar class').toBe(true);\n  21 |       expect(element.classList.contains('baz'), 'does not have baz class').toBe(false);","start":{"line":18,"column":66,"index":779}}]}],"metrics":{"aggregate":{"cyclomatic":11,"cyclomaticDensity":13.75,"halstead":{"bugs":0.567,"difficulty":10.434,"effort":17750.095,"length":288,"time":986.116,"vocabulary":60,"volume":1701.184,"operands":{"distinct":53,"total":158,"identifiers":["describe","\"Utils - classes\"","\"addClass/removeClass\"","it","\"adds/removes classes from element\"","element","document","createElement","\"div\"","expect","classList","length","\"no classes\"","toEqual","0","addClass","\"foo bar baz\"","\"classes added\"","3","contains","\"foo\"","\"has foo class\"","toBe","true","\"bar\"","\"has bar class\"","\"baz\"","\"has baz class\"","removeClass","\"foo baz\"","\"classes removed\"","1","\"does not have foo class\"","false","\"does not have baz class\"","\"getClass\"","\"returns the key if no other args passed\"","keyClass","getClass","\"justKey\"","\"returns the key as the class, if no class by key\"","classes","noKey","\"aClassKey\"","\"returns the existing declared class by key\"","justKey","\"returns the value if classes has the key as a truthy value\"","\"otherValue\"","\"returns the empty string if classes has the key as a boolean false\"","\"\"","\"returns the key with a classPrefix if no classes value for the key\"","\"testPrefix\"","\"testPrefix-justKey\""]},"operators":{"distinct":7,"total":130,"identifiers":["()","function=>","const","=",".","{}",":"]}},"paramCount":0,"sloc":{"logical":80,"physical":67}},"settings":{"commonjs":false,"esmImportExport":{"halstead":false,"lloc":false},"forin":false,"logicalor":true,"switchcase":true,"templateExpression":{"halstead":true,"lloc":true},"trycatch":false,"newmi":false},"classes":[],"dependencies":[{"line":1,"path":"../../../src/js/utils/classes","type":"esm"}],"errors":[],"lineEnd":67,"lineStart":1,"maintainability":113.596,"methods":[{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["describe","\"addClass/removeClass\"","\"getClass\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":4,"physical":64},"errors":[],"lineEnd":66,"lineStart":3,"name":"<anon method-1>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"adds/removes classes from element\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":2,"physical":20},"errors":[],"lineEnd":23,"lineStart":4,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.571,"halstead":{"bugs":0.231,"difficulty":5.267,"effort":3643.98,"length":136,"time":202.443,"vocabulary":34,"volume":691.895,"operands":{"distinct":30,"total":79,"identifiers":["element","document","createElement","\"div\"","expect","classList","length","\"no classes\"","toEqual","0","addClass","\"foo bar baz\"","\"classes added\"","3","contains","\"foo\"","\"has foo class\"","toBe","true","\"bar\"","\"has bar class\"","\"baz\"","\"has baz class\"","removeClass","\"foo baz\"","\"classes removed\"","1","\"does not have foo class\"","false","\"does not have baz class\""]},"operators":{"distinct":4,"total":57,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":28,"physical":18},"errors":[],"lineEnd":22,"lineStart":5,"name":"<anon method-3>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.025,"difficulty":1.714,"effort":130.42,"length":24,"time":7.246,"vocabulary":9,"volume":76.078,"operands":{"distinct":7,"total":12,"identifiers":["it","\"returns the key if no other args passed\"","\"returns the key as the class, if no class by key\"","\"returns the existing declared class by key\"","\"returns the value if classes has the key as a truthy value\"","\"returns the empty string if classes has the key as a boolean false\"","\"returns the key with a classPrefix if no classes value for the key\""]},"operators":{"distinct":2,"total":12,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":12,"physical":41},"errors":[],"lineEnd":65,"lineStart":25,"name":"<anon method-4>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.014,"difficulty":2.8,"effort":115.385,"length":13,"time":6.41,"vocabulary":9,"volume":41.209,"operands":{"distinct":5,"total":7,"identifiers":["keyClass","getClass","\"justKey\"","expect","toBe"]},"operators":{"distinct":4,"total":6,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":30,"lineStart":26,"name":"<anon method-5>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.027,"difficulty":4.125,"effort":329.812,"length":21,"time":18.323,"vocabulary":14,"volume":79.954,"operands":{"distinct":8,"total":11,"identifiers":["classes","noKey","\"aClassKey\"","keyClass","getClass","\"justKey\"","expect","toBe"]},"operators":{"distinct":6,"total":10,"identifiers":["const","=","{}",":","()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":37,"lineStart":32,"name":"<anon method-6>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.027,"difficulty":4.125,"effort":329.812,"length":21,"time":18.323,"vocabulary":14,"volume":79.954,"operands":{"distinct":8,"total":11,"identifiers":["classes","justKey","\"aClassKey\"","keyClass","getClass","\"justKey\"","expect","toBe"]},"operators":{"distinct":6,"total":10,"identifiers":["const","=","{}",":","()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":44,"lineStart":39,"name":"<anon method-7>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.027,"difficulty":4.125,"effort":329.812,"length":21,"time":18.323,"vocabulary":14,"volume":79.954,"operands":{"distinct":8,"total":11,"identifiers":["classes","justKey","\"otherValue\"","keyClass","getClass","\"justKey\"","expect","toBe"]},"operators":{"distinct":6,"total":10,"identifiers":["const","=","{}",":","()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":51,"lineStart":46,"name":"<anon method-8>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.027,"difficulty":3.667,"effort":300.831,"length":21,"time":16.713,"vocabulary":15,"volume":82.045,"operands":{"distinct":9,"total":11,"identifiers":["classes","justKey","false","keyClass","getClass","\"justKey\"","expect","toBe","\"\""]},"operators":{"distinct":6,"total":10,"identifiers":["const","=","{}",":","()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":58,"lineStart":53,"name":"<anon method-9>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.018,"difficulty":2.857,"effort":153.641,"length":15,"time":8.536,"vocabulary":12,"volume":53.774,"operands":{"distinct":7,"total":8,"identifiers":["keyClass","getClass","\"justKey\"","\"testPrefix\"","expect","toBe","\"testPrefix-justKey\""]},"operators":{"distinct":5,"total":7,"identifiers":["const","=","()","{}","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":64,"lineStart":60,"name":"<anon method-10>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}],"aggregateAverage":{"cyclomatic":1,"cyclomaticDensity":1.25,"halstead":{"bugs":0.052,"difficulty":0.949,"effort":1613.645,"length":26.182,"time":89.647,"vocabulary":5.455,"volume":154.653,"operands":{"distinct":4.818,"total":14.364},"operators":{"distinct":0.636,"total":11.818}},"paramCount":0,"sloc":{"logical":7.273,"physical":6.091}},"methodAverage":{"cyclomatic":1,"cyclomaticDensity":20.357,"halstead":{"bugs":0.04,"difficulty":3.101,"effort":536.646,"length":28.4,"time":29.814,"vocabulary":13,"volume":121.144,"operands":{"distinct":8.7,"total":15.6},"operators":{"distinct":4.3,"total":12.8}},"paramCount":0,"sloc":{"logical":7.8,"physical":17.7}}}}]}