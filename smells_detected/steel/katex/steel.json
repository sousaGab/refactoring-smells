{"project":"steel","version":"","testSuites":8,"testCases":670,"smelledTestSuites":7,"smelledTestCases":0,"smells":679,"smelledFiles":[{"path":"/home/gabriel/Desktop/research/projects/katex/test/unicode-spec.js","testCases":25,"smells":33,"smellInfo":[{"name":"Conditional Test Logic","packageName":"conditionalTestLogic","items":[{"frame":"  18 |     it(\"should not parse Latin-1 outside \\\\text{} with strict\", function() {\n  19 |         const chars = 'ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ';\n> 20 |         for (const ch of chars) {\n     |        ^ Conditional Test Logic\n  21 |             expect(ch).not.toParse(strictSettings);\n  22 |         }\n  23 |     });","start":{"line":20,"column":8,"index":1016}},{"frame":"  142 |\n  143 |     it(\"supportedCodepoint() should return the correct values\", () => {\n> 144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {\n      |        ^ Conditional Test Logic\n  145 |             expect(supportedCodepoint(codepoint)).toBe(\n  146 |                 allRegExp.test(String.fromCharCode(codepoint))\n  147 |             );","start":{"line":144,"column":8,"index":5144}},{"frame":"  150 |\n  151 |     it(\"scriptFromCodepoint() should return correct values\", () => {\n> 152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {\n      |               ^ Conditional Test Logic\n  153 |             const character = String.fromCharCode(codepoint);\n  154 |             const script = scriptFromCodepoint(codepoint);\n  155 |","start":{"line":152,"column":15,"index":5441}},{"frame":"  154 |             const script = scriptFromCodepoint(codepoint);\n  155 |\n> 156 |             for (const scriptName of scriptNames) {\n      |            ^ Conditional Test Logic\n  157 |                 if (scriptRegExps[scriptName].test(character)) {\n  158 |                     expect(script).toEqual(scriptName);\n  159 |                     continue outer;","start":{"line":156,"column":12,"index":5635}},{"frame":"  155 |\n  156 |             for (const scriptName of scriptNames) {\n> 157 |                 if (scriptRegExps[scriptName].test(character)) {\n      |                ^ Conditional Test Logic\n  158 |                     expect(script).toEqual(scriptName);\n  159 |                     continue outer;\n  160 |                 }","start":{"line":157,"column":16,"index":5691}}]},{"name":"Duplicate Assert","packageName":"duplicateAssert","items":[{"frame":"  156 |             for (const scriptName of scriptNames) {\n  157 |                 if (scriptRegExps[scriptName].test(character)) {\n> 158 |                     expect(script).toEqual(scriptName);\n      |                    ^ Duplicate Assert\n  159 |                     continue outer;\n  160 |                 }\n  161 |             }","start":{"line":158,"column":20,"index":5760}},{"frame":"  161 |             }\n  162 |\n> 163 |             expect(script).toBe(null);\n      |            ^ Duplicate Assert\n  164 |             expect(supportedCodepoint(codepoint)).toBe(false);\n  165 |         }\n  166 |     });","start":{"line":163,"column":12,"index":5877}}]},{"name":"Eager Test","packageName":"eagerTest","items":[{"frame":"  152 |         outer: for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {\n  153 |             const character = String.fromCharCode(codepoint);\n> 154 |             const script = scriptFromCodepoint(codepoint);\n      |                           ^ Eager Test\n  155 |\n  156 |             for (const scriptName of scriptNames) {\n  157 |                 if (scriptRegExps[scriptName].test(character)) {","start":{"line":154,"column":27,"index":5590}},{"frame":"  162 |\n  163 |             expect(script).toBe(null);\n> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);\n      |                   ^ Eager Test\n  165 |         }\n  166 |     });\n  167 | });","start":{"line":164,"column":19,"index":5923}}]},{"name":"Lazy Test","packageName":"lazyTest","items":[{"frame":"  143 |     it(\"supportedCodepoint() should return the correct values\", () => {\n  144 |         for (let codepoint = 0; codepoint <= 0xffff; codepoint++) {\n> 145 |             expect(supportedCodepoint(codepoint)).toBe(\n      |                   ^ Lazy Test\n  146 |                 allRegExp.test(String.fromCharCode(codepoint))\n  147 |             );\n  148 |         }","start":{"line":145,"column":19,"index":5223}},{"frame":"  162 |\n  163 |             expect(script).toBe(null);\n> 164 |             expect(supportedCodepoint(codepoint)).toBe(false);\n      |                   ^ Lazy Test\n  165 |         }\n  166 |     });\n  167 | });","start":{"line":164,"column":19,"index":5923}}]},{"name":"Unknown Test","packageName":"unknownTest","items":[{"frame":"   5 |\n   6 | describe(\"unicode\", function() {\n>  7 |     it(\"should build Latin-1 inside \\\\text{}\", function() {\n     |    ^ Unknown Test\n   8 |         expect`\\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}`\n   9 |             .toBuild();\n  10 |     });","start":{"column":4,"line":7}},{"frame":"  10 |     });\n  11 |\n> 12 |     it(\"should build Latin-1 inside \\\\text{} like accent commands\", function() {\n     |    ^ Unknown Test\n  13 |         expect`\\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}`\n  14 |             .toParseLike`\\text{\\`A\\'A\\^A\\~A\\\"A\\r A\\`E\\'E\\^E\\\"E\\`I\\'I\\^I\\\"I\\~N\\`O\\'O\\^O\\~O\\\"O\\`U\\'U\\^U\\\"U\\'Y\\`a\\'a\\^a\\~a\\\"a\\r a\\`e\\'e\\^e\\\"e\\`ı\\'ı\\^ı\\\"ı\\~n\\`o\\'o\\^o\\~o\\\"o\\`u\\'u\\^u\\\"u\\'y\\\"y\\c C\\c c}`;\n  15 |         // TODO(edemaine): A few characters don't have analogs yet.","start":{"column":4,"line":12}},{"frame":"  23 |     });\n  24 |\n> 25 |     it(\"should build Latin-1 outside \\\\text{}\", function() {\n     |    ^ Unknown Test\n  26 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ`\n  27 |             .toBuild(nonstrictSettings);\n  28 |     });","start":{"column":4,"line":25}},{"frame":"  28 |     });\n  29 |\n> 30 |     it(\"should build all lower case Greek letters\", function() {\n     |    ^ Unknown Test\n  31 |         expect`αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω`.toBuild();\n  32 |     });\n  33 |","start":{"column":4,"line":30}},{"frame":"  32 |     });\n  33 |\n> 34 |     it(\"should build math upper case Greek letters\", function() {\n     |    ^ Unknown Test\n  35 |         expect`ΓΔΘΛΞΠΣΥΦΨΩ`.toBuild();\n  36 |     });\n  37 |","start":{"column":4,"line":34}},{"frame":"  36 |     });\n  37 |\n> 38 |     it(\"should build Cyrillic inside \\\\text{}\", function() {\n     |    ^ Unknown Test\n  39 |         expect`\\text{БГДЖЗЙЛФЦШЫЮЯ}`.toBuild();\n  40 |     });\n  41 |","start":{"column":4,"line":38}},{"frame":"  40 |     });\n  41 |\n> 42 |     it(\"should build Cyrillic outside \\\\text{}\", function() {\n     |    ^ Unknown Test\n  43 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.toBuild(nonstrictSettings);\n  44 |     });\n  45 |","start":{"column":4,"line":42}},{"frame":"  44 |     });\n  45 |\n> 46 |     it(\"should not parse Cyrillic outside \\\\text{} with strict\", function() {\n     |    ^ Unknown Test\n  47 |         expect`БГДЖЗЙЛФЦШЫЮЯ`.not.toParse(strictSettings);\n  48 |     });\n  49 |","start":{"column":4,"line":46}},{"frame":"  48 |     });\n  49 |\n> 50 |     it(\"should build CJK inside \\\\text{}\", function() {\n     |    ^ Unknown Test\n  51 |         expect`\\text{私はバナナです}`.toBuild();\n  52 |         expect`\\text{여보세요}`.toBuild();\n  53 |     });","start":{"column":4,"line":50}},{"frame":"  53 |     });\n  54 |\n> 55 |     it(\"should build CJK outside \\\\text{}\", function() {\n     |    ^ Unknown Test\n  56 |         expect`私はバナナです`.toBuild(nonstrictSettings);\n  57 |         expect`여보세요`.toBuild(nonstrictSettings);\n  58 |     });","start":{"column":4,"line":55}},{"frame":"  58 |     });\n  59 |\n> 60 |     it(\"should not parse CJK outside \\\\text{} with strict\", function() {\n     |    ^ Unknown Test\n  61 |         expect`私はバナナです。`.not.toParse(strictSettings);\n  62 |         expect`여보세요`.not.toParse(strictSettings);\n  63 |     });","start":{"column":4,"line":60}},{"frame":"  63 |     });\n  64 |\n> 65 |     it(\"should build Devanagari inside \\\\text{}\", function() {\n     |    ^ Unknown Test\n  66 |         expect`\\text{नमस्ते}`.toBuild();\n  67 |     });\n  68 |","start":{"column":4,"line":65}},{"frame":"  67 |     });\n  68 |\n> 69 |     it(\"should build Devanagari outside \\\\text{}\", function() {\n     |    ^ Unknown Test\n  70 |         expect`नमस्ते`.toBuild(nonstrictSettings);\n  71 |     });\n  72 |","start":{"column":4,"line":69}},{"frame":"  71 |     });\n  72 |\n> 73 |     it(\"should not parse Devanagari outside \\\\text{} with strict\", function() {\n     |    ^ Unknown Test\n  74 |         expect`नमस्ते`.not.toParse(strictSettings);\n  75 |     });\n  76 |","start":{"column":4,"line":73}},{"frame":"  75 |     });\n  76 |\n> 77 |     it(\"should build Georgian inside \\\\text{}\", function() {\n     |    ^ Unknown Test\n  78 |         expect`\\text{გამარჯობა}`.toBuild();\n  79 |     });\n  80 |","start":{"column":4,"line":77}},{"frame":"  79 |     });\n  80 |\n> 81 |     it(\"should build Georgian outside \\\\text{}\", function() {\n     |    ^ Unknown Test\n  82 |         expect`გამარჯობა`.toBuild(nonstrictSettings);\n  83 |     });\n  84 |","start":{"column":4,"line":81}},{"frame":"  83 |     });\n  84 |\n> 85 |     it(\"should not parse Georgian outside \\\\text{} with strict\", function() {\n     |    ^ Unknown Test\n  86 |         expect`გამარჯობა`.not.toParse(strictSettings);\n  87 |     });\n  88 |","start":{"column":4,"line":85}},{"frame":"  87 |     });\n  88 |\n> 89 |     it(\"should build Armenian both inside and outside \\\\text{}\", function() {\n     |    ^ Unknown Test\n  90 |         expect`ԱԲԳաբգ`.toBuild(nonstrictSettings);\n  91 |         expect`\\text{ԱԲԳաբգ}`.toBuild(nonstrictSettings);\n  92 |     });","start":{"column":4,"line":89}},{"frame":"  92 |     });\n  93 |\n> 94 |     it(\"should build extended Latin characters inside \\\\text{}\", function() {\n     |    ^ Unknown Test\n  95 |         expect`\\text{ěščřžůřťďňőİı}`.toBuild();\n  96 |     });\n  97 |","start":{"column":4,"line":94}},{"frame":"   96 |     });\n   97 |\n>  98 |     it(\"should not parse extended Latin outside \\\\text{} with strict\", function() {\n      |    ^ Unknown Test\n   99 |         expect`ěščřžůřťďňőİı`.not.toParse(strictSettings);\n  100 |     });\n  101 |","start":{"column":4,"line":98}},{"frame":"  100 |     });\n  101 |\n> 102 |     it(\"should not allow emoji in strict mode\", function() {\n      |    ^ Unknown Test\n  103 |         expect`✌`.not.toParse(strictSettings);\n  104 |         expect`\\text{✌}`.not.toParse(strictSettings);\n  105 |         const settings = new Settings({","start":{"column":4,"line":102}},{"frame":"  111 |     });\n  112 |\n> 113 |     it(\"should allow emoji outside strict mode\", function() {\n      |    ^ Unknown Test\n  114 |         expect`✌`.toWarn();\n  115 |         expect`\\text{✌}`.toWarn();\n  116 |         const settings = new Settings({","start":{"column":4,"line":113}}]}],"metrics":{"aggregate":{"cyclomatic":36,"cyclomaticDensity":21.429,"halstead":{"bugs":1.245,"difficulty":25.636,"effort":95774.883,"length":532,"time":5320.827,"vocabulary":130,"volume":3735.9,"operands":{"distinct":110,"total":282,"identifiers":["describe","\"unicode\"","it","\"should build Latin-1 inside \\text{}\"","expect","\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}","toBuild","\"should build Latin-1 inside \\text{} like accent commands\"","\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}","toParseLike","\text{`A'A^A~A\"A\r A`E'E^E\"E`I'I^I\"I~N`O'O^O~O\"O`U'U^U\"U'Y`a'a^a~a\"a\r a`e'e^e\"e`ı'ı^ı\"ı~n`o'o^o~o\"o`u'u^u\"u'y\"yc Cc c}","\"should not parse Latin-1 outside \\text{} with strict\"","chars","\"ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ\"","ch","not","toParse","strictSettings","\"should build Latin-1 outside \\text{}\"","ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ","nonstrictSettings","\"should build all lower case Greek letters\"","αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω","\"should build math upper case Greek letters\"","ΓΔΘΛΞΠΣΥΦΨΩ","\"should build Cyrillic inside \\text{}\"","\text{БГДЖЗЙЛФЦШЫЮЯ}","\"should build Cyrillic outside \\text{}\"","БГДЖЗЙЛФЦШЫЮЯ","\"should not parse Cyrillic outside \\text{} with strict\"","\"should build CJK inside \\text{}\"","\text{私はバナナです}","\text{여보세요}","\"should build CJK outside \\text{}\"","私はバナナです","여보세요","\"should not parse CJK outside \\text{} with strict\"","私はバナナです。","\"should build Devanagari inside \\text{}\"","\text{नमस्ते}","\"should build Devanagari outside \\text{}\"","नमस्ते","\"should not parse Devanagari outside \\text{} with strict\"","\"should build Georgian inside \\text{}\"","\text{გამარჯობა}","\"should build Georgian outside \\text{}\"","გამარჯობა","\"should not parse Georgian outside \\text{} with strict\"","\"should build Armenian both inside and outside \\text{}\"","ԱԲԳաբգ","\text{ԱԲԳաբգ}","\"should build extended Latin characters inside \\text{}\"","\text{ěščřžůřťďňőİı}","\"should not parse extended Latin outside \\text{} with strict\"","ěščřžůřťďňőİı","\"should not allow emoji in strict mode\"","✌","\text{✌}","settings","Settings","strict","errorCode","\"unknownSymbol\"","\"error\"","\"ignore\"","\"should allow emoji outside strict mode\"","toWarn","\"unicodeScripts\"","scriptRegExps","latin","/[\\u0100-\\u024f\\u0300-\\u036f]/","cyrillic","/[\\u0400-\\u04ff]/","armenian","/[\\u0530-\\u058F]/","brahmic","/[\\u0900-\\u109F]/","georgian","/[\\u10a0-\\u10ff]/","cjk","/[\\u3000-\\u30FF\\u4E00-\\u9FAF\\uFF00-\\uFF60]/","hangul","/[\\uAC00-\\uD7AF]/","scriptNames","Object","keys","allRegExp","RegExp","map","script","source","join","\"|\"","\"supportedCodepoint() should return the correct values\"","codepoint","0","65535","supportedCodepoint","toBe","test","String","fromCharCode","\"scriptFromCodepoint() should return correct values\"","character","scriptFromCodepoint","scriptName","toEqual","outer","null","false"]},"operators":{"distinct":20,"total":250,"identifiers":["()","function",".","``","const","=","forof","new","{}",":","function=>",":?","===","[]","for","let","<=","++ (postfix)","if","continue"]}},"paramCount":3,"sloc":{"logical":168,"physical":168}},"settings":{"commonjs":false,"esmImportExport":{"halstead":false,"lloc":false},"forin":false,"logicalor":true,"switchcase":true,"templateExpression":{"halstead":true,"lloc":true},"trycatch":false,"newmi":false},"classes":[],"dependencies":[{"line":2,"path":"../src/Settings","type":"esm"},{"line":3,"path":"../src/unicodeScripts","type":"esm"},{"line":4,"path":"./helpers","type":"esm"}],"errors":[],"lineEnd":168,"lineStart":1,"maintainability":115.991,"methods":[{"cyclomatic":1,"cyclomaticDensity":2.174,"halstead":{"bugs":0.144,"difficulty":1.917,"effort":828.844,"length":92,"time":46.047,"vocabulary":26,"volume":432.44,"operands":{"distinct":24,"total":46,"identifiers":["it","\"should build Latin-1 inside \\text{}\"","\"should build Latin-1 inside \\text{} like accent commands\"","\"should not parse Latin-1 outside \\text{} with strict\"","\"should build Latin-1 outside \\text{}\"","\"should build all lower case Greek letters\"","\"should build math upper case Greek letters\"","\"should build Cyrillic inside \\text{}\"","\"should build Cyrillic outside \\text{}\"","\"should not parse Cyrillic outside \\text{} with strict\"","\"should build CJK inside \\text{}\"","\"should build CJK outside \\text{}\"","\"should not parse CJK outside \\text{} with strict\"","\"should build Devanagari inside \\text{}\"","\"should build Devanagari outside \\text{}\"","\"should not parse Devanagari outside \\text{} with strict\"","\"should build Georgian inside \\text{}\"","\"should build Georgian outside \\text{}\"","\"should not parse Georgian outside \\text{} with strict\"","\"should build Armenian both inside and outside \\text{}\"","\"should build extended Latin characters inside \\text{}\"","\"should not parse extended Latin outside \\text{} with strict\"","\"should not allow emoji in strict mode\"","\"should allow emoji outside strict mode\""]},"operators":{"distinct":2,"total":46,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":46,"physical":118},"errors":[],"lineEnd":123,"lineStart":6,"name":"<anon method-1>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÆÇÐØÞßæçðøþ}","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":10,"lineStart":7,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇç}","toParseLike","\text{`A'A^A~A\"A\r A`E'E^E\"E`I'I^I\"I~N`O'O^O~O\"O`U'U^U\"U'Y`a'a^a~a\"a\r a`e'e^e\"e`ı'ı^ı\"ı~n`o'o^o~o\"o`u'u^u\"u'y\"yc Cc c}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":5},"errors":[],"lineEnd":16,"lineStart":12,"name":"<anon method-3>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.02,"difficulty":3.214,"effort":195.893,"length":17,"time":10.883,"vocabulary":12,"volume":60.944,"operands":{"distinct":7,"total":9,"identifiers":["chars","\"ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçþ\"","ch","expect","not","toParse","strictSettings"]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","forof","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":6},"errors":[],"lineEnd":23,"lineStart":18,"name":"<anon method-4>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿÇÐÞçðþ","toBuild","nonstrictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":28,"lineStart":25,"name":"<anon method-5>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","αβγδεϵζηθϑικλμνξοπϖρϱςστυφϕχψω","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":32,"lineStart":30,"name":"<anon method-6>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","ΓΔΘΛΞΠΣΥΦΨΩ","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":36,"lineStart":34,"name":"<anon method-7>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\text{БГДЖЗЙЛФЦШЫЮЯ}","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":40,"lineStart":38,"name":"<anon method-8>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","БГДЖЗЙЛФЦШЫЮЯ","toBuild","nonstrictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":44,"lineStart":42,"name":"<anon method-9>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.009,"difficulty":1.5,"effort":40.5,"length":9,"time":2.25,"vocabulary":8,"volume":27,"operands":{"distinct":5,"total":5,"identifiers":["expect","БГДЖЗЙЛФЦШЫЮЯ","not","toParse","strictSettings"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":48,"lineStart":46,"name":"<anon method-10>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","\text{私はバナナです}","toBuild","\text{여보세요}"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":53,"lineStart":50,"name":"<anon method-11>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.014,"difficulty":2.4,"effort":100.8,"length":14,"time":5.6,"vocabulary":8,"volume":42,"operands":{"distinct":5,"total":8,"identifiers":["expect","私はバナナです","toBuild","nonstrictSettings","여보세요"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":58,"lineStart":55,"name":"<anon method-12>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.019,"difficulty":2.5,"effort":142.647,"length":18,"time":7.925,"vocabulary":9,"volume":57.059,"operands":{"distinct":6,"total":10,"identifiers":["expect","私はバナナです。","not","toParse","strictSettings","여보세요"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":63,"lineStart":60,"name":"<anon method-13>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\text{नमस्ते}","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":67,"lineStart":65,"name":"<anon method-14>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","नमस्ते","toBuild","nonstrictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":71,"lineStart":69,"name":"<anon method-15>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.009,"difficulty":1.5,"effort":40.5,"length":9,"time":2.25,"vocabulary":8,"volume":27,"operands":{"distinct":5,"total":5,"identifiers":["expect","नमस्ते","not","toParse","strictSettings"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":75,"lineStart":73,"name":"<anon method-16>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\text{გამარჯობა}","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":79,"lineStart":77,"name":"<anon method-17>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","გამარჯობა","toBuild","nonstrictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":83,"lineStart":81,"name":"<anon method-18>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.009,"difficulty":1.5,"effort":40.5,"length":9,"time":2.25,"vocabulary":8,"volume":27,"operands":{"distinct":5,"total":5,"identifiers":["expect","გამარჯობა","not","toParse","strictSettings"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":87,"lineStart":85,"name":"<anon method-19>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.014,"difficulty":2.4,"effort":100.8,"length":14,"time":5.6,"vocabulary":8,"volume":42,"operands":{"distinct":5,"total":8,"identifiers":["expect","ԱԲԳաբգ","toBuild","nonstrictSettings","\text{ԱԲԳաբգ}"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":92,"lineStart":89,"name":"<anon method-20>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\text{ěščřžůřťďňőİı}","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":96,"lineStart":94,"name":"<anon method-21>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.009,"difficulty":1.5,"effort":40.5,"length":9,"time":2.25,"vocabulary":8,"volume":27,"operands":{"distinct":5,"total":5,"identifiers":["expect","ěščřžůřťďňőİı","not","toParse","strictSettings"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":100,"lineStart":98,"name":"<anon method-22>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":9.091,"halstead":{"bugs":0.065,"difficulty":10.8,"effort":2110.37,"length":46,"time":117.243,"vocabulary":19,"volume":195.405,"operands":{"distinct":10,"total":24,"identifiers":["expect","✌","not","toParse","strictSettings","\text{✌}","settings","Settings","strict","errorCode"]},"operators":{"distinct":9,"total":22,"identifiers":["()",".","``","const","=","new","{}",":","function=>"]}},"paramCount":0,"sloc":{"logical":11,"physical":10},"errors":[],"lineEnd":111,"lineStart":102,"name":"<anon method-23>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":200,"halstead":{"bugs":0.005,"difficulty":1,"effort":15.51,"length":6,"time":0.862,"vocabulary":6,"volume":15.51,"operands":{"distinct":4,"total":4,"identifiers":["errorCode","\"unknownSymbol\"","\"error\"","\"ignore\""]},"operators":{"distinct":2,"total":2,"identifiers":[":?","==="]}},"paramCount":1,"sloc":{"logical":1,"physical":2},"errors":[],"lineEnd":107,"lineStart":106,"name":"<anon method-24>","paramNames":["errorCode"],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":9.091,"halstead":{"bugs":0.05,"difficulty":9,"effort":1351.056,"length":36,"time":75.059,"vocabulary":18,"volume":150.117,"operands":{"distinct":9,"total":18,"identifiers":["expect","✌","toWarn","\text{✌}","settings","Settings","strict","errorCode","toParse"]},"operators":{"distinct":9,"total":18,"identifiers":["()",".","``","const","=","new","{}",":","function=>"]}},"paramCount":0,"sloc":{"logical":11,"physical":10},"errors":[],"lineEnd":122,"lineStart":113,"name":"<anon method-25>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":200,"halstead":{"bugs":0.005,"difficulty":1,"effort":15.51,"length":6,"time":0.862,"vocabulary":6,"volume":15.51,"operands":{"distinct":4,"total":4,"identifiers":["errorCode","\"unknownSymbol\"","\"ignore\"","\"error\""]},"operators":{"distinct":2,"total":2,"identifiers":[":?","==="]}},"paramCount":1,"sloc":{"logical":1,"physical":2},"errors":[],"lineEnd":118,"lineStart":117,"name":"<anon method-26>","paramNames":["errorCode"],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.556,"halstead":{"bugs":0.096,"difficulty":4.444,"effort":1276.622,"length":56,"time":70.923,"vocabulary":35,"volume":287.24,"operands":{"distinct":27,"total":30,"identifiers":["scriptRegExps","latin","/[\\u0100-\\u024f\\u0300-\\u036f]/","cyrillic","/[\\u0400-\\u04ff]/","armenian","/[\\u0530-\\u058F]/","brahmic","/[\\u0900-\\u109F]/","georgian","/[\\u10a0-\\u10ff]/","cjk","/[\\u3000-\\u30FF\\u4E00-\\u9FAF\\uFF00-\\uFF60]/","hangul","/[\\uAC00-\\uD7AF]/","scriptNames","Object","keys","allRegExp","RegExp","map","script","join","\"|\"","it","\"supportedCodepoint() should return the correct values\"","\"scriptFromCodepoint() should return correct values\""]},"operators":{"distinct":8,"total":26,"identifiers":["const","=","{}",":","()",".","new","function=>"]}},"paramCount":0,"sloc":{"logical":18,"physical":43},"errors":[],"lineEnd":167,"lineStart":125,"name":"<anon method-27>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0.004,"difficulty":1,"effort":11.61,"length":5,"time":0.645,"vocabulary":5,"volume":11.61,"operands":{"distinct":3,"total":3,"identifiers":["scriptRegExps","script","source"]},"operators":{"distinct":2,"total":2,"identifiers":[".","[]"]}},"paramCount":1,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":140,"lineStart":140,"name":"<anon method-28>","paramNames":["script"],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":33.333,"halstead":{"bugs":0.037,"difficulty":4.9,"effort":540.771,"length":27,"time":30.043,"vocabulary":17,"volume":110.361,"operands":{"distinct":10,"total":14,"identifiers":["codepoint","0","65535","expect","supportedCodepoint","toBe","allRegExp","test","String","fromCharCode"]},"operators":{"distinct":7,"total":13,"identifiers":["for","let","=","<=","++ (postfix)","()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":7},"errors":[],"lineEnd":149,"lineStart":143,"name":"<anon method-29>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":3,"cyclomaticDensity":18.75,"halstead":{"bugs":0.102,"difficulty":10.421,"effort":3200.932,"length":62,"time":177.83,"vocabulary":31,"volume":307.16,"operands":{"distinct":19,"total":33,"identifiers":["codepoint","0","65535","character","String","fromCharCode","script","scriptFromCodepoint","scriptName","scriptNames","scriptRegExps","test","expect","toEqual","outer","toBe","null","supportedCodepoint","false"]},"operators":{"distinct":12,"total":29,"identifiers":["for","let","=","<=","++ (postfix)","const","()",".","forof","if","[]","continue"]}},"paramCount":0,"sloc":{"logical":16,"physical":16},"errors":[],"lineEnd":166,"lineStart":151,"name":"<anon method-30>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}],"aggregateAverage":{"cyclomatic":1.161,"cyclomaticDensity":0.691,"halstead":{"bugs":0.04,"difficulty":0.827,"effort":3089.512,"length":17.161,"time":171.64,"vocabulary":4.194,"volume":120.513,"operands":{"distinct":3.548,"total":9.097},"operators":{"distinct":0.645,"total":8.065}},"paramCount":0.097,"sloc":{"logical":5.419,"physical":5.419}},"methodAverage":{"cyclomatic":1.167,"cyclomaticDensity":49.544,"halstead":{"bugs":0.023,"difficulty":2.692,"effort":347.601,"length":17.467,"time":19.311,"vocabulary":10.5,"volume":69.144,"operands":{"distinct":6.6,"total":9.267},"operators":{"distinct":3.9,"total":8.2}},"paramCount":0.1,"sloc":{"logical":5.467,"physical":9.433}}}},{"path":"/home/gabriel/Desktop/research/projects/katex/test/screenshotter-spec.js","testCases":0,"smells":2,"smellInfo":[{"name":"Conditional Test Logic","packageName":"conditionalTestLogic","items":[{"frame":"  2 |\n  3 | describe(\"Screenshotter item\", function() {\n> 4 |     for (const key in data) {\n    |    ^ Conditional Test Logic\n  5 |         if (data.hasOwnProperty(key)) {\n  6 |             const item = data[key];\n  7 |             it(`\"${item.tex}\" should build successfully`, function() {","start":{"line":4,"column":4,"index":98}},{"frame":"  3 | describe(\"Screenshotter item\", function() {\n  4 |     for (const key in data) {\n> 5 |         if (data.hasOwnProperty(key)) {\n    |        ^ Conditional Test Logic\n  6 |             const item = data[key];\n  7 |             it(`\"${item.tex}\" should build successfully`, function() {\n  8 |                 expect(item.tex).toBuild({","start":{"line":5,"column":8,"index":132}}]}],"metrics":{"aggregate":{"cyclomatic":4,"cyclomaticDensity":22.222,"halstead":{"bugs":0.125,"difficulty":10.292,"effort":3860.205,"length":72,"time":214.456,"vocabulary":37,"volume":375.081,"operands":{"distinct":24,"total":38,"identifiers":["data","require","\"./screenshotter/ss_data\"","describe","\"Screenshotter item\"","key","hasOwnProperty","item","it","tex","\"","\" should build successfully","expect","toBuild","macros","displayMode","display","throwOnError","noThrow","errorColor","strict","false","trust","true"]},"operators":{"distinct":13,"total":34,"identifiers":["const","=","()","function","forin","if",".","[]","``","${}","{}",":","! (prefix)"]}},"paramCount":0,"sloc":{"logical":18,"physical":20}},"settings":{"commonjs":false,"esmImportExport":{"halstead":false,"lloc":false},"forin":false,"logicalor":true,"switchcase":true,"templateExpression":{"halstead":true,"lloc":true},"trycatch":false,"newmi":false},"classes":[],"dependencies":[],"errors":[],"lineEnd":20,"lineStart":1,"maintainability":117.199,"methods":[{"cyclomatic":2,"cyclomaticDensity":33.333,"halstead":{"bugs":0.036,"difficulty":8.125,"effort":880.897,"length":26,"time":48.939,"vocabulary":18,"volume":108.418,"operands":{"distinct":8,"total":13,"identifiers":["key","data","hasOwnProperty","item","it","tex","\"","\" should build successfully"]},"operators":{"distinct":10,"total":13,"identifiers":["forin","const","if","()",".","=","[]","``","${}","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":17},"errors":[],"lineEnd":19,"lineStart":3,"name":"<anon method-1>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.051,"difficulty":3.571,"effort":546.162,"length":36,"time":30.342,"vocabulary":19,"volume":152.925,"operands":{"distinct":14,"total":20,"identifiers":["expect","item","tex","toBuild","macros","displayMode","display","throwOnError","noThrow","errorColor","strict","false","trust","true"]},"operators":{"distinct":5,"total":16,"identifiers":["()",".","{}",":","! (prefix)"]}},"paramCount":0,"sloc":{"logical":8,"physical":10},"errors":[],"lineEnd":16,"lineStart":7,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}],"aggregateAverage":{"cyclomatic":1.333,"cyclomaticDensity":7.407,"halstead":{"bugs":0.042,"difficulty":3.431,"effort":1286.735,"length":24,"time":71.485,"vocabulary":12.333,"volume":125.027,"operands":{"distinct":8,"total":12.667},"operators":{"distinct":4.333,"total":11.333}},"paramCount":0,"sloc":{"logical":6,"physical":6.667}},"methodAverage":{"cyclomatic":1.5,"cyclomaticDensity":22.917,"halstead":{"bugs":0.044,"difficulty":5.848,"effort":713.529,"length":31,"time":39.641,"vocabulary":18.5,"volume":130.672,"operands":{"distinct":11,"total":16.5},"operators":{"distinct":7.5,"total":14.5}},"paramCount":0,"sloc":{"logical":7,"physical":13.5}}}},{"path":"/home/gabriel/Desktop/research/projects/katex/test/mathml-spec.js","testCases":21,"smells":1,"smellInfo":[{"name":"Conditional Test Logic","packageName":"conditionalTestLogic","items":[{"frame":"   7 | const getMathML = function(expr, settings = new Settings()) {\n   8 |     let startStyle = Style.TEXT;\n>  9 |     if (settings.displayMode) {\n     |    ^ Conditional Test Logic\n  10 |         startStyle = Style.DISPLAY;\n  11 |     }\n  12 |","start":{"line":9,"column":4,"index":300}}]}],"metrics":{"aggregate":{"cyclomatic":27,"cyclomaticDensity":17.308,"halstead":{"bugs":1.081,"difficulty":18.851,"effort":61131.825,"length":472,"time":3396.213,"vocabulary":117,"volume":3242.812,"operands":{"distinct":101,"total":238,"identifiers":["getMathML","expr","settings","Settings","startStyle","Style","TEXT","displayMode","DISPLAY","options","Options","style","maxSize","Infinity","built","buildMathML","parseTree","children","0","toMarkup","describe","\"A MathML builder\"","it","\"should generate the right types of nodes\"","expect","\"\\sin{x}+1\\;\\text{a}\"","toMatchSnapshot","\"should concatenate digits into single <mn>\"","\"\\sin{\\alpha}=0.34=.34^1\"","\"1{,}000{,}000\"","\"should make prime operators into <mo> nodes\"","\"f'\"","\"should generate <mphantom> nodes for \\phantom\"","\"\\phantom{x}\"","\"should use <munderover> for large operators\"","\"\\displaystyle\\sum_a^b\"","\"should use <msupsub> for integrals\"","\"\\displaystyle\\int_a^b + \"","\"\\oiint_a^b + \\oiiint_a^b\"","\"should use <msupsub> for regular operators\"","\"\\textstyle\\sum_a^b\"","\"should output \\limsup_{x \\rightarrow \\infty} correctly in \"","\"\\textstyle\"","mathml","\"\\limsup_{x \\rightarrow \\infty}\"","\"should output \\limsup_{x \\rightarrow \\infty} in \"","\"displaymode correctly\"","true","\"should use <mpadded> for raisebox\"","\"\\raisebox{0.25em}{b}\"","\"should size delimiters correctly\"","\"(M) \\big(M\\big) \\Big(M\\Big) \\bigg(M\\bigg)\"","\" \\Bigg(M\\Bigg)\"","\"should use <menclose> for colorbox\"","\"\\colorbox{red}{b}\"","\"should build the CD environment properly\"","displaySettings","strict","false","\"\\begin{CD} A @>a>> B\\\\ @VVbV @VVcV\\\\\"","\" C @>d>> D \\end{CD}\"","\"should set href attribute for href appropriately\"","\"\\href{http://example.org}{\\alpha}\"","trust","\"p \\Vdash \\beta \\href{http://example.org}{+ \\alpha} \\times \\gamma\"","\"should render mathchoice as if there was nothing\"","cmd","\"\\sum_{k = 0}^{\\infty} x^k\"","\\displaystyle\\mathchoice{","}{T}{S}{SS}","\\mathchoice{D}{","}{S}{SS}","x_{\\mathchoice{D}{T}{","}{SS}}","x_{y_{\\mathchoice{D}{T}{S}{","}}}","\"should render boldsymbol with the correct mathvariants\"","\\boldsymbol{Ax2k\\omega\\Omega\\imath+}","\"accents turn into <mover accent=\"true\"> in MathML\"","\"über fiancée\"","unicodeTextInMathMode","\"tags use <mlabeledtr>\"","\"\\tag{hi} x+y^2\"","\"normal spaces render normally\"","\"\\kern1em\\kern1ex\"","\"special spaces render specially\"","\"\\,\\thinspace\\:\\>\\medspace\\;\\thickspace\"","\"\\!\\negthinspace\\negmedspace\\negthickspace\"","\"\\mkern1mu\\mkern3mu\\mkern4mu\\mkern5mu\"","\"\\mkern-1mu\\mkern-3mu\\mkern-4mu\\mkern-5mu\"","\"ligatures render properly\"","\"\\text{```Hi----'''}--\"","\"\\texttt{```Hi----'''}\"","\"\\text{\\tt ```Hi----'''}\"","\"\\text fonts become mathvariant\"","\"\\text{\"","\"roman\\textit{italic\\textbf{bold italic}}\\textbf{bold}\"","\"\\textsf{ss\\textit{italic\\textbf{bold italic}}\\textbf{bold}}\"","\"\\texttt{tt\\textit{italic\\textbf{bold italic}}\\textbf{bold}}}\"","\"\\html@mathml makes clean symbols\"","\"\\copyright\\neq\\notin≘\\KaTeX\""]},"operators":{"distinct":16,"total":234,"identifiers":["const","=","function","new","let",".","if","{}",":","()","return","[]","function=>","+","``","${}"]}},"paramCount":2,"sloc":{"logical":156,"physical":154}},"settings":{"commonjs":false,"esmImportExport":{"halstead":false,"lloc":false},"forin":false,"logicalor":true,"switchcase":true,"templateExpression":{"halstead":true,"lloc":true},"trycatch":false,"newmi":false},"classes":[],"dependencies":[{"line":1,"path":"../src/buildMathML","type":"esm"},{"line":2,"path":"../src/parseTree","type":"esm"},{"line":3,"path":"../src/Options","type":"esm"},{"line":4,"path":"../src/Settings","type":"esm"},{"line":5,"path":"../src/Style","type":"esm"}],"errors":[],"lineEnd":154,"lineStart":1,"maintainability":115.387,"methods":[{"cyclomatic":2,"cyclomaticDensity":18.182,"halstead":{"bugs":0.081,"difficulty":8.25,"effort":2003.917,"length":50,"time":111.329,"vocabulary":29,"volume":242.899,"operands":{"distinct":18,"total":27,"identifiers":["startStyle","Style","TEXT","settings","displayMode","DISPLAY","options","Options","style","maxSize","Infinity","built","buildMathML","parseTree","expr","children","0","toMarkup"]},"operators":{"distinct":11,"total":23,"identifiers":["let","=",".","if","const","new","{}",":","()","return","[]"]}},"paramCount":2,"sloc":{"logical":11,"physical":18},"errors":[],"lineEnd":24,"lineStart":7,"name":"<anon method-1>","paramNames":["expr","settings"],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":2.174,"halstead":{"bugs":0.157,"difficulty":3.692,"effort":1739.304,"length":96,"time":96.628,"vocabulary":30,"volume":471.061,"operands":{"distinct":26,"total":48,"identifiers":["it","\"should generate the right types of nodes\"","\"should concatenate digits into single <mn>\"","\"should make prime operators into <mo> nodes\"","\"should generate <mphantom> nodes for \\phantom\"","\"should use <munderover> for large operators\"","\"should use <msupsub> for integrals\"","\"should use <msupsub> for regular operators\"","\"should output \\limsup_{x \\rightarrow \\infty} correctly in \"","\"\\textstyle\"","\"should output \\limsup_{x \\rightarrow \\infty} in \"","\"displaymode correctly\"","\"should use <mpadded> for raisebox\"","\"should size delimiters correctly\"","\"should use <menclose> for colorbox\"","\"should build the CD environment properly\"","\"should set href attribute for href appropriately\"","\"should render mathchoice as if there was nothing\"","\"should render boldsymbol with the correct mathvariants\"","\"accents turn into <mover accent=\"true\"> in MathML\"","\"tags use <mlabeledtr>\"","\"normal spaces render normally\"","\"special spaces render specially\"","\"ligatures render properly\"","\"\\text fonts become mathvariant\"","\"\\html@mathml makes clean symbols\""]},"operators":{"distinct":4,"total":48,"identifiers":["()","function=>","+","function"]}},"paramCount":0,"sloc":{"logical":46,"physical":128},"errors":[],"lineEnd":153,"lineStart":26,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1,"effort":20.68,"length":8,"time":1.149,"vocabulary":6,"volume":20.68,"operands":{"distinct":4,"total":4,"identifiers":["expect","getMathML","\"\\sin{x}+1\\;\\text{a}\"","toMatchSnapshot"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":29,"lineStart":27,"name":"<anon method-3>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["expect","getMathML","\"\\sin{\\alpha}=0.34=.34^1\"","toMatchSnapshot","\"1{,}000{,}000\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":4},"errors":[],"lineEnd":34,"lineStart":31,"name":"<anon method-4>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1,"effort":20.68,"length":8,"time":1.149,"vocabulary":6,"volume":20.68,"operands":{"distinct":4,"total":4,"identifiers":["expect","getMathML","\"f'\"","toMatchSnapshot"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":38,"lineStart":36,"name":"<anon method-5>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1,"effort":20.68,"length":8,"time":1.149,"vocabulary":6,"volume":20.68,"operands":{"distinct":4,"total":4,"identifiers":["expect","getMathML","\"\\phantom{x}\"","toMatchSnapshot"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":42,"lineStart":40,"name":"<anon method-6>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1,"effort":20.68,"length":8,"time":1.149,"vocabulary":6,"volume":20.68,"operands":{"distinct":4,"total":4,"identifiers":["expect","getMathML","\"\\displaystyle\\sum_a^b\"","toMatchSnapshot"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":46,"lineStart":44,"name":"<anon method-7>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":45,"length":10,"time":2.5,"vocabulary":8,"volume":30,"operands":{"distinct":5,"total":5,"identifiers":["expect","getMathML","\"\\displaystyle\\int_a^b + \"","\"\\oiint_a^b + \\oiiint_a^b\"","toMatchSnapshot"]},"operators":{"distinct":3,"total":5,"identifiers":["()",".","+"]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":51,"lineStart":48,"name":"<anon method-8>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1,"effort":20.68,"length":8,"time":1.149,"vocabulary":6,"volume":20.68,"operands":{"distinct":4,"total":4,"identifiers":["expect","getMathML","\"\\textstyle\\sum_a^b\"","toMatchSnapshot"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":55,"lineStart":53,"name":"<anon method-9>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.013,"difficulty":2.4,"effort":91.294,"length":12,"time":5.072,"vocabulary":9,"volume":38.039,"operands":{"distinct":5,"total":6,"identifiers":["mathml","getMathML","\"\\limsup_{x \\rightarrow \\infty}\"","expect","toMatchSnapshot"]},"operators":{"distinct":4,"total":6,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":61,"lineStart":58,"name":"<anon method-10>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.029,"difficulty":4.278,"effort":376.444,"length":22,"time":20.914,"vocabulary":16,"volume":88,"operands":{"distinct":9,"total":11,"identifiers":["settings","Settings","displayMode","true","mathml","getMathML","\"\\limsup_{x \\rightarrow \\infty}\"","expect","toMatchSnapshot"]},"operators":{"distinct":7,"total":11,"identifiers":["const","=","new","{}",":","()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":68,"lineStart":64,"name":"<anon method-11>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1,"effort":20.68,"length":8,"time":1.149,"vocabulary":6,"volume":20.68,"operands":{"distinct":4,"total":4,"identifiers":["expect","getMathML","\"\\raisebox{0.25em}{b}\"","toMatchSnapshot"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":72,"lineStart":70,"name":"<anon method-12>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":45,"length":10,"time":2.5,"vocabulary":8,"volume":30,"operands":{"distinct":5,"total":5,"identifiers":["expect","getMathML","\"(M) \\big(M\\big) \\Big(M\\Big) \\bigg(M\\bigg)\"","\" \\Bigg(M\\Bigg)\"","toMatchSnapshot"]},"operators":{"distinct":3,"total":5,"identifiers":["()",".","+"]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":77,"lineStart":74,"name":"<anon method-13>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1,"effort":20.68,"length":8,"time":1.149,"vocabulary":6,"volume":20.68,"operands":{"distinct":4,"total":4,"identifiers":["expect","getMathML","\"\\colorbox{red}{b}\"","toMatchSnapshot"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":81,"lineStart":79,"name":"<anon method-14>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.039,"difficulty":4.667,"effort":544.563,"length":27,"time":30.253,"vocabulary":20,"volume":116.692,"operands":{"distinct":12,"total":14,"identifiers":["displaySettings","Settings","displayMode","true","strict","false","mathml","getMathML","\"\\begin{CD} A @>a>> B\\\\ @VVbV @VVcV\\\\\"","\" C @>d>> D \\end{CD}\"","expect","toMatchSnapshot"]},"operators":{"distinct":8,"total":13,"identifiers":["const","=","new","{}",":","()","+","."]}},"paramCount":0,"sloc":{"logical":7,"physical":6},"errors":[],"lineEnd":88,"lineStart":83,"name":"<anon method-15>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.023,"difficulty":3.125,"effort":219.714,"length":19,"time":12.206,"vocabulary":13,"volume":70.308,"operands":{"distinct":8,"total":10,"identifiers":["expect","getMathML","\"\\href{http://example.org}{\\alpha}\"","Settings","trust","true","toMatchSnapshot","\"p \\Vdash \\beta \\href{http://example.org}{+ \\alpha} \\times \\gamma\""]},"operators":{"distinct":5,"total":9,"identifiers":["()",".","new","{}",":"]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":95,"lineStart":90,"name":"<anon method-16>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.692,"halstead":{"bugs":0.074,"difficulty":6,"effort":1325.353,"length":52,"time":73.631,"vocabulary":19,"volume":220.892,"operands":{"distinct":13,"total":26,"identifiers":["cmd","\"\\sum_{k = 0}^{\\infty} x^k\"","expect","getMathML","\\displaystyle\\mathchoice{","}{T}{S}{SS}","toMatchSnapshot","\\mathchoice{D}{","}{S}{SS}","x_{\\mathchoice{D}{T}{","}{SS}}","x_{y_{\\mathchoice{D}{T}{S}{","}}}"]},"operators":{"distinct":6,"total":26,"identifiers":["const","=","()",".","``","${}"]}},"paramCount":0,"sloc":{"logical":13,"physical":11},"errors":[],"lineEnd":107,"lineStart":97,"name":"<anon method-17>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.008,"difficulty":1.5,"effort":37.899,"length":9,"time":2.106,"vocabulary":7,"volume":25.266,"operands":{"distinct":4,"total":4,"identifiers":["expect","getMathML","\\boldsymbol{Ax2k\\omega\\Omega\\imath+}","toMatchSnapshot"]},"operators":{"distinct":3,"total":5,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":112,"lineStart":109,"name":"<anon method-18>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.013,"difficulty":2,"effort":79.726,"length":12,"time":4.429,"vocabulary":10,"volume":39.863,"operands":{"distinct":6,"total":6,"identifiers":["expect","getMathML","\"über fiancée\"","unicodeTextInMathMode","true","toMatchSnapshot"]},"operators":{"distinct":4,"total":6,"identifiers":["()",".","{}",":"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":117,"lineStart":114,"name":"<anon method-19>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.013,"difficulty":2,"effort":79.726,"length":12,"time":4.429,"vocabulary":10,"volume":39.863,"operands":{"distinct":6,"total":6,"identifiers":["expect","getMathML","\"\\tag{hi} x+y^2\"","displayMode","true","toMatchSnapshot"]},"operators":{"distinct":4,"total":6,"identifiers":["()",".","{}",":"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":122,"lineStart":119,"name":"<anon method-20>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1,"effort":20.68,"length":8,"time":1.149,"vocabulary":6,"volume":20.68,"operands":{"distinct":4,"total":4,"identifiers":["expect","getMathML","\"\\kern1em\\kern1ex\"","toMatchSnapshot"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":126,"lineStart":124,"name":"<anon method-21>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.016,"difficulty":1.5,"effort":69.76,"length":14,"time":3.876,"vocabulary":10,"volume":46.507,"operands":{"distinct":7,"total":7,"identifiers":["expect","getMathML","\"\\,\\thinspace\\:\\>\\medspace\\;\\thickspace\"","\"\\!\\negthinspace\\negmedspace\\negthickspace\"","\"\\mkern1mu\\mkern3mu\\mkern4mu\\mkern5mu\"","\"\\mkern-1mu\\mkern-3mu\\mkern-4mu\\mkern-5mu\"","toMatchSnapshot"]},"operators":{"distinct":3,"total":7,"identifiers":["()",".","+"]}},"paramCount":0,"sloc":{"logical":3,"physical":7},"errors":[],"lineEnd":133,"lineStart":127,"name":"<anon method-22>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.013,"difficulty":1.5,"effort":57.059,"length":12,"time":3.17,"vocabulary":9,"volume":38.039,"operands":{"distinct":6,"total":6,"identifiers":["expect","getMathML","\"\\text{```Hi----'''}--\"","\"\\texttt{```Hi----'''}\"","\"\\text{\\tt ```Hi----'''}\"","toMatchSnapshot"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","+"]}},"paramCount":0,"sloc":{"logical":3,"physical":5},"errors":[],"lineEnd":139,"lineStart":135,"name":"<anon method-23>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.016,"difficulty":1.5,"effort":69.76,"length":14,"time":3.876,"vocabulary":10,"volume":46.507,"operands":{"distinct":7,"total":7,"identifiers":["expect","getMathML","\"\\text{\"","\"roman\\textit{italic\\textbf{bold italic}}\\textbf{bold}\"","\"\\textsf{ss\\textit{italic\\textbf{bold italic}}\\textbf{bold}}\"","\"\\texttt{tt\\textit{italic\\textbf{bold italic}}\\textbf{bold}}}\"","toMatchSnapshot"]},"operators":{"distinct":3,"total":7,"identifiers":["()",".","+"]}},"paramCount":0,"sloc":{"logical":3,"physical":7},"errors":[],"lineEnd":147,"lineStart":141,"name":"<anon method-24>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1,"effort":20.68,"length":8,"time":1.149,"vocabulary":6,"volume":20.68,"operands":{"distinct":4,"total":4,"identifiers":["expect","getMathML","\"\\copyright\\neq\\notin≘\\KaTeX\"","toMatchSnapshot"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":152,"lineStart":149,"name":"<anon method-25>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}],"aggregateAverage":{"cyclomatic":1.038,"cyclomaticDensity":0.666,"halstead":{"bugs":0.042,"difficulty":0.725,"effort":2351.224,"length":18.154,"time":130.624,"vocabulary":4.5,"volume":124.724,"operands":{"distinct":3.885,"total":9.154},"operators":{"distinct":0.615,"total":9}},"paramCount":0.077,"sloc":{"logical":6,"physical":5.923}},"methodAverage":{"cyclomatic":1.04,"cyclomaticDensity":26.693,"halstead":{"bugs":0.024,"difficulty":2.24,"effort":281.7,"length":18.36,"time":15.65,"vocabulary":10.76,"volume":70.999,"operands":{"distinct":7.12,"total":9.28},"operators":{"distinct":3.64,"total":9.08}},"paramCount":0.08,"sloc":{"logical":6.08,"physical":9.96}}}},{"path":"/home/gabriel/Desktop/research/projects/katex/test/katex-spec.js","testCases":556,"smells":566,"smellInfo":[{"name":"Conditional Test Logic","packageName":"conditionalTestLogic","items":[{"frame":"  44 |         const parse = getParsed(expression);\n  45 |\n> 46 |         for (let i = 0; i < parse.length; i++) {\n     |        ^ Conditional Test Logic\n  47 |             const group = parse[i];\n  48 |             expect(group.type).toMatch(\"ord\");\n  49 |         }","start":{"line":46,"column":8,"index":1257}},{"frame":"  67 |         const parse = getParsed(expression);\n  68 |\n> 69 |         for (let i = 0; i < parse.length; i++) {\n     |        ^ Conditional Test Logic\n  70 |             const group = parse[i];\n  71 |             expect(group.type).toEqual(\"atom\");\n  72 |             expect(group.family).toEqual(\"bin\");","start":{"line":69,"column":8,"index":1848}},{"frame":"  87 |         const parse = getParsed(expression);\n  88 |\n> 89 |         for (let i = 0; i < parse.length; i++) {\n     |        ^ Conditional Test Logic\n  90 |             let group = parse[i];\n  91 |             if (group.type === \"htmlmathml\") {\n  92 |                 expect(group.html).toHaveLength(1);","start":{"line":89,"column":8,"index":2443}},{"frame":"  89 |         for (let i = 0; i < parse.length; i++) {\n  90 |             let group = parse[i];\n> 91 |             if (group.type === \"htmlmathml\") {\n     |            ^ Conditional Test Logic\n  92 |                 expect(group.html).toHaveLength(1);\n  93 |                 group = group.html[0];\n  94 |             }","start":{"line":91,"column":12,"index":2530}},{"frame":"  93 |                 group = group.html[0];\n  94 |             }\n> 95 |             if (group.type === \"mclass\") {\n     |            ^ Conditional Test Logic\n  96 |                 expect(group.mclass).toEqual(\"mrel\");\n  97 |             } else {\n  98 |                 expect(group.type).toEqual(\"atom\");","start":{"line":95,"column":12,"index":2682}},{"frame":"  126 |         const parse = getParsed(expression);\n  127 |\n> 128 |         for (let i = 0; i < parse.length; i++) {\n      |        ^ Conditional Test Logic\n  129 |             const group = parse[i];\n  130 |             expect(group.type).toEqual(\"atom\");\n  131 |             expect(group.family).toEqual(\"punct\");","start":{"line":128,"column":8,"index":3698}},{"frame":"  144 |         const parse = getParsed(expression);\n  145 |\n> 146 |         for (let i = 0; i < parse.length; i++) {\n      |        ^ Conditional Test Logic\n  147 |             const group = parse[i];\n  148 |             expect(group.type).toEqual(\"atom\");\n  149 |             expect(group.family).toEqual(\"open\");","start":{"line":146,"column":8,"index":4159}},{"frame":"  162 |         const parse = getParsed(expression);\n  163 |\n> 164 |         for (let i = 0; i < parse.length; i++) {\n      |        ^ Conditional Test Logic\n  165 |             const group = parse[i];\n  166 |             expect(group.type).toEqual(\"atom\");\n  167 |             expect(group.family).toEqual(\"close\");","start":{"line":164,"column":8,"index":4622}},{"frame":"  1260 |     ];\n  1261 |\n> 1262 |     for (const [actual, expected] of cases) {\n       |    ^ Conditional Test Logic\n  1263 |         it(`should build \"${actual}\" like \"${expected}\"`, () => {\n  1264 |             expect(actual).toBuildLike(expected);\n  1265 |         });","start":{"line":1262,"column":4,"index":40422}},{"frame":"  1409 |         ];\n  1410 |\n> 1411 |         for (let i = 0; i < missingGroups.length; i++) {\n       |        ^ Conditional Test Logic\n  1412 |             expect(missingGroups[i]).not.toParse();\n  1413 |         }\n  1414 |     });","start":{"line":1411,"column":8,"index":45668}},{"frame":"  1436 |         ];\n  1437 |\n> 1438 |         for (let i = 0; i < badArguments.length; i++) {\n       |        ^ Conditional Test Logic\n  1439 |             expect(badArguments[i]).not.toParse();\n  1440 |         }\n  1441 |     });","start":{"line":1438,"column":8,"index":46629}},{"frame":"  1454 |         ];\n  1455 |\n> 1456 |         for (let i = 0; i < goodArguments.length; i++) {\n       |        ^ Conditional Test Logic\n  1457 |             expect(goodArguments[i]).toParse();\n  1458 |         }\n  1459 |     });","start":{"line":1456,"column":8,"index":47195}},{"frame":"  1467 |         ];\n  1468 |\n> 1469 |         for (let i = 0; i < badSupSubscripts.length; i++) {\n       |        ^ Conditional Test Logic\n  1470 |             expect(badSupSubscripts[i]).not.toParse();\n  1471 |         }\n  1472 |     });","start":{"line":1469,"column":8,"index":47551}},{"frame":"  1480 |         ];\n  1481 |\n> 1482 |         for (let i = 0; i < goodSupSubscripts.length; i++) {\n       |        ^ Conditional Test Logic\n  1483 |             expect(goodSupSubscripts[i]).toParse();\n  1484 |         }\n  1485 |     });","start":{"line":1482,"column":8,"index":47930}},{"frame":"  1518 |         ];\n  1519 |\n> 1520 |         for (let i = 0; i < badLeftArguments.length; i++) {\n       |        ^ Conditional Test Logic\n  1521 |             expect(badLeftArguments[i]).not.toParse();\n  1522 |         }\n  1523 |     });","start":{"line":1520,"column":8,"index":49162}},{"frame":"  1532 |         ];\n  1533 |\n> 1534 |         for (let i = 0; i < goodLeftArguments.length; i++) {\n       |        ^ Conditional Test Logic\n  1535 |             expect(goodLeftArguments[i]).toParse();\n  1536 |         }\n  1537 |     });","start":{"line":1534,"column":8,"index":49639}},{"frame":"  2170 |\n  2171 |     it(\"should throw Error when HTML attribute name is invalid\", function() {\n> 2172 |         for (const char of [\">\", \" \", \"\\t\", \"\\n\", \"\\r\", \"\\\"\", \"'\", \"/\"]) {\n       |        ^ Conditional Test Logic\n  2173 |             try {\n  2174 |                 katex.renderToString(\n  2175 |                     `\\\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);","start":{"line":2172,"column":8,"index":77589}},{"frame":"  3833 | describe(\"leqno and fleqn rendering options\", () => {\n  3834 |     const expr = r`\\tag{hi}x+y`;\n> 3835 |     for (const opt of [\"leqno\", \"fleqn\"]) {\n       |    ^ Conditional Test Logic\n  3836 |         it(`should not add ${opt} class by default`, () => {\n  3837 |             const settings = new Settings({displayMode: true});\n  3838 |             const built = katex.__renderToDomTree(expr, settings);","start":{"line":3835,"column":4,"index":141526}},{"frame":"  4238 |         // add eastern arabic numbers to symbols table\n  4239 |         // these symbols are ۰۱۲۳۴۵۶۷۸۹ and ٠١٢٣٤٥٦٧٨٩\n> 4240 |         for (let number = 0; number <= 9; number++) {\n       |        ^ Conditional Test Logic\n  4241 |             const persianNum = String.fromCharCode(0x0660 + number);\n  4242 |             katex.__defineSymbol(\n  4243 |                 \"math\", fontName, \"textord\", persianNum, persianNum);","start":{"line":4240,"column":8,"index":158466}},{"frame":"  4257 |         const mockMetrics = {};\n  4258 |         // mock font metrics for the symbols that we added previously\n> 4259 |         for (let number = 0; number <= 9; number++) {\n       |        ^ Conditional Test Logic\n  4260 |             mockMetrics[0x0660 + number] = [-0.00244140625, 0.6875, 0, 0];\n  4261 |             mockMetrics[0x06F0 + number] = [-0.00244140625, 0.6875, 0, 0];\n  4262 |         }","start":{"line":4259,"column":8,"index":159412}}]},{"name":"Duplicate Assert","packageName":"duplicateAssert","items":[{"frame":"  572 |         parse = getParsed(simpleOver)[0];\n  573 |\n> 574 |         expect(parse.type).toEqual(\"genfrac\");\n      |        ^ Duplicate Assert\n  575 |         expect(parse.numer).toBeDefined();\n  576 |         expect(parse.denom).toBeDefined();\n  577 |","start":{"line":574,"column":8,"index":17088}},{"frame":"  572 |         parse = getParsed(simpleOver)[0];\n  573 |\n> 574 |         expect(parse.type).toEqual(\"genfrac\");\n      |        ^ Duplicate Assert\n  575 |         expect(parse.numer).toBeDefined();\n  576 |         expect(parse.denom).toBeDefined();\n  577 |","start":{"line":574,"column":8,"index":17088}},{"frame":"  573 |\n  574 |         expect(parse.type).toEqual(\"genfrac\");\n> 575 |         expect(parse.numer).toBeDefined();\n      |        ^ Duplicate Assert\n  576 |         expect(parse.denom).toBeDefined();\n  577 |\n  578 |         parse = getParsed(complexOver)[0];","start":{"line":575,"column":8,"index":17135}},{"frame":"  573 |\n  574 |         expect(parse.type).toEqual(\"genfrac\");\n> 575 |         expect(parse.numer).toBeDefined();\n      |        ^ Duplicate Assert\n  576 |         expect(parse.denom).toBeDefined();\n  577 |\n  578 |         parse = getParsed(complexOver)[0];","start":{"line":575,"column":8,"index":17135}},{"frame":"  574 |         expect(parse.type).toEqual(\"genfrac\");\n  575 |         expect(parse.numer).toBeDefined();\n> 576 |         expect(parse.denom).toBeDefined();\n      |        ^ Duplicate Assert\n  577 |\n  578 |         parse = getParsed(complexOver)[0];\n  579 |","start":{"line":576,"column":8,"index":17178}},{"frame":"  574 |         expect(parse.type).toEqual(\"genfrac\");\n  575 |         expect(parse.numer).toBeDefined();\n> 576 |         expect(parse.denom).toBeDefined();\n      |        ^ Duplicate Assert\n  577 |\n  578 |         parse = getParsed(complexOver)[0];\n  579 |","start":{"line":576,"column":8,"index":17178}},{"frame":"  578 |         parse = getParsed(complexOver)[0];\n  579 |\n> 580 |         expect(parse.type).toEqual(\"genfrac\");\n      |        ^ Duplicate Assert\n  581 |         expect(parse.numer).toBeDefined();\n  582 |         expect(parse.denom).toBeDefined();\n  583 |","start":{"line":580,"column":8,"index":17266}},{"frame":"  578 |         parse = getParsed(complexOver)[0];\n  579 |\n> 580 |         expect(parse.type).toEqual(\"genfrac\");\n      |        ^ Duplicate Assert\n  581 |         expect(parse.numer).toBeDefined();\n  582 |         expect(parse.denom).toBeDefined();\n  583 |","start":{"line":580,"column":8,"index":17266}},{"frame":"  579 |\n  580 |         expect(parse.type).toEqual(\"genfrac\");\n> 581 |         expect(parse.numer).toBeDefined();\n      |        ^ Duplicate Assert\n  582 |         expect(parse.denom).toBeDefined();\n  583 |\n  584 |         const parseBraceFrac = getParsed(braceFrac)[0];","start":{"line":581,"column":8,"index":17313}},{"frame":"  579 |\n  580 |         expect(parse.type).toEqual(\"genfrac\");\n> 581 |         expect(parse.numer).toBeDefined();\n      |        ^ Duplicate Assert\n  582 |         expect(parse.denom).toBeDefined();\n  583 |\n  584 |         const parseBraceFrac = getParsed(braceFrac)[0];","start":{"line":581,"column":8,"index":17313}},{"frame":"  580 |         expect(parse.type).toEqual(\"genfrac\");\n  581 |         expect(parse.numer).toBeDefined();\n> 582 |         expect(parse.denom).toBeDefined();\n      |        ^ Duplicate Assert\n  583 |\n  584 |         const parseBraceFrac = getParsed(braceFrac)[0];\n  585 |","start":{"line":582,"column":8,"index":17356}},{"frame":"  580 |         expect(parse.type).toEqual(\"genfrac\");\n  581 |         expect(parse.numer).toBeDefined();\n> 582 |         expect(parse.denom).toBeDefined();\n      |        ^ Duplicate Assert\n  583 |\n  584 |         const parseBraceFrac = getParsed(braceFrac)[0];\n  585 |","start":{"line":582,"column":8,"index":17356}},{"frame":"  1637 |         expect(bbBody).toHaveLength(3);\n  1638 |         expect(bbBody[0].type).toEqual(\"mathord\");\n> 1639 |         expect(bbBody[2].type).toEqual(\"font\");\n       |        ^ Duplicate Assert\n  1640 |         expect(bbBody[2].font).toEqual(\"mathrm\");\n  1641 |         expect(bbBody[2].type).toEqual(\"font\");\n  1642 |     });","start":{"line":1639,"column":8,"index":53408}},{"frame":"  1637 |         expect(bbBody).toHaveLength(3);\n  1638 |         expect(bbBody[0].type).toEqual(\"mathord\");\n> 1639 |         expect(bbBody[2].type).toEqual(\"font\");\n       |        ^ Duplicate Assert\n  1640 |         expect(bbBody[2].font).toEqual(\"mathrm\");\n  1641 |         expect(bbBody[2].type).toEqual(\"font\");\n  1642 |     });","start":{"line":1639,"column":8,"index":53408}},{"frame":"  1639 |         expect(bbBody[2].type).toEqual(\"font\");\n  1640 |         expect(bbBody[2].font).toEqual(\"mathrm\");\n> 1641 |         expect(bbBody[2].type).toEqual(\"font\");\n       |        ^ Duplicate Assert\n  1642 |     });\n  1643 |\n  1644 |     it(\"should work with \\\\textcolor\", function() {","start":{"line":1641,"column":8,"index":53506}},{"frame":"  1639 |         expect(bbBody[2].type).toEqual(\"font\");\n  1640 |         expect(bbBody[2].font).toEqual(\"mathrm\");\n> 1641 |         expect(bbBody[2].type).toEqual(\"font\");\n       |        ^ Duplicate Assert\n  1642 |     });\n  1643 |\n  1644 |     it(\"should work with \\\\textcolor\", function() {","start":{"line":1641,"column":8,"index":53506}},{"frame":"  1832 |     it(\"should render \\\\text{R\\\\textit{S}T} with the correct fonts\", function() {\n  1833 |         const markup = katex.renderToString(r`\\text{R\\textit{S}T}`);\n> 1834 |         expect(markup).toContain(\"<span class=\\\"mord\\\">R</span>\");\n       |        ^ Duplicate Assert\n  1835 |         expect(markup).toContain(\"<span class=\\\"mord textit\\\">S</span>\");\n  1836 |         expect(markup).toContain(\"<span class=\\\"mord\\\">T</span>\");\n  1837 |     });","start":{"line":1834,"column":8,"index":61061}},{"frame":"  1833 |         const markup = katex.renderToString(r`\\text{R\\textit{S}T}`);\n  1834 |         expect(markup).toContain(\"<span class=\\\"mord\\\">R</span>\");\n> 1835 |         expect(markup).toContain(\"<span class=\\\"mord textit\\\">S</span>\");\n       |        ^ Duplicate Assert\n  1836 |         expect(markup).toContain(\"<span class=\\\"mord\\\">T</span>\");\n  1837 |     });\n  1838 |","start":{"line":1835,"column":8,"index":61128}},{"frame":"  1834 |         expect(markup).toContain(\"<span class=\\\"mord\\\">R</span>\");\n  1835 |         expect(markup).toContain(\"<span class=\\\"mord textit\\\">S</span>\");\n> 1836 |         expect(markup).toContain(\"<span class=\\\"mord\\\">T</span>\");\n       |        ^ Duplicate Assert\n  1837 |     });\n  1838 |\n  1839 |     it(\"should render \\\\textbf{R } with the correct font\", function() {","start":{"line":1836,"column":8,"index":61202}},{"frame":"  1858 |     it(\"should render \\\\textsf{\\\\textit{R}G\\\\textbf{B}} with the correct font\", function() {\n  1859 |         const markup = katex.renderToString(r`\\textsf{\\textit{R}G\\textbf{B}}`);\n> 1860 |         expect(markup).toContain(\"<span class=\\\"mord textsf textit\\\">R</span>\");\n       |        ^ Duplicate Assert\n  1861 |         expect(markup).toContain(\"<span class=\\\"mord textsf\\\">G</span>\");\n  1862 |         expect(markup).toContain(\"<span class=\\\"mord textsf textbf\\\">B</span>\");\n  1863 |     });","start":{"line":1860,"column":8,"index":62393}},{"frame":"  1859 |         const markup = katex.renderToString(r`\\textsf{\\textit{R}G\\textbf{B}}`);\n  1860 |         expect(markup).toContain(\"<span class=\\\"mord textsf textit\\\">R</span>\");\n> 1861 |         expect(markup).toContain(\"<span class=\\\"mord textsf\\\">G</span>\");\n       |        ^ Duplicate Assert\n  1862 |         expect(markup).toContain(\"<span class=\\\"mord textsf textbf\\\">B</span>\");\n  1863 |     });\n  1864 |","start":{"line":1861,"column":8,"index":62474}},{"frame":"  1860 |         expect(markup).toContain(\"<span class=\\\"mord textsf textit\\\">R</span>\");\n  1861 |         expect(markup).toContain(\"<span class=\\\"mord textsf\\\">G</span>\");\n> 1862 |         expect(markup).toContain(\"<span class=\\\"mord textsf textbf\\\">B</span>\");\n       |        ^ Duplicate Assert\n  1863 |     });\n  1864 |\n  1865 |     it(\"should render \\\\textsf{\\\\textbf{$\\\\mathrm{A}$}} with the correct font\", function() {","start":{"line":1862,"column":8,"index":62548}},{"frame":"  1881 |         let markup = katex.renderToString(r`\\textcolor{blue}{\\mathbb R}`);\n  1882 |         let span = \"<span class=\\\"mord mathbb\\\" style=\\\"color:blue;\\\">R</span>\";\n> 1883 |         expect(markup).toContain(span);\n       |        ^ Duplicate Assert\n  1884 |\n  1885 |         markup = katex.renderToString(r`\\mathbb{\\textcolor{blue}{R}}`);\n  1886 |         span = \"<span class=\\\"mord mathbb\\\" style=\\\"color:blue;\\\">R</span>\";","start":{"line":1883,"column":8,"index":63623}},{"frame":"  1881 |         let markup = katex.renderToString(r`\\textcolor{blue}{\\mathbb R}`);\n  1882 |         let span = \"<span class=\\\"mord mathbb\\\" style=\\\"color:blue;\\\">R</span>\";\n> 1883 |         expect(markup).toContain(span);\n       |        ^ Duplicate Assert\n  1884 |\n  1885 |         markup = katex.renderToString(r`\\mathbb{\\textcolor{blue}{R}}`);\n  1886 |         span = \"<span class=\\\"mord mathbb\\\" style=\\\"color:blue;\\\">R</span>\";","start":{"line":1883,"column":8,"index":63623}},{"frame":"  1885 |         markup = katex.renderToString(r`\\mathbb{\\textcolor{blue}{R}}`);\n  1886 |         span = \"<span class=\\\"mord mathbb\\\" style=\\\"color:blue;\\\">R</span>\";\n> 1887 |         expect(markup).toContain(span);\n       |        ^ Duplicate Assert\n  1888 |     });\n  1889 |\n  1890 |     it(\"should render wide characters with mord and with the correct font\", function() {","start":{"line":1887,"column":8,"index":63813}},{"frame":"  1885 |         markup = katex.renderToString(r`\\mathbb{\\textcolor{blue}{R}}`);\n  1886 |         span = \"<span class=\\\"mord mathbb\\\" style=\\\"color:blue;\\\">R</span>\";\n> 1887 |         expect(markup).toContain(span);\n       |        ^ Duplicate Assert\n  1888 |     });\n  1889 |\n  1890 |     it(\"should render wide characters with mord and with the correct font\", function() {","start":{"line":1887,"column":8,"index":63813}},{"frame":"  2078 |             \"<mi mathvariant=\\\"double-struck\\\">R</mi>\" +\n  2079 |             \"</mstyle>\";\n> 2080 |         expect(markup).toContain(node);\n       |        ^ Duplicate Assert\n  2081 |\n  2082 |         // reverse the order of the commands\n  2083 |         tex = r`\\mathbb{\\textcolor{blue}{R}}`;","start":{"line":2080,"column":8,"index":74086}},{"frame":"  2078 |             \"<mi mathvariant=\\\"double-struck\\\">R</mi>\" +\n  2079 |             \"</mstyle>\";\n> 2080 |         expect(markup).toContain(node);\n       |        ^ Duplicate Assert\n  2081 |\n  2082 |         // reverse the order of the commands\n  2083 |         tex = r`\\mathbb{\\textcolor{blue}{R}}`;","start":{"line":2080,"column":8,"index":74086}},{"frame":"  2087 |             \"<mi mathvariant=\\\"double-struck\\\">R</mi>\" +\n  2088 |             \"</mstyle>\";\n> 2089 |         expect(markup).toContain(node);\n       |        ^ Duplicate Assert\n  2090 |     });\n  2091 |\n  2092 |     it(\"should render text as <mtext>\", function() {","start":{"line":2089,"column":8,"index":74447}},{"frame":"  2087 |             \"<mi mathvariant=\\\"double-struck\\\">R</mi>\" +\n  2088 |             \"</mstyle>\";\n> 2089 |         expect(markup).toContain(node);\n       |        ^ Duplicate Assert\n  2090 |     });\n  2091 |\n  2092 |     it(\"should render text as <mtext>\", function() {","start":{"line":2089,"column":8,"index":74447}},{"frame":"  2101 |         const tree = getParsed(tex);\n  2102 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();\n> 2103 |         expect(markup).toContain(\"<mrow><mtext>graph:\\u00a0</mtext>\");\n       |        ^ Duplicate Assert\n  2104 |         expect(markup).toContain(\n  2105 |             \"<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>\");\n  2106 |     });","start":{"line":2103,"column":8,"index":75008}},{"frame":"  2102 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();\n  2103 |         expect(markup).toContain(\"<mrow><mtext>graph:\\u00a0</mtext>\");\n> 2104 |         expect(markup).toContain(\n       |        ^ Duplicate Assert\n  2105 |             \"<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>\");\n  2106 |     });\n  2107 | });","start":{"line":2104,"column":8,"index":75079}},{"frame":"  2199 |         const built = getBuilt`+ x`;\n  2200 |\n> 2201 |         expect(built[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2202 |         expect(built[0].classes).not.toContain(\"mbin\");\n  2203 |     });\n  2204 |","start":{"line":2201,"column":8,"index":78642}},{"frame":"  2200 |\n  2201 |         expect(built[0].classes).toContain(\"mord\");\n> 2202 |         expect(built[0].classes).not.toContain(\"mbin\");\n       |        ^ Duplicate Assert\n  2203 |     });\n  2204 |\n  2205 |     it(\"should create ords after some other objects\", function() {","start":{"line":2202,"column":8,"index":78694}},{"frame":"  2234 |         const markup = katex.renderToString(r`\\sigma^2`);\n  2235 |         expect(markup.indexOf(\"<span\")).toBe(0);\n> 2236 |         expect(markup).toContain(\"\\u03c3\");  // sigma\n       |        ^ Duplicate Assert\n  2237 |         expect(markup).toContain(\"margin-right\");\n  2238 |         expect(markup).not.toContain(\"marginRight\");\n  2239 |     });","start":{"line":2236,"column":8,"index":80210}},{"frame":"  2235 |         expect(markup.indexOf(\"<span\")).toBe(0);\n  2236 |         expect(markup).toContain(\"\\u03c3\");  // sigma\n> 2237 |         expect(markup).toContain(\"margin-right\");\n       |        ^ Duplicate Assert\n  2238 |         expect(markup).not.toContain(\"marginRight\");\n  2239 |     });\n  2240 |","start":{"line":2237,"column":8,"index":80264}},{"frame":"  2236 |         expect(markup).toContain(\"\\u03c3\");  // sigma\n  2237 |         expect(markup).toContain(\"margin-right\");\n> 2238 |         expect(markup).not.toContain(\"marginRight\");\n       |        ^ Duplicate Assert\n  2239 |     });\n  2240 |\n  2241 |     it(\"generates both MathML and HTML\", function() {","start":{"line":2238,"column":8,"index":80314}},{"frame":"  2242 |         const markup = katex.renderToString(\"a\");\n  2243 |\n> 2244 |         expect(markup).toContain(\"<span\");\n       |        ^ Duplicate Assert\n  2245 |         expect(markup).toContain(\"<math\");\n  2246 |     });\n  2247 | });","start":{"line":2244,"column":8,"index":80481}},{"frame":"  2243 |\n  2244 |         expect(markup).toContain(\"<span\");\n> 2245 |         expect(markup).toContain(\"<math\");\n       |        ^ Duplicate Assert\n  2246 |     });\n  2247 | });\n  2248 |","start":{"line":2245,"column":8,"index":80524}},{"frame":"  2295 |     it(\"should produce mords\", function() {\n  2296 |         expect(getBuilt`\\vec x`[0].classes).toContain(\"mord\");\n> 2297 |         expect(getBuilt`\\vec +`[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2298 |         expect(getBuilt`\\vec +`[0].classes).not.toContain(\"mbin\");\n  2299 |         expect(getBuilt`\\vec )^2`[0].classes).toContain(\"mord\");\n  2300 |         expect(getBuilt`\\vec )^2`[0].classes).not.toContain(\"mclose\");","start":{"line":2297,"column":8,"index":81987}},{"frame":"  2296 |         expect(getBuilt`\\vec x`[0].classes).toContain(\"mord\");\n  2297 |         expect(getBuilt`\\vec +`[0].classes).toContain(\"mord\");\n> 2298 |         expect(getBuilt`\\vec +`[0].classes).not.toContain(\"mbin\");\n       |        ^ Duplicate Assert\n  2299 |         expect(getBuilt`\\vec )^2`[0].classes).toContain(\"mord\");\n  2300 |         expect(getBuilt`\\vec )^2`[0].classes).not.toContain(\"mclose\");\n  2301 |     });","start":{"line":2298,"column":8,"index":82050}},{"frame":"  2297 |         expect(getBuilt`\\vec +`[0].classes).toContain(\"mord\");\n  2298 |         expect(getBuilt`\\vec +`[0].classes).not.toContain(\"mbin\");\n> 2299 |         expect(getBuilt`\\vec )^2`[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2300 |         expect(getBuilt`\\vec )^2`[0].classes).not.toContain(\"mclose\");\n  2301 |     });\n  2302 | });","start":{"line":2299,"column":8,"index":82117}},{"frame":"  2298 |         expect(getBuilt`\\vec +`[0].classes).not.toContain(\"mbin\");\n  2299 |         expect(getBuilt`\\vec )^2`[0].classes).toContain(\"mord\");\n> 2300 |         expect(getBuilt`\\vec )^2`[0].classes).not.toContain(\"mclose\");\n       |        ^ Duplicate Assert\n  2301 |     });\n  2302 | });\n  2303 |","start":{"line":2300,"column":8,"index":82182}},{"frame":"  2313 |     it(\"should produce mords\", function() {\n  2314 |         expect(getBuilt`\\widehat{AB}`[0].classes).toContain(\"mord\");\n> 2315 |         expect(getBuilt`\\widehat +`[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2316 |         expect(getBuilt`\\widehat +`[0].classes).not.toContain(\"mbin\");\n  2317 |         expect(getBuilt`\\widehat )^2`[0].classes).toContain(\"mord\");\n  2318 |         expect(getBuilt`\\widehat )^2`[0].classes).not.toContain(\"mclose\");","start":{"line":2315,"column":8,"index":82699}},{"frame":"  2314 |         expect(getBuilt`\\widehat{AB}`[0].classes).toContain(\"mord\");\n  2315 |         expect(getBuilt`\\widehat +`[0].classes).toContain(\"mord\");\n> 2316 |         expect(getBuilt`\\widehat +`[0].classes).not.toContain(\"mbin\");\n       |        ^ Duplicate Assert\n  2317 |         expect(getBuilt`\\widehat )^2`[0].classes).toContain(\"mord\");\n  2318 |         expect(getBuilt`\\widehat )^2`[0].classes).not.toContain(\"mclose\");\n  2319 |     });","start":{"line":2316,"column":8,"index":82766}},{"frame":"  2315 |         expect(getBuilt`\\widehat +`[0].classes).toContain(\"mord\");\n  2316 |         expect(getBuilt`\\widehat +`[0].classes).not.toContain(\"mbin\");\n> 2317 |         expect(getBuilt`\\widehat )^2`[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2318 |         expect(getBuilt`\\widehat )^2`[0].classes).not.toContain(\"mclose\");\n  2319 |     });\n  2320 | });","start":{"line":2317,"column":8,"index":82837}},{"frame":"  2316 |         expect(getBuilt`\\widehat +`[0].classes).not.toContain(\"mbin\");\n  2317 |         expect(getBuilt`\\widehat )^2`[0].classes).toContain(\"mord\");\n> 2318 |         expect(getBuilt`\\widehat )^2`[0].classes).not.toContain(\"mclose\");\n       |        ^ Duplicate Assert\n  2319 |     });\n  2320 | });\n  2321 |","start":{"line":2318,"column":8,"index":82906}},{"frame":"  2330 |     it(\"should produce mords\", function() {\n  2331 |         expect(getBuilt`\\overrightarrow{AB}`[0].classes).toContain(\"mord\");\n> 2332 |         expect(getBuilt`\\overrightarrow +`[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2333 |         expect(getBuilt`\\overrightarrow +`[0].classes).not.toContain(\"mbin\");\n  2334 |         expect(getBuilt`\\overrightarrow )^2`[0].classes).toContain(\"mord\");\n  2335 |         expect(getBuilt`\\overrightarrow )^2`[0].classes).not.toContain(\"mclose\");","start":{"line":2332,"column":8,"index":83424}},{"frame":"  2331 |         expect(getBuilt`\\overrightarrow{AB}`[0].classes).toContain(\"mord\");\n  2332 |         expect(getBuilt`\\overrightarrow +`[0].classes).toContain(\"mord\");\n> 2333 |         expect(getBuilt`\\overrightarrow +`[0].classes).not.toContain(\"mbin\");\n       |        ^ Duplicate Assert\n  2334 |         expect(getBuilt`\\overrightarrow )^2`[0].classes).toContain(\"mord\");\n  2335 |         expect(getBuilt`\\overrightarrow )^2`[0].classes).not.toContain(\"mclose\");\n  2336 |     });","start":{"line":2333,"column":8,"index":83498}},{"frame":"  2332 |         expect(getBuilt`\\overrightarrow +`[0].classes).toContain(\"mord\");\n  2333 |         expect(getBuilt`\\overrightarrow +`[0].classes).not.toContain(\"mbin\");\n> 2334 |         expect(getBuilt`\\overrightarrow )^2`[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2335 |         expect(getBuilt`\\overrightarrow )^2`[0].classes).not.toContain(\"mclose\");\n  2336 |     });\n  2337 | });","start":{"line":2334,"column":8,"index":83576}},{"frame":"  2333 |         expect(getBuilt`\\overrightarrow +`[0].classes).not.toContain(\"mbin\");\n  2334 |         expect(getBuilt`\\overrightarrow )^2`[0].classes).toContain(\"mord\");\n> 2335 |         expect(getBuilt`\\overrightarrow )^2`[0].classes).not.toContain(\"mclose\");\n       |        ^ Duplicate Assert\n  2336 |     });\n  2337 | });\n  2338 |","start":{"line":2335,"column":8,"index":83652}},{"frame":"  2377 |     it(\"should produce mords\", function() {\n  2378 |         expect(getBuilt`\\underrightarrow x`[0].classes).toContain(\"mord\");\n> 2379 |         expect(getBuilt`\\underrightarrow +`[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2380 |         expect(getBuilt`\\underrightarrow +`[0].classes).not.toContain(\"mbin\");\n  2381 |         expect(getBuilt`\\underrightarrow )^2`[0].classes).toContain(\"mord\");\n  2382 |         expect(getBuilt`\\underrightarrow )^2`[0].classes)","start":{"line":2379,"column":8,"index":85141}},{"frame":"  2378 |         expect(getBuilt`\\underrightarrow x`[0].classes).toContain(\"mord\");\n  2379 |         expect(getBuilt`\\underrightarrow +`[0].classes).toContain(\"mord\");\n> 2380 |         expect(getBuilt`\\underrightarrow +`[0].classes).not.toContain(\"mbin\");\n       |        ^ Duplicate Assert\n  2381 |         expect(getBuilt`\\underrightarrow )^2`[0].classes).toContain(\"mord\");\n  2382 |         expect(getBuilt`\\underrightarrow )^2`[0].classes)\n  2383 |             .not.toContain(\"mclose\");","start":{"line":2380,"column":8,"index":85216}},{"frame":"  2379 |         expect(getBuilt`\\underrightarrow +`[0].classes).toContain(\"mord\");\n  2380 |         expect(getBuilt`\\underrightarrow +`[0].classes).not.toContain(\"mbin\");\n> 2381 |         expect(getBuilt`\\underrightarrow )^2`[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2382 |         expect(getBuilt`\\underrightarrow )^2`[0].classes)\n  2383 |             .not.toContain(\"mclose\");\n  2384 |     });","start":{"line":2381,"column":8,"index":85295}},{"frame":"  2380 |         expect(getBuilt`\\underrightarrow +`[0].classes).not.toContain(\"mbin\");\n  2381 |         expect(getBuilt`\\underrightarrow )^2`[0].classes).toContain(\"mord\");\n> 2382 |         expect(getBuilt`\\underrightarrow )^2`[0].classes)\n       |        ^ Duplicate Assert\n  2383 |             .not.toContain(\"mclose\");\n  2384 |     });\n  2385 | });","start":{"line":2382,"column":8,"index":85372}},{"frame":"  2419 |         expect(getBuilt`\\xrightarrow x`[0].classes).toContain(\"mrel\");\n  2420 |         expect(getBuilt`\\xrightarrow [under]{over}`[0].classes).toContain(\"mrel\");\n> 2421 |         expect(getBuilt`\\xrightarrow +`[0].classes).toContain(\"mrel\");\n       |        ^ Duplicate Assert\n  2422 |         expect(getBuilt`\\xrightarrow +`[0].classes).not.toContain(\"mbin\");\n  2423 |         expect(getBuilt`\\xrightarrow )^2`[0].classes).toContain(\"mrel\");\n  2424 |         expect(getBuilt`\\xrightarrow )^2`[0].classes).not.toContain(\"mclose\");","start":{"line":2421,"column":8,"index":86675}},{"frame":"  2420 |         expect(getBuilt`\\xrightarrow [under]{over}`[0].classes).toContain(\"mrel\");\n  2421 |         expect(getBuilt`\\xrightarrow +`[0].classes).toContain(\"mrel\");\n> 2422 |         expect(getBuilt`\\xrightarrow +`[0].classes).not.toContain(\"mbin\");\n       |        ^ Duplicate Assert\n  2423 |         expect(getBuilt`\\xrightarrow )^2`[0].classes).toContain(\"mrel\");\n  2424 |         expect(getBuilt`\\xrightarrow )^2`[0].classes).not.toContain(\"mclose\");\n  2425 |     });","start":{"line":2422,"column":8,"index":86746}},{"frame":"  2421 |         expect(getBuilt`\\xrightarrow +`[0].classes).toContain(\"mrel\");\n  2422 |         expect(getBuilt`\\xrightarrow +`[0].classes).not.toContain(\"mbin\");\n> 2423 |         expect(getBuilt`\\xrightarrow )^2`[0].classes).toContain(\"mrel\");\n       |        ^ Duplicate Assert\n  2424 |         expect(getBuilt`\\xrightarrow )^2`[0].classes).not.toContain(\"mclose\");\n  2425 |     });\n  2426 | });","start":{"line":2423,"column":8,"index":86821}},{"frame":"  2422 |         expect(getBuilt`\\xrightarrow +`[0].classes).not.toContain(\"mbin\");\n  2423 |         expect(getBuilt`\\xrightarrow )^2`[0].classes).toContain(\"mrel\");\n> 2424 |         expect(getBuilt`\\xrightarrow )^2`[0].classes).not.toContain(\"mclose\");\n       |        ^ Duplicate Assert\n  2425 |     });\n  2426 | });\n  2427 |","start":{"line":2424,"column":8,"index":86894}},{"frame":"  2460 |         expect(getBuilt`\\overbrace x`[0].classes).toContain(\"mord\");\n  2461 |         expect(getBuilt`\\overbrace{x}^2`[0].classes).toContain(\"mord\");\n> 2462 |         expect(getBuilt`\\overbrace +`[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2463 |         expect(getBuilt`\\overbrace +`[0].classes).not.toContain(\"mbin\");\n  2464 |         expect(getBuilt`\\overbrace )^2`[0].classes).toContain(\"mord\");\n  2465 |         expect(getBuilt`\\overbrace )^2`[0].classes).not.toContain(\"mclose\");","start":{"line":2462,"column":8,"index":88139}},{"frame":"  2461 |         expect(getBuilt`\\overbrace{x}^2`[0].classes).toContain(\"mord\");\n  2462 |         expect(getBuilt`\\overbrace +`[0].classes).toContain(\"mord\");\n> 2463 |         expect(getBuilt`\\overbrace +`[0].classes).not.toContain(\"mbin\");\n       |        ^ Duplicate Assert\n  2464 |         expect(getBuilt`\\overbrace )^2`[0].classes).toContain(\"mord\");\n  2465 |         expect(getBuilt`\\overbrace )^2`[0].classes).not.toContain(\"mclose\");\n  2466 |     });","start":{"line":2463,"column":8,"index":88208}},{"frame":"  2462 |         expect(getBuilt`\\overbrace +`[0].classes).toContain(\"mord\");\n  2463 |         expect(getBuilt`\\overbrace +`[0].classes).not.toContain(\"mbin\");\n> 2464 |         expect(getBuilt`\\overbrace )^2`[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2465 |         expect(getBuilt`\\overbrace )^2`[0].classes).not.toContain(\"mclose\");\n  2466 |     });\n  2467 | });","start":{"line":2464,"column":8,"index":88281}},{"frame":"  2463 |         expect(getBuilt`\\overbrace +`[0].classes).not.toContain(\"mbin\");\n  2464 |         expect(getBuilt`\\overbrace )^2`[0].classes).toContain(\"mord\");\n> 2465 |         expect(getBuilt`\\overbrace )^2`[0].classes).not.toContain(\"mclose\");\n       |        ^ Duplicate Assert\n  2466 |     });\n  2467 | });\n  2468 |","start":{"line":2465,"column":8,"index":88352}},{"frame":"  2492 |     it(\"should produce mords\", function() {\n  2493 |         expect(getBuilt`\\boxed x`[0].classes).toContain(\"mord\");\n> 2494 |         expect(getBuilt`\\boxed +`[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2495 |         expect(getBuilt`\\boxed +`[0].classes).not.toContain(\"mbin\");\n  2496 |         expect(getBuilt`\\boxed )^2`[0].classes).toContain(\"mord\");\n  2497 |         expect(getBuilt`\\boxed )^2`[0].classes).not.toContain(\"mclose\");","start":{"line":2494,"column":8,"index":89188}},{"frame":"  2493 |         expect(getBuilt`\\boxed x`[0].classes).toContain(\"mord\");\n  2494 |         expect(getBuilt`\\boxed +`[0].classes).toContain(\"mord\");\n> 2495 |         expect(getBuilt`\\boxed +`[0].classes).not.toContain(\"mbin\");\n       |        ^ Duplicate Assert\n  2496 |         expect(getBuilt`\\boxed )^2`[0].classes).toContain(\"mord\");\n  2497 |         expect(getBuilt`\\boxed )^2`[0].classes).not.toContain(\"mclose\");\n  2498 |     });","start":{"line":2495,"column":8,"index":89253}},{"frame":"  2494 |         expect(getBuilt`\\boxed +`[0].classes).toContain(\"mord\");\n  2495 |         expect(getBuilt`\\boxed +`[0].classes).not.toContain(\"mbin\");\n> 2496 |         expect(getBuilt`\\boxed )^2`[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2497 |         expect(getBuilt`\\boxed )^2`[0].classes).not.toContain(\"mclose\");\n  2498 |     });\n  2499 | });","start":{"line":2496,"column":8,"index":89322}},{"frame":"  2495 |         expect(getBuilt`\\boxed +`[0].classes).not.toContain(\"mbin\");\n  2496 |         expect(getBuilt`\\boxed )^2`[0].classes).toContain(\"mord\");\n> 2497 |         expect(getBuilt`\\boxed )^2`[0].classes).not.toContain(\"mclose\");\n       |        ^ Duplicate Assert\n  2498 |     });\n  2499 | });\n  2500 |","start":{"line":2497,"column":8,"index":89389}},{"frame":"  2612 |     it(\"should produce mords\", function() {\n  2613 |         expect(getBuilt`\\cancel x`[0].classes).toContain(\"mord\");\n> 2614 |         expect(getBuilt`\\cancel +`[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2615 |         expect(getBuilt`\\cancel +`[0].classes).not.toContain(\"mbin\");\n  2616 |         expect(getBuilt`\\cancel )^2`[0].classes).toContain(\"mord\");\n  2617 |         expect(getBuilt`\\cancel )^2`[0].classes).not.toContain(\"mclose\");","start":{"line":2614,"column":8,"index":93178}},{"frame":"  2613 |         expect(getBuilt`\\cancel x`[0].classes).toContain(\"mord\");\n  2614 |         expect(getBuilt`\\cancel +`[0].classes).toContain(\"mord\");\n> 2615 |         expect(getBuilt`\\cancel +`[0].classes).not.toContain(\"mbin\");\n       |        ^ Duplicate Assert\n  2616 |         expect(getBuilt`\\cancel )^2`[0].classes).toContain(\"mord\");\n  2617 |         expect(getBuilt`\\cancel )^2`[0].classes).not.toContain(\"mclose\");\n  2618 |     });","start":{"line":2615,"column":8,"index":93244}},{"frame":"  2614 |         expect(getBuilt`\\cancel +`[0].classes).toContain(\"mord\");\n  2615 |         expect(getBuilt`\\cancel +`[0].classes).not.toContain(\"mbin\");\n> 2616 |         expect(getBuilt`\\cancel )^2`[0].classes).toContain(\"mord\");\n       |        ^ Duplicate Assert\n  2617 |         expect(getBuilt`\\cancel )^2`[0].classes).not.toContain(\"mclose\");\n  2618 |     });\n  2619 | });","start":{"line":2616,"column":8,"index":93314}},{"frame":"  2615 |         expect(getBuilt`\\cancel +`[0].classes).not.toContain(\"mbin\");\n  2616 |         expect(getBuilt`\\cancel )^2`[0].classes).toContain(\"mord\");\n> 2617 |         expect(getBuilt`\\cancel )^2`[0].classes).not.toContain(\"mclose\");\n       |        ^ Duplicate Assert\n  2618 |     });\n  2619 | });\n  2620 |","start":{"line":2617,"column":8,"index":93382}},{"frame":"  3463 |     it(\"\\\\char produces literal characters\", () => {\n  3464 |         expect(\"\\\\char`a\").toParseLike(\"\\\\char`\\\\a\");\n> 3465 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char37`;\n       |        ^ Duplicate Assert\n  3466 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char'45`;\n  3467 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char\"25`;\n  3468 |         expect`\\char`.not.toParse();","start":{"line":3465,"column":8,"index":126522}},{"frame":"  3464 |         expect(\"\\\\char`a\").toParseLike(\"\\\\char`\\\\a\");\n  3465 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char37`;\n> 3466 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char'45`;\n       |        ^ Duplicate Assert\n  3467 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char\"25`;\n  3468 |         expect`\\char`.not.toParse();\n  3469 |         expect(\"\\\\char`\").not.toParse();","start":{"line":3466,"column":8,"index":126573}},{"frame":"  3465 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char37`;\n  3466 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char'45`;\n> 3467 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char\"25`;\n       |        ^ Duplicate Assert\n  3468 |         expect`\\char`.not.toParse();\n  3469 |         expect(\"\\\\char`\").not.toParse();\n  3470 |         expect`\\char'`.not.toParse();","start":{"line":3467,"column":8,"index":126625}},{"frame":"  4097 |         const example = exp32 + r`\\a{1}`;\n  4098 |         const count = 1 + 2 + 4 + 8 + 16 + 32;\n> 4099 |         expect(example).toParse(new Settings({maxExpand: count}));\n       |        ^ Duplicate Assert\n  4100 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));\n  4101 |     });\n  4102 |","start":{"line":4099,"column":8,"index":152747}},{"frame":"  4098 |         const count = 1 + 2 + 4 + 8 + 16 + 32;\n  4099 |         expect(example).toParse(new Settings({maxExpand: count}));\n> 4100 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));\n       |        ^ Duplicate Assert\n  4101 |     });\n  4102 |\n  4103 |     it(\"should count correctly with Unicode sub/superscripts\", () => {","start":{"line":4100,"column":8,"index":152814}},{"frame":"  4104 |         const example = exp32 + r`\\def+{\\a{1}}x⁺x⁺x⁺x⁺`;\n  4105 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;\n> 4106 |         expect(example).toParse(new Settings({maxExpand: count}));\n       |        ^ Duplicate Assert\n  4107 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));\n  4108 |     });\n  4109 | });","start":{"line":4106,"column":8,"index":153083}},{"frame":"  4105 |         const count = (1 + 2 + 4 + 8 + 16 + 32) * 4 + 4;\n  4106 |         expect(example).toParse(new Settings({maxExpand: count}));\n> 4107 |         expect(example).not.toParse(new Settings({maxExpand: count - 1}));\n       |        ^ Duplicate Assert\n  4108 |     });\n  4109 | });\n  4110 |","start":{"line":4107,"column":8,"index":153150}},{"frame":"  4147 |         // Ensure newlines appear outside base spans (because, in this regexp,\n  4148 |         // base span occurs immediately after each newline span).\n> 4149 |         expect(markup).toMatch(\n       |        ^ Duplicate Assert\n  4150 |             /(<span class=\"base\">.*?<\\/span><span class=\"mspace newline\"><\\/span>){3}<span class=\"base\">/);\n  4151 |         expect(markup).toMatchSnapshot();\n  4152 |     });","start":{"line":4149,"column":8,"index":154797}},{"frame":"  4149 |         expect(markup).toMatch(\n  4150 |             /(<span class=\"base\">.*?<\\/span><span class=\"mspace newline\"><\\/span>){3}<span class=\"base\">/);\n> 4151 |         expect(markup).toMatchSnapshot();\n       |        ^ Duplicate Assert\n  4152 |     });\n  4153 | });\n  4154 |","start":{"line":4151,"column":8,"index":154937}}]},{"name":"Eager Test","packageName":"eagerTest","items":[{"frame":"  507 |\n  508 |     it(\"should parse cfrac, dfrac, tfrac, and genfrac as fracs\", function() {\n> 509 |         const dfracParse = getParsed(dfracExpression)[0];\n      |                           ^ Eager Test\n  510 |\n  511 |         expect(dfracParse.type).toEqual(\"genfrac\");\n  512 |         expect(dfracParse.numer).toBeDefined();","start":{"line":509,"column":27,"index":14973}},{"frame":"  513 |         expect(dfracParse.denom).toBeDefined();\n  514 |\n> 515 |         const tfracParse = getParsed(tfracExpression)[0];\n      |                           ^ Eager Test\n  516 |\n  517 |         expect(tfracParse.type).toEqual(\"genfrac\");\n  518 |         expect(tfracParse.numer).toBeDefined();","start":{"line":515,"column":27,"index":15181}},{"frame":"  519 |         expect(tfracParse.denom).toBeDefined();\n  520 |\n> 521 |         const cfracParse = getParsed(cfracExpression)[0];\n      |                           ^ Eager Test\n  522 |\n  523 |         expect(cfracParse.type).toEqual(\"genfrac\");\n  524 |         expect(cfracParse.numer).toBeDefined();","start":{"line":521,"column":27,"index":15389}},{"frame":"  525 |         expect(cfracParse.denom).toBeDefined();\n  526 |\n> 527 |         const genfracParse = getParsed(genfrac1)[0];\n      |                             ^ Eager Test\n  528 |\n  529 |         expect(genfracParse.type).toEqual(\"genfrac\");\n  530 |         expect(genfracParse.numer).toBeDefined();","start":{"line":527,"column":29,"index":15599}},{"frame":"  570 |         let parse;\n  571 |\n> 572 |         parse = getParsed(simpleOver)[0];\n      |                ^ Eager Test\n  573 |\n  574 |         expect(parse.type).toEqual(\"genfrac\");\n  575 |         expect(parse.numer).toBeDefined();","start":{"line":572,"column":16,"index":17053}},{"frame":"  576 |         expect(parse.denom).toBeDefined();\n  577 |\n> 578 |         parse = getParsed(complexOver)[0];\n      |                ^ Eager Test\n  579 |\n  580 |         expect(parse.type).toEqual(\"genfrac\");\n  581 |         expect(parse.numer).toBeDefined();","start":{"line":578,"column":16,"index":17230}},{"frame":"  582 |         expect(parse.denom).toBeDefined();\n  583 |\n> 584 |         const parseBraceFrac = getParsed(braceFrac)[0];\n      |                               ^ Eager Test\n  585 |\n  586 |         expect(parseBraceFrac.type).toEqual(\"genfrac\");\n  587 |         expect(parseBraceFrac.numer).toBeDefined();","start":{"line":584,"column":31,"index":17423}},{"frame":"  590 |         expect(parseBraceFrac.rightDelim).toBeDefined();\n  591 |\n> 592 |         const parseBrackFrac = getParsed(brackFrac)[0];\n      |                               ^ Eager Test\n  593 |\n  594 |         expect(parseBrackFrac.type).toEqual(\"genfrac\");\n  595 |         expect(parseBrackFrac.numer).toBeDefined();","start":{"line":592,"column":31,"index":17754}},{"frame":"  867 |\n  868 |     it(\"should correctly extract the custom color\", function() {\n> 869 |         const parse1 = getParsed(customColorExpression1)[0];\n      |                       ^ Eager Test\n  870 |         const parse2 = getParsed(customColorExpression2)[0];\n  871 |         const parse3 = getParsed(customColorExpression3)[0];\n  872 |","start":{"line":869,"column":23,"index":27715}},{"frame":"  868 |     it(\"should correctly extract the custom color\", function() {\n  869 |         const parse1 = getParsed(customColorExpression1)[0];\n> 870 |         const parse2 = getParsed(customColorExpression2)[0];\n      |                       ^ Eager Test\n  871 |         const parse3 = getParsed(customColorExpression3)[0];\n  872 |\n  873 |         expect(parse1.color).toEqual(\"#fA6\");","start":{"line":870,"column":23,"index":27776}},{"frame":"  869 |         const parse1 = getParsed(customColorExpression1)[0];\n  870 |         const parse2 = getParsed(customColorExpression2)[0];\n> 871 |         const parse3 = getParsed(customColorExpression3)[0];\n      |                       ^ Eager Test\n  872 |\n  873 |         expect(parse1.color).toEqual(\"#fA6\");\n  874 |         expect(parse2.color).toEqual(\"#fA6fA6\");","start":{"line":871,"column":23,"index":27837}},{"frame":"  967 |\n  968 |     it(\"should produce the correct direction delimiter\", function() {\n> 969 |         const leftParse = getParsed(normalDelim)[0];\n      |                          ^ Eager Test\n  970 |         const rightParse = getParsed(bigDelim)[0];\n  971 |\n  972 |         expect(leftParse.mclass).toEqual(\"mopen\");","start":{"line":969,"column":26,"index":30787}},{"frame":"  968 |     it(\"should produce the correct direction delimiter\", function() {\n  969 |         const leftParse = getParsed(normalDelim)[0];\n> 970 |         const rightParse = getParsed(bigDelim)[0];\n      |                           ^ Eager Test\n  971 |\n  972 |         expect(leftParse.mclass).toEqual(\"mopen\");\n  973 |         expect(rightParse.mclass).toEqual(\"mclose\");","start":{"line":970,"column":27,"index":30841}},{"frame":"  975 |\n  976 |     it(\"should parse the correct size delimiter\", function() {\n> 977 |         const smallParse = getParsed(normalDelim)[0];\n      |                           ^ Eager Test\n  978 |         const bigParse = getParsed(bigDelim)[0];\n  979 |\n  980 |         expect(smallParse.size).toEqual(1);","start":{"line":977,"column":27,"index":31069}},{"frame":"  976 |     it(\"should parse the correct size delimiter\", function() {\n  977 |         const smallParse = getParsed(normalDelim)[0];\n> 978 |         const bigParse = getParsed(bigDelim)[0];\n      |                         ^ Eager Test\n  979 |\n  980 |         expect(smallParse.size).toEqual(1);\n  981 |         expect(bigParse.size).toEqual(4);","start":{"line":978,"column":25,"index":31121}},{"frame":"  1056 |\n  1057 |     it(\"should list the correct units\", function() {\n> 1058 |         const emParse = getParsed(emRule)[0];\n       |                        ^ Eager Test\n  1059 |         const exParse = getParsed(exRule)[0];\n  1060 |\n  1061 |         expect(emParse.width.unit).toEqual(\"em\");","start":{"line":1058,"column":24,"index":33487}},{"frame":"  1057 |     it(\"should list the correct units\", function() {\n  1058 |         const emParse = getParsed(emRule)[0];\n> 1059 |         const exParse = getParsed(exRule)[0];\n       |                        ^ Eager Test\n  1060 |\n  1061 |         expect(emParse.width.unit).toEqual(\"em\");\n  1062 |         expect(emParse.height.unit).toEqual(\"em\");","start":{"line":1059,"column":24,"index":33533}},{"frame":"  1094 |\n  1095 |     it(\"should list the correct units\", function() {\n> 1096 |         const emParse = getParsed(emKern)[0];\n       |                        ^ Eager Test\n  1097 |         const exParse = getParsed(exKern)[0];\n  1098 |         const muParse = getParsed(muKern)[0];\n  1099 |         const abParse = getParsed(abKern)[1];","start":{"line":1096,"column":24,"index":34703}},{"frame":"  1095 |     it(\"should list the correct units\", function() {\n  1096 |         const emParse = getParsed(emKern)[0];\n> 1097 |         const exParse = getParsed(exKern)[0];\n       |                        ^ Eager Test\n  1098 |         const muParse = getParsed(muKern)[0];\n  1099 |         const abParse = getParsed(abKern)[1];\n  1100 |","start":{"line":1097,"column":24,"index":34749}},{"frame":"  1096 |         const emParse = getParsed(emKern)[0];\n  1097 |         const exParse = getParsed(exKern)[0];\n> 1098 |         const muParse = getParsed(muKern)[0];\n       |                        ^ Eager Test\n  1099 |         const abParse = getParsed(abKern)[1];\n  1100 |\n  1101 |         expect(emParse.dimension.unit).toEqual(\"em\");","start":{"line":1098,"column":24,"index":34795}},{"frame":"  1097 |         const exParse = getParsed(exKern)[0];\n  1098 |         const muParse = getParsed(muKern)[0];\n> 1099 |         const abParse = getParsed(abKern)[1];\n       |                        ^ Eager Test\n  1100 |\n  1101 |         expect(emParse.dimension.unit).toEqual(\"em\");\n  1102 |         expect(exParse.dimension.unit).toEqual(\"ex\");","start":{"line":1099,"column":24,"index":34841}},{"frame":"  1132 |\n  1133 |     it(\"should list the correct units\", function() {\n> 1134 |         const emParse = getParsed(emKern)[0];\n       |                        ^ Eager Test\n  1135 |         const exParse = getParsed(exKern)[0];\n  1136 |         const muParse = getParsed(muKern)[0];\n  1137 |         const abParse1 = getParsed(abKern1)[1];","start":{"line":1134,"column":24,"index":35986}},{"frame":"  1133 |     it(\"should list the correct units\", function() {\n  1134 |         const emParse = getParsed(emKern)[0];\n> 1135 |         const exParse = getParsed(exKern)[0];\n       |                        ^ Eager Test\n  1136 |         const muParse = getParsed(muKern)[0];\n  1137 |         const abParse1 = getParsed(abKern1)[1];\n  1138 |         const abParse2 = getParsed(abKern2)[1];","start":{"line":1135,"column":24,"index":36032}},{"frame":"  1134 |         const emParse = getParsed(emKern)[0];\n  1135 |         const exParse = getParsed(exKern)[0];\n> 1136 |         const muParse = getParsed(muKern)[0];\n       |                        ^ Eager Test\n  1137 |         const abParse1 = getParsed(abKern1)[1];\n  1138 |         const abParse2 = getParsed(abKern2)[1];\n  1139 |         const abParse3 = getParsed(abKern3)[1];","start":{"line":1136,"column":24,"index":36078}},{"frame":"  1135 |         const exParse = getParsed(exKern)[0];\n  1136 |         const muParse = getParsed(muKern)[0];\n> 1137 |         const abParse1 = getParsed(abKern1)[1];\n       |                         ^ Eager Test\n  1138 |         const abParse2 = getParsed(abKern2)[1];\n  1139 |         const abParse3 = getParsed(abKern3)[1];\n  1140 |","start":{"line":1137,"column":25,"index":36125}},{"frame":"  1136 |         const muParse = getParsed(muKern)[0];\n  1137 |         const abParse1 = getParsed(abKern1)[1];\n> 1138 |         const abParse2 = getParsed(abKern2)[1];\n       |                         ^ Eager Test\n  1139 |         const abParse3 = getParsed(abKern3)[1];\n  1140 |\n  1141 |         expect(emParse.dimension.unit).toEqual(\"em\");","start":{"line":1138,"column":25,"index":36173}},{"frame":"  1137 |         const abParse1 = getParsed(abKern1)[1];\n  1138 |         const abParse2 = getParsed(abKern2)[1];\n> 1139 |         const abParse3 = getParsed(abKern3)[1];\n       |                         ^ Eager Test\n  1140 |\n  1141 |         expect(emParse.dimension.unit).toEqual(\"em\");\n  1142 |         expect(exParse.dimension.unit).toEqual(\"ex\");","start":{"line":1139,"column":25,"index":36221}},{"frame":"  1148 |\n  1149 |     it(\"should parse elements on either side of a kern\", function() {\n> 1150 |         const abParse1 = getParsed(abKern1);\n       |                         ^ Eager Test\n  1151 |         const abParse2 = getParsed(abKern2);\n  1152 |         const abParse3 = getParsed(abKern3);\n  1153 |","start":{"line":1150,"column":25,"index":36676}},{"frame":"  1149 |     it(\"should parse elements on either side of a kern\", function() {\n  1150 |         const abParse1 = getParsed(abKern1);\n> 1151 |         const abParse2 = getParsed(abKern2);\n       |                         ^ Eager Test\n  1152 |         const abParse3 = getParsed(abKern3);\n  1153 |\n  1154 |         expect(abParse1).toHaveLength(3);","start":{"line":1151,"column":25,"index":36721}},{"frame":"  1150 |         const abParse1 = getParsed(abKern1);\n  1151 |         const abParse2 = getParsed(abKern2);\n> 1152 |         const abParse3 = getParsed(abKern3);\n       |                         ^ Eager Test\n  1153 |\n  1154 |         expect(abParse1).toHaveLength(3);\n  1155 |         expect(abParse1[0].text).toEqual(\"a\");","start":{"line":1152,"column":25,"index":36766}},{"frame":"  2073 |     it(\"should render a combination of font and color changes\", function() {\n  2074 |         let tex = r`\\textcolor{blue}{\\mathbb R}`;\n> 2075 |         let tree = getParsed(tex);\n       |                   ^ Eager Test\n  2076 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();\n  2077 |         let node = \"<mstyle mathcolor=\\\"blue\\\">\" +\n  2078 |             \"<mi mathvariant=\\\"double-struck\\\">R</mi>\" +","start":{"line":2075,"column":19,"index":73857}},{"frame":"  2082 |         // reverse the order of the commands\n  2083 |         tex = r`\\mathbb{\\textcolor{blue}{R}}`;\n> 2084 |         tree = getParsed(tex);\n       |               ^ Eager Test\n  2085 |         markup = buildMathML(tree, tex, defaultOptions).toMarkup();\n  2086 |         node = \"<mstyle mathcolor=\\\"blue\\\">\" +\n  2087 |             \"<mi mathvariant=\\\"double-struck\\\">R</mi>\" +","start":{"line":2084,"column":15,"index":74226}},{"frame":"  2990 |     it(\"should allow letters [#$%&~_^] without escaping\", function() {\n  2991 |         const url = \"http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz\";\n> 2992 |         const parsed1 = getParsed(`\\\\href{${url}}{\\\\alpha}`, trustSettings)[0];\n       |                        ^ Eager Test\n  2993 |         expect(parsed1.href).toBe(url);\n  2994 |         const parsed2 = getParsed(`\\\\url{${url}}`, trustSettings)[0];\n  2995 |         expect(parsed2.href).toBe(url);","start":{"line":2992,"column":24,"index":108081}},{"frame":"  2992 |         const parsed1 = getParsed(`\\\\href{${url}}{\\\\alpha}`, trustSettings)[0];\n  2993 |         expect(parsed1.href).toBe(url);\n> 2994 |         const parsed2 = getParsed(`\\\\url{${url}}`, trustSettings)[0];\n       |                        ^ Eager Test\n  2995 |         expect(parsed2.href).toBe(url);\n  2996 |     });\n  2997 |","start":{"line":2994,"column":24,"index":108201}},{"frame":"  2998 |     it(\"should allow balanced braces in url\", function() {\n  2999 |         const url = \"http://example.org/{{}t{oo}}\";\n> 3000 |         const parsed1 = getParsed(`\\\\href{${url}}{\\\\alpha}`, trustSettings)[0];\n       |                        ^ Eager Test\n  3001 |         expect(parsed1.href).toBe(url);\n  3002 |         const parsed2 = getParsed(`\\\\url{${url}}`, trustSettings)[0];\n  3003 |         expect(parsed2.href).toBe(url);","start":{"line":3000,"column":24,"index":108431}},{"frame":"  3000 |         const parsed1 = getParsed(`\\\\href{${url}}{\\\\alpha}`, trustSettings)[0];\n  3001 |         expect(parsed1.href).toBe(url);\n> 3002 |         const parsed2 = getParsed(`\\\\url{${url}}`, trustSettings)[0];\n       |                        ^ Eager Test\n  3003 |         expect(parsed2.href).toBe(url);\n  3004 |     });\n  3005 |","start":{"line":3002,"column":24,"index":108551}},{"frame":"  3014 |         const url = \"http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz\";\n  3015 |         const input = url.replace(/([#$%&~_^{}])/g, '\\\\$1');\n> 3016 |         const parsed1 = getParsed(`\\\\href{${input}}{\\\\alpha}`, trustSettings)[0];\n       |                        ^ Eager Test\n  3017 |         expect(parsed1.href).toBe(url);\n  3018 |         const parsed2 = getParsed(`\\\\url{${input}}`, trustSettings)[0];\n  3019 |         expect(parsed2.href).toBe(url);","start":{"line":3016,"column":24,"index":109205}},{"frame":"  3016 |         const parsed1 = getParsed(`\\\\href{${input}}{\\\\alpha}`, trustSettings)[0];\n  3017 |         expect(parsed1.href).toBe(url);\n> 3018 |         const parsed2 = getParsed(`\\\\url{${input}}`, trustSettings)[0];\n       |                        ^ Eager Test\n  3019 |         expect(parsed2.href).toBe(url);\n  3020 |     });\n  3021 |","start":{"line":3018,"column":24,"index":109327}}]},{"name":"Exception Handling","packageName":"exceptionHandling","items":[{"frame":"  2171 |     it(\"should throw Error when HTML attribute name is invalid\", function() {\n  2172 |         for (const char of [\">\", \" \", \"\\t\", \"\\n\", \"\\r\", \"\\\"\", \"'\", \"/\"]) {\n> 2173 |             try {\n       |            ^ Exception Handling\n  2174 |                 katex.renderToString(\n  2175 |                     `\\\\htmlData{a${char}b=foo}{bar}`, trustNonStrictSettings);\n  2176 |","start":{"line":2173,"column":12,"index":77668}},{"frame":"  2736 | describe(\"A parser error\", function() {\n  2737 |     it(\"should report the position of an error\", function() {\n> 2738 |         try {\n       |        ^ Exception Handling\n  2739 |             parseTree(r`\\sqrt}`, new Settings());\n  2740 |         } catch (e) {\n  2741 |             expect(e.position).toEqual(5);","start":{"line":2738,"column":8,"index":97299}},{"frame":"  3155 | describe(\"ParseError properties\", function() {\n  3156 |     it(\"should contain affected position and length information\", function() {\n> 3157 |         try {\n       |        ^ Exception Handling\n  3158 |             katex.renderToString(\"1 + \\\\fraq{}{}\");\n  3159 |\n  3160 |             // Render is expected to throw, so this should not be called.","start":{"line":3157,"column":8,"index":114764}},{"frame":"  3170 |\n  3171 |     it(\"should contain position and length information at end of input\", function() {\n> 3172 |         try {\n       |        ^ Exception Handling\n  3173 |             katex.renderToString(\"\\\\frac{}\");\n  3174 |\n  3175 |             // Render is expected to throw, so this should not be called.","start":{"line":3172,"column":8,"index":115427}},{"frame":"  3185 |\n  3186 |     it(\"should contain no position and length information if unavailable\", function() {\n> 3187 |         try {\n       |        ^ Exception Handling\n  3188 |             katex.renderToString(\"\\\\verb|hello\\nworld|\");\n  3189 |\n  3190 |             // Render is expected to throw, so this should not be called.","start":{"line":3187,"column":8,"index":116123}}]},{"name":"Lazy Test","packageName":"lazyTest","items":[{"frame":"  42 |\n  43 |     it(\"should build a list of ords\", function() {\n> 44 |         const parse = getParsed(expression);\n     |                      ^ Lazy Test\n  45 |\n  46 |         for (let i = 0; i < parse.length; i++) {\n  47 |             const group = parse[i];","start":{"line":44,"column":22,"index":1225}},{"frame":"  51 |\n  52 |     it(\"should parse the right number of ords\", function() {\n> 53 |         const parse = getParsed(expression);\n     |                      ^ Lazy Test\n  54 |\n  55 |         expect(parse).toHaveLength(expression.length);\n  56 |     });","start":{"line":53,"column":22,"index":1483}},{"frame":"  65 |\n  66 |     it(\"should build a list of bins\", function() {\n> 67 |         const parse = getParsed(expression);\n     |                      ^ Lazy Test\n  68 |\n  69 |         for (let i = 0; i < parse.length; i++) {\n  70 |             const group = parse[i];","start":{"line":67,"column":22,"index":1816}},{"frame":"  85 |\n  86 |     it(\"should build a list of rels\", function() {\n> 87 |         const parse = getParsed(expression);\n     |                      ^ Lazy Test\n  88 |\n  89 |         for (let i = 0; i < parse.length; i++) {\n  90 |             let group = parse[i];","start":{"line":87,"column":22,"index":2411}},{"frame":"  111 |     it(\"should return one group, not a fragment\", function() {\n  112 |         const contents = \"\\\\mathinner{\\\\langle{\\\\psi}\\\\rangle}\";\n> 113 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);\n      |                                ^ Lazy Test\n  114 |         expect(mml.children.length).toEqual(1);\n  115 |     });\n  116 | });","start":{"line":113,"column":32,"index":3312}},{"frame":"  124 |\n  125 |     it(\"should build a list of puncts\", function() {\n> 126 |         const parse = getParsed(expression);\n      |                      ^ Lazy Test\n  127 |\n  128 |         for (let i = 0; i < parse.length; i++) {\n  129 |             const group = parse[i];","start":{"line":126,"column":22,"index":3666}},{"frame":"  142 |\n  143 |     it(\"should build a list of opens\", function() {\n> 144 |         const parse = getParsed(expression);\n      |                      ^ Lazy Test\n  145 |\n  146 |         for (let i = 0; i < parse.length; i++) {\n  147 |             const group = parse[i];","start":{"line":144,"column":22,"index":4127}},{"frame":"  160 |\n  161 |     it(\"should build a list of closes\", function() {\n> 162 |         const parse = getParsed(expression);\n      |                      ^ Lazy Test\n  163 |\n  164 |         for (let i = 0; i < parse.length; i++) {\n  165 |             const group = parse[i];","start":{"line":162,"column":22,"index":4590}},{"frame":"  491 |\n  492 |     it(\"should produce a frac\", function() {\n> 493 |         const parse = getParsed(expression)[0];\n      |                      ^ Lazy Test\n  494 |\n  495 |         expect(parse.type).toEqual(\"genfrac\");\n  496 |         expect(parse.numer).toBeDefined();","start":{"line":493,"column":22,"index":14415}},{"frame":"  507 |\n  508 |     it(\"should parse cfrac, dfrac, tfrac, and genfrac as fracs\", function() {\n> 509 |         const dfracParse = getParsed(dfracExpression)[0];\n      |                           ^ Lazy Test\n  510 |\n  511 |         expect(dfracParse.type).toEqual(\"genfrac\");\n  512 |         expect(dfracParse.numer).toBeDefined();","start":{"line":509,"column":27,"index":14973}},{"frame":"  570 |         let parse;\n  571 |\n> 572 |         parse = getParsed(simpleOver)[0];\n      |                ^ Lazy Test\n  573 |\n  574 |         expect(parse.type).toEqual(\"genfrac\");\n  575 |         expect(parse.numer).toBeDefined();","start":{"line":572,"column":16,"index":17053}},{"frame":"  600 |\n  601 |     it(\"should create a numerator from the atoms before \\\\over\", function() {\n> 602 |         const parse = getParsed(complexOver)[0];\n      |                      ^ Lazy Test\n  603 |\n  604 |         const numer = parse.numer;\n  605 |         expect(numer.body).toHaveLength(4);","start":{"line":602,"column":22,"index":18162}},{"frame":"  607 |\n  608 |     it(\"should create a denominator from the atoms after \\\\over\", function() {\n> 609 |         const parse = getParsed(complexOver)[0];\n      |                      ^ Lazy Test\n  610 |\n  611 |         const denom = parse.denom;\n  612 |         expect(denom.body).toHaveLength(4);","start":{"line":609,"column":22,"index":18379}},{"frame":"  615 |     it(\"should handle empty numerators\", function() {\n  616 |         const emptyNumerator = r`\\over x`;\n> 617 |         const parse = getParsed(emptyNumerator)[0];\n      |                      ^ Lazy Test\n  618 |         expect(parse.type).toEqual(\"genfrac\");\n  619 |         expect(parse.numer).toBeDefined();\n  620 |         expect(parse.denom).toBeDefined();","start":{"line":617,"column":22,"index":18614}},{"frame":"  623 |     it(\"should handle empty denominators\", function() {\n  624 |         const emptyDenominator = r`1 \\over`;\n> 625 |         const parse = getParsed(emptyDenominator)[0];\n      |                      ^ Lazy Test\n  626 |         expect(parse.type).toEqual(\"genfrac\");\n  627 |         expect(parse.numer).toBeDefined();\n  628 |         expect(parse.denom).toBeDefined();","start":{"line":625,"column":22,"index":18909}},{"frame":"  631 |     it(\"should handle \\\\displaystyle correctly\", function() {\n  632 |         const displaystyleExpression = r`\\displaystyle 1 \\over 2`;\n> 633 |         const parse = getParsed(displaystyleExpression)[0];\n      |                      ^ Lazy Test\n  634 |         expect(parse.type).toEqual(\"genfrac\");\n  635 |         expect(parse.numer.body[0].type).toEqual(\"styling\");\n  636 |         expect(parse.denom).toBeDefined();","start":{"line":633,"column":22,"index":19234}},{"frame":"  644 |     it(\"should handle nested factions\", function() {\n  645 |         const nestedOverExpression = r`{1 \\over 2} \\over 3`;\n> 646 |         const parse = getParsed(nestedOverExpression)[0];\n      |                      ^ Lazy Test\n  647 |         expect(parse.type).toEqual(\"genfrac\");\n  648 |         expect(parse.numer.body[0].type).toEqual(\"genfrac\");\n  649 |         expect(parse.numer.body[0].numer.body[0].text).toEqual(\"1\");","start":{"line":646,"column":22,"index":19786}},{"frame":"  693 |\n  694 |     it(\"should produce a sizing node\", function() {\n> 695 |         const parse = getParsed(sizeExpression)[0];\n      |                      ^ Lazy Test\n  696 |\n  697 |         expect(parse.type).toEqual(\"sizing\");\n  698 |         expect(parse.size).toBeDefined();","start":{"line":695,"column":22,"index":21496}},{"frame":"  717 |\n  718 |     it(\"should produce a text\", function() {\n> 719 |         const parse = getParsed(textExpression)[0];\n      |                      ^ Lazy Test\n  720 |\n  721 |         expect(parse.type).toEqual(\"text\");\n  722 |         expect(parse.body).toBeDefined();","start":{"line":719,"column":22,"index":22305}},{"frame":"  724 |\n  725 |     it(\"should produce textords instead of mathords\", function() {\n> 726 |         const parse = getParsed(textExpression)[0];\n      |                      ^ Lazy Test\n  727 |         const group = parse.body;\n  728 |\n  729 |         expect(group[0].type).toEqual(\"textord\");","start":{"line":726,"column":22,"index":22520}},{"frame":"  747 |\n  748 |     it(\"should contract spaces\", function() {\n> 749 |         const parse = getParsed(spaceTextExpression)[0];\n      |                      ^ Lazy Test\n  750 |         const group = parse.body;\n  751 |\n  752 |         expect(group.length).toEqual(4);","start":{"line":749,"column":22,"index":23183}},{"frame":"  766 |\n  767 |     it(\"should ignore a space before the text group\", function() {\n> 768 |         const parse = getParsed(leadingSpaceTextExpression)[0];\n      |                      ^ Lazy Test\n  769 |         // [m, o, o]\n  770 |         expect(parse.body).toHaveLength(3);\n  771 |         expect(parse.body.map(n => n.text).join(\"\")).toBe(\"moo\");","start":{"line":768,"column":22,"index":23859}},{"frame":"  853 |\n  854 |     it(\"should build a color node\", function() {\n> 855 |         const parse = getParsed(colorExpression)[0];\n      |                      ^ Lazy Test\n  856 |\n  857 |         expect(parse.type).toEqual(\"color\");\n  858 |         expect(parse.color).toBeDefined();","start":{"line":855,"column":22,"index":27246}},{"frame":"  867 |\n  868 |     it(\"should correctly extract the custom color\", function() {\n> 869 |         const parse1 = getParsed(customColorExpression1)[0];\n      |                       ^ Lazy Test\n  870 |         const parse2 = getParsed(customColorExpression2)[0];\n  871 |         const parse3 = getParsed(customColorExpression3)[0];\n  872 |","start":{"line":869,"column":23,"index":27715}},{"frame":"  926 |\n  927 |     it(\"should produce spacing in math mode\", function() {\n> 928 |         const parse = getParsed(mathTie);\n      |                      ^ Lazy Test\n  929 |\n  930 |         expect(parse[1].type).toEqual(\"spacing\");\n  931 |     });","start":{"line":928,"column":22,"index":29641}},{"frame":"  932 |\n  933 |     it(\"should produce spacing in text mode\", function() {\n> 934 |         const text = getParsed(textTie)[0];\n      |                     ^ Lazy Test\n  935 |         const parse = text.body;\n  936 |\n  937 |         expect(parse[1].type).toEqual(\"spacing\");","start":{"line":934,"column":21,"index":29801}},{"frame":"  939 |\n  940 |     it(\"should not contract with spaces in text mode\", function() {\n> 941 |         const text = getParsed(textTie)[0];\n      |                     ^ Lazy Test\n  942 |         const parse = text.body;\n  943 |\n  944 |         expect(parse[2].type).toEqual(\"spacing\");","start":{"line":941,"column":21,"index":30006}},{"frame":"  961 |\n  962 |     it(\"should produce a delimsizing\", function() {\n> 963 |         const parse = getParsed(normalDelim)[0];\n      |                      ^ Lazy Test\n  964 |\n  965 |         expect(parse.type).toEqual(\"delimsizing\");\n  966 |     });","start":{"line":963,"column":22,"index":30603}},{"frame":"  967 |\n  968 |     it(\"should produce the correct direction delimiter\", function() {\n> 969 |         const leftParse = getParsed(normalDelim)[0];\n      |                          ^ Lazy Test\n  970 |         const rightParse = getParsed(bigDelim)[0];\n  971 |\n  972 |         expect(leftParse.mclass).toEqual(\"mopen\");","start":{"line":969,"column":26,"index":30787}},{"frame":"  975 |\n  976 |     it(\"should parse the correct size delimiter\", function() {\n> 977 |         const smallParse = getParsed(normalDelim)[0];\n      |                           ^ Lazy Test\n  978 |         const bigParse = getParsed(bigDelim)[0];\n  979 |\n  980 |         expect(smallParse.size).toEqual(1);","start":{"line":977,"column":27,"index":31069}},{"frame":"  991 |\n  992 |     it(\"should produce an overline\", function() {\n> 993 |         const parse = getParsed(overline)[0];\n      |                      ^ Lazy Test\n  994 |\n  995 |         expect(parse.type).toEqual(\"overline\");\n  996 |     });","start":{"line":993,"column":22,"index":31484}},{"frame":"  1050 |\n  1051 |     it(\"should produce a rule\", function() {\n> 1052 |         const parse = getParsed(emRule)[0];\n       |                      ^ Lazy Test\n  1053 |\n  1054 |         expect(parse.type).toEqual(\"rule\");\n  1055 |     });","start":{"line":1052,"column":22,"index":33334}},{"frame":"  1056 |\n  1057 |     it(\"should list the correct units\", function() {\n> 1058 |         const emParse = getParsed(emRule)[0];\n       |                        ^ Lazy Test\n  1059 |         const exParse = getParsed(exRule)[0];\n  1060 |\n  1061 |         expect(emParse.width.unit).toEqual(\"em\");","start":{"line":1058,"column":24,"index":33487}},{"frame":"  1067 |\n  1068 |     it(\"should parse the number correctly\", function() {\n> 1069 |         const hardNumberParse = getParsed(hardNumberRule)[0];\n       |                                ^ Lazy Test\n  1070 |\n  1071 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);\n  1072 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);","start":{"line":1069,"column":32,"index":33857}},{"frame":"  1094 |\n  1095 |     it(\"should list the correct units\", function() {\n> 1096 |         const emParse = getParsed(emKern)[0];\n       |                        ^ Lazy Test\n  1097 |         const exParse = getParsed(exKern)[0];\n  1098 |         const muParse = getParsed(muKern)[0];\n  1099 |         const abParse = getParsed(abKern)[1];","start":{"line":1096,"column":24,"index":34703}},{"frame":"  1132 |\n  1133 |     it(\"should list the correct units\", function() {\n> 1134 |         const emParse = getParsed(emKern)[0];\n       |                        ^ Lazy Test\n  1135 |         const exParse = getParsed(exKern)[0];\n  1136 |         const muParse = getParsed(muKern)[0];\n  1137 |         const abParse1 = getParsed(abKern1)[1];","start":{"line":1134,"column":24,"index":35986}},{"frame":"  1148 |\n  1149 |     it(\"should parse elements on either side of a kern\", function() {\n> 1150 |         const abParse1 = getParsed(abKern1);\n       |                         ^ Lazy Test\n  1151 |         const abParse2 = getParsed(abKern2);\n  1152 |         const abParse3 = getParsed(abKern3);\n  1153 |","start":{"line":1150,"column":25,"index":36676}},{"frame":"  1179 |\n  1180 |     it(\"should handle whitespace\", function() {\n> 1181 |         const abParse = getParsed(\"a\\\\mkern\\t-\\r1  \\n mu\\nb\");\n       |                        ^ Lazy Test\n  1182 |\n  1183 |         expect(abParse).toHaveLength(3);\n  1184 |         expect(abParse[0].text).toEqual(\"a\");","start":{"line":1181,"column":24,"index":37751}},{"frame":"  1197 |\n  1198 |     it(\"should produce a leftright\", function() {\n> 1199 |         const parse = getParsed(normalLeftRight)[0];\n       |                      ^ Lazy Test\n  1200 |\n  1201 |         expect(parse.type).toEqual(\"leftright\");\n  1202 |         expect(parse.left).toEqual(\"(\");","start":{"line":1199,"column":22,"index":38318}},{"frame":"  1374 |\n  1375 |     it(\"should produce sqrts\", function() {\n> 1376 |         const parse = getParsed(sqrt)[0];\n       |                      ^ Lazy Test\n  1377 |\n  1378 |         expect(parse.type).toEqual(\"sqrt\");\n  1379 |     });","start":{"line":1376,"column":22,"index":44683}},{"frame":"  1573 |     it(\"should only change the style within its group\", function() {\n  1574 |         const text = r`a b { c d \\displaystyle e f } g h`;\n> 1575 |         const parse = getParsed(text);\n       |                      ^ Lazy Test\n  1576 |\n  1577 |         const displayNode = parse[2].body[2];\n  1578 |","start":{"line":1575,"column":22,"index":51103}},{"frame":"  2073 |     it(\"should render a combination of font and color changes\", function() {\n  2074 |         let tex = r`\\textcolor{blue}{\\mathbb R}`;\n> 2075 |         let tree = getParsed(tex);\n       |                   ^ Lazy Test\n  2076 |         let markup = buildMathML(tree, tex, defaultOptions).toMarkup();\n  2077 |         let node = \"<mstyle mathcolor=\\\"blue\\\">\" +\n  2078 |             \"<mi mathvariant=\\\"double-struck\\\">R</mi>\" +","start":{"line":2075,"column":19,"index":73857}},{"frame":"  2092 |     it(\"should render text as <mtext>\", function() {\n  2093 |         const tex = r`\\text{for }`;\n> 2094 |         const tree = getParsed(tex);\n       |                     ^ Lazy Test\n  2095 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();\n  2096 |         expect(markup).toContain(\"<mtext>for\\u00a0</mtext>\");\n  2097 |     });","start":{"line":2094,"column":21,"index":74598}},{"frame":"  2099 |     it(\"should render math within text as side-by-side children\", function() {\n  2100 |         const tex = r`\\text{graph: $y = mx + b$}`;\n> 2101 |         const tree = getParsed(tex);\n       |                     ^ Lazy Test\n  2102 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();\n  2103 |         expect(markup).toContain(\"<mrow><mtext>graph:\\u00a0</mtext>\");\n  2104 |         expect(markup).toContain(","start":{"line":2101,"column":21,"index":74910}},{"frame":"  2114 |\n  2115 |     it(\"should produce mords\", function() {\n> 2116 |         expect(getBuilt(img, trustSettings)[0].classes).toContain(\"mord\");\n       |               ^ Lazy Test\n  2117 |     });\n  2118 |\n  2119 |     it(\"should not render without trust setting\", function() {","start":{"line":2116,"column":15,"index":75570}},{"frame":"  2118 |\n  2119 |     it(\"should not render without trust setting\", function() {\n> 2120 |         const built = getBuilt(img);\n       |                      ^ Lazy Test\n  2121 |         expect(built).toMatchSnapshot();\n  2122 |     });\n  2123 |","start":{"line":2120,"column":22,"index":75724}},{"frame":"  2123 |\n  2124 |     it(\"should render with trust setting\", function() {\n> 2125 |         const built = getBuilt(img, trustSettings);\n       |                      ^ Lazy Test\n  2126 |         expect(built).toMatchSnapshot();\n  2127 |     });\n  2128 |","start":{"line":2125,"column":22,"index":75867}},{"frame":"  2149 |\n  2150 |     it(\"should set HTML attributes\", function() {\n> 2151 |         const built = getBuilt(html, trustNonStrictSettings);\n       |                      ^ Lazy Test\n  2152 |         expect(built[0].attributes.id).toMatch(\"bar\");\n  2153 |         expect(built[1].classes).toContain(\"foo\");\n  2154 |         expect(built[2].attributes.style).toMatch(\"color: red\");","start":{"line":2151,"column":22,"index":76813}},{"frame":"  2160 |\n  2161 |     it(\"should not affect spacing\", function() {\n> 2162 |         const built = getBuilt(\"\\\\htmlId{a}{x+}y\", trustNonStrictSettings);\n       |                      ^ Lazy Test\n  2163 |         expect(built).toMatchSnapshot();\n  2164 |     });\n  2165 |","start":{"line":2162,"column":22,"index":77220}},{"frame":"  2165 |\n  2166 |     it(\"should render with trust and strict setting\", function() {\n> 2167 |         const built = getBuilt(html, trustNonStrictSettings);\n       |                      ^ Lazy Test\n  2168 |         expect(built).toMatchSnapshot();\n  2169 |     });\n  2170 |","start":{"line":2167,"column":22,"index":77413}},{"frame":"  2340 |     it(\"should properly render stretchy accents\", function() {\n  2341 |         const tex = `\\\\widetilde{ABCD}`;\n> 2342 |         const tree = getParsed(tex);\n       |                     ^ Lazy Test\n  2343 |         const markup = buildMathML(tree, tex, defaultOptions).toMarkup();\n  2344 |         expect(markup).toContain('<mo stretchy=\"true\">~</mo>');\n  2345 |     });","start":{"line":2342,"column":21,"index":83915}},{"frame":"  2990 |     it(\"should allow letters [#$%&~_^] without escaping\", function() {\n  2991 |         const url = \"http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz\";\n> 2992 |         const parsed1 = getParsed(`\\\\href{${url}}{\\\\alpha}`, trustSettings)[0];\n       |                        ^ Lazy Test\n  2993 |         expect(parsed1.href).toBe(url);\n  2994 |         const parsed2 = getParsed(`\\\\url{${url}}`, trustSettings)[0];\n  2995 |         expect(parsed2.href).toBe(url);","start":{"line":2992,"column":24,"index":108081}},{"frame":"  2998 |     it(\"should allow balanced braces in url\", function() {\n  2999 |         const url = \"http://example.org/{{}t{oo}}\";\n> 3000 |         const parsed1 = getParsed(`\\\\href{${url}}{\\\\alpha}`, trustSettings)[0];\n       |                        ^ Lazy Test\n  3001 |         expect(parsed1.href).toBe(url);\n  3002 |         const parsed2 = getParsed(`\\\\url{${url}}`, trustSettings)[0];\n  3003 |         expect(parsed2.href).toBe(url);","start":{"line":3000,"column":24,"index":108431}},{"frame":"  3014 |         const url = \"http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz\";\n  3015 |         const input = url.replace(/([#$%&~_^{}])/g, '\\\\$1');\n> 3016 |         const parsed1 = getParsed(`\\\\href{${input}}{\\\\alpha}`, trustSettings)[0];\n       |                        ^ Lazy Test\n  3017 |         expect(parsed1.href).toBe(url);\n  3018 |         const parsed2 = getParsed(`\\\\url{${input}}`, trustSettings)[0];\n  3019 |         expect(parsed2.href).toBe(url);","start":{"line":3016,"column":24,"index":109205}},{"frame":"  3030 |\n  3031 |     it(\"should not affect spacing around\", function() {\n> 3032 |         const built = getBuilt(\"a\\\\href{http://example.com/}{+b}\", trustSettings);\n       |                      ^ Lazy Test\n  3033 |         expect(built).toMatchSnapshot();\n  3034 |     });\n  3035 |","start":{"line":3032,"column":22,"index":109870}},{"frame":"  3040 |\n  3041 |     it(\"should allow explicitly allowed protocols\", () => {\n> 3042 |         const parsed = getParsed(\n       |                       ^ Lazy Test\n  3043 |             \"\\\\href{ftp://x}{foo}\",\n  3044 |             new Settings({trust: (context) => context.protocol === \"ftp\"}),\n  3045 |         );","start":{"line":3042,"column":23,"index":110244}},{"frame":"  3048 |\n  3049 |     it(\"should allow all protocols when trust option is true\", () => {\n> 3050 |         const parsed = getParsed(\"\\\\href{ftp://x}{foo}\", trustSettings);\n       |                       ^ Lazy Test\n  3051 |         expect(parsed).toMatchSnapshot();\n  3052 |     });\n  3053 |","start":{"line":3050,"column":23,"index":110523}},{"frame":"  3053 |\n  3054 |     it(\"should not allow explicitly disallowed protocols\", () => {\n> 3055 |         const parsed = getParsed(\n       |                       ^ Lazy Test\n  3056 |             \"\\\\href{javascript:alert('x')}{foo}\",\n  3057 |             new Settings({trust: context => context.protocol !== \"javascript\"}),\n  3058 |         );","start":{"line":3055,"column":23,"index":110714}},{"frame":"  3061 |\n  3062 |     it(\"should not allow explicitly uppercased disallowed protocols\", () => {\n> 3063 |         const parsed = getParsed(\n       |                       ^ Lazy Test\n  3064 |             \"\\\\href{JavaScript:alert('x')}{foo}\",\n  3065 |             new Settings({trust: context => context.protocol !== \"javascript\"}),\n  3066 |         );","start":{"line":3063,"column":23,"index":111019}},{"frame":"  3137 |\n  3138 |     it(\"should produce color nodes with a color value given by errorColor\", function() {\n> 3139 |         const parsedInput = getParsed(r`\\error`, noThrowSettings);\n       |                            ^ Lazy Test\n  3140 |         expect(parsedInput[0].type).toBe(\"color\");\n  3141 |         expect(parsedInput[0].color).toBe(errorColor);\n  3142 |     });","start":{"line":3139,"column":28,"index":114100}},{"frame":"  3143 |\n  3144 |     it(\"should build katex-error span for other type of KaTeX error\", function() {\n> 3145 |         const built = getBuilt(`2^2^2`, noThrowSettings);\n       |                      ^ Lazy Test\n  3146 |         expect(built).toMatchSnapshot();\n  3147 |     });\n  3148 |","start":{"line":3145,"column":22,"index":114359}},{"frame":"  3478 |         const parsedBare = getParsed`~`;\n  3479 |         expect(parsedBare[0].type).toEqual(\"spacing\");\n> 3480 |         const parsedChar = getParsed(\"\\\\char`\\\\~\");\n       |                           ^ Lazy Test\n  3481 |         expect(parsedChar[0].type).toEqual(\"textord\");\n  3482 |     });\n  3483 |","start":{"line":3480,"column":27,"index":127117}},{"frame":"  4050 |\n  4051 |     it(\"should clamp size when set\", function() {\n> 4052 |         const built = getBuilt(rule, new Settings({maxSize: 5}))[0];\n       |                      ^ Lazy Test\n  4053 |         expect(built.style.borderRightWidth).toEqual(\"5em\");\n  4054 |         expect(built.style.borderTopWidth).toEqual(\"5em\");\n  4055 |     });","start":{"line":4052,"column":22,"index":151078}},{"frame":"  4056 |\n  4057 |     it(\"should not clamp size when not set\", function() {\n> 4058 |         const built = getBuilt(rule)[0];\n       |                      ^ Lazy Test\n  4059 |         expect(built.style.borderRightWidth).toEqual(\"999em\");\n  4060 |         expect(built.style.borderTopWidth).toEqual(\"999em\");\n  4061 |     });","start":{"line":4058,"column":22,"index":151334}},{"frame":"  4062 |\n  4063 |     it(\"should make zero-width rules if a negative maxSize is passed\", function() {\n> 4064 |         const built = getBuilt(rule, new Settings({maxSize: -5}))[0];\n       |                      ^ Lazy Test\n  4065 |         expect(built.style.borderRightWidth).toEqual(\"0em\");\n  4066 |         expect(built.style.borderTopWidth).toEqual(\"0em\");\n  4067 |     });","start":{"line":4064,"column":22,"index":151592}}]},{"name":"Magic Number","packageName":"magicNumberRule","items":[{"frame":"  90 |             let group = parse[i];\n  91 |             if (group.type === \"htmlmathml\") {\n> 92 |                 expect(group.html).toHaveLength(1);\n     |                                                ^ Magic Number\n  93 |                 group = group.html[0];\n  94 |             }\n  95 |             if (group.type === \"mclass\") {","start":{"line":92,"column":48,"index":2613}},{"frame":"  112 |         const contents = \"\\\\mathinner{\\\\langle{\\\\psi}\\\\rangle}\";\n  113 |         const mml = buildMathML(getParsed(contents), contents, defaultOptions);\n> 114 |         expect(mml.children.length).toEqual(1);\n      |                                            ^ Magic Number\n  115 |     });\n  116 | });\n  117 |","start":{"line":114,"column":44,"index":3404}},{"frame":"  344 |         const parse = getParsed`{xy}`;\n  345 |\n> 346 |         expect(parse).toHaveLength(1);\n      |                                   ^ Magic Number\n  347 |\n  348 |         const ord = parse[0];\n  349 |","start":{"line":346,"column":35,"index":10074}},{"frame":"  366 |         const parse = getParsed`\\begingroup xy \\endgroup`;\n  367 |\n> 368 |         expect(parse).toHaveLength(1);\n      |                                   ^ Magic Number\n  369 |\n  370 |         const ord = parse[0];\n  371 |","start":{"line":368,"column":35,"index":10676}},{"frame":"  389 |         const parse = getParsed`\\Large abc`;\n  390 |\n> 391 |         expect(parse).toHaveLength(1);\n      |                                   ^ Magic Number\n  392 |\n  393 |         const sizing = parse[0];\n  394 |","start":{"line":391,"column":35,"index":11303}},{"frame":"  401 |         const parse = getParsed`a \\Large abc`;\n  402 |\n> 403 |         expect(parse).toHaveLength(2);\n      |                                   ^ Magic Number\n  404 |\n  405 |         const sizing = parse[1];\n  406 |","start":{"line":403,"column":35,"index":11626}},{"frame":"  406 |\n  407 |         expect(sizing.type).toEqual(\"sizing\");\n> 408 |         expect(sizing.body).toHaveLength(3);\n      |                                         ^ Magic Number\n  409 |     });\n  410 |\n  411 |     it(\"should stop at the ends of groups\", function() {","start":{"line":408,"column":41,"index":11753}},{"frame":"  416 |\n  417 |         expect(sizing.type).toEqual(\"sizing\");\n> 418 |         expect(sizing.body).toHaveLength(1);\n      |                                         ^ Magic Number\n  419 |     });\n  420 |\n  421 |     describe(\"within optional groups\", () => {","start":{"line":418,"column":41,"index":12036}},{"frame":"  603 |\n  604 |         const numer = parse.numer;\n> 605 |         expect(numer.body).toHaveLength(4);\n      |                                        ^ Magic Number\n  606 |     });\n  607 |\n  608 |     it(\"should create a denominator from the atoms after \\\\over\", function() {","start":{"line":605,"column":40,"index":18265}},{"frame":"  610 |\n  611 |         const denom = parse.denom;\n> 612 |         expect(denom.body).toHaveLength(4);\n      |                                        ^ Magic Number\n  613 |     });\n  614 |\n  615 |     it(\"should handle empty numerators\", function() {","start":{"line":612,"column":40,"index":18482}},{"frame":"  750 |         const group = parse.body;\n  751 |\n> 752 |         expect(group.length).toEqual(4);\n      |                                     ^ Magic Number\n  753 |         expect(group[0].type).toEqual(\"spacing\");\n  754 |         expect(group[1].type).toEqual(\"textord\");\n  755 |         expect(group[2].type).toEqual(\"spacing\");","start":{"line":752,"column":37,"index":23290}},{"frame":"  768 |         const parse = getParsed(leadingSpaceTextExpression)[0];\n  769 |         // [m, o, o]\n> 770 |         expect(parse.body).toHaveLength(3);\n      |                                        ^ Magic Number\n  771 |         expect(parse.body.map(n => n.text).join(\"\")).toBe(\"moo\");\n  772 |     });\n  773 |","start":{"line":770,"column":40,"index":23962}},{"frame":"  978 |         const bigParse = getParsed(bigDelim)[0];\n  979 |\n> 980 |         expect(smallParse.size).toEqual(1);\n      |                                        ^ Magic Number\n  981 |         expect(bigParse.size).toEqual(4);\n  982 |     });\n  983 | });","start":{"line":980,"column":40,"index":31186}},{"frame":"  979 |\n  980 |         expect(smallParse.size).toEqual(1);\n> 981 |         expect(bigParse.size).toEqual(4);\n      |                                      ^ Magic Number\n  982 |     });\n  983 | });\n  984 |","start":{"line":981,"column":38,"index":31228}},{"frame":"  1069 |         const hardNumberParse = getParsed(hardNumberRule)[0];\n  1070 |\n> 1071 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);\n       |                                                         ^ Magic Number\n  1072 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);\n  1073 |     });\n  1074 |","start":{"line":1071,"column":57,"index":33945}},{"frame":"  1070 |\n  1071 |         expect(hardNumberParse.width.number).toBeCloseTo(1.24);\n> 1072 |         expect(hardNumberParse.height.number).toBeCloseTo(2.45);\n       |                                                          ^ Magic Number\n  1073 |     });\n  1074 |\n  1075 |     it(\"should parse negative sizes\", function() {","start":{"line":1072,"column":58,"index":34010}},{"frame":"  1117 |     it(\"should parse positive sizes\", function() {\n  1118 |         const parse = getParsed`\\kern{+1em}`[0];\n> 1119 |         expect(parse.dimension.number).toBeCloseTo(1);\n       |                                                   ^ Magic Number\n  1120 |     });\n  1121 | });\n  1122 |","start":{"line":1119,"column":51,"index":35555}},{"frame":"  1152 |         const abParse3 = getParsed(abKern3);\n  1153 |\n> 1154 |         expect(abParse1).toHaveLength(3);\n       |                                      ^ Magic Number\n  1155 |         expect(abParse1[0].text).toEqual(\"a\");\n  1156 |         expect(abParse1[2].text).toEqual(\"b\");\n  1157 |         expect(abParse2).toHaveLength(3);","start":{"line":1154,"column":38,"index":36825}},{"frame":"  1155 |         expect(abParse1[0].text).toEqual(\"a\");\n  1156 |         expect(abParse1[2].text).toEqual(\"b\");\n> 1157 |         expect(abParse2).toHaveLength(3);\n       |                                      ^ Magic Number\n  1158 |         expect(abParse2[0].text).toEqual(\"a\");\n  1159 |         expect(abParse2[2].text).toEqual(\"b\");\n  1160 |         expect(abParse3).toHaveLength(3);","start":{"line":1157,"column":38,"index":36961}},{"frame":"  1158 |         expect(abParse2[0].text).toEqual(\"a\");\n  1159 |         expect(abParse2[2].text).toEqual(\"b\");\n> 1160 |         expect(abParse3).toHaveLength(3);\n       |                                      ^ Magic Number\n  1161 |         expect(abParse3[0].text).toEqual(\"a\");\n  1162 |         expect(abParse3[2].text).toEqual(\"b\");\n  1163 |     });","start":{"line":1160,"column":38,"index":37097}},{"frame":"  1175 |     it(\"should parse positive sizes\", function() {\n  1176 |         const parse = getParsed`\\kern+1em`[0];\n> 1177 |         expect(parse.dimension.number).toBeCloseTo(1);\n       |                                                   ^ Magic Number\n  1178 |     });\n  1179 |\n  1180 |     it(\"should handle whitespace\", function() {","start":{"line":1177,"column":51,"index":37666}},{"frame":"  1181 |         const abParse = getParsed(\"a\\\\mkern\\t-\\r1  \\n mu\\nb\");\n  1182 |\n> 1183 |         expect(abParse).toHaveLength(3);\n       |                                     ^ Magic Number\n  1184 |         expect(abParse[0].text).toEqual(\"a\");\n  1185 |         expect(abParse[1].dimension.unit).toEqual(\"mu\");\n  1186 |         expect(abParse[2].text).toEqual(\"b\");","start":{"line":1183,"column":37,"index":37828}},{"frame":"  1334 |     it(\"should eat a final newline\", function() {\n  1335 |         const m3 = getParsed`\\begin{matrix}a&b\\\\ c&d \\\\ \\end{matrix}`[0];\n> 1336 |         expect(m3.body).toHaveLength(2);\n       |                                     ^ Magic Number\n  1337 |     });\n  1338 |\n  1339 |     it(\"should grab \\\\arraystretch\", function() {","start":{"line":1336,"column":37,"index":43124}},{"frame":"  1581 |         const displayBody = displayNode.body;\n  1582 |\n> 1583 |         expect(displayBody).toHaveLength(2);\n       |                                         ^ Magic Number\n  1584 |         expect(displayBody[0].text).toEqual(\"e\");\n  1585 |     });\n  1586 | });","start":{"line":1583,"column":41,"index":51310}},{"frame":"  1635 |\n  1636 |         const bbBody = nestedParse.body.body;\n> 1637 |         expect(bbBody).toHaveLength(3);\n       |                                    ^ Magic Number\n  1638 |         expect(bbBody[0].type).toEqual(\"mathord\");\n  1639 |         expect(bbBody[2].type).toEqual(\"font\");\n  1640 |         expect(bbBody[2].font).toEqual(\"mathrm\");","start":{"line":1637,"column":36,"index":53345}},{"frame":"  1647 |         expect(colorMathbbParse.color).toEqual(\"blue\");\n  1648 |         const body = colorMathbbParse.body;\n> 1649 |         expect(body).toHaveLength(1);\n       |                                  ^ Magic Number\n  1650 |         expect(body[0].type).toEqual(\"font\");\n  1651 |         expect(body[0].font).toEqual(\"mathbb\");\n  1652 |     });","start":{"line":1649,"column":34,"index":53873}},{"frame":"  1660 |         expect(bf.type).toEqual(\"font\");\n  1661 |         expect(bf.font).toEqual(\"mathbf\");\n> 1662 |         expect(bf.body.body).toHaveLength(3);\n       |                                          ^ Magic Number\n  1663 |         expect(bf.body.body[0].text).toEqual(\"a\");\n  1664 |         expect(bf.body.body[1].type).toEqual(\"font\");\n  1665 |         expect(bf.body.body[1].font).toEqual(\"mathrm\");","start":{"line":1662,"column":42,"index":54337}},{"frame":"  2233 |         // Just a few quick sanity checks here...\n  2234 |         const markup = katex.renderToString(r`\\sigma^2`);\n> 2235 |         expect(markup.indexOf(\"<span\")).toBe(0);\n       |                                             ^ Magic Number\n  2236 |         expect(markup).toContain(\"\\u03c3\");  // sigma\n  2237 |         expect(markup).toContain(\"margin-right\");\n  2238 |         expect(markup).not.toContain(\"marginRight\");","start":{"line":2235,"column":45,"index":80198}},{"frame":"  2739 |             parseTree(r`\\sqrt}`, new Settings());\n  2740 |         } catch (e) {\n> 2741 |             expect(e.position).toEqual(5);\n       |                                       ^ Magic Number\n  2742 |         }\n  2743 |     });\n  2744 | });","start":{"line":2741,"column":39,"index":97416}},{"frame":"  2873 |     it(\"should not eat the last row when its first cell is empty\", function() {\n  2874 |         const ae = getParsed`\\begin{aligned}&E_1 & (1)\\\\&E_2 & (2)\\\\&E_3 & (3)\\end{aligned}`[0];\n> 2875 |         expect(ae.body).toHaveLength(3);\n       |                                     ^ Magic Number\n  2876 |     });\n  2877 | });\n  2878 |","start":{"line":2875,"column":37,"index":101711}},{"frame":"  3164 |             expect(error.message).toBe(\"KaTeX parse error: Undefined control sequence: \\\\fraq at position 5: 1 + \\\\̲f̲r̲a̲q̲{}{}\");\n  3165 |             expect(error.rawMessage).toBe(\"Undefined control sequence: \\\\fraq\");\n> 3166 |             expect(error.position).toBe(4);\n       |                                        ^ Magic Number\n  3167 |             expect(error.length).toBe(5);\n  3168 |         }\n  3169 |     });","start":{"line":3166,"column":40,"index":115268}},{"frame":"  3165 |             expect(error.rawMessage).toBe(\"Undefined control sequence: \\\\fraq\");\n  3166 |             expect(error.position).toBe(4);\n> 3167 |             expect(error.length).toBe(5);\n       |                                      ^ Magic Number\n  3168 |         }\n  3169 |     });\n  3170 |","start":{"line":3167,"column":38,"index":115310}},{"frame":"  3179 |             expect(error.message).toBe(\"KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\\\frac{}\");\n  3180 |             expect(error.rawMessage).toBe(\"Unexpected end of input in a macro argument, expected '}'\");\n> 3181 |             expect(error.position).toBe(7);\n       |                                        ^ Magic Number\n  3182 |             expect(error.length).toBe(0);\n  3183 |         }\n  3184 |     });","start":{"line":3181,"column":40,"index":115962}},{"frame":"  3180 |             expect(error.rawMessage).toBe(\"Unexpected end of input in a macro argument, expected '}'\");\n  3181 |             expect(error.position).toBe(7);\n> 3182 |             expect(error.length).toBe(0);\n       |                                      ^ Magic Number\n  3183 |         }\n  3184 |     });\n  3185 |","start":{"line":3182,"column":38,"index":116004}}]},{"name":"Redundant Assertion","packageName":"redundantAssertion","items":[{"frame":"  758 |\n  759 |     it(\"should handle backslash followed by newline\", () => {\n> 760 |         expect(\"\\\\text{\\\\ \\t\\r \\n \\t\\r  }\").toParseLike`\\text{\\ }`;\n      |        ^ Redundant Assertion\n  761 |     });\n  762 |\n  763 |     it(\"should accept math mode tokens after its argument\", function() {","start":{"column":8,"line":760}},{"frame":"  1729 | describe(\"A comment parser\", function() {\n  1730 |     it(\"should parse comments at the end of a line\", () => {\n> 1731 |         expect(\"a^2 + b^2 = c^2 % Pythagoras' Theorem\\n\").toParse();\n       |        ^ Redundant Assertion\n  1732 |     });\n  1733 |\n  1734 |     it(\"should parse comments at the start of a line\", () => {","start":{"column":8,"line":1731}},{"frame":"  1733 |\n  1734 |     it(\"should parse comments at the start of a line\", () => {\n> 1735 |         expect(\"% comment\\n\").toParse();\n       |        ^ Redundant Assertion\n  1736 |     });\n  1737 |\n  1738 |     it(\"should parse multiple lines of comments in a row\", () => {","start":{"column":8,"line":1735}},{"frame":"  1737 |\n  1738 |     it(\"should parse multiple lines of comments in a row\", () => {\n> 1739 |         expect(\"% comment 1\\n% comment 2\\n\").toParse();\n       |        ^ Redundant Assertion\n  1740 |     });\n  1741 |\n  1742 |     it(\"should parse comments between subscript and superscript\", () => {","start":{"column":8,"line":1739}},{"frame":"  1741 |\n  1742 |     it(\"should parse comments between subscript and superscript\", () => {\n> 1743 |         expect(\"x_3 %comment\\n^2\").toParseLike`x_3^2`;\n       |        ^ Redundant Assertion\n  1744 |         expect(\"x^ %comment\\n{2}\").toParseLike`x^{2}`;\n  1745 |         expect(\"x^ %comment\\n\\\\frac{1}{2}\").toParseLike`x^\\frac{1}{2}`;\n  1746 |     });","start":{"column":8,"line":1743}},{"frame":"  1742 |     it(\"should parse comments between subscript and superscript\", () => {\n  1743 |         expect(\"x_3 %comment\\n^2\").toParseLike`x_3^2`;\n> 1744 |         expect(\"x^ %comment\\n{2}\").toParseLike`x^{2}`;\n       |        ^ Redundant Assertion\n  1745 |         expect(\"x^ %comment\\n\\\\frac{1}{2}\").toParseLike`x^\\frac{1}{2}`;\n  1746 |     });\n  1747 |","start":{"column":8,"line":1744}},{"frame":"  1743 |         expect(\"x_3 %comment\\n^2\").toParseLike`x_3^2`;\n  1744 |         expect(\"x^ %comment\\n{2}\").toParseLike`x^{2}`;\n> 1745 |         expect(\"x^ %comment\\n\\\\frac{1}{2}\").toParseLike`x^\\frac{1}{2}`;\n       |        ^ Redundant Assertion\n  1746 |     });\n  1747 |\n  1748 |     it(\"should parse comments in size and color groups\", () => {","start":{"column":8,"line":1745}},{"frame":"  1747 |\n  1748 |     it(\"should parse comments in size and color groups\", () => {\n> 1749 |         expect(\"\\\\kern{1 %kern\\nem}\").toParse();\n       |        ^ Redundant Assertion\n  1750 |         expect(\"\\\\kern1 %kern\\nem\").toParse();\n  1751 |         expect(\"\\\\color{#f00%red\\n}\").toParse();\n  1752 |     });","start":{"column":8,"line":1749}},{"frame":"  1748 |     it(\"should parse comments in size and color groups\", () => {\n  1749 |         expect(\"\\\\kern{1 %kern\\nem}\").toParse();\n> 1750 |         expect(\"\\\\kern1 %kern\\nem\").toParse();\n       |        ^ Redundant Assertion\n  1751 |         expect(\"\\\\color{#f00%red\\n}\").toParse();\n  1752 |     });\n  1753 |","start":{"column":8,"line":1750}},{"frame":"  1749 |         expect(\"\\\\kern{1 %kern\\nem}\").toParse();\n  1750 |         expect(\"\\\\kern1 %kern\\nem\").toParse();\n> 1751 |         expect(\"\\\\color{#f00%red\\n}\").toParse();\n       |        ^ Redundant Assertion\n  1752 |     });\n  1753 |\n  1754 |     it(\"should parse comments before an expression\", () => {","start":{"column":8,"line":1751}},{"frame":"  1753 |\n  1754 |     it(\"should parse comments before an expression\", () => {\n> 1755 |         expect(\"%comment\\n{2}\").toParseLike`{2}`;\n       |        ^ Redundant Assertion\n  1756 |     });\n  1757 |\n  1758 |     it(\"should parse comments before and between \\\\hline\", () => {","start":{"column":8,"line":1755}},{"frame":"  1763 |\n  1764 |     it(\"should parse comments in the macro definition\", () => {\n> 1765 |         expect(\"\\\\def\\\\foo{1 %}\\n2}\\n\\\\foo\").toParseLike`12`;\n       |        ^ Redundant Assertion\n  1766 |     });\n  1767 |\n  1768 |     it(\"should not expand nor ignore spaces after a command sequence in a comment\", () => {","start":{"column":8,"line":1765}},{"frame":"  1767 |\n  1768 |     it(\"should not expand nor ignore spaces after a command sequence in a comment\", () => {\n> 1769 |         expect(\"\\\\def\\\\foo{1\\n2}\\nx %\\\\foo\\n\").toParseLike`x`;\n       |        ^ Redundant Assertion\n  1770 |     });\n  1771 |\n  1772 |     it(\"should not parse a comment without newline in strict mode\", () => {","start":{"column":8,"line":1769}},{"frame":"  1776 |\n  1777 |     it(\"should not produce or consume space\", () => {\n> 1778 |         expect(\"\\\\text{hello% comment 1\\nworld}\").toParseLike`\\text{helloworld}`;\n       |        ^ Redundant Assertion\n  1779 |         expect(\"\\\\text{hello% comment\\n\\nworld}\").toParseLike`\\text{hello world}`;\n  1780 |     });\n  1781 |","start":{"column":8,"line":1778}},{"frame":"  1777 |     it(\"should not produce or consume space\", () => {\n  1778 |         expect(\"\\\\text{hello% comment 1\\nworld}\").toParseLike`\\text{helloworld}`;\n> 1779 |         expect(\"\\\\text{hello% comment\\n\\nworld}\").toParseLike`\\text{hello world}`;\n       |        ^ Redundant Assertion\n  1780 |     });\n  1781 |\n  1782 |     it(\"should not include comments in the output\", () => {","start":{"column":8,"line":1779}},{"frame":"  1781 |\n  1782 |     it(\"should not include comments in the output\", () => {\n> 1783 |         expect(\"5 % comment\\n\").toParseLike`5`;\n       |        ^ Redundant Assertion\n  1784 |     });\n  1785 | });\n  1786 |","start":{"column":8,"line":1783}},{"frame":"  2176 |\n  2177 |                 // Render is expected to throw, so this should not be called.\n> 2178 |                 expect(true).toBe(false);\n       |                ^ Redundant Assertion\n  2179 |             } catch (error) {\n  2180 |                 expect(error).toBeInstanceOf(ParseError);\n  2181 |                 const message =","start":{"column":16,"line":2178}},{"frame":"  2978 |         expect`\\href%end`.toParseLike(\"\\\\href{%}end\", trustSettings);\n  2979 |         expect`\\url%end`.toParseLike(\"\\\\url{%}end\", trustSettings);\n> 2980 |         expect(\"\\\\url%%end\\n\").toParseLike(\"\\\\url{%}\", trustSettings);\n       |        ^ Redundant Assertion\n  2981 |         expect`\\url end`.toParseLike(\"\\\\url{e}nd\", trustSettings);\n  2982 |         expect`\\url%end`.toParseLike(\"\\\\url {%}end\", trustSettings);\n  2983 |     });","start":{"column":8,"line":2980}},{"frame":"  3021 |\n  3022 |     it(\"should allow comments after URLs\", function() {\n> 3023 |         expect(\"\\\\url{http://example.com/}%comment\\n\").toBuild();\n       |        ^ Redundant Assertion\n  3024 |     });\n  3025 |\n  3026 |     it(\"should be marked up correctly\", function() {","start":{"column":8,"line":3023}},{"frame":"  3159 |\n  3160 |             // Render is expected to throw, so this should not be called.\n> 3161 |             expect(true).toBe(false);\n       |            ^ Redundant Assertion\n  3162 |         } catch (error) {\n  3163 |             expect(error).toBeInstanceOf(ParseError);\n  3164 |             expect(error.message).toBe(\"KaTeX parse error: Undefined control sequence: \\\\fraq at position 5: 1 + \\\\̲f̲r̲a̲q̲{}{}\");","start":{"column":12,"line":3161}},{"frame":"  3174 |\n  3175 |             // Render is expected to throw, so this should not be called.\n> 3176 |             expect(true).toBe(false);\n       |            ^ Redundant Assertion\n  3177 |         } catch (error) {\n  3178 |             expect(error).toBeInstanceOf(ParseError);\n  3179 |             expect(error.message).toBe(\"KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\\\frac{}\");","start":{"column":12,"line":3176}},{"frame":"  3189 |\n  3190 |             // Render is expected to throw, so this should not be called.\n> 3191 |             expect(true).toBe(false);\n       |            ^ Redundant Assertion\n  3192 |         } catch (error) {\n  3193 |             expect(error).toBeInstanceOf(ParseError);\n  3194 |             expect(error.message).toBe(\"KaTeX parse error: \\\\verb ended by end of line instead of matching delimiter\");","start":{"column":12,"line":3191}},{"frame":"  3462 |\n  3463 |     it(\"\\\\char produces literal characters\", () => {\n> 3464 |         expect(\"\\\\char`a\").toParseLike(\"\\\\char`\\\\a\");\n       |        ^ Redundant Assertion\n  3465 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char37`;\n  3466 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char'45`;\n  3467 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char\"25`;","start":{"column":8,"line":3464}},{"frame":"  3463 |     it(\"\\\\char produces literal characters\", () => {\n  3464 |         expect(\"\\\\char`a\").toParseLike(\"\\\\char`\\\\a\");\n> 3465 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char37`;\n       |        ^ Redundant Assertion\n  3466 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char'45`;\n  3467 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char\"25`;\n  3468 |         expect`\\char`.not.toParse();","start":{"column":8,"line":3465}},{"frame":"  3464 |         expect(\"\\\\char`a\").toParseLike(\"\\\\char`\\\\a\");\n  3465 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char37`;\n> 3466 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char'45`;\n       |        ^ Redundant Assertion\n  3467 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char\"25`;\n  3468 |         expect`\\char`.not.toParse();\n  3469 |         expect(\"\\\\char`\").not.toParse();","start":{"column":8,"line":3466}},{"frame":"  3465 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char37`;\n  3466 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char'45`;\n> 3467 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char\"25`;\n       |        ^ Redundant Assertion\n  3468 |         expect`\\char`.not.toParse();\n  3469 |         expect(\"\\\\char`\").not.toParse();\n  3470 |         expect`\\char'`.not.toParse();","start":{"column":8,"line":3467}},{"frame":"  3467 |         expect(\"\\\\char`\\\\%\").toParseLike`\\char\"25`;\n  3468 |         expect`\\char`.not.toParse();\n> 3469 |         expect(\"\\\\char`\").not.toParse();\n       |        ^ Redundant Assertion\n  3470 |         expect`\\char'`.not.toParse();\n  3471 |         expect`\\char\"`.not.toParse();\n  3472 |         expect`\\char'a`.not.toParse();","start":{"column":8,"line":3469}},{"frame":"  3931 |\n  3932 |     it(\"should parse combining characters\", function() {\n> 3933 |         expect(\"A\\u0301C\\u0301\").toParseLike(r`Á\\acute C`, nonstrictSettings);\n       |        ^ Redundant Assertion\n  3934 |         expect(\"\\\\text{A\\u0301C\\u0301}\").toParseLike(r`\\text{Á\\'C}`, strictSettings);\n  3935 |     });\n  3936 |","start":{"column":8,"line":3933}},{"frame":"  3932 |     it(\"should parse combining characters\", function() {\n  3933 |         expect(\"A\\u0301C\\u0301\").toParseLike(r`Á\\acute C`, nonstrictSettings);\n> 3934 |         expect(\"\\\\text{A\\u0301C\\u0301}\").toParseLike(r`\\text{Á\\'C}`, strictSettings);\n       |        ^ Redundant Assertion\n  3935 |     });\n  3936 |\n  3937 |     it(\"should parse multi-accented characters\", function() {","start":{"column":8,"line":3934}},{"frame":"  3970 |\n  3971 |     it(\"should parse symbols\", function() {\n> 3972 |         expect(\"£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\\u00B7\\u00A9\").toBuild(strictSettings);\n       |        ^ Redundant Assertion\n  3973 |         expect(\"\\\\text{£¥ℂℍℎ\\u00A9\\u00AE\\uFE0F}\").toBuild(strictSettings);\n  3974 |     });\n  3975 |","start":{"column":8,"line":3972}},{"frame":"  3971 |     it(\"should parse symbols\", function() {\n  3972 |         expect(\"£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮\\u00B7\\u00A9\").toBuild(strictSettings);\n> 3973 |         expect(\"\\\\text{£¥ℂℍℎ\\u00A9\\u00AE\\uFE0F}\").toBuild(strictSettings);\n       |        ^ Redundant Assertion\n  3974 |     });\n  3975 |\n  3976 |     it(\"should build Greek capital letters\", function() {","start":{"column":8,"line":3973}},{"frame":"  3988 |\n  3989 |     it(\"should build binary operators\", function() {\n> 3990 |         expect(\"±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞\\u22C5\\u2218\\u2216\\u2219\").toBuild(strictSettings);\n       |        ^ Redundant Assertion\n  3991 |     });\n  3992 |\n  3993 |     it(\"should build common ords\", function() {","start":{"column":8,"line":3990}},{"frame":"  3992 |\n  3993 |     it(\"should build common ords\", function() {\n> 3994 |         expect(\"§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵\").toBuild(strictSettings);\n       |        ^ Redundant Assertion\n  3995 |     });\n  3996 |\n  3997 |     it(\"should build delimiters\", function() {","start":{"column":8,"line":3994}},{"frame":"  3996 |\n  3997 |     it(\"should build delimiters\", function() {\n> 3998 |         expect(\"\\\\left\\u230A\\\\frac{a}{b}\\\\right\\u230B\").toBuild();\n       |        ^ Redundant Assertion\n  3999 |         expect(\"\\\\left\\u2308\\\\frac{a}{b}\\\\right\\u2308\").toBuild();\n  4000 |         expect(\"\\\\left\\u27ee\\\\frac{a}{b}\\\\right\\u27ef\").toBuild();\n  4001 |         expect(\"\\\\left\\u27e8\\\\frac{a}{b}\\\\right\\u27e9\").toBuild();","start":{"column":8,"line":3998}},{"frame":"  3997 |     it(\"should build delimiters\", function() {\n  3998 |         expect(\"\\\\left\\u230A\\\\frac{a}{b}\\\\right\\u230B\").toBuild();\n> 3999 |         expect(\"\\\\left\\u2308\\\\frac{a}{b}\\\\right\\u2308\").toBuild();\n       |        ^ Redundant Assertion\n  4000 |         expect(\"\\\\left\\u27ee\\\\frac{a}{b}\\\\right\\u27ef\").toBuild();\n  4001 |         expect(\"\\\\left\\u27e8\\\\frac{a}{b}\\\\right\\u27e9\").toBuild();\n  4002 |         expect(\"\\\\left\\u23b0\\\\frac{a}{b}\\\\right\\u23b1\").toBuild();","start":{"column":8,"line":3999}},{"frame":"  3998 |         expect(\"\\\\left\\u230A\\\\frac{a}{b}\\\\right\\u230B\").toBuild();\n  3999 |         expect(\"\\\\left\\u2308\\\\frac{a}{b}\\\\right\\u2308\").toBuild();\n> 4000 |         expect(\"\\\\left\\u27ee\\\\frac{a}{b}\\\\right\\u27ef\").toBuild();\n       |        ^ Redundant Assertion\n  4001 |         expect(\"\\\\left\\u27e8\\\\frac{a}{b}\\\\right\\u27e9\").toBuild();\n  4002 |         expect(\"\\\\left\\u23b0\\\\frac{a}{b}\\\\right\\u23b1\").toBuild();\n  4003 |         expect`┌x┐ └x┘`.toBuild();","start":{"column":8,"line":4000}},{"frame":"  3999 |         expect(\"\\\\left\\u2308\\\\frac{a}{b}\\\\right\\u2308\").toBuild();\n  4000 |         expect(\"\\\\left\\u27ee\\\\frac{a}{b}\\\\right\\u27ef\").toBuild();\n> 4001 |         expect(\"\\\\left\\u27e8\\\\frac{a}{b}\\\\right\\u27e9\").toBuild();\n       |        ^ Redundant Assertion\n  4002 |         expect(\"\\\\left\\u23b0\\\\frac{a}{b}\\\\right\\u23b1\").toBuild();\n  4003 |         expect`┌x┐ └x┘`.toBuild();\n  4004 |         expect(\"\\u231Cx\\u231D \\u231Ex\\u231F\").toBuild();","start":{"column":8,"line":4001}},{"frame":"  4000 |         expect(\"\\\\left\\u27ee\\\\frac{a}{b}\\\\right\\u27ef\").toBuild();\n  4001 |         expect(\"\\\\left\\u27e8\\\\frac{a}{b}\\\\right\\u27e9\").toBuild();\n> 4002 |         expect(\"\\\\left\\u23b0\\\\frac{a}{b}\\\\right\\u23b1\").toBuild();\n       |        ^ Redundant Assertion\n  4003 |         expect`┌x┐ └x┘`.toBuild();\n  4004 |         expect(\"\\u231Cx\\u231D \\u231Ex\\u231F\").toBuild();\n  4005 |         expect(\"\\u27E6x\\u27E7\").toBuild();","start":{"column":8,"line":4002}},{"frame":"  4002 |         expect(\"\\\\left\\u23b0\\\\frac{a}{b}\\\\right\\u23b1\").toBuild();\n  4003 |         expect`┌x┐ └x┘`.toBuild();\n> 4004 |         expect(\"\\u231Cx\\u231D \\u231Ex\\u231F\").toBuild();\n       |        ^ Redundant Assertion\n  4005 |         expect(\"\\u27E6x\\u27E7\").toBuild();\n  4006 |         expect(\"\\\\llbracket \\\\rrbracket\").toBuild();\n  4007 |         expect(\"\\\\lBrace \\\\rBrace\").toBuild();","start":{"column":8,"line":4004}},{"frame":"  4003 |         expect`┌x┐ └x┘`.toBuild();\n  4004 |         expect(\"\\u231Cx\\u231D \\u231Ex\\u231F\").toBuild();\n> 4005 |         expect(\"\\u27E6x\\u27E7\").toBuild();\n       |        ^ Redundant Assertion\n  4006 |         expect(\"\\\\llbracket \\\\rrbracket\").toBuild();\n  4007 |         expect(\"\\\\lBrace \\\\rBrace\").toBuild();\n  4008 |     });","start":{"column":8,"line":4005}},{"frame":"  4004 |         expect(\"\\u231Cx\\u231D \\u231Ex\\u231F\").toBuild();\n  4005 |         expect(\"\\u27E6x\\u27E7\").toBuild();\n> 4006 |         expect(\"\\\\llbracket \\\\rrbracket\").toBuild();\n       |        ^ Redundant Assertion\n  4007 |         expect(\"\\\\lBrace \\\\rBrace\").toBuild();\n  4008 |     });\n  4009 |","start":{"column":8,"line":4006}},{"frame":"  4005 |         expect(\"\\u27E6x\\u27E7\").toBuild();\n  4006 |         expect(\"\\\\llbracket \\\\rrbracket\").toBuild();\n> 4007 |         expect(\"\\\\lBrace \\\\rBrace\").toBuild();\n       |        ^ Redundant Assertion\n  4008 |     });\n  4009 |\n  4010 |     it(\"should build some surrogate pairs\", function() {","start":{"column":8,"line":4007}}]},{"name":"Redundant Print","packageName":"redundantPrint","items":[{"frame":"  4275 |             expect`\\message{Hello, world}`.toParse();\n  4276 |             // eslint-disable-next-line no-console\n> 4277 |             expect(console.log).toHaveBeenCalledWith(\"Hello, world\");\n       |                   ^ Redundant Print\n  4278 |         });\n  4279 |     });\n  4280 |","start":{"line":4277,"column":19,"index":160200}},{"frame":"  4284 |             expect`\\errmessage{Hello, world}`.toParse();\n  4285 |             // eslint-disable-next-line no-console\n> 4286 |             expect(console.error).toHaveBeenCalledWith(\"Hello, world\");\n       |                   ^ Redundant Print\n  4287 |         });\n  4288 |     });\n  4289 | });","start":{"line":4286,"column":19,"index":160565}}]},{"name":"Unknown Test","packageName":"unknownTest","items":[{"frame":"  21 |\n  22 | describe(\"A parser\", function() {\n> 23 |     it(\"should not fail on an empty string\", function() {\n     |    ^ Unknown Test\n  24 |         expect``.toParse(strictSettings);\n  25 |     });\n  26 |","start":{"column":4,"line":23}},{"frame":"  25 |     });\n  26 |\n> 27 |     it(\"should ignore whitespace\", function() {\n     |    ^ Unknown Test\n  28 |         expect`    x    y    `.toParseLike(\"xy\", strictSettings);\n  29 |     });\n  30 |","start":{"column":4,"line":27}},{"frame":"  29 |     });\n  30 |\n> 31 |     it(\"should ignore whitespace in atom\", function() {\n     |    ^ Unknown Test\n  32 |         expect`    x   ^ y    `.toParseLike(\"x^y\", strictSettings);\n  33 |     });\n  34 | });","start":{"column":4,"line":31}},{"frame":"  104 |\n  105 | describe(\"A mathinner parser\", function() {\n> 106 |     it(\"should not fail\", function() {\n      |    ^ Unknown Test\n  107 |         expect`\\mathinner{\\langle{\\psi}\\rangle}`.toParse();\n  108 |         expect`\\frac 1 {\\mathinner{\\langle{\\psi}\\rangle}}`.toParse();\n  109 |     });","start":{"column":4,"line":106}},{"frame":"  171 |\n  172 | describe(\"A \\\\KaTeX parser\", function() {\n> 173 |     it(\"should not fail\", function() {\n      |    ^ Unknown Test\n  174 |         expect`\\KaTeX`.toParse();\n  175 |     });\n  176 | });","start":{"column":4,"line":173}},{"frame":"  177 |\n  178 | describe(\"A subscript and superscript parser\", function() {\n> 179 |     it(\"should not fail on superscripts\", function() {\n      |    ^ Unknown Test\n  180 |         expect`x^2`.toParse();\n  181 |     });\n  182 |","start":{"column":4,"line":179}},{"frame":"  181 |     });\n  182 |\n> 183 |     it(\"should not fail on subscripts\", function() {\n      |    ^ Unknown Test\n  184 |         expect`x_3`.toParse();\n  185 |     });\n  186 |","start":{"column":4,"line":183}},{"frame":"  185 |     });\n  186 |\n> 187 |     it(\"should not fail on both subscripts and superscripts\", function() {\n      |    ^ Unknown Test\n  188 |         expect`x^2_3`.toParse();\n  189 |\n  190 |         expect`x_2^3`.toParse();","start":{"column":4,"line":187}},{"frame":"  191 |     });\n  192 |\n> 193 |     it(\"should not fail when there is no nucleus\", function() {\n      |    ^ Unknown Test\n  194 |         expect`^3`.toParse();\n  195 |         expect`^3+`.toParse();\n  196 |         expect`_2`.toParse();","start":{"column":4,"line":193}},{"frame":"  235 |     });\n  236 |\n> 237 |     it(\"should produce the same thing regardless of order\", function() {\n      |    ^ Unknown Test\n  238 |         expect`x^2_3`.toParseLike`x_3^2`;\n  239 |     });\n  240 |","start":{"column":4,"line":237}},{"frame":"  239 |     });\n  240 |\n> 241 |     it(\"should not parse double subscripts or superscripts\", function() {\n      |    ^ Unknown Test\n  242 |         expect`x^x^x`.not.toParse();\n  243 |\n  244 |         expect`x_x_x`.not.toParse();","start":{"column":4,"line":241}},{"frame":"  253 |     });\n  254 |\n> 255 |     it(\"should work correctly with {}s\", function() {\n      |    ^ Unknown Test\n  256 |         expect`x^{2+3}`.toParse();\n  257 |\n  258 |         expect`x_{3-2}`.toParse();","start":{"column":4,"line":255}},{"frame":"  271 |     });\n  272 |\n> 273 |     it(\"should work with nested super/subscripts\", function() {\n      |    ^ Unknown Test\n  274 |         expect`x^{x^x}`.toParse();\n  275 |         expect`x^{x_x}`.toParse();\n  276 |         expect`x_{x^x}`.toParse();","start":{"column":4,"line":273}},{"frame":"  278 |     });\n  279 |\n> 280 |     it(\"should work with Unicode (sub|super)script characters\", function() {\n      |    ^ Unknown Test\n  281 |         expect`A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃`.toParseLike`A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}`;\n  282 |     });\n  283 |","start":{"column":4,"line":280}},{"frame":"  282 |     });\n  283 |\n> 284 |     it(\"should not fail if \\\\relax is in an atom\", function() {\n      |    ^ Unknown Test\n  285 |         expect`\\hskip1em\\relax^2`.toParse(strictSettings);\n  286 |     });\n  287 |","start":{"column":4,"line":284}},{"frame":"  286 |     });\n  287 |\n> 288 |     it(\"should skip \\\\relax in super/subscripts\", function() {\n      |    ^ Unknown Test\n  289 |         expect`x^\\relax 2`.toParseLike`x^2`;\n  290 |         expect`x_\\relax 2`.toParseLike`x_2`;\n  291 |     });","start":{"column":4,"line":288}},{"frame":"  293 |\n  294 | describe(\"A subscript and superscript tree-builder\", function() {\n> 295 |     it(\"should not fail when there is no nucleus\", function() {\n      |    ^ Unknown Test\n  296 |         expect`^3`.toBuild();\n  297 |         expect`_2`.toBuild();\n  298 |         expect`^3_2`.toBuild();","start":{"column":4,"line":295}},{"frame":"  302 |\n  303 | describe(\"A parser with limit controls\", function() {\n> 304 |     it(\"should fail when the limit control is not preceded by an op node\", function() {\n      |    ^ Unknown Test\n  305 |         expect`3\\nolimits_2^2`.not.toParse();\n  306 |         expect`\\sqrt\\limits_2^2`.not.toParse();\n  307 |         expect`45 +\\nolimits 45`.not.toParse();","start":{"column":4,"line":304}},{"frame":"  308 |     });\n  309 |\n> 310 |     it(\"should parse when the limit control directly follows an op node\", function() {\n      |    ^ Unknown Test\n  311 |         expect`\\int\\limits_2^2 3`.toParse();\n  312 |         expect`\\sum\\nolimits_3^4 4`.toParse();\n  313 |     });","start":{"column":4,"line":310}},{"frame":"  313 |     });\n  314 |\n> 315 |     it(\"should parse when the limit control is in the sup/sub area of an op node\", function() {\n      |    ^ Unknown Test\n  316 |         expect`\\int_2^2\\limits`.toParse();\n  317 |         expect`\\int^2\\nolimits_2`.toParse();\n  318 |         expect`\\int_2\\limits^2`.toParse();","start":{"column":4,"line":315}},{"frame":"  319 |     });\n  320 |\n> 321 |     it(\"should allow multiple limit controls in the sup/sub area of an op node\", function() {\n      |    ^ Unknown Test\n  322 |         expect`\\int_2\\nolimits^2\\limits 3`.toParse();\n  323 |         expect`\\int\\nolimits\\limits_2^2`.toParse();\n  324 |         expect`\\int\\limits\\limits\\limits_2^2`.toParse();","start":{"column":4,"line":321}},{"frame":"  337 |\n  338 | describe(\"A group parser\", function() {\n> 339 |     it(\"should not fail\", function() {\n      |    ^ Unknown Test\n  340 |         expect`{xy}`.toParse();\n  341 |     });\n  342 |","start":{"column":4,"line":339}},{"frame":"  354 |\n  355 | describe(\"A \\\\begingroup...\\\\endgroup parser\", function() {\n> 356 |     it(\"should not fail\", function() {\n      |    ^ Unknown Test\n  357 |         expect`\\begingroup xy \\endgroup`.toParse();\n  358 |     });\n  359 |","start":{"column":4,"line":356}},{"frame":"  358 |     });\n  359 |\n> 360 |     it(\"should fail when it is mismatched\", function() {\n      |    ^ Unknown Test\n  361 |         expect`\\begingroup xy`.not.toParse();\n  362 |         expect`\\begingroup xy }`.not.toParse();\n  363 |     });","start":{"column":4,"line":360}},{"frame":"  375 |     });\n  376 |\n> 377 |     it(\"should not affect spacing in math mode\", function() {\n      |    ^ Unknown Test\n  378 |         expect`\\begingroup x+ \\endgroup y`.toBuildLike`x+y`;\n  379 |     });\n  380 | });","start":{"column":4,"line":377}},{"frame":"  381 |\n  382 | describe(\"An implicit group parser\", function() {\n> 383 |     it(\"should not fail\", function() {\n      |    ^ Unknown Test\n  384 |         expect`\\Large x`.toParse();\n  385 |         expect`abc {abc \\Large xyz} abc`.toParse();\n  386 |     });","start":{"column":4,"line":383}},{"frame":"  443 |\n  444 | describe(\"A function parser\", function() {\n> 445 |     it(\"should parse no argument functions\", function() {\n      |    ^ Unknown Test\n  446 |         expect`\\div`.toParse();\n  447 |     });\n  448 |","start":{"column":4,"line":445}},{"frame":"  447 |     });\n  448 |\n> 449 |     it(\"should parse 1 argument functions\", function() {\n      |    ^ Unknown Test\n  450 |         expect`\\blue x`.toParse();\n  451 |     });\n  452 |","start":{"column":4,"line":449}},{"frame":"  451 |     });\n  452 |\n> 453 |     it(\"should parse 2 argument functions\", function() {\n      |    ^ Unknown Test\n  454 |         expect`\\frac 1 2`.toParse();\n  455 |     });\n  456 |","start":{"column":4,"line":453}},{"frame":"  455 |     });\n  456 |\n> 457 |     it(\"should not parse 1 argument functions with no arguments\", function() {\n      |    ^ Unknown Test\n  458 |         expect`\\blue`.not.toParse();\n  459 |     });\n  460 |","start":{"column":4,"line":457}},{"frame":"  459 |     });\n  460 |\n> 461 |     it(\"should not parse 2 argument functions with 0 or 1 arguments\", function() {\n      |    ^ Unknown Test\n  462 |         expect`\\frac`.not.toParse();\n  463 |\n  464 |         expect`\\frac 1`.not.toParse();","start":{"column":4,"line":461}},{"frame":"  465 |     });\n  466 |\n> 467 |     it(\"should not parse a function with text right after it\", function() {\n      |    ^ Unknown Test\n  468 |         expect`\\redx`.not.toParse();\n  469 |     });\n  470 |","start":{"column":4,"line":467}},{"frame":"  469 |     });\n  470 |\n> 471 |     it(\"should parse a function with a number right after it\", function() {\n      |    ^ Unknown Test\n  472 |         expect`\\frac12`.toParse();\n  473 |     });\n  474 |","start":{"column":4,"line":471}},{"frame":"  473 |     });\n  474 |\n> 475 |     it(\"should parse some functions with text right after it\", function() {\n      |    ^ Unknown Test\n  476 |         expect`\\;x`.toParse();\n  477 |     });\n  478 | });","start":{"column":4,"line":475}},{"frame":"  637 |     });\n  638 |\n> 639 |     it(\"should handle \\\\textstyle correctly\", function() {\n      |    ^ Unknown Test\n  640 |         expect`\\textstyle 1 \\over 2`.toParseLike`\\frac{\\textstyle 1}{2}`;\n  641 |         expect`{\\textstyle 1} \\over 2`.toParseLike`\\frac{\\textstyle 1}{2}`;\n  642 |     });","start":{"column":4,"line":639}},{"frame":"  663 |\n  664 | describe(\"A genfrac builder\", function() {\n> 665 |     it(\"should not fail\", function() {\n      |    ^ Unknown Test\n  666 |         expect`\\frac{x}{y}`.toBuild();\n  667 |         expect`\\dfrac{x}{y}`.toBuild();\n  668 |         expect`\\tfrac{x}{y}`.toBuild();","start":{"column":4,"line":665}},{"frame":"  676 |\n  677 | describe(\"A infix builder\", function() {\n> 678 |     it(\"should not fail\", function() {\n      |    ^ Unknown Test\n  679 |         expect`a \\over b`.toBuild();\n  680 |         expect`a \\atop b`.toBuild();\n  681 |         expect`a \\choose b`.toBuild();","start":{"column":4,"line":678}},{"frame":"  772 |     });\n  773 |\n> 774 |     it(\"should parse math within text group\", function() {\n      |    ^ Unknown Test\n  775 |         expect`\\text{graph: $y = mx + b$}`.toParse(strictSettings);\n  776 |         expect`\\text{graph: \\(y = mx + b\\)}`.toParse(strictSettings);\n  777 |     });","start":{"column":4,"line":774}},{"frame":"  777 |     });\n  778 |\n> 779 |     it(\"should parse math within text within math within text\", function() {\n      |    ^ Unknown Test\n  780 |         expect`\\text{hello $x + \\text{world $y$} + z$}`.toParse(strictSettings);\n  781 |         expect`\\text{hello \\(x + \\text{world $y$} + z\\)}`.toParse(strictSettings);\n  782 |         expect`\\text{hello $x + \\text{world \\(y\\)} + z$}`.toParse(strictSettings);","start":{"column":4,"line":779}},{"frame":"  784 |     });\n  785 |\n> 786 |     it(\"should forbid \\\\( within math mode\", function() {\n      |    ^ Unknown Test\n  787 |         expect`\\(`.not.toParse();\n  788 |         expect`\\text{$\\(x\\)$}`.not.toParse();\n  789 |     });","start":{"column":4,"line":786}},{"frame":"  789 |     });\n  790 |\n> 791 |     it(\"should forbid $ within math mode\", function() {\n      |    ^ Unknown Test\n  792 |         expect`$x$`.not.toParse();\n  793 |         expect`\\text{\\($x$\\)}`.not.toParse();\n  794 |     });","start":{"column":4,"line":791}},{"frame":"  794 |     });\n  795 |\n> 796 |     it(\"should detect unbalanced \\\\)\", function() {\n      |    ^ Unknown Test\n  797 |         expect`\\)`.not.toParse();\n  798 |         expect`\\text{\\)}`.not.toParse();\n  799 |     });","start":{"column":4,"line":796}},{"frame":"  799 |     });\n  800 |\n> 801 |     it(\"should detect unbalanced $\", function() {\n      |    ^ Unknown Test\n  802 |         expect`$`.not.toParse();\n  803 |         expect`\\text{$}`.not.toParse();\n  804 |     });","start":{"column":4,"line":801}},{"frame":"  804 |     });\n  805 |\n> 806 |     it(\"should not mix $ and \\\\(..\\\\)\", function() {\n      |    ^ Unknown Test\n  807 |         expect`\\text{$x\\)}`.not.toParse();\n  808 |         expect`\\text{\\(x$}`.not.toParse();\n  809 |     });","start":{"column":4,"line":806}},{"frame":"  809 |     });\n  810 |\n> 811 |     it(\"should parse spacing functions\", function() {\n      |    ^ Unknown Test\n  812 |         expect`a b\\, \\; \\! \\: \\> ~ \\thinspace \\medspace \\quad \\ `.toBuild();\n  813 |         expect`\\enspace \\thickspace \\qquad \\space \\nobreakspace`.toBuild();\n  814 |     });","start":{"column":4,"line":811}},{"frame":"  814 |     });\n  815 |\n> 816 |     it(\"should omit spaces after commands\", function() {\n      |    ^ Unknown Test\n  817 |         expect`\\text{\\textellipsis !}`.toParseLike`\\text{\\textellipsis!}`;\n  818 |     });\n  819 |","start":{"column":4,"line":816}},{"frame":"  818 |     });\n  819 |\n> 820 |     it(\"should handle ⋮ and \\\\vdots\", function() {\n      |    ^ Unknown Test\n  821 |         expect`\\text{a \\vdots b ⋮ d}`.toParse();\n  822 |     });\n  823 | });","start":{"column":4,"line":820}},{"frame":"  824 |\n  825 | describe(\"A texvc builder\", function() {\n> 826 |     it(\"should not fail\", function() {\n      |    ^ Unknown Test\n  827 |         expect`\\lang\\N\\darr\\R\\dArr\\Z\\Darr\\alef\\rang`.toBuild();\n  828 |         expect`\\alefsym\\uarr\\Alpha\\uArr\\Beta\\Uarr\\Chi`.toBuild();\n  829 |         expect`\\clubs\\diamonds\\hearts\\spades\\cnums\\Complex`.toBuild();","start":{"column":4,"line":826}},{"frame":"   998 |\n   999 | describe(\"An lap parser\", function() {\n> 1000 |     it(\"should not fail on a text argument\", function() {\n       |    ^ Unknown Test\n  1001 |         expect`\\rlap{\\,/}{=}`.toParse();\n  1002 |         expect`\\mathrlap{\\,/}{=}`.toParse();\n  1003 |         expect`{=}\\llap{/\\,}`.toParse();","start":{"column":4,"line":1000}},{"frame":"  1007 |     });\n  1008 |\n> 1009 |     it(\"should not fail if math version is used\", function() {\n       |    ^ Unknown Test\n  1010 |         expect`\\mathrlap{\\frac{a}{b}}{=}`.toParse();\n  1011 |         expect`{=}\\mathllap{\\frac{a}{b}}`.toParse();\n  1012 |         expect`\\sum_{\\mathclap{\\frac{a}{b}}}`.toParse();","start":{"column":4,"line":1009}},{"frame":"  1013 |     });\n  1014 |\n> 1015 |     it(\"should fail on math if AMS version is used\", function() {\n       |    ^ Unknown Test\n  1016 |         expect`\\rlap{\\frac{a}{b}}{=}`.not.toParse();\n  1017 |         expect`{=}\\llap{\\frac{a}{b}}`.not.toParse();\n  1018 |         expect`\\sum_{\\clap{\\frac{a}{b}}}`.not.toParse();","start":{"column":4,"line":1015}},{"frame":"  1269 | describe(\"A begin/end parser\", function() {\n  1270 |\n> 1271 |     it(\"should parse a simple environment\", function() {\n       |    ^ Unknown Test\n  1272 |         expect`\\begin{matrix}a&b\\\\c&d\\end{matrix}`.toParse();\n  1273 |     });\n  1274 |","start":{"column":4,"line":1271}},{"frame":"  1273 |     });\n  1274 |\n> 1275 |     it(\"should parse an environment with argument\", function() {\n       |    ^ Unknown Test\n  1276 |         expect`\\begin{array}{cc}a&b\\\\c&d\\end{array}`.toParse();\n  1277 |     });\n  1278 |","start":{"column":4,"line":1275}},{"frame":"  1277 |     });\n  1278 |\n> 1279 |     it(\"should parse and build an empty environment\", function() {\n       |    ^ Unknown Test\n  1280 |         expect`\\begin{aligned}\\end{aligned}`.toBuild();\n  1281 |         expect`\\begin{matrix}\\end{matrix}`.toBuild();\n  1282 |     });","start":{"column":4,"line":1279}},{"frame":"  1282 |     });\n  1283 |\n> 1284 |     it(\"should parse an environment with hlines\", function() {\n       |    ^ Unknown Test\n  1285 |         expect`\\begin{matrix}\\hline a&b\\\\ \\hline c&d\\end{matrix}`.toParse();\n  1286 |         expect`\\begin{matrix}\\hline a&b\\cr \\hline c&d\\end{matrix}`.toParse();\n  1287 |         expect`\\begin{matrix}\\hdashline a&b\\\\ \\hdashline c&d\\end{matrix}`.toParse();","start":{"column":4,"line":1284}},{"frame":"  1288 |     });\n  1289 |\n> 1290 |     it(\"should forbid hlines outside array environment\", () => {\n       |    ^ Unknown Test\n  1291 |         expect`\\hline`.not.toParse();\n  1292 |     });\n  1293 |","start":{"column":4,"line":1290}},{"frame":"  1292 |     });\n  1293 |\n> 1294 |     it(\"should error when name is mismatched\", function() {\n       |    ^ Unknown Test\n  1295 |         expect`\\begin{matrix}a&b\\\\c&d\\end{pmatrix}`.not.toParse();\n  1296 |     });\n  1297 |","start":{"column":4,"line":1294}},{"frame":"  1296 |     });\n  1297 |\n> 1298 |     it(\"should error when commands are mismatched\", function() {\n       |    ^ Unknown Test\n  1299 |         expect`\\begin{matrix}a&b\\\\c&d\\right{pmatrix}`.not.toParse();\n  1300 |     });\n  1301 |","start":{"column":4,"line":1298}},{"frame":"  1300 |     });\n  1301 |\n> 1302 |     it(\"should error when end is missing\", function() {\n       |    ^ Unknown Test\n  1303 |         expect`\\begin{matrix}a&b\\\\c&d`.not.toParse();\n  1304 |     });\n  1305 |","start":{"column":4,"line":1302}},{"frame":"  1304 |     });\n  1305 |\n> 1306 |     it(\"should error when braces are mismatched\", function() {\n       |    ^ Unknown Test\n  1307 |         expect`{\\begin{matrix}a&b\\\\c&d}\\end{matrix}`.not.toParse();\n  1308 |     });\n  1309 |","start":{"column":4,"line":1306}},{"frame":"  1308 |     });\n  1309 |\n> 1310 |     it(\"should cooperate with infix notation\", function() {\n       |    ^ Unknown Test\n  1311 |         expect`\\begin{matrix}0&1\\over2&3\\\\4&5&6\\end{matrix}`.toParse();\n  1312 |     });\n  1313 |","start":{"column":4,"line":1310}},{"frame":"  1318 |     });\n  1319 |\n> 1320 |     it(\"should allow \\\\cr and \\\\\\\\ as a line terminator\", function() {\n       |    ^ Unknown Test\n  1321 |         expect`\\begin{matrix}a&b\\cr c&d\\end{matrix}`.toParse();\n  1322 |         expect`\\begin{matrix}a&b\\\\c&d\\end{matrix}`.toParse();\n  1323 |     });","start":{"column":4,"line":1320}},{"frame":"  1323 |     });\n  1324 |\n> 1325 |     it(\"should not allow \\\\cr to scan for an optional size argument\", function() {\n       |    ^ Unknown Test\n  1326 |         expect`\\begin{matrix}a&b\\cr[c]&d\\end{matrix}`.toParse();\n  1327 |     });\n  1328 |","start":{"column":4,"line":1325}},{"frame":"  1327 |     });\n  1328 |\n> 1329 |     it(\"should not treat [ after space as optional argument to \\\\\\\\\", function() {\n       |    ^ Unknown Test\n  1330 |         expect`\\begin{matrix}a&b\\\\ [c]&d\\end{matrix}`.toParse();\n  1331 |         expect`a\\\\ [b]`.toParse();\n  1332 |     });","start":{"column":4,"line":1329}},{"frame":"  1342 |     });\n  1343 |\n> 1344 |     it(\"should allow an optional argument in {matrix*} and company.\", function() {\n       |    ^ Unknown Test\n  1345 |         expect`\\begin{matrix*}[r] a & -1 \\\\ -1 & d \\end{matrix*}`.toBuild();\n  1346 |         expect`\\begin{pmatrix*}[r] a & -1 \\\\ -1 & d \\end{pmatrix*}`.toBuild();\n  1347 |         expect`\\begin{bmatrix*}[r] a & -1 \\\\ -1 & d \\end{bmatrix*}`.toBuild();","start":{"column":4,"line":1344}},{"frame":"  1379 |     });\n  1380 |\n> 1381 |     it(\"should build sized square roots\", function() {\n       |    ^ Unknown Test\n  1382 |         expect`\\Large\\sqrt[3]{x}`.toBuild();\n  1383 |     });\n  1384 |","start":{"column":4,"line":1381}},{"frame":"  1383 |     });\n  1384 |\n> 1385 |     it(\"should expand argument if optional argument doesn't exist\", function() {\n       |    ^ Unknown Test\n  1386 |         expect`\\sqrt\\foo`.toParseLike(\"\\\\sqrt123\",\n  1387 |             new Settings({macros: {\"\\\\foo\": \"123\"}}));\n  1388 |     });","start":{"column":4,"line":1385}},{"frame":"  1388 |     });\n  1389 |\n> 1390 |     it(\"should not expand argument if optional argument exists\", function() {\n       |    ^ Unknown Test\n  1391 |         expect`\\sqrt[2]\\foo`.toParseLike(\"\\\\sqrt[2]{123}\",\n  1392 |             new Settings({macros: {\"\\\\foo\": \"123\"}}));\n  1393 |     });","start":{"column":4,"line":1390}},{"frame":"  1395 |\n  1396 | describe(\"A TeX-compliant parser\", function() {\n> 1397 |     it(\"should work\", function() {\n       |    ^ Unknown Test\n  1398 |         expect`\\frac 2 3`.toParse();\n  1399 |     });\n  1400 |","start":{"column":4,"line":1397}},{"frame":"  1414 |     });\n  1415 |\n> 1416 |     it(\"should fail when there are missing sup/subscripts\", function() {\n       |    ^ Unknown Test\n  1417 |         expect`x^`.not.toParse();\n  1418 |         expect`x_`.not.toParse();\n  1419 |     });","start":{"column":4,"line":1416}},{"frame":"  1485 |     });\n  1486 |\n> 1487 |     it(\"should parse multiple primes correctly\", function() {\n       |    ^ Unknown Test\n  1488 |         expect`x''''`.toParse();\n  1489 |         expect`x_2''`.toParse();\n  1490 |         expect`x''_2`.toParse();","start":{"column":4,"line":1487}},{"frame":"  1491 |     });\n  1492 |\n> 1493 |     it(\"should fail when sup/subscripts are interspersed with arguments\", function() {\n       |    ^ Unknown Test\n  1494 |         expect`\\sqrt^23`.not.toParse();\n  1495 |         expect`\\frac^234`.not.toParse();\n  1496 |         expect`\\frac2^34`.not.toParse();","start":{"column":4,"line":1493}},{"frame":"  1497 |     });\n  1498 |\n> 1499 |     it(\"should succeed when sup/subscripts come after whole functions\", function() {\n       |    ^ Unknown Test\n  1500 |         expect`\\sqrt2^3`.toParse();\n  1501 |         expect`\\frac23^4`.toParse();\n  1502 |     });","start":{"column":4,"line":1499}},{"frame":"  1502 |     });\n  1503 |\n> 1504 |     it(\"should succeed with a sqrt around a text/frac\", function() {\n       |    ^ Unknown Test\n  1505 |         expect`\\sqrt \\frac x y`.toParse();\n  1506 |         expect`\\sqrt \\text x`.toParse();\n  1507 |         expect`x^\\frac x y`.toParse();","start":{"column":4,"line":1504}},{"frame":"  1539 |\n  1540 | describe(\"An op symbol builder\", function() {\n> 1541 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  1542 |         expect`\\int_i^n`.toBuild();\n  1543 |         expect`\\iint_i^n`.toBuild();\n  1544 |         expect`\\iiint_i^n`.toBuild();","start":{"column":4,"line":1541}},{"frame":"  1556 |\n  1557 | describe(\"A style change parser\", function() {\n> 1558 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  1559 |         expect`\\displaystyle x`.toParse();\n  1560 |         expect`\\textstyle x`.toParse();\n  1561 |         expect`\\scriptstyle x`.toParse();","start":{"column":4,"line":1558}},{"frame":"  1587 |\n  1588 | describe(\"A font parser\", function() {\n> 1589 |     it(\"should parse \\\\mathrm, \\\\mathbb, \\\\mathit, and \\\\mathnormal\", function() {\n       |    ^ Unknown Test\n  1590 |         expect`\\mathrm x`.toParse();\n  1591 |         expect`\\mathbb x`.toParse();\n  1592 |         expect`\\mathit x`.toParse();","start":{"column":4,"line":1589}},{"frame":"  1598 |     });\n  1599 |\n> 1600 |     it(\"should parse \\\\mathcal and \\\\mathfrak\", function() {\n       |    ^ Unknown Test\n  1601 |         expect`\\mathcal{ABC123}`.toParse();\n  1602 |         expect`\\mathfrak{abcABC123}`.toParse();\n  1603 |     });","start":{"column":4,"line":1600}},{"frame":"  1652 |     });\n  1653 |\n> 1654 |     it(\"should not parse a series of font commands\", function() {\n       |    ^ Unknown Test\n  1655 |         expect`\\mathbb \\mathrm R`.not.toParse();\n  1656 |     });\n  1657 |","start":{"column":4,"line":1654}},{"frame":"  1667 |     });\n  1668 |\n> 1669 |     it(\"should be allowed in the argument\", function() {\n       |    ^ Unknown Test\n  1670 |         expect`e^\\mathbf{x}`.toParse();\n  1671 |     });\n  1672 |","start":{"column":4,"line":1669}},{"frame":"  1676 |     });\n  1677 |\n> 1678 |     it(\"old-style fonts work like new-style fonts\", () => {\n       |    ^ Unknown Test\n  1679 |         expect`\\rm xyz`.toParseLike`\\mathrm{xyz}`;\n  1680 |         expect`\\sf xyz`.toParseLike`\\mathsf{xyz}`;\n  1681 |         expect`\\tt xyz`.toParseLike`\\mathtt{xyz}`;","start":{"column":4,"line":1678}},{"frame":"  1687 |\n  1688 | describe(\"A \\\\pmb builder\", function() {\n> 1689 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  1690 |         expect`\\pmb{\\mu}`.toBuild();\n  1691 |         expect`\\pmb{=}`.toBuild();\n  1692 |         expect`\\pmb{+}`.toBuild();","start":{"column":4,"line":1689}},{"frame":"  1698 |\n  1699 | describe(\"A raise parser\", function() {\n> 1700 |     it(\"should parse and build text in \\\\raisebox\", function() {\n       |    ^ Unknown Test\n  1701 |         expect`\\raisebox{5pt}{text}`.toBuild(strictSettings);\n  1702 |         expect`\\raisebox{-5pt}{text}`.toBuild(strictSettings);\n  1703 |     });","start":{"column":4,"line":1700}},{"frame":"  1703 |     });\n  1704 |\n> 1705 |     it(\"should parse and build math in non-strict \\\\vcenter\", function() {\n       |    ^ Unknown Test\n  1706 |         expect`\\vcenter{\\frac a b}`.toBuild(nonstrictSettings);\n  1707 |     });\n  1708 |","start":{"column":4,"line":1705}},{"frame":"  1707 |     });\n  1708 |\n> 1709 |     it(\"should fail to parse math in \\\\raisebox\", function() {\n       |    ^ Unknown Test\n  1710 |         expect`\\raisebox{5pt}{\\frac a b}`.not.toParse(nonstrictSettings);\n  1711 |         expect`\\raisebox{-5pt}{\\frac a b}`.not.toParse(nonstrictSettings);\n  1712 |     });","start":{"column":4,"line":1709}},{"frame":"  1712 |     });\n  1713 |\n> 1714 |     it(\"should fail to parse math in an \\\\hbox\", function() {\n       |    ^ Unknown Test\n  1715 |         expect`\\hbox{\\frac a b}`.not.toParse(nonstrictSettings);\n  1716 |     });\n  1717 |","start":{"column":4,"line":1714}},{"frame":"  1716 |     });\n  1717 |\n> 1718 |     it(\"should fail to build, given an unbraced length\", function() {\n       |    ^ Unknown Test\n  1719 |         expect`\\raisebox5pt{text}`.not.toBuild(strictSettings);\n  1720 |         expect`\\raisebox-5pt{text}`.not.toBuild(strictSettings);\n  1721 |     });","start":{"column":4,"line":1718}},{"frame":"  1721 |     });\n  1722 |\n> 1723 |     it(\"should build math in an hbox when math mode is set\", function() {\n       |    ^ Unknown Test\n  1724 |         expect`a + \\vcenter{\\hbox{$\\frac{\\frac a b}c$}}`\n  1725 |             .toBuild(strictSettings);\n  1726 |     });","start":{"column":4,"line":1723}},{"frame":"  1770 |     });\n  1771 |\n> 1772 |     it(\"should not parse a comment without newline in strict mode\", () => {\n       |    ^ Unknown Test\n  1773 |         expect`x%y`.not.toParse(strictSettings);\n  1774 |         expect`x%y`.toParse(nonstrictSettings);\n  1775 |     });","start":{"column":4,"line":1772}},{"frame":"  2255 |\n  2256 | describe(\"An accent parser\", function() {\n> 2257 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2258 |         expect`\\vec{x}`.toParse();\n  2259 |         expect`\\vec{x^2}`.toParse();\n  2260 |         expect`\\vec{x}^2`.toParse();","start":{"column":4,"line":2257}},{"frame":"  2275 |     });\n  2276 |\n> 2277 |     it(\"should parse stretchy, shifty accents\", function() {\n       |    ^ Unknown Test\n  2278 |         expect`\\widehat{x}`.toParse();\n  2279 |         expect`\\widecheck{x}`.toParse();\n  2280 |     });","start":{"column":4,"line":2277}},{"frame":"  2280 |     });\n  2281 |\n> 2282 |     it(\"should parse stretchy, non-shifty accents\", function() {\n       |    ^ Unknown Test\n  2283 |         expect`\\overrightarrow{x}`.toParse();\n  2284 |     });\n  2285 | });","start":{"column":4,"line":2282}},{"frame":"  2286 |\n  2287 | describe(\"An accent builder\", function() {\n> 2288 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2289 |         expect`\\vec{x}`.toBuild();\n  2290 |         expect`\\vec{x}^2`.toBuild();\n  2291 |         expect`\\vec{x}_2`.toBuild();","start":{"column":4,"line":2288}},{"frame":"  2303 |\n  2304 | describe(\"A stretchy and shifty accent builder\", function() {\n> 2305 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2306 |         expect`\\widehat{AB}`.toBuild();\n  2307 |         expect`\\widecheck{AB}`.toBuild();\n  2308 |         expect`\\widehat{AB}^2`.toBuild();","start":{"column":4,"line":2305}},{"frame":"  2321 |\n  2322 | describe(\"A stretchy and non-shifty accent builder\", function() {\n> 2323 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2324 |         expect`\\overrightarrow{AB}`.toBuild();\n  2325 |         expect`\\overrightarrow{AB}^2`.toBuild();\n  2326 |         expect`\\overrightarrow{AB}_2`.toBuild();","start":{"column":4,"line":2323}},{"frame":"  2347 |\n  2348 | describe(\"An under-accent parser\", function() {\n> 2349 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2350 |         expect`\\underrightarrow{x}`.toParse();\n  2351 |         expect`\\underrightarrow{x^2}`.toParse();\n  2352 |         expect`\\underrightarrow{x}^2`.toParse();","start":{"column":4,"line":2349}},{"frame":"  2368 |\n  2369 | describe(\"An under-accent builder\", function() {\n> 2370 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2371 |         expect`\\underrightarrow{x}`.toBuild();\n  2372 |         expect`\\underrightarrow{x}^2`.toBuild();\n  2373 |         expect`\\underrightarrow{x}_2`.toBuild();","start":{"column":4,"line":2370}},{"frame":"  2386 |\n  2387 | describe(\"An extensible arrow parser\", function() {\n> 2388 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2389 |         expect`\\xrightarrow{x}`.toParse();\n  2390 |         expect`\\xrightarrow{x^2}`.toParse();\n  2391 |         expect`\\xrightarrow{x}^2`.toParse();","start":{"column":4,"line":2388}},{"frame":"  2408 |\n  2409 | describe(\"An extensible arrow builder\", function() {\n> 2410 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2411 |         expect`\\xrightarrow{x}`.toBuild();\n  2412 |         expect`\\xrightarrow{x}^2`.toBuild();\n  2413 |         expect`\\xrightarrow{x}_2`.toBuild();","start":{"column":4,"line":2410}},{"frame":"  2427 |\n  2428 | describe(\"A horizontal brace parser\", function() {\n> 2429 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2430 |         expect`\\overbrace{x}`.toParse();\n  2431 |         expect`\\overbrace{x^2}`.toParse();\n  2432 |         expect`\\overbrace{x}^2`.toParse();","start":{"column":4,"line":2429}},{"frame":"  2450 |\n  2451 | describe(\"A horizontal brace builder\", function() {\n> 2452 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2453 |         expect`\\overbrace{x}`.toBuild();\n  2454 |         expect`\\overbrace{x}^2`.toBuild();\n  2455 |         expect`\\underbrace{x}_2`.toBuild();","start":{"column":4,"line":2452}},{"frame":"  2468 |\n  2469 | describe(\"A boxed parser\", function() {\n> 2470 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2471 |         expect`\\boxed{x}`.toParse();\n  2472 |         expect`\\boxed{x^2}`.toParse();\n  2473 |         expect`\\boxed{x}^2`.toParse();","start":{"column":4,"line":2470}},{"frame":"  2483 |\n  2484 | describe(\"A boxed builder\", function() {\n> 2485 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2486 |         expect`\\boxed{x}`.toBuild();\n  2487 |         expect`\\boxed{x}^2`.toBuild();\n  2488 |         expect`\\boxed{x}_2`.toBuild();","start":{"column":4,"line":2485}},{"frame":"  2500 |\n  2501 | describe(\"An fbox parser, unlike a boxed parser,\", function() {\n> 2502 |     it(\"should fail when given math\", function() {\n       |    ^ Unknown Test\n  2503 |         expect`\\fbox{\\frac a b}`.not.toParse();\n  2504 |     });\n  2505 | });","start":{"column":4,"line":2502}},{"frame":"  2506 |\n  2507 | describe(\"A colorbox parser\", function() {\n> 2508 |     it(\"should not fail, given a text argument\", function() {\n       |    ^ Unknown Test\n  2509 |         expect`\\colorbox{red}{a b}`.toParse();\n  2510 |         expect`\\colorbox{red}{x}^2`.toParse();\n  2511 |         expect`\\colorbox{red} x`.toParse();","start":{"column":4,"line":2508}},{"frame":"  2512 |     });\n  2513 |\n> 2514 |     it(\"should fail, given a math argument\", function() {\n       |    ^ Unknown Test\n  2515 |         expect`\\colorbox{red}{\\alpha}`.not.toParse();\n  2516 |         expect`\\colorbox{red}{\\frac{a}{b}}`.not.toParse();\n  2517 |     });","start":{"column":4,"line":2514}},{"frame":"  2517 |     });\n  2518 |\n> 2519 |     it(\"should parse a color\", function() {\n       |    ^ Unknown Test\n  2520 |         expect`\\colorbox{red}{a b}`.toParse();\n  2521 |         expect`\\colorbox{#197}{a b}`.toParse();\n  2522 |         expect`\\colorbox{#1a9b7c}{a b}`.toParse();","start":{"column":4,"line":2519}},{"frame":"  2530 |\n  2531 | describe(\"A colorbox builder\", function() {\n> 2532 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2533 |         expect`\\colorbox{red}{a b}`.toBuild();\n  2534 |         expect`\\colorbox{red}{a b}^2`.toBuild();\n  2535 |         expect`\\colorbox{red} x`.toBuild();","start":{"column":4,"line":2532}},{"frame":"  2542 |\n  2543 | describe(\"An fcolorbox parser\", function() {\n> 2544 |     it(\"should not fail, given a text argument\", function() {\n       |    ^ Unknown Test\n  2545 |         expect`\\fcolorbox{blue}{yellow}{a b}`.toParse();\n  2546 |         expect`\\fcolorbox{blue}{yellow}{x}^2`.toParse();\n  2547 |         expect`\\fcolorbox{blue}{yellow} x`.toParse();","start":{"column":4,"line":2544}},{"frame":"  2548 |     });\n  2549 |\n> 2550 |     it(\"should fail, given a math argument\", function() {\n       |    ^ Unknown Test\n  2551 |         expect`\\fcolorbox{blue}{yellow}{\\alpha}`.not.toParse();\n  2552 |         expect`\\fcolorbox{blue}{yellow}{\\frac{a}{b}}`.not.toParse();\n  2553 |     });","start":{"column":4,"line":2550}},{"frame":"  2553 |     });\n  2554 |\n> 2555 |     it(\"should parse a color\", function() {\n       |    ^ Unknown Test\n  2556 |         expect`\\fcolorbox{blue}{yellow}{a b}`.toParse();\n  2557 |         expect`\\fcolorbox{blue}{#197}{a b}`.toParse();\n  2558 |         expect`\\fcolorbox{blue}{#1a9b7c}{a b}`.toParse();","start":{"column":4,"line":2555}},{"frame":"  2566 |\n  2567 | describe(\"A fcolorbox builder\", function() {\n> 2568 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2569 |         expect`\\fcolorbox{blue}{yellow}{a b}`.toBuild();\n  2570 |         expect`\\fcolorbox{blue}{yellow}{a b}^2`.toBuild();\n  2571 |         expect`\\fcolorbox{blue}{yellow} x`.toBuild();","start":{"column":4,"line":2568}},{"frame":"  2578 |\n  2579 | describe(\"A strike-through parser\", function() {\n> 2580 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2581 |         expect`\\cancel{x}`.toParse();\n  2582 |         expect`\\cancel{x^2}`.toParse();\n  2583 |         expect`\\cancel{x}^2`.toParse();","start":{"column":4,"line":2580}},{"frame":"  2599 |\n  2600 | describe(\"A strike-through builder\", function() {\n> 2601 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2602 |         expect`\\cancel{x}`.toBuild();\n  2603 |         expect`\\cancel{x}^2`.toBuild();\n  2604 |         expect`\\cancel{x}_2`.toBuild();","start":{"column":4,"line":2601}},{"frame":"  2620 |\n  2621 | describe(\"A actuarial angle parser\", function() {\n> 2622 |     it(\"should not fail in math mode\", function() {\n       |    ^ Unknown Test\n  2623 |         expect`a_{\\angl{n}}`.toParse();\n  2624 |     });\n  2625 |     it(\"should fail in text mode\", function() {","start":{"column":4,"line":2622}},{"frame":"  2623 |         expect`a_{\\angl{n}}`.toParse();\n  2624 |     });\n> 2625 |     it(\"should fail in text mode\", function() {\n       |    ^ Unknown Test\n  2626 |         expect`\\text{a_{\\angl{n}}}`.not.toParse();\n  2627 |     });\n  2628 | });","start":{"column":4,"line":2625}},{"frame":"  2629 |\n  2630 | describe(\"A actuarial angle builder\", function() {\n> 2631 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2632 |         expect`a_{\\angl{n}}`.toBuild();\n  2633 |         expect`a_{\\angl{n}i}`.toBuild();\n  2634 |         expect`a_{\\angl n}`.toBuild();","start":{"column":4,"line":2631}},{"frame":"  2638 |\n  2639 | describe(\"\\\\phase\", function() {\n> 2640 |     it(\"should fail in text mode\", function() {\n       |    ^ Unknown Test\n  2641 |         expect`\\text{\\phase{-78.2^\\circ}}`.not.toParse();\n  2642 |     });\n  2643 |     it(\"should not fail in math mode\", function() {","start":{"column":4,"line":2640}},{"frame":"  2641 |         expect`\\text{\\phase{-78.2^\\circ}}`.not.toParse();\n  2642 |     });\n> 2643 |     it(\"should not fail in math mode\", function() {\n       |    ^ Unknown Test\n  2644 |         expect`\\phase{-78.2^\\circ}`.toBuild();\n  2645 |     });\n  2646 | });","start":{"column":4,"line":2643}},{"frame":"  2647 |\n  2648 | describe(\"A phantom parser\", function() {\n> 2649 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2650 |         expect`\\phantom{x}`.toParse();\n  2651 |         expect`\\phantom{x^2}`.toParse();\n  2652 |         expect`\\phantom{x}^2`.toParse();","start":{"column":4,"line":2649}},{"frame":"  2667 |\n  2668 | describe(\"A phantom builder\", function() {\n> 2669 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2670 |         expect`\\phantom{x}`.toBuild();\n  2671 |         expect`\\phantom{x^2}`.toBuild();\n  2672 |         expect`\\phantom{x}^2`.toBuild();","start":{"column":4,"line":2669}},{"frame":"  2696 |\n  2697 | describe(\"A smash parser\", function() {\n> 2698 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2699 |         expect`\\smash{x}`.toParse();\n  2700 |         expect`\\smash{x^2}`.toParse();\n  2701 |         expect`\\smash{x}^2`.toParse();","start":{"column":4,"line":2698}},{"frame":"  2721 |\n  2722 | describe(\"A smash builder\", function() {\n> 2723 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2724 |         expect`\\smash{x}`.toBuild(nonstrictSettings);\n  2725 |         expect`\\smash{x^2}`.toBuild(nonstrictSettings);\n  2726 |         expect`\\smash{x}^2`.toBuild(nonstrictSettings);","start":{"column":4,"line":2723}},{"frame":"  2745 |\n  2746 | describe(\"An optional argument parser\", function() {\n> 2747 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2748 |         // Note this doesn't actually make an optional argument, but still\n  2749 |         // should work\n  2750 |         expect`\\frac[1]{2}{3}`.toParse();","start":{"column":4,"line":2747}},{"frame":"  2753 |     });\n  2754 |\n> 2755 |     it(\"should work with sqrts with optional arguments\", function() {\n       |    ^ Unknown Test\n  2756 |         expect`\\sqrt[3]{2}`.toParse();\n  2757 |     });\n  2758 |","start":{"column":4,"line":2755}},{"frame":"  2757 |     });\n  2758 |\n> 2759 |     it(\"should work when the optional argument is missing\", function() {\n       |    ^ Unknown Test\n  2760 |         expect`\\sqrt{2}`.toParse();\n  2761 |         expect`\\rule{1em}{2em}`.toParse();\n  2762 |     });","start":{"column":4,"line":2759}},{"frame":"  2762 |     });\n  2763 |\n> 2764 |     it(\"should fail when the optional argument is malformed\", function() {\n       |    ^ Unknown Test\n  2765 |         expect`\\rule[1]{2em}{3em}`.not.toParse();\n  2766 |     });\n  2767 |","start":{"column":4,"line":2764}},{"frame":"  2766 |     });\n  2767 |\n> 2768 |     it(\"should not work if the optional argument isn't closed\", function() {\n       |    ^ Unknown Test\n  2769 |         expect`\\sqrt[`.not.toParse();\n  2770 |     });\n  2771 | });","start":{"column":4,"line":2768}},{"frame":"  2816 | describe(\"A substack function\", function() {\n  2817 |\n> 2818 |     it(\"should build\", function() {\n       |    ^ Unknown Test\n  2819 |         expect`\\sum_{\\substack{ 0<i<m \\\\ 0<j<n }}  P(i,j)`.toBuild();\n  2820 |     });\n  2821 |     it(\"should accommodate spaces in the argument\", function() {","start":{"column":4,"line":2818}},{"frame":"  2819 |         expect`\\sum_{\\substack{ 0<i<m \\\\ 0<j<n }}  P(i,j)`.toBuild();\n  2820 |     });\n> 2821 |     it(\"should accommodate spaces in the argument\", function() {\n       |    ^ Unknown Test\n  2822 |         expect`\\sum_{\\substack{ 0<i<m \\\\ 0<j<n }}  P(i,j)`.toBuild();\n  2823 |     });\n  2824 |     it(\"should accommodate macros in the argument\", function() {","start":{"column":4,"line":2821}},{"frame":"  2822 |         expect`\\sum_{\\substack{ 0<i<m \\\\ 0<j<n }}  P(i,j)`.toBuild();\n  2823 |     });\n> 2824 |     it(\"should accommodate macros in the argument\", function() {\n       |    ^ Unknown Test\n  2825 |         expect`\\sum_{\\substack{ 0<i<\\varPi \\\\ 0<j<\\pi }}  P(i,j)`.toBuild();\n  2826 |     });\n  2827 |     it(\"should accommodate an empty argument\", function() {","start":{"column":4,"line":2824}},{"frame":"  2825 |         expect`\\sum_{\\substack{ 0<i<\\varPi \\\\ 0<j<\\pi }}  P(i,j)`.toBuild();\n  2826 |     });\n> 2827 |     it(\"should accommodate an empty argument\", function() {\n       |    ^ Unknown Test\n  2828 |         expect`\\sum_{\\substack{}}  P(i,j)`.toBuild();\n  2829 |     });\n  2830 |","start":{"column":4,"line":2827}},{"frame":"  2833 | describe(\"A smallmatrix environment\", function() {\n  2834 |\n> 2835 |     it(\"should build\", function() {\n       |    ^ Unknown Test\n  2836 |         expect`\\begin{smallmatrix} a & b \\\\ c & d \\end{smallmatrix}`.toBuild();\n  2837 |     });\n  2838 |","start":{"column":4,"line":2835}},{"frame":"  2841 | describe(\"A cases environment\", function() {\n  2842 |\n> 2843 |     it(\"should parse its input\", function() {\n       |    ^ Unknown Test\n  2844 |         expect`f(a,b)=\\begin{cases}a+1&\\text{if }b\\text{ is odd}\\\\a&\\text{if }b=0\\\\a-1&\\text{otherwise}\\end{cases}`\n  2845 |             .toParse();\n  2846 |     });","start":{"column":4,"line":2843}},{"frame":"  2850 | describe(\"An rcases environment\", function() {\n  2851 |\n> 2852 |     it(\"should build\", function() {\n       |    ^ Unknown Test\n  2853 |         expect`\\begin{rcases} a &\\text{if } b \\\\ c &\\text{if } d \\end{rcases}⇒…`\n  2854 |             .toBuild();\n  2855 |     });","start":{"column":4,"line":2852}},{"frame":"  2859 | describe(\"An aligned environment\", function() {\n  2860 |\n> 2861 |     it(\"should parse its input\", function() {\n       |    ^ Unknown Test\n  2862 |         expect`\\begin{aligned}a&=b&c&=d\\\\e&=f\\end{aligned}`.toParse();\n  2863 |     });\n  2864 |","start":{"column":4,"line":2861}},{"frame":"  2863 |     });\n  2864 |\n> 2865 |     it(\"should allow cells in brackets\", function() {\n       |    ^ Unknown Test\n  2866 |         expect`\\begin{aligned}[a]&[b]\\\\ [c]&[d]\\end{aligned}`.toParse();\n  2867 |     });\n  2868 |","start":{"column":4,"line":2865}},{"frame":"  2867 |     });\n  2868 |\n> 2869 |     it(\"should forbid cells in brackets without space\", function() {\n       |    ^ Unknown Test\n  2870 |         expect`\\begin{aligned}[a]&[b]\\\\[c]&[d]\\end{aligned}`.not.toParse();\n  2871 |     });\n  2872 |","start":{"column":4,"line":2869}},{"frame":"  2878 |\n  2879 | describe(\"AMS environments\", function() {\n> 2880 |     it(\"should fail outside display mode\", () => {\n       |    ^ Unknown Test\n  2881 |         expect`\\begin{gather}a+b\\\\c+d\\end{gather}`.not.toParse(nonstrictSettings);\n  2882 |         expect`\\begin{gather*}a+b\\\\c+d\\end{gather*}`.not.toParse(nonstrictSettings);\n  2883 |         expect`\\begin{align}a&=b+c\\\\d+e&=f\\end{align}`.not.toParse(nonstrictSettings);","start":{"column":4,"line":2880}},{"frame":"  2891 |\n  2892 |     const displayMode = new Settings({displayMode: true});\n> 2893 |     it(\"should build if in display mode\", () => {\n       |    ^ Unknown Test\n  2894 |         expect`\\begin{gather}a+b\\\\c+d\\end{gather}`.toBuild(displayMode);\n  2895 |         expect`\\begin{gather*}a+b\\\\c+d\\end{gather*}`.toBuild(displayMode);\n  2896 |         expect`\\begin{align}a&=b+c\\\\d+e&=f\\end{align}`.toBuild(displayMode);","start":{"column":4,"line":2893}},{"frame":"  2904 |     });\n  2905 |\n> 2906 |     it(\"should build an empty environment\", () => {\n       |    ^ Unknown Test\n  2907 |         expect`\\begin{gather}\\end{gather}`.toBuild(displayMode);\n  2908 |         expect`\\begin{gather*}\\end{gather*}`.toBuild(displayMode);\n  2909 |         expect`\\begin{align}\\end{align}`.toBuild(displayMode);","start":{"column":4,"line":2906}},{"frame":"  2916 |     });\n  2917 |\n> 2918 |     it(\"{equation} should fail if argument contains two rows.\", () => {\n       |    ^ Unknown Test\n  2919 |         expect`\\begin{equation}a=\\cr b+c\\end{equation}`.not.toParse(displayMode);\n  2920 |     });\n  2921 |     it(\"{equation} should fail if argument contains two columns.\", () => {","start":{"column":4,"line":2918}},{"frame":"  2919 |         expect`\\begin{equation}a=\\cr b+c\\end{equation}`.not.toParse(displayMode);\n  2920 |     });\n> 2921 |     it(\"{equation} should fail if argument contains two columns.\", () => {\n       |    ^ Unknown Test\n  2922 |         expect`\\begin{equation}a &=b+c\\end{equation}`.not.toBuild(displayMode);\n  2923 |     });\n  2924 |     it(\"{split} should fail if argument contains three columns.\", () => {","start":{"column":4,"line":2921}},{"frame":"  2922 |         expect`\\begin{equation}a &=b+c\\end{equation}`.not.toBuild(displayMode);\n  2923 |     });\n> 2924 |     it(\"{split} should fail if argument contains three columns.\", () => {\n       |    ^ Unknown Test\n  2925 |         expect`\\begin{equation}\\begin{split}a &=b &+c\\\\&=e &+f\\end{split}\\end{equation}`.not.toBuild(displayMode);\n  2926 |     });\n  2927 |     it(\"{array} should fail if body contains more columns than specification.\", () => {","start":{"column":4,"line":2924}},{"frame":"  2925 |         expect`\\begin{equation}\\begin{split}a &=b &+c\\\\&=e &+f\\end{split}\\end{equation}`.not.toBuild(displayMode);\n  2926 |     });\n> 2927 |     it(\"{array} should fail if body contains more columns than specification.\", () => {\n       |    ^ Unknown Test\n  2928 |         expect`\\begin{array}{2}a & b & c\\\\d & e  f\\end{array}`.not.toBuild(displayMode);\n  2929 |     });\n  2930 | });","start":{"column":4,"line":2927}},{"frame":"  2954 |\n  2955 | describe(\"operatorname support\", function() {\n> 2956 |     it(\"should not fail\", function() {\n       |    ^ Unknown Test\n  2957 |         expect`\\operatorname{x*Π∑\\Pi\\sum\\frac a b}`.toBuild();\n  2958 |         expect`\\operatorname*{x*Π∑\\Pi\\sum\\frac a b}`.toBuild();\n  2959 |         expect`\\operatorname*{x*Π∑\\Pi\\sum\\frac a b}_y x`.toBuild();","start":{"column":4,"line":2956}},{"frame":"  2965 |\n  2966 | describe(\"href and url commands\", function() {\n> 2967 |     it(\"should parse its input\", function() {\n       |    ^ Unknown Test\n  2968 |         expect`\\href{http://example.com/}{\\sin}`.toBuild(trustSettings);\n  2969 |         expect`\\url{http://example.com/}`.toBuild(trustSettings);\n  2970 |     });","start":{"column":4,"line":2967}},{"frame":"  2970 |     });\n  2971 |\n> 2972 |     it(\"should allow empty URLs\", function() {\n       |    ^ Unknown Test\n  2973 |         expect`\\href{}{example here}`.toBuild(trustSettings);\n  2974 |         expect`\\url{}`.toBuild(trustSettings);\n  2975 |     });","start":{"column":4,"line":2972}},{"frame":"  2983 |     });\n  2984 |\n> 2985 |     it(\"should allow spaces single-character URLs\", () => {\n       |    ^ Unknown Test\n  2986 |         expect`\\href %end`.toParseLike(\"\\\\href{%}end\", trustSettings);\n  2987 |         expect`\\url %end`.toParseLike(\"\\\\url{%}end\", trustSettings);\n  2988 |     });","start":{"column":4,"line":2985}},{"frame":"  3004 |     });\n  3005 |\n> 3006 |     it(\"should not allow unbalanced brace(s) in url\", function() {\n       |    ^ Unknown Test\n  3007 |         expect`\\href{http://example.com/{a}{bar}`.not.toParse();\n  3008 |         expect`\\href{http://example.com/}a}{bar}`.not.toParse();\n  3009 |         expect`\\url{http://example.com/{a}`.not.toParse();","start":{"column":4,"line":3006}},{"frame":"  3095 |\n  3096 | describe(\"A raw text parser\", function() {\n> 3097 |     it(\"should return null for a omitted optional string\", function() {\n       |    ^ Unknown Test\n  3098 |         expect`\\includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}`.toParse();\n  3099 |     });\n  3100 | });","start":{"column":4,"line":3097}},{"frame":"  3110 |     });\n  3111 |\n> 3112 |     it(\"should still parse on unrecognized control sequences\", function() {\n       |    ^ Unknown Test\n  3113 |         expect`\\error`.toParse(noThrowSettings);\n  3114 |     });\n  3115 |","start":{"column":4,"line":3112}},{"frame":"  3115 |\n  3116 |     describe(\"should allow unrecognized controls sequences anywhere, including\", function() {\n> 3117 |         it(\"in superscripts and subscripts\", function() {\n       |        ^ Unknown Test\n  3118 |             expect`2_\\error`.toBuild(noThrowSettings);\n  3119 |             expect`3^{\\error}_\\error`.toBuild(noThrowSettings);\n  3120 |             expect`\\int\\nolimits^\\error_\\error`.toBuild(noThrowSettings);","start":{"column":8,"line":3117}},{"frame":"  3121 |         });\n  3122 |\n> 3123 |         it(\"in fractions\", function() {\n       |        ^ Unknown Test\n  3124 |             expect`\\frac{345}{\\error}`.toBuild(noThrowSettings);\n  3125 |             expect`\\frac\\error{\\error}`.toBuild(noThrowSettings);\n  3126 |         });","start":{"column":8,"line":3123}},{"frame":"  3126 |         });\n  3127 |\n> 3128 |         it(\"in square roots\", function() {\n       |        ^ Unknown Test\n  3129 |             expect`\\sqrt\\error`.toBuild(noThrowSettings);\n  3130 |             expect`\\sqrt{234\\error}`.toBuild(noThrowSettings);\n  3131 |         });","start":{"column":8,"line":3128}},{"frame":"  3131 |         });\n  3132 |\n> 3133 |         it(\"in text boxes\", function() {\n       |        ^ Unknown Test\n  3134 |             expect`\\text{\\error}`.toBuild(noThrowSettings);\n  3135 |         });\n  3136 |     });","start":{"column":8,"line":3133}},{"frame":"  3201 |\n  3202 | describe(\"The symbol table integrity\", function() {\n> 3203 |     it(\"should treat certain symbols as synonyms\", function() {\n       |    ^ Unknown Test\n  3204 |         expect`<`.toBuildLike`\\lt`;\n  3205 |         expect`>`.toBuildLike`\\gt`;\n  3206 |         expect`\\left<\\frac{1}{x}\\right>`.toBuildLike`\\left\\lt\\frac{1}{x}\\right\\gt`;","start":{"column":4,"line":3203}},{"frame":"  3219 |\n  3220 | describe(\"A macro expander\", function() {\n> 3221 |     it(\"should produce individual tokens\", function() {\n       |    ^ Unknown Test\n  3222 |         expect`e^\\foo`.toParseLike(\"e^1 23\",\n  3223 |             new Settings({macros: {\"\\\\foo\": \"123\"}}));\n  3224 |     });","start":{"column":4,"line":3221}},{"frame":"  3224 |     });\n  3225 |\n> 3226 |     it(\"should preserve leading spaces inside macro definition\", function() {\n       |    ^ Unknown Test\n  3227 |         expect`\\text{\\foo}`.toParseLike(r`\\text{ x}`,\n  3228 |             new Settings({macros: {\"\\\\foo\": \" x\"}}));\n  3229 |     });","start":{"column":4,"line":3226}},{"frame":"  3229 |     });\n  3230 |\n> 3231 |     it(\"should preserve leading spaces inside macro argument\", function() {\n       |    ^ Unknown Test\n  3232 |         expect`\\text{\\foo{ x}}`.toParseLike(r`\\text{ x}`,\n  3233 |             new Settings({macros: {\"\\\\foo\": \"#1\"}}));\n  3234 |     });","start":{"column":4,"line":3231}},{"frame":"  3234 |     });\n  3235 |\n> 3236 |     it(\"should ignore expanded spaces in math mode\", function() {\n       |    ^ Unknown Test\n  3237 |         expect`\\foo`.toParseLike(\"x\", new Settings({macros: {\"\\\\foo\": \" x\"}}));\n  3238 |     });\n  3239 |","start":{"column":4,"line":3236}},{"frame":"  3238 |     });\n  3239 |\n> 3240 |     it(\"should consume spaces after control-word macro\", function() {\n       |    ^ Unknown Test\n  3241 |         expect`\\text{\\foo }`.toParseLike(r`\\text{x}`,\n  3242 |             new Settings({macros: {\"\\\\foo\": \"x\"}}));\n  3243 |     });","start":{"column":4,"line":3240}},{"frame":"  3243 |     });\n  3244 |\n> 3245 |     it(\"should consume spaces after macro with \\\\relax\", function() {\n       |    ^ Unknown Test\n  3246 |         expect`\\text{\\foo }`.toParseLike(r`\\text{}`,\n  3247 |             new Settings({macros: {\"\\\\foo\": \"\\\\relax\"}}));\n  3248 |     });","start":{"column":4,"line":3245}},{"frame":"  3248 |     });\n  3249 |\n> 3250 |     it(\"should not consume spaces after control-word expansion\", function() {\n       |    ^ Unknown Test\n  3251 |         expect`\\text{\\\\ }`.toParseLike(r`\\text{ }`,\n  3252 |             new Settings({macros: {\"\\\\\\\\\": \"\\\\relax\"}}));\n  3253 |     });","start":{"column":4,"line":3250}},{"frame":"  3253 |     });\n  3254 |\n> 3255 |     it(\"should consume spaces after \\\\relax\", function() {\n       |    ^ Unknown Test\n  3256 |         expect`\\text{\\relax }`.toParseLike`\\text{}`;\n  3257 |     });\n  3258 |","start":{"column":4,"line":3255}},{"frame":"  3257 |     });\n  3258 |\n> 3259 |     it(\"should consume spaces after control-word function\", function() {\n       |    ^ Unknown Test\n  3260 |         expect`\\text{\\KaTeX }`.toParseLike`\\text{\\KaTeX}`;\n  3261 |     });\n  3262 |","start":{"column":4,"line":3259}},{"frame":"  3261 |     });\n  3262 |\n> 3263 |     it(\"should preserve spaces after control-symbol macro\", function() {\n       |    ^ Unknown Test\n  3264 |         expect`\\text{\\% y}`.toParseLike(r`\\text{x y}`,\n  3265 |             new Settings({macros: {\"\\\\%\": \"x\"}}));\n  3266 |     });","start":{"column":4,"line":3263}},{"frame":"  3266 |     });\n  3267 |\n> 3268 |     it(\"should preserve spaces after control-symbol function\", function() {\n       |    ^ Unknown Test\n  3269 |         expect`\\text{\\' }`.toParse();\n  3270 |     });\n  3271 |","start":{"column":4,"line":3268}},{"frame":"  3270 |     });\n  3271 |\n> 3272 |     it(\"should consume spaces between arguments\", function() {\n       |    ^ Unknown Test\n  3273 |         expect`\\text{\\foo 1 2}`.toParseLike(r`\\text{12end}`,\n  3274 |             new Settings({macros: {\"\\\\foo\": \"#1#2end\"}}));\n  3275 |         expect`\\text{\\foo {1} {2}}`.toParseLike(r`\\text{12end}`,","start":{"column":4,"line":3272}},{"frame":"  3277 |     });\n  3278 |\n> 3279 |     it(\"should allow for multiple expansion\", function() {\n       |    ^ Unknown Test\n  3280 |         expect`1\\foo2`.toParseLike(\"1aa2\", new Settings({macros: {\n  3281 |             \"\\\\foo\": \"\\\\bar\\\\bar\",\n  3282 |             \"\\\\bar\": \"a\",","start":{"column":4,"line":3279}},{"frame":"  3284 |     });\n  3285 |\n> 3286 |     it(\"should allow for multiple expansion with argument\", function() {\n       |    ^ Unknown Test\n  3287 |         expect`1\\foo2`.toParseLike(\"12222\", new Settings({macros: {\n  3288 |             \"\\\\foo\": \"\\\\bar{#1}\\\\bar{#1}\",\n  3289 |             \"\\\\bar\": \"#1#1\",","start":{"column":4,"line":3286}},{"frame":"  3291 |     });\n  3292 |\n> 3293 |     it(\"should allow for macro argument\", function() {\n       |    ^ Unknown Test\n  3294 |         expect`\\foo\\bar`.toParseLike(\"(xyz)\", new Settings({macros: {\n  3295 |             \"\\\\foo\": \"(#1)\",\n  3296 |             \"\\\\bar\": \"xyz\",","start":{"column":4,"line":3293}},{"frame":"  3298 |     });\n  3299 |\n> 3300 |     it(\"should allow properly nested group for macro argument\", function() {\n       |    ^ Unknown Test\n  3301 |         expect`\\foo{e^{x_{12}+3}}`.toParseLike(\"(e^{x_{12}+3})\",\n  3302 |             new Settings({macros: {\"\\\\foo\": \"(#1)\"}}));\n  3303 |     });","start":{"column":4,"line":3300}},{"frame":"  3303 |     });\n  3304 |\n> 3305 |     it(\"should delay expansion if preceded by \\\\expandafter\", function() {\n       |    ^ Unknown Test\n  3306 |         expect`\\expandafter\\foo\\bar`.toParseLike(\"x+y\", new Settings({macros: {\n  3307 |             \"\\\\foo\": \"#1+#2\",\n  3308 |             \"\\\\bar\": \"xy\",","start":{"column":4,"line":3305}},{"frame":"  3313 |     });\n  3314 |\n> 3315 |     it(\"should not expand if preceded by \\\\noexpand\", function() {\n       |    ^ Unknown Test\n  3316 |         // \\foo is not expanded and interpreted as if its meaning were \\relax\n  3317 |         expect`\\noexpand\\foo y`.toParseLike(\"y\",\n  3318 |             new Settings({macros: {\"\\\\foo\": \"x\"}}));","start":{"column":4,"line":3315}},{"frame":"  3326 |     });\n  3327 |\n> 3328 |     it(\"should allow for space macro argument (text version)\", function() {\n       |    ^ Unknown Test\n  3329 |         expect`\\text{\\foo\\bar}`.toParseLike(r`\\text{( )}`, new Settings({macros: {\n  3330 |             \"\\\\foo\": \"(#1)\",\n  3331 |             \"\\\\bar\": \" \",","start":{"column":4,"line":3328}},{"frame":"  3333 |     });\n  3334 |\n> 3335 |     it(\"should allow for space macro argument (math version)\", function() {\n       |    ^ Unknown Test\n  3336 |         expect`\\foo\\bar`.toParseLike(\"()\", new Settings({macros: {\n  3337 |             \"\\\\foo\": \"(#1)\",\n  3338 |             \"\\\\bar\": \" \",","start":{"column":4,"line":3335}},{"frame":"  3340 |     });\n  3341 |\n> 3342 |     it(\"should allow for space second argument (text version)\", function() {\n       |    ^ Unknown Test\n  3343 |         expect`\\text{\\foo\\bar\\bar}`.toParseLike(r`\\text{( , )}`, new Settings({macros: {\n  3344 |             \"\\\\foo\": \"(#1,#2)\",\n  3345 |             \"\\\\bar\": \" \",","start":{"column":4,"line":3342}},{"frame":"  3347 |     });\n  3348 |\n> 3349 |     it(\"should treat \\\\relax as empty argument\", function() {\n       |    ^ Unknown Test\n  3350 |         expect`\\text{\\foo\\relax x}`.toParseLike(r`\\text{(,x)}`, new Settings({macros: {\n  3351 |             \"\\\\foo\": \"(#1,#2)\",\n  3352 |         }}));","start":{"column":4,"line":3349}},{"frame":"  3353 |     });\n  3354 |\n> 3355 |     it(\"should allow for space second argument (math version)\", function() {\n       |    ^ Unknown Test\n  3356 |         expect`\\foo\\bar\\bar`.toParseLike(\"(,)\", new Settings({macros: {\n  3357 |             \"\\\\foo\": \"(#1,#2)\",\n  3358 |             \"\\\\bar\": \" \",","start":{"column":4,"line":3355}},{"frame":"  3360 |     });\n  3361 |\n> 3362 |     it(\"should allow for empty macro argument\", function() {\n       |    ^ Unknown Test\n  3363 |         expect`\\foo\\bar`.toParseLike(\"()\", new Settings({macros: {\n  3364 |             \"\\\\foo\": \"(#1)\",\n  3365 |             \"\\\\bar\": \"\",","start":{"column":4,"line":3362}},{"frame":"  3367 |     });\n  3368 |\n> 3369 |     it(\"should allow for space function arguments\", function() {\n       |    ^ Unknown Test\n  3370 |         expect`\\frac\\bar\\bar`.toParseLike(r`\\frac{}{}`, new Settings({macros: {\n  3371 |             \"\\\\bar\": \" \",\n  3372 |         }}));","start":{"column":4,"line":3369}},{"frame":"  3373 |     });\n  3374 |\n> 3375 |     it(\"should build \\\\overset and \\\\underset\", function() {\n       |    ^ Unknown Test\n  3376 |         expect`\\overset{f}{\\rightarrow} Y`.toBuild();\n  3377 |         expect`\\underset{f}{\\rightarrow} Y`.toBuild();\n  3378 |     });","start":{"column":4,"line":3375}},{"frame":"  3378 |     });\n  3379 |\n> 3380 |     it(\"should build \\\\iff, \\\\implies, \\\\impliedby\", function() {\n       |    ^ Unknown Test\n  3381 |         expect`X \\iff Y`.toBuild();\n  3382 |         expect`X \\implies Y`.toBuild();\n  3383 |         expect`X \\impliedby Y`.toBuild();","start":{"column":4,"line":3380}},{"frame":"  3384 |     });\n  3385 |\n> 3386 |     it(\"should allow aliasing characters\", function() {\n       |    ^ Unknown Test\n  3387 |         expect`x’=c`.toParseLike(\"x'=c\", new Settings({macros: {\n  3388 |             \"’\": \"'\",\n  3389 |         }}));","start":{"column":4,"line":3386}},{"frame":"  3390 |     });\n  3391 |\n> 3392 |     it(\"\\\\@firstoftwo should consume both, and avoid errors\", function() {\n       |    ^ Unknown Test\n  3393 |         expect`\\@firstoftwo{yes}{no}`.toParseLike`yes`;\n  3394 |         expect`\\@firstoftwo{yes}{1'_2^3}`.toParseLike`yes`;\n  3395 |     });","start":{"column":4,"line":3392}},{"frame":"  3395 |     });\n  3396 |\n> 3397 |     it(\"\\\\@ifstar should consume star but nothing else\", function() {\n       |    ^ Unknown Test\n  3398 |         expect`\\@ifstar{yes}{no}*!`.toParseLike`yes!`;\n  3399 |         expect`\\@ifstar{yes}{no}?!`.toParseLike`no?!`;\n  3400 |     });","start":{"column":4,"line":3397}},{"frame":"  3400 |     });\n  3401 |\n> 3402 |     it(\"\\\\@ifnextchar should not consume nonspaces\", function() {\n       |    ^ Unknown Test\n  3403 |         expect`\\@ifnextchar!{yes}{no}!!`.toParseLike`yes!!`;\n  3404 |         expect`\\@ifnextchar!{yes}{no}?!`.toParseLike`no?!`;\n  3405 |     });","start":{"column":4,"line":3402}},{"frame":"  3405 |     });\n  3406 |\n> 3407 |     it(\"\\\\@ifnextchar should consume spaces\", function() {\n       |    ^ Unknown Test\n  3408 |         expect`\\def\\x#1{\\@ifnextchar x{yes}{no}}\\x{}x\\x{} x`\n  3409 |             .toParseLike`yesxyesx`;\n  3410 |     });","start":{"column":4,"line":3407}},{"frame":"  3410 |     });\n  3411 |\n> 3412 |     it(\"\\\\@ifstar should consume star but nothing else\", function() {\n       |    ^ Unknown Test\n  3413 |         expect`\\@ifstar{yes}{no}*!`.toParseLike`yes!`;\n  3414 |         expect`\\@ifstar{yes}{no}?!`.toParseLike`no?!`;\n  3415 |     });","start":{"column":4,"line":3412}},{"frame":"  3415 |     });\n  3416 |\n> 3417 |     it(\"\\\\TextOrMath should work immediately\", function() {\n       |    ^ Unknown Test\n  3418 |         expect`\\TextOrMath{text}{math}`.toParseLike`math`;\n  3419 |     });\n  3420 |","start":{"column":4,"line":3417}},{"frame":"  3419 |     });\n  3420 |\n> 3421 |     it(\"\\\\TextOrMath should work after other math\", function() {\n       |    ^ Unknown Test\n  3422 |         expect`x+\\TextOrMath{text}{math}`.toParseLike`x+math`;\n  3423 |     });\n  3424 |","start":{"column":4,"line":3421}},{"frame":"  3423 |     });\n  3424 |\n> 3425 |     it(\"\\\\TextOrMath should work immediately after \\\\text\", function() {\n       |    ^ Unknown Test\n  3426 |         expect`\\text{\\TextOrMath{text}{math}}`.toParseLike`\\text{text}`;\n  3427 |     });\n  3428 |","start":{"column":4,"line":3425}},{"frame":"  3427 |     });\n  3428 |\n> 3429 |     it(\"\\\\TextOrMath should work later after \\\\text\", function() {\n       |    ^ Unknown Test\n  3430 |         expect`\\text{hello \\TextOrMath{text}{math}}`.toParseLike`\\text{hello text}`;\n  3431 |     });\n  3432 |","start":{"column":4,"line":3429}},{"frame":"  3431 |     });\n  3432 |\n> 3433 |     it(\"\\\\TextOrMath should work immediately after \\\\text ends\", function() {\n       |    ^ Unknown Test\n  3434 |         expect`\\text{\\TextOrMath{text}{math}}\\TextOrMath{text}{math}`\n  3435 |             .toParseLike`\\text{text}math`;\n  3436 |     });","start":{"column":4,"line":3433}},{"frame":"  3436 |     });\n  3437 |\n> 3438 |     it(\"\\\\TextOrMath should work immediately after $\", function() {\n       |    ^ Unknown Test\n  3439 |         expect`\\text{$\\TextOrMath{text}{math}$}`.toParseLike`\\text{$math$}`;\n  3440 |     });\n  3441 |","start":{"column":4,"line":3438}},{"frame":"  3440 |     });\n  3441 |\n> 3442 |     it(\"\\\\TextOrMath should work later after $\", function() {\n       |    ^ Unknown Test\n  3443 |         expect`\\text{$x+\\TextOrMath{text}{math}$}`.toParseLike`\\text{$x+math$}`;\n  3444 |     });\n  3445 |","start":{"column":4,"line":3442}},{"frame":"  3444 |     });\n  3445 |\n> 3446 |     it(\"\\\\TextOrMath should work immediately after $ ends\", function() {\n       |    ^ Unknown Test\n  3447 |         expect`\\text{$\\TextOrMath{text}{math}$\\TextOrMath{text}{math}}`\n  3448 |             .toParseLike`\\text{$math$text}`;\n  3449 |     });","start":{"column":4,"line":3446}},{"frame":"  3449 |     });\n  3450 |\n> 3451 |     it(\"\\\\TextOrMath should work in a macro\", function() {\n       |    ^ Unknown Test\n  3452 |         expect`\\mode\\text{\\mode$\\mode$\\mode}\\mode`\n  3453 |             .toParseLike(r`math\\text{text$math$text}math`, new Settings({macros: {\n  3454 |                 \"\\\\mode\": \"\\\\TextOrMath{text}{math}\",","start":{"column":4,"line":3451}},{"frame":"  3456 |     });\n  3457 |\n> 3458 |     it(\"\\\\TextOrMath should work in a macro passed to \\\\text\", function() {\n       |    ^ Unknown Test\n  3459 |         expect`\\text\\mode`.toParseLike(r`\\text t`, new Settings({macros:\n  3460 |             {\"\\\\mode\": \"\\\\TextOrMath{t}{m}\"}}));\n  3461 |     });","start":{"column":4,"line":3458}},{"frame":"  3488 |     });\n  3489 |\n> 3490 |     it(\"should build Unicode private area characters\", function() {\n       |    ^ Unknown Test\n  3491 |         expect`\\gvertneqq\\lvertneqq\\ngeqq\\ngeqslant\\nleqq`.toBuild();\n  3492 |         expect`\\nleqslant\\nshortmid\\nshortparallel\\varsubsetneq`.toBuild();\n  3493 |         expect`\\varsubsetneqq\\varsupsetneq\\varsupsetneqq`.toBuild();","start":{"column":4,"line":3490}},{"frame":"  3494 |     });\n  3495 |\n> 3496 |     it(\"\\\\TextOrMath should work in a macro passed to \\\\text\", function() {\n       |    ^ Unknown Test\n  3497 |         expect`\\text\\mode`.toParseLike(r`\\text{text}`, new Settings({macros:\n  3498 |             {\"\\\\mode\": \"\\\\TextOrMath{text}{math}\"}}));\n  3499 |     });","start":{"column":4,"line":3496}},{"frame":"  3499 |     });\n  3500 |\n> 3501 |     it(\"\\\\gdef defines macros\", function() {\n       |    ^ Unknown Test\n  3502 |         expect`\\gdef\\foo{x^2}\\foo+\\foo`.toParseLike`x^2+x^2`;\n  3503 |         expect`\\gdef\\foo{hi}\\foo+\\text\\foo`.toParseLike`hi+\\text{hi}`;\n  3504 |         expect`\\gdef\\foo#1{hi #1}\\text{\\foo{Alice}, \\foo{Bob}}`","start":{"column":4,"line":3501}},{"frame":"  3517 |     });\n  3518 |\n> 3519 |     it(\"\\\\gdef defines macros with delimited parameter\", function() {\n       |    ^ Unknown Test\n  3520 |         expect`\\gdef\\foo|#1||{#1}\\text{\\foo| x y ||}`.toParseLike`\\text{ x y }`;\n  3521 |         expect`\\gdef\\foo#1|#2{#1+#2}\\foo 1 2 |34`.toParseLike`12+34`;\n  3522 |         expect`\\gdef\\foo#1#{#1}\\foo1^{23}`.toParseLike`1^{23}`;","start":{"column":4,"line":3519}},{"frame":"  3526 |     });\n  3527 |\n> 3528 |     it(\"\\\\xdef should expand definition\", function() {\n       |    ^ Unknown Test\n  3529 |         expect`\\def\\foo{a}\\xdef\\bar{\\foo}\\def\\foo{}\\bar`.toParseLike`a`;\n  3530 |         // \\def\\noexpand\\foo{} expands into \\def\\foo{}\n  3531 |         expect`\\def\\foo{a}\\xdef\\bar{\\def\\noexpand\\foo{}}\\foo\\bar\\foo`.toParseLike`a`;","start":{"column":4,"line":3528}},{"frame":"  3536 |     });\n  3537 |\n> 3538 |     it(\"\\\\def should be handled in Parser\", () => {\n       |    ^ Unknown Test\n  3539 |         expect`\\gdef\\foo{1}`.toParse(new Settings({maxExpand: 0}));\n  3540 |         expect`2^\\def\\foo{1}2`.not.toParse();\n  3541 |     });","start":{"column":4,"line":3538}},{"frame":"  3541 |     });\n  3542 |\n> 3543 |     it(\"\\\\def works locally\", () => {\n       |    ^ Unknown Test\n  3544 |         expect`\\def\\x{1}\\x{\\def\\x{2}\\x{\\def\\x{3}\\x}\\x}\\x`\n  3545 |             .toParseLike`1{2{3}2}1`;\n  3546 |         expect`\\def\\x{1}\\x\\def\\x{2}\\x{\\def\\x{3}\\x\\def\\x{4}\\x}\\x`","start":{"column":4,"line":3543}},{"frame":"  3548 |     });\n  3549 |\n> 3550 |     it(\"\\\\gdef overrides at all levels\", () => {\n       |    ^ Unknown Test\n  3551 |         expect`\\def\\x{1}\\x{\\def\\x{2}\\x{\\gdef\\x{3}\\x}\\x}\\x`\n  3552 |             .toParseLike`1{2{3}3}3`;\n  3553 |         expect`\\def\\x{1}\\x{\\def\\x{2}\\x{\\global\\def\\x{3}\\x}\\x}\\x`","start":{"column":4,"line":3550}},{"frame":"  3557 |     });\n  3558 |\n> 3559 |     it(\"\\\\global needs to followed by macro prefixes, \\\\def or \\\\edef\", () => {\n       |    ^ Unknown Test\n  3560 |         expect`\\global\\def\\foo{}\\foo`.toParseLike``;\n  3561 |         expect`\\global\\edef\\foo{}\\foo`.toParseLike``;\n  3562 |         expect`\\def\\DEF{\\def}\\global\\DEF\\foo{}\\foo`.toParseLike``;","start":{"column":4,"line":3559}},{"frame":"  3567 |     });\n  3568 |\n> 3569 |     it(\"\\\\long needs to followed by macro prefixes, \\\\def or \\\\edef\", () => {\n       |    ^ Unknown Test\n  3570 |         expect`\\long\\def\\foo{}\\foo`.toParseLike``;\n  3571 |         expect`\\long\\edef\\foo{}\\foo`.toParseLike``;\n  3572 |         expect`\\long\\global\\def\\foo{}\\foo`.toParseLike``;","start":{"column":4,"line":3569}},{"frame":"  3574 |     });\n  3575 |\n> 3576 |     it(\"Macro arguments do not generate groups\", () => {\n       |    ^ Unknown Test\n  3577 |         expect`\\def\\x{1}\\x\\def\\foo#1{#1}\\foo{\\x\\def\\x{2}\\x}\\x`\n  3578 |             .toParseLike`1122`;\n  3579 |     });","start":{"column":4,"line":3576}},{"frame":"  3579 |     });\n  3580 |\n> 3581 |     it(\"\\\\textbf arguments do generate groups\", () => {\n       |    ^ Unknown Test\n  3582 |         expect`\\def\\x{1}\\x\\textbf{\\x\\def\\x{2}\\x}\\x`.toParseLike`1\\textbf{12}1`;\n  3583 |     });\n  3584 |","start":{"column":4,"line":3581}},{"frame":"  3583 |     });\n  3584 |\n> 3585 |     it(\"\\\\sqrt optional arguments generate groups\", () => {\n       |    ^ Unknown Test\n  3586 |         expect`\\def\\x{1}\\def\\y{1}\\x\\y\\sqrt[\\def\\x{2}\\x]{\\def\\y{2}\\y}\\x\\y`\n  3587 |             .toParseLike`11\\sqrt[2]{2}11`;\n  3588 |     });","start":{"column":4,"line":3585}},{"frame":"  3588 |     });\n  3589 |\n> 3590 |     it(\"array cells generate groups\", () => {\n       |    ^ Unknown Test\n  3591 |         expect`\\def\\x{1}\\begin{matrix}\\x&\\def\\x{2}\\x&\\x\\end{matrix}\\x`\n  3592 |             .toParseLike`\\begin{matrix}1&2&1\\end{matrix}1`;\n  3593 |         expect`\\def\\x{1}\\begin{matrix}\\def\\x{2}\\x&\\x\\end{matrix}\\x`","start":{"column":4,"line":3590}},{"frame":"  3619 |     });\n  3620 |\n> 3621 |     it(\"\\\\let copies the definition\", () => {\n       |    ^ Unknown Test\n  3622 |         expect`\\let\\foo=\\frac\\def\\frac{}\\foo12`.toParseLike`\\frac12`;\n  3623 |         expect`\\def\\foo{1}\\let\\bar\\foo\\def\\foo{2}\\bar`.toParseLike`1`;\n  3624 |         expect`\\let\\foo=\\kern\\edef\\bar{\\foo1em}\\let\\kern=\\relax\\bar`.toParseLike`\\kern1em`;","start":{"column":4,"line":3621}},{"frame":"  3639 |     });\n  3640 |\n> 3641 |     it(\"\\\\futurelet should parse correctly\", () => {\n       |    ^ Unknown Test\n  3642 |         expect`\\futurelet\\foo\\frac1{2+\\foo}`.toParseLike`\\frac1{2+1}`;\n  3643 |     });\n  3644 |","start":{"column":4,"line":3641}},{"frame":"  3643 |     });\n  3644 |\n> 3645 |     it(\"macros argument can simulate \\\\let\", () => {\n       |    ^ Unknown Test\n  3646 |         expect`\\int`.toParseLike(\"\\\\int\\\\limits\", {macros: {\n  3647 |             \"\\\\Oldint\": {\n  3648 |                 tokens: [{text: \"\\\\int\", noexpand: true}],","start":{"column":4,"line":3645}},{"frame":"  3670 |     });\n  3671 |\n> 3672 |     it(\"\\\\newcommand defines new macros\", () => {\n       |    ^ Unknown Test\n  3673 |         expect`\\newcommand\\foo{x^2}\\foo+\\foo`.toParseLike`x^2+x^2`;\n  3674 |         expect`\\newcommand{\\foo}{x^2}\\foo+\\foo`.toParseLike`x^2+x^2`;\n  3675 |         // Function detection","start":{"column":4,"line":3672}},{"frame":"  3685 |     });\n  3686 |\n> 3687 |     it(\"\\\\renewcommand redefines macros\", () => {\n       |    ^ Unknown Test\n  3688 |         expect`\\renewcommand\\foo{x^2}\\foo+\\foo`.not.toParse();\n  3689 |         expect`\\renewcommand{\\foo}{x^2}\\foo+\\foo`.not.toParse();\n  3690 |         expect`\\renewcommand\\bar{x^2}\\bar+\\bar`.toParseLike`x^2+x^2`;","start":{"column":4,"line":3687}},{"frame":"  3693 |     });\n  3694 |\n> 3695 |     it(\"\\\\providecommand defines but does not redefine macros\", () => {\n       |    ^ Unknown Test\n  3696 |         expect`\\providecommand\\foo{x^2}\\foo+\\foo`.toParseLike`x^2+x^2`;\n  3697 |         expect`\\providecommand{\\foo}{x^2}\\foo+\\foo`.toParseLike`x^2+x^2`;\n  3698 |         expect`\\newcommand{\\foo}{1}\\foo\\providecommand{\\foo}{2}\\foo`","start":{"column":4,"line":3695}},{"frame":"  3704 |     });\n  3705 |\n> 3706 |     it(\"\\\\newcommand is local\", () => {\n       |    ^ Unknown Test\n  3707 |         expect`\\newcommand\\foo{1}\\foo{\\renewcommand\\foo{2}\\foo}\\foo`\n  3708 |             .toParseLike`1{2}1`;\n  3709 |     });","start":{"column":4,"line":3706}},{"frame":"  3709 |     });\n  3710 |\n> 3711 |     it(\"\\\\newcommand accepts number of arguments\", () => {\n       |    ^ Unknown Test\n  3712 |         expect`\\newcommand\\foo[1]{#1^2}\\foo x+\\foo{y}`.toParseLike`x^2+y^2`;\n  3713 |         expect`\\newcommand\\foo[10]{#1^2}\\foo 0123456789`.toParseLike`0^2`;\n  3714 |         expect`\\newcommand\\foo[x]{}`.not.toParse();","start":{"column":4,"line":3711}},{"frame":"  3718 |     // This may change in the future, if we support the extra features of\n  3719 |     // \\hspace.\n> 3720 |     it(\"should treat \\\\hspace, \\\\hskip like \\\\kern\", function() {\n       |    ^ Unknown Test\n  3721 |         expect`\\hspace{1em}`.toParseLike`\\kern1em`;\n  3722 |         expect`\\hskip{1em}`.toParseLike`\\kern1em`;\n  3723 |     });","start":{"column":4,"line":3720}},{"frame":"  3723 |     });\n  3724 |\n> 3725 |     it(\"should expand \\\\limsup as expected\", () => {\n       |    ^ Unknown Test\n  3726 |         expect`\\limsup`.toParseLike`\\operatorname*{lim\\,sup}`;\n  3727 |     });\n  3728 |","start":{"column":4,"line":3725}},{"frame":"  3727 |     });\n  3728 |\n> 3729 |     it(\"should expand \\\\liminf as expected\", () => {\n       |    ^ Unknown Test\n  3730 |         expect`\\liminf`.toParseLike`\\operatorname*{lim\\,inf}`;\n  3731 |     });\n  3732 |","start":{"column":4,"line":3729}},{"frame":"  3731 |     });\n  3732 |\n> 3733 |     it(\"should expand AMS log-like symbols as expected\", () => {\n       |    ^ Unknown Test\n  3734 |         expect`\\injlim`.toParseLike`\\operatorname*{inj\\,lim}`;\n  3735 |         expect`\\projlim`.toParseLike`\\operatorname*{proj\\,lim}`;\n  3736 |         expect`\\varlimsup`.toParseLike`\\operatorname*{\\overline{lim}}`;","start":{"column":4,"line":3733}},{"frame":"  3741 |     });\n  3742 |\n> 3743 |     it(\"should expand \\\\plim as expected\", () => {\n       |    ^ Unknown Test\n  3744 |         expect`\\plim`.toParseLike`\\mathop{\\operatorname{plim}}\\limits`;\n  3745 |     });\n  3746 |","start":{"column":4,"line":3743}},{"frame":"  3745 |     });\n  3746 |\n> 3747 |     it(\"should expand \\\\argmin as expected\", () => {\n       |    ^ Unknown Test\n  3748 |         expect`\\argmin`.toParseLike`\\operatorname*{arg\\,min}`;\n  3749 |     });\n  3750 |","start":{"column":4,"line":3747}},{"frame":"  3749 |     });\n  3750 |\n> 3751 |     it(\"should expand \\\\argmax as expected\", () => {\n       |    ^ Unknown Test\n  3752 |         expect`\\argmax`.toParseLike`\\operatorname*{arg\\,max}`;\n  3753 |     });\n  3754 |","start":{"column":4,"line":3751}},{"frame":"  3753 |     });\n  3754 |\n> 3755 |     it(\"should expand \\\\bra as expected\", () => {\n       |    ^ Unknown Test\n  3756 |         expect`\\bra{\\phi}`.toParseLike`\\mathinner{\\langle{\\phi}|}`;\n  3757 |     });\n  3758 |","start":{"column":4,"line":3755}},{"frame":"  3757 |     });\n  3758 |\n> 3759 |     it(\"should expand \\\\ket as expected\", () => {\n       |    ^ Unknown Test\n  3760 |         expect`\\ket{\\psi}`.toParseLike`\\mathinner{|{\\psi}\\rangle}`;\n  3761 |     });\n  3762 |","start":{"column":4,"line":3759}},{"frame":"  3761 |     });\n  3762 |\n> 3763 |     it(\"should expand \\\\braket as expected\", () => {\n       |    ^ Unknown Test\n  3764 |         expect`\\braket{\\phi|\\psi}`.toParseLike`\\mathinner{\\langle{\\phi|\\psi}\\rangle}`;\n  3765 |     });\n  3766 |","start":{"column":4,"line":3763}},{"frame":"  3765 |     });\n  3766 |\n> 3767 |     it(\"should expand \\\\Bra as expected\", () => {\n       |    ^ Unknown Test\n  3768 |         expect`\\Bra{\\phi}`.toParseLike`\\left\\langle\\phi\\right|`;\n  3769 |     });\n  3770 |","start":{"column":4,"line":3767}},{"frame":"  3769 |     });\n  3770 |\n> 3771 |     it(\"should expand \\\\Ket as expected\", () => {\n       |    ^ Unknown Test\n  3772 |         expect`\\Ket{\\psi}`.toParseLike`\\left|\\psi\\right\\rangle`;\n  3773 |     });\n  3774 |","start":{"column":4,"line":3771}},{"frame":"  3773 |     });\n  3774 |\n> 3775 |     it(\"should expand \\\\Braket as expected\", () => {\n       |    ^ Unknown Test\n  3776 |         expect`\\Braket{ ϕ | \\frac{∂^2}{∂ t^2} | ψ }`.toParseLike`\\left\\langle ϕ\\,\\middle\\vert\\,\\frac{∂^2}{∂ t^2}\\,\\middle\\vert\\, ψ\\right\\rangle`;\n  3777 |     });\n  3778 |","start":{"column":4,"line":3775}},{"frame":"  3777 |     });\n  3778 |\n> 3779 |     it(\"should expand \\\\set as expected\", () => {\n       |    ^ Unknown Test\n  3780 |         expect`\\set{x|x<5|S|}`.toParseLike`\\{\\,x\\mid x<5|S|\\,\\}`;\n  3781 |         // \\set doesn't support special || or \\| handling\n  3782 |         expect`\\set{x||x<5|S|}`.toParseLike`\\{\\,x\\mid |x<5|S|\\,\\}`;","start":{"column":4,"line":3779}},{"frame":"  3784 |     });\n  3785 |\n> 3786 |     it(\"should expand \\\\Set as expected\", () => {\n       |    ^ Unknown Test\n  3787 |         expect`\\Set{ x | x<\\frac 1 2 |S| }`\n  3788 |         .toParseLike`\\left\\{\\: x\\;\\middle\\vert\\; x<\\frac 1 2 |S| \\:\\right\\}`;\n  3789 |         expect`\\Set{ x || x<\\frac 1 2 |S| }`","start":{"column":4,"line":3786}},{"frame":"  3797 |     const displayMode = new Settings({displayMode: true});\n  3798 |\n> 3799 |     it(\"should fail outside display mode\", () => {\n       |    ^ Unknown Test\n  3800 |         expect`\\tag{hi}x+y`.not.toParse();\n  3801 |     });\n  3802 |","start":{"column":4,"line":3799}},{"frame":"  3801 |     });\n  3802 |\n> 3803 |     it(\"should fail with multiple tags\", () => {\n       |    ^ Unknown Test\n  3804 |         expect`\\tag{1}\\tag{2}x+y`.not.toParse(displayMode);\n  3805 |     });\n  3806 |","start":{"column":4,"line":3803}},{"frame":"  3805 |     });\n  3806 |\n> 3807 |     it(\"should fail with multiple tags in one row\", () => {\n       |    ^ Unknown Test\n  3808 |         expect`\\begin{align}\\tag{1}x+y\\tag{2}\\end{align}`.not.toParse(displayMode);\n  3809 |     });\n  3810 |","start":{"column":4,"line":3807}},{"frame":"  3809 |     });\n  3810 |\n> 3811 |     it(\"should work with one tag per row\", () => {\n       |    ^ Unknown Test\n  3812 |         expect`\\begin{align}\\tag{1}x\\\\&+y\\tag{2}\\end{align}`.toParse(displayMode);\n  3813 |     });\n  3814 |","start":{"column":4,"line":3811}},{"frame":"  3813 |     });\n  3814 |\n> 3815 |     it(\"should work with \\\\nonumber/\\\\notag\", () => {\n       |    ^ Unknown Test\n  3816 |         expect`\\begin{align}\\tag{1}\\nonumber x\\\\&+y\\notag\\end{align}`\n  3817 |         .toParseLike(r`\\begin{align}\\tag{1}x\\\\&+y\\nonumber\\end{align}`, displayMode);\n  3818 |     });","start":{"column":4,"line":3815}},{"frame":"  3818 |     });\n  3819 |\n> 3820 |     it(\"should build\", () => {\n       |    ^ Unknown Test\n  3821 |         expect`\\tag{hi}x+y`.toBuild(displayMode);\n  3822 |     });\n  3823 |","start":{"column":4,"line":3820}},{"frame":"  3822 |     });\n  3823 |\n> 3824 |     it(\"should ignore location of \\\\tag\", () => {\n       |    ^ Unknown Test\n  3825 |         expect`\\tag{hi}x+y`.toParseLike(r`x+y\\tag{hi}`, displayMode);\n  3826 |     });\n  3827 |","start":{"column":4,"line":3824}},{"frame":"  3826 |     });\n  3827 |\n> 3828 |     it(\"should handle \\\\tag* like \\\\tag\", () => {\n       |    ^ Unknown Test\n  3829 |         expect`\\tag{hi}x+y`.toParseLike(r`\\tag*{({hi})}x+y`, displayMode);\n  3830 |     });\n  3831 | });","start":{"column":4,"line":3828}},{"frame":"  3855 |\n  3856 | describe(\"\\\\@binrel automatic bin/rel/ord\", () => {\n> 3857 |     it(\"should generate proper class\", () => {\n       |    ^ Unknown Test\n  3858 |         expect`L\\@binrel+xR`.toParseLike`L\\mathbin xR`;\n  3859 |         expect`L\\@binrel=xR`.toParseLike`L\\mathrel xR`;\n  3860 |         expect`L\\@binrel xxR`.toParseLike`L\\mathord xR`;","start":{"column":4,"line":3857}},{"frame":"  3864 |     });\n  3865 |\n> 3866 |     it(\"should base on just first character in group\", () => {\n       |    ^ Unknown Test\n  3867 |         expect`L\\@binrel{+x}xR`.toParseLike`L\\mathbin xR`;\n  3868 |         expect`L\\@binrel{=x}xR`.toParseLike`L\\mathrel xR`;\n  3869 |         expect`L\\@binrel{xx}xR`.toParseLike`L\\mathord xR`;","start":{"column":4,"line":3866}},{"frame":"  3884 |\n  3885 | describe(\"Unicode accents\", function() {\n> 3886 |     it(\"should parse Latin-1 letters in math mode\", function() {\n       |    ^ Unknown Test\n  3887 |         // TODO(edemaine): Unsupported Latin-1 letters in math: ÇÐÞçðþ\n  3888 |         expect`ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ`\n  3889 |         .toParseLike(","start":{"column":4,"line":3886}},{"frame":"  3904 |     });\n  3905 |\n> 3906 |     it(\"should parse Latin-1 letters in text mode\", function() {\n       |    ^ Unknown Test\n  3907 |         // TODO(edemaine): Unsupported Latin-1 letters in text: ÇÐÞçðþ\n  3908 |         expect`\\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}`\n  3909 |         .toParseLike(","start":{"column":4,"line":3906}},{"frame":"  3924 |     });\n  3925 |\n> 3926 |     it(\"should support \\\\aa in text mode\", function() {\n       |    ^ Unknown Test\n  3927 |         expect`\\text{\\aa\\AA}`.toParseLike(r`\\text{\\r a\\r A}`, strictSettings);\n  3928 |         expect`\\aa`.not.toParse(strictSettings);\n  3929 |         expect`\\Aa`.not.toParse(strictSettings);","start":{"column":4,"line":3926}},{"frame":"  3935 |     });\n  3936 |\n> 3937 |     it(\"should parse multi-accented characters\", function() {\n       |    ^ Unknown Test\n  3938 |         expect`ấā́ắ\\text{ấā́ắ}`.toParse(nonstrictSettings);\n  3939 |         // Doesn't parse quite the same as\n  3940 |         // \"\\\\text{\\\\'{\\\\^a}\\\\'{\\\\=a}\\\\'{\\\\u a}}\" because of the ordgroups.","start":{"column":4,"line":3937}},{"frame":"  3941 |     });\n  3942 |\n> 3943 |     it(\"should parse accented i's and j's\", function() {\n       |    ^ Unknown Test\n  3944 |         expect`íȷ́`.toParseLike(r`\\acute ı\\acute ȷ`, nonstrictSettings);\n  3945 |         expect`ấā́ắ\\text{ấā́ắ}`.toParse(nonstrictSettings);\n  3946 |     });","start":{"column":4,"line":3943}},{"frame":"  3948 |\n  3949 | describe(\"Unicode\", function() {\n> 3950 |     it(\"should parse negated relations\", function() {\n       |    ^ Unknown Test\n  3951 |         expect`∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌`.toParse(strictSettings);\n  3952 |     });\n  3953 |","start":{"column":4,"line":3950}},{"frame":"  3952 |     });\n  3953 |\n> 3954 |     it(\"should build relations\", function() {\n       |    ^ Unknown Test\n  3955 |         expect`∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌`.toBuild(strictSettings);\n  3956 |     });\n  3957 |","start":{"column":4,"line":3954}},{"frame":"  3956 |     });\n  3957 |\n> 3958 |     it(\"should parse relations\", function() {\n       |    ^ Unknown Test\n  3959 |         // These characters are not in the KaTeX fonts. So they build with an error message.\n  3960 |         expect`⊶⊷`.toParse();\n  3961 |     });","start":{"column":4,"line":3958}},{"frame":"  3961 |     });\n  3962 |\n> 3963 |     it(\"should build big operators\", function() {\n       |    ^ Unknown Test\n  3964 |         expect`∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆`.toBuild(strictSettings);\n  3965 |     });\n  3966 |","start":{"column":4,"line":3963}},{"frame":"  3965 |     });\n  3966 |\n> 3967 |     it(\"should build more relations\", function() {\n       |    ^ Unknown Test\n  3968 |         expect`⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋`.toBuild(strictSettings);\n  3969 |     });\n  3970 |","start":{"column":4,"line":3967}},{"frame":"  3979 |     });\n  3980 |\n> 3981 |     it(\"should build arrows\", function() {\n       |    ^ Unknown Test\n  3982 |         expect`←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉`.toBuild(strictSettings);\n  3983 |     });\n  3984 |","start":{"column":4,"line":3981}},{"frame":"  3983 |     });\n  3984 |\n> 3985 |     it(\"should build more arrows\", function() {\n       |    ^ Unknown Test\n  3986 |         expect`⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼`.toBuild(strictSettings);\n  3987 |     });\n  3988 |","start":{"column":4,"line":3985}},{"frame":"  4069 |\n  4070 | describe(\"The maxExpand setting\", () => {\n> 4071 |     it(\"should prevent expansion\", () => {\n       |    ^ Unknown Test\n  4072 |         expect`\\gdef\\foo{1}\\foo`.toParse();\n  4073 |         expect`\\gdef\\foo{1}\\foo`.toParse(new Settings({maxExpand: 1}));\n  4074 |         expect`\\gdef\\foo{1}\\foo`.not.toParse(new Settings({maxExpand: 0}));","start":{"column":4,"line":4071}},{"frame":"  4075 |     });\n  4076 |\n> 4077 |     it(\"should prevent infinite loops\", () => {\n       |    ^ Unknown Test\n  4078 |         expect`\\gdef\\foo{\\foo}\\foo`.not.toParse(\n  4079 |             new Settings({maxExpand: 10}));\n  4080 |     });","start":{"column":4,"line":4077}},{"frame":"  4080 |     });\n  4081 |\n> 4082 |     it(\"should prevent exponential blowup via \\\\edef\", () => {\n       |    ^ Unknown Test\n  4083 |         expect`\\edef0{x}\\edef0{00}\\edef0{00}\\edef0{00}\\edef0{00}`.not.toParse(\n  4084 |             new Settings({maxExpand: 10}));\n  4085 |     });","start":{"column":4,"line":4082}},{"frame":"  4131 |\n  4132 | describe(\"Newlines via \\\\\\\\ and \\\\newline\", function() {\n> 4133 |     it(\"should build \\\\\\\\ without the optional argument and \\\\newline the same\", () => {\n       |    ^ Unknown Test\n  4134 |         expect`hello \\\\ world`.toBuildLike`hello \\newline world`;\n  4135 |     });\n  4136 |","start":{"column":4,"line":4133}},{"frame":"  4135 |     });\n  4136 |\n> 4137 |     it(\"should not allow \\\\newline to scan for an optional size argument\", () => {\n       |    ^ Unknown Test\n  4138 |         expect`hello \\newline[w]orld`.toBuild();\n  4139 |     });\n  4140 |","start":{"column":4,"line":4137}},{"frame":"  4139 |     });\n  4140 |\n> 4141 |     it(\"should not allow \\\\cr at top level\", () => {\n       |    ^ Unknown Test\n  4142 |         expect`hello \\cr world`.not.toBuild();\n  4143 |     });\n  4144 |","start":{"column":4,"line":4141}},{"frame":"  4154 |\n  4155 | describe(\"Symbols\", function() {\n> 4156 |     it(\"should parse \\\\text{\\\\i\\\\j}\", () => {\n       |    ^ Unknown Test\n  4157 |         expect`\\text{\\i\\j}`.toBuild(strictSettings);\n  4158 |     });\n  4159 |","start":{"column":4,"line":4156}},{"frame":"  4158 |     });\n  4159 |\n> 4160 |     it(\"should parse spacing functions in math or text mode\", () => {\n       |    ^ Unknown Test\n  4161 |         expect`A\\;B\\,C\\nobreakspace \\text{A\\;B\\,C\\nobreakspace}`.toBuild(strictSettings);\n  4162 |     });\n  4163 |","start":{"column":4,"line":4160}},{"frame":"  4162 |     });\n  4163 |\n> 4164 |     it(\"should build \\\\minuso\", () => {\n       |    ^ Unknown Test\n  4165 |         expect`\\\\minuso`.toBuild(strictSettings);\n  4166 |     });\n  4167 |","start":{"column":4,"line":4164}},{"frame":"  4166 |     });\n  4167 |\n> 4168 |     it(\"should render ligature commands like their unicode characters\", () => {\n       |    ^ Unknown Test\n  4169 |         expect`\\text{\\ae\\AE\\oe\\OE\\o\\O\\ss}`.toBuildLike(r`\\text{æÆœŒøØß}`, strictSettings);\n  4170 |     });\n  4171 | });","start":{"column":4,"line":4168}},{"frame":"  4172 |\n  4173 | describe(\"strict setting\", function() {\n> 4174 |     it(\"should allow unicode text when not strict\", () => {\n       |    ^ Unknown Test\n  4175 |         expect`é`.toParse(new Settings(nonstrictSettings));\n  4176 |         expect`試`.toParse(new Settings(nonstrictSettings));\n  4177 |         expect`é`.toParse(new Settings({strict: \"ignore\"}));","start":{"column":4,"line":4174}},{"frame":"  4183 |     });\n  4184 |\n> 4185 |     it(\"should forbid unicode text when strict\", () => {\n       |    ^ Unknown Test\n  4186 |         expect`é`.not.toParse(new Settings({strict: true}));\n  4187 |         expect`試`.not.toParse(new Settings({strict: true}));\n  4188 |         expect`é`.not.toParse(new Settings({strict: \"error\"}));","start":{"column":4,"line":4185}},{"frame":"  4194 |     });\n  4195 |\n> 4196 |     it(\"should warn about unicode text when default\", () => {\n       |    ^ Unknown Test\n  4197 |         expect`é`.toWarn(new Settings());\n  4198 |         expect`試`.toWarn(new Settings());\n  4199 |     });","start":{"column":4,"line":4196}},{"frame":"  4199 |     });\n  4200 |\n> 4201 |     it(\"should always allow unicode text in text mode\", () => {\n       |    ^ Unknown Test\n  4202 |         expect`\\text{é試}`.toParse(nonstrictSettings);\n  4203 |         expect`\\text{é試}`.toParse(strictSettings);\n  4204 |         expect`\\text{é試}`.toParse();","start":{"column":4,"line":4201}},{"frame":"  4205 |     });\n  4206 |\n> 4207 |     it(\"should warn about top-level \\\\newline in display mode\", () => {\n       |    ^ Unknown Test\n  4208 |         expect`x\\\\y`.toWarn(new Settings({displayMode: true}));\n  4209 |         expect`x\\\\y`.toParse(new Settings({displayMode: false}));\n  4210 |     });","start":{"column":4,"line":4207}},{"frame":"  4254 |         }).toThrow(errorMessage);\n  4255 |     });\n> 4256 |     it(\"should add font metrics to metrics map and render successfully\", () => {\n       |    ^ Unknown Test\n  4257 |         const mockMetrics = {};\n  4258 |         // mock font metrics for the symbols that we added previously\n  4259 |         for (let number = 0; number <= 9; number++) {","start":{"column":4,"line":4256}},{"frame":"  4290 |\n  4291 | describe(\"\\\\relax\", () => {\n> 4292 |     it(\"should stop the expansion\", () => {\n       |    ^ Unknown Test\n  4293 |         expect`\\kern2\\relax em`.not.toParse();\n  4294 |     });\n  4295 | });","start":{"column":4,"line":4292}},{"frame":"  4296 |\n  4297 | describe(\"\\\\emph\", () => {\n> 4298 |     it(\"should toggle italics\", () => {\n       |    ^ Unknown Test\n  4299 |         expect`\\emph{foo \\emph{bar}}`.toBuildLike`\\textit{foo \\textup{bar}}`;\n  4300 |     });\n  4301 |","start":{"column":4,"line":4298}},{"frame":"  4300 |     });\n  4301 |\n> 4302 |     it(\"should toggle italics within text\", () => {\n       |    ^ Unknown Test\n  4303 |         expect`\\text{\\emph{foo \\emph{bar}}}`.toBuildLike`\\text{\\textit{foo \\textup{bar}}}`;\n  4304 |     });\n  4305 |","start":{"column":4,"line":4302}},{"frame":"  4304 |     });\n  4305 |\n> 4306 |     it(\"should toggle italics within textup\", () => {\n       |    ^ Unknown Test\n  4307 |         expect`\\textup{\\emph{foo \\emph{bar}}}`.toBuildLike`\\textup{\\textit{foo \\textup{bar}}}`;\n  4308 |     });\n  4309 |","start":{"column":4,"line":4306}},{"frame":"  4308 |     });\n  4309 |\n> 4310 |     it(\"should toggle italics within textit\", () => {\n       |    ^ Unknown Test\n  4311 |         expect`\\textit{\\emph{foo \\emph{bar}}}`.toBuildLike`\\textit{\\textup{foo \\textit{bar}}}`;\n  4312 |     });\n  4313 | });","start":{"column":4,"line":4310}}]}],"metrics":{"aggregate":{"cyclomatic":730,"cyclomaticDensity":13.217,"halstead":{"bugs":67.09,"difficulty":65.757,"effort":13234748.707,"length":18069,"time":735263.817,"vocabulary":2255,"volume":201268.996,"operands":{"distinct":2224,"total":9435,"identifiers":["defaultOptions","Options","style","Style","TEXT","size","5","maxSize","Infinity","describe","\"A parser\"","it","\"should not fail on an empty string\"","expect","toParse","strictSettings","\"should ignore whitespace\"","    x    y    ","toParseLike","\"xy\"","\"should ignore whitespace in atom\"","    x   ^ y    ","\"x^y\"","\"An ord parser\"","expression","\"1234|/@.\"`abcdefgzABCDEFGZ\"","\"should not fail\"","\"should build a list of ords\"","parse","getParsed","i","0","length","group","type","toMatch","\"ord\"","\"should parse the right number of ords\"","toHaveLength","\"A bin parser\"","r","+-*cdotpmdiv","\"should build a list of bins\"","toEqual","\"atom\"","family","\"bin\"","\"A rel parser\"","=<>leqgeq\neq\nleq\ngeqcong","notExpression","\not=\not<\not>\notleq\notgeq\notin","\"should build a list of rels\"","\"htmlmathml\"","html","1","\"mclass\"","mclass","\"mrel\"","\"rel\"","\"A mathinner parser\"","mathinner{langle{psi}\rangle}","\frac 1 {mathinner{langle{psi}\rangle}}","\"should return one group, not a fragment\"","contents","\"\\mathinner{\\langle{\\psi}\\rangle}\"","mml","buildMathML","children","\"A punct parser\"","\",;\"","\"should build a list of puncts\"","\"punct\"","\"An open parser\"","\"([\"","\"should build a list of opens\"","\"open\"","\"A close parser\"","\")]?!\"","\"should build a list of closes\"","\"close\"","\"A \\KaTeX parser\"","KaTeX","\"A subscript and superscript parser\"","\"should not fail on superscripts\"","x^2","\"should not fail on subscripts\"","x_3","\"should not fail on both subscripts and superscripts\"","x^2_3","x_2^3","\"should not fail when there is no nucleus\"","^3","^3+","_2","^3_2","_2^3","\"should produce supsubs for superscript\"","toBe","\"supsub\"","base","toBeDefined","sup","sub","toBeUndefined","\"should produce supsubs for subscript\"","\"should produce supsubs for ^_\"","\"should produce supsubs for _^\"","x_3^2","\"should produce the same thing regardless of order\"","\"should not parse double subscripts or superscripts\"","x^x^x","not","x_x_x","x_x^x_x","x_x^x^x","x^x_x_x","x^x_x^x","\"should work correctly with {}s\"","x^{2+3}","x_{3-2}","x^{2+3}_3","x^2_{3-2}","x^{2+3}_{3-2}","x_{3-2}^{2+3}","x_3^{2+3}","x_{3-2}^2","\"should work with nested super/subscripts\"","x^{x^x}","x^{x_x}","x_{x^x}","x_{x_x}","\"should work with Unicode (sub|super)script characters\"","A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃","A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}","\"should not fail if \\relax is in an atom\"","hskip1em\relax^2","\"should skip \\relax in super/subscripts\"","x^\relax 2","x_\relax 2","x_2","\"A subscript and superscript tree-builder\"","toBuild","\"A parser with limit controls\"","\"should fail when the limit control is not preceded by an op node\"","3\nolimits_2^2","sqrtlimits_2^2","45 +\nolimits 45","\"should parse when the limit control directly follows an op node\"","intlimits_2^2 3","sum\nolimits_3^4 4","\"should parse when the limit control is in the sup/sub area of an op node\"","int_2^2limits","int^2\nolimits_2","int_2limits^2","\"should allow multiple limit controls in the sup/sub area of an op node\"","int_2\nolimits^2limits 3","int\nolimitslimits_2^2","intlimitslimitslimits_2^2","\"should have the rightmost limit control determine the limits property \"","\"of the preceding op node\"","parsedInput","limits","true","intlimits_2\nolimits^2","false","\"A group parser\"","{xy}","\"should produce a single ord\"","ord","body","toBeTruthy","\"A \\begingroup...\\endgroup parser\"","\begingroup xy endgroup","\"should fail when it is mismatched\"","\begingroup xy","\begingroup xy }","\"should produce a semi-simple group\"","semisimple","\"should not affect spacing in math mode\"","\begingroup x+ endgroup y","toBuildLike","x+y","\"An implicit group parser\"","Large x","abc {abc Large xyz} abc","\"should produce a single object\"","Large abc","sizing","\"sizing\"","\"should apply only after the function\"","a Large abc","2","3","\"should stop at the ends of groups\"","a { b Large c } d","\"within optional groups\"","\"should work with sizing commands: \\sqrt[\\small 3]{x}\"","tree","stripPositions","sqrt[small 3]{x}","toMatchSnapshot","\"should work with \\color: \\sqrt[\\color{red} 3]{x}\"","sqrt[color{red} 3]{x}","\"should work style commands \\sqrt[\\textstyle 3]{x}\"","sqrt[\textstyle 3]{x}","\"should work with old font functions: \\sqrt[\\tt 3]{x}\"","sqrt[\tt 3]{x}","\"A function parser\"","\"should parse no argument functions\"","div","\"should parse 1 argument functions\"","\blue x","\"should parse 2 argument functions\"","\frac 1 2","\"should not parse 1 argument functions with no arguments\"","\blue","\"should not parse 2 argument functions with 0 or 1 arguments\"","\frac","\frac 1","\"should not parse a function with text right after it\"","\redx","\"should parse a function with a number right after it\"","\frac12","\"should parse some functions with text right after it\"",";x","\"A frac parser\"","\frac{x}{y}","dfracExpression","dfrac{x}{y}","tfracExpression","\tfrac{x}{y}","cfracExpression","cfrac{x}{y}","genfrac1","genfrac ( ] {0.06em}{0}{a}{b+c}","genfrac2","genfrac ( ] {0.8pt}{}{a}{b+c}","\"should produce a frac\"","\"genfrac\"","numer","denom","\"should also parse cfrac, dfrac, tfrac, and genfrac\"","\"should parse cfrac, dfrac, tfrac, and genfrac as fracs\"","dfracParse","tfracParse","cfracParse","genfracParse","leftDelim","rightDelim","\"should fail, given math as a line thickness to genfrac\"","badGenFrac","\"\\genfrac ( ] {b+c}{0}{a}{b+c}\"","\"should fail if genfrac is given less than 6 arguments\"","\"\\genfrac ( ] {0.06em}{0}{a}\"","\"should parse atop\"","x atop y","hasBarLine","\"An over/brace/brack parser\"","simpleOver","1 over x","complexOver","1+2i over 3+4i","braceFrac","a+b \brace c+d","brackFrac","a+b \brack c+d","parseBraceFrac","parseBrackFrac","\"should create a numerator from the atoms before \\over\"","4","\"should create a denominator from the atoms after \\over\"","\"should handle empty numerators\"","emptyNumerator","over x","\"should handle empty denominators\"","emptyDenominator","1 over","\"should handle \\displaystyle correctly\"","displaystyleExpression","displaystyle 1 over 2","\"styling\"","\"should handle \\textstyle correctly\"","\textstyle 1 over 2","\frac{\textstyle 1}{2}","{\textstyle 1} over 2","\"should handle nested factions\"","nestedOverExpression","{1 over 2} over 3","text","\"1\"","\"2\"","\"3\"","\"should fail with multiple overs in the same group\"","badMultipleOvers","1 over 2 + 3 over 4","badOverChoose","1 over 2 choose 3","\"A genfrac builder\"","genfrac {} {} {0.8pt}{}{a}{b+c}","genfrac [ {} {0.8pt}{}{a}{b+c}","\"A infix builder\"","a over b","a atop b","a choose b","a \brace b","a \brack b","\"A sizing parser\"","sizeExpression","Huge{x}small{x}","\"should produce a sizing node\"","\"A text parser\"","textExpression","\text{a b}","noBraceTextExpression","\text x","nestedTextExpression","\text{a {b} \blue{c} \textcolor{#fff}{x} llap{x}}","spaceTextExpression","\text{  a   }","leadingSpaceTextExpression","\text {moo}","badTextExpression","\text{a b%}","badFunctionExpression","\text{sqrt{x}}","mathTokenAfterText","\text{sin}^2","\"should produce a text\"","\"text\"","\"should produce textords instead of mathords\"","\"textord\"","\"should not parse bad text\"","\"should not parse bad functions inside text\"","\"should parse text with no braces around it\"","\"should parse nested expressions\"","\"should contract spaces\"","\"spacing\"","\"should handle backslash followed by newline\"","\"\\text{\\ \t\r \n \t\r  }\"","\text{ }","\"should accept math mode tokens after its argument\"","\"should ignore a space before the text group\"","map","n","join","\"\"","\"moo\"","\"should parse math within text group\"","\text{graph: $y = mx + b$}","\text{graph: (y = mx + b)}","\"should parse math within text within math within text\"","\text{hello $x + \text{world $y$} + z$}","\text{hello (x + \text{world $y$} + z)}","\text{hello $x + \text{world (y)} + z$}","\text{hello (x + \text{world (y)} + z)}","\"should forbid \\( within math mode\"","(","\text{$(x)$}","\"should forbid $ within math mode\"","$x$","\text{($x$)}","\"should detect unbalanced \\)\"",")","\text{)}","\"should detect unbalanced $\"","$","\text{$}","\"should not mix $ and \\(..\\)\"","\text{$x)}","\text{(x$}","\"should parse spacing functions\"","a b, ; ! : > ~ \thinspace medspace quad  ","enspace \thickspace qquad space \nobreakspace","\"should omit spaces after commands\"","\text{\textellipsis !}","\text{\textellipsis!}","\"should handle ⋮ and \\vdots\"","\text{a \u000bdots b ⋮ d}","\"A texvc builder\"","langNdarrRdArrZDarralef\rang","null","clubsdiamondsheartsspadescnumsComplex","DaggeremptyharrEpsilonhArrEtaHarrexist","imagelarrinfinlArrIotaLarrisinKappa","Mulrarr\natnumslrArrNuLrarrOmicron","\real\rarrplusmn\rArr\realsRarrRealsRho","\text{sect}sdotsubsubesupe","Tau\thetasymweierpZeta","\"A color parser\"","colorExpression","\blue{x}","newColorExpression","\redA{x}","customColorExpression1","\textcolor{#fA6}{x}","customColorExpression2","\textcolor{#fA6fA6}{x}","customColorExpression3","\textcolor{fA6fA6}{x}","badCustomColorExpression1","\textcolor{bad-color}{x}","badCustomColorExpression2","\textcolor{#fA6f}{x}","badCustomColorExpression3","\textcolor{#gA6}{x}","oldColorExpression","color{#fA6}xy","\"should build a color node\"","\"color\"","color","\"should parse a custom color\"","\"should correctly extract the custom color\"","parse1","parse2","parse3","\"#fA6\"","\"#fA6fA6\"","\"should not parse a bad custom color\"","\"should parse new colors from the branding guide\"","\"should use one-argument \\color by default\"","\textcolor{#fA6}{xy}","\"should use one-argument \\color if requested\"","colorIsTextColor","\"should use two-argument \\color if requested\"","\textcolor{#fA6}{x}y","\"should not define \\color in global context\"","macros","globalGroup","\"A tie parser\"","mathTie","a~b","textTie","\text{a~ b}","\"should parse ties in math mode\"","\"should parse ties in text mode\"","\"should produce spacing in math mode\"","\"should produce spacing in text mode\"","\"should not contract with spaces in text mode\"","\"A delimiter sizing parser\"","normalDelim","\bigl |","notDelim","\bigl x","bigDelim","Biggr langle","\"should parse normal delimiters\"","\"should not parse not-delimiters\"","\"should produce a delimsizing\"","\"delimsizing\"","\"should produce the correct direction delimiter\"","leftParse","rightParse","\"mopen\"","\"mclose\"","\"should parse the correct size delimiter\"","smallParse","bigParse","\"An overline parser\"","overline","overline{x}","\"should produce an overline\"","\"overline\"","\"An lap parser\"","\"should not fail on a text argument\"","\rlap{,/}{=}","mathrlap{,/}{=}","{=}llap{/,}","{=}mathllap{/,}","sum_{clap{ABCDEFG}}","sum_{mathclap{ABCDEFG}}","\"should not fail if math version is used\"","mathrlap{\frac{a}{b}}{=}","{=}mathllap{\frac{a}{b}}","sum_{mathclap{\frac{a}{b}}}","\"should fail on math if AMS version is used\"","\rlap{\frac{a}{b}}{=}","{=}llap{\frac{a}{b}}","sum_{clap{\frac{a}{b}}}","\"should produce a lap\"","mathrlap{,/}","\"lap\"","\"A rule parser\"","emRule","\rule{1em}{2em}","exRule","\rule{1ex}{2em}","badUnitRule","\rule{1au}{2em}","noNumberRule","\rule{1em}{em}","incompleteRule","\rule{1em}","hardNumberRule","\rule{   01.24ex}{2.450   em   }","\"should not parse invalid units\"","\"should not parse incomplete rules\"","\"should produce a rule\"","\"rule\"","\"should list the correct units\"","emParse","exParse","width","unit","\"em\"","height","\"ex\"","\"should parse the number correctly\"","hardNumberParse","number","toBeCloseTo","1.24","2.45","\"should parse negative sizes\"","\rule{-1em}{- 0.2em}","0.2","\"should parse in text mode\"","\text{a\rule{1em}{2em}b}","\"A kern parser\"","emKern","kern{1em}","exKern","kern{1ex}","muKern","mkern{1mu}","abKern","akern{1em}b","kern{1au}","kern{em}","muParse","abParse","dimension","\"mu\"","kern{-1em}","\"should parse positive sizes\"","kern{+1em}","\"A non-braced kern parser\"","kern1em","kern 1 ex","mkern 1mu","abKern1","amkern1mub","abKern2","amkern-1mub","abKern3","amkern-1mu b","kern1au","kern em","abParse1","abParse2","abParse3","\"should parse elements on either side of a kern\"","\"a\"","\"b\"","kern-1em","kern+1em","\"should handle whitespace\"","\"a\\mkern\t-\r1  \n mu\nb\"","\"A left/right parser\"","normalLeftRight","left( dfrac{x}{y} \right)","emptyRight","left( dfrac{x}{y} \right.","\"should produce a leftright\"","\"leftright\"","left","\"(\"","right","\")\"","\"should error when it is mismatched\"","unmatchedLeft","left( dfrac{x}{y}","unmatchedRight","dfrac{x}{y} \right)","\"should error when braces are mismatched\"","unmatched","{ left( dfrac{x}{y} } \right)","\"should error when non-delimiters are provided\"","nonDelimiter","left$ dfrac{x}{y} \right)","\"should parse the empty '.' delimiter\"","\"should parse the '.' delimiter with normal sizes\"","normalEmpty","Bigl .","\"should handle \\middle\"","normalMiddle","left( dfrac{x}{y} middle| dfrac{y}{z} \right)","\"should handle multiple \\middles\"","multiMiddle","left( dfrac{x}{y} middle| dfrac{y}{z} middle/ dfrac{z}{q} \right)","\"should handle nested \\middles\"","nestedMiddle","left( a^2 middle| left( b middle/ c \right) \right)","\"should error when \\middle is not in \\left...\\right\"","unmatchedMiddle","(middle|dfrac{x}{y})","\"left/right builder\"","cases","leftlangle \right\rangle","left< \right>","\"\\left⟨ \\right⟩\"","leftlparen \right\rparen","left( \right)","actual","expected","should build \"","\" like \"","\"","\"A begin/end parser\"","\"should parse a simple environment\"","\begin{matrix}a&b\\c&dend{matrix}","\"should parse an environment with argument\"","\begin{array}{cc}a&b\\c&dend{array}","\"should parse and build an empty environment\"","\begin{aligned}end{aligned}","\begin{matrix}end{matrix}","\"should parse an environment with hlines\"","\begin{matrix}hline a&b\\ hline c&dend{matrix}","\begin{matrix}hline a&bcr hline c&dend{matrix}","\begin{matrix}hdashline a&b\\ hdashline c&dend{matrix}","\"should forbid hlines outside array environment\"","hline","\"should error when name is mismatched\"","\begin{matrix}a&b\\c&dend{pmatrix}","\"should error when commands are mismatched\"","\begin{matrix}a&b\\c&d\right{pmatrix}","\"should error when end is missing\"","\begin{matrix}a&b\\c&d","{\begin{matrix}a&b\\c&d}end{matrix}","\"should cooperate with infix notation\"","\begin{matrix}0&1over2&3\\4&5&6end{matrix}","\"should nest\"","m1","\begin{pmatrix}1&2\\3&4end{pmatrix}","m2","\\begin{array}{rl}","&0\\\\0&","\\end{array}","\"should allow \\cr and \\\\ as a line terminator\"","\begin{matrix}a&bcr c&dend{matrix}","\"should not allow \\cr to scan for an optional size argument\"","\begin{matrix}a&bcr[c]&dend{matrix}","\"should not treat [ after space as optional argument to \\\\\"","\begin{matrix}a&b\\ [c]&dend{matrix}","a\\ [b]","\"should eat a final newline\"","m3","\begin{matrix}a&b\\ c&d \\ end{matrix}","\"should grab \\arraystretch\"","defarraystretch{1.5}\begin{matrix}a&b\\c&dend{matrix}","\"should allow an optional argument in {matrix*} and company.\"","\begin{matrix*}[r] a & -1 \\ -1 & d end{matrix*}","\begin{pmatrix*}[r] a & -1 \\ -1 & d end{pmatrix*}","\begin{bmatrix*}[r] a & -1 \\ -1 & d end{bmatrix*}","\begin{Bmatrix*}[r] a & -1 \\ -1 & d end{Bmatrix*}","\begin{vmatrix*}[r] a & -1 \\ -1 & d end{vmatrix*}","\begin{Vmatrix*}[r] a & -1 \\ -1 & d end{Vmatrix*}","\begin{matrix*} a & -1 \\ -1 & d end{matrix*}","\begin{matrix*}[] a & -1 \\ -1 & d end{matrix*}","\"should allow blank columns\"","parsed","\begin{matrix*}[r] a \\ -1 & d end{matrix*}","cols","\"align\"","align","\"r\"","\"A sqrt parser\"","sqrt","sqrt{x}","missingGroup","\"should parse square roots\"","\"should error when there is no group\"","\"should produce sqrts\"","\"sqrt\"","\"should build sized square roots\"","Largesqrt[3]{x}","\"should expand argument if optional argument doesn't exist\"","sqrt\foo","\"\\sqrt123\"","Settings","\"\\foo\"","\"123\"","\"should not expand argument if optional argument exists\"","sqrt[2]\foo","\"\\sqrt[2]{123}\"","\"A TeX-compliant parser\"","\"should work\"","\frac 2 3","\"should fail if there are not enough arguments\"","missingGroups","\frac{x}","\textcolor{#fff}","llap","\bigl","\text","\"should fail when there are missing sup/subscripts\"","x^","x_","\"should fail when arguments require arguments\"","badArguments","\frac \frac x y z","\frac x \frac y z","\frac sqrt x y","\frac x sqrt y","\frac mathllap x y","\frac x mathllap y","mathllap mathllap x","sqrt mathllap x","\"should work when the arguments have braces\"","goodArguments","\frac {\frac x y} z","\frac x {\frac y z}","\frac {sqrt x} y","\frac x {sqrt y}","\frac {mathllap x} y","\frac x {mathllap y}","mathllap {\frac x y}","mathllap {mathllap x}","sqrt {mathllap x}","\"should fail when sup/subscripts require arguments\"","badSupSubscripts","x^sqrt x","x^mathllap x","x_sqrt x","x_mathllap x","\"should work when sup/subscripts arguments have braces\"","goodSupSubscripts","x^{sqrt x}","x^{mathllap x}","x_{sqrt x}","x_{mathllap x}","\"should parse multiple primes correctly\"","x''''","x_2''","x''_2","\"should fail when sup/subscripts are interspersed with arguments\"","sqrt^23","\frac^234","\frac2^34","\"should succeed when sup/subscripts come after whole functions\"","sqrt2^3","\frac23^4","\"should succeed with a sqrt around a text/frac\"","sqrt \frac x y","sqrt \text x","x^\frac x y","x_\text x","\"should fail when arguments are \\left\"","badLeftArguments","\frac left( x \right) y","\frac x left( y \right)","mathllap left( x \right)","sqrt left( x \right)","x^left( x \right)","\"should succeed when there are braces around the \\left/\\right\"","goodLeftArguments","\frac {left( x \right)} y","\frac x {left( y \right)}","mathllap {left( x \right)}","sqrt {left( x \right)}","x^{left( x \right)}","\"An op symbol builder\"","int_i^n","iint_i^n","iiint_i^n","int\nolimits_i^n","iint\nolimits_i^n","iiint\nolimits_i^n","oint_i^n","oiint_i^n","oiiint_i^n","oint\nolimits_i^n","oiint\nolimits_i^n","oiiint\nolimits_i^n","\"A style change parser\"","displaystyle x","\textstyle x","scriptstyle x","scriptscriptstyle x","\"should produce the correct style\"","displayParse","\"display\"","scriptscriptParse","\"scriptscript\"","\"should only change the style within its group\"","a b { c d displaystyle e f } g h","displayNode","displayBody","\"e\"","\"A font parser\"","\"should parse \\mathrm, \\mathbb, \\mathit, and \\mathnormal\"","mathrm x","mathbb x","mathit x","mathnormal x","mathrm {x + 1}","mathbb {x + 1}","mathit {x + 1}","mathnormal {x + 1}","\"should parse \\mathcal and \\mathfrak\"","mathcal{ABC123}","mathfrak{abcABC123}","\"should produce the correct fonts\"","mathbbParse","font","\"mathbb\"","\"font\"","mathrmParse","\"mathrm\"","mathitParse","\"mathit\"","mathnormalParse","\"mathnormal\"","mathcalParse","mathcal C","\"mathcal\"","mathfrakParse","mathfrak C","\"mathfrak\"","\"should parse nested font commands\"","nestedParse","mathbb{R \neq mathrm{R}}","bbBody","\"mathord\"","\"should work with \\textcolor\"","colorMathbbParse","\textcolor{blue}{mathbb R}","\"blue\"","\"should not parse a series of font commands\"","mathbb mathrm R","\"should nest fonts correctly\"","bf","mathbf{amathrm{b}c}","\"mathbf\"","\"c\"","\"should be allowed in the argument\"","e^mathbf{x}","\"\\boldsymbol should inherit mbin/mrel from argument\"","built","getBuilt","a\boldsymbol{}b\boldsymbol{=}c\boldsymbol{+}d\boldsymbol{++}e\boldsymbol{xyz}f","\"old-style fonts work like new-style fonts\"","\rm xyz","mathrm{xyz}","sf xyz","mathsf{xyz}","\tt xyz","mathtt{xyz}","\bf xyz","mathbf{xyz}","it xyz","mathit{xyz}","cal xyz","mathcal{xyz}","\"A \\pmb builder\"","pmb{mu}","pmb{=}","pmb{+}","pmb{\frac{x^2}{x_1}}","pmb{}","pmb{1}","\"A raise parser\"","\"should parse and build text in \\raisebox\"","\raisebox{5pt}{text}","\raisebox{-5pt}{text}","\"should parse and build math in non-strict \\vcenter\"","\u000bcenter{\frac a b}","nonstrictSettings","\"should fail to parse math in \\raisebox\"","\raisebox{5pt}{\frac a b}","\raisebox{-5pt}{\frac a b}","\"should fail to parse math in an \\hbox\"","hbox{\frac a b}","\"should fail to build, given an unbraced length\"","\raisebox5pt{text}","\raisebox-5pt{text}","\"should build math in an hbox when math mode is set\"","a + \u000bcenter{hbox{$\frac{\frac a b}c$}}","\"A comment parser\"","\"should parse comments at the end of a line\"","\"a^2 + b^2 = c^2 % Pythagoras' Theorem\n\"","\"should parse comments at the start of a line\"","\"% comment\n\"","\"should parse multiple lines of comments in a row\"","\"% comment 1\n% comment 2\n\"","\"should parse comments between subscript and superscript\"","\"x_3 %comment\n^2\"","\"x^ %comment\n{2}\"","x^{2}","\"x^ %comment\n\\frac{1}{2}\"","x^\frac{1}{2}","\"should parse comments in size and color groups\"","\"\\kern{1 %kern\nem}\"","\"\\kern1 %kern\nem\"","\"\\color{#f00%red\n}\"","\"should parse comments before an expression\"","\"%comment\n{2}\"","{2}","\"should parse comments before and between \\hline\"","\"\\begin{matrix}a&b\\\\ %hline\n\"","\"\\hline %hline\n\"","\"\\hline c&d\\end{matrix}\"","\"should parse comments in the macro definition\"","\"\\def\\foo{1 %}\n2}\n\\foo\"","12","\"should not expand nor ignore spaces after a command sequence in a comment\"","\"\\def\\foo{1\n2}\nx %\\foo\n\"","x","\"should not parse a comment without newline in strict mode\"","x%y","\"should not produce or consume space\"","\"\\text{hello% comment 1\nworld}\"","\text{helloworld}","\"\\text{hello% comment\n\nworld}\"","\text{hello world}","\"should not include comments in the output\"","\"5 % comment\n\"","\"An HTML font tree-builder\"","\"should render \\mathbb{R} with the correct font\"","markup","katex","renderToString","mathbb{R}","toContain","\"<span class=\"mord mathbb\">R</span>\"","\"should render \\mathrm{R} with the correct font\"","mathrm{R}","\"<span class=\"mord mathrm\">R</span>\"","\"should render \\mathcal{R} with the correct font\"","mathcal{R}","\"<span class=\"mord mathcal\">R</span>\"","\"should render \\mathfrak{R} with the correct font\"","mathfrak{R}","\"<span class=\"mord mathfrak\">R</span>\"","\"should render \\text{R} with the correct font\"","\text{R}","\"<span class=\"mord\">R</span>\"","\"should render \\textit{R} with the correct font\"","\textit{R}","\"<span class=\"mord textit\">R</span>\"","\"should render \\text{\\textit{R}} with the correct font\"","\text{\textit{R}}","\"should render \\textup{R} with the correct font\"","markup1","\textup{R}","\"<span class=\"mord textup\">R</span>\"","markup2","\textit{\textup{R}}","markup3","\textup{\textit{R}}","\"should render \\text{R\\textit{S}T} with the correct fonts\"","\text{R\textit{S}T}","\"<span class=\"mord textit\">S</span>\"","\"<span class=\"mord\">T</span>\"","\"should render \\textbf{R } with the correct font\"","\textbf{R }","\"<span class=\"mord textbf\">R </span>\"","\"should render \\textmd{R} with the correct font\"","\textmd{R}","\"<span class=\"mord textmd\">R</span>\"","\textbf{\textmd{R}}","\textmd{\textbf{R}}","\"<span class=\"mord textbf\">R</span>\"","\"should render \\textsf{R} with the correct font\"","\textsf{R}","\"<span class=\"mord textsf\">R</span>\"","\"should render \\textsf{\\textit{R}G\\textbf{B}} with the correct font\"","\textsf{\textit{R}G\textbf{B}}","\"<span class=\"mord textsf textit\">R</span>\"","\"<span class=\"mord textsf\">G</span>\"","\"<span class=\"mord textsf textbf\">B</span>\"","\"should render \\textsf{\\textbf{$\\mathrm{A}$}} with the correct font\"","\textsf{\textbf{$mathrm{A}$}}","\"<span class=\"mord mathrm\">A</span>\"","\"should render \\textsf{\\textbf{$\\mathrm{\\textsf{A}}$}} with the correct font\"","\textsf{\textbf{$mathrm{\textsf{A}}$}}","\"<span class=\"mord textsf textbf\">A</span>\"","\"should render \\texttt{R} with the correct font\"","\texttt{R}","\"<span class=\"mord texttt\">R</span>\"","\"should render a combination of font and color changes\"","span","\"<span class=\"mord mathbb\" style=\"color:blue;\">R</span>\"","mathbb{\textcolor{blue}{R}}","\"should render wide characters with mord and with the correct font\"","String","fromCharCode","55349","56320","\"<span class=\"mord mathbf\">A</span>\"","\" = \"","56346","mathbf A = mathbf a","\"should throw TypeError when the expression is of the wrong type\"","badInputType","\"yes\"","toThrowError","TypeError","undefined","1.234","\"should not throw TypeError when the expression is a supported type\"","sqrt{123}","\"A MathML font tree-builder\"","Ax2komegaOmegaimath+","\"should render \"","\" with the correct mathvariants\"","toMarkup","\"<mi>A</mi>\"","\"<mi>x</mi>\"","\"<mn>2</mn>\"","\"<mi>ω</mi>\"","\"<mi mathvariant=\"normal\">Ω</mi>\"","\"<mi mathvariant=\"normal\">ı</mi>\"","\"<mo>+</mo>\"","\"should render \\mathbb{\"","\"} with the correct mathvariants\"","tex","\\mathbb{","}","\"<mi mathvariant=\"double-struck\">A</mi>\"","\"<mi mathvariant=\"double-struck\">x</mi>\"","\"<mn mathvariant=\"double-struck\">2</mn>\"","\"<mi mathvariant=\"double-struck\">ω</mi>\"","\"<mi mathvariant=\"double-struck\">Ω</mi>\"","\"<mi mathvariant=\"double-struck\">ı</mi>\"","\"should render \\mathrm{\"","\\mathrm{","\"<mi mathvariant=\"normal\">A</mi>\"","\"<mi mathvariant=\"normal\">x</mi>\"","\"should render \\mathit{\"","\\mathit{","\"<mn mathvariant=\"italic\">2</mn>\"","\"<mi>Ω</mi>\"","\"<mi>ı</mi>\"","\"should render \\mathnormal{\"","\\mathnormal{","\"should render \\mathbf{\"","\\mathbf{","\"<mi mathvariant=\"bold\">A</mi>\"","\"<mi mathvariant=\"bold\">x</mi>\"","\"<mn mathvariant=\"bold\">2</mn>\"","\"<mi mathvariant=\"bold\">ω</mi>\"","\"<mi mathvariant=\"bold\">Ω</mi>\"","\"<mi mathvariant=\"bold\">ı</mi>\"","\"should render \\mathcal{\"","\\mathcal{","\"<mi mathvariant=\"script\">A</mi>\"","\"<mi mathvariant=\"script\">x</mi>\"","\"<mn mathvariant=\"script\">2</mn>\"","\"<mi mathvariant=\"script\">ω</mi>\"","\"<mi mathvariant=\"script\">Ω</mi>\"","\"<mi mathvariant=\"script\">ı</mi>\"","\"should render \\mathfrak{\"","\\mathfrak{","\"<mi mathvariant=\"fraktur\">A</mi>\"","\"<mi mathvariant=\"fraktur\">x</mi>\"","\"<mn mathvariant=\"fraktur\">2</mn>\"","\"<mi mathvariant=\"fraktur\">ω</mi>\"","\"<mi mathvariant=\"fraktur\">Ω</mi>\"","\"<mi mathvariant=\"fraktur\">ı</mi>\"","\"should render \\mathscr{\"","\\mathscr{","\"should render \\mathsf{\"","\\mathsf{","\"<mi mathvariant=\"sans-serif\">A</mi>\"","\"<mi mathvariant=\"sans-serif\">x</mi>\"","\"<mn mathvariant=\"sans-serif\">2</mn>\"","\"<mi mathvariant=\"sans-serif\">ω</mi>\"","\"<mi mathvariant=\"sans-serif\">Ω</mi>\"","\"<mi mathvariant=\"sans-serif\">ı</mi>\"","\"should render \\mathsfit{\"","\\mathsfit{","\"<mi mathvariant=\"sans-serif-italic\">A</mi>\"","\"<mi mathvariant=\"sans-serif-italic\">x</mi>\"","\"<mn mathvariant=\"sans-serif-italic\">2</mn>\"","\"<mi mathvariant=\"sans-serif-italic\">ω</mi>\"","\"<mi mathvariant=\"sans-serif-italic\">Ω</mi>\"","\"<mi mathvariant=\"sans-serif-italic\">ı</mi>\"","node","\"<mstyle mathcolor=\"blue\">\"","\"<mi mathvariant=\"double-struck\">R</mi>\"","\"</mstyle>\"","\"should render text as <mtext>\"","\text{for }","\"<mtext>for </mtext>\"","\"should render math within text as side-by-side children\"","\"<mrow><mtext>graph: </mtext>\"","\"<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>\"","\"An includegraphics builder\"","img","\"\\includegraphics[height=0.9em, totalheight=0.9em, width=0.9em, alt=KA logo]{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}\"","trustSettings","\"should produce mords\"","classes","\"mord\"","\"should not render without trust setting\"","\"should render with trust setting\"","\"should escape source\"","\"\\includegraphics{'\"}\"","\"<img src=\"&#x27;&quot;\"\"","\"should escape alt\"","\"\\includegraphics[alt='\"]{image.png}\"","\"<img src=\"image.png\" alt=\"&#x27;&quot;\"\"","\"An HTML extension builder\"","\"\\htmlId{bar}{x}\\htmlClass{foo}{x}\\htmlStyle{color: red;}{x}\\htmlData{foo=a, bar=b}{x}\"","trustNonStrictSettings","trust","strict","\"should set HTML attributes\"","attributes","id","\"bar\"","\"foo\"","\"color: red\"","\"data-bar\"","\"data-foo\"","\"should not affect spacing\"","\"\\htmlId{a}{x+}y\"","\"should render with trust and strict setting\"","\"should throw Error when HTML attribute name is invalid\"","char","\">\"","\" \"","\"\\t\"","\"\\n\"","\"\\r\"","\"\\\"\"","\"'\"","\"/\"","\\htmlData{a","b=foo}{bar}","error","toBeInstanceOf","ParseError","message","replace","/\\s/","Invalid attribute name 'data-a","b'","KaTeX parse error: ","rawMessage","\"A bin builder\"","\"should create mbins normally\"","x + y","\"mbin\"","\"should create ords when at the beginning of lists\"","+ x","\"should create ords after some other objects\"","x + + 2","( + 2","= + 2","sin + 2",", + 2","\"should correctly interact with color objects\"","\blue{x}+y","\blue{x+}+y","\"A \\phantom builder and \\smash builder\"","\"should both build a mord\"","hphantom{a}","ahphantom{=}b","ahphantom{+}b","smash{a}","smash{=}","asmash{+}b","\"A markup generator\"","\"marks trees up\"","sigma^2","indexOf","\"<span\"","\"σ\"","\"margin-right\"","\"marginRight\"","\"generates both MathML and HTML\"","\"<math\"","\"A parse tree generator\"","\"generates a tree\"","\"An accent parser\"","\u000bec{x}","\u000bec{x^2}","\u000bec{x}^2","\u000bec x","\"should produce accents\"","\"accent\"","\"should be grouped more tightly than supsubs\"","\u000bec x^2","\"should parse stretchy, shifty accents\"","widehat{x}","widecheck{x}","\"should parse stretchy, non-shifty accents\"","overrightarrow{x}","\"An accent builder\"","\u000bec{x}_2","\u000bec{x}_2^2","\u000bec +","\u000bec )^2","\"A stretchy and shifty accent builder\"","widehat{AB}","widecheck{AB}","widehat{AB}^2","widehat{AB}_2","widehat{AB}_2^2","widehat +","widehat )^2","\"A stretchy and non-shifty accent builder\"","overrightarrow{AB}","overrightarrow{AB}^2","overrightarrow{AB}_2","overrightarrow{AB}_2^2","overrightarrow +","overrightarrow )^2","\"A stretchy MathML builder\"","\"should properly render stretchy accents\"","\\widetilde{ABCD}","\"<mo stretchy=\"true\">~</mo>\"","\"An under-accent parser\"","\"should produce accentUnder\"","\"accentUnder\"","\"An under-accent builder\"","\"An extensible arrow parser\"","\"should produce xArrow\"","\"xArrow\"","\"An extensible arrow builder\"","\"should produce mrell\"","\"A horizontal brace parser\"","overbrace{x}","overbrace{x^2}","overbrace{x}^2","overbrace x","\"should produce horizBrace\"","\"horizBrace\"","overbrace x^2","\"A horizontal brace builder\"","overbrace +","overbrace )^2","\"A boxed parser\"","\boxed{x}","\boxed{x^2}","\boxed{x}^2","\boxed x","\"should produce enclose\"","\"enclose\"","\"A boxed builder\"","\boxed{x}_2","\boxed{x}_2^2","\boxed +","\boxed )^2","\"An fbox parser, unlike a boxed parser,\"","\"should fail when given math\"","\fbox{\frac a b}","\"A colorbox parser\"","\"should not fail, given a text argument\"","colorbox{red}{a b}","colorbox{red}{x}^2","colorbox{red} x","\"should fail, given a math argument\"","colorbox{red}{alpha}","colorbox{red}{\frac{a}{b}}","\"should parse a color\"","colorbox{#197}{a b}","colorbox{#1a9b7c}{a b}","\"A colorbox builder\"","colorbox{red}{a b}^2","\"An fcolorbox parser\"","\fcolorbox{blue}{yellow}{a b}","\fcolorbox{blue}{yellow}{x}^2","\fcolorbox{blue}{yellow} x","\fcolorbox{blue}{yellow}{alpha}","\fcolorbox{blue}{yellow}{\frac{a}{b}}","\fcolorbox{blue}{#197}{a b}","\fcolorbox{blue}{#1a9b7c}{a b}","\"A fcolorbox builder\"","\fcolorbox{blue}{yellow}{a b}^2","\"A strike-through parser\"","cancel{x}","cancel{x^2}","cancel{x}^2","cancel x","cancel x^2","\"A strike-through builder\"","cancel{x}_2","cancel{x}_2^2","sout{x}","sout{x}^2","sout{x}_2","sout{x}_2^2","cancel +","cancel )^2","\"A actuarial angle parser\"","\"should not fail in math mode\"","a_{angl{n}}","\"should fail in text mode\"","\text{a_{angl{n}}}","\"A actuarial angle builder\"","a_{angl{n}i}","a_{angl n}","a_angln","\"\\phase\"","\text{phase{-78.2^circ}}","phase{-78.2^circ}","\"A phantom parser\"","phantom{x}","phantom{x^2}","phantom{x}^2","phantom x","hphantom{x}","hphantom{x^2}","hphantom{x}^2","hphantom x","\"should build a phantom node\"","\"phantom\"","\"A phantom builder\"","mathstrut","\"should make the children transparent\"","phantom{x+1}","\"transparent\"","\"should make all descendants transparent\"","phantom{x+\blue{1}}","\"A smash parser\"","smash{x}","smash{x^2}","smash{x}^2","smash x","smash[b]{x}","smash[b]{x^2}","smash[b]{x}^2","smash[b] x","smash[]{x}","smash[]{x^2}","smash[]{x}^2","smash[] x","\"should build a smash node\"","\"smash\"","\"A smash builder\"","\"A parser error\"","\"should report the position of an error\"","parseTree","sqrt}","e","position","\"An optional argument parser\"","\frac[1]{2}{3}","\rule[0.2em]{1em}{1em}","\"should work with sqrts with optional arguments\"","sqrt[3]{2}","\"should work when the optional argument is missing\"","sqrt{2}","\"should fail when the optional argument is malformed\"","\rule[1]{2em}{3em}","\"should not work if the optional argument isn't closed\"","sqrt[","\"An array environment\"","\"should accept a single alignment character\"","\begin{array}r1\\20end{array}","\"array\"","\"should accept vertical separators\"","\begin{array}{|l||c:r::}end{array}","\"separator\"","separator","\"|\"","\"l\"","\":\"","\"A subarray environment\"","\"should accept only a single alignment character\"","\begin{subarray}{c}a \\ bend{subarray}","\begin{subarray}{cc}a \\ bend{subarray}","\begin{subarray}{c}a & b \\ c & dend{subarray}","\"A substack function\"","\"should build\"","sum_{substack{ 0<i<m \\ 0<j<n }}  P(i,j)","\"should accommodate spaces in the argument\"","\"should accommodate macros in the argument\"","sum_{substack{ 0<i<\u000barPi \\ 0<j<pi }}  P(i,j)","\"should accommodate an empty argument\"","sum_{substack{}}  P(i,j)","\"A smallmatrix environment\"","\begin{smallmatrix} a & b \\ c & d end{smallmatrix}","\"A cases environment\"","\"should parse its input\"","f(a,b)=\begin{cases}a+1&\text{if }b\text{ is odd}\\a&\text{if }b=0\\a-1&\text{otherwise}end{cases}","\"An rcases environment\"","\begin{rcases} a &\text{if } b \\ c &\text{if } d end{rcases}⇒…","\"An aligned environment\"","\begin{aligned}a&=b&c&=d\\e&=fend{aligned}","\"should allow cells in brackets\"","\begin{aligned}[a]&[b]\\ [c]&[d]end{aligned}","\"should forbid cells in brackets without space\"","\begin{aligned}[a]&[b]\\[c]&[d]end{aligned}","\"should not eat the last row when its first cell is empty\"","ae","\begin{aligned}&E_1 & (1)\\&E_2 & (2)\\&E_3 & (3)end{aligned}","\"AMS environments\"","\"should fail outside display mode\"","\begin{gather}a+b\\c+dend{gather}","\begin{gather*}a+b\\c+dend{gather*}","\begin{align}a&=b+c\\d+e&=fend{align}","\begin{align*}a&=b+c\\d+e&=fend{align*}","\begin{alignat}{2}10&x+ &3&y = 2\\3&x+&13&y = 4end{alignat}","\begin{alignat*}{2}10&x+ &3&y = 2\\3&x+&13&y = 4end{alignat*}","\begin{equation}a=b+cend{equation}","\begin{split}a &=b+c\\&=e+fend{split}","\begin{CD}A @>a>> B \\@VbVV @AAcA\\C @= Dend{CD}","displayMode","\"should build if in display mode\"","\begin{equation}\begin{split}a &=b+c\\&=e+fend{split}end{equation}","\begin{CD}A @<a<< B @>>b> C @>>> D\\@. @| @AcAA @VVdV \\@. E @= F @>>> Gend{CD}","\"should build an empty environment\"","\begin{gather}end{gather}","\begin{gather*}end{gather*}","\begin{align}end{align}","\begin{align*}end{align*}","\begin{alignat}{2}end{alignat}","\begin{alignat*}{2}end{alignat*}","\begin{equation}end{equation}","\begin{split}end{split}","\begin{CD}end{CD}","\"{equation} should fail if argument contains two rows.\"","\begin{equation}a=cr b+cend{equation}","\"{equation} should fail if argument contains two columns.\"","\begin{equation}a &=b+cend{equation}","\"{split} should fail if argument contains three columns.\"","\begin{equation}\begin{split}a &=b &+c\\&=e &+fend{split}end{equation}","\"{array} should fail if body contains more columns than specification.\"","\begin{array}{2}a & b & c\\d & e  fend{array}","\"The CD environment\"","\"should fail if not is display mode\"","\\begin{CD}A @<a<< B @>>b> C @>>> D\\\\@. @| @AcAA @VVdV \\\\@. E @= F @>>> G\\end{CD}","displaySettings","\"should fail if the character after '@' is not in <>AV=|.\"","\\begin{CD}A @X<a<< B @>>b> C @>>> D\\\\@. @| @AcAA @VVdV \\\\@. E @= F @>>> G\\end{CD}","\"should fail if an arrow does not have its final character.\"","\\begin{CD}A @<a< B @>>b> C @>>> D\\\\@. @| @AcAA @VVdV \\\\@. E @= F @>>> G\\end{CD}","\\begin{CD}A @<a<< B @>>b C @>>> D\\\\@. @| @AcAA @VVdV \\\\@. E @= F @>>> G\\end{CD}","\"should fail without an \\\\end.\"","\\begin{CD}A @<a<< B @>>b> C @>>> D\\\\@. @| @AcAA @VVdV \\\\@. E @= F @>>> G","\"should succeed without the flaws noted above.\"","\"operatorname support\"","operatorname{x*Π∑Pisum\frac a b}","operatorname*{x*Π∑Pisum\frac a b}","operatorname*{x*Π∑Pisum\frac a b}_y x","operatorname*{x*Π∑Pisum\frac a b}limits_y x","operatorname{sn}limits_{b>c}(b+c)","\"href and url commands\"","href{http://example.com/}{sin}","\"should allow empty URLs\"","href{}{example here}","\"should allow single-character URLs\"","href%end","\"\\href{%}end\"","\"\\url{%}end\"","\"\\url%%end\n\"","\"\\url{%}\"","\"\\url{e}nd\"","\"\\url {%}end\"","\"should allow spaces single-character URLs\"","href %end","\"should allow letters [#$%&~_^] without escaping\"","url","\"http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz\"","parsed1","\\href{","}{\\alpha}","href","parsed2","\\url{","\"should allow balanced braces in url\"","\"http://example.org/{{}t{oo}}\"","\"should not allow unbalanced brace(s) in url\"","href{http://example.com/{a}{bar}","href{http://example.com/}a}{bar}","\"should allow escape for letters [#$%&~_^{}]\"","\"http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz\"","input","/([#$%&~_^{}])/g","\"\\$1\"","\"should allow comments after URLs\"","\"\\url{http://example.com/}%comment\n\"","\"should be marked up correctly\"","href{http://example.com/}{example here}","\"<a href=\"http://example.com/\">\"","\"should not affect spacing around\"","\"a\\href{http://example.com/}{+b}\"","\"should forbid relative URLs when trust option is false\"","href{relative}{foo}","\"should allow explicitly allowed protocols\"","\"\\href{ftp://x}{foo}\"","context","protocol","\"ftp\"","\"should allow all protocols when trust option is true\"","\"should not allow explicitly disallowed protocols\"","\"\\href{javascript:alert('x')}{foo}\"","\"javascript\"","\"should not allow explicitly uppercased disallowed protocols\"","\"\\href{JavaScript:alert('x')}{foo}\"","getProtocolViaTrust","\"should get protocols correctly\"","\"_relative\"","\"Foo:\"","\"Foo:bar\"","\"JavaScript:\"","\"JavaScript:code\"","\"!:\"","\"foo&colon;\"","\"?query=string&colon=\"","\"#query=string&colon=\"","\"dir/file&colon\"","\"//foo\"","\"://foo\"","\"  \t http://\"","\"http\"","\"  \t http://foo\"","\"A raw text parser\"","\"should return null for a omitted optional string\"","includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}","\"A parser that does not throw on unsupported commands\"","errorColor","\"#933\"","noThrowSettings","throwOnError","\"should still parse on unrecognized control sequences\"","\"should allow unrecognized controls sequences anywhere, including\"","\"in superscripts and subscripts\"","2_error","3^{error}_error","int\nolimits^error_error","\"in fractions\"","\frac{345}{error}","\fracerror{error}","\"in square roots\"","sqrterror","sqrt{234error}","\"in text boxes\"","\text{error}","\"should produce color nodes with a color value given by errorColor\"","\"should build katex-error span for other type of KaTeX error\"","2^2^2","\"should properly escape LaTeX in errors\"","2^&\"<>","\"ParseError properties\"","\"should contain affected position and length information\"","\"1 + \\fraq{}{}\"","\"KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}\"","\"Undefined control sequence: \\fraq\"","\"should contain position and length information at end of input\"","\"\\frac{}\"","\"KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}\"","\"Unexpected end of input in a macro argument, expected '}'\"","7","\"should contain no position and length information if unavailable\"","\"\\verb|hello\nworld|\"","\"KaTeX parse error: \\verb ended by end of line instead of matching delimiter\"","\"\\verb ended by end of line instead of matching delimiter\"","\"The symbol table integrity\"","\"should treat certain symbols as synonyms\"","<","lt",">","gt","left<\frac{1}{x}\right>","leftlt\frac{1}{x}\rightgt","\"Symbols\"","\"should support AMS symbols in both text and math mode\"","symbols","yencheckmarkcircledRmaltese","\\text{","\"A macro expander\"","\"should produce individual tokens\"","e^\foo","\"e^1 23\"","\"should preserve leading spaces inside macro definition\"","\text{\foo}","\text{ x}","\" x\"","\"should preserve leading spaces inside macro argument\"","\text{\foo{ x}}","\"#1\"","\"should ignore expanded spaces in math mode\"","\foo","\"x\"","\"should consume spaces after control-word macro\"","\text{\foo }","\text{x}","\"should consume spaces after macro with \\relax\"","\text{}","\"\\relax\"","\"should not consume spaces after control-word expansion\"","\text{\\ }","\"\\\\\"","\"should consume spaces after \\relax\"","\text{\relax }","\"should consume spaces after control-word function\"","\text{KaTeX }","\text{KaTeX}","\"should preserve spaces after control-symbol macro\"","\text{% y}","\text{x y}","\"\\%\"","\"should preserve spaces after control-symbol function\"","\text{' }","\"should consume spaces between arguments\"","\text{\foo 1 2}","\text{12end}","\"#1#2end\"","\text{\foo {1} {2}}","\"should allow for multiple expansion\"","1\foo2","\"1aa2\"","\"\\bar\\bar\"","\"\\bar\"","\"should allow for multiple expansion with argument\"","\"12222\"","\"\\bar{#1}\\bar{#1}\"","\"#1#1\"","\"should allow for macro argument\"","\foo\bar","\"(xyz)\"","\"(#1)\"","\"xyz\"","\"should allow properly nested group for macro argument\"","\foo{e^{x_{12}+3}}","\"(e^{x_{12}+3})\"","\"should delay expansion if preceded by \\expandafter\"","expandafter\foo\bar","\"x+y\"","\"#1+#2\"","def\foo{x}def\bar{def\foo{y}}expandafter\bar\foo","expandafter\foodef\foo{x}","\"should not expand if preceded by \\noexpand\"","\noexpand\foo y","\"y\"","expandafter\foo\noexpand\foo","\noexpand\frac xy","xy","\noexpanddef\foo{xy}\foo","\"should allow for space macro argument (text version)\"","\text{\foo\bar}","\text{( )}","\"should allow for space macro argument (math version)\"","\"()\"","\"should allow for space second argument (text version)\"","\text{\foo\bar\bar}","\text{( , )}","\"(#1,#2)\"","\"should treat \\relax as empty argument\"","\text{\foo\relax x}","\text{(,x)}","\"should allow for space second argument (math version)\"","\foo\bar\bar","\"(,)\"","\"should allow for empty macro argument\"","\"should allow for space function arguments\"","\frac\bar\bar","\frac{}{}","\"should build \\overset and \\underset\"","overset{f}{\rightarrow} Y","\"should build \\iff, \\implies, \\impliedby\"","X iff Y","X implies Y","X impliedby Y","\"should allow aliasing characters\"","x’=c","\"x'=c\"","\"’\"","\"\\@firstoftwo should consume both, and avoid errors\"","@firstoftwo{yes}{no}","yes","@firstoftwo{yes}{1'_2^3}","\"\\@ifstar should consume star but nothing else\"","@ifstar{yes}{no}*!","yes!","@ifstar{yes}{no}?!","no?!","\"\\@ifnextchar should not consume nonspaces\"","@ifnextchar!{yes}{no}!!","yes!!","@ifnextchar!{yes}{no}?!","\"\\@ifnextchar should consume spaces\"","yesxyesx","\"\\TextOrMath should work immediately\"","TextOrMath{text}{math}","math","\"\\TextOrMath should work after other math\"","x+TextOrMath{text}{math}","x+math","\"\\TextOrMath should work immediately after \\text\"","\text{TextOrMath{text}{math}}","\text{text}","\"\\TextOrMath should work later after \\text\"","\text{hello TextOrMath{text}{math}}","\text{hello text}","\"\\TextOrMath should work immediately after \\text ends\"","\text{TextOrMath{text}{math}}TextOrMath{text}{math}","\text{text}math","\"\\TextOrMath should work immediately after $\"","\text{$TextOrMath{text}{math}$}","\text{$math$}","\"\\TextOrMath should work later after $\"","\text{$x+TextOrMath{text}{math}$}","\text{$x+math$}","\"\\TextOrMath should work immediately after $ ends\"","\text{$TextOrMath{text}{math}$TextOrMath{text}{math}}","\text{$math$text}","\"\\TextOrMath should work in a macro\"","mode\text{mode$mode$mode}mode","math\text{text$math$text}math","\"\\mode\"","\"\\TextOrMath{text}{math}\"","\"\\TextOrMath should work in a macro passed to \\text\"","\textmode","\text t","\"\\TextOrMath{t}{m}\"","\"\\char produces literal characters\"","\"\\char`a\"","\"\\char`\\a\"","\"\\char`\\%\"","char37","char'45","char\"25","\"\\char`\"","char'","char\"","char'a","char\"g","\"\\char escapes ~ correctly\"","parsedBare","~","parsedChar","\"\\char`\\~\"","\"\\char handles >16-bit characters\"","char\"1d7d9","\"𝟙\"","\"should build Unicode private area characters\"","gvertneqqlvertneqq\ngeqq\ngeqslant\nleqq","\nleqslant\nshortmid\nshortparallel\u000barsubsetneq","\u000barsubsetneqq\u000barsupsetneq\u000barsupsetneqq","\"\\gdef defines macros\"","gdef\foo{x^2}\foo+\foo","x^2+x^2","gdef\foo{hi}\foo+\text\foo","hi+\text{hi}","gdef\foo#1{hi #1}\text{\foo{Alice}, \foo{Bob}}","\text{hi Alice, hi Bob}","gdef\foo#1#2{(#1,#2)}\foo 1 2+\foo 3 4","(1,2)+(3,4)","gdef\foo#2{}","gdef\foo#a{}","gdef\foo#1#3{}","gdef\foo#1#2#3#4#5#6#7#8#9{}","gdef\foo#1#2#3#4#5#6#7#8#9#10{}","gdef\foo1","gdef{\foo}{}","gdef\foo\bar","gdef{\foo\bar}{}","gdef{}{}","\"\\gdef defines macros with delimited parameter\"","gdef\foo|#1||{#1}\text{\foo| x y ||}","\text{ x y }","gdef\foo#1|#2{#1+#2}\foo 1 2 |34","12+34","gdef\foo#1#{#1}\foo1^{23}","1^{23}","gdef\foo|{}\foo","gdef\foo#1|{#1}\foo1","gdef\foo#1|{#1}\foo1}|","\"\\xdef should expand definition\"","def\foo{a}Þf\bar{\foo}def\foo{}\bar","a","def\foo{a}Þf\bar{def\noexpand\foo{}}\foo\bar\foo","def\foo{a}Þf\bar{\foo\noexpand\foo}def\foo{b}\bar","ab","Þf\bar{\foo}","\"\\def should be handled in Parser\"","gdef\foo{1}","maxExpand","2^def\foo{1}2","\"\\def works locally\"","1{2{3}2}1","12{34}2","\"\\gdef overrides at all levels\"","1{2{3}3}3","1{2{34}35}3","\"\\global needs to followed by macro prefixes, \\def or \\edef\"","globaldef\foo{}\foo","globaledef\foo{}\foo","defDEF{def}globalDEF\foo{}\foo","globalglobaldef\foo{}\foo","globallongdef\foo{}\foo","global\foo","global\bar x","\"\\long needs to followed by macro prefixes, \\def or \\edef\"","longdef\foo{}\foo","longedef\foo{}\foo","longglobaldef\foo{}\foo","long\foo","\"Macro arguments do not generate groups\"","1122","\"\\textbf arguments do generate groups\"","1\textbf{12}1","\"\\sqrt optional arguments generate groups\"","11sqrt[2]{2}11","\"array cells generate groups\"","\begin{matrix}1&2&1end{matrix}1","\begin{matrix}2&1end{matrix}1","\"\\gdef changes settings.macros\"","\"\\def doesn't change settings.macros\"","def\foo{1}","toBeFalsy","\"\\def doesn't change settings.macros on error\"","def\foo{c^}\foo","\"\\def changes settings.macros with globalGroup\"","\"\\let copies the definition\"","let\foo=\fracdef\frac{}\foo12","def\foo{1}let\bar\foodef\foo{2}\bar","let\foo=kernedef\bar{\foo1em}letkern=\relax\bar","let\foo{sqrt\foo1}","sqrt{1}","letequals==aequals b","a=b","let\foo=x\noexpand\foo","let\foo=xedef\bar{\foo}def\foo{y}\bar","y","\"\\let should consume one optional space after equals sign\"","def:{letspace= }: \text{space}","def\bold{\bgroup\bflet\next= }\bold{a}","\"\\futurelet should parse correctly\"","\futurelet\foo\frac1{2+\foo}","\frac1{2+1}","\"macros argument can simulate \\let\"","int","\"\\int\\limits\"","\"\\Oldint\"","tokens","\"\\int\"","noexpand","numArgs","unexpandable","\"\\limits\"","\"\\newcommand doesn't change settings.macros\"","\newcommand\foo{x^2}\foo+\foo","\"\\newcommand changes settings.macros with globalGroup\"","\"\\newcommand defines new macros\"","\newcommand{\foo}{x^2}\foo+\foo","\newcommand\bar{x^2}\bar+\bar","\newcommand{\bar}{x^2}\bar+\bar","\newcommandlambda{x^2}lambda","\newcommand\textdollar{x^2}\textdollar","\newcommand{\foo}{1}\foo\newcommand{\foo}{2}\foo","\newcommandlimits{}","\"\\renewcommand redefines macros\"","\renewcommand\foo{x^2}\foo+\foo","\renewcommand{\foo}{x^2}\foo+\foo","\renewcommand\bar{x^2}\bar+\bar","\renewcommand{\bar}{x^2}\bar+\bar","\newcommand{\foo}{1}\foo\renewcommand{\foo}{2}\foo","\"\\providecommand defines but does not redefine macros\"","providecommand\foo{x^2}\foo+\foo","providecommand{\foo}{x^2}\foo+\foo","\newcommand{\foo}{1}\fooprovidecommand{\foo}{2}\foo","11","providecommand{\foo}{1}\foo\renewcommand{\foo}{2}\foo","providecommand{\foo}{1}\fooprovidecommand{\foo}{2}\foo","\"\\newcommand is local\"","\newcommand\foo{1}\foo{\renewcommand\foo{2}\foo}\foo","1{2}1","\"\\newcommand accepts number of arguments\"","\newcommand\foo[1]{#1^2}\foo x+\foo{y}","x^2+y^2","\newcommand\foo[10]{#1^2}\foo 0123456789","0^2","\newcommand\foo[x]{}","\newcommand\foo[1.5]{}","\"should treat \\hspace, \\hskip like \\kern\"","hspace{1em}","hskip{1em}","\"should expand \\limsup as expected\"","limsup","operatorname*{lim,sup}","\"should expand \\liminf as expected\"","liminf","operatorname*{lim,inf}","\"should expand AMS log-like symbols as expected\"","injlim","operatorname*{inj,lim}","projlim","operatorname*{proj,lim}","\u000barlimsup","operatorname*{overline{lim}}","\u000barliminf","\u000barinjlim","\u000barprojlim","\"should expand \\plim as expected\"","plim","mathop{operatorname{plim}}limits","\"should expand \\argmin as expected\"","argmin","operatorname*{arg,min}","\"should expand \\argmax as expected\"","argmax","operatorname*{arg,max}","\"should expand \\bra as expected\"","\bra{phi}","mathinner{langle{phi}|}","\"should expand \\ket as expected\"","ket{psi}","mathinner{|{psi}\rangle}","\"should expand \\braket as expected\"","\braket{phi|psi}","mathinner{langle{phi|psi}\rangle}","\"should expand \\Bra as expected\"","Bra{phi}","leftlanglephi\right|","\"should expand \\Ket as expected\"","Ket{psi}","left|psi\right\rangle","\"should expand \\Braket as expected\"","Braket{ ϕ | \frac{∂^2}{∂ t^2} | ψ }","leftlangle ϕ,middle\u000bert,\frac{∂^2}{∂ t^2},middle\u000bert, ψ\right\rangle","\"should expand \\set as expected\"","set{x|x<5|S|}","{,xmid x<5|S|,}","set{x||x<5|S|}","{,xmid |x<5|S|,}","{,x|x<5mid S|,}","\"should expand \\Set as expected\"","Set{ x | x<\frac 1 2 |S| }","left{: x;middle\u000bert; x<\frac 1 2 |S| :\right}","Set{ x || x<\frac 1 2 |S| }","left{: x;middleVert; x<\frac 1 2 |S| :\right}","\"\\tag support\"","\tag{hi}x+y","\"should fail with multiple tags\"","\tag{1}\tag{2}x+y","\"should fail with multiple tags in one row\"","\begin{align}\tag{1}x+y\tag{2}end{align}","\"should work with one tag per row\"","\begin{align}\tag{1}x\\&+y\tag{2}end{align}","\"should work with \\nonumber/\\notag\"","\begin{align}\tag{1}\nonumber x\\&+y\notagend{align}","\begin{align}\tag{1}x\\&+y\nonumberend{align}","\"should ignore location of \\tag\"","x+y\tag{hi}","\"should handle \\tag* like \\tag\"","\tag*{({hi})}x+y","\"leqno and fleqn rendering options\"","expr","opt","\"leqno\"","\"fleqn\"","should not add "," class by default","settings","__renderToDomTree"," class when false","should add "," class when true","\"\\@binrel automatic bin/rel/ord\"","\"should generate proper class\"","L@binrel+xR","Lmathbin xR","L@binrel=xR","Lmathrel xR","L@binrel xxR","Lmathord xR","L@binrel{+}{x}R","Lmathbin{x}R","L@binrel{=}{x}R","Lmathrel{x}R","L@binrel{x}{x}R","Lmathord{x}R","\"should base on just first character in group\"","L@binrel{+x}xR","L@binrel{=x}xR","L@binrel{xx}xR","\"A parser taking String objects\"","\"should not fail on an empty String object\"","\"should parse the same as a regular string\"","\"Unicode accents\"","\"should parse Latin-1 letters in math mode\"","ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ","grave Aacute Ahat A\tilde Addot Amathring A","grave Eacute Ehat Eddot E","grave Iacute Ihat Iddot I","\tilde N","grave Oacute Ohat O\tilde Oddot O","grave Uacute Uhat Uddot U","acute Y","grave aacute ahat a\tilde addot amathring a","grave eacute ehat eddot e","grave ıacute ıhat ıddot ı","\tilde n","grave oacute ohat o\tilde oddot o","grave uacute uhat uddot u","acute yddot y","\"should parse Latin-1 letters in text mode\"","\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}","\text{`A'A^A~A\"A\r A","`E'E^E\"E","`I'I^I\"I","~N","`O'O^O~O\"O","`U'U^U\"U","'Y","`a'a^a~a\"a\r a","`e'e^e\"e","`ı'ı^ı\"ı","~n","`o'o^o~o\"o","`u'u^u\"u","'y\"y}","\"should support \\aa in text mode\"","\text{aaAA}","\text{\r a\r A}","aa","Aa","\"should parse combining characters\"","\"ÁĆ\"","Áacute C","\"\\text{ÁĆ}\"","\text{Á'C}","\"should parse multi-accented characters\"","ấā́ắ\text{ấā́ắ}","\"should parse accented i's and j's\"","íȷ́","acute ıacute ȷ","\"Unicode\"","\"should parse negated relations\"","∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌","\"should build relations\"","∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌","\"should parse relations\"","⊶⊷","\"should build big operators\"","∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆","\"should build more relations\"","⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋","\"should parse symbols\"","\"£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮·©\"","\"\\text{£¥ℂℍℎ©®️}\"","\"should build Greek capital letters\"","\"ΑΒΕΖΗΙΚΜΝ\"","\"ΟΡΤΧϝ\"","\"should build arrows\"","←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉","\"should build more arrows\"","⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼","\"should build binary operators\"","\"±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞⋅∘∖∙\"","\"should build common ords\"","\"§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵\"","\"should build delimiters\"","\"\\left⌊\\frac{a}{b}\\right⌋\"","\"\\left⌈\\frac{a}{b}\\right⌈\"","\"\\left⟮\\frac{a}{b}\\right⟯\"","\"\\left⟨\\frac{a}{b}\\right⟩\"","\"\\left⎰\\frac{a}{b}\\right⎱\"","┌x┐ └x┘","\"⌜x⌝ ⌞x⌟\"","\"⟦x⟧\"","\"\\llbracket \\rrbracket\"","\"\\lBrace \\rBrace\"","\"should build some surrogate pairs\"","wideCharStr","56424","56580","56684","56632","56476","56736","56788","56840","56944","57294","57314","57324","57334","wideCharText","\"\text{\"","\"}\"","\"The maxSize setting\"","rule","\rule{999em}{999em}","\"should clamp size when set\"","borderRightWidth","\"5em\"","borderTopWidth","\"should not clamp size when not set\"","\"999em\"","\"should make zero-width rules if a negative maxSize is passed\"","\"0em\"","\"The maxExpand setting\"","\"should prevent expansion\"","gdef\foo{1}\foo","\"should prevent infinite loops\"","gdef\foo{\foo}\foo","10","\"should prevent exponential blowup via \\edef\"","edef0{x}edef0{00}edef0{00}edef0{00}edef0{00}","exp32","\n        defa#1{\b{#1}\b{#1}}\n        def\b#1{c{#1}c{#1}}\n        defc#1{d{#1}d{#1}}\n        defd#1{e{#1}e{#1}}\n        defe#1{\f{#1}\f{#1}}\n        def\f#1{#1}\n    ","\"should count correctly\"","example","a{1}","count","8","16","32","\"should count correctly with Unicode sub/superscripts\"","def+{a{1}}x⁺x⁺x⁺x⁺","\"The \\mathchoice function\"","cmd","sum_{k = 0}^{infty} x^k","\"should render as if there is nothing other in display math\"","\\displaystyle\\mathchoice{","}{T}{S}{SS}","\\displaystyle","\"should render as if there is nothing other in text\"","\\mathchoice{D}{","}{S}{SS}","\"should render as if there is nothing other in scriptstyle\"","x_{\\mathchoice{D}{T}{","}{SS}}","x_{","\"should render  as if there is nothing other in scriptscriptstyle\"","x_{y_{\\mathchoice{D}{T}{S}{","}}}","x_{y_{","}}","\"Newlines via \\\\ and \\newline\"","\"should build \\\\ without the optional argument and \\newline the same\"","hello \\ world","hello \newline world","\"should not allow \\newline to scan for an optional size argument\"","hello \newline[w]orld","\"should not allow \\cr at top level\"","hello cr world","\"\\\\ causes newline, even after mrel and mop\"","M = \\ a + \\ b \\ c","/(<span class=\"base\">.*?<\\/span><span class=\"mspace newline\"><\\/span>){3}<span class=\"base\">/","\"should parse \\text{\\i\\j}\"","\text{ij}","\"should parse spacing functions in math or text mode\"","A;B,C\nobreakspace \text{A;B,C\nobreakspace}","\"should build \\minuso\"","\\minuso","\"should render ligature commands like their unicode characters\"","\text{aeAEoeOEoOss}","\text{æÆœŒøØß}","\"strict setting\"","\"should allow unicode text when not strict\"","é","試","\"ignore\"","\"should forbid unicode text when strict\"","\"error\"","\"should warn about unicode text when default\"","toWarn","\"should always allow unicode text in text mode\"","\text{é試}","\"should warn about top-level \\newline in display mode\"","x\\y","\"Internal __* interface\"","latex","rendered","\"__parse renders same as renderToString\"","__parse","buildTree","\"__renderToDomTree renders same as renderToString\"","\"__renderToHTMLTree renders same as renderToString sans MathML\"","__renderToHTMLTree","renderedSansMathML","/<span class=\"katex-mathml\">.*?<\\/span>/","\"Extending katex by new fonts and symbols\"","beforeAll","fontName","\"mockEasternArabicFont\"","9","persianNum","1632","__defineSymbol","\"math\"","arabicNum","1776","\"should throw on rendering new symbols with no font metrics\"","errorMessage","\"Font metrics not found for font: mockEasternArabicFont-Regular.\"","\"۹۹^{۱۱}\"","toThrow","\"should add font metrics to metrics map and render successfully\"","mockMetrics","0.00244140625","0.6875","__setFontMetrics","\"mockEasternArabicFont-Regular\"","۹۹^{۱۱}","\"Add new font class to new extended symbols\"","\"debugging macros\"","\"message\"","\"should print the argument using console.log\"","jest","spyOn","console","\"log\"","mockImplementation","message{Hello, world}","log","toHaveBeenCalledWith","\"Hello, world\"","\"errmessage\"","\"should print the argument using console.error\"","errmessage{Hello, world}","\"should stop the expansion\"","kern2\relax em","\"\\emph\"","\"should toggle italics\"","emph{foo emph{bar}}","\textit{foo \textup{bar}}","\"should toggle italics within text\"","\text{emph{foo emph{bar}}}","\text{\textit{foo \textup{bar}}}","\"should toggle italics within textup\"","\textup{emph{foo emph{bar}}}","\textup{\textit{foo \textup{bar}}}","\"should toggle italics within textit\"","\textit{emph{foo emph{bar}}}","\textit{\textup{foo \textit{bar}}}"]},"operators":{"distinct":31,"total":8634,"identifiers":["const","=","new","{}",":",".","()","function","``","for","let","<","++ (postfix)","[]","if","===","else","+","function=>","- (prefix)",",","forof","${}","try","catch","!==","return","+=","-","*","<="]}},"paramCount":6,"sloc":{"logical":5523,"physical":4314}},"settings":{"commonjs":false,"esmImportExport":{"halstead":false,"lloc":false},"forin":false,"logicalor":true,"switchcase":true,"templateExpression":{"halstead":true,"lloc":true},"trycatch":false,"newmi":false},"classes":[],"dependencies":[{"line":3,"path":"../src/buildMathML","type":"esm"},{"line":4,"path":"../src/buildTree","type":"esm"},{"line":5,"path":"../katex","type":"esm"},{"line":6,"path":"../src/parseTree","type":"esm"},{"line":7,"path":"../src/Options","type":"esm"},{"line":8,"path":"../src/ParseError","type":"esm"},{"line":9,"path":"../src/Settings","type":"esm"},{"line":10,"path":"../src/Style","type":"esm"},{"line":14,"path":"./helpers","type":"esm"}],"errors":[],"lineEnd":4314,"lineStart":1,"maintainability":104.197,"methods":[{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["it","\"should not fail on an empty string\"","\"should ignore whitespace\"","\"should ignore whitespace in atom\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":13},"errors":[],"lineEnd":34,"lineStart":22,"name":"<anon method-1>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","toParse","strictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":25,"lineStart":23,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.008,"difficulty":1.5,"effort":36,"length":8,"time":2,"vocabulary":8,"volume":24,"operands":{"distinct":5,"total":5,"identifiers":["expect","    x    y    ","toParseLike","\"xy\"","strictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":29,"lineStart":27,"name":"<anon method-3>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.008,"difficulty":1.5,"effort":36,"length":8,"time":2,"vocabulary":8,"volume":24,"operands":{"distinct":5,"total":5,"identifiers":["expect","    x   ^ y    ","toParseLike","\"x^y\"","strictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":33,"lineStart":31,"name":"<anon method-4>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.018,"difficulty":2.667,"effort":141.736,"length":16,"time":7.874,"vocabulary":10,"volume":53.151,"operands":{"distinct":6,"total":8,"identifiers":["expression","\"1234|/@.\"`abcdefgzABCDEFGZ\"","it","\"should not fail\"","\"should build a list of ords\"","\"should parse the right number of ords\""]},"operators":{"distinct":4,"total":8,"identifiers":["const","=","()","function"]}},"paramCount":0,"sloc":{"logical":7,"physical":22},"errors":[],"lineEnd":57,"lineStart":36,"name":"<anon method-5>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","expression","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":41,"lineStart":39,"name":"<anon method-6>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":33.333,"halstead":{"bugs":0.048,"difficulty":6.955,"effort":991.882,"length":33,"time":55.105,"vocabulary":20,"volume":142.624,"operands":{"distinct":11,"total":17,"identifiers":["parse","getParsed","expression","i","0","length","group","expect","type","toMatch","\"ord\""]},"operators":{"distinct":9,"total":16,"identifiers":["const","=","()","for","let","<",".","++ (postfix)","[]"]}},"paramCount":0,"sloc":{"logical":6,"physical":8},"errors":[],"lineEnd":50,"lineStart":43,"name":"<anon method-7>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.017,"difficulty":2.667,"effort":132.877,"length":15,"time":7.382,"vocabulary":10,"volume":49.829,"operands":{"distinct":6,"total":8,"identifiers":["parse","getParsed","expression","expect","toHaveLength","length"]},"operators":{"distinct":4,"total":7,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":56,"lineStart":52,"name":"<anon method-8>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.016,"difficulty":2.917,"effort":141.26,"length":14,"time":7.848,"vocabulary":11,"volume":48.432,"operands":{"distinct":6,"total":7,"identifiers":["expression","r","+-*cdotpmdiv","it","\"should not fail\"","\"should build a list of bins\""]},"operators":{"distinct":5,"total":7,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":17},"errors":[],"lineEnd":75,"lineStart":59,"name":"<anon method-9>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","expression","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":64,"lineStart":62,"name":"<anon method-10>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":25,"halstead":{"bugs":0.062,"difficulty":7.615,"effort":1426.332,"length":42,"time":79.241,"vocabulary":22,"volume":187.296,"operands":{"distinct":13,"total":22,"identifiers":["parse","getParsed","expression","i","0","length","group","expect","type","toEqual","\"atom\"","family","\"bin\""]},"operators":{"distinct":9,"total":20,"identifiers":["const","=","()","for","let","<",".","++ (postfix)","[]"]}},"paramCount":0,"sloc":{"logical":8,"physical":9},"errors":[],"lineEnd":74,"lineStart":66,"name":"<anon method-11>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.025,"difficulty":3.125,"effort":231.277,"length":20,"time":12.849,"vocabulary":13,"volume":74.009,"operands":{"distinct":8,"total":10,"identifiers":["expression","r","=<>leqgeq\neq\nleq\ngeqcong","notExpression","\not=\not<\not>\notleq\notgeq\notin","it","\"should not fail\"","\"should build a list of rels\""]},"operators":{"distinct":5,"total":10,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":8,"physical":27},"errors":[],"lineEnd":103,"lineStart":77,"name":"<anon method-12>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["expect","expression","toParse","notExpression"]},"operators":{"distinct":2,"total":6,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":84,"lineStart":81,"name":"<anon method-13>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":4,"cyclomaticDensity":25,"halstead":{"bugs":0.133,"difficulty":12.6,"effort":5040,"length":80,"time":280,"vocabulary":32,"volume":400,"operands":{"distinct":20,"total":42,"identifiers":["parse","getParsed","expression","i","0","length","group","type","\"htmlmathml\"","expect","html","toHaveLength","1","\"mclass\"","mclass","toEqual","\"mrel\"","\"atom\"","family","\"rel\""]},"operators":{"distinct":12,"total":38,"identifiers":["const","=","()","for","let","<",".","++ (postfix)","[]","if","===","else"]}},"paramCount":0,"sloc":{"logical":16,"physical":17},"errors":[],"lineEnd":102,"lineStart":86,"name":"<anon method-14>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should return one group, not a fragment\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":12},"errors":[],"lineEnd":116,"lineStart":105,"name":"<anon method-15>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","mathinner{langle{psi}\rangle}","toParse","\frac 1 {mathinner{langle{psi}\rangle}}"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":109,"lineStart":106,"name":"<anon method-16>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.033,"difficulty":2.545,"effort":248.62,"length":25,"time":13.812,"vocabulary":15,"volume":97.672,"operands":{"distinct":11,"total":14,"identifiers":["contents","\"\\mathinner{\\langle{\\psi}\\rangle}\"","mml","buildMathML","getParsed","defaultOptions","expect","children","length","toEqual","1"]},"operators":{"distinct":4,"total":11,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":115,"lineStart":111,"name":"<anon method-17>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.013,"difficulty":2.4,"effort":91.294,"length":12,"time":5.072,"vocabulary":9,"volume":38.039,"operands":{"distinct":5,"total":6,"identifiers":["expression","\",;\"","it","\"should not fail\"","\"should build a list of puncts\""]},"operators":{"distinct":4,"total":6,"identifiers":["const","=","()","function"]}},"paramCount":0,"sloc":{"logical":5,"physical":17},"errors":[],"lineEnd":134,"lineStart":118,"name":"<anon method-18>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","expression","toParse","strictSettings"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":123,"lineStart":121,"name":"<anon method-19>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":25,"halstead":{"bugs":0.062,"difficulty":7.615,"effort":1426.332,"length":42,"time":79.241,"vocabulary":22,"volume":187.296,"operands":{"distinct":13,"total":22,"identifiers":["parse","getParsed","expression","i","0","length","group","expect","type","toEqual","\"atom\"","family","\"punct\""]},"operators":{"distinct":9,"total":20,"identifiers":["const","=","()","for","let","<",".","++ (postfix)","[]"]}},"paramCount":0,"sloc":{"logical":8,"physical":9},"errors":[],"lineEnd":133,"lineStart":125,"name":"<anon method-20>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.013,"difficulty":2.4,"effort":91.294,"length":12,"time":5.072,"vocabulary":9,"volume":38.039,"operands":{"distinct":5,"total":6,"identifiers":["expression","\"([\"","it","\"should not fail\"","\"should build a list of opens\""]},"operators":{"distinct":4,"total":6,"identifiers":["const","=","()","function"]}},"paramCount":0,"sloc":{"logical":5,"physical":17},"errors":[],"lineEnd":152,"lineStart":136,"name":"<anon method-21>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","expression","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":141,"lineStart":139,"name":"<anon method-22>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":25,"halstead":{"bugs":0.062,"difficulty":7.615,"effort":1426.332,"length":42,"time":79.241,"vocabulary":22,"volume":187.296,"operands":{"distinct":13,"total":22,"identifiers":["parse","getParsed","expression","i","0","length","group","expect","type","toEqual","\"atom\"","family","\"open\""]},"operators":{"distinct":9,"total":20,"identifiers":["const","=","()","for","let","<",".","++ (postfix)","[]"]}},"paramCount":0,"sloc":{"logical":8,"physical":9},"errors":[],"lineEnd":151,"lineStart":143,"name":"<anon method-23>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.013,"difficulty":2.4,"effort":91.294,"length":12,"time":5.072,"vocabulary":9,"volume":38.039,"operands":{"distinct":5,"total":6,"identifiers":["expression","\")]?!\"","it","\"should not fail\"","\"should build a list of closes\""]},"operators":{"distinct":4,"total":6,"identifiers":["const","=","()","function"]}},"paramCount":0,"sloc":{"logical":5,"physical":17},"errors":[],"lineEnd":170,"lineStart":154,"name":"<anon method-24>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","expression","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":159,"lineStart":157,"name":"<anon method-25>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":25,"halstead":{"bugs":0.062,"difficulty":7.615,"effort":1426.332,"length":42,"time":79.241,"vocabulary":22,"volume":187.296,"operands":{"distinct":13,"total":22,"identifiers":["parse","getParsed","expression","i","0","length","group","expect","type","toEqual","\"atom\"","family","\"close\""]},"operators":{"distinct":9,"total":20,"identifiers":["const","=","()","for","let","<",".","++ (postfix)","[]"]}},"paramCount":0,"sloc":{"logical":8,"physical":9},"errors":[],"lineEnd":169,"lineStart":161,"name":"<anon method-26>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should not fail\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":176,"lineStart":172,"name":"<anon method-27>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","KaTeX","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":175,"lineStart":173,"name":"<anon method-28>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.333,"halstead":{"bugs":0.083,"difficulty":1.875,"effort":469.117,"length":60,"time":26.062,"vocabulary":18,"volume":250.196,"operands":{"distinct":16,"total":30,"identifiers":["it","\"should not fail on superscripts\"","\"should not fail on subscripts\"","\"should not fail on both subscripts and superscripts\"","\"should not fail when there is no nucleus\"","\"should produce supsubs for superscript\"","\"should produce supsubs for subscript\"","\"should produce supsubs for ^_\"","\"should produce supsubs for _^\"","\"should produce the same thing regardless of order\"","\"should not parse double subscripts or superscripts\"","\"should work correctly with {}s\"","\"should work with nested super/subscripts\"","\"should work with Unicode (sub|super)script characters\"","\"should not fail if \\relax is in an atom\"","\"should skip \\relax in super/subscripts\""]},"operators":{"distinct":2,"total":30,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":30,"physical":115},"errors":[],"lineEnd":292,"lineStart":178,"name":"<anon method-29>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","x^2","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":181,"lineStart":179,"name":"<anon method-30>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","x_3","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":185,"lineStart":183,"name":"<anon method-31>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","x^2_3","toParse","x_2^3"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":191,"lineStart":187,"name":"<anon method-32>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.033,"difficulty":3.214,"effort":320.329,"length":30,"time":17.796,"vocabulary":10,"volume":99.658,"operands":{"distinct":7,"total":15,"identifiers":["expect","^3","toParse","^3+","_2","^3_2","_2^3"]},"operators":{"distinct":3,"total":15,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":199,"lineStart":193,"name":"<anon method-33>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.058,"difficulty":4.846,"effort":844.031,"length":41,"time":46.891,"vocabulary":19,"volume":174.165,"operands":{"distinct":13,"total":21,"identifiers":["parse","getParsed","x^2","0","expect","type","toBe","\"supsub\"","base","toBeDefined","sup","sub","toBeUndefined"]},"operators":{"distinct":6,"total":20,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":10,"physical":8},"errors":[],"lineEnd":208,"lineStart":201,"name":"<anon method-34>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.058,"difficulty":4.846,"effort":844.031,"length":41,"time":46.891,"vocabulary":19,"volume":174.165,"operands":{"distinct":13,"total":21,"identifiers":["parse","getParsed","x_3","0","expect","type","toBe","\"supsub\"","base","toBeDefined","sub","sup","toBeUndefined"]},"operators":{"distinct":6,"total":20,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":10,"physical":8},"errors":[],"lineEnd":217,"lineStart":210,"name":"<anon method-35>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.057,"difficulty":5.25,"effort":897.576,"length":41,"time":49.865,"vocabulary":18,"volume":170.967,"operands":{"distinct":12,"total":21,"identifiers":["parse","getParsed","x^2_3","0","expect","type","toBe","\"supsub\"","base","toBeDefined","sup","sub"]},"operators":{"distinct":6,"total":20,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":10,"physical":8},"errors":[],"lineEnd":226,"lineStart":219,"name":"<anon method-36>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.057,"difficulty":5.25,"effort":897.576,"length":41,"time":49.865,"vocabulary":18,"volume":170.967,"operands":{"distinct":12,"total":21,"identifiers":["parse","getParsed","x_3^2","0","expect","type","toBe","\"supsub\"","base","toBeDefined","sup","sub"]},"operators":{"distinct":6,"total":20,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":10,"physical":8},"errors":[],"lineEnd":235,"lineStart":228,"name":"<anon method-37>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","x^2_3","toParseLike","x_3^2"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":239,"lineStart":237,"name":"<anon method-38>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.057,"difficulty":4,"effort":688.313,"length":48,"time":38.24,"vocabulary":12,"volume":172.078,"operands":{"distinct":9,"total":24,"identifiers":["expect","x^x^x","not","toParse","x_x_x","x_x^x_x","x_x^x^x","x^x_x_x","x^x_x^x"]},"operators":{"distinct":3,"total":24,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":12,"physical":13},"errors":[],"lineEnd":253,"lineStart":241,"name":"<anon method-39>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.059,"difficulty":3.6,"effort":639.436,"length":48,"time":35.524,"vocabulary":13,"volume":177.621,"operands":{"distinct":10,"total":24,"identifiers":["expect","x^{2+3}","toParse","x_{3-2}","x^{2+3}_3","x^2_{3-2}","x^{2+3}_{3-2}","x_{3-2}^{2+3}","x_3^{2+3}","x_{3-2}^2"]},"operators":{"distinct":3,"total":24,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":16,"physical":17},"errors":[],"lineEnd":271,"lineStart":255,"name":"<anon method-40>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.025,"difficulty":3,"effort":228.235,"length":24,"time":12.68,"vocabulary":9,"volume":76.078,"operands":{"distinct":6,"total":12,"identifiers":["expect","x^{x^x}","toParse","x^{x_x}","x_{x^x}","x_{x_x}"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":278,"lineStart":273,"name":"<anon method-41>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","A² + B²⁺³ + ¹²C + E₂³ + F₂₊₃","toParseLike","A^{2} + B^{2+3} + ^{12}C + E_{2}^{3} + F_{2+3}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":282,"lineStart":280,"name":"<anon method-42>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","hskip1em\relax^2","toParse","strictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":286,"lineStart":284,"name":"<anon method-43>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.014,"difficulty":1.333,"effort":56,"length":14,"time":3.111,"vocabulary":8,"volume":42,"operands":{"distinct":6,"total":8,"identifiers":["expect","x^\relax 2","toParseLike","x^2","x_\relax 2","x_2"]},"operators":{"distinct":2,"total":6,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":4},"errors":[],"lineEnd":291,"lineStart":288,"name":"<anon method-44>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should not fail when there is no nucleus\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":8},"errors":[],"lineEnd":301,"lineStart":294,"name":"<anon method-45>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.025,"difficulty":3,"effort":228.235,"length":24,"time":12.68,"vocabulary":9,"volume":76.078,"operands":{"distinct":6,"total":12,"identifiers":["expect","^3","toBuild","_2","^3_2","_2^3"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":300,"lineStart":295,"name":"<anon method-46>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.024,"difficulty":2.357,"effort":172.266,"length":22,"time":9.57,"vocabulary":10,"volume":73.082,"operands":{"distinct":7,"total":11,"identifiers":["it","\"should fail when the limit control is not preceded by an op node\"","\"should parse when the limit control directly follows an op node\"","\"should parse when the limit control is in the sup/sub area of an op node\"","\"should allow multiple limit controls in the sup/sub area of an op node\"","\"should have the rightmost limit control determine the limits property \"","\"of the preceding op node\""]},"operators":{"distinct":3,"total":11,"identifiers":["()","function","+"]}},"paramCount":0,"sloc":{"logical":10,"physical":34},"errors":[],"lineEnd":336,"lineStart":303,"name":"<anon method-47>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.025,"difficulty":3,"effort":228.235,"length":24,"time":12.68,"vocabulary":9,"volume":76.078,"operands":{"distinct":6,"total":12,"identifiers":["expect","3\nolimits_2^2","not","toParse","sqrtlimits_2^2","45 +\nolimits 45"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":308,"lineStart":304,"name":"<anon method-48>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","intlimits_2^2 3","toParse","sum\nolimits_3^4 4"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":313,"lineStart":310,"name":"<anon method-49>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.018,"difficulty":2.7,"effort":145.8,"length":18,"time":8.1,"vocabulary":8,"volume":54,"operands":{"distinct":5,"total":9,"identifiers":["expect","int_2^2limits","toParse","int^2\nolimits_2","int_2limits^2"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":319,"lineStart":315,"name":"<anon method-50>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.018,"difficulty":2.7,"effort":145.8,"length":18,"time":8.1,"vocabulary":8,"volume":54,"operands":{"distinct":5,"total":9,"identifiers":["expect","int_2\nolimits^2limits 3","toParse","int\nolimitslimits_2^2","intlimitslimitslimits_2^2"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":325,"lineStart":321,"name":"<anon method-51>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.05,"difficulty":5.455,"effort":824.924,"length":37,"time":45.829,"vocabulary":17,"volume":151.236,"operands":{"distinct":11,"total":20,"identifiers":["parsedInput","getParsed","int\nolimitslimits_2^2","expect","0","base","limits","toBe","true","intlimits_2\nolimits^2","false"]},"operators":{"distinct":6,"total":17,"identifiers":["let","=","``","()",".","[]"]}},"paramCount":0,"sloc":{"logical":8,"physical":8},"errors":[],"lineEnd":335,"lineStart":328,"name":"<anon method-52>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should produce a single ord\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":16},"errors":[],"lineEnd":353,"lineStart":338,"name":"<anon method-53>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","{xy}","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":341,"lineStart":339,"name":"<anon method-54>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.051,"difficulty":4.385,"effort":670.519,"length":36,"time":37.251,"vocabulary":19,"volume":152.925,"operands":{"distinct":13,"total":19,"identifiers":["parse","getParsed","{xy}","expect","toHaveLength","1","ord","0","type","toMatch","\"ord\"","body","toBeTruthy"]},"operators":{"distinct":6,"total":17,"identifiers":["const","=","``","()",".","[]"]}},"paramCount":0,"sloc":{"logical":9,"physical":10},"errors":[],"lineEnd":352,"lineStart":343,"name":"<anon method-55>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["it","\"should not fail\"","\"should fail when it is mismatched\"","\"should produce a semi-simple group\"","\"should not affect spacing in math mode\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":8,"physical":26},"errors":[],"lineEnd":380,"lineStart":355,"name":"<anon method-56>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\begingroup xy endgroup","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":358,"lineStart":356,"name":"<anon method-57>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.4,"effort":115.2,"length":16,"time":6.4,"vocabulary":8,"volume":48,"operands":{"distinct":5,"total":8,"identifiers":["expect","\begingroup xy","not","toParse","\begingroup xy }"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":363,"lineStart":360,"name":"<anon method-58>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":9.091,"halstead":{"bugs":0.063,"difficulty":4.929,"effort":937.241,"length":44,"time":52.069,"vocabulary":20,"volume":190.165,"operands":{"distinct":14,"total":23,"identifiers":["parse","getParsed","\begingroup xy endgroup","expect","toHaveLength","1","ord","0","type","toMatch","\"ord\"","body","toBeTruthy","semisimple"]},"operators":{"distinct":6,"total":21,"identifiers":["const","=","``","()",".","[]"]}},"paramCount":0,"sloc":{"logical":11,"physical":11},"errors":[],"lineEnd":375,"lineStart":365,"name":"<anon method-59>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\begingroup x+ endgroup y","toBuildLike","x+y"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":379,"lineStart":377,"name":"<anon method-60>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.022,"difficulty":2.143,"effort":142.368,"length":20,"time":7.909,"vocabulary":10,"volume":66.439,"operands":{"distinct":7,"total":10,"identifiers":["it","\"should not fail\"","\"should produce a single object\"","\"should apply only after the function\"","\"should stop at the ends of groups\"","describe","\"within optional groups\""]},"operators":{"distinct":3,"total":10,"identifiers":["()","function","function=>"]}},"paramCount":0,"sloc":{"logical":10,"physical":61},"errors":[],"lineEnd":442,"lineStart":382,"name":"<anon method-61>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","Large x","toParse","abc {abc Large xyz} abc"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":386,"lineStart":383,"name":"<anon method-62>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":9.091,"halstead":{"bugs":0.064,"difficulty":4.6,"effort":889.005,"length":44,"time":49.389,"vocabulary":21,"volume":193.262,"operands":{"distinct":15,"total":23,"identifiers":["parse","getParsed","Large abc","expect","toHaveLength","1","sizing","0","type","toEqual","\"sizing\"","body","toBeTruthy","size","toBeDefined"]},"operators":{"distinct":6,"total":21,"identifiers":["const","=","``","()",".","[]"]}},"paramCount":0,"sloc":{"logical":11,"physical":11},"errors":[],"lineEnd":398,"lineStart":388,"name":"<anon method-63>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.052,"difficulty":4.615,"effort":725.415,"length":37,"time":40.301,"vocabulary":19,"volume":157.173,"operands":{"distinct":13,"total":20,"identifiers":["parse","getParsed","a Large abc","expect","toHaveLength","2","sizing","1","type","toEqual","\"sizing\"","body","3"]},"operators":{"distinct":6,"total":17,"identifiers":["const","=","``","()",".","[]"]}},"paramCount":0,"sloc":{"logical":9,"physical":10},"errors":[],"lineEnd":409,"lineStart":400,"name":"<anon method-64>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.053,"difficulty":5,"effort":792.286,"length":38,"time":44.016,"vocabulary":18,"volume":158.457,"operands":{"distinct":12,"total":20,"identifiers":["parse","getParsed","a { b Large c } d","group","1","sizing","body","expect","type","toEqual","\"sizing\"","toHaveLength"]},"operators":{"distinct":6,"total":18,"identifiers":["const","=","``","[]",".","()"]}},"paramCount":0,"sloc":{"logical":8,"physical":9},"errors":[],"lineEnd":419,"lineStart":411,"name":"<anon method-65>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["it","\"should work with sizing commands: \\sqrt[\\small 3]{x}\"","\"should work with \\color: \\sqrt[\\color{red} 3]{x}\"","\"should work style commands \\sqrt[\\textstyle 3]{x}\"","\"should work with old font functions: \\sqrt[\\tt 3]{x}\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":8,"physical":21},"errors":[],"lineEnd":441,"lineStart":421,"name":"<anon method-66>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.016,"difficulty":2.917,"effort":141.26,"length":14,"time":7.848,"vocabulary":11,"volume":48.432,"operands":{"distinct":6,"total":7,"identifiers":["tree","stripPositions","getParsed","sqrt[small 3]{x}","expect","toMatchSnapshot"]},"operators":{"distinct":5,"total":7,"identifiers":["const","=","()","``","."]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":425,"lineStart":422,"name":"<anon method-67>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.016,"difficulty":2.917,"effort":141.26,"length":14,"time":7.848,"vocabulary":11,"volume":48.432,"operands":{"distinct":6,"total":7,"identifiers":["tree","stripPositions","getParsed","sqrt[color{red} 3]{x}","expect","toMatchSnapshot"]},"operators":{"distinct":5,"total":7,"identifiers":["const","=","()","``","."]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":430,"lineStart":427,"name":"<anon method-68>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.016,"difficulty":2.917,"effort":141.26,"length":14,"time":7.848,"vocabulary":11,"volume":48.432,"operands":{"distinct":6,"total":7,"identifiers":["tree","stripPositions","getParsed","sqrt[\textstyle 3]{x}","expect","toMatchSnapshot"]},"operators":{"distinct":5,"total":7,"identifiers":["const","=","()","``","."]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":435,"lineStart":432,"name":"<anon method-69>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.016,"difficulty":2.917,"effort":141.26,"length":14,"time":7.848,"vocabulary":11,"volume":48.432,"operands":{"distinct":6,"total":7,"identifiers":["tree","stripPositions","getParsed","sqrt[\tt 3]{x}","expect","toMatchSnapshot"]},"operators":{"distinct":5,"total":7,"identifiers":["const","=","()","``","."]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":440,"lineStart":437,"name":"<anon method-70>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.037,"difficulty":1.778,"effort":196.803,"length":32,"time":10.934,"vocabulary":11,"volume":110.702,"operands":{"distinct":9,"total":16,"identifiers":["it","\"should parse no argument functions\"","\"should parse 1 argument functions\"","\"should parse 2 argument functions\"","\"should not parse 1 argument functions with no arguments\"","\"should not parse 2 argument functions with 0 or 1 arguments\"","\"should not parse a function with text right after it\"","\"should parse a function with a number right after it\"","\"should parse some functions with text right after it\""]},"operators":{"distinct":2,"total":16,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":16,"physical":35},"errors":[],"lineEnd":478,"lineStart":444,"name":"<anon method-71>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","div","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":447,"lineStart":445,"name":"<anon method-72>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\blue x","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":451,"lineStart":449,"name":"<anon method-73>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\frac 1 2","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":455,"lineStart":453,"name":"<anon method-74>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","\blue","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":459,"lineStart":457,"name":"<anon method-75>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.4,"effort":115.2,"length":16,"time":6.4,"vocabulary":8,"volume":48,"operands":{"distinct":5,"total":8,"identifiers":["expect","\frac","not","toParse","\frac 1"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":465,"lineStart":461,"name":"<anon method-76>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","\redx","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":469,"lineStart":467,"name":"<anon method-77>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\frac12","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":473,"lineStart":471,"name":"<anon method-78>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect",";x","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":477,"lineStart":475,"name":"<anon method-79>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.846,"halstead":{"bugs":0.1,"difficulty":3.81,"effort":1146.012,"length":64,"time":63.667,"vocabulary":26,"volume":300.828,"operands":{"distinct":21,"total":32,"identifiers":["expression","r","\frac{x}{y}","dfracExpression","dfrac{x}{y}","tfracExpression","\tfrac{x}{y}","cfracExpression","cfrac{x}{y}","genfrac1","genfrac ( ] {0.06em}{0}{a}{b+c}","genfrac2","genfrac ( ] {0.8pt}{}{a}{b+c}","it","\"should not fail\"","\"should produce a frac\"","\"should also parse cfrac, dfrac, tfrac, and genfrac\"","\"should parse cfrac, dfrac, tfrac, and genfrac as fracs\"","\"should fail, given math as a line thickness to genfrac\"","\"should fail if genfrac is given less than 6 arguments\"","\"should parse atop\""]},"operators":{"distinct":5,"total":32,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":26,"physical":75},"errors":[],"lineEnd":554,"lineStart":480,"name":"<anon method-80>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","expression","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":490,"lineStart":488,"name":"<anon method-81>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.044,"difficulty":3.864,"effort":510,"length":33,"time":28.333,"vocabulary":16,"volume":132,"operands":{"distinct":11,"total":17,"identifiers":["parse","getParsed","expression","0","expect","type","toEqual","\"genfrac\"","numer","toBeDefined","denom"]},"operators":{"distinct":5,"total":16,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":8,"physical":7},"errors":[],"lineEnd":498,"lineStart":492,"name":"<anon method-82>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.032,"difficulty":2.143,"effort":203.781,"length":30,"time":11.321,"vocabulary":9,"volume":95.098,"operands":{"distinct":7,"total":15,"identifiers":["expect","cfracExpression","toParse","dfracExpression","tfracExpression","genfrac1","genfrac2"]},"operators":{"distinct":2,"total":15,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":506,"lineStart":500,"name":"<anon method-83>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":2.778,"halstead":{"bugs":0.226,"difficulty":10,"effort":6785.745,"length":148,"time":376.986,"vocabulary":24,"volume":678.574,"operands":{"distinct":19,"total":76,"identifiers":["dfracParse","getParsed","dfracExpression","0","expect","type","toEqual","\"genfrac\"","numer","toBeDefined","denom","tfracParse","tfracExpression","cfracParse","cfracExpression","genfracParse","genfrac1","leftDelim","rightDelim"]},"operators":{"distinct":5,"total":72,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":36,"physical":27},"errors":[],"lineEnd":534,"lineStart":508,"name":"<anon method-84>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.013,"difficulty":2.4,"effort":91.294,"length":12,"time":5.072,"vocabulary":9,"volume":38.039,"operands":{"distinct":5,"total":6,"identifiers":["badGenFrac","\"\\genfrac ( ] {b+c}{0}{a}{b+c}\"","expect","not","toParse"]},"operators":{"distinct":4,"total":6,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":539,"lineStart":536,"name":"<anon method-85>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.013,"difficulty":2.4,"effort":91.294,"length":12,"time":5.072,"vocabulary":9,"volume":38.039,"operands":{"distinct":5,"total":6,"identifiers":["badGenFrac","\"\\genfrac ( ] {0.06em}{0}{a}\"","expect","not","toParse"]},"operators":{"distinct":4,"total":6,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":544,"lineStart":541,"name":"<anon method-86>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.059,"difficulty":5.077,"effort":905.789,"length":42,"time":50.322,"vocabulary":19,"volume":178.413,"operands":{"distinct":13,"total":22,"identifiers":["parse","getParsed","x atop y","0","expect","type","toEqual","\"genfrac\"","numer","toBeDefined","denom","hasBarLine","false"]},"operators":{"distinct":6,"total":20,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":10,"physical":8},"errors":[],"lineEnd":553,"lineStart":546,"name":"<anon method-87>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.571,"halstead":{"bugs":0.099,"difficulty":4,"effort":1188.827,"length":64,"time":66.046,"vocabulary":25,"volume":297.207,"operands":{"distinct":20,"total":32,"identifiers":["simpleOver","r","1 over x","complexOver","1+2i over 3+4i","braceFrac","a+b \brace c+d","brackFrac","a+b \brack c+d","it","\"should not fail\"","\"should produce a frac\"","\"should create a numerator from the atoms before \\over\"","\"should create a denominator from the atoms after \\over\"","\"should handle empty numerators\"","\"should handle empty denominators\"","\"should handle \\displaystyle correctly\"","\"should handle \\textstyle correctly\"","\"should handle nested factions\"","\"should fail with multiple overs in the same group\""]},"operators":{"distinct":5,"total":32,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":28,"physical":107},"errors":[],"lineEnd":662,"lineStart":556,"name":"<anon method-88>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.024,"difficulty":2,"effort":144,"length":24,"time":8,"vocabulary":8,"volume":72,"operands":{"distinct":6,"total":12,"identifiers":["expect","simpleOver","toParse","complexOver","braceFrac","brackFrac"]},"operators":{"distinct":2,"total":12,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":567,"lineStart":562,"name":"<anon method-89>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":2.439,"halstead":{"bugs":0.251,"difficulty":14.167,"effort":10652.396,"length":164,"time":591.8,"vocabulary":24,"volume":751.934,"operands":{"distinct":18,"total":85,"identifiers":["parse","getParsed","simpleOver","0","expect","type","toEqual","\"genfrac\"","numer","toBeDefined","denom","complexOver","parseBraceFrac","braceFrac","leftDelim","rightDelim","parseBrackFrac","brackFrac"]},"operators":{"distinct":6,"total":79,"identifiers":["let","=","[]","()",".","const"]}},"paramCount":0,"sloc":{"logical":41,"physical":31},"errors":[],"lineEnd":599,"lineStart":569,"name":"<anon method-90>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.029,"difficulty":3.333,"effort":291.897,"length":23,"time":16.217,"vocabulary":14,"volume":87.569,"operands":{"distinct":9,"total":12,"identifiers":["parse","getParsed","complexOver","0","numer","expect","body","toHaveLength","4"]},"operators":{"distinct":5,"total":11,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":5,"physical":6},"errors":[],"lineEnd":606,"lineStart":601,"name":"<anon method-91>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.029,"difficulty":3.333,"effort":291.897,"length":23,"time":16.217,"vocabulary":14,"volume":87.569,"operands":{"distinct":9,"total":12,"identifiers":["parse","getParsed","complexOver","0","denom","expect","body","toHaveLength","4"]},"operators":{"distinct":5,"total":11,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":5,"physical":6},"errors":[],"lineEnd":613,"lineStart":608,"name":"<anon method-92>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.055,"difficulty":4.615,"effort":764.627,"length":39,"time":42.479,"vocabulary":19,"volume":165.669,"operands":{"distinct":13,"total":20,"identifiers":["emptyNumerator","r","over x","parse","getParsed","0","expect","type","toEqual","\"genfrac\"","numer","toBeDefined","denom"]},"operators":{"distinct":6,"total":19,"identifiers":["const","=","``","[]","()","."]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":621,"lineStart":615,"name":"<anon method-93>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.055,"difficulty":4.615,"effort":764.627,"length":39,"time":42.479,"vocabulary":19,"volume":165.669,"operands":{"distinct":13,"total":20,"identifiers":["emptyDenominator","r","1 over","parse","getParsed","0","expect","type","toEqual","\"genfrac\"","numer","toBeDefined","denom"]},"operators":{"distinct":6,"total":19,"identifiers":["const","=","``","[]","()","."]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":629,"lineStart":623,"name":"<anon method-94>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.067,"difficulty":4.8,"effort":969.824,"length":46,"time":53.879,"vocabulary":21,"volume":202.047,"operands":{"distinct":15,"total":24,"identifiers":["displaystyleExpression","r","displaystyle 1 over 2","parse","getParsed","0","expect","type","toEqual","\"genfrac\"","numer","body","\"styling\"","denom","toBeDefined"]},"operators":{"distinct":6,"total":22,"identifiers":["const","=","``","[]","()","."]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":637,"lineStart":631,"name":"<anon method-95>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.013,"difficulty":1.6,"effort":62.885,"length":14,"time":3.494,"vocabulary":7,"volume":39.303,"operands":{"distinct":5,"total":8,"identifiers":["expect","\textstyle 1 over 2","toParseLike","\frac{\textstyle 1}{2}","{\textstyle 1} over 2"]},"operators":{"distinct":2,"total":6,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":4},"errors":[],"lineEnd":642,"lineStart":639,"name":"<anon method-96>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.157,"difficulty":9,"effort":4250.26,"length":103,"time":236.126,"vocabulary":24,"volume":472.251,"operands":{"distinct":18,"total":54,"identifiers":["nestedOverExpression","r","{1 over 2} over 3","parse","getParsed","0","expect","type","toEqual","\"genfrac\"","numer","body","text","\"1\"","denom","\"2\"","toBeDefined","\"3\""]},"operators":{"distinct":6,"total":49,"identifiers":["const","=","``","[]","()","."]}},"paramCount":0,"sloc":{"logical":16,"physical":10},"errors":[],"lineEnd":653,"lineStart":644,"name":"<anon method-97>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.035,"difficulty":4.375,"effort":453.304,"length":28,"time":25.184,"vocabulary":13,"volume":103.612,"operands":{"distinct":8,"total":14,"identifiers":["badMultipleOvers","r","1 over 2 + 3 over 4","expect","not","toParse","badOverChoose","1 over 2 choose 3"]},"operators":{"distinct":5,"total":14,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":8,"physical":7},"errors":[],"lineEnd":661,"lineStart":655,"name":"<anon method-98>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should not fail\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":12},"errors":[],"lineEnd":675,"lineStart":664,"name":"<anon method-99>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.059,"difficulty":3.6,"effort":639.436,"length":48,"time":35.524,"vocabulary":13,"volume":177.621,"operands":{"distinct":10,"total":24,"identifiers":["expect","\frac{x}{y}","toBuild","dfrac{x}{y}","\tfrac{x}{y}","cfrac{x}{y}","genfrac ( ] {0.06em}{0}{a}{b+c}","genfrac ( ] {0.8pt}{}{a}{b+c}","genfrac {} {} {0.8pt}{}{a}{b+c}","genfrac [ {} {0.8pt}{}{a}{b+c}"]},"operators":{"distinct":3,"total":24,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":16,"physical":10},"errors":[],"lineEnd":674,"lineStart":665,"name":"<anon method-100>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should not fail\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":9},"errors":[],"lineEnd":685,"lineStart":677,"name":"<anon method-101>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.033,"difficulty":3.214,"effort":320.329,"length":30,"time":17.796,"vocabulary":10,"volume":99.658,"operands":{"distinct":7,"total":15,"identifiers":["expect","a over b","toBuild","a atop b","a choose b","a \brace b","a \brack b"]},"operators":{"distinct":3,"total":15,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":684,"lineStart":678,"name":"<anon method-102>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.016,"difficulty":2.917,"effort":141.26,"length":14,"time":7.848,"vocabulary":11,"volume":48.432,"operands":{"distinct":6,"total":7,"identifiers":["sizeExpression","r","Huge{x}small{x}","it","\"should not fail\"","\"should produce a sizing node\""]},"operators":{"distinct":5,"total":7,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":15},"errors":[],"lineEnd":701,"lineStart":687,"name":"<anon method-103>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","sizeExpression","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":692,"lineStart":690,"name":"<anon method-104>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.044,"difficulty":3.864,"effort":510,"length":33,"time":28.333,"vocabulary":16,"volume":132,"operands":{"distinct":11,"total":17,"identifiers":["parse","getParsed","sizeExpression","0","expect","type","toEqual","\"sizing\"","size","toBeDefined","body"]},"operators":{"distinct":5,"total":16,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":8,"physical":7},"errors":[],"lineEnd":700,"lineStart":694,"name":"<anon method-105>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":1.724,"halstead":{"bugs":0.242,"difficulty":5.077,"effort":3680.386,"length":132,"time":204.466,"vocabulary":45,"volume":724.925,"operands":{"distinct":39,"total":66,"identifiers":["textExpression","r","\text{a b}","noBraceTextExpression","\text x","nestedTextExpression","\text{a {b} \blue{c} \textcolor{#fff}{x} llap{x}}","spaceTextExpression","\text{  a   }","leadingSpaceTextExpression","\text {moo}","badTextExpression","\text{a b%}","badFunctionExpression","\text{sqrt{x}}","mathTokenAfterText","\text{sin}^2","it","\"should not fail\"","\"should produce a text\"","\"should produce textords instead of mathords\"","\"should not parse bad text\"","\"should not parse bad functions inside text\"","\"should parse text with no braces around it\"","\"should parse nested expressions\"","\"should contract spaces\"","\"should handle backslash followed by newline\"","\"should accept math mode tokens after its argument\"","\"should ignore a space before the text group\"","\"should parse math within text group\"","\"should parse math within text within math within text\"","\"should forbid \\( within math mode\"","\"should forbid $ within math mode\"","\"should detect unbalanced \\)\"","\"should detect unbalanced $\"","\"should not mix $ and \\(..\\)\"","\"should parse spacing functions\"","\"should omit spaces after commands\"","\"should handle ⋮ and \\vdots\""]},"operators":{"distinct":6,"total":66,"identifiers":["const","=","``","()","function","function=>"]}},"paramCount":0,"sloc":{"logical":58,"physical":121},"errors":[],"lineEnd":823,"lineStart":703,"name":"<anon method-106>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","textExpression","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":716,"lineStart":714,"name":"<anon method-107>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.033,"difficulty":3.25,"effort":317.435,"length":25,"time":17.635,"vocabulary":15,"volume":97.672,"operands":{"distinct":10,"total":13,"identifiers":["parse","getParsed","textExpression","0","expect","type","toEqual","\"text\"","body","toBeDefined"]},"operators":{"distinct":5,"total":12,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":723,"lineStart":718,"name":"<anon method-108>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.033,"difficulty":3.25,"effort":317.435,"length":25,"time":17.635,"vocabulary":15,"volume":97.672,"operands":{"distinct":10,"total":13,"identifiers":["parse","getParsed","textExpression","0","group","body","expect","type","toEqual","\"textord\""]},"operators":{"distinct":5,"total":12,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":5,"physical":6},"errors":[],"lineEnd":730,"lineStart":725,"name":"<anon method-109>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1,"effort":20.68,"length":8,"time":1.149,"vocabulary":6,"volume":20.68,"operands":{"distinct":4,"total":4,"identifiers":["expect","badTextExpression","not","toParse"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":734,"lineStart":732,"name":"<anon method-110>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1,"effort":20.68,"length":8,"time":1.149,"vocabulary":6,"volume":20.68,"operands":{"distinct":4,"total":4,"identifiers":["expect","badFunctionExpression","not","toParse"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":738,"lineStart":736,"name":"<anon method-111>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","noBraceTextExpression","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":742,"lineStart":740,"name":"<anon method-112>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","nestedTextExpression","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":746,"lineStart":744,"name":"<anon method-113>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.692,"halstead":{"bugs":0.098,"difficulty":5.625,"effort":1655.355,"length":67,"time":91.964,"vocabulary":21,"volume":294.285,"operands":{"distinct":16,"total":36,"identifiers":["parse","getParsed","spaceTextExpression","0","group","body","expect","length","toEqual","4","type","\"spacing\"","1","\"textord\"","2","3"]},"operators":{"distinct":5,"total":31,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":13,"physical":10},"errors":[],"lineEnd":757,"lineStart":748,"name":"<anon method-114>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\"\\text{\\ \t\r \n \t\r  }\"","toParseLike","\text{ }"]},"operators":{"distinct":3,"total":3,"identifiers":[".","()","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":761,"lineStart":759,"name":"<anon method-115>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","mathTokenAfterText","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":765,"lineStart":763,"name":"<anon method-116>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.05,"difficulty":3.857,"effort":583.46,"length":35,"time":32.414,"vocabulary":20,"volume":151.267,"operands":{"distinct":14,"total":18,"identifiers":["parse","getParsed","leadingSpaceTextExpression","0","expect","body","toHaveLength","3","map","n","join","\"\"","toBe","\"moo\""]},"operators":{"distinct":6,"total":17,"identifiers":["const","=","[]","()",".","function=>"]}},"paramCount":0,"sloc":{"logical":9,"physical":6},"errors":[],"lineEnd":772,"lineStart":767,"name":"<anon method-117>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0.002,"difficulty":0.5,"effort":2.377,"length":3,"time":0.132,"vocabulary":3,"volume":4.755,"operands":{"distinct":2,"total":2,"identifiers":["n","text"]},"operators":{"distinct":1,"total":1,"identifiers":["."]}},"paramCount":1,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":771,"lineStart":771,"name":"<anon method-118>","paramNames":["n"],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.014,"difficulty":2.4,"effort":100.8,"length":14,"time":5.6,"vocabulary":8,"volume":42,"operands":{"distinct":5,"total":8,"identifiers":["expect","\text{graph: $y = mx + b$}","toParse","strictSettings","\text{graph: (y = mx + b)}"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":777,"lineStart":774,"name":"<anon method-119>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.031,"difficulty":3.429,"effort":318.905,"length":28,"time":17.717,"vocabulary":10,"volume":93.014,"operands":{"distinct":7,"total":16,"identifiers":["expect","\text{hello $x + \text{world $y$} + z$}","toParse","strictSettings","\text{hello (x + \text{world $y$} + z)}","\text{hello $x + \text{world (y)} + z$}","\text{hello (x + \text{world (y)} + z)}"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":784,"lineStart":779,"name":"<anon method-120>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.4,"effort":115.2,"length":16,"time":6.4,"vocabulary":8,"volume":48,"operands":{"distinct":5,"total":8,"identifiers":["expect","(","not","toParse","\text{$(x)$}"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":789,"lineStart":786,"name":"<anon method-121>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.4,"effort":115.2,"length":16,"time":6.4,"vocabulary":8,"volume":48,"operands":{"distinct":5,"total":8,"identifiers":["expect","$x$","not","toParse","\text{($x$)}"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":794,"lineStart":791,"name":"<anon method-122>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.4,"effort":115.2,"length":16,"time":6.4,"vocabulary":8,"volume":48,"operands":{"distinct":5,"total":8,"identifiers":["expect",")","not","toParse","\text{)}"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":799,"lineStart":796,"name":"<anon method-123>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.4,"effort":115.2,"length":16,"time":6.4,"vocabulary":8,"volume":48,"operands":{"distinct":5,"total":8,"identifiers":["expect","$","not","toParse","\text{$}"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":804,"lineStart":801,"name":"<anon method-124>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.4,"effort":115.2,"length":16,"time":6.4,"vocabulary":8,"volume":48,"operands":{"distinct":5,"total":8,"identifiers":["expect","\text{$x)}","not","toParse","\text{(x$}"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":809,"lineStart":806,"name":"<anon method-125>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","a b, ; ! : > ~ \thinspace medspace quad  ","toBuild","enspace \thickspace qquad space \nobreakspace"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":814,"lineStart":811,"name":"<anon method-126>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{\textellipsis !}","toParseLike","\text{\textellipsis!}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":818,"lineStart":816,"name":"<anon method-127>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\text{a \u000bdots b ⋮ d}","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":822,"lineStart":820,"name":"<anon method-128>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should not fail\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":13},"errors":[],"lineEnd":837,"lineStart":825,"name":"<anon method-129>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.556,"halstead":{"bugs":0.069,"difficulty":3.682,"effort":756.971,"length":54,"time":42.054,"vocabulary":14,"volume":205.597,"operands":{"distinct":11,"total":27,"identifiers":["expect","langNdarrRdArrZDarralef\rang","toBuild","null","clubsdiamondsheartsspadescnumsComplex","DaggeremptyharrEpsilonhArrEtaHarrexist","imagelarrinfinlArrIotaLarrisinKappa","Mulrarr\natnumslrArrNuLrarrOmicron","\real\rarrplusmn\rArr\realsRarrRealsRho","\text{sect}sdotsubsubesupe","Tau\thetasymweierpZeta"]},"operators":{"distinct":3,"total":27,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":18,"physical":11},"errors":[],"lineEnd":836,"lineStart":826,"name":"<anon method-130>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":2.632,"halstead":{"bugs":0.161,"difficulty":3.917,"effort":1888.431,"length":94,"time":104.913,"vocabulary":35,"volume":482.153,"operands":{"distinct":30,"total":47,"identifiers":["colorExpression","r","\blue{x}","newColorExpression","\redA{x}","customColorExpression1","\textcolor{#fA6}{x}","customColorExpression2","\textcolor{#fA6fA6}{x}","customColorExpression3","\textcolor{fA6fA6}{x}","badCustomColorExpression1","\textcolor{bad-color}{x}","badCustomColorExpression2","\textcolor{#fA6f}{x}","badCustomColorExpression3","\textcolor{#gA6}{x}","oldColorExpression","color{#fA6}xy","it","\"should not fail\"","\"should build a color node\"","\"should parse a custom color\"","\"should correctly extract the custom color\"","\"should not parse a bad custom color\"","\"should parse new colors from the branding guide\"","\"should use one-argument \\color by default\"","\"should use one-argument \\color if requested\"","\"should use two-argument \\color if requested\"","\"should not define \\color in global context\""]},"operators":{"distinct":5,"total":47,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":38,"physical":75},"errors":[],"lineEnd":913,"lineStart":839,"name":"<anon method-131>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","colorExpression","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":852,"lineStart":850,"name":"<anon method-132>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.044,"difficulty":3.864,"effort":510,"length":33,"time":28.333,"vocabulary":16,"volume":132,"operands":{"distinct":11,"total":17,"identifiers":["parse","getParsed","colorExpression","0","expect","type","toEqual","\"color\"","color","toBeDefined","body"]},"operators":{"distinct":5,"total":16,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":8,"physical":7},"errors":[],"lineEnd":860,"lineStart":854,"name":"<anon method-133>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.017,"difficulty":1.8,"effort":90.958,"length":18,"time":5.053,"vocabulary":7,"volume":50.532,"operands":{"distinct":5,"total":9,"identifiers":["expect","customColorExpression1","toParse","customColorExpression2","customColorExpression3"]},"operators":{"distinct":2,"total":9,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":866,"lineStart":862,"name":"<anon method-134>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.071,"difficulty":5.192,"effort":1104.228,"length":51,"time":61.346,"vocabulary":18,"volume":212.666,"operands":{"distinct":13,"total":27,"identifiers":["parse1","getParsed","customColorExpression1","0","parse2","customColorExpression2","parse3","customColorExpression3","expect","color","toEqual","\"#fA6\"","\"#fA6fA6\""]},"operators":{"distinct":5,"total":24,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":12,"physical":9},"errors":[],"lineEnd":876,"lineStart":868,"name":"<anon method-135>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.024,"difficulty":2,"effort":144,"length":24,"time":8,"vocabulary":8,"volume":72,"operands":{"distinct":6,"total":12,"identifiers":["expect","badCustomColorExpression1","not","toParse","badCustomColorExpression2","badCustomColorExpression3"]},"operators":{"distinct":2,"total":12,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":882,"lineStart":878,"name":"<anon method-136>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","newColorExpression","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":886,"lineStart":884,"name":"<anon method-137>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","oldColorExpression","toParseLike","\textcolor{#fA6}{xy}"]},"operators":{"distinct":3,"total":3,"identifiers":[".","()","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":890,"lineStart":888,"name":"<anon method-138>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.5,"effort":116.511,"length":13,"time":6.473,"vocabulary":12,"volume":46.605,"operands":{"distinct":7,"total":7,"identifiers":["expect","oldColorExpression","toParseLike","r","\textcolor{#fA6}{xy}","colorIsTextColor","false"]},"operators":{"distinct":5,"total":6,"identifiers":["()",".","``","{}",":"]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":896,"lineStart":892,"name":"<anon method-139>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.5,"effort":116.511,"length":13,"time":6.473,"vocabulary":12,"volume":46.605,"operands":{"distinct":7,"total":7,"identifiers":["expect","oldColorExpression","toParseLike","r","\textcolor{#fA6}{x}y","colorIsTextColor","true"]},"operators":{"distinct":5,"total":6,"identifiers":["()",".","``","{}",":"]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":902,"lineStart":898,"name":"<anon method-140>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.041,"difficulty":5.25,"effort":643.775,"length":30,"time":35.765,"vocabulary":17,"volume":122.624,"operands":{"distinct":10,"total":15,"identifiers":["macros","expect","oldColorExpression","toParseLike","r","\textcolor{#fA6}{x}y","colorIsTextColor","true","globalGroup","toEqual"]},"operators":{"distinct":7,"total":15,"identifiers":["const","=","{}","()",".","``",":"]}},"paramCount":0,"sloc":{"logical":9,"physical":9},"errors":[],"lineEnd":912,"lineStart":904,"name":"<anon method-141>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.692,"halstead":{"bugs":0.041,"difficulty":3.409,"effort":422.727,"length":31,"time":23.485,"vocabulary":16,"volume":124,"operands":{"distinct":11,"total":15,"identifiers":["mathTie","a~b","textTie","r","\text{a~ b}","it","\"should parse ties in math mode\"","\"should parse ties in text mode\"","\"should produce spacing in math mode\"","\"should produce spacing in text mode\"","\"should not contract with spaces in text mode\""]},"operators":{"distinct":5,"total":16,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":13,"physical":32},"errors":[],"lineEnd":946,"lineStart":915,"name":"<anon method-142>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","mathTie","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":921,"lineStart":919,"name":"<anon method-143>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","textTie","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":925,"lineStart":923,"name":"<anon method-144>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","mathTie","expect","1","type","toEqual","\"spacing\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","()",".","[]"]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":931,"lineStart":927,"name":"<anon method-145>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.033,"difficulty":2.955,"effort":295.455,"length":25,"time":16.414,"vocabulary":16,"volume":100,"operands":{"distinct":11,"total":13,"identifiers":["text","getParsed","textTie","0","parse","body","expect","1","type","toEqual","\"spacing\""]},"operators":{"distinct":5,"total":12,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":5,"physical":6},"errors":[],"lineEnd":938,"lineStart":933,"name":"<anon method-146>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.033,"difficulty":2.955,"effort":295.455,"length":25,"time":16.414,"vocabulary":16,"volume":100,"operands":{"distinct":11,"total":13,"identifiers":["text","getParsed","textTie","0","parse","body","expect","2","type","toEqual","\"spacing\""]},"operators":{"distinct":5,"total":12,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":5,"physical":6},"errors":[],"lineEnd":945,"lineStart":940,"name":"<anon method-147>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.053,"difficulty":3.654,"effort":578.978,"length":38,"time":32.165,"vocabulary":18,"volume":158.457,"operands":{"distinct":13,"total":19,"identifiers":["normalDelim","r","\bigl |","notDelim","\bigl x","bigDelim","Biggr langle","it","\"should parse normal delimiters\"","\"should not parse not-delimiters\"","\"should produce a delimsizing\"","\"should produce the correct direction delimiter\"","\"should parse the correct size delimiter\""]},"operators":{"distinct":5,"total":19,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":16,"physical":36},"errors":[],"lineEnd":983,"lineStart":948,"name":"<anon method-148>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["expect","normalDelim","toParse","bigDelim"]},"operators":{"distinct":2,"total":6,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":956,"lineStart":953,"name":"<anon method-149>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1,"effort":20.68,"length":8,"time":1.149,"vocabulary":6,"volume":20.68,"operands":{"distinct":4,"total":4,"identifiers":["expect","notDelim","not","toParse"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":960,"lineStart":958,"name":"<anon method-150>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","normalDelim","0","expect","type","toEqual","\"delimsizing\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":966,"lineStart":962,"name":"<anon method-151>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.045,"difficulty":4.091,"effort":556.364,"length":34,"time":30.909,"vocabulary":16,"volume":136,"operands":{"distinct":11,"total":18,"identifiers":["leftParse","getParsed","normalDelim","0","rightParse","bigDelim","expect","mclass","toEqual","\"mopen\"","\"mclose\""]},"operators":{"distinct":5,"total":16,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":8,"physical":7},"errors":[],"lineEnd":974,"lineStart":968,"name":"<anon method-152>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.045,"difficulty":4.091,"effort":556.364,"length":34,"time":30.909,"vocabulary":16,"volume":136,"operands":{"distinct":11,"total":18,"identifiers":["smallParse","getParsed","normalDelim","0","bigParse","bigDelim","expect","size","toEqual","1","4"]},"operators":{"distinct":5,"total":16,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":8,"physical":7},"errors":[],"lineEnd":982,"lineStart":976,"name":"<anon method-153>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.016,"difficulty":2.917,"effort":141.26,"length":14,"time":7.848,"vocabulary":11,"volume":48.432,"operands":{"distinct":6,"total":7,"identifiers":["overline","r","overline{x}","it","\"should not fail\"","\"should produce an overline\""]},"operators":{"distinct":5,"total":7,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":13},"errors":[],"lineEnd":997,"lineStart":985,"name":"<anon method-154>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","overline","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":990,"lineStart":988,"name":"<anon method-155>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","overline","0","expect","type","toEqual","\"overline\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":996,"lineStart":992,"name":"<anon method-156>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["it","\"should not fail on a text argument\"","\"should not fail if math version is used\"","\"should fail on math if AMS version is used\"","\"should produce a lap\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":8,"physical":28},"errors":[],"lineEnd":1026,"lineStart":999,"name":"<anon method-157>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.042,"difficulty":3.375,"effort":420.321,"length":36,"time":23.351,"vocabulary":11,"volume":124.54,"operands":{"distinct":8,"total":18,"identifiers":["expect","\rlap{,/}{=}","toParse","mathrlap{,/}{=}","{=}llap{/,}","{=}mathllap{/,}","sum_{clap{ABCDEFG}}","sum_{mathclap{ABCDEFG}}"]},"operators":{"distinct":3,"total":18,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":12,"physical":8},"errors":[],"lineEnd":1007,"lineStart":1000,"name":"<anon method-158>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.018,"difficulty":2.7,"effort":145.8,"length":18,"time":8.1,"vocabulary":8,"volume":54,"operands":{"distinct":5,"total":9,"identifiers":["expect","mathrlap{\frac{a}{b}}{=}","toParse","{=}mathllap{\frac{a}{b}}","sum_{mathclap{\frac{a}{b}}}"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":1013,"lineStart":1009,"name":"<anon method-159>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.025,"difficulty":3,"effort":228.235,"length":24,"time":12.68,"vocabulary":9,"volume":76.078,"operands":{"distinct":6,"total":12,"identifiers":["expect","\rlap{\frac{a}{b}}{=}","not","toParse","{=}llap{\frac{a}{b}}","sum_{clap{\frac{a}{b}}}"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":1019,"lineStart":1015,"name":"<anon method-160>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","mathrlap{,/}","0","expect","type","toEqual","\"lap\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":1025,"lineStart":1021,"name":"<anon method-161>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.571,"halstead":{"bugs":0.108,"difficulty":3.864,"effort":1249.239,"length":68,"time":69.402,"vocabulary":27,"volume":323.332,"operands":{"distinct":22,"total":34,"identifiers":["emRule","r","\rule{1em}{2em}","exRule","\rule{1ex}{2em}","badUnitRule","\rule{1au}{2em}","noNumberRule","\rule{1em}{em}","incompleteRule","\rule{1em}","hardNumberRule","\rule{   01.24ex}{2.450   em   }","it","\"should not fail\"","\"should not parse invalid units\"","\"should not parse incomplete rules\"","\"should produce a rule\"","\"should list the correct units\"","\"should parse the number correctly\"","\"should parse negative sizes\"","\"should parse in text mode\""]},"operators":{"distinct":5,"total":34,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":28,"physical":58},"errors":[],"lineEnd":1085,"lineStart":1028,"name":"<anon method-162>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["expect","emRule","toParse","exRule"]},"operators":{"distinct":2,"total":6,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1039,"lineStart":1036,"name":"<anon method-163>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["expect","badUnitRule","not","toParse","noNumberRule"]},"operators":{"distinct":2,"total":8,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":1045,"lineStart":1041,"name":"<anon method-164>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1,"effort":20.68,"length":8,"time":1.149,"vocabulary":6,"volume":20.68,"operands":{"distinct":4,"total":4,"identifiers":["expect","incompleteRule","not","toParse"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1049,"lineStart":1047,"name":"<anon method-165>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","emRule","0","expect","type","toEqual","\"rule\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":1055,"lineStart":1051,"name":"<anon method-166>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.083,"difficulty":6.154,"effort":1539.665,"length":60,"time":85.537,"vocabulary":18,"volume":250.196,"operands":{"distinct":13,"total":32,"identifiers":["emParse","getParsed","emRule","0","exParse","exRule","expect","width","unit","toEqual","\"em\"","height","\"ex\""]},"operators":{"distinct":5,"total":28,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":12,"physical":10},"errors":[],"lineEnd":1066,"lineStart":1057,"name":"<anon method-167>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.04,"difficulty":3.636,"effort":436.364,"length":30,"time":24.242,"vocabulary":16,"volume":120,"operands":{"distinct":11,"total":16,"identifiers":["hardNumberParse","getParsed","hardNumberRule","0","expect","width","number","toBeCloseTo","1.24","height","2.45"]},"operators":{"distinct":5,"total":14,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":1073,"lineStart":1068,"name":"<anon method-168>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.044,"difficulty":5.091,"effort":679.319,"length":32,"time":37.74,"vocabulary":18,"volume":133.438,"operands":{"distinct":11,"total":16,"identifiers":["parse","getParsed","\rule{-1em}{- 0.2em}","0","expect","width","number","toBeCloseTo","1","height","0.2"]},"operators":{"distinct":7,"total":16,"identifiers":["const","=","[]","``","()",".","- (prefix)"]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":1080,"lineStart":1075,"name":"<anon method-169>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","r","\text{a\rule{1em}{2em}b}","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":1084,"lineStart":1082,"name":"<anon method-170>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.078,"difficulty":3.611,"effort":849.424,"length":52,"time":47.19,"vocabulary":23,"volume":235.225,"operands":{"distinct":18,"total":26,"identifiers":["emKern","r","kern{1em}","exKern","kern{1ex}","muKern","mkern{1mu}","abKern","akern{1em}b","badUnitRule","kern{1au}","noNumberRule","kern{em}","it","\"should list the correct units\"","\"should not parse invalid units\"","\"should parse negative sizes\"","\"should parse positive sizes\""]},"operators":{"distinct":5,"total":26,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":20,"physical":35},"errors":[],"lineEnd":1121,"lineStart":1087,"name":"<anon method-171>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.115,"difficulty":5.556,"effort":1909.948,"length":76,"time":106.108,"vocabulary":23,"volume":343.791,"operands":{"distinct":18,"total":40,"identifiers":["emParse","getParsed","emKern","0","exParse","exKern","muParse","muKern","abParse","abKern","1","expect","dimension","unit","toEqual","\"em\"","\"ex\"","\"mu\""]},"operators":{"distinct":5,"total":36,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":16,"physical":11},"errors":[],"lineEnd":1105,"lineStart":1095,"name":"<anon method-172>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["expect","badUnitRule","not","toParse","noNumberRule"]},"operators":{"distinct":2,"total":8,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1110,"lineStart":1107,"name":"<anon method-173>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.027,"difficulty":3.889,"effort":311.111,"length":20,"time":17.284,"vocabulary":16,"volume":80,"operands":{"distinct":9,"total":10,"identifiers":["parse","getParsed","kern{-1em}","0","expect","dimension","number","toBeCloseTo","1"]},"operators":{"distinct":7,"total":10,"identifiers":["const","=","[]","``","()",".","- (prefix)"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1115,"lineStart":1112,"name":"<anon method-174>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.025,"difficulty":3.333,"effort":247.436,"length":19,"time":13.746,"vocabulary":15,"volume":74.231,"operands":{"distinct":9,"total":10,"identifiers":["parse","getParsed","kern{+1em}","0","expect","dimension","number","toBeCloseTo","1"]},"operators":{"distinct":6,"total":9,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1120,"lineStart":1117,"name":"<anon method-175>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.571,"halstead":{"bugs":0.117,"difficulty":3.75,"effort":1311.655,"length":72,"time":72.87,"vocabulary":29,"volume":349.775,"operands":{"distinct":24,"total":36,"identifiers":["emKern","r","kern1em","exKern","kern 1 ex","muKern","mkern 1mu","abKern1","amkern1mub","abKern2","amkern-1mub","abKern3","amkern-1mu b","badUnitRule","kern1au","noNumberRule","kern em","it","\"should list the correct units\"","\"should parse elements on either side of a kern\"","\"should not parse invalid units\"","\"should parse negative sizes\"","\"should parse positive sizes\"","\"should handle whitespace\""]},"operators":{"distinct":5,"total":36,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":28,"physical":66},"errors":[],"lineEnd":1188,"lineStart":1123,"name":"<anon method-176>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":4.167,"halstead":{"bugs":0.181,"difficulty":6.818,"effort":3695.844,"length":114,"time":205.325,"vocabulary":27,"volume":542.057,"operands":{"distinct":22,"total":60,"identifiers":["emParse","getParsed","emKern","0","exParse","exKern","muParse","muKern","abParse1","abKern1","1","abParse2","abKern2","abParse3","abKern3","expect","dimension","unit","toEqual","\"em\"","\"ex\"","\"mu\""]},"operators":{"distinct":5,"total":54,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":24,"physical":15},"errors":[],"lineEnd":1147,"lineStart":1133,"name":"<anon method-177>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":4.167,"halstead":{"bugs":0.154,"difficulty":8.906,"effort":4107.503,"length":105,"time":228.195,"vocabulary":21,"volume":461.193,"operands":{"distinct":16,"total":57,"identifiers":["abParse1","getParsed","abKern1","abParse2","abKern2","abParse3","abKern3","expect","toHaveLength","3","0","text","toEqual","\"a\"","2","\"b\""]},"operators":{"distinct":5,"total":48,"identifiers":["const","=","()",".","[]"]}},"paramCount":0,"sloc":{"logical":24,"physical":15},"errors":[],"lineEnd":1163,"lineStart":1149,"name":"<anon method-178>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["expect","badUnitRule","not","toParse","noNumberRule"]},"operators":{"distinct":2,"total":8,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1168,"lineStart":1165,"name":"<anon method-179>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.027,"difficulty":3.889,"effort":311.111,"length":20,"time":17.284,"vocabulary":16,"volume":80,"operands":{"distinct":9,"total":10,"identifiers":["parse","getParsed","kern-1em","0","expect","dimension","number","toBeCloseTo","1"]},"operators":{"distinct":7,"total":10,"identifiers":["const","=","[]","``","()",".","- (prefix)"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1173,"lineStart":1170,"name":"<anon method-180>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.025,"difficulty":3.333,"effort":247.436,"length":19,"time":13.746,"vocabulary":15,"volume":74.231,"operands":{"distinct":9,"total":10,"identifiers":["parse","getParsed","kern+1em","0","expect","dimension","number","toBeCloseTo","1"]},"operators":{"distinct":6,"total":9,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1178,"lineStart":1175,"name":"<anon method-181>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.07,"difficulty":4.063,"effort":856.502,"length":48,"time":47.583,"vocabulary":21,"volume":210.831,"operands":{"distinct":16,"total":26,"identifiers":["abParse","getParsed","\"a\\mkern\t-\r1  \n mu\nb\"","expect","toHaveLength","3","0","text","toEqual","\"a\"","1","dimension","unit","\"mu\"","2","\"b\""]},"operators":{"distinct":5,"total":22,"identifiers":["const","=","()",".","[]"]}},"paramCount":0,"sloc":{"logical":10,"physical":8},"errors":[],"lineEnd":1187,"lineStart":1180,"name":"<anon method-182>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.846,"halstead":{"bugs":0.083,"difficulty":4.118,"effort":1028.292,"length":56,"time":57.127,"vocabulary":22,"volume":249.728,"operands":{"distinct":17,"total":28,"identifiers":["normalLeftRight","r","left( dfrac{x}{y} \right)","emptyRight","left( dfrac{x}{y} \right.","it","\"should not fail\"","\"should produce a leftright\"","\"should error when it is mismatched\"","\"should error when braces are mismatched\"","\"should error when non-delimiters are provided\"","\"should parse the empty '.' delimiter\"","\"should parse the '.' delimiter with normal sizes\"","\"should handle \\middle\"","\"should handle multiple \\middles\"","\"should handle nested \\middles\"","\"should error when \\middle is not in \\left...\\right\""]},"operators":{"distinct":5,"total":28,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":26,"physical":64},"errors":[],"lineEnd":1253,"lineStart":1190,"name":"<anon method-183>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","normalLeftRight","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1196,"lineStart":1194,"name":"<anon method-184>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.048,"difficulty":3.958,"effort":566.284,"length":35,"time":31.46,"vocabulary":17,"volume":143.061,"operands":{"distinct":12,"total":19,"identifiers":["parse","getParsed","normalLeftRight","0","expect","type","toEqual","\"leftright\"","left","\"(\"","right","\")\""]},"operators":{"distinct":5,"total":16,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":8,"physical":7},"errors":[],"lineEnd":1204,"lineStart":1198,"name":"<anon method-185>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.035,"difficulty":4.375,"effort":453.304,"length":28,"time":25.184,"vocabulary":13,"volume":103.612,"operands":{"distinct":8,"total":14,"identifiers":["unmatchedLeft","r","left( dfrac{x}{y}","unmatchedRight","dfrac{x}{y} \right)","expect","not","toParse"]},"operators":{"distinct":5,"total":14,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":8,"physical":8},"errors":[],"lineEnd":1213,"lineStart":1206,"name":"<anon method-186>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.917,"effort":141.26,"length":14,"time":7.848,"vocabulary":11,"volume":48.432,"operands":{"distinct":6,"total":7,"identifiers":["unmatched","r","{ left( dfrac{x}{y} } \right)","expect","not","toParse"]},"operators":{"distinct":5,"total":7,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1218,"lineStart":1215,"name":"<anon method-187>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.917,"effort":141.26,"length":14,"time":7.848,"vocabulary":11,"volume":48.432,"operands":{"distinct":6,"total":7,"identifiers":["nonDelimiter","r","left$ dfrac{x}{y} \right)","expect","not","toParse"]},"operators":{"distinct":5,"total":7,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1223,"lineStart":1220,"name":"<anon method-188>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","emptyRight","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1227,"lineStart":1225,"name":"<anon method-189>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.013,"difficulty":3,"effort":119.589,"length":12,"time":6.644,"vocabulary":10,"volume":39.863,"operands":{"distinct":5,"total":6,"identifiers":["normalEmpty","r","Bigl .","expect","toParse"]},"operators":{"distinct":5,"total":6,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1232,"lineStart":1229,"name":"<anon method-190>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.013,"difficulty":3,"effort":119.589,"length":12,"time":6.644,"vocabulary":10,"volume":39.863,"operands":{"distinct":5,"total":6,"identifiers":["normalMiddle","r","left( dfrac{x}{y} middle| dfrac{y}{z} \right)","expect","toParse"]},"operators":{"distinct":5,"total":6,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1237,"lineStart":1234,"name":"<anon method-191>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.013,"difficulty":3,"effort":119.589,"length":12,"time":6.644,"vocabulary":10,"volume":39.863,"operands":{"distinct":5,"total":6,"identifiers":["multiMiddle","r","left( dfrac{x}{y} middle| dfrac{y}{z} middle/ dfrac{z}{q} \right)","expect","toParse"]},"operators":{"distinct":5,"total":6,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1242,"lineStart":1239,"name":"<anon method-192>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.013,"difficulty":3,"effort":119.589,"length":12,"time":6.644,"vocabulary":10,"volume":39.863,"operands":{"distinct":5,"total":6,"identifiers":["nestedMiddle","r","left( a^2 middle| left( b middle/ c \right) \right)","expect","toParse"]},"operators":{"distinct":5,"total":6,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1247,"lineStart":1244,"name":"<anon method-193>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.917,"effort":141.26,"length":14,"time":7.848,"vocabulary":11,"volume":48.432,"operands":{"distinct":6,"total":7,"identifiers":["unmatchedMiddle","r","(middle|dfrac{x}{y})","expect","not","toParse"]},"operators":{"distinct":5,"total":7,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1252,"lineStart":1249,"name":"<anon method-194>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.068,"difficulty":7.269,"effort":1491.165,"length":46,"time":82.843,"vocabulary":22,"volume":205.134,"operands":{"distinct":13,"total":21,"identifiers":["cases","r","leftlangle \right\rangle","left< \right>","\"\\left⟨ \\right⟩\"","leftlparen \right\rparen","left( \right)","actual","expected","it","should build \"","\" like \"","\""]},"operators":{"distinct":9,"total":25,"identifiers":["const","=","[]",",","``","forof","()","${}","function=>"]}},"paramCount":0,"sloc":{"logical":9,"physical":13},"errors":[],"lineEnd":1267,"lineStart":1255,"name":"<anon method-195>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","actual","toBuildLike","expected"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1265,"lineStart":1263,"name":"<anon method-196>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":2.778,"halstead":{"bugs":0.107,"difficulty":2.842,"effort":912.541,"length":72,"time":50.697,"vocabulary":22,"volume":321.079,"operands":{"distinct":19,"total":36,"identifiers":["it","\"should parse a simple environment\"","\"should parse an environment with argument\"","\"should parse and build an empty environment\"","\"should parse an environment with hlines\"","\"should forbid hlines outside array environment\"","\"should error when name is mismatched\"","\"should error when commands are mismatched\"","\"should error when end is missing\"","\"should error when braces are mismatched\"","\"should cooperate with infix notation\"","\"should nest\"","\"should allow \\cr and \\\\ as a line terminator\"","\"should not allow \\cr to scan for an optional size argument\"","\"should not treat [ after space as optional argument to \\\\\"","\"should eat a final newline\"","\"should grab \\arraystretch\"","\"should allow an optional argument in {matrix*} and company.\"","\"should allow blank columns\""]},"operators":{"distinct":3,"total":36,"identifiers":["()","function","function=>"]}},"paramCount":0,"sloc":{"logical":36,"physical":93},"errors":[],"lineEnd":1361,"lineStart":1269,"name":"<anon method-197>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\begin{matrix}a&b\\c&dend{matrix}","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1273,"lineStart":1271,"name":"<anon method-198>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\begin{array}{cc}a&b\\c&dend{array}","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1277,"lineStart":1275,"name":"<anon method-199>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","\begin{aligned}end{aligned}","toBuild","\begin{matrix}end{matrix}"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1282,"lineStart":1279,"name":"<anon method-200>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.018,"difficulty":2.7,"effort":145.8,"length":18,"time":8.1,"vocabulary":8,"volume":54,"operands":{"distinct":5,"total":9,"identifiers":["expect","\begin{matrix}hline a&b\\ hline c&dend{matrix}","toParse","\begin{matrix}hline a&bcr hline c&dend{matrix}","\begin{matrix}hdashline a&b\\ hdashline c&dend{matrix}"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":1288,"lineStart":1284,"name":"<anon method-201>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","hline","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1292,"lineStart":1290,"name":"<anon method-202>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","\begin{matrix}a&b\\c&dend{pmatrix}","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1296,"lineStart":1294,"name":"<anon method-203>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","\begin{matrix}a&b\\c&d\right{pmatrix}","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1300,"lineStart":1298,"name":"<anon method-204>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","\begin{matrix}a&b\\c&d","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1304,"lineStart":1302,"name":"<anon method-205>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","{\begin{matrix}a&b\\c&d}end{matrix}","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1308,"lineStart":1306,"name":"<anon method-206>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\begin{matrix}0&1over2&3\\4&5&6end{matrix}","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1312,"lineStart":1310,"name":"<anon method-207>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.03,"difficulty":4,"effort":359.434,"length":23,"time":19.969,"vocabulary":15,"volume":89.858,"operands":{"distinct":9,"total":12,"identifiers":["m1","r","\begin{pmatrix}1&2\\3&4end{pmatrix}","m2","\\begin{array}{rl}","&0\\\\0&","\\end{array}","expect","toParse"]},"operators":{"distinct":6,"total":11,"identifiers":["const","=","``","${}","()","."]}},"paramCount":0,"sloc":{"logical":5,"physical":5},"errors":[],"lineEnd":1318,"lineStart":1314,"name":"<anon method-208>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","\begin{matrix}a&bcr c&dend{matrix}","toParse","\begin{matrix}a&b\\c&dend{matrix}"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1323,"lineStart":1320,"name":"<anon method-209>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\begin{matrix}a&bcr[c]&dend{matrix}","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1327,"lineStart":1325,"name":"<anon method-210>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","\begin{matrix}a&b\\ [c]&dend{matrix}","toParse","a\\ [b]"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1332,"lineStart":1329,"name":"<anon method-211>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["m3","getParsed","\begin{matrix}a&b\\ c&d \\ end{matrix}","0","expect","body","toHaveLength","2"]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1337,"lineStart":1334,"name":"<anon method-212>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.013,"difficulty":3,"effort":119.589,"length":12,"time":6.644,"vocabulary":10,"volume":39.863,"operands":{"distinct":5,"total":6,"identifiers":["parse","getParsed","defarraystretch{1.5}\begin{matrix}a&b\\c&dend{matrix}","expect","toMatchSnapshot"]},"operators":{"distinct":5,"total":6,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1342,"lineStart":1339,"name":"<anon method-213>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.065,"difficulty":3.125,"effort":610.452,"length":50,"time":33.914,"vocabulary":15,"volume":195.345,"operands":{"distinct":12,"total":25,"identifiers":["expect","\begin{matrix*}[r] a & -1 \\ -1 & d end{matrix*}","toBuild","\begin{pmatrix*}[r] a & -1 \\ -1 & d end{pmatrix*}","\begin{bmatrix*}[r] a & -1 \\ -1 & d end{bmatrix*}","\begin{Bmatrix*}[r] a & -1 \\ -1 & d end{Bmatrix*}","\begin{vmatrix*}[r] a & -1 \\ -1 & d end{vmatrix*}","\begin{Vmatrix*}[r] a & -1 \\ -1 & d end{Vmatrix*}","\begin{matrix*} a & -1 \\ -1 & d end{matrix*}","\begin{matrix*}[] a & -1 \\ -1 & d end{matrix*}","not","toParse"]},"operators":{"distinct":3,"total":25,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":16,"physical":10},"errors":[],"lineEnd":1353,"lineStart":1344,"name":"<anon method-214>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.046,"difficulty":6.545,"effort":905.247,"length":32,"time":50.292,"vocabulary":20,"volume":138.302,"operands":{"distinct":11,"total":16,"identifiers":["parsed","getParsed","\begin{matrix*}[r] a \\ -1 & d end{matrix*}","expect","0","cols","toEqual","type","\"align\"","align","\"r\""]},"operators":{"distinct":9,"total":16,"identifiers":["const","=","``","()",".","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":1360,"lineStart":1355,"name":"<anon method-215>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.048,"difficulty":4.091,"effort":589.091,"length":36,"time":32.727,"vocabulary":16,"volume":144,"operands":{"distinct":11,"total":18,"identifiers":["sqrt","r","sqrt{x}","missingGroup","it","\"should parse square roots\"","\"should error when there is no group\"","\"should produce sqrts\"","\"should build sized square roots\"","\"should expand argument if optional argument doesn't exist\"","\"should not expand argument if optional argument exists\""]},"operators":{"distinct":5,"total":18,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":16,"physical":32},"errors":[],"lineEnd":1394,"lineStart":1363,"name":"<anon method-216>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","sqrt","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1369,"lineStart":1367,"name":"<anon method-217>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1,"effort":20.68,"length":8,"time":1.149,"vocabulary":6,"volume":20.68,"operands":{"distinct":4,"total":4,"identifiers":["expect","missingGroup","not","toParse"]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1373,"lineStart":1371,"name":"<anon method-218>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","sqrt","0","expect","type","toEqual","\"sqrt\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":1379,"lineStart":1375,"name":"<anon method-219>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","Largesqrt[3]{x}","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1383,"lineStart":1381,"name":"<anon method-220>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.02,"difficulty":3,"effort":182.753,"length":16,"time":10.153,"vocabulary":14,"volume":60.918,"operands":{"distinct":8,"total":8,"identifiers":["expect","sqrt\foo","toParseLike","\"\\sqrt123\"","Settings","macros","\"\\foo\"","\"123\""]},"operators":{"distinct":6,"total":8,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1388,"lineStart":1385,"name":"<anon method-221>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.02,"difficulty":3,"effort":182.753,"length":16,"time":10.153,"vocabulary":14,"volume":60.918,"operands":{"distinct":8,"total":8,"identifiers":["expect","sqrt[2]\foo","toParseLike","\"\\sqrt[2]{123}\"","Settings","macros","\"\\foo\"","\"123\""]},"operators":{"distinct":6,"total":8,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1393,"lineStart":1390,"name":"<anon method-222>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.846,"halstead":{"bugs":0.069,"difficulty":1.857,"effort":386.286,"length":52,"time":21.46,"vocabulary":16,"volume":208,"operands":{"distinct":14,"total":26,"identifiers":["it","\"should work\"","\"should fail if there are not enough arguments\"","\"should fail when there are missing sup/subscripts\"","\"should fail when arguments require arguments\"","\"should work when the arguments have braces\"","\"should fail when sup/subscripts require arguments\"","\"should work when sup/subscripts arguments have braces\"","\"should parse multiple primes correctly\"","\"should fail when sup/subscripts are interspersed with arguments\"","\"should succeed when sup/subscripts come after whole functions\"","\"should succeed with a sqrt around a text/frac\"","\"should fail when arguments are \\left\"","\"should succeed when there are braces around the \\left/\\right\""]},"operators":{"distinct":2,"total":26,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":26,"physical":143},"errors":[],"lineEnd":1538,"lineStart":1396,"name":"<anon method-223>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\frac 2 3","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1399,"lineStart":1397,"name":"<anon method-224>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":20,"halstead":{"bugs":0.076,"difficulty":9.429,"effort":2145.462,"length":49,"time":119.192,"vocabulary":25,"volume":227.549,"operands":{"distinct":14,"total":24,"identifiers":["missingGroups","r","\frac{x}","\textcolor{#fff}","\rule{1em}","llap","\bigl","\text","i","0","length","expect","not","toParse"]},"operators":{"distinct":11,"total":25,"identifiers":["const","=","[]",",","``","for","let","<",".","++ (postfix)","()"]}},"paramCount":0,"sloc":{"logical":10,"physical":14},"errors":[],"lineEnd":1414,"lineStart":1401,"name":"<anon method-225>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.4,"effort":115.2,"length":16,"time":6.4,"vocabulary":8,"volume":48,"operands":{"distinct":5,"total":8,"identifiers":["expect","x^","not","toParse","x_"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1419,"lineStart":1416,"name":"<anon method-226>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":16.667,"halstead":{"bugs":0.09,"difficulty":9.625,"effort":2608.65,"length":57,"time":144.925,"vocabulary":27,"volume":271.029,"operands":{"distinct":16,"total":28,"identifiers":["badArguments","r","\frac \frac x y z","\frac x \frac y z","\frac sqrt x y","\frac x sqrt y","\frac mathllap x y","\frac x mathllap y","mathllap mathllap x","sqrt mathllap x","i","0","length","expect","not","toParse"]},"operators":{"distinct":11,"total":29,"identifiers":["const","=","[]",",","``","for","let","<",".","++ (postfix)","()"]}},"paramCount":0,"sloc":{"logical":12,"physical":21},"errors":[],"lineEnd":1441,"lineStart":1421,"name":"<anon method-227>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":15.385,"halstead":{"bugs":0.094,"difficulty":9.969,"effort":2796.617,"length":59,"time":155.368,"vocabulary":27,"volume":280.538,"operands":{"distinct":16,"total":29,"identifiers":["goodArguments","r","\frac {\frac x y} z","\frac x {\frac y z}","\frac {sqrt x} y","\frac x {sqrt y}","\frac {mathllap x} y","\frac x {mathllap y}","mathllap {\frac x y}","mathllap {mathllap x}","sqrt {mathllap x}","i","0","length","expect","toParse"]},"operators":{"distinct":11,"total":30,"identifiers":["const","=","[]",",","``","for","let","<",".","++ (postfix)","()"]}},"paramCount":0,"sloc":{"logical":13,"physical":17},"errors":[],"lineEnd":1459,"lineStart":1443,"name":"<anon method-228>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":25,"halstead":{"bugs":0.062,"difficulty":9.167,"effort":1700.105,"length":41,"time":94.45,"vocabulary":23,"volume":185.466,"operands":{"distinct":12,"total":20,"identifiers":["badSupSubscripts","r","x^sqrt x","x^mathllap x","x_sqrt x","x_mathllap x","i","0","length","expect","not","toParse"]},"operators":{"distinct":11,"total":21,"identifiers":["const","=","[]",",","``","for","let","<",".","++ (postfix)","()"]}},"paramCount":0,"sloc":{"logical":8,"physical":12},"errors":[],"lineEnd":1472,"lineStart":1461,"name":"<anon method-229>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":25,"halstead":{"bugs":0.058,"difficulty":9.5,"effort":1652.219,"length":39,"time":91.79,"vocabulary":22,"volume":173.918,"operands":{"distinct":11,"total":19,"identifiers":["goodSupSubscripts","r","x^{sqrt x}","x^{mathllap x}","x_{sqrt x}","x_{mathllap x}","i","0","length","expect","toParse"]},"operators":{"distinct":11,"total":20,"identifiers":["const","=","[]",",","``","for","let","<",".","++ (postfix)","()"]}},"paramCount":0,"sloc":{"logical":8,"physical":12},"errors":[],"lineEnd":1485,"lineStart":1474,"name":"<anon method-230>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.018,"difficulty":2.7,"effort":145.8,"length":18,"time":8.1,"vocabulary":8,"volume":54,"operands":{"distinct":5,"total":9,"identifiers":["expect","x''''","toParse","x_2''","x''_2"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":1491,"lineStart":1487,"name":"<anon method-231>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.025,"difficulty":3,"effort":228.235,"length":24,"time":12.68,"vocabulary":9,"volume":76.078,"operands":{"distinct":6,"total":12,"identifiers":["expect","sqrt^23","not","toParse","\frac^234","\frac2^34"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":1497,"lineStart":1493,"name":"<anon method-232>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","sqrt2^3","toParse","\frac23^4"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1502,"lineStart":1499,"name":"<anon method-233>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.025,"difficulty":3,"effort":228.235,"length":24,"time":12.68,"vocabulary":9,"volume":76.078,"operands":{"distinct":6,"total":12,"identifiers":["expect","sqrt \frac x y","toParse","sqrt \text x","x^\frac x y","x_\text x"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":1509,"lineStart":1504,"name":"<anon method-234>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":22.222,"halstead":{"bugs":0.069,"difficulty":9.308,"effort":1920.394,"length":45,"time":106.689,"vocabulary":24,"volume":206.323,"operands":{"distinct":13,"total":22,"identifiers":["badLeftArguments","r","\frac left( x \right) y","\frac x left( y \right)","mathllap left( x \right)","sqrt left( x \right)","x^left( x \right)","i","0","length","expect","not","toParse"]},"operators":{"distinct":11,"total":23,"identifiers":["const","=","[]",",","``","for","let","<",".","++ (postfix)","()"]}},"paramCount":0,"sloc":{"logical":9,"physical":13},"errors":[],"lineEnd":1523,"lineStart":1511,"name":"<anon method-235>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":22.222,"halstead":{"bugs":0.065,"difficulty":9.625,"effort":1872.189,"length":43,"time":104.011,"vocabulary":23,"volume":194.513,"operands":{"distinct":12,"total":21,"identifiers":["goodLeftArguments","r","\frac {left( x \right)} y","\frac x {left( y \right)}","mathllap {left( x \right)}","sqrt {left( x \right)}","x^{left( x \right)}","i","0","length","expect","toParse"]},"operators":{"distinct":11,"total":22,"identifiers":["const","=","[]",",","``","for","let","<",".","++ (postfix)","()"]}},"paramCount":0,"sloc":{"logical":9,"physical":13},"errors":[],"lineEnd":1537,"lineStart":1525,"name":"<anon method-236>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should not fail\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":16},"errors":[],"lineEnd":1555,"lineStart":1540,"name":"<anon method-237>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":4.167,"halstead":{"bugs":0.098,"difficulty":3.857,"effort":1135.147,"length":72,"time":63.064,"vocabulary":17,"volume":294.297,"operands":{"distinct":14,"total":36,"identifiers":["expect","int_i^n","toBuild","iint_i^n","iiint_i^n","int\nolimits_i^n","iint\nolimits_i^n","iiint\nolimits_i^n","oint_i^n","oiint_i^n","oiiint_i^n","oint\nolimits_i^n","oiint\nolimits_i^n","oiiint\nolimits_i^n"]},"operators":{"distinct":3,"total":36,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":24,"physical":14},"errors":[],"lineEnd":1554,"lineStart":1541,"name":"<anon method-238>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["it","\"should not fail\"","\"should produce the correct style\"","\"should only change the style within its group\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":30},"errors":[],"lineEnd":1586,"lineStart":1557,"name":"<anon method-239>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.025,"difficulty":3,"effort":228.235,"length":24,"time":12.68,"vocabulary":9,"volume":76.078,"operands":{"distinct":6,"total":12,"identifiers":["expect","displaystyle x","toParse","\textstyle x","scriptstyle x","scriptscriptstyle x"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":1563,"lineStart":1558,"name":"<anon method-240>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.046,"difficulty":4.909,"effort":682.235,"length":34,"time":37.902,"vocabulary":17,"volume":138.974,"operands":{"distinct":11,"total":18,"identifiers":["displayParse","getParsed","displaystyle x","0","expect","style","toEqual","\"display\"","scriptscriptParse","scriptscriptstyle x","\"scriptscript\""]},"operators":{"distinct":6,"total":16,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":8,"physical":7},"errors":[],"lineEnd":1571,"lineStart":1565,"name":"<anon method-241>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.082,"difficulty":5.438,"effort":1333.649,"length":55,"time":74.092,"vocabulary":22,"volume":245.269,"operands":{"distinct":16,"total":29,"identifiers":["text","r","a b { c d displaystyle e f } g h","parse","getParsed","displayNode","2","body","expect","type","toEqual","\"styling\"","displayBody","toHaveLength","0","\"e\""]},"operators":{"distinct":6,"total":26,"identifiers":["const","=","``","()","[]","."]}},"paramCount":0,"sloc":{"logical":12,"physical":13},"errors":[],"lineEnd":1585,"lineStart":1573,"name":"<anon method-242>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.051,"difficulty":2.727,"effort":415.348,"length":40,"time":23.075,"vocabulary":14,"volume":152.294,"operands":{"distinct":11,"total":20,"identifiers":["it","\"should parse \\mathrm, \\mathbb, \\mathit, and \\mathnormal\"","\"should parse \\mathcal and \\mathfrak\"","\"should produce the correct fonts\"","\"should parse nested font commands\"","\"should work with \\textcolor\"","\"should not parse a series of font commands\"","\"should nest fonts correctly\"","\"should be allowed in the argument\"","\"\\boldsymbol should inherit mbin/mrel from argument\"","\"old-style fonts work like new-style fonts\""]},"operators":{"distinct":3,"total":20,"identifiers":["()","function","function=>"]}},"paramCount":0,"sloc":{"logical":20,"physical":99},"errors":[],"lineEnd":1686,"lineStart":1588,"name":"<anon method-243>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.059,"difficulty":3.6,"effort":639.436,"length":48,"time":35.524,"vocabulary":13,"volume":177.621,"operands":{"distinct":10,"total":24,"identifiers":["expect","mathrm x","toParse","mathbb x","mathit x","mathnormal x","mathrm {x + 1}","mathbb {x + 1}","mathit {x + 1}","mathnormal {x + 1}"]},"operators":{"distinct":3,"total":24,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":16,"physical":10},"errors":[],"lineEnd":1598,"lineStart":1589,"name":"<anon method-244>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","mathcal{ABC123}","toParse","mathfrak{abcABC123}"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1603,"lineStart":1600,"name":"<anon method-245>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":2.778,"halstead":{"bugs":0.258,"difficulty":10.08,"effort":7790.375,"length":156,"time":432.799,"vocabulary":31,"volume":772.855,"operands":{"distinct":25,"total":84,"identifiers":["mathbbParse","getParsed","mathbb x","0","expect","font","toEqual","\"mathbb\"","type","\"font\"","mathrmParse","mathrm x","\"mathrm\"","mathitParse","mathit x","\"mathit\"","mathnormalParse","mathnormal x","\"mathnormal\"","mathcalParse","mathcal C","\"mathcal\"","mathfrakParse","mathfrak C","\"mathfrak\""]},"operators":{"distinct":6,"total":72,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":36,"physical":25},"errors":[],"lineEnd":1629,"lineStart":1605,"name":"<anon method-246>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.882,"halstead":{"bugs":0.128,"difficulty":8.118,"effort":3121.258,"length":85,"time":173.403,"vocabulary":23,"volume":384.503,"operands":{"distinct":17,"total":46,"identifiers":["nestedParse","getParsed","mathbb{R \neq mathrm{R}}","0","expect","font","toEqual","\"mathbb\"","type","\"font\"","bbBody","body","toHaveLength","3","\"mathord\"","2","\"mathrm\""]},"operators":{"distinct":6,"total":39,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":17,"physical":12},"errors":[],"lineEnd":1642,"lineStart":1631,"name":"<anon method-247>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.692,"halstead":{"bugs":0.091,"difficulty":6.188,"effort":1683.157,"length":61,"time":93.509,"vocabulary":22,"volume":272.025,"operands":{"distinct":16,"total":33,"identifiers":["colorMathbbParse","getParsed","\textcolor{blue}{mathbb R}","0","expect","type","toEqual","\"color\"","color","\"blue\"","body","toHaveLength","1","\"font\"","font","\"mathbb\""]},"operators":{"distinct":6,"total":28,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":13,"physical":9},"errors":[],"lineEnd":1652,"lineStart":1644,"name":"<anon method-248>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","mathbb mathrm R","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1656,"lineStart":1654,"name":"<anon method-249>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.15,"difficulty":8.211,"effort":3698.465,"length":97,"time":205.47,"vocabulary":25,"volume":450.454,"operands":{"distinct":19,"total":52,"identifiers":["bf","getParsed","mathbf{amathrm{b}c}","0","expect","type","toEqual","\"font\"","font","\"mathbf\"","body","toHaveLength","3","text","\"a\"","1","\"mathrm\"","2","\"c\""]},"operators":{"distinct":6,"total":45,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":16,"physical":10},"errors":[],"lineEnd":1667,"lineStart":1658,"name":"<anon method-250>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","e^mathbf{x}","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1671,"lineStart":1669,"name":"<anon method-251>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.013,"difficulty":3,"effort":119.589,"length":12,"time":6.644,"vocabulary":10,"volume":39.863,"operands":{"distinct":5,"total":6,"identifiers":["built","getBuilt","a\boldsymbol{}b\boldsymbol{=}c\boldsymbol{+}d\boldsymbol{++}e\boldsymbol{xyz}f","expect","toMatchSnapshot"]},"operators":{"distinct":5,"total":6,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1676,"lineStart":1673,"name":"<anon method-252>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.556,"halstead":{"bugs":0.056,"difficulty":1.714,"effort":288,"length":42,"time":16,"vocabulary":16,"volume":168,"operands":{"distinct":14,"total":24,"identifiers":["expect","\rm xyz","toParseLike","mathrm{xyz}","sf xyz","mathsf{xyz}","\tt xyz","mathtt{xyz}","\bf xyz","mathbf{xyz}","it xyz","mathit{xyz}","cal xyz","mathcal{xyz}"]},"operators":{"distinct":2,"total":18,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":18,"physical":8},"errors":[],"lineEnd":1685,"lineStart":1678,"name":"<anon method-253>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should not fail\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":10},"errors":[],"lineEnd":1697,"lineStart":1688,"name":"<anon method-254>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.692,"halstead":{"bugs":0.046,"difficulty":2.85,"effort":390.211,"length":37,"time":21.678,"vocabulary":13,"volume":136.916,"operands":{"distinct":10,"total":19,"identifiers":["expect","pmb{mu}","toBuild","pmb{=}","pmb{+}","pmb{\frac{x^2}{x_1}}","pmb{}","null","toParseLike","pmb{1}"]},"operators":{"distinct":3,"total":18,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":13,"physical":8},"errors":[],"lineEnd":1696,"lineStart":1689,"name":"<anon method-255>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.025,"difficulty":1.714,"effort":130.42,"length":24,"time":7.246,"vocabulary":9,"volume":76.078,"operands":{"distinct":7,"total":12,"identifiers":["it","\"should parse and build text in \\raisebox\"","\"should parse and build math in non-strict \\vcenter\"","\"should fail to parse math in \\raisebox\"","\"should fail to parse math in an \\hbox\"","\"should fail to build, given an unbraced length\"","\"should build math in an hbox when math mode is set\""]},"operators":{"distinct":2,"total":12,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":12,"physical":29},"errors":[],"lineEnd":1727,"lineStart":1699,"name":"<anon method-256>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.014,"difficulty":2.4,"effort":100.8,"length":14,"time":5.6,"vocabulary":8,"volume":42,"operands":{"distinct":5,"total":8,"identifiers":["expect","\raisebox{5pt}{text}","toBuild","strictSettings","\raisebox{-5pt}{text}"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1703,"lineStart":1700,"name":"<anon method-257>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\u000bcenter{\frac a b}","toBuild","nonstrictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1707,"lineStart":1705,"name":"<anon method-258>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.019,"difficulty":2.5,"effort":142.647,"length":18,"time":7.925,"vocabulary":9,"volume":57.059,"operands":{"distinct":6,"total":10,"identifiers":["expect","\raisebox{5pt}{\frac a b}","not","toParse","nonstrictSettings","\raisebox{-5pt}{\frac a b}"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1712,"lineStart":1709,"name":"<anon method-259>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.009,"difficulty":1.5,"effort":40.5,"length":9,"time":2.25,"vocabulary":8,"volume":27,"operands":{"distinct":5,"total":5,"identifiers":["expect","hbox{\frac a b}","not","toParse","nonstrictSettings"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1716,"lineStart":1714,"name":"<anon method-260>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.019,"difficulty":2.5,"effort":142.647,"length":18,"time":7.925,"vocabulary":9,"volume":57.059,"operands":{"distinct":6,"total":10,"identifiers":["expect","\raisebox5pt{text}","not","toBuild","strictSettings","\raisebox-5pt{text}"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1721,"lineStart":1718,"name":"<anon method-261>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","a + \u000bcenter{hbox{$\frac{\frac a b}c$}}","toBuild","strictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":1726,"lineStart":1723,"name":"<anon method-262>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":4.167,"halstead":{"bugs":0.063,"difficulty":1.846,"effort":346.211,"length":48,"time":19.234,"vocabulary":15,"volume":187.531,"operands":{"distinct":13,"total":24,"identifiers":["it","\"should parse comments at the end of a line\"","\"should parse comments at the start of a line\"","\"should parse multiple lines of comments in a row\"","\"should parse comments between subscript and superscript\"","\"should parse comments in size and color groups\"","\"should parse comments before an expression\"","\"should parse comments before and between \\hline\"","\"should parse comments in the macro definition\"","\"should not expand nor ignore spaces after a command sequence in a comment\"","\"should not parse a comment without newline in strict mode\"","\"should not produce or consume space\"","\"should not include comments in the output\""]},"operators":{"distinct":2,"total":24,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":24,"physical":57},"errors":[],"lineEnd":1785,"lineStart":1729,"name":"<anon method-263>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","\"a^2 + b^2 = c^2 % Pythagoras' Theorem\n\"","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1732,"lineStart":1730,"name":"<anon method-264>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","\"% comment\n\"","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1736,"lineStart":1734,"name":"<anon method-265>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","\"% comment 1\n% comment 2\n\"","toParse"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1740,"lineStart":1738,"name":"<anon method-266>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.024,"difficulty":2.25,"effort":163.458,"length":21,"time":9.081,"vocabulary":11,"volume":72.648,"operands":{"distinct":8,"total":12,"identifiers":["expect","\"x_3 %comment\n^2\"","toParseLike","x_3^2","\"x^ %comment\n{2}\"","x^{2}","\"x^ %comment\n\\frac{1}{2}\"","x^\frac{1}{2}"]},"operators":{"distinct":3,"total":9,"identifiers":[".","()","``"]}},"paramCount":0,"sloc":{"logical":9,"physical":5},"errors":[],"lineEnd":1746,"lineStart":1742,"name":"<anon method-267>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.017,"difficulty":1.8,"effort":90.958,"length":18,"time":5.053,"vocabulary":7,"volume":50.532,"operands":{"distinct":5,"total":9,"identifiers":["expect","\"\\kern{1 %kern\nem}\"","toParse","\"\\kern1 %kern\nem\"","\"\\color{#f00%red\n}\""]},"operators":{"distinct":2,"total":9,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":1752,"lineStart":1748,"name":"<anon method-268>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\"%comment\n{2}\"","toParseLike","{2}"]},"operators":{"distinct":3,"total":3,"identifiers":[".","()","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":1756,"lineStart":1754,"name":"<anon method-269>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":45,"length":10,"time":2.5,"vocabulary":8,"volume":30,"operands":{"distinct":5,"total":5,"identifiers":["expect","\"\\begin{matrix}a&b\\\\ %hline\n\"","\"\\hline %hline\n\"","\"\\hline c&d\\end{matrix}\"","toParse"]},"operators":{"distinct":3,"total":5,"identifiers":["()",".","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":1762,"lineStart":1758,"name":"<anon method-270>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\"\\def\\foo{1 %}\n2}\n\\foo\"","toParseLike","12"]},"operators":{"distinct":3,"total":3,"identifiers":[".","()","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":1766,"lineStart":1764,"name":"<anon method-271>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\"\\def\\foo{1\n2}\nx %\\foo\n\"","toParseLike","x"]},"operators":{"distinct":3,"total":3,"identifiers":[".","()","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":1770,"lineStart":1768,"name":"<anon method-272>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.017,"difficulty":2.25,"effort":114.117,"length":16,"time":6.34,"vocabulary":9,"volume":50.719,"operands":{"distinct":6,"total":9,"identifiers":["expect","x%y","not","toParse","strictSettings","nonstrictSettings"]},"operators":{"distinct":3,"total":7,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":1775,"lineStart":1772,"name":"<anon method-273>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.015,"difficulty":2,"effort":88.758,"length":14,"time":4.931,"vocabulary":9,"volume":44.379,"operands":{"distinct":6,"total":8,"identifiers":["expect","\"\\text{hello% comment 1\nworld}\"","toParseLike","\text{helloworld}","\"\\text{hello% comment\n\nworld}\"","\text{hello world}"]},"operators":{"distinct":3,"total":6,"identifiers":[".","()","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":4},"errors":[],"lineEnd":1780,"lineStart":1777,"name":"<anon method-274>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\"5 % comment\n\"","toParseLike","5"]},"operators":{"distinct":3,"total":3,"identifiers":[".","()","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":1784,"lineStart":1782,"name":"<anon method-275>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":2.5,"halstead":{"bugs":0.121,"difficulty":1.905,"effort":689.305,"length":80,"time":38.295,"vocabulary":23,"volume":361.885,"operands":{"distinct":21,"total":40,"identifiers":["it","\"should render \\mathbb{R} with the correct font\"","\"should render \\mathrm{R} with the correct font\"","\"should render \\mathcal{R} with the correct font\"","\"should render \\mathfrak{R} with the correct font\"","\"should render \\text{R} with the correct font\"","\"should render \\textit{R} with the correct font\"","\"should render \\text{\\textit{R}} with the correct font\"","\"should render \\textup{R} with the correct font\"","\"should render \\text{R\\textit{S}T} with the correct fonts\"","\"should render \\textbf{R } with the correct font\"","\"should render \\textmd{R} with the correct font\"","\"should render \\textsf{R} with the correct font\"","\"should render \\textsf{\\textit{R}G\\textbf{B}} with the correct font\"","\"should render \\textsf{\\textbf{$\\mathrm{A}$}} with the correct font\"","\"should render \\textsf{\\textbf{$\\mathrm{\\textsf{A}}$}} with the correct font\"","\"should render \\texttt{R} with the correct font\"","\"should render a combination of font and color changes\"","\"should render wide characters with mord and with the correct font\"","\"should throw TypeError when the expression is of the wrong type\"","\"should not throw TypeError when the expression is a supported type\""]},"operators":{"distinct":2,"total":40,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":40,"physical":139},"errors":[],"lineEnd":1925,"lineStart":1787,"name":"<anon method-276>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["markup","katex","renderToString","r","mathbb{R}","expect","toContain","\"<span class=\"mord mathbb\">R</span>\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":1791,"lineStart":1788,"name":"<anon method-277>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["markup","katex","renderToString","r","mathrm{R}","expect","toContain","\"<span class=\"mord mathrm\">R</span>\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":1796,"lineStart":1793,"name":"<anon method-278>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["markup","katex","renderToString","r","mathcal{R}","expect","toContain","\"<span class=\"mord mathcal\">R</span>\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":1801,"lineStart":1798,"name":"<anon method-279>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["markup","katex","renderToString","r","mathfrak{R}","expect","toContain","\"<span class=\"mord mathfrak\">R</span>\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":1806,"lineStart":1803,"name":"<anon method-280>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["markup","katex","renderToString","r","\text{R}","expect","toContain","\"<span class=\"mord\">R</span>\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":1811,"lineStart":1808,"name":"<anon method-281>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["markup","katex","renderToString","r","\textit{R}","expect","toContain","\"<span class=\"mord textit\">R</span>\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":1816,"lineStart":1813,"name":"<anon method-282>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["markup","katex","renderToString","r","\text{\textit{R}}","expect","toContain","\"<span class=\"mord textit\">R</span>\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":1821,"lineStart":1818,"name":"<anon method-283>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.071,"difficulty":5.192,"effort":1104.228,"length":51,"time":61.346,"vocabulary":18,"volume":212.666,"operands":{"distinct":13,"total":27,"identifiers":["markup1","katex","renderToString","r","\textup{R}","expect","toContain","\"<span class=\"mord textup\">R</span>\"","markup2","\textit{\textup{R}}","markup3","\textup{\textit{R}}","\"<span class=\"mord textit\">R</span>\""]},"operators":{"distinct":5,"total":24,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":15,"physical":8},"errors":[],"lineEnd":1830,"lineStart":1823,"name":"<anon method-284>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.04,"difficulty":4.25,"effort":514.733,"length":31,"time":28.596,"vocabulary":15,"volume":121.114,"operands":{"distinct":10,"total":17,"identifiers":["markup","katex","renderToString","r","\text{R\textit{S}T}","expect","toContain","\"<span class=\"mord\">R</span>\"","\"<span class=\"mord textit\">S</span>\"","\"<span class=\"mord\">T</span>\""]},"operators":{"distinct":5,"total":14,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":9,"physical":6},"errors":[],"lineEnd":1837,"lineStart":1832,"name":"<anon method-285>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["markup","katex","renderToString","r","\textbf{R }","expect","toContain","\"<span class=\"mord textbf\">R </span>\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":1842,"lineStart":1839,"name":"<anon method-286>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.071,"difficulty":5.192,"effort":1104.228,"length":51,"time":61.346,"vocabulary":18,"volume":212.666,"operands":{"distinct":13,"total":27,"identifiers":["markup1","katex","renderToString","r","\textmd{R}","expect","toContain","\"<span class=\"mord textmd\">R</span>\"","markup2","\textbf{\textmd{R}}","markup3","\textmd{\textbf{R}}","\"<span class=\"mord textbf\">R</span>\""]},"operators":{"distinct":5,"total":24,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":15,"physical":8},"errors":[],"lineEnd":1851,"lineStart":1844,"name":"<anon method-287>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["markup","katex","renderToString","r","\textsf{R}","expect","toContain","\"<span class=\"mord textsf\">R</span>\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":1856,"lineStart":1853,"name":"<anon method-288>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.04,"difficulty":4.25,"effort":514.733,"length":31,"time":28.596,"vocabulary":15,"volume":121.114,"operands":{"distinct":10,"total":17,"identifiers":["markup","katex","renderToString","r","\textsf{\textit{R}G\textbf{B}}","expect","toContain","\"<span class=\"mord textsf textit\">R</span>\"","\"<span class=\"mord textsf\">G</span>\"","\"<span class=\"mord textsf textbf\">B</span>\""]},"operators":{"distinct":5,"total":14,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":9,"physical":6},"errors":[],"lineEnd":1863,"lineStart":1858,"name":"<anon method-289>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["markup","katex","renderToString","r","\textsf{\textbf{$mathrm{A}$}}","expect","toContain","\"<span class=\"mord mathrm\">A</span>\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":1868,"lineStart":1865,"name":"<anon method-290>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["markup","katex","renderToString","r","\textsf{\textbf{$mathrm{\textsf{A}}$}}","expect","toContain","\"<span class=\"mord textsf textbf\">A</span>\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":1873,"lineStart":1870,"name":"<anon method-291>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.021,"difficulty":2.813,"effort":176.927,"length":17,"time":9.829,"vocabulary":13,"volume":62.907,"operands":{"distinct":8,"total":9,"identifiers":["markup","katex","renderToString","r","\texttt{R}","expect","toContain","\"<span class=\"mord texttt\">R</span>\""]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":1878,"lineStart":1875,"name":"<anon method-292>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.052,"difficulty":5.5,"effort":859.516,"length":40,"time":47.751,"vocabulary":15,"volume":156.276,"operands":{"distinct":10,"total":22,"identifiers":["markup","katex","renderToString","r","\textcolor{blue}{mathbb R}","span","\"<span class=\"mord mathbb\" style=\"color:blue;\">R</span>\"","expect","toContain","mathbb{\textcolor{blue}{R}}"]},"operators":{"distinct":5,"total":18,"identifiers":["let","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":12,"physical":9},"errors":[],"lineEnd":1888,"lineStart":1880,"name":"<anon method-293>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.059,"difficulty":4.929,"effort":873.338,"length":41,"time":48.519,"vocabulary":20,"volume":177.199,"operands":{"distinct":14,"total":23,"identifiers":["markup","katex","renderToString","String","fromCharCode","55349","56320","expect","toContain","\"<span class=\"mord mathbf\">A</span>\"","\" = \"","56346","toBuildLike","mathbf A = mathbf a"]},"operators":{"distinct":6,"total":18,"identifiers":["const","=","()",".","+","``"]}},"paramCount":0,"sloc":{"logical":10,"physical":8},"errors":[],"lineEnd":1897,"lineStart":1890,"name":"<anon method-294>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.03,"difficulty":7.5,"effort":678.553,"length":35,"time":37.697,"vocabulary":6,"volume":90.474,"operands":{"distinct":3,"total":15,"identifiers":["expect","toThrowError","TypeError"]},"operators":{"distinct":3,"total":20,"identifiers":["()",".","function"]}},"paramCount":0,"sloc":{"logical":15,"physical":17},"errors":[],"lineEnd":1915,"lineStart":1899,"name":"<anon method-295>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.008,"difficulty":2,"effort":48,"length":8,"time":2.667,"vocabulary":8,"volume":24,"operands":{"distinct":4,"total":4,"identifiers":["katex","renderToString","badInputType","\"yes\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","{}",":"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1902,"lineStart":1900,"name":"<anon method-296>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0.008,"difficulty":2,"effort":48,"length":8,"time":2.667,"vocabulary":8,"volume":24,"operands":{"distinct":4,"total":4,"identifiers":["katex","renderToString","1","2"]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","[]",","]}},"paramCount":0,"sloc":{"logical":1,"physical":3},"errors":[],"lineEnd":1905,"lineStart":1903,"name":"<anon method-297>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0.004,"difficulty":1,"effort":11.61,"length":5,"time":0.645,"vocabulary":5,"volume":11.61,"operands":{"distinct":3,"total":3,"identifiers":["katex","renderToString","undefined"]},"operators":{"distinct":2,"total":2,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":1,"physical":3},"errors":[],"lineEnd":1908,"lineStart":1906,"name":"<anon method-298>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0.004,"difficulty":1,"effort":11.61,"length":5,"time":0.645,"vocabulary":5,"volume":11.61,"operands":{"distinct":3,"total":3,"identifiers":["katex","renderToString","null"]},"operators":{"distinct":2,"total":2,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":1,"physical":3},"errors":[],"lineEnd":1911,"lineStart":1909,"name":"<anon method-299>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0.004,"difficulty":1,"effort":11.61,"length":5,"time":0.645,"vocabulary":5,"volume":11.61,"operands":{"distinct":3,"total":3,"identifiers":["katex","renderToString","1.234"]},"operators":{"distinct":2,"total":2,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":1,"physical":3},"errors":[],"lineEnd":1914,"lineStart":1912,"name":"<anon method-300>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.017,"difficulty":3,"effort":151.597,"length":18,"time":8.422,"vocabulary":7,"volume":50.532,"operands":{"distinct":4,"total":8,"identifiers":["expect","not","toThrowError","TypeError"]},"operators":{"distinct":3,"total":10,"identifiers":["()",".","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":8},"errors":[],"lineEnd":1924,"lineStart":1917,"name":"<anon method-301>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["katex","renderToString","r","sqrt{123}"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1920,"lineStart":1918,"name":"<anon method-302>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["katex","renderToString","String","r","sqrt{123}"]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","new","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":1923,"lineStart":1921,"name":"<anon method-303>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.333,"halstead":{"bugs":0.166,"difficulty":7.95,"effort":3961.061,"length":106,"time":220.059,"vocabulary":26,"volume":498.247,"operands":{"distinct":20,"total":53,"identifiers":["contents","r","Ax2komegaOmegaimath+","it","\"should render \"","\" with the correct mathvariants\"","\"should render \\mathbb{\"","\"} with the correct mathvariants\"","\"should render \\mathrm{\"","\"should render \\mathit{\"","\"should render \\mathnormal{\"","\"should render \\mathbf{\"","\"should render \\mathcal{\"","\"should render \\mathfrak{\"","\"should render \\mathscr{\"","\"should render \\mathsf{\"","\"should render \\mathsfit{\"","\"should render a combination of font and color changes\"","\"should render text as <mtext>\"","\"should render math within text as side-by-side children\""]},"operators":{"distinct":6,"total":53,"identifiers":["const","=","``","()","+","function"]}},"paramCount":0,"sloc":{"logical":30,"physical":180},"errors":[],"lineEnd":2107,"lineStart":1928,"name":"<anon method-304>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.263,"halstead":{"bugs":0.095,"difficulty":4.625,"effort":1319.269,"length":66,"time":73.293,"vocabulary":20,"volume":285.247,"operands":{"distinct":16,"total":37,"identifiers":["tree","getParsed","contents","markup","buildMathML","defaultOptions","toMarkup","expect","toContain","\"<mi>A</mi>\"","\"<mi>x</mi>\"","\"<mn>2</mn>\"","\"<mi>ω</mi>\"","\"<mi mathvariant=\"normal\">Ω</mi>\"","\"<mi mathvariant=\"normal\">ı</mi>\"","\"<mo>+</mo>\""]},"operators":{"distinct":4,"total":29,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":19,"physical":11},"errors":[],"lineEnd":1941,"lineStart":1931,"name":"<anon method-305>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.115,"difficulty":6.474,"effort":2224.652,"length":74,"time":123.592,"vocabulary":25,"volume":343.645,"operands":{"distinct":19,"total":41,"identifiers":["tex","contents","\\mathbb{","}","tree","getParsed","markup","buildMathML","defaultOptions","toMarkup","expect","toContain","\"<mi mathvariant=\"double-struck\">A</mi>\"","\"<mi mathvariant=\"double-struck\">x</mi>\"","\"<mn mathvariant=\"double-struck\">2</mn>\"","\"<mi mathvariant=\"double-struck\">ω</mi>\"","\"<mi mathvariant=\"double-struck\">Ω</mi>\"","\"<mi mathvariant=\"double-struck\">ı</mi>\"","\"<mo>+</mo>\""]},"operators":{"distinct":6,"total":33,"identifiers":["const","=","``","${}","()","."]}},"paramCount":0,"sloc":{"logical":20,"physical":12},"errors":[],"lineEnd":1954,"lineStart":1943,"name":"<anon method-306>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.115,"difficulty":6.474,"effort":2224.652,"length":74,"time":123.592,"vocabulary":25,"volume":343.645,"operands":{"distinct":19,"total":41,"identifiers":["tex","contents","\\mathrm{","}","tree","getParsed","markup","buildMathML","defaultOptions","toMarkup","expect","toContain","\"<mi mathvariant=\"normal\">A</mi>\"","\"<mi mathvariant=\"normal\">x</mi>\"","\"<mn>2</mn>\"","\"<mi>ω</mi>\"","\"<mi mathvariant=\"normal\">Ω</mi>\"","\"<mi mathvariant=\"normal\">ı</mi>\"","\"<mo>+</mo>\""]},"operators":{"distinct":6,"total":33,"identifiers":["const","=","``","${}","()","."]}},"paramCount":0,"sloc":{"logical":20,"physical":12},"errors":[],"lineEnd":1967,"lineStart":1956,"name":"<anon method-307>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.115,"difficulty":6.474,"effort":2224.652,"length":74,"time":123.592,"vocabulary":25,"volume":343.645,"operands":{"distinct":19,"total":41,"identifiers":["tex","contents","\\mathit{","}","tree","getParsed","markup","buildMathML","defaultOptions","toMarkup","expect","toContain","\"<mi>A</mi>\"","\"<mi>x</mi>\"","\"<mn mathvariant=\"italic\">2</mn>\"","\"<mi>ω</mi>\"","\"<mi>Ω</mi>\"","\"<mi>ı</mi>\"","\"<mo>+</mo>\""]},"operators":{"distinct":6,"total":33,"identifiers":["const","=","``","${}","()","."]}},"paramCount":0,"sloc":{"logical":20,"physical":12},"errors":[],"lineEnd":1980,"lineStart":1969,"name":"<anon method-308>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.115,"difficulty":6.474,"effort":2224.652,"length":74,"time":123.592,"vocabulary":25,"volume":343.645,"operands":{"distinct":19,"total":41,"identifiers":["tex","contents","\\mathnormal{","}","tree","getParsed","markup","buildMathML","defaultOptions","toMarkup","expect","toContain","\"<mi>A</mi>\"","\"<mi>x</mi>\"","\"<mn>2</mn>\"","\"<mi>ω</mi>\"","\"<mi mathvariant=\"normal\">Ω</mi>\"","\"<mi mathvariant=\"normal\">ı</mi>\"","\"<mo>+</mo>\""]},"operators":{"distinct":6,"total":33,"identifiers":["const","=","``","${}","()","."]}},"paramCount":0,"sloc":{"logical":20,"physical":12},"errors":[],"lineEnd":1993,"lineStart":1982,"name":"<anon method-309>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.115,"difficulty":6.474,"effort":2224.652,"length":74,"time":123.592,"vocabulary":25,"volume":343.645,"operands":{"distinct":19,"total":41,"identifiers":["tex","contents","\\mathbf{","}","tree","getParsed","markup","buildMathML","defaultOptions","toMarkup","expect","toContain","\"<mi mathvariant=\"bold\">A</mi>\"","\"<mi mathvariant=\"bold\">x</mi>\"","\"<mn mathvariant=\"bold\">2</mn>\"","\"<mi mathvariant=\"bold\">ω</mi>\"","\"<mi mathvariant=\"bold\">Ω</mi>\"","\"<mi mathvariant=\"bold\">ı</mi>\"","\"<mo>+</mo>\""]},"operators":{"distinct":6,"total":33,"identifiers":["const","=","``","${}","()","."]}},"paramCount":0,"sloc":{"logical":20,"physical":12},"errors":[],"lineEnd":2006,"lineStart":1995,"name":"<anon method-310>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.115,"difficulty":6.474,"effort":2224.652,"length":74,"time":123.592,"vocabulary":25,"volume":343.645,"operands":{"distinct":19,"total":41,"identifiers":["tex","contents","\\mathcal{","}","tree","getParsed","markup","buildMathML","defaultOptions","toMarkup","expect","toContain","\"<mi mathvariant=\"script\">A</mi>\"","\"<mi mathvariant=\"script\">x</mi>\"","\"<mn mathvariant=\"script\">2</mn>\"","\"<mi mathvariant=\"script\">ω</mi>\"","\"<mi mathvariant=\"script\">Ω</mi>\"","\"<mi mathvariant=\"script\">ı</mi>\"","\"<mo>+</mo>\""]},"operators":{"distinct":6,"total":33,"identifiers":["const","=","``","${}","()","."]}},"paramCount":0,"sloc":{"logical":20,"physical":12},"errors":[],"lineEnd":2019,"lineStart":2008,"name":"<anon method-311>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.115,"difficulty":6.474,"effort":2224.652,"length":74,"time":123.592,"vocabulary":25,"volume":343.645,"operands":{"distinct":19,"total":41,"identifiers":["tex","contents","\\mathfrak{","}","tree","getParsed","markup","buildMathML","defaultOptions","toMarkup","expect","toContain","\"<mi mathvariant=\"fraktur\">A</mi>\"","\"<mi mathvariant=\"fraktur\">x</mi>\"","\"<mn mathvariant=\"fraktur\">2</mn>\"","\"<mi mathvariant=\"fraktur\">ω</mi>\"","\"<mi mathvariant=\"fraktur\">Ω</mi>\"","\"<mi mathvariant=\"fraktur\">ı</mi>\"","\"<mo>+</mo>\""]},"operators":{"distinct":6,"total":33,"identifiers":["const","=","``","${}","()","."]}},"paramCount":0,"sloc":{"logical":20,"physical":12},"errors":[],"lineEnd":2032,"lineStart":2021,"name":"<anon method-312>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.115,"difficulty":6.474,"effort":2224.652,"length":74,"time":123.592,"vocabulary":25,"volume":343.645,"operands":{"distinct":19,"total":41,"identifiers":["tex","contents","\\mathscr{","}","tree","getParsed","markup","buildMathML","defaultOptions","toMarkup","expect","toContain","\"<mi mathvariant=\"script\">A</mi>\"","\"<mi mathvariant=\"script\">x</mi>\"","\"<mn mathvariant=\"script\">2</mn>\"","\"<mi mathvariant=\"script\">ω</mi>\"","\"<mi mathvariant=\"script\">Ω</mi>\"","\"<mi mathvariant=\"script\">ı</mi>\"","\"<mo>+</mo>\""]},"operators":{"distinct":6,"total":33,"identifiers":["const","=","``","${}","()","."]}},"paramCount":0,"sloc":{"logical":20,"physical":12},"errors":[],"lineEnd":2045,"lineStart":2034,"name":"<anon method-313>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.115,"difficulty":6.474,"effort":2224.652,"length":74,"time":123.592,"vocabulary":25,"volume":343.645,"operands":{"distinct":19,"total":41,"identifiers":["tex","contents","\\mathsf{","}","tree","getParsed","markup","buildMathML","defaultOptions","toMarkup","expect","toContain","\"<mi mathvariant=\"sans-serif\">A</mi>\"","\"<mi mathvariant=\"sans-serif\">x</mi>\"","\"<mn mathvariant=\"sans-serif\">2</mn>\"","\"<mi mathvariant=\"sans-serif\">ω</mi>\"","\"<mi mathvariant=\"sans-serif\">Ω</mi>\"","\"<mi mathvariant=\"sans-serif\">ı</mi>\"","\"<mo>+</mo>\""]},"operators":{"distinct":6,"total":33,"identifiers":["const","=","``","${}","()","."]}},"paramCount":0,"sloc":{"logical":20,"physical":12},"errors":[],"lineEnd":2058,"lineStart":2047,"name":"<anon method-314>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.115,"difficulty":6.474,"effort":2224.652,"length":74,"time":123.592,"vocabulary":25,"volume":343.645,"operands":{"distinct":19,"total":41,"identifiers":["tex","contents","\\mathsfit{","}","tree","getParsed","markup","buildMathML","defaultOptions","toMarkup","expect","toContain","\"<mi mathvariant=\"sans-serif-italic\">A</mi>\"","\"<mi mathvariant=\"sans-serif-italic\">x</mi>\"","\"<mn mathvariant=\"sans-serif-italic\">2</mn>\"","\"<mi mathvariant=\"sans-serif-italic\">ω</mi>\"","\"<mi mathvariant=\"sans-serif-italic\">Ω</mi>\"","\"<mi mathvariant=\"sans-serif-italic\">ı</mi>\"","\"<mo>+</mo>\""]},"operators":{"distinct":6,"total":33,"identifiers":["const","=","``","${}","()","."]}},"paramCount":0,"sloc":{"logical":20,"physical":12},"errors":[],"lineEnd":2071,"lineStart":2060,"name":"<anon method-315>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.107,"difficulty":7.5,"effort":2408.093,"length":72,"time":133.783,"vocabulary":22,"volume":321.079,"operands":{"distinct":16,"total":40,"identifiers":["tex","r","\textcolor{blue}{mathbb R}","tree","getParsed","markup","buildMathML","defaultOptions","toMarkup","node","\"<mstyle mathcolor=\"blue\">\"","\"<mi mathvariant=\"double-struck\">R</mi>\"","\"</mstyle>\"","expect","toContain","mathbb{\textcolor{blue}{R}}"]},"operators":{"distinct":6,"total":32,"identifiers":["let","=","``","()",".","+"]}},"paramCount":0,"sloc":{"logical":20,"physical":18},"errors":[],"lineEnd":2090,"lineStart":2073,"name":"<anon method-316>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.041,"difficulty":3.333,"effort":408.746,"length":30,"time":22.708,"vocabulary":17,"volume":122.624,"operands":{"distinct":12,"total":16,"identifiers":["tex","r","\text{for }","tree","getParsed","markup","buildMathML","defaultOptions","toMarkup","expect","toContain","\"<mtext>for </mtext>\""]},"operators":{"distinct":5,"total":14,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":9,"physical":6},"errors":[],"lineEnd":2097,"lineStart":2092,"name":"<anon method-317>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":9.091,"halstead":{"bugs":0.051,"difficulty":3.846,"effort":593.412,"length":37,"time":32.967,"vocabulary":18,"volume":154.287,"operands":{"distinct":13,"total":20,"identifiers":["tex","r","\text{graph: $y = mx + b$}","tree","getParsed","markup","buildMathML","defaultOptions","toMarkup","expect","toContain","\"<mrow><mtext>graph: </mtext>\"","\"<mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi>\""]},"operators":{"distinct":5,"total":17,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":11,"physical":8},"errors":[],"lineEnd":2106,"lineStart":2099,"name":"<anon method-318>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.692,"halstead":{"bugs":0.036,"difficulty":3.889,"effort":414.579,"length":28,"time":23.032,"vocabulary":14,"volume":106.606,"operands":{"distinct":9,"total":14,"identifiers":["img","\"\\includegraphics[height=0.9em, totalheight=0.9em, width=0.9em, alt=KA logo]{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}\"","it","\"should not fail\"","\"should produce mords\"","\"should not render without trust setting\"","\"should render with trust setting\"","\"should escape source\"","\"should escape alt\""]},"operators":{"distinct":5,"total":14,"identifiers":["const","=","()","function","function=>"]}},"paramCount":0,"sloc":{"logical":13,"physical":32},"errors":[],"lineEnd":2140,"lineStart":2109,"name":"<anon method-319>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","img","toBuild","trustSettings"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2113,"lineStart":2111,"name":"<anon method-320>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.016,"difficulty":1.5,"effort":72.648,"length":14,"time":4.036,"vocabulary":11,"volume":48.432,"operands":{"distinct":8,"total":8,"identifiers":["expect","getBuilt","img","trustSettings","0","classes","toContain","\"mord\""]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","[]"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":2117,"lineStart":2115,"name":"<anon method-321>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.013,"difficulty":2.4,"effort":91.294,"length":12,"time":5.072,"vocabulary":9,"volume":38.039,"operands":{"distinct":5,"total":6,"identifiers":["built","getBuilt","img","expect","toMatchSnapshot"]},"operators":{"distinct":4,"total":6,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2122,"lineStart":2119,"name":"<anon method-322>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.014,"difficulty":2.333,"effort":100.765,"length":13,"time":5.598,"vocabulary":10,"volume":43.185,"operands":{"distinct":6,"total":7,"identifiers":["built","getBuilt","img","trustSettings","expect","toMatchSnapshot"]},"operators":{"distinct":4,"total":6,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2127,"lineStart":2124,"name":"<anon method-323>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.019,"difficulty":2.25,"effort":129.059,"length":16,"time":7.17,"vocabulary":12,"volume":57.359,"operands":{"distinct":8,"total":9,"identifiers":["built","katex","renderToString","\"\\includegraphics{'\"}\"","trustSettings","expect","toContain","\"<img src=\"&#x27;&quot;\"\""]},"operators":{"distinct":4,"total":7,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":2133,"lineStart":2129,"name":"<anon method-324>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.019,"difficulty":2.25,"effort":129.059,"length":16,"time":7.17,"vocabulary":12,"volume":57.359,"operands":{"distinct":8,"total":9,"identifiers":["built","katex","renderToString","\"\\includegraphics[alt='\"]{image.png}\"","trustSettings","expect","toContain","\"<img src=\"image.png\" alt=\"&#x27;&quot;\"\""]},"operators":{"distinct":4,"total":7,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":2139,"lineStart":2135,"name":"<anon method-325>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.053,"difficulty":4.5,"effort":711.555,"length":36,"time":39.531,"vocabulary":21,"volume":158.123,"operands":{"distinct":14,"total":18,"identifiers":["html","\"\\htmlId{bar}{x}\\htmlClass{foo}{x}\\htmlStyle{color: red;}{x}\\htmlData{foo=a, bar=b}{x}\"","trustNonStrictSettings","Settings","trust","true","strict","false","it","\"should not fail\"","\"should set HTML attributes\"","\"should not affect spacing\"","\"should render with trust and strict setting\"","\"should throw Error when HTML attribute name is invalid\""]},"operators":{"distinct":7,"total":18,"identifiers":["const","=","new","{}",":","()","function"]}},"paramCount":0,"sloc":{"logical":14,"physical":47},"errors":[],"lineEnd":2188,"lineStart":2142,"name":"<anon method-326>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","html","toBuild","trustNonStrictSettings"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2148,"lineStart":2146,"name":"<anon method-327>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.1,"difficulty":5.022,"effort":1503.109,"length":61,"time":83.506,"vocabulary":30,"volume":299.32,"operands":{"distinct":23,"total":33,"identifiers":["built","getBuilt","html","trustNonStrictSettings","expect","0","attributes","id","toMatch","\"bar\"","1","classes","toContain","\"foo\"","2","style","\"color: red\"","3","toEqual","\"data-bar\"","\"b\"","\"data-foo\"","\"a\""]},"operators":{"distinct":7,"total":28,"identifiers":["const","=","()",".","[]","{}",":"]}},"paramCount":0,"sloc":{"logical":12,"physical":10},"errors":[],"lineEnd":2159,"lineStart":2150,"name":"<anon method-328>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.014,"difficulty":2.333,"effort":100.765,"length":13,"time":5.598,"vocabulary":10,"volume":43.185,"operands":{"distinct":6,"total":7,"identifiers":["built","getBuilt","\"\\htmlId{a}{x+}y\"","trustNonStrictSettings","expect","toMatchSnapshot"]},"operators":{"distinct":4,"total":6,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2164,"lineStart":2161,"name":"<anon method-329>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.014,"difficulty":2.333,"effort":100.765,"length":13,"time":5.598,"vocabulary":10,"volume":43.185,"operands":{"distinct":6,"total":7,"identifiers":["built","getBuilt","html","trustNonStrictSettings","expect","toMatchSnapshot"]},"operators":{"distinct":4,"total":6,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2169,"lineStart":2166,"name":"<anon method-330>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.141,"difficulty":8.25,"effort":3488.365,"length":80,"time":193.798,"vocabulary":39,"volume":422.832,"operands":{"distinct":28,"total":42,"identifiers":["char","\">\"","\" \"","\"\\t\"","\"\\n\"","\"\\r\"","\"\\\"\"","\"'\"","\"/\"","katex","renderToString","\\htmlData{a","b=foo}{bar}","trustNonStrictSettings","expect","true","toBe","false","error","toBeInstanceOf","ParseError","message","replace","/\\s/","Invalid attribute name 'data-a","b'","KaTeX parse error: ","rawMessage"]},"operators":{"distinct":11,"total":38,"identifiers":["forof","const","[]",",","try","()",".","``","${}","catch","="]}},"paramCount":0,"sloc":{"logical":14,"physical":17},"errors":[],"lineEnd":2187,"lineStart":2171,"name":"<anon method-331>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["it","\"should create mbins normally\"","\"should create ords when at the beginning of lists\"","\"should create ords after some other objects\"","\"should correctly interact with color objects\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":8,"physical":29},"errors":[],"lineEnd":2218,"lineStart":2190,"name":"<anon method-332>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["built","getBuilt","x + y","expect","2","classes","toContain","\"mbin\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","``","()",".","[]"]}},"paramCount":0,"sloc":{"logical":4,"physical":6},"errors":[],"lineEnd":2196,"lineStart":2191,"name":"<anon method-333>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.04,"difficulty":4.8,"effort":576,"length":30,"time":32,"vocabulary":16,"volume":120,"operands":{"distinct":10,"total":16,"identifiers":["built","getBuilt","+ x","expect","0","classes","toContain","\"mord\"","not","\"mbin\""]},"operators":{"distinct":6,"total":14,"identifiers":["const","=","``","()",".","[]"]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":2203,"lineStart":2198,"name":"<anon method-334>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.087,"difficulty":5.833,"effort":1516.667,"length":65,"time":84.259,"vocabulary":16,"volume":260,"operands":{"distinct":12,"total":35,"identifiers":["expect","getBuilt","x + + 2","4","classes","toContain","\"mord\"","( + 2","2","= + 2","sin + 2",", + 2"]},"operators":{"distinct":4,"total":30,"identifiers":["()",".","[]","``"]}},"paramCount":0,"sloc":{"logical":15,"physical":7},"errors":[],"lineEnd":2211,"lineStart":2205,"name":"<anon method-335>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.049,"difficulty":4.2,"effort":623.645,"length":39,"time":34.647,"vocabulary":14,"volume":148.487,"operands":{"distinct":10,"total":21,"identifiers":["expect","getBuilt","\blue{x}+y","2","classes","toContain","\"mbin\"","\blue{x+}+y","4","\"mord\""]},"operators":{"distinct":4,"total":18,"identifiers":["()",".","[]","``"]}},"paramCount":0,"sloc":{"logical":9,"physical":5},"errors":[],"lineEnd":2217,"lineStart":2213,"name":"<anon method-336>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should both build a mord\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":10},"errors":[],"lineEnd":2229,"lineStart":2220,"name":"<anon method-337>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.556,"halstead":{"bugs":0.106,"difficulty":6.462,"effort":2060.081,"length":78,"time":114.449,"vocabulary":17,"volume":318.822,"operands":{"distinct":13,"total":42,"identifiers":["expect","getBuilt","hphantom{a}","0","classes","toContain","\"mord\"","ahphantom{=}b","2","ahphantom{+}b","smash{a}","smash{=}","asmash{+}b"]},"operators":{"distinct":4,"total":36,"identifiers":["()",".","[]","``"]}},"paramCount":0,"sloc":{"logical":18,"physical":8},"errors":[],"lineEnd":2228,"lineStart":2221,"name":"<anon method-338>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"marks trees up\"","\"generates both MathML and HTML\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":17},"errors":[],"lineEnd":2247,"lineStart":2231,"name":"<anon method-339>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.063,"difficulty":4,"effort":760.659,"length":44,"time":42.259,"vocabulary":20,"volume":190.165,"operands":{"distinct":15,"total":24,"identifiers":["markup","katex","renderToString","r","sigma^2","expect","indexOf","\"<span\"","toBe","0","toContain","\"σ\"","\"margin-right\"","not","\"marginRight\""]},"operators":{"distinct":5,"total":20,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":12,"physical":8},"errors":[],"lineEnd":2239,"lineStart":2232,"name":"<anon method-340>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.026,"difficulty":3,"effort":236.608,"length":22,"time":13.145,"vocabulary":12,"volume":78.869,"operands":{"distinct":8,"total":12,"identifiers":["markup","katex","renderToString","\"a\"","expect","toContain","\"<span\"","\"<math\""]},"operators":{"distinct":4,"total":10,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":2246,"lineStart":2241,"name":"<anon method-341>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"generates a tree\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":6},"errors":[],"lineEnd":2254,"lineStart":2249,"name":"<anon method-342>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.016,"difficulty":2.917,"effort":141.26,"length":14,"time":7.848,"vocabulary":11,"volume":48.432,"operands":{"distinct":6,"total":7,"identifiers":["tree","stripPositions","getParsed","sigma^2","expect","toMatchSnapshot"]},"operators":{"distinct":5,"total":7,"identifiers":["const","=","()","``","."]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":2253,"lineStart":2250,"name":"<anon method-343>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.02,"difficulty":1.667,"effort":100,"length":20,"time":5.556,"vocabulary":8,"volume":60,"operands":{"distinct":6,"total":10,"identifiers":["it","\"should not fail\"","\"should produce accents\"","\"should be grouped more tightly than supsubs\"","\"should parse stretchy, shifty accents\"","\"should parse stretchy, non-shifty accents\""]},"operators":{"distinct":2,"total":10,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":10,"physical":30},"errors":[],"lineEnd":2285,"lineStart":2256,"name":"<anon method-344>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.033,"difficulty":3.214,"effort":320.329,"length":30,"time":17.796,"vocabulary":10,"volume":99.658,"operands":{"distinct":7,"total":15,"identifiers":["expect","\u000bec{x}","toParse","\u000bec{x^2}","\u000bec{x}^2","\u000bec x","null"]},"operators":{"distinct":3,"total":15,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":2263,"lineStart":2257,"name":"<anon method-345>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","\u000bec x","0","expect","type","toEqual","\"accent\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":2269,"lineStart":2265,"name":"<anon method-346>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","\u000bec x^2","0","expect","type","toEqual","\"supsub\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":2275,"lineStart":2271,"name":"<anon method-347>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","widehat{x}","toParse","widecheck{x}"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2280,"lineStart":2277,"name":"<anon method-348>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","overrightarrow{x}","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2284,"lineStart":2282,"name":"<anon method-349>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should produce mords\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":16},"errors":[],"lineEnd":2302,"lineStart":2287,"name":"<anon method-350>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.025,"difficulty":3,"effort":228.235,"length":24,"time":12.68,"vocabulary":9,"volume":76.078,"operands":{"distinct":6,"total":12,"identifiers":["expect","\u000bec{x}","toBuild","\u000bec{x}^2","\u000bec{x}_2","\u000bec{x}_2^2"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":2293,"lineStart":2288,"name":"<anon method-351>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.092,"difficulty":6.167,"effort":1702,"length":69,"time":94.556,"vocabulary":16,"volume":276,"operands":{"distinct":12,"total":37,"identifiers":["expect","getBuilt","\u000bec x","0","classes","toContain","\"mord\"","\u000bec +","not","\"mbin\"","\u000bec )^2","\"mclose\""]},"operators":{"distinct":4,"total":32,"identifiers":["()",".","[]","``"]}},"paramCount":0,"sloc":{"logical":15,"physical":7},"errors":[],"lineEnd":2301,"lineStart":2295,"name":"<anon method-352>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should produce mords\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":17},"errors":[],"lineEnd":2320,"lineStart":2304,"name":"<anon method-353>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.033,"difficulty":3.214,"effort":320.329,"length":30,"time":17.796,"vocabulary":10,"volume":99.658,"operands":{"distinct":7,"total":15,"identifiers":["expect","widehat{AB}","toBuild","widecheck{AB}","widehat{AB}^2","widehat{AB}_2","widehat{AB}_2^2"]},"operators":{"distinct":3,"total":15,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":2311,"lineStart":2305,"name":"<anon method-354>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.092,"difficulty":6.167,"effort":1702,"length":69,"time":94.556,"vocabulary":16,"volume":276,"operands":{"distinct":12,"total":37,"identifiers":["expect","getBuilt","widehat{AB}","0","classes","toContain","\"mord\"","widehat +","not","\"mbin\"","widehat )^2","\"mclose\""]},"operators":{"distinct":4,"total":32,"identifiers":["()",".","[]","``"]}},"paramCount":0,"sloc":{"logical":15,"physical":7},"errors":[],"lineEnd":2319,"lineStart":2313,"name":"<anon method-355>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should produce mords\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":16},"errors":[],"lineEnd":2337,"lineStart":2322,"name":"<anon method-356>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.025,"difficulty":3,"effort":228.235,"length":24,"time":12.68,"vocabulary":9,"volume":76.078,"operands":{"distinct":6,"total":12,"identifiers":["expect","overrightarrow{AB}","toBuild","overrightarrow{AB}^2","overrightarrow{AB}_2","overrightarrow{AB}_2^2"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":2328,"lineStart":2323,"name":"<anon method-357>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.092,"difficulty":6.167,"effort":1702,"length":69,"time":94.556,"vocabulary":16,"volume":276,"operands":{"distinct":12,"total":37,"identifiers":["expect","getBuilt","overrightarrow{AB}","0","classes","toContain","\"mord\"","overrightarrow +","not","\"mbin\"","overrightarrow )^2","\"mclose\""]},"operators":{"distinct":4,"total":32,"identifiers":["()",".","[]","``"]}},"paramCount":0,"sloc":{"logical":15,"physical":7},"errors":[],"lineEnd":2336,"lineStart":2330,"name":"<anon method-358>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should properly render stretchy accents\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":8},"errors":[],"lineEnd":2346,"lineStart":2339,"name":"<anon method-359>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.039,"difficulty":3.409,"effort":395.455,"length":29,"time":21.97,"vocabulary":16,"volume":116,"operands":{"distinct":11,"total":15,"identifiers":["tex","\\widetilde{ABCD}","tree","getParsed","markup","buildMathML","defaultOptions","toMarkup","expect","toContain","\"<mo stretchy=\"true\">~</mo>\""]},"operators":{"distinct":5,"total":14,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":2345,"lineStart":2340,"name":"<anon method-360>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["it","\"should not fail\"","\"should produce accentUnder\"","\"should be grouped more tightly than supsubs\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":20},"errors":[],"lineEnd":2367,"lineStart":2348,"name":"<anon method-361>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.021,"difficulty":6,"effort":372.235,"length":24,"time":20.68,"vocabulary":6,"volume":62.039,"operands":{"distinct":3,"total":12,"identifiers":["expect","null","toParse"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":2354,"lineStart":2349,"name":"<anon method-362>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","null","0","expect","type","toEqual","\"accentUnder\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":2360,"lineStart":2356,"name":"<anon method-363>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","null","0","expect","type","toEqual","\"supsub\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":2366,"lineStart":2362,"name":"<anon method-364>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should produce mords\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":17},"errors":[],"lineEnd":2385,"lineStart":2369,"name":"<anon method-365>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.021,"difficulty":6,"effort":372.235,"length":24,"time":20.68,"vocabulary":6,"volume":62.039,"operands":{"distinct":3,"total":12,"identifiers":["expect","null","toBuild"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":2375,"lineStart":2370,"name":"<anon method-366>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.088,"difficulty":7.4,"effort":1944.035,"length":69,"time":108.002,"vocabulary":14,"volume":262.707,"operands":{"distinct":10,"total":37,"identifiers":["expect","getBuilt","null","0","classes","toContain","\"mord\"","not","\"mbin\"","\"mclose\""]},"operators":{"distinct":4,"total":32,"identifiers":["()",".","[]","``"]}},"paramCount":0,"sloc":{"logical":15,"physical":8},"errors":[],"lineEnd":2384,"lineStart":2377,"name":"<anon method-367>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["it","\"should not fail\"","\"should produce xArrow\"","\"should be grouped more tightly than supsubs\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":21},"errors":[],"lineEnd":2407,"lineStart":2387,"name":"<anon method-368>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.026,"difficulty":7.5,"effort":581.617,"length":30,"time":32.312,"vocabulary":6,"volume":77.549,"operands":{"distinct":3,"total":15,"identifiers":["expect","null","toParse"]},"operators":{"distinct":3,"total":15,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":2394,"lineStart":2388,"name":"<anon method-369>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","null","0","expect","type","toEqual","\"xArrow\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":2400,"lineStart":2396,"name":"<anon method-370>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","null","0","expect","type","toEqual","\"supsub\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":2406,"lineStart":2402,"name":"<anon method-371>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should produce mrell\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":18},"errors":[],"lineEnd":2426,"lineStart":2409,"name":"<anon method-372>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.026,"difficulty":7.5,"effort":581.617,"length":30,"time":32.312,"vocabulary":6,"volume":77.549,"operands":{"distinct":3,"total":15,"identifiers":["expect","null","toBuild"]},"operators":{"distinct":3,"total":15,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":2416,"lineStart":2410,"name":"<anon method-373>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.556,"halstead":{"bugs":0.104,"difficulty":8.8,"effort":2747.387,"length":82,"time":152.633,"vocabulary":14,"volume":312.203,"operands":{"distinct":10,"total":44,"identifiers":["expect","getBuilt","null","0","classes","toContain","\"mrel\"","not","\"mbin\"","\"mclose\""]},"operators":{"distinct":4,"total":38,"identifiers":["()",".","[]","``"]}},"paramCount":0,"sloc":{"logical":18,"physical":8},"errors":[],"lineEnd":2425,"lineStart":2418,"name":"<anon method-374>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["it","\"should not fail\"","\"should produce horizBrace\"","\"should be grouped more tightly than supsubs\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":22},"errors":[],"lineEnd":2449,"lineStart":2428,"name":"<anon method-375>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.04,"difficulty":3.857,"effort":461.273,"length":36,"time":25.626,"vocabulary":10,"volume":119.589,"operands":{"distinct":7,"total":18,"identifiers":["expect","overbrace{x}","toParse","overbrace{x^2}","overbrace{x}^2","overbrace x","null"]},"operators":{"distinct":3,"total":18,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":12,"physical":8},"errors":[],"lineEnd":2436,"lineStart":2429,"name":"<anon method-376>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","overbrace x","0","expect","type","toEqual","\"horizBrace\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":2442,"lineStart":2438,"name":"<anon method-377>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","overbrace x^2","0","expect","type","toEqual","\"supsub\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":2448,"lineStart":2444,"name":"<anon method-378>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should produce mords\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":17},"errors":[],"lineEnd":2467,"lineStart":2451,"name":"<anon method-379>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.024,"difficulty":3.6,"effort":259.2,"length":24,"time":14.4,"vocabulary":8,"volume":72,"operands":{"distinct":5,"total":12,"identifiers":["expect","overbrace{x}","toBuild","overbrace{x}^2","null"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":2457,"lineStart":2452,"name":"<anon method-380>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.556,"halstead":{"bugs":0.112,"difficulty":6.769,"effort":2268.856,"length":82,"time":126.048,"vocabulary":17,"volume":335.172,"operands":{"distinct":13,"total":44,"identifiers":["expect","getBuilt","overbrace x","0","classes","toContain","\"mord\"","overbrace{x}^2","overbrace +","not","\"mbin\"","overbrace )^2","\"mclose\""]},"operators":{"distinct":4,"total":38,"identifiers":["()",".","[]","``"]}},"paramCount":0,"sloc":{"logical":18,"physical":8},"errors":[],"lineEnd":2466,"lineStart":2459,"name":"<anon method-381>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should produce enclose\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":14},"errors":[],"lineEnd":2482,"lineStart":2469,"name":"<anon method-382>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.025,"difficulty":3,"effort":228.235,"length":24,"time":12.68,"vocabulary":9,"volume":76.078,"operands":{"distinct":6,"total":12,"identifiers":["expect","\boxed{x}","toParse","\boxed{x^2}","\boxed{x}^2","\boxed x"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":2475,"lineStart":2470,"name":"<anon method-383>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","\boxed x","0","expect","type","toEqual","\"enclose\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":2481,"lineStart":2477,"name":"<anon method-384>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should produce mords\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":16},"errors":[],"lineEnd":2499,"lineStart":2484,"name":"<anon method-385>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.025,"difficulty":3,"effort":228.235,"length":24,"time":12.68,"vocabulary":9,"volume":76.078,"operands":{"distinct":6,"total":12,"identifiers":["expect","\boxed{x}","toBuild","\boxed{x}^2","\boxed{x}_2","\boxed{x}_2^2"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":2490,"lineStart":2485,"name":"<anon method-386>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.092,"difficulty":6.167,"effort":1702,"length":69,"time":94.556,"vocabulary":16,"volume":276,"operands":{"distinct":12,"total":37,"identifiers":["expect","getBuilt","\boxed x","0","classes","toContain","\"mord\"","\boxed +","not","\"mbin\"","\boxed )^2","\"mclose\""]},"operators":{"distinct":4,"total":32,"identifiers":["()",".","[]","``"]}},"paramCount":0,"sloc":{"logical":15,"physical":7},"errors":[],"lineEnd":2498,"lineStart":2492,"name":"<anon method-387>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should fail when given math\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":2505,"lineStart":2501,"name":"<anon method-388>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","\fbox{\frac a b}","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2504,"lineStart":2502,"name":"<anon method-389>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["it","\"should not fail, given a text argument\"","\"should fail, given a math argument\"","\"should parse a color\"","\"should produce enclose\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":8,"physical":23},"errors":[],"lineEnd":2529,"lineStart":2507,"name":"<anon method-390>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.018,"difficulty":2.7,"effort":145.8,"length":18,"time":8.1,"vocabulary":8,"volume":54,"operands":{"distinct":5,"total":9,"identifiers":["expect","colorbox{red}{a b}","toParse","colorbox{red}{x}^2","colorbox{red} x"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":2512,"lineStart":2508,"name":"<anon method-391>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.4,"effort":115.2,"length":16,"time":6.4,"vocabulary":8,"volume":48,"operands":{"distinct":5,"total":8,"identifiers":["expect","colorbox{red}{alpha}","not","toParse","colorbox{red}{\frac{a}{b}}"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2517,"lineStart":2514,"name":"<anon method-392>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.018,"difficulty":2.7,"effort":145.8,"length":18,"time":8.1,"vocabulary":8,"volume":54,"operands":{"distinct":5,"total":9,"identifiers":["expect","colorbox{red}{a b}","toParse","colorbox{#197}{a b}","colorbox{#1a9b7c}{a b}"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":2523,"lineStart":2519,"name":"<anon method-393>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","colorbox{red} x","0","expect","type","toEqual","\"enclose\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2528,"lineStart":2525,"name":"<anon method-394>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should produce mords\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":11},"errors":[],"lineEnd":2541,"lineStart":2531,"name":"<anon method-395>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.018,"difficulty":2.7,"effort":145.8,"length":18,"time":8.1,"vocabulary":8,"volume":54,"operands":{"distinct":5,"total":9,"identifiers":["expect","colorbox{red}{a b}","toBuild","colorbox{red}{a b}^2","colorbox{red} x"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":2536,"lineStart":2532,"name":"<anon method-396>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.015,"difficulty":2,"effort":89.945,"length":13,"time":4.997,"vocabulary":11,"volume":44.973,"operands":{"distinct":7,"total":7,"identifiers":["expect","getBuilt","colorbox{red}{a b}","0","classes","toContain","\"mord\""]},"operators":{"distinct":4,"total":6,"identifiers":["()",".","[]","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":2540,"lineStart":2538,"name":"<anon method-397>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["it","\"should not fail, given a text argument\"","\"should fail, given a math argument\"","\"should parse a color\"","\"should produce enclose\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":8,"physical":23},"errors":[],"lineEnd":2565,"lineStart":2543,"name":"<anon method-398>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.018,"difficulty":2.7,"effort":145.8,"length":18,"time":8.1,"vocabulary":8,"volume":54,"operands":{"distinct":5,"total":9,"identifiers":["expect","\fcolorbox{blue}{yellow}{a b}","toParse","\fcolorbox{blue}{yellow}{x}^2","\fcolorbox{blue}{yellow} x"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":2548,"lineStart":2544,"name":"<anon method-399>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.4,"effort":115.2,"length":16,"time":6.4,"vocabulary":8,"volume":48,"operands":{"distinct":5,"total":8,"identifiers":["expect","\fcolorbox{blue}{yellow}{alpha}","not","toParse","\fcolorbox{blue}{yellow}{\frac{a}{b}}"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2553,"lineStart":2550,"name":"<anon method-400>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.018,"difficulty":2.7,"effort":145.8,"length":18,"time":8.1,"vocabulary":8,"volume":54,"operands":{"distinct":5,"total":9,"identifiers":["expect","\fcolorbox{blue}{yellow}{a b}","toParse","\fcolorbox{blue}{#197}{a b}","\fcolorbox{blue}{#1a9b7c}{a b}"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":2559,"lineStart":2555,"name":"<anon method-401>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","\fcolorbox{blue}{yellow} x","0","expect","type","toEqual","\"enclose\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2564,"lineStart":2561,"name":"<anon method-402>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should produce mords\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":11},"errors":[],"lineEnd":2577,"lineStart":2567,"name":"<anon method-403>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.018,"difficulty":2.7,"effort":145.8,"length":18,"time":8.1,"vocabulary":8,"volume":54,"operands":{"distinct":5,"total":9,"identifiers":["expect","\fcolorbox{blue}{yellow}{a b}","toBuild","\fcolorbox{blue}{yellow}{a b}^2","\fcolorbox{blue}{yellow} x"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":2572,"lineStart":2568,"name":"<anon method-404>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.015,"difficulty":2,"effort":89.945,"length":13,"time":4.997,"vocabulary":11,"volume":44.973,"operands":{"distinct":7,"total":7,"identifiers":["expect","getBuilt","colorbox{red}{a b}","0","classes","toContain","\"mord\""]},"operators":{"distinct":4,"total":6,"identifiers":["()",".","[]","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":2576,"lineStart":2574,"name":"<anon method-405>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["it","\"should not fail\"","\"should produce enclose\"","\"should be grouped more tightly than supsubs\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":20},"errors":[],"lineEnd":2598,"lineStart":2579,"name":"<anon method-406>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.025,"difficulty":3,"effort":228.235,"length":24,"time":12.68,"vocabulary":9,"volume":76.078,"operands":{"distinct":6,"total":12,"identifiers":["expect","cancel{x}","toParse","cancel{x^2}","cancel{x}^2","cancel x"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":2585,"lineStart":2580,"name":"<anon method-407>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","cancel x","0","expect","type","toEqual","\"enclose\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":2591,"lineStart":2587,"name":"<anon method-408>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","cancel x^2","0","expect","type","toEqual","\"supsub\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":2597,"lineStart":2593,"name":"<anon method-409>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should produce mords\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":20},"errors":[],"lineEnd":2619,"lineStart":2600,"name":"<anon method-410>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.059,"difficulty":3.6,"effort":639.436,"length":48,"time":35.524,"vocabulary":13,"volume":177.621,"operands":{"distinct":10,"total":24,"identifiers":["expect","cancel{x}","toBuild","cancel{x}^2","cancel{x}_2","cancel{x}_2^2","sout{x}","sout{x}^2","sout{x}_2","sout{x}_2^2"]},"operators":{"distinct":3,"total":24,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":16,"physical":10},"errors":[],"lineEnd":2610,"lineStart":2601,"name":"<anon method-411>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.092,"difficulty":6.167,"effort":1702,"length":69,"time":94.556,"vocabulary":16,"volume":276,"operands":{"distinct":12,"total":37,"identifiers":["expect","getBuilt","cancel x","0","classes","toContain","\"mord\"","cancel +","not","\"mbin\"","cancel )^2","\"mclose\""]},"operators":{"distinct":4,"total":32,"identifiers":["()",".","[]","``"]}},"paramCount":0,"sloc":{"logical":15,"physical":7},"errors":[],"lineEnd":2618,"lineStart":2612,"name":"<anon method-412>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail in math mode\"","\"should fail in text mode\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":8},"errors":[],"lineEnd":2628,"lineStart":2621,"name":"<anon method-413>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","a_{angl{n}}","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2624,"lineStart":2622,"name":"<anon method-414>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{a_{angl{n}}}","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2627,"lineStart":2625,"name":"<anon method-415>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should not fail\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":8},"errors":[],"lineEnd":2637,"lineStart":2630,"name":"<anon method-416>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.025,"difficulty":3,"effort":228.235,"length":24,"time":12.68,"vocabulary":9,"volume":76.078,"operands":{"distinct":6,"total":12,"identifiers":["expect","a_{angl{n}}","toBuild","a_{angl{n}i}","a_{angl n}","a_angln"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":2636,"lineStart":2631,"name":"<anon method-417>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should fail in text mode\"","\"should not fail in math mode\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":8},"errors":[],"lineEnd":2646,"lineStart":2639,"name":"<anon method-418>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{phase{-78.2^circ}}","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2642,"lineStart":2640,"name":"<anon method-419>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","phase{-78.2^circ}","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2645,"lineStart":2643,"name":"<anon method-420>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should build a phantom node\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":19},"errors":[],"lineEnd":2666,"lineStart":2648,"name":"<anon method-421>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.059,"difficulty":3.6,"effort":639.436,"length":48,"time":35.524,"vocabulary":13,"volume":177.621,"operands":{"distinct":10,"total":24,"identifiers":["expect","phantom{x}","toParse","phantom{x^2}","phantom{x}^2","phantom x","hphantom{x}","hphantom{x^2}","hphantom{x}^2","hphantom x"]},"operators":{"distinct":3,"total":24,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":16,"physical":10},"errors":[],"lineEnd":2658,"lineStart":2649,"name":"<anon method-422>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.033,"difficulty":3.9,"effort":390,"length":25,"time":21.667,"vocabulary":16,"volume":100,"operands":{"distinct":10,"total":13,"identifiers":["parse","getParsed","phantom{x}","0","expect","type","toEqual","\"phantom\"","body","toBeDefined"]},"operators":{"distinct":6,"total":12,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":2665,"lineStart":2660,"name":"<anon method-423>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["it","\"should not fail\"","\"should make the children transparent\"","\"should make all descendants transparent\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":28},"errors":[],"lineEnd":2695,"lineStart":2668,"name":"<anon method-424>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.556,"halstead":{"bugs":0.069,"difficulty":3.682,"effort":756.971,"length":54,"time":42.054,"vocabulary":14,"volume":205.597,"operands":{"distinct":11,"total":27,"identifiers":["expect","phantom{x}","toBuild","phantom{x^2}","phantom{x}^2","phantom x","mathstrut","hphantom{x}","hphantom{x^2}","hphantom{x}^2","hphantom x"]},"operators":{"distinct":3,"total":27,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":18,"physical":12},"errors":[],"lineEnd":2680,"lineStart":2669,"name":"<anon method-425>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.061,"difficulty":6.545,"effort":1203.944,"length":45,"time":66.886,"vocabulary":17,"volume":183.936,"operands":{"distinct":11,"total":24,"identifiers":["children","getBuilt","phantom{x+1}","expect","0","style","color","toBe","\"transparent\"","2","4"]},"operators":{"distinct":6,"total":21,"identifiers":["const","=","``","()",".","[]"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":2687,"lineStart":2682,"name":"<anon method-426>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.061,"difficulty":6.545,"effort":1203.944,"length":45,"time":66.886,"vocabulary":17,"volume":183.936,"operands":{"distinct":11,"total":24,"identifiers":["children","getBuilt","phantom{x+\blue{1}}","expect","0","style","color","toBe","\"transparent\"","2","4"]},"operators":{"distinct":6,"total":21,"identifiers":["const","=","``","()",".","[]"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":2694,"lineStart":2689,"name":"<anon method-427>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail\"","\"should build a smash node\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":24},"errors":[],"lineEnd":2720,"lineStart":2697,"name":"<anon method-428>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":4.167,"halstead":{"bugs":0.098,"difficulty":3.857,"effort":1135.147,"length":72,"time":63.064,"vocabulary":17,"volume":294.297,"operands":{"distinct":14,"total":36,"identifiers":["expect","smash{x}","toParse","smash{x^2}","smash{x}^2","smash x","smash[b]{x}","smash[b]{x^2}","smash[b]{x}^2","smash[b] x","smash[]{x}","smash[]{x^2}","smash[]{x}^2","smash[] x"]},"operators":{"distinct":3,"total":36,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":24,"physical":16},"errors":[],"lineEnd":2713,"lineStart":2698,"name":"<anon method-429>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["parse","getParsed","smash{x}","0","expect","type","toEqual","\"smash\""]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":2719,"lineStart":2715,"name":"<anon method-430>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should not fail\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":13},"errors":[],"lineEnd":2734,"lineStart":2722,"name":"<anon method-431>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.071,"difficulty":4.364,"effort":930.379,"length":56,"time":51.688,"vocabulary":14,"volume":213.212,"operands":{"distinct":11,"total":32,"identifiers":["expect","smash{x}","toBuild","nonstrictSettings","smash{x^2}","smash{x}^2","smash x","smash[b]{x}","smash[b]{x^2}","smash[b]{x}^2","smash[b] x"]},"operators":{"distinct":3,"total":24,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":16,"physical":11},"errors":[],"lineEnd":2733,"lineStart":2723,"name":"<anon method-432>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should report the position of an error\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":9},"errors":[],"lineEnd":2744,"lineStart":2736,"name":"<anon method-433>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.025,"difficulty":3.333,"effort":247.436,"length":19,"time":13.746,"vocabulary":15,"volume":74.231,"operands":{"distinct":9,"total":10,"identifiers":["parseTree","r","sqrt}","Settings","e","expect","position","toEqual","5"]},"operators":{"distinct":6,"total":9,"identifiers":["try","()","``","new","catch","."]}},"paramCount":0,"sloc":{"logical":6,"physical":7},"errors":[],"lineEnd":2743,"lineStart":2737,"name":"<anon method-434>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.02,"difficulty":1.667,"effort":100,"length":20,"time":5.556,"vocabulary":8,"volume":60,"operands":{"distinct":6,"total":10,"identifiers":["it","\"should not fail\"","\"should work with sqrts with optional arguments\"","\"should work when the optional argument is missing\"","\"should fail when the optional argument is malformed\"","\"should not work if the optional argument isn't closed\""]},"operators":{"distinct":2,"total":10,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":10,"physical":26},"errors":[],"lineEnd":2771,"lineStart":2746,"name":"<anon method-435>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","\frac[1]{2}{3}","toParse","\rule[0.2em]{1em}{1em}"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":7},"errors":[],"lineEnd":2753,"lineStart":2747,"name":"<anon method-436>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","sqrt[3]{2}","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2757,"lineStart":2755,"name":"<anon method-437>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","sqrt{2}","toParse","\rule{1em}{2em}"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2762,"lineStart":2759,"name":"<anon method-438>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","\rule[1]{2em}{3em}","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2766,"lineStart":2764,"name":"<anon method-439>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","sqrt[","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2770,"lineStart":2768,"name":"<anon method-440>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should accept a single alignment character\"","\"should accept vertical separators\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":27},"errors":[],"lineEnd":2799,"lineStart":2773,"name":"<anon method-441>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.051,"difficulty":5.538,"effort":851.434,"length":35,"time":47.302,"vocabulary":21,"volume":153.731,"operands":{"distinct":13,"total":18,"identifiers":["parse","getParsed","\begin{array}r1\\20end{array}","expect","0","type","toBe","\"array\"","cols","toEqual","\"align\"","align","\"r\""]},"operators":{"distinct":8,"total":17,"identifiers":["const","=","``","()",".","[]","{}",":"]}},"paramCount":0,"sloc":{"logical":8,"physical":7},"errors":[],"lineEnd":2781,"lineStart":2775,"name":"<anon method-442>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":4.167,"halstead":{"bugs":0.159,"difficulty":11.842,"effort":5635.991,"length":99,"time":313.111,"vocabulary":28,"volume":475.928,"operands":{"distinct":19,"total":50,"identifiers":["parse","getParsed","\begin{array}{|l||c:r::}end{array}","expect","0","type","toBe","\"array\"","cols","toEqual","\"separator\"","separator","\"|\"","\"align\"","align","\"l\"","\"c\"","\":\"","\"r\""]},"operators":{"distinct":9,"total":49,"identifiers":["const","=","``","()",".","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":24,"physical":15},"errors":[],"lineEnd":2797,"lineStart":2783,"name":"<anon method-443>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should accept only a single alignment character\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":14},"errors":[],"lineEnd":2814,"lineStart":2801,"name":"<anon method-444>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.089,"difficulty":6.444,"effort":1726.628,"length":57,"time":95.924,"vocabulary":26,"volume":267.925,"operands":{"distinct":18,"total":29,"identifiers":["parse","getParsed","\begin{subarray}{c}a \\ bend{subarray}","expect","0","type","toBe","\"array\"","cols","toEqual","\"align\"","align","\"c\"","\begin{subarray}{cc}a \\ bend{subarray}","not","toParse","\begin{subarray}{c}a & b \\ c & dend{subarray}","toBuild"]},"operators":{"distinct":8,"total":28,"identifiers":["const","=","``","()",".","[]","{}",":"]}},"paramCount":0,"sloc":{"logical":14,"physical":10},"errors":[],"lineEnd":2812,"lineStart":2803,"name":"<anon method-445>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["it","\"should build\"","\"should accommodate spaces in the argument\"","\"should accommodate macros in the argument\"","\"should accommodate an empty argument\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":8,"physical":16},"errors":[],"lineEnd":2831,"lineStart":2816,"name":"<anon method-446>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","sum_{substack{ 0<i<m \\ 0<j<n }}  P(i,j)","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2820,"lineStart":2818,"name":"<anon method-447>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","sum_{substack{ 0<i<m \\ 0<j<n }}  P(i,j)","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2823,"lineStart":2821,"name":"<anon method-448>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","sum_{substack{ 0<i<\u000barPi \\ 0<j<pi }}  P(i,j)","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2826,"lineStart":2824,"name":"<anon method-449>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","sum_{substack{}}  P(i,j)","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2829,"lineStart":2827,"name":"<anon method-450>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should build\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":7},"errors":[],"lineEnd":2839,"lineStart":2833,"name":"<anon method-451>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\begin{smallmatrix} a & b \\ c & d end{smallmatrix}","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2837,"lineStart":2835,"name":"<anon method-452>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should parse its input\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":8},"errors":[],"lineEnd":2848,"lineStart":2841,"name":"<anon method-453>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","f(a,b)=\begin{cases}a+1&\text{if }b\text{ is odd}\\a&\text{if }b=0\\a-1&\text{otherwise}end{cases}","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":2846,"lineStart":2843,"name":"<anon method-454>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should build\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":8},"errors":[],"lineEnd":2857,"lineStart":2850,"name":"<anon method-455>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\begin{rcases} a &\text{if } b \\ c &\text{if } d end{rcases}⇒…","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":2855,"lineStart":2852,"name":"<anon method-456>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["it","\"should parse its input\"","\"should allow cells in brackets\"","\"should forbid cells in brackets without space\"","\"should not eat the last row when its first cell is empty\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":8,"physical":19},"errors":[],"lineEnd":2877,"lineStart":2859,"name":"<anon method-457>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\begin{aligned}a&=b&c&=d\\e&=fend{aligned}","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2863,"lineStart":2861,"name":"<anon method-458>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\begin{aligned}[a]&[b]\\ [c]&[d]end{aligned}","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2867,"lineStart":2865,"name":"<anon method-459>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","\begin{aligned}[a]&[b]\\[c]&[d]end{aligned}","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2871,"lineStart":2869,"name":"<anon method-460>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.022,"difficulty":3.375,"effort":218.447,"length":17,"time":12.136,"vocabulary":14,"volume":64.725,"operands":{"distinct":8,"total":9,"identifiers":["ae","getParsed","\begin{aligned}&E_1 & (1)\\&E_2 & (2)\\&E_3 & (3)end{aligned}","0","expect","body","toHaveLength","3"]},"operators":{"distinct":6,"total":8,"identifiers":["const","=","[]","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2876,"lineStart":2873,"name":"<anon method-461>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.051,"difficulty":5.727,"effort":883.645,"length":37,"time":49.091,"vocabulary":18,"volume":154.287,"operands":{"distinct":11,"total":18,"identifiers":["it","\"should fail outside display mode\"","displayMode","Settings","true","\"should build if in display mode\"","\"should build an empty environment\"","\"{equation} should fail if argument contains two rows.\"","\"{equation} should fail if argument contains two columns.\"","\"{split} should fail if argument contains three columns.\"","\"{array} should fail if body contains more columns than specification.\""]},"operators":{"distinct":7,"total":19,"identifiers":["()","function=>","const","=","new","{}",":"]}},"paramCount":0,"sloc":{"logical":16,"physical":52},"errors":[],"lineEnd":2930,"lineStart":2879,"name":"<anon method-462>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.556,"halstead":{"bugs":0.108,"difficulty":5.192,"effort":1682.308,"length":81,"time":93.462,"vocabulary":16,"volume":324,"operands":{"distinct":13,"total":45,"identifiers":["expect","\begin{gather}a+b\\c+dend{gather}","not","toParse","nonstrictSettings","\begin{gather*}a+b\\c+dend{gather*}","\begin{align}a&=b+c\\d+e&=fend{align}","\begin{align*}a&=b+c\\d+e&=fend{align*}","\begin{alignat}{2}10&x+ &3&y = 2\\3&x+&13&y = 4end{alignat}","\begin{alignat*}{2}10&x+ &3&y = 2\\3&x+&13&y = 4end{alignat*}","\begin{equation}a=b+cend{equation}","\begin{split}a &=b+c\\&=e+fend{split}","\begin{CD}A @>a>> B \\@VbVV @AAcA\\C @= Dend{CD}"]},"operators":{"distinct":3,"total":36,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":18,"physical":11},"errors":[],"lineEnd":2890,"lineStart":2880,"name":"<anon method-463>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.093,"difficulty":4.615,"effort":1292.308,"length":70,"time":71.795,"vocabulary":16,"volume":280,"operands":{"distinct":13,"total":40,"identifiers":["expect","\begin{gather}a+b\\c+dend{gather}","toBuild","displayMode","\begin{gather*}a+b\\c+dend{gather*}","\begin{align}a&=b+c\\d+e&=fend{align}","\begin{align*}a&=b+c\\d+e&=fend{align*}","\begin{alignat}{2}10&x+ &3&y = 2\\3&x+&13&y = 4end{alignat}","\begin{alignat*}{2}10&x+ &3&y = 2\\3&x+&13&y = 4end{alignat*}","\begin{equation}a=b+cend{equation}","\begin{equation}\begin{split}a &=b+c\\&=e+fend{split}end{equation}","\begin{split}a &=b+c\\&=e+fend{split}","\begin{CD}A @<a<< B @>>b> C @>>> D\\@. @| @AcAA @VVdV \\@. E @= F @>>> Gend{CD}"]},"operators":{"distinct":3,"total":30,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":20,"physical":12},"errors":[],"lineEnd":2904,"lineStart":2893,"name":"<anon method-464>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.556,"halstead":{"bugs":0.082,"difficulty":4.5,"effort":1107.603,"length":63,"time":61.534,"vocabulary":15,"volume":246.134,"operands":{"distinct":12,"total":36,"identifiers":["expect","\begin{gather}end{gather}","toBuild","displayMode","\begin{gather*}end{gather*}","\begin{align}end{align}","\begin{align*}end{align*}","\begin{alignat}{2}end{alignat}","\begin{alignat*}{2}end{alignat*}","\begin{equation}end{equation}","\begin{split}end{split}","\begin{CD}end{CD}"]},"operators":{"distinct":3,"total":27,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":18,"physical":11},"errors":[],"lineEnd":2916,"lineStart":2906,"name":"<anon method-465>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.009,"difficulty":1.5,"effort":40.5,"length":9,"time":2.25,"vocabulary":8,"volume":27,"operands":{"distinct":5,"total":5,"identifiers":["expect","\begin{equation}a=cr b+cend{equation}","not","toParse","displayMode"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2920,"lineStart":2918,"name":"<anon method-466>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.009,"difficulty":1.5,"effort":40.5,"length":9,"time":2.25,"vocabulary":8,"volume":27,"operands":{"distinct":5,"total":5,"identifiers":["expect","\begin{equation}a &=b+cend{equation}","not","toBuild","displayMode"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2923,"lineStart":2921,"name":"<anon method-467>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.009,"difficulty":1.5,"effort":40.5,"length":9,"time":2.25,"vocabulary":8,"volume":27,"operands":{"distinct":5,"total":5,"identifiers":["expect","\begin{equation}\begin{split}a &=b &+c\\&=e &+fend{split}end{equation}","not","toBuild","displayMode"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2926,"lineStart":2924,"name":"<anon method-468>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.009,"difficulty":1.5,"effort":40.5,"length":9,"time":2.25,"vocabulary":8,"volume":27,"operands":{"distinct":5,"total":5,"identifiers":["expect","\begin{array}{2}a & b & c\\d & e  fend{array}","not","toBuild","displayMode"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2929,"lineStart":2927,"name":"<anon method-469>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.04,"difficulty":4.9,"effort":580.828,"length":29,"time":32.268,"vocabulary":17,"volume":118.536,"operands":{"distinct":10,"total":14,"identifiers":["it","\"should fail if not is display mode\"","displaySettings","Settings","displayMode","true","\"should fail if the character after '@' is not in <>AV=|.\"","\"should fail if an arrow does not have its final character.\"","\"should fail without an \\\\end.\"","\"should succeed without the flaws noted above.\""]},"operators":{"distinct":7,"total":15,"identifiers":["()","function","const","=","new","{}",":"]}},"paramCount":0,"sloc":{"logical":12,"physical":22},"errors":[],"lineEnd":2953,"lineStart":2932,"name":"<anon method-470>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.019,"difficulty":3,"effort":166.52,"length":15,"time":9.251,"vocabulary":13,"volume":55.507,"operands":{"distinct":7,"total":7,"identifiers":["expect","\\begin{CD}A @<a<< B @>>b> C @>>> D\\\\@. @| @AcAA @VVdV \\\\@. E @= F @>>> G\\end{CD}","not","toParse","Settings","displayMode","false"]},"operators":{"distinct":6,"total":8,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":3,"physical":5},"errors":[],"lineEnd":2937,"lineStart":2933,"name":"<anon method-471>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":45,"length":10,"time":2.5,"vocabulary":8,"volume":30,"operands":{"distinct":5,"total":5,"identifiers":["expect","\\begin{CD}A @X<a<< B @>>b> C @>>> D\\\\@. @| @AcAA @VVdV \\\\@. E @= F @>>> G\\end{CD}","not","toParse","displaySettings"]},"operators":{"distinct":3,"total":5,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2941,"lineStart":2939,"name":"<anon method-472>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.021,"difficulty":2.5,"effort":158.496,"length":20,"time":8.805,"vocabulary":9,"volume":63.399,"operands":{"distinct":6,"total":10,"identifiers":["expect","\\begin{CD}A @<a< B @>>b> C @>>> D\\\\@. @| @AcAA @VVdV \\\\@. E @= F @>>> G\\end{CD}","not","toParse","displaySettings","\\begin{CD}A @<a<< B @>>b C @>>> D\\\\@. @| @AcAA @VVdV \\\\@. E @= F @>>> G\\end{CD}"]},"operators":{"distinct":3,"total":10,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2945,"lineStart":2942,"name":"<anon method-473>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":45,"length":10,"time":2.5,"vocabulary":8,"volume":30,"operands":{"distinct":5,"total":5,"identifiers":["expect","\\begin{CD}A @<a<< B @>>b> C @>>> D\\\\@. @| @AcAA @VVdV \\\\@. E @= F @>>> G","not","toParse","displaySettings"]},"operators":{"distinct":3,"total":5,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2948,"lineStart":2946,"name":"<anon method-474>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","\\begin{CD}A @<a<< B @>>b> C @>>> D\\\\@. @| @AcAA @VVdV \\\\@. E @= F @>>> G\\end{CD}","toBuild","displaySettings"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":2952,"lineStart":2950,"name":"<anon method-475>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should not fail\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":10},"errors":[],"lineEnd":2964,"lineStart":2955,"name":"<anon method-476>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.033,"difficulty":3.214,"effort":320.329,"length":30,"time":17.796,"vocabulary":10,"volume":99.658,"operands":{"distinct":7,"total":15,"identifiers":["expect","operatorname{x*Π∑Pisum\frac a b}","toBuild","operatorname*{x*Π∑Pisum\frac a b}","operatorname*{x*Π∑Pisum\frac a b}_y x","operatorname*{x*Π∑Pisum\frac a b}limits_y x","operatorname{sn}limits_{b>c}(b+c)"]},"operators":{"distinct":3,"total":15,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":10,"physical":8},"errors":[],"lineEnd":2963,"lineStart":2956,"name":"<anon method-477>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":2.857,"halstead":{"bugs":0.107,"difficulty":2.7,"effort":867.167,"length":71,"time":48.176,"vocabulary":23,"volume":321.173,"operands":{"distinct":20,"total":36,"identifiers":["it","\"should parse its input\"","\"should allow empty URLs\"","\"should allow single-character URLs\"","\"should allow spaces single-character URLs\"","\"should allow letters [#$%&~_^] without escaping\"","\"should allow balanced braces in url\"","\"should not allow unbalanced brace(s) in url\"","\"should allow escape for letters [#$%&~_^{}]\"","\"should allow comments after URLs\"","\"should be marked up correctly\"","\"should not affect spacing around\"","\"should forbid relative URLs when trust option is false\"","\"should allow explicitly allowed protocols\"","\"should allow all protocols when trust option is true\"","\"should not allow explicitly disallowed protocols\"","\"should not allow explicitly uppercased disallowed protocols\"","getProtocolViaTrust","url","\"should get protocols correctly\""]},"operators":{"distinct":3,"total":35,"identifiers":["()","function","function=>"]}},"paramCount":0,"sloc":{"logical":35,"physical":129},"errors":[],"lineEnd":3094,"lineStart":2966,"name":"<anon method-478>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.014,"difficulty":2.4,"effort":100.8,"length":14,"time":5.6,"vocabulary":8,"volume":42,"operands":{"distinct":5,"total":8,"identifiers":["expect","href{http://example.com/}{sin}","toBuild","trustSettings","null"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2970,"lineStart":2967,"name":"<anon method-479>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.014,"difficulty":2.4,"effort":100.8,"length":14,"time":5.6,"vocabulary":8,"volume":42,"operands":{"distinct":5,"total":8,"identifiers":["expect","href{}{example here}","toBuild","trustSettings","null"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2975,"lineStart":2972,"name":"<anon method-480>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.051,"difficulty":3.409,"effort":519.185,"length":40,"time":28.844,"vocabulary":14,"volume":152.294,"operands":{"distinct":11,"total":25,"identifiers":["expect","href%end","toParseLike","\"\\href{%}end\"","trustSettings","null","\"\\url{%}end\"","\"\\url%%end\n\"","\"\\url{%}\"","\"\\url{e}nd\"","\"\\url {%}end\""]},"operators":{"distinct":3,"total":15,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":10,"physical":7},"errors":[],"lineEnd":2983,"lineStart":2977,"name":"<anon method-481>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.018,"difficulty":2.143,"effort":113.895,"length":16,"time":6.327,"vocabulary":10,"volume":53.151,"operands":{"distinct":7,"total":10,"identifiers":["expect","href %end","toParseLike","\"\\href{%}end\"","trustSettings","null","\"\\url{%}end\""]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":2988,"lineStart":2985,"name":"<anon method-482>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.07,"difficulty":6.5,"effort":1370.403,"length":48,"time":76.134,"vocabulary":21,"volume":210.831,"operands":{"distinct":14,"total":26,"identifiers":["url","\"http://example.org/~bar/#top?foo=$foo&bar=ba^r_boo%20baz\"","parsed1","getParsed","\\href{","}{\\alpha}","trustSettings","0","expect","href","toBe","parsed2","\\url{","}"]},"operators":{"distinct":7,"total":22,"identifiers":["const","=","[]","()","``","${}","."]}},"paramCount":0,"sloc":{"logical":9,"physical":7},"errors":[],"lineEnd":2996,"lineStart":2990,"name":"<anon method-483>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.07,"difficulty":6.5,"effort":1370.403,"length":48,"time":76.134,"vocabulary":21,"volume":210.831,"operands":{"distinct":14,"total":26,"identifiers":["url","\"http://example.org/{{}t{oo}}\"","parsed1","getParsed","\\href{","}{\\alpha}","trustSettings","0","expect","href","toBe","parsed2","\\url{","}"]},"operators":{"distinct":7,"total":22,"identifiers":["const","=","[]","()","``","${}","."]}},"paramCount":0,"sloc":{"logical":9,"physical":7},"errors":[],"lineEnd":3004,"lineStart":2998,"name":"<anon method-484>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.034,"difficulty":4,"effort":405.75,"length":32,"time":22.542,"vocabulary":9,"volume":101.438,"operands":{"distinct":6,"total":16,"identifiers":["expect","href{http://example.com/{a}{bar}","not","toParse","href{http://example.com/}a}{bar}","null"]},"operators":{"distinct":3,"total":16,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":3011,"lineStart":3006,"name":"<anon method-485>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":9.091,"halstead":{"bugs":0.088,"difficulty":6.028,"effort":1595.552,"length":57,"time":88.642,"vocabulary":25,"volume":264.7,"operands":{"distinct":18,"total":31,"identifiers":["url","\"http://example.org/~bar/#top?foo=$}foo{&bar=bar^r_boo%20baz\"","input","replace","/([#$%&~_^{}])/g","\"\\$1\"","parsed1","getParsed","\\href{","}{\\alpha}","trustSettings","0","expect","href","toBe","parsed2","\\url{","}"]},"operators":{"distinct":7,"total":26,"identifiers":["const","=","()",".","[]","``","${}"]}},"paramCount":0,"sloc":{"logical":11,"physical":8},"errors":[],"lineEnd":3020,"lineStart":3013,"name":"<anon method-486>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":13.932,"length":6,"time":0.774,"vocabulary":5,"volume":13.932,"operands":{"distinct":3,"total":3,"identifiers":["expect","\"\\url{http://example.com/}%comment\n\"","toBuild"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3024,"lineStart":3022,"name":"<anon method-487>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.029,"difficulty":3.85,"effort":330.471,"length":21,"time":18.36,"vocabulary":17,"volume":85.837,"operands":{"distinct":10,"total":11,"identifiers":["markup","katex","renderToString","r","href{http://example.com/}{example here}","trust","true","expect","toContain","\"<a href=\"http://example.com/\">\""]},"operators":{"distinct":7,"total":10,"identifiers":["const","=","()",".","``","{}",":"]}},"paramCount":0,"sloc":{"logical":6,"physical":4},"errors":[],"lineEnd":3029,"lineStart":3026,"name":"<anon method-488>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.014,"difficulty":2.333,"effort":100.765,"length":13,"time":5.598,"vocabulary":10,"volume":43.185,"operands":{"distinct":6,"total":7,"identifiers":["built","getBuilt","\"a\\href{http://example.com/}{+b}\"","trustSettings","expect","toMatchSnapshot"]},"operators":{"distinct":4,"total":6,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":3034,"lineStart":3031,"name":"<anon method-489>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.013,"difficulty":3,"effort":119.589,"length":12,"time":6.644,"vocabulary":10,"volume":39.863,"operands":{"distinct":5,"total":6,"identifiers":["parsed","getParsed","href{relative}{foo}","expect","toMatchSnapshot"]},"operators":{"distinct":5,"total":6,"identifiers":["const","=","``","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":3039,"lineStart":3036,"name":"<anon method-490>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.025,"difficulty":4.5,"effort":342,"length":19,"time":19,"vocabulary":16,"volume":76,"operands":{"distinct":8,"total":9,"identifiers":["parsed","getParsed","\"\\href{ftp://x}{foo}\"","Settings","trust","context","expect","toMatchSnapshot"]},"operators":{"distinct":8,"total":10,"identifiers":["const","=","()","new","{}",":","function=>","."]}},"paramCount":0,"sloc":{"logical":6,"physical":7},"errors":[],"lineEnd":3047,"lineStart":3041,"name":"<anon method-491>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0.004,"difficulty":1,"effort":11.61,"length":5,"time":0.645,"vocabulary":5,"volume":11.61,"operands":{"distinct":3,"total":3,"identifiers":["context","protocol","\"ftp\""]},"operators":{"distinct":2,"total":2,"identifiers":["===","."]}},"paramCount":1,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":3044,"lineStart":3044,"name":"<anon method-492>","paramNames":["context"],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.014,"difficulty":2.333,"effort":100.765,"length":13,"time":5.598,"vocabulary":10,"volume":43.185,"operands":{"distinct":6,"total":7,"identifiers":["parsed","getParsed","\"\\href{ftp://x}{foo}\"","trustSettings","expect","toMatchSnapshot"]},"operators":{"distinct":4,"total":6,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":3052,"lineStart":3049,"name":"<anon method-493>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.025,"difficulty":4.5,"effort":342,"length":19,"time":19,"vocabulary":16,"volume":76,"operands":{"distinct":8,"total":9,"identifiers":["parsed","getParsed","\"\\href{javascript:alert('x')}{foo}\"","Settings","trust","context","expect","toMatchSnapshot"]},"operators":{"distinct":8,"total":10,"identifiers":["const","=","()","new","{}",":","function=>","."]}},"paramCount":0,"sloc":{"logical":6,"physical":7},"errors":[],"lineEnd":3060,"lineStart":3054,"name":"<anon method-494>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0.004,"difficulty":1,"effort":11.61,"length":5,"time":0.645,"vocabulary":5,"volume":11.61,"operands":{"distinct":3,"total":3,"identifiers":["context","protocol","\"javascript\""]},"operators":{"distinct":2,"total":2,"identifiers":["!==","."]}},"paramCount":1,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":3057,"lineStart":3057,"name":"<anon method-495>","paramNames":["context"],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.025,"difficulty":4.5,"effort":342,"length":19,"time":19,"vocabulary":16,"volume":76,"operands":{"distinct":8,"total":9,"identifiers":["parsed","getParsed","\"\\href{JavaScript:alert('x')}{foo}\"","Settings","trust","context","expect","toMatchSnapshot"]},"operators":{"distinct":8,"total":10,"identifiers":["const","=","()","new","{}",":","function=>","."]}},"paramCount":0,"sloc":{"logical":6,"physical":7},"errors":[],"lineEnd":3068,"lineStart":3062,"name":"<anon method-496>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0.004,"difficulty":1,"effort":11.61,"length":5,"time":0.645,"vocabulary":5,"volume":11.61,"operands":{"distinct":3,"total":3,"identifiers":["context","protocol","\"javascript\""]},"operators":{"distinct":2,"total":2,"identifiers":["!==","."]}},"paramCount":1,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":3065,"lineStart":3065,"name":"<anon method-497>","paramNames":["context"],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.025,"difficulty":5.063,"effort":372.47,"length":18,"time":20.693,"vocabulary":17,"volume":73.574,"operands":{"distinct":8,"total":9,"identifiers":["protocol","getParsed","url","\\url{","}","Settings","trust","context"]},"operators":{"distinct":9,"total":9,"identifiers":["let","()","``","${}","new","{}",":","function=>","return"]}},"paramCount":1,"sloc":{"logical":5,"physical":7},"errors":[],"lineEnd":3076,"lineStart":3070,"name":"getProtocolViaTrust","paramNames":["url"],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1.5,"effort":15,"length":5,"time":0.833,"vocabulary":4,"volume":10,"operands":{"distinct":2,"total":3,"identifiers":["protocol","context"]},"operators":{"distinct":2,"total":2,"identifiers":["=","."]}},"paramCount":1,"sloc":{"logical":2,"physical":1},"errors":[],"lineEnd":3073,"lineStart":3073,"name":"<anon method-498>","paramNames":["context"],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":2.381,"halstead":{"bugs":0.185,"difficulty":3.19,"effort":1775.175,"length":123,"time":98.621,"vocabulary":23,"volume":556.398,"operands":{"distinct":21,"total":67,"identifiers":["expect","getProtocolViaTrust","\"foo\"","toBe","\"_relative\"","\"Foo:\"","\"Foo:bar\"","\"JavaScript:\"","\"javascript\"","\"JavaScript:code\"","\"!:\"","toBeUndefined","\"foo&colon;\"","\"?query=string&colon=\"","\"#query=string&colon=\"","\"dir/file&colon\"","\"//foo\"","\"://foo\"","\"  \t http://\"","\"http\"","\"  \t http://foo\""]},"operators":{"distinct":2,"total":56,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":42,"physical":16},"errors":[],"lineEnd":3093,"lineStart":3078,"name":"<anon method-499>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should return null for a omitted optional string\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":3100,"lineStart":3096,"name":"<anon method-500>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","includegraphics{https://cdn.kastatic.org/images/apple-touch-icon-57x57-precomposed.new.png}","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3099,"lineStart":3097,"name":"<anon method-501>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.052,"difficulty":4.846,"effort":754.01,"length":36,"time":41.889,"vocabulary":20,"volume":155.589,"operands":{"distinct":13,"total":18,"identifiers":["errorColor","\"#933\"","noThrowSettings","Settings","throwOnError","false","it","\"should still parse on unrecognized control sequences\"","describe","\"should allow unrecognized controls sequences anywhere, including\"","\"should produce color nodes with a color value given by errorColor\"","\"should build katex-error span for other type of KaTeX error\"","\"should properly escape LaTeX in errors\""]},"operators":{"distinct":7,"total":18,"identifiers":["const","=","new","{}",":","()","function"]}},"paramCount":0,"sloc":{"logical":14,"physical":51},"errors":[],"lineEnd":3153,"lineStart":3103,"name":"<anon method-502>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","error","toParse","noThrowSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3114,"lineStart":3112,"name":"<anon method-503>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["it","\"in superscripts and subscripts\"","\"in fractions\"","\"in square roots\"","\"in text boxes\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":8,"physical":21},"errors":[],"lineEnd":3136,"lineStart":3116,"name":"<anon method-504>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.022,"difficulty":3,"effort":199.705,"length":21,"time":11.095,"vocabulary":9,"volume":66.568,"operands":{"distinct":6,"total":12,"identifiers":["expect","2_error","toBuild","noThrowSettings","3^{error}_error","int\nolimits^error_error"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":3121,"lineStart":3117,"name":"<anon method-505>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.014,"difficulty":2.4,"effort":100.8,"length":14,"time":5.6,"vocabulary":8,"volume":42,"operands":{"distinct":5,"total":8,"identifiers":["expect","\frac{345}{error}","toBuild","noThrowSettings","\fracerror{error}"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":3126,"lineStart":3123,"name":"<anon method-506>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.014,"difficulty":2.4,"effort":100.8,"length":14,"time":5.6,"vocabulary":8,"volume":42,"operands":{"distinct":5,"total":8,"identifiers":["expect","sqrterror","toBuild","noThrowSettings","sqrt{234error}"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":3131,"lineStart":3128,"name":"<anon method-507>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{error}","toBuild","noThrowSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3135,"lineStart":3133,"name":"<anon method-508>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.043,"difficulty":4.25,"effort":549.388,"length":31,"time":30.522,"vocabulary":18,"volume":129.268,"operands":{"distinct":12,"total":17,"identifiers":["parsedInput","getParsed","r","error","noThrowSettings","expect","0","type","toBe","\"color\"","color","errorColor"]},"operators":{"distinct":6,"total":14,"identifiers":["const","=","()","``",".","[]"]}},"paramCount":0,"sloc":{"logical":7,"physical":5},"errors":[],"lineEnd":3142,"lineStart":3138,"name":"<anon method-509>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.016,"difficulty":2.917,"effort":141.26,"length":14,"time":7.848,"vocabulary":11,"volume":48.432,"operands":{"distinct":6,"total":7,"identifiers":["built","getBuilt","2^2^2","noThrowSettings","expect","toMatchSnapshot"]},"operators":{"distinct":5,"total":7,"identifiers":["const","=","()","``","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":3147,"lineStart":3144,"name":"<anon method-510>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.019,"difficulty":2.857,"effort":163.884,"length":16,"time":9.105,"vocabulary":12,"volume":57.359,"operands":{"distinct":7,"total":8,"identifiers":["html","katex","renderToString","2^&\"<>","noThrowSettings","expect","toMatchSnapshot"]},"operators":{"distinct":5,"total":8,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":3152,"lineStart":3149,"name":"<anon method-511>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["it","\"should contain affected position and length information\"","\"should contain position and length information at end of input\"","\"should contain no position and length information if unavailable\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":46},"errors":[],"lineEnd":3200,"lineStart":3155,"name":"<anon method-512>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.086,"difficulty":3.556,"effort":919.634,"length":58,"time":51.091,"vocabulary":22,"volume":258.647,"operands":{"distinct":18,"total":32,"identifiers":["katex","renderToString","\"1 + \\fraq{}{}\"","expect","true","toBe","false","error","toBeInstanceOf","ParseError","message","\"KaTeX parse error: Undefined control sequence: \\fraq at position 5: 1 + \\̲f̲r̲a̲q̲{}{}\"","rawMessage","\"Undefined control sequence: \\fraq\"","position","4","length","5"]},"operators":{"distinct":4,"total":26,"identifiers":["try","()",".","catch"]}},"paramCount":0,"sloc":{"logical":15,"physical":14},"errors":[],"lineEnd":3169,"lineStart":3156,"name":"<anon method-513>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.086,"difficulty":3.556,"effort":919.634,"length":58,"time":51.091,"vocabulary":22,"volume":258.647,"operands":{"distinct":18,"total":32,"identifiers":["katex","renderToString","\"\\frac{}\"","expect","true","toBe","false","error","toBeInstanceOf","ParseError","message","\"KaTeX parse error: Unexpected end of input in a macro argument, expected '}' at end of input: \\frac{}\"","rawMessage","\"Unexpected end of input in a macro argument, expected '}'\"","position","7","length","0"]},"operators":{"distinct":4,"total":26,"identifiers":["try","()",".","catch"]}},"paramCount":0,"sloc":{"logical":15,"physical":14},"errors":[],"lineEnd":3184,"lineStart":3171,"name":"<anon method-514>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.082,"difficulty":3.529,"effort":868.129,"length":56,"time":48.229,"vocabulary":21,"volume":245.97,"operands":{"distinct":17,"total":30,"identifiers":["katex","renderToString","\"\\verb|hello\nworld|\"","expect","true","toBe","false","error","toBeInstanceOf","ParseError","message","\"KaTeX parse error: \\verb ended by end of line instead of matching delimiter\"","rawMessage","\"\\verb ended by end of line instead of matching delimiter\"","position","toBeUndefined","length"]},"operators":{"distinct":4,"total":26,"identifiers":["try","()",".","catch"]}},"paramCount":0,"sloc":{"logical":15,"physical":14},"errors":[],"lineEnd":3199,"lineStart":3186,"name":"<anon method-515>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should treat certain symbols as synonyms\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":7},"errors":[],"lineEnd":3208,"lineStart":3202,"name":"<anon method-516>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.023,"difficulty":1.5,"effort":104.641,"length":21,"time":5.813,"vocabulary":10,"volume":69.76,"operands":{"distinct":8,"total":12,"identifiers":["expect","<","toBuildLike","lt",">","gt","left<\frac{1}{x}\right>","leftlt\frac{1}{x}\rightgt"]},"operators":{"distinct":2,"total":9,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":9,"physical":5},"errors":[],"lineEnd":3207,"lineStart":3203,"name":"<anon method-517>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should support AMS symbols in both text and math mode\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":9},"errors":[],"lineEnd":3218,"lineStart":3210,"name":"<anon method-518>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.029,"difficulty":4.5,"effort":394.061,"length":23,"time":21.892,"vocabulary":14,"volume":87.569,"operands":{"distinct":8,"total":12,"identifiers":["symbols","r","yencheckmarkcircledRmaltese","expect","toBuild","\\text{","}","strictSettings"]},"operators":{"distinct":6,"total":11,"identifiers":["const","=","``","()",".","${}"]}},"paramCount":0,"sloc":{"logical":6,"physical":7},"errors":[],"lineEnd":3217,"lineStart":3211,"name":"<anon method-519>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":0.556,"halstead":{"bugs":0.783,"difficulty":3.034,"effort":7124.609,"length":360,"time":395.812,"vocabulary":92,"volume":2348.482,"operands":{"distinct":89,"total":180,"identifiers":["it","\"should produce individual tokens\"","\"should preserve leading spaces inside macro definition\"","\"should preserve leading spaces inside macro argument\"","\"should ignore expanded spaces in math mode\"","\"should consume spaces after control-word macro\"","\"should consume spaces after macro with \\relax\"","\"should not consume spaces after control-word expansion\"","\"should consume spaces after \\relax\"","\"should consume spaces after control-word function\"","\"should preserve spaces after control-symbol macro\"","\"should preserve spaces after control-symbol function\"","\"should consume spaces between arguments\"","\"should allow for multiple expansion\"","\"should allow for multiple expansion with argument\"","\"should allow for macro argument\"","\"should allow properly nested group for macro argument\"","\"should delay expansion if preceded by \\expandafter\"","\"should not expand if preceded by \\noexpand\"","\"should allow for space macro argument (text version)\"","\"should allow for space macro argument (math version)\"","\"should allow for space second argument (text version)\"","\"should treat \\relax as empty argument\"","\"should allow for space second argument (math version)\"","\"should allow for empty macro argument\"","\"should allow for space function arguments\"","\"should build \\overset and \\underset\"","\"should build \\iff, \\implies, \\impliedby\"","\"should allow aliasing characters\"","\"\\@firstoftwo should consume both, and avoid errors\"","\"\\@ifstar should consume star but nothing else\"","\"\\@ifnextchar should not consume nonspaces\"","\"\\@ifnextchar should consume spaces\"","\"\\TextOrMath should work immediately\"","\"\\TextOrMath should work after other math\"","\"\\TextOrMath should work immediately after \\text\"","\"\\TextOrMath should work later after \\text\"","\"\\TextOrMath should work immediately after \\text ends\"","\"\\TextOrMath should work immediately after $\"","\"\\TextOrMath should work later after $\"","\"\\TextOrMath should work immediately after $ ends\"","\"\\TextOrMath should work in a macro\"","\"\\TextOrMath should work in a macro passed to \\text\"","\"\\char produces literal characters\"","\"\\char escapes ~ correctly\"","\"\\char handles >16-bit characters\"","\"should build Unicode private area characters\"","\"\\gdef defines macros\"","\"\\gdef defines macros with delimited parameter\"","\"\\xdef should expand definition\"","\"\\def should be handled in Parser\"","\"\\def works locally\"","\"\\gdef overrides at all levels\"","\"\\global needs to followed by macro prefixes, \\def or \\edef\"","\"\\long needs to followed by macro prefixes, \\def or \\edef\"","\"Macro arguments do not generate groups\"","\"\\textbf arguments do generate groups\"","\"\\sqrt optional arguments generate groups\"","\"array cells generate groups\"","\"\\gdef changes settings.macros\"","\"\\def doesn't change settings.macros\"","\"\\def doesn't change settings.macros on error\"","\"\\def changes settings.macros with globalGroup\"","\"\\let copies the definition\"","\"\\let should consume one optional space after equals sign\"","\"\\futurelet should parse correctly\"","\"macros argument can simulate \\let\"","\"\\newcommand doesn't change settings.macros\"","\"\\newcommand changes settings.macros with globalGroup\"","\"\\newcommand defines new macros\"","\"\\renewcommand redefines macros\"","\"\\providecommand defines but does not redefine macros\"","\"\\newcommand is local\"","\"\\newcommand accepts number of arguments\"","\"should treat \\hspace, \\hskip like \\kern\"","\"should expand \\limsup as expected\"","\"should expand \\liminf as expected\"","\"should expand AMS log-like symbols as expected\"","\"should expand \\plim as expected\"","\"should expand \\argmin as expected\"","\"should expand \\argmax as expected\"","\"should expand \\bra as expected\"","\"should expand \\ket as expected\"","\"should expand \\braket as expected\"","\"should expand \\Bra as expected\"","\"should expand \\Ket as expected\"","\"should expand \\Braket as expected\"","\"should expand \\set as expected\"","\"should expand \\Set as expected\""]},"operators":{"distinct":3,"total":180,"identifiers":["()","function","function=>"]}},"paramCount":0,"sloc":{"logical":180,"physical":575},"errors":[],"lineEnd":3794,"lineStart":3220,"name":"<anon method-520>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.02,"difficulty":3,"effort":182.753,"length":16,"time":10.153,"vocabulary":14,"volume":60.918,"operands":{"distinct":8,"total":8,"identifiers":["expect","e^\foo","toParseLike","\"e^1 23\"","Settings","macros","\"\\foo\"","\"123\""]},"operators":{"distinct":6,"total":8,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":3224,"lineStart":3221,"name":"<anon method-521>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.023,"difficulty":3,"effort":210.972,"length":18,"time":11.721,"vocabulary":15,"volume":70.324,"operands":{"distinct":9,"total":9,"identifiers":["expect","\text{\foo}","toParseLike","r","\text{ x}","Settings","macros","\"\\foo\"","\" x\""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":3229,"lineStart":3226,"name":"<anon method-522>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.023,"difficulty":3,"effort":210.972,"length":18,"time":11.721,"vocabulary":15,"volume":70.324,"operands":{"distinct":9,"total":9,"identifiers":["expect","\text{\foo{ x}}","toParseLike","r","\text{ x}","Settings","macros","\"\\foo\"","\"#1\""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":3234,"lineStart":3231,"name":"<anon method-523>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.02,"difficulty":3,"effort":182.753,"length":16,"time":10.153,"vocabulary":14,"volume":60.918,"operands":{"distinct":8,"total":8,"identifiers":["expect","\foo","toParseLike","\"x\"","Settings","macros","\"\\foo\"","\" x\""]},"operators":{"distinct":6,"total":8,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":4,"physical":3},"errors":[],"lineEnd":3238,"lineStart":3236,"name":"<anon method-524>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.023,"difficulty":3,"effort":210.972,"length":18,"time":11.721,"vocabulary":15,"volume":70.324,"operands":{"distinct":9,"total":9,"identifiers":["expect","\text{\foo }","toParseLike","r","\text{x}","Settings","macros","\"\\foo\"","\"x\""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":3243,"lineStart":3240,"name":"<anon method-525>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.023,"difficulty":3,"effort":210.972,"length":18,"time":11.721,"vocabulary":15,"volume":70.324,"operands":{"distinct":9,"total":9,"identifiers":["expect","\text{\foo }","toParseLike","r","\text{}","Settings","macros","\"\\foo\"","\"\\relax\""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":3248,"lineStart":3245,"name":"<anon method-526>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.023,"difficulty":3,"effort":210.972,"length":18,"time":11.721,"vocabulary":15,"volume":70.324,"operands":{"distinct":9,"total":9,"identifiers":["expect","\text{\\ }","toParseLike","r","\text{ }","Settings","macros","\"\\\\\"","\"\\relax\""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":3253,"lineStart":3250,"name":"<anon method-527>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{\relax }","toParseLike","\text{}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3257,"lineStart":3255,"name":"<anon method-528>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{KaTeX }","toParseLike","\text{KaTeX}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3261,"lineStart":3259,"name":"<anon method-529>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.023,"difficulty":3,"effort":210.972,"length":18,"time":11.721,"vocabulary":15,"volume":70.324,"operands":{"distinct":9,"total":9,"identifiers":["expect","\text{% y}","toParseLike","r","\text{x y}","Settings","macros","\"\\%\"","\"x\""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":3266,"lineStart":3263,"name":"<anon method-530>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","\text{' }","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3270,"lineStart":3268,"name":"<anon method-531>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.048,"difficulty":5.4,"effort":777.6,"length":36,"time":43.2,"vocabulary":16,"volume":144,"operands":{"distinct":10,"total":18,"identifiers":["expect","\text{\foo 1 2}","toParseLike","r","\text{12end}","Settings","macros","\"\\foo\"","\"#1#2end\"","\text{\foo {1} {2}}"]},"operators":{"distinct":6,"total":18,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":10,"physical":6},"errors":[],"lineEnd":3277,"lineStart":3272,"name":"<anon method-532>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.025,"difficulty":3,"effort":228,"length":19,"time":12.667,"vocabulary":16,"volume":76,"operands":{"distinct":10,"total":10,"identifiers":["expect","1\foo2","toParseLike","\"1aa2\"","Settings","macros","\"\\foo\"","\"\\bar\\bar\"","\"\\bar\"","\"a\""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":6},"errors":[],"lineEnd":3284,"lineStart":3279,"name":"<anon method-533>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.025,"difficulty":3,"effort":228,"length":19,"time":12.667,"vocabulary":16,"volume":76,"operands":{"distinct":10,"total":10,"identifiers":["expect","1\foo2","toParseLike","\"12222\"","Settings","macros","\"\\foo\"","\"\\bar{#1}\\bar{#1}\"","\"\\bar\"","\"#1#1\""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":6},"errors":[],"lineEnd":3291,"lineStart":3286,"name":"<anon method-534>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.025,"difficulty":3,"effort":228,"length":19,"time":12.667,"vocabulary":16,"volume":76,"operands":{"distinct":10,"total":10,"identifiers":["expect","\foo\bar","toParseLike","\"(xyz)\"","Settings","macros","\"\\foo\"","\"(#1)\"","\"\\bar\"","\"xyz\""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":6},"errors":[],"lineEnd":3298,"lineStart":3293,"name":"<anon method-535>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.02,"difficulty":3,"effort":182.753,"length":16,"time":10.153,"vocabulary":14,"volume":60.918,"operands":{"distinct":8,"total":8,"identifiers":["expect","\foo{e^{x_{12}+3}}","toParseLike","\"(e^{x_{12}+3})\"","Settings","macros","\"\\foo\"","\"(#1)\""]},"operators":{"distinct":6,"total":8,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":3303,"lineStart":3300,"name":"<anon method-536>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.05,"difficulty":3.6,"effort":537.62,"length":34,"time":29.868,"vocabulary":21,"volume":149.339,"operands":{"distinct":15,"total":18,"identifiers":["expect","expandafter\foo\bar","toParseLike","\"x+y\"","Settings","macros","\"\\foo\"","\"#1+#2\"","\"\\bar\"","\"xy\"","def\foo{x}def\bar{def\foo{y}}expandafter\bar\foo","x","expandafter\foodef\foo{x}","not","toParse"]},"operators":{"distinct":6,"total":16,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":10,"physical":9},"errors":[],"lineEnd":3313,"lineStart":3305,"name":"<anon method-537>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.064,"difficulty":6,"effort":1150.899,"length":46,"time":63.939,"vocabulary":18,"volume":191.817,"operands":{"distinct":12,"total":24,"identifiers":["expect","\noexpand\foo y","toParseLike","\"y\"","Settings","macros","\"\\foo\"","\"x\"","expandafter\foo\noexpand\foo","\noexpand\frac xy","xy","\noexpanddef\foo{xy}\foo"]},"operators":{"distinct":6,"total":22,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":14,"physical":12},"errors":[],"lineEnd":3326,"lineStart":3315,"name":"<anon method-538>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.029,"difficulty":3,"effort":257.51,"length":21,"time":14.306,"vocabulary":17,"volume":85.837,"operands":{"distinct":11,"total":11,"identifiers":["expect","\text{\foo\bar}","toParseLike","r","\text{( )}","Settings","macros","\"\\foo\"","\"(#1)\"","\"\\bar\"","\" \""]},"operators":{"distinct":6,"total":10,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":3333,"lineStart":3328,"name":"<anon method-539>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.025,"difficulty":3,"effort":228,"length":19,"time":12.667,"vocabulary":16,"volume":76,"operands":{"distinct":10,"total":10,"identifiers":["expect","\foo\bar","toParseLike","\"()\"","Settings","macros","\"\\foo\"","\"(#1)\"","\"\\bar\"","\" \""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":6},"errors":[],"lineEnd":3340,"lineStart":3335,"name":"<anon method-540>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.029,"difficulty":3,"effort":257.51,"length":21,"time":14.306,"vocabulary":17,"volume":85.837,"operands":{"distinct":11,"total":11,"identifiers":["expect","\text{\foo\bar\bar}","toParseLike","r","\text{( , )}","Settings","macros","\"\\foo\"","\"(#1,#2)\"","\"\\bar\"","\" \""]},"operators":{"distinct":6,"total":10,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":3347,"lineStart":3342,"name":"<anon method-541>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.023,"difficulty":3,"effort":210.972,"length":18,"time":11.721,"vocabulary":15,"volume":70.324,"operands":{"distinct":9,"total":9,"identifiers":["expect","\text{\foo\relax x}","toParseLike","r","\text{(,x)}","Settings","macros","\"\\foo\"","\"(#1,#2)\""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":5},"errors":[],"lineEnd":3353,"lineStart":3349,"name":"<anon method-542>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.025,"difficulty":3,"effort":228,"length":19,"time":12.667,"vocabulary":16,"volume":76,"operands":{"distinct":10,"total":10,"identifiers":["expect","\foo\bar\bar","toParseLike","\"(,)\"","Settings","macros","\"\\foo\"","\"(#1,#2)\"","\"\\bar\"","\" \""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":6},"errors":[],"lineEnd":3360,"lineStart":3355,"name":"<anon method-543>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.025,"difficulty":3,"effort":228,"length":19,"time":12.667,"vocabulary":16,"volume":76,"operands":{"distinct":10,"total":10,"identifiers":["expect","\foo\bar","toParseLike","\"()\"","Settings","macros","\"\\foo\"","\"(#1)\"","\"\\bar\"","\"\""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":6},"errors":[],"lineEnd":3367,"lineStart":3362,"name":"<anon method-544>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.023,"difficulty":3,"effort":210.972,"length":18,"time":11.721,"vocabulary":15,"volume":70.324,"operands":{"distinct":9,"total":9,"identifiers":["expect","\frac\bar\bar","toParseLike","r","\frac{}{}","Settings","macros","\"\\bar\"","\" \""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":5},"errors":[],"lineEnd":3373,"lineStart":3369,"name":"<anon method-545>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["expect","overset{f}{\rightarrow} Y","toBuild","null"]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":3378,"lineStart":3375,"name":"<anon method-546>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.018,"difficulty":2.7,"effort":145.8,"length":18,"time":8.1,"vocabulary":8,"volume":54,"operands":{"distinct":5,"total":9,"identifiers":["expect","X iff Y","toBuild","X implies Y","X impliedby Y"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":3384,"lineStart":3380,"name":"<anon method-547>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.02,"difficulty":3,"effort":182.753,"length":16,"time":10.153,"vocabulary":14,"volume":60.918,"operands":{"distinct":8,"total":8,"identifiers":["expect","x’=c","toParseLike","\"x'=c\"","Settings","macros","\"’\"","\"'\""]},"operators":{"distinct":6,"total":8,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":4,"physical":5},"errors":[],"lineEnd":3390,"lineStart":3386,"name":"<anon method-548>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.013,"difficulty":1.6,"effort":62.885,"length":14,"time":3.494,"vocabulary":7,"volume":39.303,"operands":{"distinct":5,"total":8,"identifiers":["expect","@firstoftwo{yes}{no}","toParseLike","yes","@firstoftwo{yes}{1'_2^3}"]},"operators":{"distinct":2,"total":6,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":4},"errors":[],"lineEnd":3395,"lineStart":3392,"name":"<anon method-549>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.014,"difficulty":1.333,"effort":56,"length":14,"time":3.111,"vocabulary":8,"volume":42,"operands":{"distinct":6,"total":8,"identifiers":["expect","@ifstar{yes}{no}*!","toParseLike","yes!","@ifstar{yes}{no}?!","no?!"]},"operators":{"distinct":2,"total":6,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":4},"errors":[],"lineEnd":3400,"lineStart":3397,"name":"<anon method-550>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.014,"difficulty":1.333,"effort":56,"length":14,"time":3.111,"vocabulary":8,"volume":42,"operands":{"distinct":6,"total":8,"identifiers":["expect","@ifnextchar!{yes}{no}!!","toParseLike","yes!!","@ifnextchar!{yes}{no}?!","no?!"]},"operators":{"distinct":2,"total":6,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":4},"errors":[],"lineEnd":3405,"lineStart":3402,"name":"<anon method-551>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","null","toParseLike","yesxyesx"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":3410,"lineStart":3407,"name":"<anon method-552>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.014,"difficulty":1.333,"effort":56,"length":14,"time":3.111,"vocabulary":8,"volume":42,"operands":{"distinct":6,"total":8,"identifiers":["expect","@ifstar{yes}{no}*!","toParseLike","yes!","@ifstar{yes}{no}?!","no?!"]},"operators":{"distinct":2,"total":6,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":4},"errors":[],"lineEnd":3415,"lineStart":3412,"name":"<anon method-553>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","TextOrMath{text}{math}","toParseLike","math"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3419,"lineStart":3417,"name":"<anon method-554>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","x+TextOrMath{text}{math}","toParseLike","x+math"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3423,"lineStart":3421,"name":"<anon method-555>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{TextOrMath{text}{math}}","toParseLike","\text{text}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3427,"lineStart":3425,"name":"<anon method-556>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{hello TextOrMath{text}{math}}","toParseLike","\text{hello text}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3431,"lineStart":3429,"name":"<anon method-557>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{TextOrMath{text}{math}}TextOrMath{text}{math}","toParseLike","\text{text}math"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":3436,"lineStart":3433,"name":"<anon method-558>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{$TextOrMath{text}{math}$}","toParseLike","\text{$math$}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3440,"lineStart":3438,"name":"<anon method-559>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{$x+TextOrMath{text}{math}$}","toParseLike","\text{$x+math$}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3444,"lineStart":3442,"name":"<anon method-560>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{$TextOrMath{text}{math}$TextOrMath{text}{math}}","toParseLike","\text{$math$text}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":3449,"lineStart":3446,"name":"<anon method-561>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.023,"difficulty":3,"effort":210.972,"length":18,"time":11.721,"vocabulary":15,"volume":70.324,"operands":{"distinct":9,"total":9,"identifiers":["expect","mode\text{mode$mode$mode}mode","toParseLike","r","math\text{text$math$text}math","Settings","macros","\"\\mode\"","\"\\TextOrMath{text}{math}\""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":6},"errors":[],"lineEnd":3456,"lineStart":3451,"name":"<anon method-562>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.023,"difficulty":3,"effort":210.972,"length":18,"time":11.721,"vocabulary":15,"volume":70.324,"operands":{"distinct":9,"total":9,"identifiers":["expect","\textmode","toParseLike","r","\text t","Settings","macros","\"\\mode\"","\"\\TextOrMath{t}{m}\""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":3461,"lineStart":3458,"name":"<anon method-563>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":4,"halstead":{"bugs":0.119,"difficulty":4.125,"effort":1471.907,"length":84,"time":81.773,"vocabulary":19,"volume":356.826,"operands":{"distinct":16,"total":44,"identifiers":["expect","\"\\char`a\"","toParseLike","\"\\char`\\a\"","\"\\char`\\%\"","char37","char'45","char\"25","char","not","toParse","\"\\char`\"","char'","char\"","char'a","char\"g"]},"operators":{"distinct":3,"total":40,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":25,"physical":13},"errors":[],"lineEnd":3475,"lineStart":3463,"name":"<anon method-564>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.046,"difficulty":4.909,"effort":682.235,"length":34,"time":37.902,"vocabulary":17,"volume":138.974,"operands":{"distinct":11,"total":18,"identifiers":["parsedBare","getParsed","~","expect","0","type","toEqual","\"spacing\"","parsedChar","\"\\char`\\~\"","\"textord\""]},"operators":{"distinct":6,"total":16,"identifiers":["const","=","``","()",".","[]"]}},"paramCount":0,"sloc":{"logical":8,"physical":6},"errors":[],"lineEnd":3482,"lineStart":3477,"name":"<anon method-565>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.037,"difficulty":4.5,"effort":504,"length":28,"time":28,"vocabulary":16,"volume":112,"operands":{"distinct":10,"total":15,"identifiers":["parsed","getParsed","char\"1d7d9","expect","0","type","toEqual","\"textord\"","text","\"𝟙\""]},"operators":{"distinct":6,"total":13,"identifiers":["const","=","``","()",".","[]"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":3488,"lineStart":3484,"name":"<anon method-566>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.018,"difficulty":2.7,"effort":145.8,"length":18,"time":8.1,"vocabulary":8,"volume":54,"operands":{"distinct":5,"total":9,"identifiers":["expect","gvertneqqlvertneqq\ngeqq\ngeqslant\nleqq","toBuild","\nleqslant\nshortmid\nshortparallel\u000barsubsetneq","\u000barsubsetneqq\u000barsupsetneq\u000barsupsetneqq"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":3494,"lineStart":3490,"name":"<anon method-567>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.023,"difficulty":3,"effort":210.972,"length":18,"time":11.721,"vocabulary":15,"volume":70.324,"operands":{"distinct":9,"total":9,"identifiers":["expect","\textmode","toParseLike","r","\text{text}","Settings","macros","\"\\mode\"","\"\\TextOrMath{text}{math}\""]},"operators":{"distinct":6,"total":9,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":3499,"lineStart":3496,"name":"<anon method-568>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.125,"halstead":{"bugs":0.164,"difficulty":3.75,"effort":1845.933,"length":106,"time":102.552,"vocabulary":25,"volume":492.249,"operands":{"distinct":22,"total":55,"identifiers":["expect","gdef\foo{x^2}\foo+\foo","toParseLike","x^2+x^2","gdef\foo{hi}\foo+\text\foo","hi+\text{hi}","gdef\foo#1{hi #1}\text{\foo{Alice}, \foo{Bob}}","\text{hi Alice, hi Bob}","gdef\foo#1#2{(#1,#2)}\foo 1 2+\foo 3 4","(1,2)+(3,4)","gdef\foo#2{}","not","toParse","gdef\foo#a{}","gdef\foo#1#3{}","gdef\foo#1#2#3#4#5#6#7#8#9{}","gdef\foo#1#2#3#4#5#6#7#8#9#10{}","gdef\foo1","gdef{\foo}{}","gdef\foo\bar","gdef{\foo\bar}{}","gdef{}{}"]},"operators":{"distinct":3,"total":51,"identifiers":[".","``","()"]}},"paramCount":0,"sloc":{"logical":32,"physical":17},"errors":[],"lineEnd":3517,"lineStart":3501,"name":"<anon method-569>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.06,"difficulty":2.769,"effort":498.462,"length":45,"time":27.692,"vocabulary":16,"volume":180,"operands":{"distinct":13,"total":24,"identifiers":["expect","gdef\foo|#1||{#1}\text{\foo| x y ||}","toParseLike","\text{ x y }","gdef\foo#1|#2{#1+#2}\foo 1 2 |34","12+34","gdef\foo#1#{#1}\foo1^{23}","1^{23}","gdef\foo|{}\foo","not","toParse","gdef\foo#1|{#1}\foo1","gdef\foo#1|{#1}\foo1}|"]},"operators":{"distinct":3,"total":21,"identifiers":[".","``","()"]}},"paramCount":0,"sloc":{"logical":15,"physical":8},"errors":[],"lineEnd":3526,"lineStart":3519,"name":"<anon method-570>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":9.091,"halstead":{"bugs":0.036,"difficulty":2.4,"effort":257.551,"length":29,"time":14.308,"vocabulary":13,"volume":107.313,"operands":{"distinct":10,"total":16,"identifiers":["expect","def\foo{a}Þf\bar{\foo}def\foo{}\bar","toParseLike","a","def\foo{a}Þf\bar{def\noexpand\foo{}}\foo\bar\foo","def\foo{a}Þf\bar{\foo\noexpand\foo}def\foo{b}\bar","ab","Þf\bar{\foo}","not","toParse"]},"operators":{"distinct":3,"total":13,"identifiers":[".","``","()"]}},"paramCount":0,"sloc":{"logical":11,"physical":9},"errors":[],"lineEnd":3536,"lineStart":3528,"name":"<anon method-571>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.025,"difficulty":3.75,"effort":285.552,"length":20,"time":15.864,"vocabulary":14,"volume":76.147,"operands":{"distinct":8,"total":10,"identifiers":["expect","gdef\foo{1}","toParse","Settings","maxExpand","0","2^def\foo{1}2","not"]},"operators":{"distinct":6,"total":10,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":3541,"lineStart":3538,"name":"<anon method-572>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.013,"difficulty":1.6,"effort":62.885,"length":14,"time":3.494,"vocabulary":7,"volume":39.303,"operands":{"distinct":5,"total":8,"identifiers":["expect","null","toParseLike","1{2{3}2}1","12{34}2"]},"operators":{"distinct":2,"total":6,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":3548,"lineStart":3543,"name":"<anon method-573>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.02,"difficulty":2.4,"effort":141.491,"length":21,"time":7.861,"vocabulary":7,"volume":58.954,"operands":{"distinct":5,"total":12,"identifiers":["expect","null","toParseLike","1{2{3}3}3","1{2{34}35}3"]},"operators":{"distinct":2,"total":9,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":9,"physical":8},"errors":[],"lineEnd":3557,"lineStart":3550,"name":"<anon method-574>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.263,"halstead":{"bugs":0.058,"difficulty":3.136,"effort":549.297,"length":46,"time":30.517,"vocabulary":14,"volume":175.138,"operands":{"distinct":11,"total":23,"identifiers":["expect","globaldef\foo{}\foo","toParseLike","globaledef\foo{}\foo","defDEF{def}globalDEF\foo{}\foo","globalglobaldef\foo{}\foo","globallongdef\foo{}\foo","global\foo","not","toParse","global\bar x"]},"operators":{"distinct":3,"total":23,"identifiers":[".","``","()"]}},"paramCount":0,"sloc":{"logical":19,"physical":9},"errors":[],"lineEnd":3567,"lineStart":3559,"name":"<anon method-575>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":9.091,"halstead":{"bugs":0.03,"difficulty":2.438,"effort":219.241,"length":26,"time":12.18,"vocabulary":11,"volume":89.945,"operands":{"distinct":8,"total":13,"identifiers":["expect","longdef\foo{}\foo","toParseLike","longedef\foo{}\foo","longglobaldef\foo{}\foo","long\foo","not","toParse"]},"operators":{"distinct":3,"total":13,"identifiers":[".","``","()"]}},"paramCount":0,"sloc":{"logical":11,"physical":6},"errors":[],"lineEnd":3574,"lineStart":3569,"name":"<anon method-576>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","null","toParseLike","1122"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":3579,"lineStart":3576,"name":"<anon method-577>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","null","toParseLike","1\textbf{12}1"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3583,"lineStart":3581,"name":"<anon method-578>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","null","toParseLike","11sqrt[2]{2}11"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":3588,"lineStart":3585,"name":"<anon method-579>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.013,"difficulty":1.6,"effort":62.885,"length":14,"time":3.494,"vocabulary":7,"volume":39.303,"operands":{"distinct":5,"total":8,"identifiers":["expect","null","toParseLike","\begin{matrix}1&2&1end{matrix}1","\begin{matrix}2&1end{matrix}1"]},"operators":{"distinct":2,"total":6,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":3595,"lineStart":3590,"name":"<anon method-580>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.03,"difficulty":6.286,"effort":564.825,"length":23,"time":31.379,"vocabulary":15,"volume":89.858,"operands":{"distinct":7,"total":11,"identifiers":["macros","expect","gdef\foo{1}","toParse","Settings","\"\\foo\"","toBeTruthy"]},"operators":{"distinct":8,"total":12,"identifiers":["const","=","{}","()",".","``","new","[]"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":3601,"lineStart":3597,"name":"<anon method-581>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.03,"difficulty":6.286,"effort":564.825,"length":23,"time":31.379,"vocabulary":15,"volume":89.858,"operands":{"distinct":7,"total":11,"identifiers":["macros","expect","def\foo{1}","toParse","Settings","\"\\foo\"","toBeFalsy"]},"operators":{"distinct":8,"total":12,"identifiers":["const","=","{}","()",".","``","new","[]"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":3607,"lineStart":3603,"name":"<anon method-582>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.033,"difficulty":6,"effort":600,"length":25,"time":33.333,"vocabulary":16,"volume":100,"operands":{"distinct":8,"total":12,"identifiers":["macros","expect","def\foo{c^}\foo","not","toParse","Settings","\"\\foo\"","toBeFalsy"]},"operators":{"distinct":8,"total":13,"identifiers":["const","=","{}","()",".","``","new","[]"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":3613,"lineStart":3609,"name":"<anon method-583>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.036,"difficulty":6.5,"effort":704.717,"length":26,"time":39.151,"vocabulary":18,"volume":108.418,"operands":{"distinct":9,"total":13,"identifiers":["macros","expect","def\foo{1}","toParse","Settings","globalGroup","true","\"\\foo\"","toBeTruthy"]},"operators":{"distinct":9,"total":13,"identifiers":["const","=","{}","()",".","``","new",":","[]"]}},"paramCount":0,"sloc":{"logical":7,"physical":5},"errors":[],"lineEnd":3619,"lineStart":3615,"name":"<anon method-584>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":4.762,"halstead":{"bugs":0.068,"difficulty":1.75,"effort":357.571,"length":49,"time":19.865,"vocabulary":18,"volume":204.326,"operands":{"distinct":16,"total":28,"identifiers":["expect","let\foo=\fracdef\frac{}\foo12","toParseLike","\frac12","def\foo{1}let\bar\foodef\foo{2}\bar","1","let\foo=kernedef\bar{\foo1em}letkern=\relax\bar","kern1em","let\foo{sqrt\foo1}","sqrt{1}","letequals==aequals b","a=b","let\foo=x\noexpand\foo","x","let\foo=xedef\bar{\foo}def\foo{y}\bar","y"]},"operators":{"distinct":2,"total":21,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":21,"physical":12},"errors":[],"lineEnd":3632,"lineStart":3621,"name":"<anon method-585>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.023,"difficulty":3.125,"effort":219.714,"length":19,"time":12.206,"vocabulary":13,"volume":70.308,"operands":{"distinct":8,"total":10,"identifiers":["expect","def:{letspace= }: \text{space}","toParseLike","\text{ }","tree","getParsed","def\bold{\bgroup\bflet\next= }\bold{a}","toMatchSnapshot"]},"operators":{"distinct":5,"total":9,"identifiers":[".","``","const","=","()"]}},"paramCount":0,"sloc":{"logical":7,"physical":6},"errors":[],"lineEnd":3639,"lineStart":3634,"name":"<anon method-586>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\futurelet\foo\frac1{2+\foo}","toParseLike","\frac1{2+1}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3643,"lineStart":3641,"name":"<anon method-587>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.143,"halstead":{"bugs":0.071,"difficulty":5.367,"effort":1148.75,"length":48,"time":63.819,"vocabulary":22,"volume":214.053,"operands":{"distinct":15,"total":23,"identifiers":["expect","int","toParseLike","\"\\int\\limits\"","macros","\"\\Oldint\"","tokens","text","\"\\int\"","noexpand","true","numArgs","0","unexpandable","\"\\limits\""]},"operators":{"distinct":7,"total":25,"identifiers":["()",".","``","{}",":","[]",","]}},"paramCount":0,"sloc":{"logical":14,"physical":13},"errors":[],"lineEnd":3657,"lineStart":3645,"name":"<anon method-588>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.03,"difficulty":6.286,"effort":564.825,"length":23,"time":31.379,"vocabulary":15,"volume":89.858,"operands":{"distinct":7,"total":11,"identifiers":["macros","expect","\newcommand\foo{x^2}\foo+\foo","toParse","Settings","\"\\foo\"","toBeFalsy"]},"operators":{"distinct":8,"total":12,"identifiers":["const","=","{}","()",".","``","new","[]"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":3663,"lineStart":3659,"name":"<anon method-589>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.036,"difficulty":6.5,"effort":704.717,"length":26,"time":39.151,"vocabulary":18,"volume":108.418,"operands":{"distinct":9,"total":13,"identifiers":["macros","expect","\newcommand\foo{x^2}\foo+\foo","toParse","Settings","globalGroup","true","\"\\foo\"","toBeTruthy"]},"operators":{"distinct":9,"total":13,"identifiers":["const","=","{}","()",".","``","new",":","[]"]}},"paramCount":0,"sloc":{"logical":7,"physical":6},"errors":[],"lineEnd":3670,"lineStart":3665,"name":"<anon method-590>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.556,"halstead":{"bugs":0.083,"difficulty":3.692,"effort":915.692,"length":62,"time":50.872,"vocabulary":16,"volume":248,"operands":{"distinct":13,"total":32,"identifiers":["expect","\newcommand\foo{x^2}\foo+\foo","toParseLike","x^2+x^2","\newcommand{\foo}{x^2}\foo+\foo","\newcommand\bar{x^2}\bar+\bar","not","toParse","\newcommand{\bar}{x^2}\bar+\bar","\newcommandlambda{x^2}lambda","\newcommand\textdollar{x^2}\textdollar","\newcommand{\foo}{1}\foo\newcommand{\foo}{2}\foo","\newcommandlimits{}"]},"operators":{"distinct":3,"total":30,"identifiers":[".","``","()"]}},"paramCount":0,"sloc":{"logical":18,"physical":14},"errors":[],"lineEnd":3685,"lineStart":3672,"name":"<anon method-591>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.692,"halstead":{"bugs":0.047,"difficulty":2.727,"effort":384.197,"length":37,"time":21.344,"vocabulary":14,"volume":140.872,"operands":{"distinct":11,"total":20,"identifiers":["expect","\renewcommand\foo{x^2}\foo+\foo","not","toParse","\renewcommand{\foo}{x^2}\foo+\foo","\renewcommand\bar{x^2}\bar+\bar","toParseLike","x^2+x^2","\renewcommand{\bar}{x^2}\bar+\bar","\newcommand{\foo}{1}\foo\renewcommand{\foo}{2}\foo","12"]},"operators":{"distinct":3,"total":17,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":13,"physical":7},"errors":[],"lineEnd":3693,"lineStart":3687,"name":"<anon method-592>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.042,"difficulty":2,"effort":250.947,"length":35,"time":13.942,"vocabulary":12,"volume":125.474,"operands":{"distinct":10,"total":20,"identifiers":["expect","providecommand\foo{x^2}\foo+\foo","toParseLike","x^2+x^2","providecommand{\foo}{x^2}\foo+\foo","\newcommand{\foo}{1}\fooprovidecommand{\foo}{2}\foo","11","providecommand{\foo}{1}\foo\renewcommand{\foo}{2}\foo","12","providecommand{\foo}{1}\fooprovidecommand{\foo}{2}\foo"]},"operators":{"distinct":2,"total":15,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":15,"physical":10},"errors":[],"lineEnd":3704,"lineStart":3695,"name":"<anon method-593>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\newcommand\foo{1}\foo{\renewcommand\foo{2}\foo}\foo","toParseLike","1{2}1"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":3709,"lineStart":3706,"name":"<anon method-594>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.037,"difficulty":2.4,"effort":266.432,"length":30,"time":14.802,"vocabulary":13,"volume":111.013,"operands":{"distinct":10,"total":16,"identifiers":["expect","\newcommand\foo[1]{#1^2}\foo x+\foo{y}","toParseLike","x^2+y^2","\newcommand\foo[10]{#1^2}\foo 0123456789","0^2","\newcommand\foo[x]{}","not","toParse","\newcommand\foo[1.5]{}"]},"operators":{"distinct":3,"total":14,"identifiers":[".","``","()"]}},"paramCount":0,"sloc":{"logical":10,"physical":6},"errors":[],"lineEnd":3716,"lineStart":3711,"name":"<anon method-595>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.013,"difficulty":1.6,"effort":62.885,"length":14,"time":3.494,"vocabulary":7,"volume":39.303,"operands":{"distinct":5,"total":8,"identifiers":["expect","hspace{1em}","toParseLike","kern1em","hskip{1em}"]},"operators":{"distinct":2,"total":6,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":4},"errors":[],"lineEnd":3723,"lineStart":3720,"name":"<anon method-596>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","limsup","toParseLike","operatorname*{lim,sup}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3727,"lineStart":3725,"name":"<anon method-597>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","liminf","toParseLike","operatorname*{lim,inf}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3731,"lineStart":3729,"name":"<anon method-598>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":4.762,"halstead":{"bugs":0.062,"difficulty":2.333,"effort":435.308,"length":49,"time":24.184,"vocabulary":14,"volume":186.56,"operands":{"distinct":12,"total":28,"identifiers":["expect","injlim","toParseLike","operatorname*{inj,lim}","projlim","operatorname*{proj,lim}","\u000barlimsup","operatorname*{overline{lim}}","\u000barliminf","null","\u000barinjlim","\u000barprojlim"]},"operators":{"distinct":2,"total":21,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":21,"physical":9},"errors":[],"lineEnd":3741,"lineStart":3733,"name":"<anon method-599>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","plim","toParseLike","mathop{operatorname{plim}}limits"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3745,"lineStart":3743,"name":"<anon method-600>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","argmin","toParseLike","operatorname*{arg,min}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3749,"lineStart":3747,"name":"<anon method-601>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","argmax","toParseLike","operatorname*{arg,max}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3753,"lineStart":3751,"name":"<anon method-602>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\bra{phi}","toParseLike","mathinner{langle{phi}|}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3757,"lineStart":3755,"name":"<anon method-603>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","ket{psi}","toParseLike","mathinner{|{psi}\rangle}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3761,"lineStart":3759,"name":"<anon method-604>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\braket{phi|psi}","toParseLike","mathinner{langle{phi|psi}\rangle}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3765,"lineStart":3763,"name":"<anon method-605>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","Bra{phi}","toParseLike","leftlanglephi\right|"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3769,"lineStart":3767,"name":"<anon method-606>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","Ket{psi}","toParseLike","left|psi\right\rangle"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3773,"lineStart":3771,"name":"<anon method-607>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","Braket{ ϕ | \frac{∂^2}{∂ t^2} | ψ }","toParseLike","leftlangle ϕ,middle\u000bert,\frac{∂^2}{∂ t^2},middle\u000bert, ψ\right\rangle"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3777,"lineStart":3775,"name":"<anon method-608>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.022,"difficulty":1.714,"effort":114.117,"length":21,"time":6.34,"vocabulary":9,"volume":66.568,"operands":{"distinct":7,"total":12,"identifiers":["expect","set{x|x<5|S|}","toParseLike","{,xmid x<5|S|,}","set{x||x<5|S|}","{,xmid |x<5|S|,}","{,x|x<5mid S|,}"]},"operators":{"distinct":2,"total":9,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":9,"physical":6},"errors":[],"lineEnd":3784,"lineStart":3779,"name":"<anon method-609>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.021,"difficulty":2,"effort":126,"length":21,"time":7,"vocabulary":8,"volume":63,"operands":{"distinct":6,"total":12,"identifiers":["expect","Set{ x | x<\frac 1 2 |S| }","toParseLike","left{: x;middle\u000bert; x<\frac 1 2 |S| :\right}","Set{ x || x<\frac 1 2 |S| }","left{: x;middleVert; x<\frac 1 2 |S| :\right}"]},"operators":{"distinct":2,"total":9,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":9,"physical":8},"errors":[],"lineEnd":3793,"lineStart":3786,"name":"<anon method-610>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.556,"halstead":{"bugs":0.058,"difficulty":5.833,"effort":1015.963,"length":41,"time":56.442,"vocabulary":19,"volume":174.165,"operands":{"distinct":12,"total":20,"identifiers":["displayMode","Settings","true","it","\"should fail outside display mode\"","\"should fail with multiple tags\"","\"should fail with multiple tags in one row\"","\"should work with one tag per row\"","\"should work with \\nonumber/\\notag\"","\"should build\"","\"should ignore location of \\tag\"","\"should handle \\tag* like \\tag\""]},"operators":{"distinct":7,"total":21,"identifiers":["const","=","new","{}",":","()","function=>"]}},"paramCount":0,"sloc":{"logical":18,"physical":36},"errors":[],"lineEnd":3831,"lineStart":3796,"name":"<anon method-611>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","\tag{hi}x+y","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3801,"lineStart":3799,"name":"<anon method-612>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.009,"difficulty":1.5,"effort":40.5,"length":9,"time":2.25,"vocabulary":8,"volume":27,"operands":{"distinct":5,"total":5,"identifiers":["expect","\tag{1}\tag{2}x+y","not","toParse","displayMode"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3805,"lineStart":3803,"name":"<anon method-613>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.009,"difficulty":1.5,"effort":40.5,"length":9,"time":2.25,"vocabulary":8,"volume":27,"operands":{"distinct":5,"total":5,"identifiers":["expect","\begin{align}\tag{1}x+y\tag{2}end{align}","not","toParse","displayMode"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3809,"lineStart":3807,"name":"<anon method-614>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\begin{align}\tag{1}x\\&+y\tag{2}end{align}","toParse","displayMode"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3813,"lineStart":3811,"name":"<anon method-615>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.011,"difficulty":1.5,"effort":47.549,"length":10,"time":2.642,"vocabulary":9,"volume":31.699,"operands":{"distinct":6,"total":6,"identifiers":["expect","\begin{align}\tag{1}\nonumber x\\&+y\notagend{align}","toParseLike","r","\begin{align}\tag{1}x\\&+y\nonumberend{align}","displayMode"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":3818,"lineStart":3815,"name":"<anon method-616>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\tag{hi}x+y","toBuild","displayMode"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3822,"lineStart":3820,"name":"<anon method-617>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.011,"difficulty":1.5,"effort":47.549,"length":10,"time":2.642,"vocabulary":9,"volume":31.699,"operands":{"distinct":6,"total":6,"identifiers":["expect","\tag{hi}x+y","toParseLike","r","x+y\tag{hi}","displayMode"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3826,"lineStart":3824,"name":"<anon method-618>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.011,"difficulty":1.5,"effort":47.549,"length":10,"time":2.642,"vocabulary":9,"volume":31.699,"operands":{"distinct":6,"total":6,"identifiers":["expect","\tag{hi}x+y","toParseLike","r","\tag*{({hi})}x+y","displayMode"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":3830,"lineStart":3828,"name":"<anon method-619>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.054,"difficulty":6.75,"effort":1096.981,"length":37,"time":60.943,"vocabulary":21,"volume":162.516,"operands":{"distinct":12,"total":18,"identifiers":["expr","r","\tag{hi}x+y","opt","\"leqno\"","\"fleqn\"","it","should not add "," class by default"," class when false","should add "," class when true"]},"operators":{"distinct":9,"total":19,"identifiers":["const","=","``","forof","[]",",","()","${}","function=>"]}},"paramCount":0,"sloc":{"logical":9,"physical":22},"errors":[],"lineEnd":3854,"lineStart":3833,"name":"<anon method-620>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.042,"difficulty":4.038,"effort":506.164,"length":29,"time":28.12,"vocabulary":20,"volume":125.336,"operands":{"distinct":13,"total":15,"identifiers":["settings","Settings","displayMode","true","built","katex","__renderToDomTree","expr","expect","classes","not","toContain","opt"]},"operators":{"distinct":7,"total":14,"identifiers":["const","=","new","{}",":","()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":3840,"lineStart":3836,"name":"<anon method-621>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.051,"difficulty":5.143,"effort":779.763,"length":34,"time":43.32,"vocabulary":22,"volume":151.621,"operands":{"distinct":14,"total":18,"identifiers":["settings","Settings","displayMode","true","opt","false","built","katex","__renderToDomTree","expr","expect","classes","not","toContain"]},"operators":{"distinct":8,"total":16,"identifiers":["const","=","new","{}",":","[]","()","."]}},"paramCount":0,"sloc":{"logical":7,"physical":6},"errors":[],"lineEnd":3846,"lineStart":3841,"name":"<anon method-622>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.046,"difficulty":5.667,"effort":783.71,"length":32,"time":43.539,"vocabulary":20,"volume":138.302,"operands":{"distinct":12,"total":17,"identifiers":["settings","Settings","displayMode","true","opt","built","katex","__renderToDomTree","expr","expect","classes","toContain"]},"operators":{"distinct":8,"total":15,"identifiers":["const","=","new","{}",":","[]","()","."]}},"paramCount":0,"sloc":{"logical":7,"physical":6},"errors":[],"lineEnd":3852,"lineStart":3847,"name":"<anon method-623>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should generate proper class\"","\"should base on just first character in group\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":4,"physical":16},"errors":[],"lineEnd":3871,"lineStart":3856,"name":"<anon method-624>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.556,"halstead":{"bugs":0.056,"difficulty":1.714,"effort":288,"length":42,"time":16,"vocabulary":16,"volume":168,"operands":{"distinct":14,"total":24,"identifiers":["expect","L@binrel+xR","toParseLike","Lmathbin xR","L@binrel=xR","Lmathrel xR","L@binrel xxR","Lmathord xR","L@binrel{+}{x}R","Lmathbin{x}R","L@binrel{=}{x}R","Lmathrel{x}R","L@binrel{x}{x}R","Lmathord{x}R"]},"operators":{"distinct":2,"total":18,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":18,"physical":8},"errors":[],"lineEnd":3864,"lineStart":3857,"name":"<anon method-625>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.023,"difficulty":1.5,"effort":104.641,"length":21,"time":5.813,"vocabulary":10,"volume":69.76,"operands":{"distinct":8,"total":12,"identifiers":["expect","L@binrel{+x}xR","toParseLike","Lmathbin xR","L@binrel{=x}xR","Lmathrel xR","L@binrel{xx}xR","Lmathord xR"]},"operators":{"distinct":2,"total":9,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":9,"physical":5},"errors":[],"lineEnd":3870,"lineStart":3866,"name":"<anon method-626>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"should not fail on an empty String object\"","\"should parse the same as a regular string\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":11},"errors":[],"lineEnd":3883,"lineStart":3873,"name":"<anon method-627>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","String","\"\"","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","new"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3876,"lineStart":3874,"name":"<anon method-628>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":9.091,"halstead":{"bugs":0.037,"difficulty":4.25,"effort":472.319,"length":31,"time":26.24,"vocabulary":12,"volume":111.134,"operands":{"distinct":8,"total":17,"identifiers":["expect","String","\"xy\"","toParseLike","xy","r","div","\frac 1 2"]},"operators":{"distinct":4,"total":14,"identifiers":[".","()","new","``"]}},"paramCount":0,"sloc":{"logical":11,"physical":5},"errors":[],"lineEnd":3882,"lineStart":3878,"name":"<anon method-629>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.025,"difficulty":1.714,"effort":130.42,"length":24,"time":7.246,"vocabulary":9,"volume":76.078,"operands":{"distinct":7,"total":12,"identifiers":["it","\"should parse Latin-1 letters in math mode\"","\"should parse Latin-1 letters in text mode\"","\"should support \\aa in text mode\"","\"should parse combining characters\"","\"should parse multi-accented characters\"","\"should parse accented i's and j's\""]},"operators":{"distinct":2,"total":12,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":12,"physical":63},"errors":[],"lineEnd":3947,"lineStart":3885,"name":"<anon method-630>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.093,"difficulty":3.368,"effort":944.71,"length":62,"time":52.484,"vocabulary":23,"volume":280.461,"operands":{"distinct":19,"total":32,"identifiers":["expect","ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ","toParseLike","r","grave Aacute Ahat A\tilde Addot Amathring A","grave Eacute Ehat Eddot E","grave Iacute Ihat Iddot I","\tilde N","grave Oacute Ohat O\tilde Oddot O","grave Uacute Uhat Uddot U","acute Y","grave aacute ahat a\tilde addot amathring a","grave eacute ehat eddot e","grave ıacute ıhat ıddot ı","\tilde n","grave oacute ohat o\tilde oddot o","grave uacute uhat uddot u","acute yddot y","nonstrictSettings"]},"operators":{"distinct":4,"total":30,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":16,"physical":19},"errors":[],"lineEnd":3904,"lineStart":3886,"name":"<anon method-631>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.093,"difficulty":3.368,"effort":944.71,"length":62,"time":52.484,"vocabulary":23,"volume":280.461,"operands":{"distinct":19,"total":32,"identifiers":["expect","\text{ÀÁÂÃÄÅÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåèéêëìíîïñòóôõöùúûüýÿ}","toParseLike","r","\text{`A'A^A~A\"A\r A","`E'E^E\"E","`I'I^I\"I","~N","`O'O^O~O\"O","`U'U^U\"U","'Y","`a'a^a~a\"a\r a","`e'e^e\"e","`ı'ı^ı\"ı","~n","`o'o^o~o\"o","`u'u^u\"u","'y\"y}","strictSettings"]},"operators":{"distinct":4,"total":30,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":16,"physical":19},"errors":[],"lineEnd":3924,"lineStart":3906,"name":"<anon method-632>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.035,"difficulty":2.4,"effort":248.67,"length":28,"time":13.815,"vocabulary":13,"volume":103.612,"operands":{"distinct":10,"total":16,"identifiers":["expect","\text{aaAA}","toParseLike","r","\text{\r a\r A}","strictSettings","aa","not","toParse","Aa"]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":7,"physical":5},"errors":[],"lineEnd":3930,"lineStart":3926,"name":"<anon method-633>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.024,"difficulty":2,"effort":143.399,"length":20,"time":7.967,"vocabulary":12,"volume":71.699,"operands":{"distinct":9,"total":12,"identifiers":["expect","\"ÁĆ\"","toParseLike","r","Áacute C","nonstrictSettings","\"\\text{ÁĆ}\"","\text{Á'C}","strictSettings"]},"operators":{"distinct":3,"total":8,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":4},"errors":[],"lineEnd":3935,"lineStart":3932,"name":"<anon method-634>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","ấā́ắ\text{ấā́ắ}","toParse","nonstrictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":3941,"lineStart":3937,"name":"<anon method-635>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.02,"difficulty":1.875,"effort":110.269,"length":17,"time":6.126,"vocabulary":11,"volume":58.81,"operands":{"distinct":8,"total":10,"identifiers":["expect","íȷ́","toParseLike","r","acute ıacute ȷ","nonstrictSettings","ấā́ắ\text{ấā́ắ}","toParse"]},"operators":{"distinct":3,"total":7,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":3946,"lineStart":3943,"name":"<anon method-636>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.846,"halstead":{"bugs":0.069,"difficulty":1.857,"effort":386.286,"length":52,"time":21.46,"vocabulary":16,"volume":208,"operands":{"distinct":14,"total":26,"identifiers":["it","\"should parse negated relations\"","\"should build relations\"","\"should parse relations\"","\"should build big operators\"","\"should build more relations\"","\"should parse symbols\"","\"should build Greek capital letters\"","\"should build arrows\"","\"should build more arrows\"","\"should build binary operators\"","\"should build common ords\"","\"should build delimiters\"","\"should build some surrogate pairs\""]},"operators":{"distinct":2,"total":26,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":26,"physical":98},"errors":[],"lineEnd":4046,"lineStart":3949,"name":"<anon method-637>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","∉∤∦≁≆≠≨≩≮≯≰≱⊀⊁⊈⊉⊊⊋⊬⊭⊮⊯⋠⋡⋦⋧⋨⋩⋬⋭⪇⪈⪉⪊⪵⪶⪹⪺⫋⫌","toParse","strictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3952,"lineStart":3950,"name":"<anon method-638>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","∈∋∝∼∽≂≃≅≈≊≍≎≏≐≑≒≓≖≗≜≡≤≥≦≧≪≫≬≳≷≺≻≼≽≾≿∴∵∣≔≕⩴⋘⋙⟂⊨∌","toBuild","strictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3956,"lineStart":3954,"name":"<anon method-639>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","⊶⊷","toParse"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":3961,"lineStart":3958,"name":"<anon method-640>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","∏∐∑∫∬∭∮⋀⋁⋂⋃⨀⨁⨂⨄⨆","toBuild","strictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3965,"lineStart":3963,"name":"<anon method-641>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","⊂⊃⊆⊇⊏⊐⊑⊒⊢⊣⊩⊪⊸⋈⋍⋐⋑⋔⋛⋞⋟⌢⌣⩾⪆⪌⪕⪖⪯⪰⪷⪸⫅⫆≘≙≚≛≝≞≟≲⩽⪅≶⋚⪋","toBuild","strictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3969,"lineStart":3967,"name":"<anon method-642>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.013,"difficulty":1.6,"effort":62.885,"length":14,"time":3.494,"vocabulary":7,"volume":39.303,"operands":{"distinct":5,"total":8,"identifiers":["expect","\"£¥ℂℍℑℎℓℕ℘ℙℚℜℝℤℲℵðℶℷℸ⅁∀∁∂∃∇∞∠∡∢♠♡♢♣♭♮♯✓°¬‼⋮·©\"","toBuild","strictSettings","\"\\text{£¥ℂℍℎ©®️}\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":3974,"lineStart":3971,"name":"<anon method-643>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.009,"difficulty":1.5,"effort":40.5,"length":9,"time":2.25,"vocabulary":8,"volume":27,"operands":{"distinct":5,"total":5,"identifiers":["expect","\"ΑΒΕΖΗΙΚΜΝ\"","\"ΟΡΤΧϝ\"","toBuild","strictSettings"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":3979,"lineStart":3976,"name":"<anon method-644>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","←↑→↓↔↕↖↗↘↙↚↛↞↠↢↣↦↩↪↫↬↭↮↰↱↶↷↼↽↾↾↿⇀⇁⇂⇃⇄⇆⇇⇈⇉","toBuild","strictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3983,"lineStart":3981,"name":"<anon method-645>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇚⇛⇝⟵⟶⟷⟸⟹⟺⟼","toBuild","strictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3987,"lineStart":3985,"name":"<anon method-646>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\"±×÷∓∔∧∨∩∪≀⊎⊓⊔⊕⊖⊗⊘⊙⊚⊛⊝◯⊞⊟⊠⊡⊺⊻⊼⋇⋉⋊⋋⋌⋎⋏⋒⋓⩞⋅∘∖∙\"","toBuild","strictSettings"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3991,"lineStart":3989,"name":"<anon method-647>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\"§¶£¥∇∞⋅∠∡∢♠♡♢♣♭♮♯✓…⋮⋯⋱! ‼ ⦵\"","toBuild","strictSettings"]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":3995,"lineStart":3993,"name":"<anon method-648>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5,"halstead":{"bugs":0.078,"difficulty":3.75,"effort":879.05,"length":60,"time":48.836,"vocabulary":15,"volume":234.413,"operands":{"distinct":12,"total":30,"identifiers":["expect","\"\\left⌊\\frac{a}{b}\\right⌋\"","toBuild","\"\\left⌈\\frac{a}{b}\\right⌈\"","\"\\left⟮\\frac{a}{b}\\right⟯\"","\"\\left⟨\\frac{a}{b}\\right⟩\"","\"\\left⎰\\frac{a}{b}\\right⎱\"","┌x┐ └x┘","\"⌜x⌝ ⌞x⌟\"","\"⟦x⟧\"","\"\\llbracket \\rrbracket\"","\"\\lBrace \\rBrace\""]},"operators":{"distinct":3,"total":30,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":20,"physical":12},"errors":[],"lineEnd":4008,"lineStart":3997,"name":"<anon method-649>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":1.587,"halstead":{"bugs":0.407,"difficulty":15.4,"effort":18815.963,"length":249,"time":1045.331,"vocabulary":30,"volume":1221.816,"operands":{"distinct":25,"total":154,"identifiers":["wideCharStr","\"\"","String","fromCharCode","55349","56320","56424","56580","56684","56632","56476","56736","56788","56840","56944","57294","57314","57324","57334","expect","toBuild","strictSettings","wideCharText","\"\text{\"","\"}\""]},"operators":{"distinct":5,"total":95,"identifiers":["let","=","+=","()","."]}},"paramCount":0,"sloc":{"logical":63,"physical":36},"errors":[],"lineEnd":4045,"lineStart":4010,"name":"<anon method-650>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.022,"difficulty":3.214,"effort":207.416,"length":18,"time":11.523,"vocabulary":12,"volume":64.529,"operands":{"distinct":7,"total":9,"identifiers":["rule","r","\rule{999em}{999em}","it","\"should clamp size when set\"","\"should not clamp size when not set\"","\"should make zero-width rules if a negative maxSize is passed\""]},"operators":{"distinct":5,"total":9,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":8,"physical":21},"errors":[],"lineEnd":4068,"lineStart":4048,"name":"<anon method-651>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.053,"difficulty":5.846,"effort":924.414,"length":36,"time":51.356,"vocabulary":21,"volume":158.123,"operands":{"distinct":13,"total":19,"identifiers":["built","getBuilt","rule","Settings","maxSize","5","0","expect","style","borderRightWidth","toEqual","\"5em\"","borderTopWidth"]},"operators":{"distinct":8,"total":17,"identifiers":["const","=","[]","()","new","{}",":","."]}},"paramCount":0,"sloc":{"logical":7,"physical":5},"errors":[],"lineEnd":4055,"lineStart":4051,"name":"<anon method-652>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.039,"difficulty":4,"effort":468.827,"length":30,"time":26.046,"vocabulary":15,"volume":117.207,"operands":{"distinct":10,"total":16,"identifiers":["built","getBuilt","rule","0","expect","style","borderRightWidth","toEqual","\"999em\"","borderTopWidth"]},"operators":{"distinct":5,"total":14,"identifiers":["const","=","[]","()","."]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":4061,"lineStart":4057,"name":"<anon method-653>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.055,"difficulty":6.577,"effort":1085.186,"length":37,"time":60.288,"vocabulary":22,"volume":164.999,"operands":{"distinct":13,"total":19,"identifiers":["built","getBuilt","rule","Settings","maxSize","5","0","expect","style","borderRightWidth","toEqual","\"0em\"","borderTopWidth"]},"operators":{"distinct":9,"total":18,"identifiers":["const","=","[]","()","new","{}",":","- (prefix)","."]}},"paramCount":0,"sloc":{"logical":7,"physical":5},"errors":[],"lineEnd":4067,"lineStart":4063,"name":"<anon method-654>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.033,"difficulty":3.611,"effort":357.468,"length":26,"time":19.859,"vocabulary":14,"volume":98.991,"operands":{"distinct":9,"total":13,"identifiers":["it","\"should prevent expansion\"","\"should prevent infinite loops\"","\"should prevent exponential blowup via \\edef\"","exp32","r","\n        defa#1{\b{#1}\b{#1}}\n        def\b#1{c{#1}c{#1}}\n        defc#1{d{#1}d{#1}}\n        defd#1{e{#1}e{#1}}\n        defe#1{\f{#1}\f{#1}}\n        def\f#1{#1}\n    ","\"should count correctly\"","\"should count correctly with Unicode sub/superscripts\""]},"operators":{"distinct":5,"total":13,"identifiers":["()","function=>","const","=","``"]}},"paramCount":0,"sloc":{"logical":12,"physical":40},"errors":[],"lineEnd":4109,"lineStart":4070,"name":"<anon method-655>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.041,"difficulty":6,"effort":731.012,"length":32,"time":40.612,"vocabulary":14,"volume":121.835,"operands":{"distinct":8,"total":16,"identifiers":["expect","gdef\foo{1}\foo","toParse","Settings","maxExpand","1","not","0"]},"operators":{"distinct":6,"total":16,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":8,"physical":5},"errors":[],"lineEnd":4075,"lineStart":4071,"name":"<anon method-656>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.017,"difficulty":3,"effort":155.418,"length":14,"time":8.634,"vocabulary":13,"volume":51.806,"operands":{"distinct":7,"total":7,"identifiers":["expect","gdef\foo{\foo}\foo","not","toParse","Settings","maxExpand","10"]},"operators":{"distinct":6,"total":7,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":4080,"lineStart":4077,"name":"<anon method-657>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.017,"difficulty":3,"effort":155.418,"length":14,"time":8.634,"vocabulary":13,"volume":51.806,"operands":{"distinct":7,"total":7,"identifiers":["expect","edef0{x}edef0{00}edef0{00}edef0{00}edef0{00}","not","toParse","Settings","maxExpand","10"]},"operators":{"distinct":6,"total":7,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":4085,"lineStart":4082,"name":"<anon method-658>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.078,"difficulty":7.813,"effort":1836.109,"length":50,"time":102.006,"vocabulary":26,"volume":235.022,"operands":{"distinct":16,"total":25,"identifiers":["example","exp32","r","a{1}","count","1","2","4","8","16","32","expect","toParse","Settings","maxExpand","not"]},"operators":{"distinct":10,"total":25,"identifiers":["const","=","+","``","()",".","new","{}",":","-"]}},"paramCount":0,"sloc":{"logical":9,"physical":6},"errors":[],"lineEnd":4101,"lineStart":4096,"name":"<anon method-659>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.086,"difficulty":9.281,"effort":2383.09,"length":54,"time":132.394,"vocabulary":27,"volume":256.764,"operands":{"distinct":16,"total":27,"identifiers":["example","exp32","r","def+{a{1}}x⁺x⁺x⁺x⁺","count","1","2","4","8","16","32","expect","toParse","Settings","maxExpand","not"]},"operators":{"distinct":11,"total":27,"identifiers":["const","=","+","``","*","()",".","new","{}",":","-"]}},"paramCount":0,"sloc":{"logical":9,"physical":6},"errors":[],"lineEnd":4108,"lineStart":4103,"name":"<anon method-660>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.027,"difficulty":3.438,"effort":279.846,"length":22,"time":15.547,"vocabulary":13,"volume":81.41,"operands":{"distinct":8,"total":11,"identifiers":["cmd","r","sum_{k = 0}^{infty} x^k","it","\"should render as if there is nothing other in display math\"","\"should render as if there is nothing other in text\"","\"should render as if there is nothing other in scriptstyle\"","\"should render  as if there is nothing other in scriptscriptstyle\""]},"operators":{"distinct":5,"total":11,"identifiers":["const","=","``","()","function"]}},"paramCount":0,"sloc":{"logical":10,"physical":20},"errors":[],"lineEnd":4130,"lineStart":4111,"name":"<anon method-661>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.016,"difficulty":2.333,"effort":108.516,"length":14,"time":6.029,"vocabulary":10,"volume":46.507,"operands":{"distinct":6,"total":7,"identifiers":["expect","cmd","\\displaystyle\\mathchoice{","}{T}{S}{SS}","toBuildLike","\\displaystyle"]},"operators":{"distinct":4,"total":7,"identifiers":["()",".","``","${}"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":4117,"lineStart":4114,"name":"<anon method-662>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.012,"difficulty":2.4,"effort":83.686,"length":11,"time":4.649,"vocabulary":9,"volume":34.869,"operands":{"distinct":5,"total":6,"identifiers":["expect","cmd","\\mathchoice{D}{","}{S}{SS}","toBuildLike"]},"operators":{"distinct":4,"total":5,"identifiers":["()",".","``","${}"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":4121,"lineStart":4119,"name":"<anon method-663>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.017,"difficulty":2.286,"effort":118.609,"length":15,"time":6.589,"vocabulary":11,"volume":51.891,"operands":{"distinct":7,"total":8,"identifiers":["expect","cmd","x_{\\mathchoice{D}{T}{","}{SS}}","toBuildLike","x_{","}"]},"operators":{"distinct":4,"total":7,"identifiers":["()",".","``","${}"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":4125,"lineStart":4123,"name":"<anon method-664>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.017,"difficulty":2.286,"effort":118.609,"length":15,"time":6.589,"vocabulary":11,"volume":51.891,"operands":{"distinct":7,"total":8,"identifiers":["expect","cmd","x_{y_{\\mathchoice{D}{T}{S}{","}}}","toBuildLike","x_{y_{","}}"]},"operators":{"distinct":4,"total":7,"identifiers":["()",".","``","${}"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":4129,"lineStart":4127,"name":"<anon method-665>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["it","\"should build \\\\ without the optional argument and \\newline the same\"","\"should not allow \\newline to scan for an optional size argument\"","\"should not allow \\cr at top level\"","\"\\\\ causes newline, even after mrel and mop\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":8,"physical":22},"errors":[],"lineEnd":4153,"lineStart":4132,"name":"<anon method-666>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","hello \\ world","toBuildLike","hello \newline world"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":4135,"lineStart":4133,"name":"<anon method-667>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1.5,"effort":23.265,"length":6,"time":1.292,"vocabulary":6,"volume":15.51,"operands":{"distinct":3,"total":3,"identifiers":["expect","hello \newline[w]orld","toBuild"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":4139,"lineStart":4137,"name":"<anon method-668>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","hello cr world","not","toBuild"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":4143,"lineStart":4141,"name":"<anon method-669>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.029,"difficulty":3.333,"effort":291.897,"length":23,"time":16.217,"vocabulary":14,"volume":87.569,"operands":{"distinct":9,"total":12,"identifiers":["markup","katex","renderToString","r","M = \\ a + \\ b \\ c","expect","toMatch","/(<span class=\"base\">.*?<\\/span><span class=\"mspace newline\"><\\/span>){3}<span class=\"base\">/","toMatchSnapshot"]},"operators":{"distinct":5,"total":11,"identifiers":["const","=","()",".","``"]}},"paramCount":0,"sloc":{"logical":7,"physical":8},"errors":[],"lineEnd":4152,"lineStart":4145,"name":"<anon method-670>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["it","\"should parse \\text{\\i\\j}\"","\"should parse spacing functions in math or text mode\"","\"should build \\minuso\"","\"should render ligature commands like their unicode characters\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":8,"physical":17},"errors":[],"lineEnd":4171,"lineStart":4155,"name":"<anon method-671>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{ij}","toBuild","strictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":4158,"lineStart":4156,"name":"<anon method-672>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","A;B,C\nobreakspace \text{A;B,C\nobreakspace}","toBuild","strictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":4162,"lineStart":4160,"name":"<anon method-673>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\\minuso","toBuild","strictSettings"]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":4166,"lineStart":4164,"name":"<anon method-674>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.011,"difficulty":1.5,"effort":47.549,"length":10,"time":2.642,"vocabulary":9,"volume":31.699,"operands":{"distinct":6,"total":6,"identifiers":["expect","\text{aeAEoeOEoOss}","toBuildLike","r","\text{æÆœŒøØß}","strictSettings"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":4170,"lineStart":4168,"name":"<anon method-675>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.02,"difficulty":1.667,"effort":100,"length":20,"time":5.556,"vocabulary":8,"volume":60,"operands":{"distinct":6,"total":10,"identifiers":["it","\"should allow unicode text when not strict\"","\"should forbid unicode text when strict\"","\"should warn about unicode text when default\"","\"should always allow unicode text in text mode\"","\"should warn about top-level \\newline in display mode\""]},"operators":{"distinct":2,"total":10,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":10,"physical":39},"errors":[],"lineEnd":4211,"lineStart":4173,"name":"<anon method-676>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.846,"halstead":{"bugs":0.117,"difficulty":18.375,"effort":6461.02,"length":90,"time":358.946,"vocabulary":15,"volume":351.62,"operands":{"distinct":8,"total":42,"identifiers":["expect","é","toParse","Settings","nonstrictSettings","試","strict","\"ignore\""]},"operators":{"distinct":7,"total":48,"identifiers":["()",".","``","new","{}",":","function=>"]}},"paramCount":0,"sloc":{"logical":26,"physical":10},"errors":[],"lineEnd":4183,"lineStart":4174,"name":"<anon method-677>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0,"difficulty":0,"effort":0,"length":1,"time":0,"vocabulary":1,"volume":0,"operands":{"distinct":1,"total":1,"identifiers":["false"]},"operators":{"distinct":0,"total":0,"identifiers":[]}},"paramCount":0,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":4179,"lineStart":4179,"name":"<anon method-678>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0,"difficulty":0,"effort":0,"length":1,"time":0,"vocabulary":1,"volume":0,"operands":{"distinct":1,"total":1,"identifiers":["false"]},"operators":{"distinct":0,"total":0,"identifiers":[]}},"paramCount":0,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":4180,"lineStart":4180,"name":"<anon method-679>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0,"difficulty":0,"effort":0,"length":1,"time":0,"vocabulary":1,"volume":0,"operands":{"distinct":1,"total":1,"identifiers":["\"ignore\""]},"operators":{"distinct":0,"total":0,"identifiers":[]}},"paramCount":0,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":4181,"lineStart":4181,"name":"<anon method-680>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0,"difficulty":0,"effort":0,"length":1,"time":0,"vocabulary":1,"volume":0,"operands":{"distinct":1,"total":1,"identifiers":["\"ignore\""]},"operators":{"distinct":0,"total":0,"identifiers":[]}},"paramCount":0,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":4182,"lineStart":4182,"name":"<anon method-681>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.571,"halstead":{"bugs":0.149,"difficulty":20.222,"effort":9059.556,"length":112,"time":503.309,"vocabulary":16,"volume":448,"operands":{"distinct":9,"total":52,"identifiers":["expect","é","not","toParse","Settings","strict","true","試","\"error\""]},"operators":{"distinct":7,"total":60,"identifiers":["()",".","``","new","{}",":","function=>"]}},"paramCount":0,"sloc":{"logical":28,"physical":10},"errors":[],"lineEnd":4194,"lineStart":4185,"name":"<anon method-682>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0,"difficulty":0,"effort":0,"length":1,"time":0,"vocabulary":1,"volume":0,"operands":{"distinct":1,"total":1,"identifiers":["true"]},"operators":{"distinct":0,"total":0,"identifiers":[]}},"paramCount":0,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":4190,"lineStart":4190,"name":"<anon method-683>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0,"difficulty":0,"effort":0,"length":1,"time":0,"vocabulary":1,"volume":0,"operands":{"distinct":1,"total":1,"identifiers":["true"]},"operators":{"distinct":0,"total":0,"identifiers":[]}},"paramCount":0,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":4191,"lineStart":4191,"name":"<anon method-684>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0,"difficulty":0,"effort":0,"length":1,"time":0,"vocabulary":1,"volume":0,"operands":{"distinct":1,"total":1,"identifiers":["\"error\""]},"operators":{"distinct":0,"total":0,"identifiers":[]}},"paramCount":0,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":4192,"lineStart":4192,"name":"<anon method-685>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0,"difficulty":0,"effort":0,"length":1,"time":0,"vocabulary":1,"volume":0,"operands":{"distinct":1,"total":1,"identifiers":["\"error\""]},"operators":{"distinct":0,"total":0,"identifiers":[]}},"paramCount":0,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":4193,"lineStart":4193,"name":"<anon method-686>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.017,"difficulty":3.2,"effort":162.3,"length":16,"time":9.017,"vocabulary":9,"volume":50.719,"operands":{"distinct":5,"total":8,"identifiers":["expect","é","toWarn","Settings","試"]},"operators":{"distinct":4,"total":8,"identifiers":["()",".","``","new"]}},"paramCount":0,"sloc":{"logical":4,"physical":4},"errors":[],"lineEnd":4199,"lineStart":4196,"name":"<anon method-687>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.02,"difficulty":3.3,"effort":198,"length":20,"time":11,"vocabulary":8,"volume":60,"operands":{"distinct":5,"total":11,"identifiers":["expect","\text{é試}","toParse","nonstrictSettings","strictSettings"]},"operators":{"distinct":3,"total":9,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":5},"errors":[],"lineEnd":4205,"lineStart":4201,"name":"<anon method-688>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.03,"difficulty":4.5,"effort":411.194,"length":24,"time":22.844,"vocabulary":14,"volume":91.377,"operands":{"distinct":8,"total":12,"identifiers":["expect","x\\y","toWarn","Settings","displayMode","true","toParse","false"]},"operators":{"distinct":6,"total":12,"identifiers":["()",".","``","new","{}",":"]}},"paramCount":0,"sloc":{"logical":6,"physical":4},"errors":[],"lineEnd":4210,"lineStart":4207,"name":"<anon method-689>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.035,"difficulty":3.9,"effort":405.6,"length":26,"time":22.533,"vocabulary":16,"volume":104,"operands":{"distinct":10,"total":13,"identifiers":["latex","r","sum_{k = 0}^{infty} x^k","rendered","katex","renderToString","it","\"__parse renders same as renderToString\"","\"__renderToDomTree renders same as renderToString\"","\"__renderToHTMLTree renders same as renderToString sans MathML\""]},"operators":{"distinct":6,"total":13,"identifiers":["const","=","``","()",".","function=>"]}},"paramCount":0,"sloc":{"logical":10,"physical":21},"errors":[],"lineEnd":4233,"lineStart":4213,"name":"<anon method-690>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.03,"difficulty":3,"effort":269.575,"length":23,"time":14.976,"vocabulary":15,"volume":89.858,"operands":{"distinct":10,"total":12,"identifiers":["parsed","katex","__parse","latex","expect","buildTree","Settings","toMarkup","toEqual","rendered"]},"operators":{"distinct":5,"total":11,"identifiers":["const","=","()",".","new"]}},"paramCount":0,"sloc":{"logical":6,"physical":4},"errors":[],"lineEnd":4220,"lineStart":4217,"name":"<anon method-691>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":20,"halstead":{"bugs":0.022,"difficulty":2.25,"effort":145.191,"length":18,"time":8.066,"vocabulary":12,"volume":64.529,"operands":{"distinct":8,"total":9,"identifiers":["tree","katex","__renderToDomTree","latex","expect","toMarkup","toEqual","rendered"]},"operators":{"distinct":4,"total":9,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":5,"physical":4},"errors":[],"lineEnd":4225,"lineStart":4222,"name":"<anon method-692>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.036,"difficulty":2.333,"effort":252,"length":27,"time":14,"vocabulary":16,"volume":108,"operands":{"distinct":12,"total":14,"identifiers":["tree","katex","__renderToHTMLTree","latex","renderedSansMathML","rendered","replace","/<span class=\"katex-mathml\">.*?<\\/span>/","\"\"","expect","toMarkup","toEqual"]},"operators":{"distinct":4,"total":13,"identifiers":["const","=","()","."]}},"paramCount":0,"sloc":{"logical":7,"physical":6},"errors":[],"lineEnd":4232,"lineStart":4227,"name":"<anon method-693>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.014,"difficulty":1.4,"effort":58.954,"length":15,"time":3.275,"vocabulary":7,"volume":42.11,"operands":{"distinct":5,"total":7,"identifiers":["beforeAll","it","\"should throw on rendering new symbols with no font metrics\"","\"should add font metrics to metrics map and render successfully\"","\"Add new font class to new extended symbols\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":8,"physical":35},"errors":[],"lineEnd":4269,"lineStart":4235,"name":"<anon method-694>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":25,"halstead":{"bugs":0.079,"difficulty":9.3,"effort":2217.288,"length":52,"time":123.183,"vocabulary":24,"volume":238.418,"operands":{"distinct":15,"total":31,"identifiers":["fontName","\"mockEasternArabicFont\"","number","0","9","persianNum","String","fromCharCode","1632","katex","__defineSymbol","\"math\"","\"textord\"","arabicNum","1776"]},"operators":{"distinct":9,"total":21,"identifiers":["const","=","for","let","<=","++ (postfix)","()",".","+"]}},"paramCount":0,"sloc":{"logical":8,"physical":13},"errors":[],"lineEnd":4248,"lineStart":4236,"name":"<anon method-695>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.012,"difficulty":3.125,"effort":108.966,"length":11,"time":6.054,"vocabulary":9,"volume":34.869,"operands":{"distinct":4,"total":5,"identifiers":["errorMessage","\"Font metrics not found for font: mockEasternArabicFont-Regular.\"","expect","toThrow"]},"operators":{"distinct":5,"total":6,"identifiers":["const","=","()",".","function=>"]}},"paramCount":0,"sloc":{"logical":4,"physical":7},"errors":[],"lineEnd":4255,"lineStart":4249,"name":"<anon method-696>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0.005,"difficulty":1,"effort":15.51,"length":6,"time":0.862,"vocabulary":6,"volume":15.51,"operands":{"distinct":4,"total":4,"identifiers":["katex","__renderToDomTree","\"۹۹^{۱۱}\"","strictSettings"]},"operators":{"distinct":2,"total":2,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":1,"physical":3},"errors":[],"lineEnd":4254,"lineStart":4252,"name":"<anon method-697>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":28.571,"halstead":{"bugs":0.09,"difficulty":13.5,"effort":3634.36,"length":56,"time":201.909,"vocabulary":28,"volume":269.212,"operands":{"distinct":14,"total":27,"identifiers":["mockMetrics","number","0","9","1632","0.00244140625","0.6875","1776","katex","__setFontMetrics","\"mockEasternArabicFont-Regular\"","expect","۹۹^{۱۱}","toBuild"]},"operators":{"distinct":14,"total":29,"identifiers":["const","=","{}","for","let","<=","++ (postfix)","[]","+",",","- (prefix)","()",".","``"]}},"paramCount":0,"sloc":{"logical":7,"physical":10},"errors":[],"lineEnd":4265,"lineStart":4256,"name":"<anon method-698>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.009,"difficulty":1,"effort":28.074,"length":10,"time":1.56,"vocabulary":7,"volume":28.074,"operands":{"distinct":5,"total":5,"identifiers":["expect","katex","renderToString","\"۹۹^{۱۱}\"","toMatchSnapshot"]},"operators":{"distinct":2,"total":5,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":4268,"lineStart":4266,"name":"<anon method-699>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["describe","\"message\"","\"errmessage\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":4,"physical":19},"errors":[],"lineEnd":4289,"lineStart":4271,"name":"<anon method-700>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should print the argument using console.log\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":2,"physical":8},"errors":[],"lineEnd":4279,"lineStart":4272,"name":"<anon method-701>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.03,"difficulty":1.773,"effort":161.986,"length":24,"time":8.999,"vocabulary":14,"volume":91.377,"operands":{"distinct":11,"total":13,"identifiers":["jest","spyOn","console","\"log\"","mockImplementation","expect","message{Hello, world}","toParse","log","toHaveBeenCalledWith","\"Hello, world\""]},"operators":{"distinct":3,"total":11,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":4278,"lineStart":4273,"name":"<anon method-702>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should print the argument using console.error\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":2,"physical":8},"errors":[],"lineEnd":4288,"lineStart":4281,"name":"<anon method-703>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.03,"difficulty":1.773,"effort":161.986,"length":24,"time":8.999,"vocabulary":14,"volume":91.377,"operands":{"distinct":11,"total":13,"identifiers":["jest","spyOn","console","\"error\"","mockImplementation","expect","errmessage{Hello, world}","toParse","error","toHaveBeenCalledWith","\"Hello, world\""]},"operators":{"distinct":3,"total":11,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":6,"physical":6},"errors":[],"lineEnd":4287,"lineStart":4282,"name":"<anon method-704>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should stop the expansion\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":4295,"lineStart":4291,"name":"<anon method-705>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":33.688,"length":8,"time":1.872,"vocabulary":7,"volume":22.459,"operands":{"distinct":4,"total":4,"identifiers":["expect","kern2\relax em","not","toParse"]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":3},"errors":[],"lineEnd":4294,"lineStart":4292,"name":"<anon method-706>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["it","\"should toggle italics\"","\"should toggle italics within text\"","\"should toggle italics within textup\"","\"should toggle italics within textit\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":8,"physical":17},"errors":[],"lineEnd":4313,"lineStart":4297,"name":"<anon method-707>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","emph{foo emph{bar}}","toBuildLike","\textit{foo \textup{bar}}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":4300,"lineStart":4298,"name":"<anon method-708>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\text{emph{foo emph{bar}}}","toBuildLike","\text{\textit{foo \textup{bar}}}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":4304,"lineStart":4302,"name":"<anon method-709>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\textup{emph{foo emph{bar}}}","toBuildLike","\textup{\textit{foo \textup{bar}}}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":4308,"lineStart":4306,"name":"<anon method-710>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\textit{emph{foo emph{bar}}}","toBuildLike","\textit{\textup{foo \textit{bar}}}"]},"operators":{"distinct":2,"total":3,"identifiers":[".","``"]}},"paramCount":0,"sloc":{"logical":3,"physical":3},"errors":[],"lineEnd":4312,"lineStart":4310,"name":"<anon method-711>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}],"aggregateAverage":{"cyclomatic":1.024,"cyclomaticDensity":0.019,"halstead":{"bugs":0.094,"difficulty":0.092,"effort":18562.06,"length":25.342,"time":1031.226,"vocabulary":3.163,"volume":282.285,"operands":{"distinct":3.119,"total":13.233},"operators":{"distinct":0.043,"total":12.109}},"paramCount":0.008,"sloc":{"logical":7.746,"physical":6.05}},"methodAverage":{"cyclomatic":1.024,"cyclomaticDensity":26.191,"halstead":{"bugs":0.033,"difficulty":2.989,"effort":495.303,"length":24.719,"time":27.517,"vocabulary":11.566,"volume":97.67,"operands":{"distinct":7.671,"total":12.921},"operators":{"distinct":3.895,"total":11.798}},"paramCount":0.008,"sloc":{"logical":7.434,"physical":10.709}}}},{"path":"/home/gabriel/Desktop/research/projects/katex/test/errors-spec.js","testCases":50,"smells":50,"smellInfo":[{"name":"Redundant Assertion","packageName":"redundantAssertion","items":[{"frame":"  130 |         });\n  131 |         it(\"complains about mismatched \\\\verb with end of line\", function() {\n> 132 |             expect(\"\\\\verb|hello\\nworld|\").toFailWithParseError(\n      |            ^ Redundant Assertion\n  133 |                 \"\\\\verb ended by end of line instead of matching delimiter\");\n  134 |         });\n  135 |     });","start":{"column":12,"line":132}},{"frame":"  289 |     describe(\"#_innerLex\", function() {\n  290 |         it(\"rejects lone surrogate char\", function() {\n> 291 |             expect(\"\\udcba \").toFailWithParseError(\n      |            ^ Redundant Assertion\n  292 |                    \"Unexpected character: '\\udcba' at position 1:\" +\n  293 |                     \" \\udcba\\u0332 \");\n  294 |         });","start":{"column":12,"line":291}},{"frame":"  294 |         });\n  295 |         it(\"rejects lone backslash at end of input\", function() {\n> 296 |             expect(\"\\\\\").toFailWithParseError(\n      |            ^ Redundant Assertion\n  297 |                    \"Unexpected character: '\\\\' at position 1: \\\\̲\");\n  298 |         });\n  299 |     });","start":{"column":12,"line":296}},{"frame":"  326 | describe(\"Unicode accents\", function() {\n  327 |     it(\"should return error for invalid combining characters\", function() {\n> 328 |         expect(\"A\\u0328\").toFailWithParseError(\n      |        ^ Redundant Assertion\n  329 |             \"Unknown accent ' ̨' at position 1: Ą̲̲\");\n  330 |     });\n  331 | });","start":{"column":8,"line":328}}]},{"name":"Unknown Test","packageName":"unknownTest","items":[{"frame":"  4 |\n  5 |     describe(\"#handleInfixNodes\", function() {\n> 6 |         it(\"rejects repeated infix operators\", function() {\n    |        ^ Unknown Test\n  7 |             expect`1\\over 2\\over 3`.toFailWithParseError(\n  8 |                    \"only one infix operator per group at position 9: \" +\n  9 |                    \"1\\\\over 2\\\\̲o̲v̲e̲r̲ ̲3\");","start":{"column":8,"line":6}},{"frame":"   9 |                    \"1\\\\over 2\\\\̲o̲v̲e̲r̲ ̲3\");\n  10 |         });\n> 11 |         it(\"rejects conflicting infix operators\", function() {\n     |        ^ Unknown Test\n  12 |             expect`1\\over 2\\choose 3`.toFailWithParseError(\n  13 |                    \"only one infix operator per group at position 9: \" +\n  14 |                    \"1\\\\over 2\\\\̲c̲h̲o̲o̲s̲e̲ ̲3\");","start":{"column":8,"line":11}},{"frame":"  17 |\n  18 |     describe(\"#handleSupSubscript\", function() {\n> 19 |         it(\"rejects ^ at end of group\", function() {\n     |        ^ Unknown Test\n  20 |             expect`{1^}`.toFailWithParseError(\n  21 |                    \"Expected group after '^' at position 3: {1^̲}\");\n  22 |         });","start":{"column":8,"line":19}},{"frame":"  21 |                    \"Expected group after '^' at position 3: {1^̲}\");\n  22 |         });\n> 23 |         it(\"rejects _ at end of input\", function() {\n     |        ^ Unknown Test\n  24 |             expect`1_`.toFailWithParseError(\n  25 |                    \"Expected group after '_' at position 2: 1_̲\");\n  26 |         });","start":{"column":8,"line":23}},{"frame":"  25 |                    \"Expected group after '_' at position 2: 1_̲\");\n  26 |         });\n> 27 |         it(\"rejects \\\\sqrt as argument to ^\", function() {\n     |        ^ Unknown Test\n  28 |             expect`1^\\sqrt{2}`.toFailWithParseError(\n  29 |                    \"Got function '\\\\sqrt' with no arguments as superscript\" +\n  30 |                    \" at position 3: 1^\\\\̲s̲q̲r̲t̲{2}\");","start":{"column":8,"line":27}},{"frame":"  33 |\n  34 |     describe(\"#parseAtom\", function() {\n> 35 |         it(\"rejects \\\\limits without operator\", function() {\n     |        ^ Unknown Test\n  36 |             expect`\\alpha\\limits\\omega`.toFailWithParseError(\n  37 |                    \"Limit controls must follow a math operator\" +\n  38 |                    \" at position 7: \\\\alpha\\\\̲l̲i̲m̲i̲t̲s̲\\\\omega\");","start":{"column":8,"line":35}},{"frame":"  38 |                    \" at position 7: \\\\alpha\\\\̲l̲i̲m̲i̲t̲s̲\\\\omega\");\n  39 |         });\n> 40 |         it(\"rejects \\\\limits at the beginning of the input\", function() {\n     |        ^ Unknown Test\n  41 |             expect`\\limits\\omega`.toFailWithParseError(\n  42 |                    \"Limit controls must follow a math operator\" +\n  43 |                    \" at position 1: \\\\̲l̲i̲m̲i̲t̲s̲\\\\omega\");","start":{"column":8,"line":40}},{"frame":"  43 |                    \" at position 1: \\\\̲l̲i̲m̲i̲t̲s̲\\\\omega\");\n  44 |         });\n> 45 |         it(\"rejects double superscripts\", function() {\n     |        ^ Unknown Test\n  46 |             expect`1^2^3`.toFailWithParseError(\n  47 |                    \"Double superscript at position 4: 1^2^̲3\");\n  48 |             expect`1^{2+3}_4^5`.toFailWithParseError(","start":{"column":8,"line":45}},{"frame":"  49 |                    \"Double superscript at position 10: 1^{2+3}_4^̲5\");\n  50 |         });\n> 51 |         it(\"rejects double superscripts involving primes\", function() {\n     |        ^ Unknown Test\n  52 |             expect`1'_2^3`.toFailWithParseError(\n  53 |                    \"Double superscript at position 5: 1'_2^̲3\");\n  54 |             expect`1^2'`.toFailWithParseError(","start":{"column":8,"line":51}},{"frame":"  59 |                    \"Double superscript at position 5: 1'_2'̲\");\n  60 |         });\n> 61 |         it(\"rejects double subscripts\", function() {\n     |        ^ Unknown Test\n  62 |             expect`1_2_3`.toFailWithParseError(\n  63 |                    \"Double subscript at position 4: 1_2_̲3\");\n  64 |             expect`1_{2+3}^4_5`.toFailWithParseError(","start":{"column":8,"line":61}},{"frame":"  68 |\n  69 |     describe(\"#parseImplicitGroup\", function() {\n> 70 |         it(\"reports unknown environments\", function() {\n     |        ^ Unknown Test\n  71 |             expect`\\begin{foo}bar\\end{foo}`.toFailWithParseError(\n  72 |                    \"No such environment: foo at position 7:\" +\n  73 |                    \" \\\\begin{̲f̲o̲o̲}̲bar\\\\end{foo}\");","start":{"column":8,"line":70}},{"frame":"  73 |                    \" \\\\begin{̲f̲o̲o̲}̲bar\\\\end{foo}\");\n  74 |         });\n> 75 |         it(\"reports mismatched environments\", function() {\n     |        ^ Unknown Test\n  76 |             expect`\\begin{pmatrix}1&2\\\\3&4\\end{bmatrix}+5`\n  77 |                 .toFailWithParseError(\n  78 |                    \"Mismatch: \\\\begin{pmatrix} matched by \\\\end{bmatrix}\" +","start":{"column":8,"line":75}},{"frame":"  82 |\n  83 |     describe(\"#parseFunction\", function() {\n> 84 |         it(\"rejects math-mode functions in text mode\", function() {\n     |        ^ Unknown Test\n  85 |             expect`\\text{\\sqrt2 is irrational}`.toFailWithParseError(\n  86 |                 \"Can't use function '\\\\sqrt' in text mode\" +\n  87 |                 \" at position 7: \\\\text{\\\\̲s̲q̲r̲t̲2 is irrational…\");","start":{"column":8,"line":84}},{"frame":"  87 |                 \" at position 7: \\\\text{\\\\̲s̲q̲r̲t̲2 is irrational…\");\n  88 |         });\n> 89 |         it(\"rejects text-mode-only functions in math mode\", () => {\n     |        ^ Unknown Test\n  90 |             expect`$`.toFailWithParseError(\n  91 |                 \"Can't use function '$' in math mode at position 1: $̲\");\n  92 |         });","start":{"column":8,"line":89}},{"frame":"  91 |                 \"Can't use function '$' in math mode at position 1: $̲\");\n  92 |         });\n> 93 |         it(\"rejects strict-mode text-mode-only functions in math mode\", () => {\n     |        ^ Unknown Test\n  94 |             expect`\\'echec`.toFailWithParseError(\"LaTeX-incompatible input \" +\n  95 |                 \"and strict mode is set to 'error': LaTeX's accent \\\\' works \" +\n  96 |                 \"only in text mode [mathVsTextAccents]\", strictSettings);","start":{"column":8,"line":93}},{"frame":"   99 |\n  100 |     describe(\"#parseArguments\", function() {\n> 101 |         it(\"complains about missing argument at end of input\", function() {\n      |        ^ Unknown Test\n  102 |             expect`2\\sqrt`.toFailWithParseError(\n  103 |                    \"Expected group as argument to '\\\\sqrt'\" +\n  104 |                    \" at end of input: 2\\\\sqrt\");","start":{"column":8,"line":101}},{"frame":"  104 |                    \" at end of input: 2\\\\sqrt\");\n  105 |         });\n> 106 |         it(\"complains about missing argument at end of group\", function() {\n      |        ^ Unknown Test\n  107 |             expect`1^{2\\sqrt}`.toFailWithParseError(\n  108 |                    \"Expected group as argument to '\\\\sqrt'\" +\n  109 |                    \" at position 10: 1^{2\\\\sqrt}̲\");","start":{"column":8,"line":106}},{"frame":"  109 |                    \" at position 10: 1^{2\\\\sqrt}̲\");\n  110 |         });\n> 111 |         it(\"complains about functions as arguments to others\", function() {\n      |        ^ Unknown Test\n  112 |             expect`\\sqrt\\over2`.toFailWithParseError(\n  113 |                    \"Got function '\\\\over' with no arguments as argument to\" +\n  114 |                    \" '\\\\sqrt' at position 6: \\\\sqrt\\\\̲o̲v̲e̲r̲2\");","start":{"column":8,"line":111}},{"frame":"  117 |\n  118 |     describe(\"#parseGroup\", function() {\n> 119 |         it(\"complains about undefined control sequence\", function() {\n      |        ^ Unknown Test\n  120 |             expect`\\xyz`.toFailWithParseError(\n  121 |                    \"Undefined control sequence: \\\\xyz\" +\n  122 |                    \" at position 1: \\\\̲x̲y̲z̲\");","start":{"column":8,"line":119}},{"frame":"  125 |\n  126 |     describe(\"#verb\", function() {\n> 127 |         it(\"complains about mismatched \\\\verb with end of string\", function() {\n      |        ^ Unknown Test\n  128 |             expect`\\verb|hello`.toFailWithParseError(\n  129 |                 \"\\\\verb ended by end of line instead of matching delimiter\");\n  130 |         });","start":{"column":8,"line":127}},{"frame":"  140 |\n  141 |     describe(\"#parseInput expecting EOF\", function() {\n> 142 |         it(\"complains about extra }\", function() {\n      |        ^ Unknown Test\n  143 |             expect`{1+2}}`.toFailWithParseError(\n  144 |                    \"Expected 'EOF', got '}' at position 6: {1+2}}̲\");\n  145 |         });","start":{"column":8,"line":142}},{"frame":"  144 |                    \"Expected 'EOF', got '}' at position 6: {1+2}}̲\");\n  145 |         });\n> 146 |         it(\"complains about extra \\\\end\", function() {\n      |        ^ Unknown Test\n  147 |             expect`x\\end{matrix}`.toFailWithParseError(\n  148 |                    \"Expected 'EOF', got '\\\\end' at position 2:\" +\n  149 |                    \" x\\\\̲e̲n̲d̲{matrix}\");","start":{"column":8,"line":146}},{"frame":"  149 |                    \" x\\\\̲e̲n̲d̲{matrix}\");\n  150 |         });\n> 151 |         it(\"complains about top-level &\", function() {\n      |        ^ Unknown Test\n  152 |             expect`1&2`.toFailWithParseError(\n  153 |                    \"Expected 'EOF', got '&' at position 2: 1&̲2\");\n  154 |         });","start":{"column":8,"line":151}},{"frame":"  156 |\n  157 |     describe(\"#parseImplicitGroup expecting \\\\right\", function() {\n> 158 |         it(\"rejects missing \\\\right\", function() {\n      |        ^ Unknown Test\n  159 |             expect`\\left(1+2)`.toFailWithParseError(\n  160 |                    \"Expected '\\\\right', got 'EOF' at end of input:\" +\n  161 |                    \" \\\\left(1+2)\");","start":{"column":8,"line":158}},{"frame":"  161 |                    \" \\\\left(1+2)\");\n  162 |         });\n> 163 |         it(\"rejects incorrectly scoped \\\\right\", function() {\n      |        ^ Unknown Test\n  164 |             expect`{\\left(1+2}\\right)`.toFailWithParseError(\n  165 |                    \"Expected '\\\\right', got '}' at position 11:\" +\n  166 |                    \" {\\\\left(1+2}̲\\\\right)\");","start":{"column":8,"line":163}},{"frame":"  172 |\n  173 |     describe(\"#parseSpecialGroup expecting braces\", function() {\n> 174 |         it(\"complains about missing { for color\", function() {\n      |        ^ Unknown Test\n  175 |             expect`\\textcolor#ffffff{text}`.toFailWithParseError(\n  176 |                    \"Invalid color: '#' at position 11:\" +\n  177 |                    \" \\\\textcolor#̲ffffff{text}\");","start":{"column":8,"line":174}},{"frame":"  177 |                    \" \\\\textcolor#̲ffffff{text}\");\n  178 |         });\n> 179 |         it(\"complains about missing { for size\", function() {\n      |        ^ Unknown Test\n  180 |             expect`\\rule{1em}[2em]`.toFailWithParseError(\n  181 |                    \"Invalid size: '[' at position 11: \\\\rule{1em}[̲2em]\");\n  182 |         });","start":{"column":8,"line":179}},{"frame":"  182 |         });\n  183 |         // Can't test for the [ of an optional group since it's optional\n> 184 |         it(\"complains about missing } for color\", function() {\n      |        ^ Unknown Test\n  185 |             expect`\\textcolor{#ffffff{text}`.toFailWithParseError(\n  186 |                    \"Unexpected end of input in a macro argument,\" +\n  187 |                    \" expected '}' at end of input: …r{#ffffff{text}\");","start":{"column":8,"line":184}},{"frame":"  187 |                    \" expected '}' at end of input: …r{#ffffff{text}\");\n  188 |         });\n> 189 |         it(\"complains about missing ] for size\", function() {\n      |        ^ Unknown Test\n  190 |             expect`\\rule[1em{2em}{3em}`.toFailWithParseError(\n  191 |                    \"Unexpected end of input in a macro argument,\" +\n  192 |                    \" expected ']' at end of input: …e[1em{2em}{3em}\");","start":{"column":8,"line":189}},{"frame":"  192 |                    \" expected ']' at end of input: …e[1em{2em}{3em}\");\n  193 |         });\n> 194 |         it(\"complains about missing ] for size at end of input\", function() {\n      |        ^ Unknown Test\n  195 |             expect`\\rule[1em`.toFailWithParseError(\n  196 |                    \"Unexpected end of input in a macro argument,\" +\n  197 |                    \" expected ']' at end of input: \\\\rule[1em\");","start":{"column":8,"line":194}},{"frame":"  197 |                    \" expected ']' at end of input: \\\\rule[1em\");\n  198 |         });\n> 199 |         it(\"complains about missing } for color at end of input\", function() {\n      |        ^ Unknown Test\n  200 |             expect`\\textcolor{#123456`.toFailWithParseError(\n  201 |                    \"Unexpected end of input in a macro argument,\" +\n  202 |                    \" expected '}' at end of input: …xtcolor{#123456\");","start":{"column":8,"line":199}},{"frame":"  205 |\n  206 |     describe(\"#parseGroup expecting }\", function() {\n> 207 |         it(\"at end of file\", function() {\n      |        ^ Unknown Test\n  208 |             expect`\\sqrt{2`.toFailWithParseError(\n  209 |                    \"Expected '}', got 'EOF' at end of input: \\\\sqrt{2\");\n  210 |         });","start":{"column":8,"line":207}},{"frame":"  212 |\n  213 |     describe(\"#parseOptionalGroup expecting ]\", function() {\n> 214 |         it(\"at end of file\", function() {\n      |        ^ Unknown Test\n  215 |             expect`\\sqrt[3`.toFailWithParseError(\n  216 |                    \"Unexpected end of input in a macro argument,\" +\n  217 |                    \" expected ']' at end of input: \\\\sqrt[3\");","start":{"column":8,"line":214}},{"frame":"  217 |                    \" expected ']' at end of input: \\\\sqrt[3\");\n  218 |         });\n> 219 |         it(\"before group\", function() {\n      |        ^ Unknown Test\n  220 |             expect`\\sqrt[3{2}`.toFailWithParseError(\n  221 |                    \"Unexpected end of input in a macro argument,\" +\n  222 |                    \" expected ']' at end of input: \\\\sqrt[3{2}\");","start":{"column":8,"line":219}},{"frame":"  229 |\n  230 |     describe(\"parseArray\", function() {\n> 231 |         it(\"rejects missing \\\\end\", function() {\n      |        ^ Unknown Test\n  232 |             expect`\\begin{matrix}1`.toFailWithParseError(\n  233 |                    \"Expected & or \\\\\\\\ or \\\\cr or \\\\end at end of input:\" +\n  234 |                    \" \\\\begin{matrix}1\");","start":{"column":8,"line":231}},{"frame":"  234 |                    \" \\\\begin{matrix}1\");\n  235 |         });\n> 236 |         it(\"rejects incorrectly scoped \\\\end\", function() {\n      |        ^ Unknown Test\n  237 |             expect`{\\begin{matrix}1}\\end{matrix}`.toFailWithParseError(\n  238 |                    \"Expected & or \\\\\\\\ or \\\\cr or \\\\end at position 17:\" +\n  239 |                    \" …\\\\begin{matrix}1}̲\\\\end{matrix}\");","start":{"column":8,"line":236}},{"frame":"  242 |\n  243 |     describe(\"array environment\", function() {\n> 244 |         it(\"rejects unknown column types\", function() {\n      |        ^ Unknown Test\n  245 |             expect`\\begin{array}{cba}\\end{array}`.toFailWithParseError(\n  246 |                    \"Unknown column alignment: b at position 16:\" +\n  247 |                    \" \\\\begin{array}{cb̲a}\\\\end{array}\");","start":{"column":8,"line":244}},{"frame":"  254 |\n  255 |     describe(\"delimiter functions\", function() {\n> 256 |         it(\"reject invalid opening delimiters\", function() {\n      |        ^ Unknown Test\n  257 |             expect`\\bigl 1 + 2 \\bigr`.toFailWithParseError(\n  258 |                    \"Invalid delimiter '1' after '\\\\bigl' at position 7:\" +\n  259 |                    \" \\\\bigl 1̲ + 2 \\\\bigr\");","start":{"column":8,"line":256}},{"frame":"  259 |                    \" \\\\bigl 1̲ + 2 \\\\bigr\");\n  260 |         });\n> 261 |         it(\"reject invalid closing delimiters\", function() {\n      |        ^ Unknown Test\n  262 |             expect`\\bigl(1+2\\bigr=3`.toFailWithParseError(\n  263 |                    \"Invalid delimiter '=' after '\\\\bigr' at position 15:\" +\n  264 |                    \" \\\\bigl(1+2\\\\bigr=̲3\");","start":{"column":8,"line":261}},{"frame":"  264 |                    \" \\\\bigl(1+2\\\\bigr=̲3\");\n  265 |         });\n> 266 |         it(\"reject group opening delimiters\", function() {\n      |        ^ Unknown Test\n  267 |             expect`\\bigl{(}1+2\\bigr)3`.toFailWithParseError(\n  268 |                    \"Invalid delimiter type 'ordgroup' at position 6:\" +\n  269 |                    \" \\\\bigl{̲(̲}̲1+2\\\\bigr)3\");","start":{"column":8,"line":266}},{"frame":"  269 |                    \" \\\\bigl{̲(̲}̲1+2\\\\bigr)3\");\n  270 |         });\n> 271 |         it(\"reject group closing delimiters\", function() {\n      |        ^ Unknown Test\n  272 |             expect`\\bigl(1+2\\bigr{)}3`.toFailWithParseError(\n  273 |                    \"Invalid delimiter type 'ordgroup' at position 15:\" +\n  274 |                    \" \\\\bigl(1+2\\\\bigr{̲)̲}̲3\");","start":{"column":8,"line":271}},{"frame":"  277 |\n  278 |     describe(\"\\\\begin and \\\\end\", function() {\n> 279 |         it(\"reject invalid environment names\", function() {\n      |        ^ Unknown Test\n  280 |             expect`\\begin x\\end y`.toFailWithParseError(\n  281 |                    \"No such environment: x at position 8: \\\\begin x̲\\\\end y\");\n  282 |         });","start":{"column":8,"line":279}},{"frame":"  300 |\n  301 |     describe(\"#_innerLexColor\", function() {\n> 302 |         it(\"reject 3-digit hex notation without #\", function() {\n      |        ^ Unknown Test\n  303 |             expect`\\textcolor{1a2}{foo}`.toFailWithParseError(\n  304 |                    \"Invalid color: '1a2'\" +\n  305 |                    \" at position 11: \\\\textcolor{̲1̲a̲2̲}̲{foo}\");","start":{"column":8,"line":302}},{"frame":"  308 |\n  309 |     describe(\"#_innerLexSize\", function() {\n> 310 |         it(\"reject size without unit\", function() {\n      |        ^ Unknown Test\n  311 |             expect`\\rule{0}{2em}`.toFailWithParseError(\n  312 |                    \"Invalid size: '0' at position 6: \\\\rule{̲0̲}̲{2em}\");\n  313 |         });","start":{"column":8,"line":310}},{"frame":"  312 |                    \"Invalid size: '0' at position 6: \\\\rule{̲0̲}̲{2em}\");\n  313 |         });\n> 314 |         it(\"reject size with bogus unit\", function() {\n      |        ^ Unknown Test\n  315 |             expect`\\rule{1au}{2em}`.toFailWithParseError(\n  316 |                    \"Invalid unit: 'au' at position 6: \\\\rule{̲1̲a̲u̲}̲{2em}\");\n  317 |         });","start":{"column":8,"line":314}},{"frame":"  316 |                    \"Invalid unit: 'au' at position 6: \\\\rule{̲1̲a̲u̲}̲{2em}\");\n  317 |         });\n> 318 |         it(\"reject size without number\", function() {\n      |        ^ Unknown Test\n  319 |             expect`\\rule{em}{2em}`.toFailWithParseError(\n  320 |                    \"Invalid size: 'em' at position 6: \\\\rule{̲e̲m̲}̲{2em}\");\n  321 |         });","start":{"column":8,"line":318}}]}],"metrics":{"aggregate":{"cyclomatic":77,"cyclomaticDensity":29.389,"halstead":{"bugs":1.961,"difficulty":5.692,"effort":33481.955,"length":756,"time":1860.109,"vocabulary":220,"volume":5882.708,"operands":{"distinct":214,"total":406,"identifiers":["describe","\"Parser:\"","\"#handleInfixNodes\"","it","\"rejects repeated infix operators\"","expect","1over 2over 3","toFailWithParseError","\"only one infix operator per group at position 9: \"","\"1\\over 2\\̲o̲v̲e̲r̲ ̲3\"","\"rejects conflicting infix operators\"","1over 2choose 3","\"1\\over 2\\̲c̲h̲o̲o̲s̲e̲ ̲3\"","\"#handleSupSubscript\"","\"rejects ^ at end of group\"","{1^}","\"Expected group after '^' at position 3: {1^̲}\"","\"rejects _ at end of input\"","1_","\"Expected group after '_' at position 2: 1_̲\"","\"rejects \\sqrt as argument to ^\"","1^sqrt{2}","\"Got function '\\sqrt' with no arguments as superscript\"","\" at position 3: 1^\\̲s̲q̲r̲t̲{2}\"","\"#parseAtom\"","\"rejects \\limits without operator\"","alphalimitsomega","\"Limit controls must follow a math operator\"","\" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega\"","\"rejects \\limits at the beginning of the input\"","limitsomega","\" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega\"","\"rejects double superscripts\"","1^2^3","\"Double superscript at position 4: 1^2^̲3\"","1^{2+3}_4^5","\"Double superscript at position 10: 1^{2+3}_4^̲5\"","\"rejects double superscripts involving primes\"","1'_2^3","\"Double superscript at position 5: 1'_2^̲3\"","1^2'","\"Double superscript at position 4: 1^2'̲\"","1^2_3'","\"Double superscript at position 6: 1^2_3'̲\"","1'_2'","\"Double superscript at position 5: 1'_2'̲\"","\"rejects double subscripts\"","1_2_3","\"Double subscript at position 4: 1_2_̲3\"","1_{2+3}^4_5","\"Double subscript at position 10: 1_{2+3}^4_̲5\"","\"#parseImplicitGroup\"","\"reports unknown environments\"","\begin{foo}barend{foo}","\"No such environment: foo at position 7:\"","\" \\begin{̲f̲o̲o̲}̲bar\\end{foo}\"","\"reports mismatched environments\"","\begin{pmatrix}1&2\\3&4end{bmatrix}+5","\"Mismatch: \\begin{pmatrix} matched by \\end{bmatrix}\"","\" at position 24: …matrix}1&2\\\\3&4\\̲e̲n̲d̲{bmatrix}+5\"","\"#parseFunction\"","\"rejects math-mode functions in text mode\"","\text{sqrt2 is irrational}","\"Can't use function '\\sqrt' in text mode\"","\" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…\"","\"rejects text-mode-only functions in math mode\"","$","\"Can't use function '$' in math mode at position 1: $̲\"","\"rejects strict-mode text-mode-only functions in math mode\"","'echec","\"LaTeX-incompatible input \"","\"and strict mode is set to 'error': LaTeX's accent \\' works \"","\"only in text mode [mathVsTextAccents]\"","strictSettings","\"#parseArguments\"","\"complains about missing argument at end of input\"","2sqrt","\"Expected group as argument to '\\sqrt'\"","\" at end of input: 2\\sqrt\"","\"complains about missing argument at end of group\"","1^{2sqrt}","\" at position 10: 1^{2\\sqrt}̲\"","\"complains about functions as arguments to others\"","sqrtover2","\"Got function '\\over' with no arguments as argument to\"","\" '\\sqrt' at position 6: \\sqrt\\̲o̲v̲e̲r̲2\"","\"#parseGroup\"","\"complains about undefined control sequence\"","null","\"Undefined control sequence: \\xyz\"","\" at position 1: \\̲x̲y̲z̲\"","\"#verb\"","\"complains about mismatched \\verb with end of string\"","\u000berb|hello","\"\\verb ended by end of line instead of matching delimiter\"","\"complains about mismatched \\verb with end of line\"","\"\\verb|hello\nworld|\"","\"Parser.expect calls:\"","\"#parseInput expecting EOF\"","\"complains about extra }\"","{1+2}}","\"Expected 'EOF', got '}' at position 6: {1+2}}̲\"","\"complains about extra \\end\"","xend{matrix}","\"Expected 'EOF', got '\\end' at position 2:\"","\" x\\̲e̲n̲d̲{matrix}\"","\"complains about top-level &\"","1&2","\"Expected 'EOF', got '&' at position 2: 1&̲2\"","\"#parseImplicitGroup expecting \\right\"","\"rejects missing \\right\"","left(1+2)","\"Expected '\\right', got 'EOF' at end of input:\"","\" \\left(1+2)\"","\"rejects incorrectly scoped \\right\"","{left(1+2}\right)","\"Expected '\\right', got '}' at position 11:\"","\" {\\left(1+2}̲\\right)\"","\"#parseSpecialGroup expecting braces\"","\"complains about missing { for color\"","\textcolor#ffffff{text}","\"Invalid color: '#' at position 11:\"","\" \\textcolor#̲ffffff{text}\"","\"complains about missing { for size\"","\rule{1em}[2em]","\"Invalid size: '[' at position 11: \\rule{1em}[̲2em]\"","\"complains about missing } for color\"","\textcolor{#ffffff{text}","\"Unexpected end of input in a macro argument,\"","\" expected '}' at end of input: …r{#ffffff{text}\"","\"complains about missing ] for size\"","\rule[1em{2em}{3em}","\" expected ']' at end of input: …e[1em{2em}{3em}\"","\"complains about missing ] for size at end of input\"","\rule[1em","\" expected ']' at end of input: \\rule[1em\"","\"complains about missing } for color at end of input\"","\textcolor{#123456","\" expected '}' at end of input: …xtcolor{#123456\"","\"#parseGroup expecting }\"","\"at end of file\"","sqrt{2","\"Expected '}', got 'EOF' at end of input: \\sqrt{2\"","\"#parseOptionalGroup expecting ]\"","sqrt[3","\" expected ']' at end of input: \\sqrt[3\"","\"before group\"","sqrt[3{2}","\" expected ']' at end of input: \\sqrt[3{2}\"","\"environments.js:\"","\"parseArray\"","\"rejects missing \\end\"","\begin{matrix}1","\"Expected & or \\\\ or \\cr or \\end at end of input:\"","\" \\begin{matrix}1\"","\"rejects incorrectly scoped \\end\"","{\begin{matrix}1}end{matrix}","\"Expected & or \\\\ or \\cr or \\end at position 17:\"","\" …\\begin{matrix}1}̲\\end{matrix}\"","\"array environment\"","\"rejects unknown column types\"","\begin{array}{cba}end{array}","\"Unknown column alignment: b at position 16:\"","\" \\begin{array}{cb̲a}\\end{array}\"","\"functions.js:\"","\"delimiter functions\"","\"reject invalid opening delimiters\"","\bigl 1 + 2 \bigr","\"Invalid delimiter '1' after '\\bigl' at position 7:\"","\" \\bigl 1̲ + 2 \\bigr\"","\"reject invalid closing delimiters\"","\bigl(1+2\bigr=3","\"Invalid delimiter '=' after '\\bigr' at position 15:\"","\" \\bigl(1+2\\bigr=̲3\"","\"reject group opening delimiters\"","\bigl{(}1+2\bigr)3","\"Invalid delimiter type 'ordgroup' at position 6:\"","\" \\bigl{̲(̲}̲1+2\\bigr)3\"","\"reject group closing delimiters\"","\bigl(1+2\bigr{)}3","\"Invalid delimiter type 'ordgroup' at position 15:\"","\" \\bigl(1+2\\bigr{̲)̲}̲3\"","\"\\begin and \\end\"","\"reject invalid environment names\"","\begin xend y","\"No such environment: x at position 8: \\begin x̲\\end y\"","\"Lexer:\"","\"#_innerLex\"","\"rejects lone surrogate char\"","\"\udcba \"","\"Unexpected character: '\udcba' at position 1:\"","\" \udcba̲ \"","\"rejects lone backslash at end of input\"","\"\\\"","\"Unexpected character: '\\' at position 1: \\̲\"","\"#_innerLexColor\"","\"reject 3-digit hex notation without #\"","\textcolor{1a2}{foo}","\"Invalid color: '1a2'\"","\" at position 11: \\textcolor{̲1̲a̲2̲}̲{foo}\"","\"#_innerLexSize\"","\"reject size without unit\"","\rule{0}{2em}","\"Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}\"","\"reject size with bogus unit\"","\rule{1au}{2em}","\"Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}\"","\"reject size without number\"","\rule{em}{2em}","\"Invalid size: 'em' at position 6: \\rule{̲e̲m̲}̲{2em}\"","\"Unicode accents\"","\"should return error for invalid combining characters\"","\"Ą\"","\"Unknown accent ' ̨' at position 1: Ą̲̲\""]},"operators":{"distinct":6,"total":350,"identifiers":["()","function",".","``","+","function=>"]}},"paramCount":0,"sloc":{"logical":262,"physical":332}},"settings":{"commonjs":false,"esmImportExport":{"halstead":false,"lloc":false},"forin":false,"logicalor":true,"switchcase":true,"templateExpression":{"halstead":true,"lloc":true},"trycatch":false,"newmi":false},"classes":[],"dependencies":[{"line":1,"path":"./helpers","type":"esm"}],"errors":[],"lineEnd":332,"lineStart":1,"maintainability":130.386,"methods":[{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.037,"difficulty":1.778,"effort":196.803,"length":32,"time":10.934,"vocabulary":11,"volume":110.702,"operands":{"distinct":9,"total":16,"identifiers":["describe","\"#handleInfixNodes\"","\"#handleSupSubscript\"","\"#parseAtom\"","\"#parseImplicitGroup\"","\"#parseFunction\"","\"#parseArguments\"","\"#parseGroup\"","\"#verb\""]},"operators":{"distinct":2,"total":16,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":16,"physical":135},"errors":[],"lineEnd":137,"lineStart":3,"name":"<anon method-1>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"rejects repeated infix operators\"","\"rejects conflicting infix operators\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":12},"errors":[],"lineEnd":16,"lineStart":5,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","1over 2over 3","toFailWithParseError","\"only one infix operator per group at position 9: \"","\"1\\over 2\\̲o̲v̲e̲r̲ ̲3\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":10,"lineStart":6,"name":"<anon method-3>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","1over 2choose 3","toFailWithParseError","\"only one infix operator per group at position 9: \"","\"1\\over 2\\̲c̲h̲o̲o̲s̲e̲ ̲3\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":15,"lineStart":11,"name":"<anon method-4>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["it","\"rejects ^ at end of group\"","\"rejects _ at end of input\"","\"rejects \\sqrt as argument to ^\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":15},"errors":[],"lineEnd":32,"lineStart":18,"name":"<anon method-5>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","{1^}","toFailWithParseError","\"Expected group after '^' at position 3: {1^̲}\""]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":22,"lineStart":19,"name":"<anon method-6>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","1_","toFailWithParseError","\"Expected group after '_' at position 2: 1_̲\""]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":26,"lineStart":23,"name":"<anon method-7>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","1^sqrt{2}","toFailWithParseError","\"Got function '\\sqrt' with no arguments as superscript\"","\" at position 3: 1^\\̲s̲q̲r̲t̲{2}\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":31,"lineStart":27,"name":"<anon method-8>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.02,"difficulty":1.667,"effort":100,"length":20,"time":5.556,"vocabulary":8,"volume":60,"operands":{"distinct":6,"total":10,"identifiers":["it","\"rejects \\limits without operator\"","\"rejects \\limits at the beginning of the input\"","\"rejects double superscripts\"","\"rejects double superscripts involving primes\"","\"rejects double subscripts\""]},"operators":{"distinct":2,"total":10,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":10,"physical":34},"errors":[],"lineEnd":67,"lineStart":34,"name":"<anon method-9>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","alphalimitsomega","toFailWithParseError","\"Limit controls must follow a math operator\"","\" at position 7: \\alpha\\̲l̲i̲m̲i̲t̲s̲\\omega\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":39,"lineStart":35,"name":"<anon method-10>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","limitsomega","toFailWithParseError","\"Limit controls must follow a math operator\"","\" at position 1: \\̲l̲i̲m̲i̲t̲s̲\\omega\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":44,"lineStart":40,"name":"<anon method-11>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.015,"difficulty":2,"effort":88.758,"length":14,"time":4.931,"vocabulary":9,"volume":44.379,"operands":{"distinct":6,"total":8,"identifiers":["expect","1^2^3","toFailWithParseError","\"Double superscript at position 4: 1^2^̲3\"","1^{2+3}_4^5","\"Double superscript at position 10: 1^{2+3}_4^̲5\""]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":6},"errors":[],"lineEnd":50,"lineStart":45,"name":"<anon method-12>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.035,"difficulty":2.4,"effort":248.67,"length":28,"time":13.815,"vocabulary":13,"volume":103.612,"operands":{"distinct":10,"total":16,"identifiers":["expect","1'_2^3","toFailWithParseError","\"Double superscript at position 5: 1'_2^̲3\"","1^2'","\"Double superscript at position 4: 1^2'̲\"","1^2_3'","\"Double superscript at position 6: 1^2_3'̲\"","1'_2'","\"Double superscript at position 5: 1'_2'̲\""]},"operators":{"distinct":3,"total":12,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":8,"physical":10},"errors":[],"lineEnd":60,"lineStart":51,"name":"<anon method-13>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.015,"difficulty":2,"effort":88.758,"length":14,"time":4.931,"vocabulary":9,"volume":44.379,"operands":{"distinct":6,"total":8,"identifiers":["expect","1_2_3","toFailWithParseError","\"Double subscript at position 4: 1_2_̲3\"","1_{2+3}^4_5","\"Double subscript at position 10: 1_{2+3}^4_̲5\""]},"operators":{"distinct":3,"total":6,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":4,"physical":6},"errors":[],"lineEnd":66,"lineStart":61,"name":"<anon method-14>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"reports unknown environments\"","\"reports mismatched environments\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":13},"errors":[],"lineEnd":81,"lineStart":69,"name":"<anon method-15>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\begin{foo}barend{foo}","toFailWithParseError","\"No such environment: foo at position 7:\"","\" \\begin{̲f̲o̲o̲}̲bar\\end{foo}\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":74,"lineStart":70,"name":"<anon method-16>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\begin{pmatrix}1&2\\3&4end{bmatrix}+5","toFailWithParseError","\"Mismatch: \\begin{pmatrix} matched by \\end{bmatrix}\"","\" at position 24: …matrix}1&2\\\\3&4\\̲e̲n̲d̲{bmatrix}+5\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":6},"errors":[],"lineEnd":80,"lineStart":75,"name":"<anon method-17>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.011,"difficulty":2.25,"effort":75.799,"length":12,"time":4.211,"vocabulary":7,"volume":33.688,"operands":{"distinct":4,"total":6,"identifiers":["it","\"rejects math-mode functions in text mode\"","\"rejects text-mode-only functions in math mode\"","\"rejects strict-mode text-mode-only functions in math mode\""]},"operators":{"distinct":3,"total":6,"identifiers":["()","function","function=>"]}},"paramCount":0,"sloc":{"logical":6,"physical":16},"errors":[],"lineEnd":98,"lineStart":83,"name":"<anon method-18>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\text{sqrt2 is irrational}","toFailWithParseError","\"Can't use function '\\sqrt' in text mode\"","\" at position 7: \\text{\\̲s̲q̲r̲t̲2 is irrational…\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":88,"lineStart":84,"name":"<anon method-19>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","$","toFailWithParseError","\"Can't use function '$' in math mode at position 1: $̲\""]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":92,"lineStart":89,"name":"<anon method-20>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.014,"difficulty":2,"effort":83.026,"length":12,"time":4.613,"vocabulary":11,"volume":41.513,"operands":{"distinct":7,"total":7,"identifiers":["expect","'echec","toFailWithParseError","\"LaTeX-incompatible input \"","\"and strict mode is set to 'error': LaTeX's accent \\' works \"","\"only in text mode [mathVsTextAccents]\"","strictSettings"]},"operators":{"distinct":4,"total":5,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":97,"lineStart":93,"name":"<anon method-21>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["it","\"complains about missing argument at end of input\"","\"complains about missing argument at end of group\"","\"complains about functions as arguments to others\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":17},"errors":[],"lineEnd":116,"lineStart":100,"name":"<anon method-22>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","2sqrt","toFailWithParseError","\"Expected group as argument to '\\sqrt'\"","\" at end of input: 2\\sqrt\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":105,"lineStart":101,"name":"<anon method-23>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","1^{2sqrt}","toFailWithParseError","\"Expected group as argument to '\\sqrt'\"","\" at position 10: 1^{2\\sqrt}̲\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":110,"lineStart":106,"name":"<anon method-24>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","sqrtover2","toFailWithParseError","\"Got function '\\over' with no arguments as argument to\"","\" '\\sqrt' at position 6: \\sqrt\\̲o̲v̲e̲r̲2\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":115,"lineStart":111,"name":"<anon method-25>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"complains about undefined control sequence\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":7},"errors":[],"lineEnd":124,"lineStart":118,"name":"<anon method-26>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","null","toFailWithParseError","\"Undefined control sequence: \\xyz\"","\" at position 1: \\̲x̲y̲z̲\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":123,"lineStart":119,"name":"<anon method-27>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"complains about mismatched \\verb with end of string\"","\"complains about mismatched \\verb with end of line\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":10},"errors":[],"lineEnd":135,"lineStart":126,"name":"<anon method-28>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\u000berb|hello","toFailWithParseError","\"\\verb ended by end of line instead of matching delimiter\""]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":130,"lineStart":127,"name":"<anon method-29>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\"\\verb|hello\nworld|\"","toFailWithParseError","\"\\verb ended by end of line instead of matching delimiter\""]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":134,"lineStart":131,"name":"<anon method-30>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.02,"difficulty":1.667,"effort":100,"length":20,"time":5.556,"vocabulary":8,"volume":60,"operands":{"distinct":6,"total":10,"identifiers":["describe","\"#parseInput expecting EOF\"","\"#parseImplicitGroup expecting \\right\"","\"#parseSpecialGroup expecting braces\"","\"#parseGroup expecting }\"","\"#parseOptionalGroup expecting ]\""]},"operators":{"distinct":2,"total":10,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":10,"physical":88},"errors":[],"lineEnd":226,"lineStart":139,"name":"<anon method-31>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["it","\"complains about extra }\"","\"complains about extra \\end\"","\"complains about top-level &\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":15},"errors":[],"lineEnd":155,"lineStart":141,"name":"<anon method-32>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","{1+2}}","toFailWithParseError","\"Expected 'EOF', got '}' at position 6: {1+2}}̲\""]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":145,"lineStart":142,"name":"<anon method-33>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","xend{matrix}","toFailWithParseError","\"Expected 'EOF', got '\\end' at position 2:\"","\" x\\̲e̲n̲d̲{matrix}\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":150,"lineStart":146,"name":"<anon method-34>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","1&2","toFailWithParseError","\"Expected 'EOF', got '&' at position 2: 1&̲2\""]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":154,"lineStart":151,"name":"<anon method-35>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"rejects missing \\right\"","\"rejects incorrectly scoped \\right\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":12},"errors":[],"lineEnd":168,"lineStart":157,"name":"<anon method-36>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","left(1+2)","toFailWithParseError","\"Expected '\\right', got 'EOF' at end of input:\"","\" \\left(1+2)\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":162,"lineStart":158,"name":"<anon method-37>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","{left(1+2}\right)","toFailWithParseError","\"Expected '\\right', got '}' at position 11:\"","\" {\\left(1+2}̲\\right)\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":167,"lineStart":163,"name":"<anon method-38>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.025,"difficulty":1.714,"effort":130.42,"length":24,"time":7.246,"vocabulary":9,"volume":76.078,"operands":{"distinct":7,"total":12,"identifiers":["it","\"complains about missing { for color\"","\"complains about missing { for size\"","\"complains about missing } for color\"","\"complains about missing ] for size\"","\"complains about missing ] for size at end of input\"","\"complains about missing } for color at end of input\""]},"operators":{"distinct":2,"total":12,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":12,"physical":32},"errors":[],"lineEnd":204,"lineStart":173,"name":"<anon method-39>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\textcolor#ffffff{text}","toFailWithParseError","\"Invalid color: '#' at position 11:\"","\" \\textcolor#̲ffffff{text}\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":178,"lineStart":174,"name":"<anon method-40>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\rule{1em}[2em]","toFailWithParseError","\"Invalid size: '[' at position 11: \\rule{1em}[̲2em]\""]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":182,"lineStart":179,"name":"<anon method-41>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\textcolor{#ffffff{text}","toFailWithParseError","\"Unexpected end of input in a macro argument,\"","\" expected '}' at end of input: …r{#ffffff{text}\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":188,"lineStart":184,"name":"<anon method-42>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\rule[1em{2em}{3em}","toFailWithParseError","\"Unexpected end of input in a macro argument,\"","\" expected ']' at end of input: …e[1em{2em}{3em}\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":193,"lineStart":189,"name":"<anon method-43>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\rule[1em","toFailWithParseError","\"Unexpected end of input in a macro argument,\"","\" expected ']' at end of input: \\rule[1em\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":198,"lineStart":194,"name":"<anon method-44>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\textcolor{#123456","toFailWithParseError","\"Unexpected end of input in a macro argument,\"","\" expected '}' at end of input: …xtcolor{#123456\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":203,"lineStart":199,"name":"<anon method-45>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"at end of file\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":6},"errors":[],"lineEnd":211,"lineStart":206,"name":"<anon method-46>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","sqrt{2","toFailWithParseError","\"Expected '}', got 'EOF' at end of input: \\sqrt{2\""]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":210,"lineStart":207,"name":"<anon method-47>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"at end of file\"","\"before group\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":12},"errors":[],"lineEnd":224,"lineStart":213,"name":"<anon method-48>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","sqrt[3","toFailWithParseError","\"Unexpected end of input in a macro argument,\"","\" expected ']' at end of input: \\sqrt[3\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":218,"lineStart":214,"name":"<anon method-49>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","sqrt[3{2}","toFailWithParseError","\"Unexpected end of input in a macro argument,\"","\" expected ']' at end of input: \\sqrt[3{2}\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":223,"lineStart":219,"name":"<anon method-50>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["describe","\"parseArray\"","\"array environment\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":24},"errors":[],"lineEnd":251,"lineStart":228,"name":"<anon method-51>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"rejects missing \\end\"","\"rejects incorrectly scoped \\end\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":12},"errors":[],"lineEnd":241,"lineStart":230,"name":"<anon method-52>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\begin{matrix}1","toFailWithParseError","\"Expected & or \\\\ or \\cr or \\end at end of input:\"","\" \\begin{matrix}1\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":235,"lineStart":231,"name":"<anon method-53>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","{\begin{matrix}1}end{matrix}","toFailWithParseError","\"Expected & or \\\\ or \\cr or \\end at position 17:\"","\" …\\begin{matrix}1}̲\\end{matrix}\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":240,"lineStart":236,"name":"<anon method-54>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"rejects unknown column types\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":7},"errors":[],"lineEnd":249,"lineStart":243,"name":"<anon method-55>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\begin{array}{cba}end{array}","toFailWithParseError","\"Unknown column alignment: b at position 16:\"","\" \\begin{array}{cb̲a}\\end{array}\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":248,"lineStart":244,"name":"<anon method-56>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["describe","\"delimiter functions\"","\"\\begin and \\end\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":33},"errors":[],"lineEnd":285,"lineStart":253,"name":"<anon method-57>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["it","\"reject invalid opening delimiters\"","\"reject invalid closing delimiters\"","\"reject group opening delimiters\"","\"reject group closing delimiters\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":8,"physical":22},"errors":[],"lineEnd":276,"lineStart":255,"name":"<anon method-58>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\bigl 1 + 2 \bigr","toFailWithParseError","\"Invalid delimiter '1' after '\\bigl' at position 7:\"","\" \\bigl 1̲ + 2 \\bigr\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":260,"lineStart":256,"name":"<anon method-59>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\bigl(1+2\bigr=3","toFailWithParseError","\"Invalid delimiter '=' after '\\bigr' at position 15:\"","\" \\bigl(1+2\\bigr=̲3\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":265,"lineStart":261,"name":"<anon method-60>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\bigl{(}1+2\bigr)3","toFailWithParseError","\"Invalid delimiter type 'ordgroup' at position 6:\"","\" \\bigl{̲(̲}̲1+2\\bigr)3\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":270,"lineStart":266,"name":"<anon method-61>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\bigl(1+2\bigr{)}3","toFailWithParseError","\"Invalid delimiter type 'ordgroup' at position 15:\"","\" \\bigl(1+2\\bigr{̲)̲}̲3\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":275,"lineStart":271,"name":"<anon method-62>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"reject invalid environment names\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":6},"errors":[],"lineEnd":283,"lineStart":278,"name":"<anon method-63>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\begin xend y","toFailWithParseError","\"No such environment: x at position 8: \\begin x̲\\end y\""]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":282,"lineStart":279,"name":"<anon method-64>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["describe","\"#_innerLex\"","\"#_innerLexColor\"","\"#_innerLexSize\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":38},"errors":[],"lineEnd":324,"lineStart":287,"name":"<anon method-65>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"rejects lone surrogate char\"","\"rejects lone backslash at end of input\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":11},"errors":[],"lineEnd":299,"lineStart":289,"name":"<anon method-66>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.009,"difficulty":1.5,"effort":40.5,"length":9,"time":2.25,"vocabulary":8,"volume":27,"operands":{"distinct":5,"total":5,"identifiers":["expect","\"\udcba \"","toFailWithParseError","\"Unexpected character: '\udcba' at position 1:\"","\" \udcba̲ \""]},"operators":{"distinct":3,"total":4,"identifiers":["()",".","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":294,"lineStart":290,"name":"<anon method-67>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\"\\\"","toFailWithParseError","\"Unexpected character: '\\' at position 1: \\̲\""]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":298,"lineStart":295,"name":"<anon method-68>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"reject 3-digit hex notation without #\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":7},"errors":[],"lineEnd":307,"lineStart":301,"name":"<anon method-69>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.01,"difficulty":2,"effort":57.059,"length":9,"time":3.17,"vocabulary":9,"volume":28.529,"operands":{"distinct":5,"total":5,"identifiers":["expect","\textcolor{1a2}{foo}","toFailWithParseError","\"Invalid color: '1a2'\"","\" at position 11: \\textcolor{̲1̲a̲2̲}̲{foo}\""]},"operators":{"distinct":4,"total":4,"identifiers":["()",".","``","+"]}},"paramCount":0,"sloc":{"logical":2,"physical":5},"errors":[],"lineEnd":306,"lineStart":302,"name":"<anon method-70>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":16.667,"halstead":{"bugs":0.01,"difficulty":1.5,"effort":46.529,"length":12,"time":2.585,"vocabulary":6,"volume":31.02,"operands":{"distinct":4,"total":6,"identifiers":["it","\"reject size without unit\"","\"reject size with bogus unit\"","\"reject size without number\""]},"operators":{"distinct":2,"total":6,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":6,"physical":14},"errors":[],"lineEnd":322,"lineStart":309,"name":"<anon method-71>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\rule{0}{2em}","toFailWithParseError","\"Invalid size: '0' at position 6: \\rule{̲0̲}̲{2em}\""]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":313,"lineStart":310,"name":"<anon method-72>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\rule{1au}{2em}","toFailWithParseError","\"Invalid unit: 'au' at position 6: \\rule{̲1̲a̲u̲}̲{2em}\""]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":317,"lineStart":314,"name":"<anon method-73>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.007,"difficulty":1.5,"effort":29.477,"length":7,"time":1.638,"vocabulary":7,"volume":19.651,"operands":{"distinct":4,"total":4,"identifiers":["expect","\rule{em}{2em}","toFailWithParseError","\"Invalid size: 'em' at position 6: \\rule{̲e̲m̲}̲{2em}\""]},"operators":{"distinct":3,"total":3,"identifiers":["()",".","``"]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":321,"lineStart":318,"name":"<anon method-74>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"should return error for invalid combining characters\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":6},"errors":[],"lineEnd":331,"lineStart":326,"name":"<anon method-75>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.006,"difficulty":1,"effort":18.095,"length":7,"time":1.005,"vocabulary":6,"volume":18.095,"operands":{"distinct":4,"total":4,"identifiers":["expect","\"Ą\"","toFailWithParseError","\"Unknown accent ' ̨' at position 1: Ą̲̲\""]},"operators":{"distinct":2,"total":3,"identifiers":["()","."]}},"paramCount":0,"sloc":{"logical":2,"physical":4},"errors":[],"lineEnd":330,"lineStart":327,"name":"<anon method-76>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}],"aggregateAverage":{"cyclomatic":1,"cyclomaticDensity":0.382,"halstead":{"bugs":0.025,"difficulty":0.074,"effort":434.831,"length":9.818,"time":24.157,"vocabulary":2.857,"volume":76.399,"operands":{"distinct":2.779,"total":5.273},"operators":{"distinct":0.078,"total":4.545}},"paramCount":0,"sloc":{"logical":3.403,"physical":4.312}},"methodAverage":{"cyclomatic":1,"cyclomaticDensity":40.587,"halstead":{"bugs":0.009,"difficulty":1.672,"effort":50.631,"length":9.632,"time":2.813,"vocabulary":7.513,"volume":28.454,"operands":{"distinct":4.474,"total":5.184},"operators":{"distinct":3.039,"total":4.447}},"paramCount":0,"sloc":{"logical":3.289,"physical":11.145}}}},{"path":"/home/gabriel/Desktop/research/projects/katex/test/dup-spec.js","testCases":0,"smells":4,"smellInfo":[{"name":"Conditional Test Logic","packageName":"conditionalTestLogic","items":[{"frame":"  3 |\n  4 | describe(\"Symbols and macros\", () => {\n> 5 |     for (const macro in macros) {\n    |    ^ Conditional Test Logic\n  6 |         if (!macros.hasOwnProperty(macro)) {\n  7 |             continue;\n  8 |         }","start":{"line":5,"column":4,"index":124}},{"frame":"  4 | describe(\"Symbols and macros\", () => {\n  5 |     for (const macro in macros) {\n> 6 |         if (!macros.hasOwnProperty(macro)) {\n    |        ^ Conditional Test Logic\n  7 |             continue;\n  8 |         }\n  9 |         it(`macro ${macro} should not shadow a symbol`, () => {","start":{"line":6,"column":8,"index":162}},{"frame":"   8 |         }\n   9 |         it(`macro ${macro} should not shadow a symbol`, () => {\n> 10 |             for (const kind in symbols) {\n     |            ^ Conditional Test Logic\n  11 |                 if (!symbols.hasOwnProperty(kind)) {\n  12 |                     continue;\n  13 |                 }","start":{"line":10,"column":12,"index":307}},{"frame":"   9 |         it(`macro ${macro} should not shadow a symbol`, () => {\n  10 |             for (const kind in symbols) {\n> 11 |                 if (!symbols.hasOwnProperty(kind)) {\n     |                ^ Conditional Test Logic\n  12 |                     continue;\n  13 |                 }\n  14 |                 expect(symbols[kind][macro]).toBeFalsy();","start":{"line":11,"column":16,"index":353}}]}],"metrics":{"aggregate":{"cyclomatic":5,"cyclomaticDensity":35.714,"halstead":{"bugs":0.069,"difficulty":9.625,"effort":2002.807,"length":46,"time":111.267,"vocabulary":23,"volume":208.084,"operands":{"distinct":12,"total":21,"identifiers":["describe","\"Symbols and macros\"","macro","macros","hasOwnProperty","it","macro "," should not shadow a symbol","kind","symbols","expect","toBeFalsy"]},"operators":{"distinct":11,"total":25,"identifiers":["()","function=>","forin","const","if","! (prefix)",".","continue","``","${}","[]"]}},"paramCount":0,"sloc":{"logical":14,"physical":19}},"settings":{"commonjs":false,"esmImportExport":{"halstead":false,"lloc":false},"forin":false,"logicalor":true,"switchcase":true,"templateExpression":{"halstead":true,"lloc":true},"trycatch":false,"newmi":false},"classes":[],"dependencies":[{"line":1,"path":"../src/symbols.js","type":"esm"},{"line":2,"path":"../src/macros.js","type":"esm"}],"errors":[],"lineEnd":19,"lineStart":1,"maintainability":123.291,"methods":[{"cyclomatic":2,"cyclomaticDensity":33.333,"halstead":{"bugs":0.027,"difficulty":7.5,"effort":600,"length":20,"time":33.333,"vocabulary":16,"volume":80,"operands":{"distinct":6,"total":9,"identifiers":["macro","macros","hasOwnProperty","it","macro "," should not shadow a symbol"]},"operators":{"distinct":10,"total":11,"identifiers":["forin","const","if","! (prefix)","()",".","continue","``","${}","function=>"]}},"paramCount":0,"sloc":{"logical":6,"physical":15},"errors":[],"lineEnd":18,"lineStart":4,"name":"<anon method-1>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":33.333,"halstead":{"bugs":0.028,"difficulty":6.667,"effort":558.412,"length":22,"time":31.023,"vocabulary":14,"volume":83.762,"operands":{"distinct":6,"total":10,"identifiers":["kind","symbols","hasOwnProperty","expect","macro","toBeFalsy"]},"operators":{"distinct":8,"total":12,"identifiers":["forin","const","if","! (prefix)","()",".","continue","[]"]}},"paramCount":0,"sloc":{"logical":6,"physical":8},"errors":[],"lineEnd":16,"lineStart":9,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}],"aggregateAverage":{"cyclomatic":1.667,"cyclomaticDensity":11.905,"halstead":{"bugs":0.023,"difficulty":3.208,"effort":667.602,"length":15.333,"time":37.089,"vocabulary":7.667,"volume":69.361,"operands":{"distinct":4,"total":7},"operators":{"distinct":3.667,"total":8.333}},"paramCount":0,"sloc":{"logical":4.667,"physical":6.333}},"methodAverage":{"cyclomatic":2,"cyclomaticDensity":33.333,"halstead":{"bugs":0.027,"difficulty":7.083,"effort":579.206,"length":21,"time":32.178,"vocabulary":15,"volume":81.881,"operands":{"distinct":6,"total":9.5},"operators":{"distinct":9,"total":11.5}},"paramCount":0,"sloc":{"logical":6,"physical":11.5}}}},{"path":"/home/gabriel/Desktop/research/projects/katex/contrib/auto-render/test/auto-render-spec.js","testCases":18,"smells":23,"smellInfo":[{"name":"Conditional Test Logic","packageName":"conditionalTestLogic","items":[{"frame":"  16 |                   splitAtDelimiters(actual, delimiters);\n  17 |\n> 18 |             if (split.length !== result.length) {\n     |            ^ Conditional Test Logic\n  19 |                 message.pass = false;\n  20 |                 message.message = () => \"Different number of splits: \" +\n  21 |                     split.length + \" vs. \" + result.length + \" (\" +","start":{"line":18,"column":12,"index":481}},{"frame":"  25 |             }\n  26 |\n> 27 |             for (let i = 0; i < split.length; i++) {\n     |            ^ Conditional Test Logic\n  28 |                 const real = split[i];\n  29 |                 const correct = result[i];\n  30 |","start":{"line":27,"column":12,"index":861}},{"frame":"  32 |                 let diff;\n  33 |\n> 34 |                 if (real.type !== correct.type) {\n     |                ^ Conditional Test Logic\n  35 |                     good = false;\n  36 |                     diff = \"type\";\n  37 |                 } else if (real.data !== correct.data) {","start":{"line":34,"column":16,"index":1061}},{"frame":"  35 |                     good = false;\n  36 |                     diff = \"type\";\n> 37 |                 } else if (real.data !== correct.data) {\n     |                       ^ Conditional Test Logic\n  38 |                     good = false;\n  39 |                     diff = \"data\";\n  40 |                 } else if (real.display !== correct.display) {","start":{"line":37,"column":23,"index":1187}},{"frame":"  38 |                     good = false;\n  39 |                     diff = \"data\";\n> 40 |                 } else if (real.display !== correct.display) {\n     |                       ^ Conditional Test Logic\n  41 |                     good = false;\n  42 |                     diff = \"display\";\n  43 |                 }","start":{"line":40,"column":23,"index":1313}},{"frame":"  43 |                 }\n  44 |\n> 45 |                 if (!good) {\n     |                ^ Conditional Test Logic\n  46 |                     message.pass = false;\n  47 |                     message.message = () => \"Difference at split \" +\n  48 |                         (i + 1) + \": \" + JSON.stringify(real) +","start":{"line":45,"column":16,"index":1460}},{"frame":"  330 |             '\\\\]'];\n  331 |         const el = document.createElement('div');\n> 332 |         for (let i = 0; i < textNodes.length; i++) {\n      |        ^ Conditional Test Logic\n  333 |             const txt = document.createTextNode(textNodes[i]);\n  334 |             el.appendChild(txt);\n  335 |         }","start":{"line":332,"column":8,"index":11671}},{"frame":"  348 |             'consectetur adipiscing elit'];\n  349 |         const el = document.createElement('div');\n> 350 |         for (let i = 0; i < textNodes.length; i++) {\n      |        ^ Conditional Test Logic\n  351 |             const txt = document.createTextNode(textNodes[i]);\n  352 |             el.appendChild(txt);\n  353 |         }","start":{"line":350,"column":8,"index":12420}},{"frame":"  353 |         }\n  354 |         const el2 = document.createElement('div');\n> 355 |         for (let i = 0; i < textNodes.length; i++) {\n      |        ^ Conditional Test Logic\n  356 |             const txt = document.createTextNode(textNodes[i]);\n  357 |             el2.appendChild(txt);\n  358 |         }","start":{"line":355,"column":8,"index":12630}}]},{"name":"Redundant Assertion","packageName":"redundantAssertion","items":[{"frame":"  60 | describe(\"A delimiter splitter\", function() {\n  61 |     it(\"doesn't split when there are no delimiters\", function() {\n> 62 |         expect(\"hello\").toSplitInto(\n     |        ^ Redundant Assertion\n  63 |             [\n  64 |                 {type: \"text\", data: \"hello\"},\n  65 |             ],","start":{"column":8,"line":62}},{"frame":"  70 |\n  71 |     it(\"doesn't create a math node with only one left delimiter\", function() {\n> 72 |         expect(\"hello ( world\").toSplitInto(\n     |        ^ Redundant Assertion\n  73 |             [\n  74 |                 {type: \"text\", data: \"hello \"},\n  75 |                 {type: \"text\", data: \"( world\"},","start":{"column":8,"line":72}},{"frame":"  81 |\n  82 |     it(\"doesn't split when there's only a right delimiter\", function() {\n> 83 |         expect(\"hello ) world\").toSplitInto(\n     |        ^ Redundant Assertion\n  84 |             [\n  85 |                 {type: \"text\", data: \"hello ) world\"},\n  86 |             ],","start":{"column":8,"line":83}},{"frame":"  91 |\n  92 |     it(\"splits when there are both delimiters\", function() {\n> 93 |         expect(\"hello ( world ) boo\").toSplitInto(\n     |        ^ Redundant Assertion\n  94 |             [\n  95 |                 {type: \"text\", data: \"hello \"},\n  96 |                 {type: \"math\", data: \" world \",","start":{"column":8,"line":93}},{"frame":"  104 |\n  105 |     it(\"splits on multi-character delimiters\", function() {\n> 106 |         expect(\"hello [[ world ]] boo\").toSplitInto(\n      |        ^ Redundant Assertion\n  107 |             [\n  108 |                 {type: \"text\", data: \"hello \"},\n  109 |                 {type: \"math\", data: \" world \",","start":{"column":8,"line":106}},{"frame":"  114 |                 {left: \"[[\", right: \"]]\", display: false},\n  115 |             ]);\n> 116 |         expect(\"hello \\\\begin{equation} world \\\\end{equation} boo\").toSplitInto(\n      |        ^ Redundant Assertion\n  117 |             [\n  118 |                 {type: \"text\", data: \"hello \"},\n  119 |                 {type: \"math\", data: \"\\\\begin{equation} world \\\\end{equation}\",","start":{"column":8,"line":116}},{"frame":"  129 |\n  130 |     it(\"splits multiple times\", function() {\n> 131 |         expect(\"hello ( world ) boo ( more ) stuff\").toSplitInto(\n      |        ^ Redundant Assertion\n  132 |             [\n  133 |                 {type: \"text\", data: \"hello \"},\n  134 |                 {type: \"math\", data: \" world \",","start":{"column":8,"line":131}},{"frame":"  145 |\n  146 |     it(\"leaves the ending when there's only a left delimiter\", function() {\n> 147 |         expect(\"hello ( world ) boo ( left\").toSplitInto(\n      |        ^ Redundant Assertion\n  148 |             [\n  149 |                 {type: \"text\", data: \"hello \"},\n  150 |                 {type: \"math\", data: \" world \",","start":{"column":8,"line":147}},{"frame":"  159 |\n  160 |     it(\"doesn't split when close delimiters are in {}s\", function() {\n> 161 |         expect(\"hello ( world { ) } ) boo\").toSplitInto(\n      |        ^ Redundant Assertion\n  162 |             [\n  163 |                 {type: \"text\", data: \"hello \"},\n  164 |                 {type: \"math\", data: \" world { ) } \",","start":{"column":8,"line":161}},{"frame":"  170 |             ]);\n  171 |\n> 172 |         expect(\"hello ( world { { } ) } ) boo\").toSplitInto(\n      |        ^ Redundant Assertion\n  173 |             [\n  174 |                 {type: \"text\", data: \"hello \"},\n  175 |                 {type: \"math\", data: \" world { { } ) } \",","start":{"column":8,"line":172}},{"frame":"  183 |\n  184 |     it(\"correctly processes sequences of $..$\", function() {\n> 185 |         expect(\"$hello$$world$$boo$\").toSplitInto(\n      |        ^ Redundant Assertion\n  186 |             [\n  187 |                 {type: \"math\", data: \"hello\",\n  188 |                     rawData: \"$hello$\", display: false},","start":{"column":8,"line":185}},{"frame":"  198 |\n  199 |     it(\"doesn't split at escaped delimiters\", function() {\n> 200 |         expect(\"hello ( world \\\\) ) boo\").toSplitInto(\n      |        ^ Redundant Assertion\n  201 |             [\n  202 |                 {type: \"text\", data: \"hello \"},\n  203 |                 {type: \"math\", data: \" world \\\\) \",","start":{"column":8,"line":200}},{"frame":"  222 |\n  223 |     it(\"splits when the right and left delimiters are the same\", function() {\n> 224 |         expect(\"hello $ world $ boo\").toSplitInto(\n      |        ^ Redundant Assertion\n  225 |             [\n  226 |                 {type: \"text\", data: \"hello \"},\n  227 |                 {type: \"math\", data: \" world \",","start":{"column":8,"line":224}},{"frame":"  235 |\n  236 |     it(\"ignores \\\\$\", function() {\n> 237 |         expect(\"$x = \\\\$5$\").toSplitInto(\n      |        ^ Redundant Assertion\n  238 |             [\n  239 |                 {type: \"math\", data: \"x = \\\\$5\",\n  240 |                     rawData: \"$x = \\\\$5$\", display: false},","start":{"column":8,"line":237}}]}],"metrics":{"aggregate":{"cyclomatic":37,"cyclomaticDensity":9.113,"halstead":{"bugs":3.648,"difficulty":53.951,"effort":590423.74,"length":1472,"time":32801.319,"vocabulary":173,"volume":10943.773,"operands":{"distinct":152,"total":781,"identifiers":["beforeEach","expect","extend","toSplitInto","actual","result","delimiters","message","pass","true","\"'\"","\"' split correctly\"","split","splitAtDelimiters","length","false","\"Different number of splits: \"","\" vs. \"","\" (\"","JSON","stringify","\")\"","i","0","real","correct","good","diff","type","\"type\"","data","\"data\"","display","\"display\"","\"Difference at split \"","1","\": \"","\" differs)\"","describe","\"A delimiter splitter\"","it","\"doesn't split when there are no delimiters\"","\"hello\"","\"text\"","left","\"(\"","right","\"doesn't create a math node with only one left delimiter\"","\"hello ( world\"","\"hello \"","\"( world\"","\"doesn't split when there's only a right delimiter\"","\"hello ) world\"","\"splits when there are both delimiters\"","\"hello ( world ) boo\"","\"math\"","\" world \"","rawData","\"( world )\"","\" boo\"","\"splits on multi-character delimiters\"","\"hello [[ world ]] boo\"","\"[[ world ]]\"","\"[[\"","\"]]\"","\"hello \\begin{equation} world \\end{equation} boo\"","\"\\begin{equation} world \\end{equation}\"","\"\\begin{equation}\"","\"\\end{equation}\"","\"splits multiple times\"","\"hello ( world ) boo ( more ) stuff\"","\" boo \"","\" more \"","\"( more )\"","\" stuff\"","\"leaves the ending when there's only a left delimiter\"","\"hello ( world ) boo ( left\"","\"( left\"","\"doesn't split when close delimiters are in {}s\"","\"hello ( world { ) } ) boo\"","\" world { ) } \"","\"( world { ) } )\"","\"hello ( world { { } ) } ) boo\"","\" world { { } ) } \"","\"( world { { } ) } )\"","\"correctly processes sequences of $..$\"","\"$hello$$world$$boo$\"","\"$hello$\"","\"world\"","\"$world$\"","\"boo\"","\"$boo$\"","\"$\"","\"doesn't split at escaped delimiters\"","\"hello ( world \\) ) boo\"","\" world \\) \"","\"( world \\) )\"","\"splits when the right and left delimiters are the same\"","\"hello $ world $ boo\"","\"$ world $\"","\"ignores \\$\"","\"$x = \\$5$\"","\"x = \\$5\"","\"remembers which delimiters are display-mode\"","startData","toEqual","\"handles nested delimiters irrespective of order\"","\"$\\fbox{\\(hi\\)}$\"","\"\\(\"","\"\\)\"","\"\\fbox{\\(hi\\)}\"","\"\\(\\fbox{$hi$}\\)\"","\"\\fbox{$hi$}\"","\"handles a mix of $ and $$\"","\"$hello$world$$boo$$\"","\"$$\"","\"$$boo$$\"","\"$hello$$world$$$boo$$\"","\"Pre-process callback\"","\"replace `-squared` with `^2 `\"","el1","document","createElement","\"div\"","textContent","\"Circle equation: $x-squared + y-squared = r-squared$.\"","el2","\"Circle equation: $x^2 + y^2 = r^2$.\"","renderMathInElement","preProcess","math","replace","/-squared/g","\"^2\"","innerHTML","\"Parse adjacent text nodes\"","\"parse adjacent text nodes with math\"","textNodes","\"\\[\"","\"x^2 + y^2 = r^2\"","\"\\]\"","el","txt","createTextNode","appendChild","join","\"\"","toStrictEqual","\"parse adjacent text nodes without math\"","\"Lorem ipsum dolor\"","\"sit amet\"","\"consectetur adipiscing elit\""]},"operators":{"distinct":21,"total":691,"identifiers":["()","function",".","{}",":","const","=","function=>","+","if","!==","return","for","let","<","++ (postfix)","[]","else","! (prefix)","break",","]}},"paramCount":4,"sloc":{"logical":406,"physical":364}},"settings":{"commonjs":false,"esmImportExport":{"halstead":false,"lloc":false},"forin":false,"logicalor":true,"switchcase":true,"templateExpression":{"halstead":true,"lloc":true},"trycatch":false,"newmi":false},"classes":[],"dependencies":[{"line":4,"path":"../splitAtDelimiters","type":"esm"},{"line":5,"path":"../auto-render","type":"esm"}],"errors":[],"lineEnd":364,"lineStart":1,"maintainability":93.349,"methods":[{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.013,"difficulty":2.5,"effort":95.134,"length":11,"time":5.285,"vocabulary":11,"volume":38.054,"operands":{"distinct":6,"total":6,"identifiers":["expect","extend","toSplitInto","actual","result","delimiters"]},"operators":{"distinct":5,"total":5,"identifiers":["()",".","{}",":","function"]}},"paramCount":0,"sloc":{"logical":3,"physical":52},"errors":[],"lineEnd":58,"lineStart":7,"name":"<anon method-1>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":7,"cyclomaticDensity":21.212,"halstead":{"bugs":0.225,"difficulty":26.182,"effort":17695.895,"length":127,"time":983.105,"vocabulary":40,"volume":675.885,"operands":{"distinct":22,"total":64,"identifiers":["message","pass","true","split","splitAtDelimiters","actual","delimiters","length","result","false","i","0","real","correct","good","diff","type","\"type\"","data","\"data\"","display","\"display\""]},"operators":{"distinct":18,"total":63,"identifiers":["const","=","{}",":","function=>","()","if","!==",".","return","for","let","<","++ (postfix)","[]","else","! (prefix)","break"]}},"paramCount":3,"sloc":{"logical":33,"physical":48},"errors":[],"lineEnd":56,"lineStart":9,"name":"<anon method-2>","paramNames":["actual","result","delimiters"],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":100,"halstead":{"bugs":0.003,"difficulty":0.5,"effort":5,"length":5,"time":0.278,"vocabulary":4,"volume":10,"operands":{"distinct":3,"total":3,"identifiers":["\"'\"","actual","\"' split correctly\""]},"operators":{"distinct":1,"total":2,"identifiers":["+"]}},"paramCount":0,"sloc":{"logical":1,"physical":1},"errors":[],"lineEnd":12,"lineStart":12,"name":"<anon method-3>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.035,"difficulty":2.5,"effort":259.91,"length":29,"time":14.439,"vocabulary":12,"volume":103.964,"operands":{"distinct":9,"total":15,"identifiers":["\"Different number of splits: \"","split","length","\" vs. \"","result","\" (\"","JSON","stringify","\")\""]},"operators":{"distinct":3,"total":14,"identifiers":["+",".","()"]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":23,"lineStart":20,"name":"<anon method-4>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.035,"difficulty":1.75,"effort":184.601,"length":27,"time":10.256,"vocabulary":15,"volume":105.486,"operands":{"distinct":12,"total":14,"identifiers":["\"Difference at split \"","i","1","\": \"","JSON","stringify","real","\" vs. \"","correct","\" (\"","diff","\" differs)\""]},"operators":{"distinct":3,"total":13,"identifiers":["+","()","."]}},"paramCount":0,"sloc":{"logical":3,"physical":4},"errors":[],"lineEnd":50,"lineStart":47,"name":"<anon method-5>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.333,"halstead":{"bugs":0.083,"difficulty":1.875,"effort":469.117,"length":60,"time":26.062,"vocabulary":18,"volume":250.196,"operands":{"distinct":16,"total":30,"identifiers":["it","\"doesn't split when there are no delimiters\"","\"doesn't create a math node with only one left delimiter\"","\"doesn't split when there's only a right delimiter\"","\"splits when there are both delimiters\"","\"splits on multi-character delimiters\"","\"splits multiple times\"","\"leaves the ending when there's only a left delimiter\"","\"doesn't split when close delimiters are in {}s\"","\"correctly processes sequences of $..$\"","\"doesn't split at escaped delimiters\"","\"splits when the right and left delimiters are the same\"","\"ignores \\$\"","\"remembers which delimiters are display-mode\"","\"handles nested delimiters irrespective of order\"","\"handles a mix of $ and $$\""]},"operators":{"distinct":2,"total":30,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":30,"physical":249},"errors":[],"lineEnd":308,"lineStart":60,"name":"<anon method-6>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.034,"difficulty":2.708,"effort":276.755,"length":25,"time":15.375,"vocabulary":17,"volume":102.187,"operands":{"distinct":12,"total":13,"identifiers":["expect","\"hello\"","toSplitInto","type","\"text\"","data","left","\"(\"","right","\")\"","display","false"]},"operators":{"distinct":5,"total":12,"identifiers":["()",".","[]","{}",":"]}},"paramCount":0,"sloc":{"logical":7,"physical":9},"errors":[],"lineEnd":69,"lineStart":61,"name":"<anon method-7>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.048,"difficulty":3.643,"effort":519.557,"length":33,"time":28.864,"vocabulary":20,"volume":142.624,"operands":{"distinct":14,"total":17,"identifiers":["expect","\"hello ( world\"","toSplitInto","type","\"text\"","data","\"hello \"","\"( world\"","left","\"(\"","right","\")\"","display","false"]},"operators":{"distinct":6,"total":16,"identifiers":["()",".","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":9,"physical":10},"errors":[],"lineEnd":80,"lineStart":71,"name":"<anon method-8>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":14.286,"halstead":{"bugs":0.034,"difficulty":2.708,"effort":276.755,"length":25,"time":15.375,"vocabulary":17,"volume":102.187,"operands":{"distinct":12,"total":13,"identifiers":["expect","\"hello ) world\"","toSplitInto","type","\"text\"","data","left","\"(\"","right","\")\"","display","false"]},"operators":{"distinct":5,"total":12,"identifiers":["()",".","[]","{}",":"]}},"paramCount":0,"sloc":{"logical":7,"physical":9},"errors":[],"lineEnd":90,"lineStart":82,"name":"<anon method-9>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.692,"halstead":{"bugs":0.072,"difficulty":4.167,"effort":897.888,"length":47,"time":49.883,"vocabulary":24,"volume":215.493,"operands":{"distinct":18,"total":25,"identifiers":["expect","\"hello ( world ) boo\"","toSplitInto","type","\"text\"","data","\"hello \"","\"math\"","\" world \"","rawData","\"( world )\"","display","false","\" boo\"","left","\"(\"","right","\")\""]},"operators":{"distinct":6,"total":22,"identifiers":["()",".","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":13,"physical":12},"errors":[],"lineEnd":103,"lineStart":92,"name":"<anon method-10>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.846,"halstead":{"bugs":0.151,"difficulty":6.818,"effort":3081.077,"length":94,"time":171.171,"vocabulary":28,"volume":451.891,"operands":{"distinct":22,"total":50,"identifiers":["expect","\"hello [[ world ]] boo\"","toSplitInto","type","\"text\"","data","\"hello \"","\"math\"","\" world \"","rawData","\"[[ world ]]\"","display","false","\" boo\"","left","\"[[\"","right","\"]]\"","\"hello \\begin{equation} world \\end{equation} boo\"","\"\\begin{equation} world \\end{equation}\"","\"\\begin{equation}\"","\"\\end{equation}\""]},"operators":{"distinct":6,"total":44,"identifiers":["()",".","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":26,"physical":24},"errors":[],"lineEnd":128,"lineStart":105,"name":"<anon method-11>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.263,"halstead":{"bugs":0.109,"difficulty":5.286,"effort":1734.175,"length":69,"time":96.343,"vocabulary":27,"volume":328.087,"operands":{"distinct":21,"total":37,"identifiers":["expect","\"hello ( world ) boo ( more ) stuff\"","toSplitInto","type","\"text\"","data","\"hello \"","\"math\"","\" world \"","rawData","\"( world )\"","display","false","\" boo \"","\" more \"","\"( more )\"","\" stuff\"","left","\"(\"","right","\")\""]},"operators":{"distinct":6,"total":32,"identifiers":["()",".","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":19,"physical":15},"errors":[],"lineEnd":144,"lineStart":130,"name":"<anon method-12>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.085,"difficulty":4.579,"effort":1169.519,"length":55,"time":64.973,"vocabulary":25,"volume":255.412,"operands":{"distinct":19,"total":29,"identifiers":["expect","\"hello ( world ) boo ( left\"","toSplitInto","type","\"text\"","data","\"hello \"","\"math\"","\" world \"","rawData","\"( world )\"","display","false","\" boo \"","\"( left\"","left","\"(\"","right","\")\""]},"operators":{"distinct":6,"total":26,"identifiers":["()",".","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":15,"physical":13},"errors":[],"lineEnd":158,"lineStart":146,"name":"<anon method-13>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.846,"halstead":{"bugs":0.149,"difficulty":7.143,"effort":3192.567,"length":94,"time":177.365,"vocabulary":27,"volume":446.959,"operands":{"distinct":21,"total":50,"identifiers":["expect","\"hello ( world { ) } ) boo\"","toSplitInto","type","\"text\"","data","\"hello \"","\"math\"","\" world { ) } \"","rawData","\"( world { ) } )\"","display","false","\" boo\"","left","\"(\"","right","\")\"","\"hello ( world { { } ) } ) boo\"","\" world { { } ) } \"","\"( world { { } ) } )\""]},"operators":{"distinct":6,"total":44,"identifiers":["()",".","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":26,"physical":23},"errors":[],"lineEnd":182,"lineStart":160,"name":"<anon method-14>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.882,"halstead":{"bugs":0.09,"difficulty":5.5,"effort":1487.82,"length":59,"time":82.657,"vocabulary":24,"volume":270.513,"operands":{"distinct":18,"total":33,"identifiers":["expect","\"$hello$$world$$boo$\"","toSplitInto","type","\"math\"","data","\"hello\"","rawData","\"$hello$\"","display","false","\"world\"","\"$world$\"","\"boo\"","\"$boo$\"","left","\"$\"","right"]},"operators":{"distinct":6,"total":26,"identifiers":["()",".","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":17,"physical":14},"errors":[],"lineEnd":197,"lineStart":184,"name":"<anon method-15>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.692,"halstead":{"bugs":0.072,"difficulty":4.167,"effort":897.888,"length":47,"time":49.883,"vocabulary":24,"volume":215.493,"operands":{"distinct":18,"total":25,"identifiers":["expect","\"hello ( world \\) ) boo\"","toSplitInto","type","\"text\"","data","\"hello \"","\"math\"","\" world \\) \"","rawData","\"( world \\) )\"","display","false","\" boo\"","left","\"(\"","right","\")\""]},"operators":{"distinct":6,"total":22,"identifiers":["()",".","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":13,"physical":23},"errors":[],"lineEnd":221,"lineStart":199,"name":"<anon method-16>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":7.692,"halstead":{"bugs":0.071,"difficulty":4.412,"effort":937.974,"length":47,"time":52.11,"vocabulary":23,"volume":212.607,"operands":{"distinct":17,"total":25,"identifiers":["expect","\"hello $ world $ boo\"","toSplitInto","type","\"text\"","data","\"hello \"","\"math\"","\" world \"","rawData","\"$ world $\"","display","false","\" boo\"","left","\"$\"","right"]},"operators":{"distinct":6,"total":22,"identifiers":["()",".","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":13,"physical":12},"errors":[],"lineEnd":234,"lineStart":223,"name":"<anon method-17>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":11.111,"halstead":{"bugs":0.043,"difficulty":3.269,"effort":422.606,"length":31,"time":23.478,"vocabulary":18,"volume":129.268,"operands":{"distinct":13,"total":17,"identifiers":["expect","\"$x = \\$5$\"","toSplitInto","type","\"math\"","data","\"x = \\$5\"","rawData","display","false","left","\"$\"","right"]},"operators":{"distinct":5,"total":14,"identifiers":["()",".","[]","{}",":"]}},"paramCount":0,"sloc":{"logical":9,"physical":10},"errors":[],"lineEnd":245,"lineStart":236,"name":"<anon method-18>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.085,"difficulty":5.6,"effort":1426.823,"length":53,"time":79.268,"vocabulary":28,"volume":254.79,"operands":{"distinct":20,"total":28,"identifiers":["startData","\"hello ( world ) boo\"","expect","splitAtDelimiters","left","\"(\"","right","\")\"","display","true","toEqual","type","\"text\"","data","\"hello \"","\"math\"","\" world \"","rawData","\"( world )\"","\" boo\""]},"operators":{"distinct":8,"total":25,"identifiers":["const","=","()",".","[]","{}",":",","]}},"paramCount":0,"sloc":{"logical":15,"physical":12},"errors":[],"lineEnd":258,"lineStart":247,"name":"<anon method-19>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.846,"halstead":{"bugs":0.134,"difficulty":8,"effort":3227.814,"length":88,"time":179.323,"vocabulary":24,"volume":403.477,"operands":{"distinct":18,"total":48,"identifiers":["expect","splitAtDelimiters","\"$\\fbox{\\(hi\\)}$\"","left","\"\\(\"","right","\"\\)\"","display","false","\"$\"","toEqual","type","\"math\"","data","\"\\fbox{\\(hi\\)}\"","rawData","\"\\(\\fbox{$hi$}\\)\"","\"\\fbox{$hi$}\""]},"operators":{"distinct":6,"total":40,"identifiers":["()",".","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":26,"physical":20},"errors":[],"lineEnd":279,"lineStart":260,"name":"<anon method-20>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":2.5,"halstead":{"bugs":0.223,"difficulty":9.913,"effort":6645.718,"length":138,"time":369.207,"vocabulary":29,"volume":670.401,"operands":{"distinct":23,"total":76,"identifiers":["expect","splitAtDelimiters","\"$hello$world$$boo$$\"","left","\"$$\"","right","display","true","\"$\"","false","toEqual","type","\"math\"","data","\"hello\"","rawData","\"$hello$\"","\"text\"","\"world\"","\"boo\"","\"$$boo$$\"","\"$hello$$world$$$boo$$\"","\"$world$\""]},"operators":{"distinct":6,"total":62,"identifiers":["()",".","[]",",","{}",":"]}},"paramCount":0,"sloc":{"logical":40,"physical":27},"errors":[],"lineEnd":307,"lineStart":281,"name":"<anon method-21>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["it","\"replace `-squared` with `^2 `\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":2,"physical":15},"errors":[],"lineEnd":324,"lineStart":310,"name":"<anon method-22>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":5.556,"halstead":{"bugs":0.107,"difficulty":7.4,"effort":2383.487,"length":67,"time":132.416,"vocabulary":28,"volume":322.093,"operands":{"distinct":20,"total":37,"identifiers":["el1","document","createElement","\"div\"","textContent","\"Circle equation: $x-squared + y-squared = r-squared$.\"","el2","\"Circle equation: $x^2 + y^2 = r^2$.\"","delimiters","left","\"$\"","right","display","false","renderMathInElement","preProcess","math","expect","innerHTML","toEqual"]},"operators":{"distinct":8,"total":30,"identifiers":["const","=","()",".","[]","{}",":","function=>"]}},"paramCount":0,"sloc":{"logical":18,"physical":13},"errors":[],"lineEnd":323,"lineStart":311,"name":"<anon method-23>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.005,"difficulty":1,"effort":15.51,"length":6,"time":0.862,"vocabulary":6,"volume":15.51,"operands":{"distinct":4,"total":4,"identifiers":["math","replace","/-squared/g","\"^2\""]},"operators":{"distinct":2,"total":2,"identifiers":["()","."]}},"paramCount":1,"sloc":{"logical":2,"physical":1},"errors":[],"lineEnd":319,"lineStart":319,"name":"<anon method-24>","paramNames":["math"],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":25,"halstead":{"bugs":0.006,"difficulty":1.333,"effort":24.767,"length":8,"time":1.376,"vocabulary":5,"volume":18.575,"operands":{"distinct":3,"total":4,"identifiers":["it","\"parse adjacent text nodes with math\"","\"parse adjacent text nodes without math\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","function"]}},"paramCount":0,"sloc":{"logical":4,"physical":38},"errors":[],"lineEnd":363,"lineStart":326,"name":"<anon method-25>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":8.696,"halstead":{"bugs":0.177,"difficulty":12.96,"effort":6886.481,"length":102,"time":382.582,"vocabulary":37,"volume":531.364,"operands":{"distinct":25,"total":54,"identifiers":["textNodes","\"\\[\"","\"x^2 + y^2 = r^2\"","\"\\]\"","el","document","createElement","\"div\"","i","0","length","txt","createTextNode","appendChild","el2","join","\"\"","delimiters","left","right","display","true","renderMathInElement","expect","toStrictEqual"]},"operators":{"distinct":12,"total":48,"identifiers":["const","=","[]",",","()",".","for","let","<","++ (postfix)","{}",":"]}},"paramCount":0,"sloc":{"logical":23,"physical":17},"errors":[],"lineEnd":343,"lineStart":327,"name":"<anon method-26>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":3,"cyclomaticDensity":14.286,"halstead":{"bugs":0.184,"difficulty":13.2,"effort":7289.067,"length":106,"time":404.948,"vocabulary":37,"volume":552.202,"operands":{"distinct":25,"total":55,"identifiers":["textNodes","\"Lorem ipsum dolor\"","\"sit amet\"","\"consectetur adipiscing elit\"","el","document","createElement","\"div\"","i","0","length","txt","createTextNode","appendChild","el2","delimiters","left","\"\\[\"","right","\"\\]\"","display","true","renderMathInElement","expect","toStrictEqual"]},"operators":{"distinct":12,"total":51,"identifiers":["const","=","[]",",","()",".","for","let","<","++ (postfix)","{}",":"]}},"paramCount":0,"sloc":{"logical":21,"physical":18},"errors":[],"lineEnd":362,"lineStart":345,"name":"<anon method-27>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}],"aggregateAverage":{"cyclomatic":1.321,"cyclomaticDensity":0.325,"halstead":{"bugs":0.13,"difficulty":1.927,"effort":21086.562,"length":52.571,"time":1171.476,"vocabulary":6.179,"volume":390.849,"operands":{"distinct":5.429,"total":27.893},"operators":{"distinct":0.75,"total":24.679}},"paramCount":0.143,"sloc":{"logical":14.5,"physical":13}},"methodAverage":{"cyclomatic":1.333,"cyclomaticDensity":18.166,"halstead":{"bugs":0.084,"difficulty":5.56,"effort":2278.219,"length":53.963,"time":126.568,"vocabulary":21.185,"volume":253.064,"operands":{"distinct":15.296,"total":28.667},"operators":{"distinct":5.889,"total":25.296}},"paramCount":0.148,"sloc":{"logical":14.741,"physical":25.667}}}}]}